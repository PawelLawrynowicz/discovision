
camera_bsp_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fff4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  080102a4  080102a4  000202a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010988  08010988  00020988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010990  08010990  00020990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010994  08010994  00020994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  24000000  08010998  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000dff90  240000b8  08010a50  000300b8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240e0048  08010a50  00040048  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024c37  00000000  00000000  000300e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000049f9  00000000  00000000  00054d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001838  00000000  00000000  00059718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001650  00000000  00000000  0005af50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037ed6  00000000  00000000  0005c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025ac9  00000000  00000000  00094476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014e7b6  00000000  00000000  000b9f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002086f5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006b04  00000000  00000000  00208748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000b8 	.word	0x240000b8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0801028c 	.word	0x0801028c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000bc 	.word	0x240000bc
 80002ec:	0801028c 	.word	0x0801028c

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */
//
  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_DCMI_Init+0x60>)
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <MX_DCMI_Init+0x64>)
 800069c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006a6:	2220      	movs	r2, #32
 80006a8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006b2:	2240      	movs	r2, #64	; 0x40
 80006b4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006dc:	2200      	movs	r2, #0
 80006de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006e2:	f003 ff4f 	bl	8004584 <HAL_DCMI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80006ec:	f000 ff7c 	bl	80015e8 <Error_Handler>
//  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
//  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
//  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
  /* USER CODE END DCMI_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	240000d4 	.word	0x240000d4
 80006f8:	48020000 	.word	0x48020000

080006fc <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a76      	ldr	r2, [pc, #472]	; (80008f4 <HAL_DCMI_MspInit+0x1f8>)
 800071a:	4293      	cmp	r3, r2
 800071c:	f040 80e5 	bne.w	80008ea <HAL_DCMI_MspInit+0x1ee>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */
//
  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000720:	4b75      	ldr	r3, [pc, #468]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000722:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000726:	4a74      	ldr	r2, [pc, #464]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8000730:	4b71      	ldr	r3, [pc, #452]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000732:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b6e      	ldr	r3, [pc, #440]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000740:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000744:	4a6c      	ldr	r2, [pc, #432]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800074e:	4b6a      	ldr	r3, [pc, #424]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000750:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000754:	f003 0302 	and.w	r3, r3, #2
 8000758:	61fb      	str	r3, [r7, #28]
 800075a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800075c:	4b66      	ldr	r3, [pc, #408]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800075e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000762:	4a65      	ldr	r2, [pc, #404]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000768:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800076c:	4b62      	ldr	r3, [pc, #392]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800076e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	4b5f      	ldr	r3, [pc, #380]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800077c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000780:	4a5d      	ldr	r2, [pc, #372]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000782:	f043 0308 	orr.w	r3, r3, #8
 8000786:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800078a:	4b5b      	ldr	r3, [pc, #364]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800078c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000790:	f003 0308 	and.w	r3, r3, #8
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000798:	4b57      	ldr	r3, [pc, #348]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800079a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800079e:	4a56      	ldr	r2, [pc, #344]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007a8:	4b53      	ldr	r3, [pc, #332]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b50      	ldr	r3, [pc, #320]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007bc:	4a4e      	ldr	r2, [pc, #312]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007c6:	4b4c      	ldr	r3, [pc, #304]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7;
 80007d4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007e6:	230d      	movs	r3, #13
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4842      	ldr	r0, [pc, #264]	; (80008fc <HAL_DCMI_MspInit+0x200>)
 80007f2:	f008 f901 	bl	80089f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000808:	230d      	movs	r3, #13
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800080c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000810:	4619      	mov	r1, r3
 8000812:	483b      	ldr	r0, [pc, #236]	; (8000900 <HAL_DCMI_MspInit+0x204>)
 8000814:	f008 f8f0 	bl	80089f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000818:	2308      	movs	r3, #8
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000828:	230d      	movs	r3, #13
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	4619      	mov	r1, r3
 8000832:	4834      	ldr	r0, [pc, #208]	; (8000904 <HAL_DCMI_MspInit+0x208>)
 8000834:	f008 f8e0 	bl	80089f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6;
 8000838:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800084a:	230d      	movs	r3, #13
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	482c      	ldr	r0, [pc, #176]	; (8000908 <HAL_DCMI_MspInit+0x20c>)
 8000856:	f008 f8cf 	bl	80089f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800085a:	2350      	movs	r3, #80	; 0x50
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800086a:	230d      	movs	r3, #13
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000872:	4619      	mov	r1, r3
 8000874:	4825      	ldr	r0, [pc, #148]	; (800090c <HAL_DCMI_MspInit+0x210>)
 8000876:	f008 f8bf 	bl	80089f8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800087c:	4a25      	ldr	r2, [pc, #148]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 800087e:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 8000882:	224b      	movs	r2, #75	; 0x4b
 8000884:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000886:	4b22      	ldr	r3, [pc, #136]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800088c:	4b20      	ldr	r3, [pc, #128]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 8000894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000898:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800089a:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800089c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008a0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008a8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008b6:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80008be:	4814      	ldr	r0, [pc, #80]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008c0:	f004 f92e 	bl	8004b20 <HAL_DMA_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_DCMI_MspInit+0x1d2>
    {
      Error_Handler();
 80008ca:	f000 fe8d 	bl	80015e8 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008d2:	649a      	str	r2, [r3, #72]	; 0x48
 80008d4:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	204e      	movs	r0, #78	; 0x4e
 80008e0:	f003 fe1b 	bl	800451a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 80008e4:	204e      	movs	r0, #78	; 0x4e
 80008e6:	f003 fe32 	bl	800454e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */
//
  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80008ea:	bf00      	nop
 80008ec:	3738      	adds	r7, #56	; 0x38
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	48020000 	.word	0x48020000
 80008f8:	58024400 	.word	0x58024400
 80008fc:	58020400 	.word	0x58020400
 8000900:	58021800 	.word	0x58021800
 8000904:	58020c00 	.word	0x58020c00
 8000908:	58020800 	.word	0x58020800
 800090c:	58020000 	.word	0x58020000
 8000910:	24000124 	.word	0x24000124
 8000914:	40020428 	.word	0x40020428

08000918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MX_DMA_Init+0x3c>)
 8000920:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000924:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <MX_DMA_Init+0x3c>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_DMA_Init+0x3c>)
 8000930:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2039      	movs	r0, #57	; 0x39
 8000942:	f003 fdea 	bl	800451a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000946:	2039      	movs	r0, #57	; 0x39
 8000948:	f003 fe01 	bl	800454e <HAL_NVIC_EnableIRQ>

}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	58024400 	.word	0x58024400

08000958 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800095e:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <MX_DMA2D_Init+0x74>)
 8000960:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_PFC;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000964:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000968:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800096c:	2201      	movs	r2, #1
 800096e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000978:	2200      	movs	r2, #0
 800097a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800097e:	2201      	movs	r2, #1
 8000980:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000984:	2200      	movs	r2, #0
 8000986:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800098a:	2200      	movs	r2, #0
 800098c:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000990:	2200      	movs	r2, #0
 8000992:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000996:	2200      	movs	r2, #0
 8000998:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800099c:	2200      	movs	r2, #0
 800099e:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <MX_DMA2D_Init+0x70>)
 80009a2:	f006 ff9d 	bl	80078e0 <HAL_DMA2D_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_DMA2D_Init+0x58>
  {
    Error_Handler();
 80009ac:	f000 fe1c 	bl	80015e8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009b0:	2101      	movs	r1, #1
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_DMA2D_Init+0x70>)
 80009b4:	f007 fa1c 	bl	8007df0 <HAL_DMA2D_ConfigLayer>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_DMA2D_Init+0x6a>
  {
    Error_Handler();
 80009be:	f000 fe13 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2400019c 	.word	0x2400019c
 80009cc:	52001000 	.word	0x52001000

080009d0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <HAL_DMA2D_MspInit+0x48>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d116      	bne.n	8000a10 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_DMA2D_MspInit+0x4c>)
 80009e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80009e8:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <HAL_DMA2D_MspInit+0x4c>)
 80009ea:	f043 0310 	orr.w	r3, r3, #16
 80009ee:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_DMA2D_MspInit+0x4c>)
 80009f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80009f8:	f003 0310 	and.w	r3, r3, #16
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	205a      	movs	r0, #90	; 0x5a
 8000a06:	f003 fd88 	bl	800451a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a0a:	205a      	movs	r0, #90	; 0x5a
 8000a0c:	f003 fd9f 	bl	800454e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	52001000 	.word	0x52001000
 8000a1c:	58024400 	.word	0x58024400

08000a20 <DMA2D_Convert>:
  }
}

/* USER CODE BEGIN 1 */
void DMA2D_Convert(uint8_t* source, uint32_t* destination)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  status = HAL_DMA2D_Start(&hdma2d, (uint32_t)source,
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <DMA2D_Convert+0x4c>)
 8000a3a:	f006 ffb5 	bl	80079a8 <HAL_DMA2D_Start>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	73fb      	strb	r3, [r7, #15]
                        (uint32_t)destination, 480, 272);
  if (status != HAL_OK) {
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <DMA2D_Convert+0x2c>
    Error_Handler();
 8000a48:	f000 fdce 	bl	80015e8 <Error_Handler>
  }

  status = HAL_DMA2D_PollForTransfer(&hdma2d, 1000);
 8000a4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <DMA2D_Convert+0x4c>)
 8000a52:	f006 ffd4 	bl	80079fe <HAL_DMA2D_PollForTransfer>
 8000a56:	4603      	mov	r3, r0
 8000a58:	73fb      	strb	r3, [r7, #15]
  if (status != HAL_OK) {
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <DMA2D_Convert+0x44>
    Error_Handler();
 8000a60:	f000 fdc2 	bl	80015e8 <Error_Handler>
  }
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	2400019c 	.word	0x2400019c

08000a70 <drawVLine>:
/* Includes ------------------------------------------------------------------*/
#include "gpio.h"

void drawVLine(uint32_t *buffer, uint32_t x, uint32_t y_start, uint32_t y_end){
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
	for(uint32_t i = y_start; i<y_end; i++){
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	e011      	b.n	8000aa8 <drawVLine+0x38>
			buffer[(x+i*LTDC_WIDTH)/2] = COLOR;
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	4613      	mov	r3, r2
 8000a88:	011b      	lsls	r3, r3, #4
 8000a8a:	1a9b      	subs	r3, r3, r2
 8000a8c:	015b      	lsls	r3, r3, #5
 8000a8e:	461a      	mov	r2, r3
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	4413      	add	r3, r2
 8000a94:	085b      	lsrs	r3, r3, #1
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	f04f 220f 	mov.w	r2, #251662080	; 0xf000f00
 8000aa0:	601a      	str	r2, [r3, #0]
	for(uint32_t i = y_start; i<y_end; i++){
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d3e9      	bcc.n	8000a84 <drawVLine+0x14>
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	371c      	adds	r7, #28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <drawHLine>:
void drawHLine(uint32_t *buffer, uint32_t x_start, uint32_t x_end, uint32_t y){
 8000abe:	b480      	push	{r7}
 8000ac0:	b087      	sub	sp, #28
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	60f8      	str	r0, [r7, #12]
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
 8000aca:	603b      	str	r3, [r7, #0]
	x_end=x_end+x_end%2;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	f023 0301 	bic.w	r3, r3, #1
 8000ad4:	607b      	str	r3, [r7, #4]
	for(uint32_t i = x_start/2; i<x_end/2; i++){
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	085b      	lsrs	r3, r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
 8000adc:	e01f      	b.n	8000b1e <drawHLine+0x60>
		buffer[i+LTDC_WIDTH*y/2] = COLOR;
 8000ade:	683a      	ldr	r2, [r7, #0]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	011b      	lsls	r3, r3, #4
 8000ae4:	1a9b      	subs	r3, r3, r2
 8000ae6:	015b      	lsls	r3, r3, #5
 8000ae8:	085a      	lsrs	r2, r3, #1
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	4413      	add	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	4413      	add	r3, r2
 8000af4:	f04f 220f 	mov.w	r2, #251662080	; 0xf000f00
 8000af8:	601a      	str	r2, [r3, #0]
		buffer[i+(LTDC_WIDTH+LTDC_WIDTH*y)/2] = COLOR;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	1c5a      	adds	r2, r3, #1
 8000afe:	4613      	mov	r3, r2
 8000b00:	011b      	lsls	r3, r3, #4
 8000b02:	1a9b      	subs	r3, r3, r2
 8000b04:	015b      	lsls	r3, r3, #5
 8000b06:	085a      	lsrs	r2, r3, #1
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	4413      	add	r3, r2
 8000b12:	f04f 220f 	mov.w	r2, #251662080	; 0xf000f00
 8000b16:	601a      	str	r2, [r3, #0]
	for(uint32_t i = x_start/2; i<x_end/2; i++){
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	085b      	lsrs	r3, r3, #1
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d3da      	bcc.n	8000ade <drawHLine+0x20>
	}
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	371c      	adds	r7, #28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <drawRectangle>:
void drawRectangle(uint32_t *buffer, uint32_t x_start, uint32_t x_end, uint32_t y_start, uint32_t y_end){
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b084      	sub	sp, #16
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	603b      	str	r3, [r7, #0]
	drawVLine(buffer, x_start, y_start, y_end);
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	683a      	ldr	r2, [r7, #0]
 8000b48:	68b9      	ldr	r1, [r7, #8]
 8000b4a:	68f8      	ldr	r0, [r7, #12]
 8000b4c:	f7ff ff90 	bl	8000a70 <drawVLine>
	drawVLine(buffer, x_end, y_start, y_end);
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	683a      	ldr	r2, [r7, #0]
 8000b54:	6879      	ldr	r1, [r7, #4]
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	f7ff ff8a 	bl	8000a70 <drawVLine>
	drawHLine(buffer, x_start, x_end, y_start);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f7ff ffab 	bl	8000abe <drawHLine>
	drawHLine(buffer, x_start, x_end, y_end);
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	68b9      	ldr	r1, [r7, #8]
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f7ff ffa5 	bl	8000abe <drawHLine>
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <MX_GPIO_Init>:
     PE8   ------> FMC_D5_DA5
     PE11   ------> FMC_D8_DA8
     PH7   ------> FMC_SDCKE1
*/
void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b090      	sub	sp, #64	; 0x40
 8000b80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b92:	4bbf      	ldr	r3, [pc, #764]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000b94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b98:	4abd      	ldr	r2, [pc, #756]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ba2:	4bbb      	ldr	r3, [pc, #748]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000ba4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb0:	4bb7      	ldr	r3, [pc, #732]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000bb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb6:	4ab6      	ldr	r2, [pc, #728]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bc0:	4bb3      	ldr	r3, [pc, #716]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000bc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bce:	4bb0      	ldr	r3, [pc, #704]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000bd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bd4:	4aae      	ldr	r2, [pc, #696]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bda:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bde:	4bac      	ldr	r3, [pc, #688]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000be0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be8:	623b      	str	r3, [r7, #32]
 8000bea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000bec:	4ba8      	ldr	r3, [pc, #672]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000bee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bf2:	4aa7      	ldr	r2, [pc, #668]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000bf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bfc:	4ba4      	ldr	r3, [pc, #656]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000bfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c06:	61fb      	str	r3, [r7, #28]
 8000c08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0a:	4ba1      	ldr	r3, [pc, #644]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000c0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c10:	4a9f      	ldr	r2, [pc, #636]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000c12:	f043 0308 	orr.w	r3, r3, #8
 8000c16:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c1a:	4b9d      	ldr	r3, [pc, #628]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000c1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c20:	f003 0308 	and.w	r3, r3, #8
 8000c24:	61bb      	str	r3, [r7, #24]
 8000c26:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c28:	4b99      	ldr	r3, [pc, #612]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000c2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c2e:	4a98      	ldr	r2, [pc, #608]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000c30:	f043 0304 	orr.w	r3, r3, #4
 8000c34:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c38:	4b95      	ldr	r3, [pc, #596]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000c3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c46:	4b92      	ldr	r3, [pc, #584]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000c48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c4c:	4a90      	ldr	r2, [pc, #576]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c56:	4b8e      	ldr	r3, [pc, #568]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000c58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c5c:	f003 0310 	and.w	r3, r3, #16
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c64:	4b8a      	ldr	r3, [pc, #552]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000c66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c6a:	4a89      	ldr	r2, [pc, #548]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000c6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c70:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c74:	4b86      	ldr	r3, [pc, #536]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000c76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b83      	ldr	r3, [pc, #524]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000c84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c88:	4a81      	ldr	r2, [pc, #516]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c92:	4b7f      	ldr	r3, [pc, #508]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000c94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca0:	4b7b      	ldr	r3, [pc, #492]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000ca2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ca6:	4a7a      	ldr	r2, [pc, #488]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000ca8:	f043 0320 	orr.w	r3, r3, #32
 8000cac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cb0:	4b77      	ldr	r3, [pc, #476]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000cb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cb6:	f003 0320 	and.w	r3, r3, #32
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbe:	4b74      	ldr	r3, [pc, #464]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000cc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cc4:	4a72      	ldr	r2, [pc, #456]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cce:	4b70      	ldr	r3, [pc, #448]	; (8000e90 <MX_GPIO_Init+0x314>)
 8000cd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	210e      	movs	r1, #14
 8000ce0:	486c      	ldr	r0, [pc, #432]	; (8000e94 <MX_GPIO_Init+0x318>)
 8000ce2:	f008 f943 	bl	8008f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f640 0104 	movw	r1, #2052	; 0x804
 8000cec:	486a      	ldr	r0, [pc, #424]	; (8000e98 <MX_GPIO_Init+0x31c>)
 8000cee:	f008 f93d 	bl	8008f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cf8:	4868      	ldr	r0, [pc, #416]	; (8000e9c <MX_GPIO_Init+0x320>)
 8000cfa:	f008 f937 	bl	8008f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2108      	movs	r1, #8
 8000d02:	4865      	ldr	r0, [pc, #404]	; (8000e98 <MX_GPIO_Init+0x31c>)
 8000d04:	f008 f932 	bl	8008f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2106      	movs	r1, #6
 8000d0c:	4863      	ldr	r0, [pc, #396]	; (8000e9c <MX_GPIO_Init+0x320>)
 8000d0e:	f008 f92d 	bl	8008f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8000d12:	2330      	movs	r3, #48	; 0x30
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d24:	4619      	mov	r1, r3
 8000d26:	485b      	ldr	r0, [pc, #364]	; (8000e94 <MX_GPIO_Init+0x318>)
 8000d28:	f007 fe66 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000d2c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d3e:	230c      	movs	r3, #12
 8000d40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d46:	4619      	mov	r1, r3
 8000d48:	4853      	ldr	r0, [pc, #332]	; (8000e98 <MX_GPIO_Init+0x31c>)
 8000d4a:	f007 fe55 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8000d4e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000d60:	2305      	movs	r3, #5
 8000d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d68:	4619      	mov	r1, r3
 8000d6a:	484b      	ldr	r0, [pc, #300]	; (8000e98 <MX_GPIO_Init+0x31c>)
 8000d6c:	f007 fe44 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8000d70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000d82:	2309      	movs	r3, #9
 8000d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4842      	ldr	r0, [pc, #264]	; (8000e98 <MX_GPIO_Init+0x31c>)
 8000d8e:	f007 fe33 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000da2:	230a      	movs	r3, #10
 8000da4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000daa:	4619      	mov	r1, r3
 8000dac:	483c      	ldr	r0, [pc, #240]	; (8000ea0 <MX_GPIO_Init+0x324>)
 8000dae:	f007 fe23 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000db2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dc4:	230c      	movs	r3, #12
 8000dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4834      	ldr	r0, [pc, #208]	; (8000ea0 <MX_GPIO_Init+0x324>)
 8000dd0:	f007 fe12 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 8000dd4:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000de6:	230c      	movs	r3, #12
 8000de8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dee:	4619      	mov	r1, r3
 8000df0:	482c      	ldr	r0, [pc, #176]	; (8000ea4 <MX_GPIO_Init+0x328>)
 8000df2:	f007 fe01 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8000df6:	230e      	movs	r3, #14
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4821      	ldr	r0, [pc, #132]	; (8000e94 <MX_GPIO_Init+0x318>)
 8000e0e:	f007 fdf3 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000e12:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e24:	230c      	movs	r3, #12
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481e      	ldr	r0, [pc, #120]	; (8000ea8 <MX_GPIO_Init+0x32c>)
 8000e30:	f007 fde2 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8000e34:	f640 030c 	movw	r3, #2060	; 0x80c
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4812      	ldr	r0, [pc, #72]	; (8000e98 <MX_GPIO_Init+0x31c>)
 8000e4e:	f007 fdd3 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000e52:	2304      	movs	r3, #4
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e62:	230c      	movs	r3, #12
 8000e64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <MX_GPIO_Init+0x324>)
 8000e6e:	f007 fdc3 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e86:	4619      	mov	r1, r3
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <MX_GPIO_Init+0x318>)
 8000e8a:	f007 fdb5 	bl	80089f8 <HAL_GPIO_Init>
 8000e8e:	e00d      	b.n	8000eac <MX_GPIO_Init+0x330>
 8000e90:	58024400 	.word	0x58024400
 8000e94:	58022000 	.word	0x58022000
 8000e98:	58021800 	.word	0x58021800
 8000e9c:	58020000 	.word	0x58020000
 8000ea0:	58020c00 	.word	0x58020c00
 8000ea4:	58020800 	.word	0x58020800
 8000ea8:	58021000 	.word	0x58021000

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8000eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4869      	ldr	r0, [pc, #420]	; (8001070 <MX_GPIO_Init+0x4f4>)
 8000eca:	f007 fd95 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8000ece:	f640 0306 	movw	r3, #2054	; 0x806
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4862      	ldr	r0, [pc, #392]	; (8001070 <MX_GPIO_Init+0x4f4>)
 8000ee8:	f007 fd86 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8000eec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f00:	4619      	mov	r1, r3
 8000f02:	485c      	ldr	r0, [pc, #368]	; (8001074 <MX_GPIO_Init+0x4f8>)
 8000f04:	f007 fd78 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000f08:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f1a:	230c      	movs	r3, #12
 8000f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f22:	4619      	mov	r1, r3
 8000f24:	4854      	ldr	r0, [pc, #336]	; (8001078 <MX_GPIO_Init+0x4fc>)
 8000f26:	f007 fd67 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f44:	4619      	mov	r1, r3
 8000f46:	484a      	ldr	r0, [pc, #296]	; (8001070 <MX_GPIO_Init+0x4f4>)
 8000f48:	f007 fd56 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8000f4c:	2340      	movs	r3, #64	; 0x40
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000f5c:	230a      	movs	r3, #10
 8000f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f64:	4619      	mov	r1, r3
 8000f66:	4845      	ldr	r0, [pc, #276]	; (800107c <MX_GPIO_Init+0x500>)
 8000f68:	f007 fd46 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000f6c:	230c      	movs	r3, #12
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f7c:	2305      	movs	r3, #5
 8000f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f84:	4619      	mov	r1, r3
 8000f86:	483b      	ldr	r0, [pc, #236]	; (8001074 <MX_GPIO_Init+0x4f8>)
 8000f88:	f007 fd36 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8000f8c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f92:	2312      	movs	r3, #18
 8000f94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4835      	ldr	r0, [pc, #212]	; (8001080 <MX_GPIO_Init+0x504>)
 8000faa:	f007 fd25 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 8000fae:	2322      	movs	r3, #34	; 0x22
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000fbe:	230a      	movs	r3, #10
 8000fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	482a      	ldr	r0, [pc, #168]	; (8001074 <MX_GPIO_Init+0x4f8>)
 8000fca:	f007 fd15 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4828      	ldr	r0, [pc, #160]	; (8001084 <MX_GPIO_Init+0x508>)
 8000fe4:	f007 fd08 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000fe8:	23e0      	movs	r3, #224	; 0xe0
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ff8:	230c      	movs	r3, #12
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001000:	4619      	mov	r1, r3
 8001002:	4820      	ldr	r0, [pc, #128]	; (8001084 <MX_GPIO_Init+0x508>)
 8001004:	f007 fcf8 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 8001008:	2308      	movs	r3, #8
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001018:	2309      	movs	r3, #9
 800101a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001020:	4619      	mov	r1, r3
 8001022:	4818      	ldr	r0, [pc, #96]	; (8001084 <MX_GPIO_Init+0x508>)
 8001024:	f007 fce8 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 8001028:	2309      	movs	r3, #9
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001038:	2305      	movs	r3, #5
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001040:	4619      	mov	r1, r3
 8001042:	480b      	ldr	r0, [pc, #44]	; (8001070 <MX_GPIO_Init+0x4f4>)
 8001044:	f007 fcd8 	bl	80089f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8001048:	2304      	movs	r3, #4
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001058:	2309      	movs	r3, #9
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001060:	4619      	mov	r1, r3
 8001062:	4809      	ldr	r0, [pc, #36]	; (8001088 <MX_GPIO_Init+0x50c>)
 8001064:	f007 fcc8 	bl	80089f8 <HAL_GPIO_Init>

}
 8001068:	bf00      	nop
 800106a:	3740      	adds	r7, #64	; 0x40
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	58020000 	.word	0x58020000
 8001074:	58020800 	.word	0x58020800
 8001078:	58021400 	.word	0x58021400
 800107c:	58021800 	.word	0x58021800
 8001080:	58020c00 	.word	0x58020c00
 8001084:	58021c00 	.word	0x58021c00
 8001088:	58020400 	.word	0x58020400

0800108c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08e      	sub	sp, #56	; 0x38
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2234      	movs	r2, #52	; 0x34
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f00e f893 	bl	800f1c4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800109e:	4b38      	ldr	r3, [pc, #224]	; (8001180 <MX_LTDC_Init+0xf4>)
 80010a0:	4a38      	ldr	r2, [pc, #224]	; (8001184 <MX_LTDC_Init+0xf8>)
 80010a2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80010a4:	4b36      	ldr	r3, [pc, #216]	; (8001180 <MX_LTDC_Init+0xf4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80010aa:	4b35      	ldr	r3, [pc, #212]	; (8001180 <MX_LTDC_Init+0xf4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 80010b0:	4b33      	ldr	r3, [pc, #204]	; (8001180 <MX_LTDC_Init+0xf4>)
 80010b2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80010b6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80010b8:	4b31      	ldr	r3, [pc, #196]	; (8001180 <MX_LTDC_Init+0xf4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80010be:	4b30      	ldr	r3, [pc, #192]	; (8001180 <MX_LTDC_Init+0xf4>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80010c4:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <MX_LTDC_Init+0xf4>)
 80010c6:	2203      	movs	r2, #3
 80010c8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <MX_LTDC_Init+0xf4>)
 80010cc:	220e      	movs	r2, #14
 80010ce:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80010d0:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <MX_LTDC_Init+0xf4>)
 80010d2:	2205      	movs	r2, #5
 80010d4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80010d6:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <MX_LTDC_Init+0xf4>)
 80010d8:	f240 228e 	movw	r2, #654	; 0x28e
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80010de:	4b28      	ldr	r3, [pc, #160]	; (8001180 <MX_LTDC_Init+0xf4>)
 80010e0:	f240 12e5 	movw	r2, #485	; 0x1e5
 80010e4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80010e6:	4b26      	ldr	r3, [pc, #152]	; (8001180 <MX_LTDC_Init+0xf4>)
 80010e8:	f44f 7225 	mov.w	r2, #660	; 0x294
 80010ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80010ee:	4b24      	ldr	r3, [pc, #144]	; (8001180 <MX_LTDC_Init+0xf4>)
 80010f0:	f240 12e7 	movw	r2, #487	; 0x1e7
 80010f4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80010f6:	4b22      	ldr	r3, [pc, #136]	; (8001180 <MX_LTDC_Init+0xf4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <MX_LTDC_Init+0xf4>)
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001106:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <MX_LTDC_Init+0xf4>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800110e:	481c      	ldr	r0, [pc, #112]	; (8001180 <MX_LTDC_Init+0xf4>)
 8001110:	f008 fdcc 	bl	8009cac <HAL_LTDC_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 800111a:	f000 fa65 	bl	80015e8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800112e:	2302      	movs	r3, #2
 8001130:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800113a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001140:	2305      	movs	r3, #5
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_LTDC_Init+0xf4>)
 800116a:	f008 ff31 	bl	8009fd0 <HAL_LTDC_ConfigLayer>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8001174:	f000 fa38 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	3738      	adds	r7, #56	; 0x38
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	24000204 	.word	0x24000204
 8001184:	50001000 	.word	0x50001000

08001188 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0bc      	sub	sp, #240	; 0xf0
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a0:	f107 0318 	add.w	r3, r7, #24
 80011a4:	22c0      	movs	r2, #192	; 0xc0
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00e f80b 	bl	800f1c4 <memset>
  if(ltdcHandle->Instance==LTDC)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a5b      	ldr	r2, [pc, #364]	; (8001320 <HAL_LTDC_MspInit+0x198>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	f040 80ae 	bne.w	8001316 <HAL_LTDC_MspInit+0x18e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011ba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80011be:	f04f 0300 	mov.w	r3, #0
 80011c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 80011c6:	2302      	movs	r3, #2
 80011c8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 11;
 80011ca:	230b      	movs	r3, #11
 80011cc:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 80011ce:	2311      	movs	r3, #17
 80011d0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 11;
 80011d6:	230b      	movs	r3, #11
 80011d8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80011da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011de:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	4618      	mov	r0, r3
 80011ee:	f00a f959 	bl	800b4a4 <HAL_RCCEx_PeriphCLKConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 80011f8:	f000 f9f6 	bl	80015e8 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011fc:	4b49      	ldr	r3, [pc, #292]	; (8001324 <HAL_LTDC_MspInit+0x19c>)
 80011fe:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001202:	4a48      	ldr	r2, [pc, #288]	; (8001324 <HAL_LTDC_MspInit+0x19c>)
 8001204:	f043 0308 	orr.w	r3, r3, #8
 8001208:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 800120c:	4b45      	ldr	r3, [pc, #276]	; (8001324 <HAL_LTDC_MspInit+0x19c>)
 800120e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800121a:	4b42      	ldr	r3, [pc, #264]	; (8001324 <HAL_LTDC_MspInit+0x19c>)
 800121c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001220:	4a40      	ldr	r2, [pc, #256]	; (8001324 <HAL_LTDC_MspInit+0x19c>)
 8001222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001226:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800122a:	4b3e      	ldr	r3, [pc, #248]	; (8001324 <HAL_LTDC_MspInit+0x19c>)
 800122c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001238:	4b3a      	ldr	r3, [pc, #232]	; (8001324 <HAL_LTDC_MspInit+0x19c>)
 800123a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800123e:	4a39      	ldr	r2, [pc, #228]	; (8001324 <HAL_LTDC_MspInit+0x19c>)
 8001240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001244:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001248:	4b36      	ldr	r3, [pc, #216]	; (8001324 <HAL_LTDC_MspInit+0x19c>)
 800124a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800124e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001256:	4b33      	ldr	r3, [pc, #204]	; (8001324 <HAL_LTDC_MspInit+0x19c>)
 8001258:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800125c:	4a31      	ldr	r2, [pc, #196]	; (8001324 <HAL_LTDC_MspInit+0x19c>)
 800125e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001262:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001266:	4b2f      	ldr	r3, [pc, #188]	; (8001324 <HAL_LTDC_MspInit+0x19c>)
 8001268:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800126c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 8001274:	23ff      	movs	r3, #255	; 0xff
 8001276:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800128c:	230e      	movs	r3, #14
 800128e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001292:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001296:	4619      	mov	r1, r3
 8001298:	4823      	ldr	r0, [pc, #140]	; (8001328 <HAL_LTDC_MspInit+0x1a0>)
 800129a:	f007 fbad 	bl	80089f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 800129e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012b8:	230e      	movs	r3, #14
 80012ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80012be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012c2:	4619      	mov	r1, r3
 80012c4:	4819      	ldr	r0, [pc, #100]	; (800132c <HAL_LTDC_MspInit+0x1a4>)
 80012c6:	f007 fb97 	bl	80089f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 80012ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80012ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012e4:	230e      	movs	r3, #14
 80012e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012ea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012ee:	4619      	mov	r1, r3
 80012f0:	480f      	ldr	r0, [pc, #60]	; (8001330 <HAL_LTDC_MspInit+0x1a8>)
 80012f2:	f007 fb81 	bl	80089f8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2058      	movs	r0, #88	; 0x58
 80012fc:	f003 f90d 	bl	800451a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001300:	2058      	movs	r0, #88	; 0x58
 8001302:	f003 f924 	bl	800454e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	2059      	movs	r0, #89	; 0x59
 800130c:	f003 f905 	bl	800451a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001310:	2059      	movs	r0, #89	; 0x59
 8001312:	f003 f91c 	bl	800454e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001316:	bf00      	nop
 8001318:	37f0      	adds	r7, #240	; 0xf0
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	50001000 	.word	0x50001000
 8001324:	58024400 	.word	0x58024400
 8001328:	58022800 	.word	0x58022800
 800132c:	58022400 	.word	0x58022400
 8001330:	58022000 	.word	0x58022000

08001334 <LTDC_Init_from_buffer>:
  /* USER CODE END LTDC_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTDC_Init_from_buffer(uint32_t* buffer){
 8001334:	b580      	push	{r7, lr}
 8001336:	b090      	sub	sp, #64	; 0x40
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2234      	movs	r2, #52	; 0x34
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f00d ff3d 	bl	800f1c4 <memset>
	pLayerCfg.WindowX0 = 28;
 800134a:	231c      	movs	r3, #28
 800134c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = 508;
 800134e:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8001352:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 6;
 8001354:	2306      	movs	r3, #6
 8001356:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = 278;
 8001358:	f44f 738b 	mov.w	r3, #278	; 0x116
 800135c:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800135e:	2302      	movs	r3, #2
 8001360:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001362:	23ff      	movs	r3, #255	; 0xff
 8001364:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800136a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001370:	2305      	movs	r3, #5
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.FBStartAdress = (uint32_t)buffer;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.ImageWidth = 480;
 8001378:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = 272;
 800137e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001382:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2200      	movs	r2, #0
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <LTDC_Init_from_buffer+0x84>)
 80013a0:	f008 fe16 	bl	8009fd0 <HAL_LTDC_ConfigLayer>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <LTDC_Init_from_buffer+0x7a>
	{
	Error_Handler();
 80013aa:	f000 f91d 	bl	80015e8 <Error_Handler>
	}
}
 80013ae:	bf00      	nop
 80013b0:	3740      	adds	r7, #64	; 0x40
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	24000204 	.word	0x24000204

080013bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c2:	f002 ff19 	bl	80041f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c6:	f000 f879 	bl	80014bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ca:	f7ff fbd7 	bl	8000b7c <MX_GPIO_Init>
  MX_DMA_Init();
 80013ce:	f7ff faa3 	bl	8000918 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80013d2:	f002 fe29 	bl	8004028 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 80013d6:	f7ff fabf 	bl	8000958 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80013da:	f7ff fe57 	bl	800108c <MX_LTDC_Init>
  MX_DCMI_Init();
 80013de:	f7ff f959 	bl	8000694 <MX_DCMI_Init>
  MX_RTC_Init();
 80013e2:	f001 fe5f 	bl	80030a4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 80013e6:	482d      	ldr	r0, [pc, #180]	; (800149c <main+0xe0>)
 80013e8:	f001 fda6 	bl	8002f38 <RetargetInit>

  printf("BUFFER RANDOM VALUE BEFORE CAPTURE: %d\n", buffer[5640]);
 80013ec:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <main+0xe4>)
 80013ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013f2:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 80013f6:	4619      	mov	r1, r3
 80013f8:	482a      	ldr	r0, [pc, #168]	; (80014a4 <main+0xe8>)
 80013fa:	f00d feeb 	bl	800f1d4 <iprintf>
  //camera init
  BSP_CAMERA_PwrDown(0);
 80013fe:	2000      	movs	r0, #0
 8001400:	f002 fbb3 	bl	8003b6a <BSP_CAMERA_PwrDown>

  if(BSP_CAMERA_Init(0, CAMERA_R480x272, CAMERA_PF_RGB565) != BSP_ERROR_NONE){
 8001404:	2200      	movs	r2, #0
 8001406:	2102      	movs	r1, #2
 8001408:	2000      	movs	r0, #0
 800140a:	f002 fafd 	bl	8003a08 <BSP_CAMERA_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <main+0x5c>
	  Error_Handler();
 8001414:	f000 f8e8 	bl	80015e8 <Error_Handler>
  }

  HAL_Delay(1000);
 8001418:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800141c:	f002 ff7e 	bl	800431c <HAL_Delay>
//  buffer[5460] = 255;
  LTDC_Init_from_buffer(buffer2d);
 8001420:	4821      	ldr	r0, [pc, #132]	; (80014a8 <main+0xec>)
 8001422:	f7ff ff87 	bl	8001334 <LTDC_Init_from_buffer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Printing photo 1");
 8001426:	4821      	ldr	r0, [pc, #132]	; (80014ac <main+0xf0>)
 8001428:	f00d fed4 	bl	800f1d4 <iprintf>
  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001432:	481f      	ldr	r0, [pc, #124]	; (80014b0 <main+0xf4>)
 8001434:	f007 fd9a 	bl	8008f6c <HAL_GPIO_WritePin>
  BSP_CAMERA_Start(0, (uint8_t*)buffer, CAMERA_MODE_SNAPSHOT);
 8001438:	2202      	movs	r2, #2
 800143a:	4919      	ldr	r1, [pc, #100]	; (80014a0 <main+0xe4>)
 800143c:	2000      	movs	r0, #0
 800143e:	f002 fb29 	bl	8003a94 <BSP_CAMERA_Start>
  while(camera_frame_ready == 0) {};
 8001442:	bf00      	nop
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <main+0xf8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0fb      	beq.n	8001444 <main+0x88>
  DMA2D_Convert(buffer, buffer2d);
 800144c:	4916      	ldr	r1, [pc, #88]	; (80014a8 <main+0xec>)
 800144e:	4814      	ldr	r0, [pc, #80]	; (80014a0 <main+0xe4>)
 8001450:	f7ff fae6 	bl	8000a20 <DMA2D_Convert>
  BSP_CAMERA_Stop(0);
 8001454:	2000      	movs	r0, #0
 8001456:	f002 fb57 	bl	8003b08 <BSP_CAMERA_Stop>
  HAL_Delay(500);
 800145a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800145e:	f002 ff5d 	bl	800431c <HAL_Delay>

  drawRectangle(buffer2d, 119, 359, 68, 204);
 8001462:	23cc      	movs	r3, #204	; 0xcc
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2344      	movs	r3, #68	; 0x44
 8001468:	f240 1267 	movw	r2, #359	; 0x167
 800146c:	2177      	movs	r1, #119	; 0x77
 800146e:	480e      	ldr	r0, [pc, #56]	; (80014a8 <main+0xec>)
 8001470:	f7ff fb61 	bl	8000b36 <drawRectangle>

  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <main+0xf4>)
 800147c:	f007 fd76 	bl	8008f6c <HAL_GPIO_WritePin>

  while (1)
  {
	HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 8001480:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001484:	480a      	ldr	r0, [pc, #40]	; (80014b0 <main+0xf4>)
 8001486:	f007 fd8a 	bl	8008f9e <HAL_GPIO_TogglePin>
	printf("siema");
 800148a:	480b      	ldr	r0, [pc, #44]	; (80014b8 <main+0xfc>)
 800148c:	f00d fea2 	bl	800f1d4 <iprintf>
	HAL_Delay(1000);
 8001490:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001494:	f002 ff42 	bl	800431c <HAL_Delay>
	HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 8001498:	e7f2      	b.n	8001480 <main+0xc4>
 800149a:	bf00      	nop
 800149c:	240dffa0 	.word	0x240dffa0
 80014a0:	240002b0 	.word	0x240002b0
 80014a4:	080102a4 	.word	0x080102a4
 80014a8:	2405fcb0 	.word	0x2405fcb0
 80014ac:	080102cc 	.word	0x080102cc
 80014b0:	58021800 	.word	0x58021800
 80014b4:	240002ac 	.word	0x240002ac
 80014b8:	080102e0 	.word	0x080102e0

080014bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b09c      	sub	sp, #112	; 0x70
 80014c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c6:	224c      	movs	r2, #76	; 0x4c
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f00d fe7a 	bl	800f1c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2220      	movs	r2, #32
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f00d fe74 	bl	800f1c4 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80014dc:	4b38      	ldr	r3, [pc, #224]	; (80015c0 <SystemClock_Config+0x104>)
 80014de:	f04f 32ff 	mov.w	r2, #4294967295
 80014e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80014e6:	2004      	movs	r0, #4
 80014e8:	f008 ff5a 	bl	800a3a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80014ec:	2300      	movs	r3, #0
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <SystemClock_Config+0x108>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a33      	ldr	r2, [pc, #204]	; (80015c4 <SystemClock_Config+0x108>)
 80014f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <SystemClock_Config+0x108>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001508:	bf00      	nop
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <SystemClock_Config+0x108>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001516:	d1f8      	bne.n	800150a <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001518:	f008 ff32 	bl	800a380 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800151c:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <SystemClock_Config+0x104>)
 800151e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001520:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <SystemClock_Config+0x104>)
 8001522:	f023 0318 	bic.w	r3, r3, #24
 8001526:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001528:	2305      	movs	r3, #5
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800152c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001532:	2301      	movs	r3, #1
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001536:	2302      	movs	r3, #2
 8001538:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800153a:	2302      	movs	r3, #2
 800153c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800153e:	2302      	movs	r3, #2
 8001540:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001542:	2328      	movs	r3, #40	; 0x28
 8001544:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001546:	2302      	movs	r3, #2
 8001548:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800154a:	2303      	movs	r3, #3
 800154c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 800154e:	2304      	movs	r3, #4
 8001550:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001552:	230c      	movs	r3, #12
 8001554:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001556:	2300      	movs	r3, #0
 8001558:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 5462;
 800155a:	f241 5356 	movw	r3, #5462	; 0x1556
 800155e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001564:	4618      	mov	r0, r3
 8001566:	f008 ff75 	bl	800a454 <HAL_RCC_OscConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001570:	f000 f83a 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001574:	233f      	movs	r3, #63	; 0x3f
 8001576:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001578:	2303      	movs	r3, #3
 800157a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001584:	2340      	movs	r3, #64	; 0x40
 8001586:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001588:	2340      	movs	r3, #64	; 0x40
 800158a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800158c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001590:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001592:	2340      	movs	r3, #64	; 0x40
 8001594:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	2105      	movs	r1, #5
 800159a:	4618      	mov	r0, r3
 800159c:	f009 fb8c 	bl	800acb8 <HAL_RCC_ClockConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SystemClock_Config+0xee>
  {
    Error_Handler();
 80015a6:	f000 f81f 	bl	80015e8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80015aa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015ae:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80015b2:	2000      	movs	r0, #0
 80015b4:	f009 fd36 	bl	800b024 <HAL_RCC_MCOConfig>
}
 80015b8:	bf00      	nop
 80015ba:	3770      	adds	r7, #112	; 0x70
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	58024400 	.word	0x58024400
 80015c4:	58024800 	.word	0x58024800

080015c8 <BSP_CAMERA_FrameEventCallback>:

/* USER CODE BEGIN 4 */

void BSP_CAMERA_FrameEventCallback(uint32_t Instance){
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	camera_frame_ready = 1;
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <BSP_CAMERA_FrameEventCallback+0x1c>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	240002ac 	.word	0x240002ac

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ec:	b672      	cpsid	i
}
 80015ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <Error_Handler+0x8>
	...

080015f4 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d103      	bne.n	800160c <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	e02c      	b.n	8001666 <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	891a      	ldrh	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a0c      	ldr	r2, [pc, #48]	; (8001670 <OV5640_RegisterBusIO+0x7c>)
 8001640:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <OV5640_RegisterBusIO+0x80>)
 8001646:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d004      	beq.n	8001660 <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4798      	blx	r3
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	e002      	b.n	8001666 <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 8001660:	f04f 33ff 	mov.w	r3, #4294967295
 8001664:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001666:	68fb      	ldr	r3, [r7, #12]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	08002e77 	.word	0x08002e77
 8001674:	08002ea9 	.word	0x08002ea9

08001678 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800168e:	2b00      	cmp	r3, #0
 8001690:	d165      	bne.n	800175e <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	2b04      	cmp	r3, #4
 8001696:	d80e      	bhi.n	80016b6 <OV5640_Init+0x3e>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00f      	beq.n	80016be <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d00c      	beq.n	80016be <OV5640_Init+0x46>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d009      	beq.n	80016be <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b07      	cmp	r3, #7
 80016ae:	d006      	beq.n	80016be <OV5640_Init+0x46>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d003      	beq.n	80016be <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	e04f      	b.n	800175e <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	e01f      	b.n	8001704 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ca:	d018      	beq.n	80016fe <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 80016cc:	4a26      	ldr	r2, [pc, #152]	; (8001768 <OV5640_Init+0xf0>)
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	885b      	ldrh	r3, [r3, #2]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f103 0018 	add.w	r0, r3, #24
 80016e0:	4a21      	ldr	r2, [pc, #132]	; (8001768 <OV5640_Init+0xf0>)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80016e8:	f107 0217 	add.w	r2, r7, #23
 80016ec:	2301      	movs	r3, #1
 80016ee:	f001 fc0b 	bl	8002f08 <ov5640_write_reg>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
 80016fc:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3301      	adds	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2bfd      	cmp	r3, #253	; 0xfd
 8001708:	d9dc      	bls.n	80016c4 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d126      	bne.n	800175e <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 f9e0 	bl	8001ad8 <OV5640_SetResolution>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	e01b      	b.n	800175e <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f000 f833 	bl	8001794 <OV5640_SetPixelFormat>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
 8001738:	61bb      	str	r3, [r7, #24]
 800173a:	e010      	b.n	800175e <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 800173c:	2300      	movs	r3, #0
 800173e:	2201      	movs	r2, #1
 8001740:	2101      	movs	r1, #1
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 fb64 	bl	8001e10 <OV5640_SetPolarities>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	e003      	b.n	800175e <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 800175e:	69bb      	ldr	r3, [r7, #24]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3720      	adds	r7, #32
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	08010330 	.word	0x08010330

0800176c <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800177a:	2b01      	cmp	r3, #1
 800177c:	d103      	bne.n	8001786 <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00f      	beq.n	80017c8 <OV5640_SetPixelFormat+0x34>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d00c      	beq.n	80017c8 <OV5640_SetPixelFormat+0x34>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d009      	beq.n	80017c8 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	2b07      	cmp	r3, #7
 80017b8:	d006      	beq.n	80017c8 <OV5640_SetPixelFormat+0x34>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d003      	beq.n	80017c8 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	e16a      	b.n	8001a9e <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	2b07      	cmp	r3, #7
 80017ce:	f200 80c3 	bhi.w	8001958 <OV5640_SetPixelFormat+0x1c4>
 80017d2:	a201      	add	r2, pc, #4	; (adr r2, 80017d8 <OV5640_SetPixelFormat+0x44>)
 80017d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d8:	08001851 	.word	0x08001851
 80017dc:	080017f9 	.word	0x080017f9
 80017e0:	08001959 	.word	0x08001959
 80017e4:	08001959 	.word	0x08001959
 80017e8:	08001959 	.word	0x08001959
 80017ec:	08001959 	.word	0x08001959
 80017f0:	080018a9 	.word	0x080018a9
 80017f4:	08001901 	.word	0x08001901
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	e024      	b.n	8001848 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001804:	d01d      	beq.n	8001842 <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8001806:	4aa8      	ldr	r2, [pc, #672]	; (8001aa8 <OV5640_SetPixelFormat+0x314>)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	885b      	ldrh	r3, [r3, #2]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f103 0018 	add.w	r0, r3, #24
 800181a:	4aa3      	ldr	r2, [pc, #652]	; (8001aa8 <OV5640_SetPixelFormat+0x314>)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001822:	f107 020f 	add.w	r2, r7, #15
 8001826:	2301      	movs	r3, #1
 8001828:	f001 fb6e 	bl	8002f08 <ov5640_write_reg>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	e003      	b.n	8001842 <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800183a:	2101      	movs	r1, #1
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f001 fb00 	bl	8002e42 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	3301      	adds	r3, #1
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d9d7      	bls.n	80017fe <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 800184e:	e0af      	b.n	80019b0 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	e024      	b.n	80018a0 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800185c:	d01d      	beq.n	800189a <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 800185e:	4a93      	ldr	r2, [pc, #588]	; (8001aac <OV5640_SetPixelFormat+0x318>)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	885b      	ldrh	r3, [r3, #2]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f103 0018 	add.w	r0, r3, #24
 8001872:	4a8e      	ldr	r2, [pc, #568]	; (8001aac <OV5640_SetPixelFormat+0x318>)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800187a:	f107 020f 	add.w	r2, r7, #15
 800187e:	2301      	movs	r3, #1
 8001880:	f001 fb42 	bl	8002f08 <ov5640_write_reg>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	e003      	b.n	800189a <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001892:	2101      	movs	r1, #1
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f001 fad4 	bl	8002e42 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	3301      	adds	r3, #1
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d9d7      	bls.n	8001856 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 80018a6:	e083      	b.n	80019b0 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	e024      	b.n	80018f8 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b4:	d01d      	beq.n	80018f2 <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80018b6:	4a7e      	ldr	r2, [pc, #504]	; (8001ab0 <OV5640_SetPixelFormat+0x31c>)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	885b      	ldrh	r3, [r3, #2]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f103 0018 	add.w	r0, r3, #24
 80018ca:	4a79      	ldr	r2, [pc, #484]	; (8001ab0 <OV5640_SetPixelFormat+0x31c>)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80018d2:	f107 020f 	add.w	r2, r7, #15
 80018d6:	2301      	movs	r3, #1
 80018d8:	f001 fb16 	bl	8002f08 <ov5640_write_reg>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	e003      	b.n	80018f2 <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80018ea:	2101      	movs	r1, #1
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f001 faa8 	bl	8002e42 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	3301      	adds	r3, #1
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d9d7      	bls.n	80018ae <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 80018fe:	e057      	b.n	80019b0 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	e024      	b.n	8001950 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d01d      	beq.n	800194a <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 800190e:	4a69      	ldr	r2, [pc, #420]	; (8001ab4 <OV5640_SetPixelFormat+0x320>)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	885b      	ldrh	r3, [r3, #2]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f103 0018 	add.w	r0, r3, #24
 8001922:	4a64      	ldr	r2, [pc, #400]	; (8001ab4 <OV5640_SetPixelFormat+0x320>)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800192a:	f107 020f 	add.w	r2, r7, #15
 800192e:	2301      	movs	r3, #1
 8001930:	f001 faea 	bl	8002f08 <ov5640_write_reg>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	e003      	b.n	800194a <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001942:	2101      	movs	r1, #1
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f001 fa7c 	bl	8002e42 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	3301      	adds	r3, #1
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d9d7      	bls.n	8001906 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8001956:	e02b      	b.n	80019b0 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	e024      	b.n	80019a8 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d01d      	beq.n	80019a2 <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8001966:	4a54      	ldr	r2, [pc, #336]	; (8001ab8 <OV5640_SetPixelFormat+0x324>)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	885b      	ldrh	r3, [r3, #2]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f103 0018 	add.w	r0, r3, #24
 800197a:	4a4f      	ldr	r2, [pc, #316]	; (8001ab8 <OV5640_SetPixelFormat+0x324>)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001982:	f107 020f 	add.w	r2, r7, #15
 8001986:	2301      	movs	r3, #1
 8001988:	f001 fabe 	bl	8002f08 <ov5640_write_reg>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	e003      	b.n	80019a2 <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800199a:	2101      	movs	r1, #1
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f001 fa50 	bl	8002e42 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	3301      	adds	r3, #1
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d9d7      	bls.n	800195e <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 80019ae:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d173      	bne.n	8001a9e <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f103 0018 	add.w	r0, r3, #24
 80019bc:	f107 020f 	add.w	r2, r7, #15
 80019c0:	2301      	movs	r3, #1
 80019c2:	f643 0121 	movw	r1, #14369	; 0x3821
 80019c6:	f001 fa88 	bl	8002eda <ov5640_read_reg>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	e062      	b.n	8001a9e <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	f043 0320 	orr.w	r3, r3, #32
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f103 0018 	add.w	r0, r3, #24
 80019e8:	f107 020f 	add.w	r2, r7, #15
 80019ec:	2301      	movs	r3, #1
 80019ee:	f643 0121 	movw	r1, #14369	; 0x3821
 80019f2:	f001 fa89 	bl	8002f08 <ov5640_write_reg>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e04c      	b.n	8001a9e <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f103 0018 	add.w	r0, r3, #24
 8001a0a:	f107 020f 	add.w	r2, r7, #15
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f243 0102 	movw	r1, #12290	; 0x3002
 8001a14:	f001 fa61 	bl	8002eda <ov5640_read_reg>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	e03b      	b.n	8001a9e <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	f023 031c 	bic.w	r3, r3, #28
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f103 0018 	add.w	r0, r3, #24
 8001a36:	f107 020f 	add.w	r2, r7, #15
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f243 0102 	movw	r1, #12290	; 0x3002
 8001a40:	f001 fa62 	bl	8002f08 <ov5640_write_reg>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	e025      	b.n	8001a9e <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f103 0018 	add.w	r0, r3, #24
 8001a58:	f107 020f 	add.w	r2, r7, #15
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	f243 0106 	movw	r1, #12294	; 0x3006
 8001a62:	f001 fa3a 	bl	8002eda <ov5640_read_reg>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e014      	b.n	8001a9e <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f103 0018 	add.w	r0, r3, #24
 8001a84:	f107 020f 	add.w	r2, r7, #15
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f243 0106 	movw	r1, #12294	; 0x3006
 8001a8e:	f001 fa3b 	bl	8002f08 <ov5640_write_reg>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9c:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8001a9e:	697b      	ldr	r3, [r7, #20]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	08010728 	.word	0x08010728
 8001aac:	08010730 	.word	0x08010730
 8001ab0:	08010738 	.word	0x08010738
 8001ab4:	08010740 	.word	0x08010740
 8001ab8:	08010748 	.word	0x08010748

08001abc <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d903      	bls.n	8001af4 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e0d8      	b.n	8001ca6 <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	f200 80d1 	bhi.w	8001c9e <OV5640_SetResolution+0x1c6>
 8001afc:	a201      	add	r2, pc, #4	; (adr r2, 8001b04 <OV5640_SetResolution+0x2c>)
 8001afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b02:	bf00      	nop
 8001b04:	08001b19 	.word	0x08001b19
 8001b08:	08001b67 	.word	0x08001b67
 8001b0c:	08001bb5 	.word	0x08001bb5
 8001b10:	08001c03 	.word	0x08001c03
 8001b14:	08001c51 	.word	0x08001c51
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	e01f      	b.n	8001b5e <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d018      	beq.n	8001b58 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8001b26:	4a62      	ldr	r2, [pc, #392]	; (8001cb0 <OV5640_SetResolution+0x1d8>)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	885b      	ldrh	r3, [r3, #2]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f103 0018 	add.w	r0, r3, #24
 8001b3a:	4a5d      	ldr	r2, [pc, #372]	; (8001cb0 <OV5640_SetResolution+0x1d8>)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001b42:	f107 020f 	add.w	r2, r7, #15
 8001b46:	2301      	movs	r3, #1
 8001b48:	f001 f9de 	bl	8002f08 <ov5640_write_reg>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d9dc      	bls.n	8001b1e <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001b64:	e09f      	b.n	8001ca6 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	e01f      	b.n	8001bac <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b72:	d018      	beq.n	8001ba6 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8001b74:	4a4f      	ldr	r2, [pc, #316]	; (8001cb4 <OV5640_SetResolution+0x1dc>)
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	885b      	ldrh	r3, [r3, #2]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f103 0018 	add.w	r0, r3, #24
 8001b88:	4a4a      	ldr	r2, [pc, #296]	; (8001cb4 <OV5640_SetResolution+0x1dc>)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001b90:	f107 020f 	add.w	r2, r7, #15
 8001b94:	2301      	movs	r3, #1
 8001b96:	f001 f9b7 	bl	8002f08 <ov5640_write_reg>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba4:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d9dc      	bls.n	8001b6c <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8001bb2:	e078      	b.n	8001ca6 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	e01f      	b.n	8001bfa <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	d018      	beq.n	8001bf4 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8001bc2:	4a3d      	ldr	r2, [pc, #244]	; (8001cb8 <OV5640_SetResolution+0x1e0>)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	885b      	ldrh	r3, [r3, #2]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f103 0018 	add.w	r0, r3, #24
 8001bd6:	4a38      	ldr	r2, [pc, #224]	; (8001cb8 <OV5640_SetResolution+0x1e0>)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001bde:	f107 020f 	add.w	r2, r7, #15
 8001be2:	2301      	movs	r3, #1
 8001be4:	f001 f990 	bl	8002f08 <ov5640_write_reg>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d9dc      	bls.n	8001bba <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8001c00:	e051      	b.n	8001ca6 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	e01f      	b.n	8001c48 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0e:	d018      	beq.n	8001c42 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8001c10:	4a2a      	ldr	r2, [pc, #168]	; (8001cbc <OV5640_SetResolution+0x1e4>)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	885b      	ldrh	r3, [r3, #2]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f103 0018 	add.w	r0, r3, #24
 8001c24:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <OV5640_SetResolution+0x1e4>)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001c2c:	f107 020f 	add.w	r2, r7, #15
 8001c30:	2301      	movs	r3, #1
 8001c32:	f001 f969 	bl	8002f08 <ov5640_write_reg>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c40:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	3301      	adds	r3, #1
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d9dc      	bls.n	8001c08 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8001c4e:	e02a      	b.n	8001ca6 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	e01f      	b.n	8001c96 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d018      	beq.n	8001c90 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8001c5e:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <OV5640_SetResolution+0x1e8>)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	885b      	ldrh	r3, [r3, #2]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f103 0018 	add.w	r0, r3, #24
 8001c72:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <OV5640_SetResolution+0x1e8>)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001c7a:	f107 020f 	add.w	r2, r7, #15
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f001 f942 	bl	8002f08 <ov5640_write_reg>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	3301      	adds	r3, #1
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d9dc      	bls.n	8001c56 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8001c9c:	e003      	b.n	8001ca6 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	617b      	str	r3, [r7, #20]
        break;
 8001ca4:	bf00      	nop
    }
  }

  return ret;
 8001ca6:	697b      	ldr	r3, [r7, #20]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	08010750 	.word	0x08010750
 8001cb4:	08010760 	.word	0x08010760
 8001cb8:	08010770 	.word	0x08010770
 8001cbc:	08010780 	.word	0x08010780
 8001cc0:	08010790 	.word	0x08010790

08001cc4 <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f103 0018 	add.w	r0, r3, #24
 8001cd4:	f107 020f 	add.w	r2, r7, #15
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f643 0108 	movw	r1, #14344	; 0x3808
 8001cde:	f001 f8fc 	bl	8002eda <ov5640_read_reg>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	e08a      	b.n	8001e06 <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f103 0018 	add.w	r0, r3, #24
 8001cfe:	f107 020f 	add.w	r2, r7, #15
 8001d02:	2301      	movs	r3, #1
 8001d04:	f643 0109 	movw	r1, #14345	; 0x3809
 8001d08:	f001 f8e7 	bl	8002eda <ov5640_read_reg>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	e075      	b.n	8001e06 <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	8a7b      	ldrh	r3, [r7, #18]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f103 0018 	add.w	r0, r3, #24
 8001d2a:	f107 020f 	add.w	r2, r7, #15
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f643 010a 	movw	r1, #14346	; 0x380a
 8001d34:	f001 f8d1 	bl	8002eda <ov5640_read_reg>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	e05f      	b.n	8001e06 <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f103 0018 	add.w	r0, r3, #24
 8001d54:	f107 020f 	add.w	r2, r7, #15
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f643 010b 	movw	r1, #14347	; 0x380b
 8001d5e:	f001 f8bc 	bl	8002eda <ov5640_read_reg>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e04a      	b.n	8001e06 <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	8a3b      	ldrh	r3, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 8001d7a:	8a7b      	ldrh	r3, [r7, #18]
 8001d7c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001d80:	d109      	bne.n	8001d96 <OV5640_GetResolution+0xd2>
 8001d82:	8a3b      	ldrh	r3, [r7, #16]
 8001d84:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001d88:	d105      	bne.n	8001d96 <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	e037      	b.n	8001e06 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 8001d96:	8a7b      	ldrh	r3, [r7, #18]
 8001d98:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001d9c:	d109      	bne.n	8001db2 <OV5640_GetResolution+0xee>
 8001d9e:	8a3b      	ldrh	r3, [r7, #16]
 8001da0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001da4:	d105      	bne.n	8001db2 <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2203      	movs	r2, #3
 8001daa:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	e029      	b.n	8001e06 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 8001db2:	8a7b      	ldrh	r3, [r7, #18]
 8001db4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001db8:	d109      	bne.n	8001dce <OV5640_GetResolution+0x10a>
 8001dba:	8a3b      	ldrh	r3, [r7, #16]
 8001dbc:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001dc0:	d105      	bne.n	8001dce <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	e01b      	b.n	8001e06 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 8001dce:	8a7b      	ldrh	r3, [r7, #18]
 8001dd0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001dd4:	d108      	bne.n	8001de8 <OV5640_GetResolution+0x124>
 8001dd6:	8a3b      	ldrh	r3, [r7, #16]
 8001dd8:	2bf0      	cmp	r3, #240	; 0xf0
 8001dda:	d105      	bne.n	8001de8 <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e00e      	b.n	8001e06 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 8001de8:	8a7b      	ldrh	r3, [r7, #18]
 8001dea:	2ba0      	cmp	r3, #160	; 0xa0
 8001dec:	d108      	bne.n	8001e00 <OV5640_GetResolution+0x13c>
 8001dee:	8a3b      	ldrh	r3, [r7, #16]
 8001df0:	2b78      	cmp	r3, #120	; 0x78
 8001df2:	d105      	bne.n	8001e00 <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	e002      	b.n	8001e06 <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 8001e00:	f04f 33ff 	mov.w	r3, #4294967295
 8001e04:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8001e06:	697b      	ldr	r3, [r7, #20]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d011      	beq.n	8001e4c <OV5640_SetPolarities+0x3c>
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d002      	beq.n	8001e34 <OV5640_SetPolarities+0x24>
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d10b      	bne.n	8001e4c <OV5640_SetPolarities+0x3c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d002      	beq.n	8001e40 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d105      	bne.n	8001e4c <OV5640_SetPolarities+0x3c>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d006      	beq.n	8001e54 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8001e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	e01e      	b.n	8001e92 <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	015b      	lsls	r3, r3, #5
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	4313      	orrs	r3, r2
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f103 0018 	add.w	r0, r3, #24
 8001e78:	f107 0213 	add.w	r2, r7, #19
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	f244 7140 	movw	r1, #18240	; 0x4740
 8001e82:	f001 f841 	bl	8002f08 <ov5640_write_reg>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d002      	beq.n	8001e92 <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e90:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001e92:	697b      	ldr	r3, [r7, #20]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f103 0018 	add.w	r0, r3, #24
 8001eb6:	f107 020b 	add.w	r2, r7, #11
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f243 0108 	movw	r1, #12296	; 0x3008
 8001ec0:	f001 f822 	bl	8002f08 <ov5640_write_reg>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	e032      	b.n	8001f38 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 8001ed2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 ffb3 	bl	8002e42 <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f103 0018 	add.w	r0, r3, #24
 8001ee2:	f107 020b 	add.w	r2, r7, #11
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f243 010a 	movw	r1, #12298	; 0x300a
 8001eec:	f000 fff5 	bl	8002eda <ov5640_read_reg>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	e01c      	b.n	8001f38 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8001efe:	7afb      	ldrb	r3, [r7, #11]
 8001f00:	021a      	lsls	r2, r3, #8
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f103 0018 	add.w	r0, r3, #24
 8001f0c:	f107 020b 	add.w	r2, r7, #11
 8001f10:	2301      	movs	r3, #1
 8001f12:	f243 010b 	movw	r1, #12299	; 0x300b
 8001f16:	f000 ffe0 	bl	8002eda <ov5640_read_reg>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	e007      	b.n	8001f38 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	7afa      	ldrb	r2, [r7, #11]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8001f38:	68fb      	ldr	r3, [r7, #12]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b085      	sub	sp, #20
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d103      	bne.n	8001f5a <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	e01f      	b.n	8001f9a <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2201      	movs	r2, #1
 8001f64:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2201      	movs	r2, #1
 8001f76:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2201      	movs	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2201      	movs	r2, #1
 8001f88:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	2201      	movs	r2, #1
 8001f94:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f103 0018 	add.w	r0, r3, #24
 8001fbc:	f107 020f 	add.w	r2, r7, #15
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f243 4106 	movw	r1, #13318	; 0x3406
 8001fc6:	f000 ff9f 	bl	8002f08 <ov5640_write_reg>
 8001fca:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10c      	bne.n	8001fec <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 8001fd2:	2346      	movs	r3, #70	; 0x46
 8001fd4:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f103 0018 	add.w	r0, r3, #24
 8001fdc:	f107 020f 	add.w	r2, r7, #15
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f245 1190 	movw	r1, #20880	; 0x5190
 8001fe6:	f000 ff8f 	bl	8002f08 <ov5640_write_reg>
 8001fea:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10c      	bne.n	800200c <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 8001ff2:	23f8      	movs	r3, #248	; 0xf8
 8001ff4:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f103 0018 	add.w	r0, r3, #24
 8001ffc:	f107 020f 	add.w	r2, r7, #15
 8002000:	2301      	movs	r3, #1
 8002002:	f245 1191 	movw	r1, #20881	; 0x5191
 8002006:	f000 ff7f 	bl	8002f08 <ov5640_write_reg>
 800200a:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 8002012:	2304      	movs	r3, #4
 8002014:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f103 0018 	add.w	r0, r3, #24
 800201c:	f107 020f 	add.w	r2, r7, #15
 8002020:	2301      	movs	r3, #1
 8002022:	f245 1192 	movw	r1, #20882	; 0x5192
 8002026:	f000 ff6f 	bl	8002f08 <ov5640_write_reg>
 800202a:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	2b00      	cmp	r3, #0
 8002030:	f040 80db 	bne.w	80021ea <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	3b01      	subs	r3, #1
 8002038:	2b07      	cmp	r3, #7
 800203a:	f200 80af 	bhi.w	800219c <OV5640_SetLightMode+0x1f4>
 800203e:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <OV5640_SetLightMode+0x9c>)
 8002040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002044:	08002065 	.word	0x08002065
 8002048:	080020b3 	.word	0x080020b3
 800204c:	0800219d 	.word	0x0800219d
 8002050:	0800214f 	.word	0x0800214f
 8002054:	0800219d 	.word	0x0800219d
 8002058:	0800219d 	.word	0x0800219d
 800205c:	0800219d 	.word	0x0800219d
 8002060:	08002101 	.word	0x08002101
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	e01f      	b.n	80020aa <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d018      	beq.n	80020a4 <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8002072:	4a61      	ldr	r2, [pc, #388]	; (80021f8 <OV5640_SetLightMode+0x250>)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	885b      	ldrh	r3, [r3, #2]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f103 0018 	add.w	r0, r3, #24
 8002086:	4a5c      	ldr	r2, [pc, #368]	; (80021f8 <OV5640_SetLightMode+0x250>)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800208e:	f107 020f 	add.w	r2, r7, #15
 8002092:	2301      	movs	r3, #1
 8002094:	f000 ff38 	bl	8002f08 <ov5640_write_reg>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 800209e:	f04f 33ff 	mov.w	r3, #4294967295
 80020a2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	3301      	adds	r3, #1
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	2b06      	cmp	r3, #6
 80020ae:	d9dc      	bls.n	800206a <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 80020b0:	e09c      	b.n	80021ec <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	e01f      	b.n	80020f8 <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020be:	d018      	beq.n	80020f2 <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80020c0:	4a4e      	ldr	r2, [pc, #312]	; (80021fc <OV5640_SetLightMode+0x254>)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	885b      	ldrh	r3, [r3, #2]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f103 0018 	add.w	r0, r3, #24
 80020d4:	4a49      	ldr	r2, [pc, #292]	; (80021fc <OV5640_SetLightMode+0x254>)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80020dc:	f107 020f 	add.w	r2, r7, #15
 80020e0:	2301      	movs	r3, #1
 80020e2:	f000 ff11 	bl	8002f08 <ov5640_write_reg>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295
 80020f0:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	3301      	adds	r3, #1
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	2b06      	cmp	r3, #6
 80020fc:	d9dc      	bls.n	80020b8 <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 80020fe:	e075      	b.n	80021ec <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	e01f      	b.n	8002146 <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210c:	d018      	beq.n	8002140 <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 800210e:	4a3c      	ldr	r2, [pc, #240]	; (8002200 <OV5640_SetLightMode+0x258>)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	885b      	ldrh	r3, [r3, #2]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f103 0018 	add.w	r0, r3, #24
 8002122:	4a37      	ldr	r2, [pc, #220]	; (8002200 <OV5640_SetLightMode+0x258>)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800212a:	f107 020f 	add.w	r2, r7, #15
 800212e:	2301      	movs	r3, #1
 8002130:	f000 feea 	bl	8002f08 <ov5640_write_reg>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d002      	beq.n	8002140 <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	3301      	adds	r3, #1
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	2b06      	cmp	r3, #6
 800214a:	d9dc      	bls.n	8002106 <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 800214c:	e04e      	b.n	80021ec <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	e01f      	b.n	8002194 <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215a:	d018      	beq.n	800218e <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 800215c:	4a29      	ldr	r2, [pc, #164]	; (8002204 <OV5640_SetLightMode+0x25c>)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	885b      	ldrh	r3, [r3, #2]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f103 0018 	add.w	r0, r3, #24
 8002170:	4a24      	ldr	r2, [pc, #144]	; (8002204 <OV5640_SetLightMode+0x25c>)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002178:	f107 020f 	add.w	r2, r7, #15
 800217c:	2301      	movs	r3, #1
 800217e:	f000 fec3 	bl	8002f08 <ov5640_write_reg>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
 800218c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	3301      	adds	r3, #1
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b06      	cmp	r3, #6
 8002198:	d9dc      	bls.n	8002154 <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 800219a:	e027      	b.n	80021ec <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	e01f      	b.n	80021e2 <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d018      	beq.n	80021dc <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 80021aa:	4a17      	ldr	r2, [pc, #92]	; (8002208 <OV5640_SetLightMode+0x260>)
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	885b      	ldrh	r3, [r3, #2]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f103 0018 	add.w	r0, r3, #24
 80021be:	4a12      	ldr	r2, [pc, #72]	; (8002208 <OV5640_SetLightMode+0x260>)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80021c6:	f107 020f 	add.w	r2, r7, #15
 80021ca:	2301      	movs	r3, #1
 80021cc:	f000 fe9c 	bl	8002f08 <ov5640_write_reg>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295
 80021da:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	3301      	adds	r3, #1
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	2b06      	cmp	r3, #6
 80021e6:	d9dc      	bls.n	80021a2 <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 80021e8:	e000      	b.n	80021ec <OV5640_SetLightMode+0x244>
    }
  }
 80021ea:	bf00      	nop
  return ret;
 80021ec:	697b      	ldr	r3, [r7, #20]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	080107a0 	.word	0x080107a0
 80021fc:	080107bc 	.word	0x080107bc
 8002200:	080107d8 	.word	0x080107d8
 8002204:	080107f4 	.word	0x080107f4
 8002208:	08010810 	.word	0x08010810

0800220c <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	3b01      	subs	r3, #1
 800221a:	2b1f      	cmp	r3, #31
 800221c:	f200 81c0 	bhi.w	80025a0 <OV5640_SetColorEffect+0x394>
 8002220:	a201      	add	r2, pc, #4	; (adr r2, 8002228 <OV5640_SetColorEffect+0x1c>)
 8002222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002226:	bf00      	nop
 8002228:	080022a9 	.word	0x080022a9
 800222c:	08002333 	.word	0x08002333
 8002230:	080025a1 	.word	0x080025a1
 8002234:	080023bd 	.word	0x080023bd
 8002238:	080025a1 	.word	0x080025a1
 800223c:	080025a1 	.word	0x080025a1
 8002240:	080025a1 	.word	0x080025a1
 8002244:	08002447 	.word	0x08002447
 8002248:	080025a1 	.word	0x080025a1
 800224c:	080025a1 	.word	0x080025a1
 8002250:	080025a1 	.word	0x080025a1
 8002254:	080025a1 	.word	0x080025a1
 8002258:	080025a1 	.word	0x080025a1
 800225c:	080025a1 	.word	0x080025a1
 8002260:	080025a1 	.word	0x080025a1
 8002264:	080024d1 	.word	0x080024d1
 8002268:	080025a1 	.word	0x080025a1
 800226c:	080025a1 	.word	0x080025a1
 8002270:	080025a1 	.word	0x080025a1
 8002274:	080025a1 	.word	0x080025a1
 8002278:	080025a1 	.word	0x080025a1
 800227c:	080025a1 	.word	0x080025a1
 8002280:	080025a1 	.word	0x080025a1
 8002284:	080025a1 	.word	0x080025a1
 8002288:	080025a1 	.word	0x080025a1
 800228c:	080025a1 	.word	0x080025a1
 8002290:	080025a1 	.word	0x080025a1
 8002294:	080025a1 	.word	0x080025a1
 8002298:	080025a1 	.word	0x080025a1
 800229c:	080025a1 	.word	0x080025a1
 80022a0:	080025a1 	.word	0x080025a1
 80022a4:	08002559 	.word	0x08002559
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 80022a8:	23ff      	movs	r3, #255	; 0xff
 80022aa:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f103 0018 	add.w	r0, r3, #24
 80022b2:	f107 020b 	add.w	r2, r7, #11
 80022b6:	2301      	movs	r3, #1
 80022b8:	f245 0101 	movw	r1, #20481	; 0x5001
 80022bc:	f000 fe24 	bl	8002f08 <ov5640_write_reg>
 80022c0:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10c      	bne.n	80022e2 <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 80022c8:	2318      	movs	r3, #24
 80022ca:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f103 0018 	add.w	r0, r3, #24
 80022d2:	f107 020b 	add.w	r2, r7, #11
 80022d6:	2301      	movs	r3, #1
 80022d8:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80022dc:	f000 fe14 	bl	8002f08 <ov5640_write_reg>
 80022e0:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10c      	bne.n	8002302 <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 80022e8:	23a0      	movs	r3, #160	; 0xa0
 80022ea:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f103 0018 	add.w	r0, r3, #24
 80022f2:	f107 020b 	add.w	r2, r7, #11
 80022f6:	2301      	movs	r3, #1
 80022f8:	f245 5183 	movw	r1, #21891	; 0x5583
 80022fc:	f000 fe04 	bl	8002f08 <ov5640_write_reg>
 8002300:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10c      	bne.n	8002322 <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 8002308:	2340      	movs	r3, #64	; 0x40
 800230a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f103 0018 	add.w	r0, r3, #24
 8002312:	f107 020b 	add.w	r2, r7, #11
 8002316:	2301      	movs	r3, #1
 8002318:	f245 5184 	movw	r1, #21892	; 0x5584
 800231c:	f000 fdf4 	bl	8002f08 <ov5640_write_reg>
 8002320:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 815f 	beq.w	80025e8 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002330:	e15a      	b.n	80025e8 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 8002332:	23ff      	movs	r3, #255	; 0xff
 8002334:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f103 0018 	add.w	r0, r3, #24
 800233c:	f107 020b 	add.w	r2, r7, #11
 8002340:	2301      	movs	r3, #1
 8002342:	f245 0101 	movw	r1, #20481	; 0x5001
 8002346:	f000 fddf 	bl	8002f08 <ov5640_write_reg>
 800234a:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10c      	bne.n	800236c <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 8002352:	2318      	movs	r3, #24
 8002354:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f103 0018 	add.w	r0, r3, #24
 800235c:	f107 020b 	add.w	r2, r7, #11
 8002360:	2301      	movs	r3, #1
 8002362:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002366:	f000 fdcf 	bl	8002f08 <ov5640_write_reg>
 800236a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10c      	bne.n	800238c <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f103 0018 	add.w	r0, r3, #24
 800237c:	f107 020b 	add.w	r2, r7, #11
 8002380:	2301      	movs	r3, #1
 8002382:	f245 5183 	movw	r1, #21891	; 0x5583
 8002386:	f000 fdbf 	bl	8002f08 <ov5640_write_reg>
 800238a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10c      	bne.n	80023ac <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 8002392:	23c0      	movs	r3, #192	; 0xc0
 8002394:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f103 0018 	add.w	r0, r3, #24
 800239c:	f107 020b 	add.w	r2, r7, #11
 80023a0:	2301      	movs	r3, #1
 80023a2:	f245 5184 	movw	r1, #21892	; 0x5584
 80023a6:	f000 fdaf 	bl	8002f08 <ov5640_write_reg>
 80023aa:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 811c 	beq.w	80025ec <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295
 80023b8:	60fb      	str	r3, [r7, #12]
      }
      break;
 80023ba:	e117      	b.n	80025ec <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 80023bc:	23ff      	movs	r3, #255	; 0xff
 80023be:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f103 0018 	add.w	r0, r3, #24
 80023c6:	f107 020b 	add.w	r2, r7, #11
 80023ca:	2301      	movs	r3, #1
 80023cc:	f245 0101 	movw	r1, #20481	; 0x5001
 80023d0:	f000 fd9a 	bl	8002f08 <ov5640_write_reg>
 80023d4:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10c      	bne.n	80023f6 <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 80023dc:	2318      	movs	r3, #24
 80023de:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f103 0018 	add.w	r0, r3, #24
 80023e6:	f107 020b 	add.w	r2, r7, #11
 80023ea:	2301      	movs	r3, #1
 80023ec:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80023f0:	f000 fd8a 	bl	8002f08 <ov5640_write_reg>
 80023f4:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10c      	bne.n	8002416 <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 80023fc:	2360      	movs	r3, #96	; 0x60
 80023fe:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f103 0018 	add.w	r0, r3, #24
 8002406:	f107 020b 	add.w	r2, r7, #11
 800240a:	2301      	movs	r3, #1
 800240c:	f245 5183 	movw	r1, #21891	; 0x5583
 8002410:	f000 fd7a 	bl	8002f08 <ov5640_write_reg>
 8002414:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10c      	bne.n	8002436 <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 800241c:	2360      	movs	r3, #96	; 0x60
 800241e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f103 0018 	add.w	r0, r3, #24
 8002426:	f107 020b 	add.w	r2, r7, #11
 800242a:	2301      	movs	r3, #1
 800242c:	f245 5184 	movw	r1, #21892	; 0x5584
 8002430:	f000 fd6a 	bl	8002f08 <ov5640_write_reg>
 8002434:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80d9 	beq.w	80025f0 <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295
 8002442:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002444:	e0d4      	b.n	80025f0 <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 8002446:	23ff      	movs	r3, #255	; 0xff
 8002448:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f103 0018 	add.w	r0, r3, #24
 8002450:	f107 020b 	add.w	r2, r7, #11
 8002454:	2301      	movs	r3, #1
 8002456:	f245 0101 	movw	r1, #20481	; 0x5001
 800245a:	f000 fd55 	bl	8002f08 <ov5640_write_reg>
 800245e:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10c      	bne.n	8002480 <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 8002466:	2318      	movs	r3, #24
 8002468:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f103 0018 	add.w	r0, r3, #24
 8002470:	f107 020b 	add.w	r2, r7, #11
 8002474:	2301      	movs	r3, #1
 8002476:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800247a:	f000 fd45 	bl	8002f08 <ov5640_write_reg>
 800247e:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10c      	bne.n	80024a0 <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f103 0018 	add.w	r0, r3, #24
 8002490:	f107 020b 	add.w	r2, r7, #11
 8002494:	2301      	movs	r3, #1
 8002496:	f245 5183 	movw	r1, #21891	; 0x5583
 800249a:	f000 fd35 	bl	8002f08 <ov5640_write_reg>
 800249e:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10c      	bne.n	80024c0 <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f103 0018 	add.w	r0, r3, #24
 80024b0:	f107 020b 	add.w	r2, r7, #11
 80024b4:	2301      	movs	r3, #1
 80024b6:	f245 5184 	movw	r1, #21892	; 0x5584
 80024ba:	f000 fd25 	bl	8002f08 <ov5640_write_reg>
 80024be:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 8096 	beq.w	80025f4 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 80024c8:	f04f 33ff 	mov.w	r3, #4294967295
 80024cc:	60fb      	str	r3, [r7, #12]
      }
      break;
 80024ce:	e091      	b.n	80025f4 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 80024d0:	23ff      	movs	r3, #255	; 0xff
 80024d2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f103 0018 	add.w	r0, r3, #24
 80024da:	f107 020b 	add.w	r2, r7, #11
 80024de:	2301      	movs	r3, #1
 80024e0:	f245 0101 	movw	r1, #20481	; 0x5001
 80024e4:	f000 fd10 	bl	8002f08 <ov5640_write_reg>
 80024e8:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10c      	bne.n	800250a <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 80024f0:	2318      	movs	r3, #24
 80024f2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f103 0018 	add.w	r0, r3, #24
 80024fa:	f107 020b 	add.w	r2, r7, #11
 80024fe:	2301      	movs	r3, #1
 8002500:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002504:	f000 fd00 	bl	8002f08 <ov5640_write_reg>
 8002508:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10c      	bne.n	800252a <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 8002510:	2340      	movs	r3, #64	; 0x40
 8002512:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f103 0018 	add.w	r0, r3, #24
 800251a:	f107 020b 	add.w	r2, r7, #11
 800251e:	2301      	movs	r3, #1
 8002520:	f245 5183 	movw	r1, #21891	; 0x5583
 8002524:	f000 fcf0 	bl	8002f08 <ov5640_write_reg>
 8002528:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10c      	bne.n	800254a <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 8002530:	23a0      	movs	r3, #160	; 0xa0
 8002532:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f103 0018 	add.w	r0, r3, #24
 800253a:	f107 020b 	add.w	r2, r7, #11
 800253e:	2301      	movs	r3, #1
 8002540:	f245 5184 	movw	r1, #21892	; 0x5584
 8002544:	f000 fce0 	bl	8002f08 <ov5640_write_reg>
 8002548:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d053      	beq.n	80025f8 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 8002550:	f04f 33ff 	mov.w	r3, #4294967295
 8002554:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002556:	e04f      	b.n	80025f8 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 8002558:	23ff      	movs	r3, #255	; 0xff
 800255a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f103 0018 	add.w	r0, r3, #24
 8002562:	f107 020b 	add.w	r2, r7, #11
 8002566:	2301      	movs	r3, #1
 8002568:	f245 0101 	movw	r1, #20481	; 0x5001
 800256c:	f000 fccc 	bl	8002f08 <ov5640_write_reg>
 8002570:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10c      	bne.n	8002592 <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 8002578:	2340      	movs	r3, #64	; 0x40
 800257a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f103 0018 	add.w	r0, r3, #24
 8002582:	f107 020b 	add.w	r2, r7, #11
 8002586:	2301      	movs	r3, #1
 8002588:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800258c:	f000 fcbc 	bl	8002f08 <ov5640_write_reg>
 8002590:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d031      	beq.n	80025fc <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 8002598:	f04f 33ff 	mov.w	r3, #4294967295
 800259c:	60fb      	str	r3, [r7, #12]
      }
      break;
 800259e:	e02d      	b.n	80025fc <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 80025a0:	237f      	movs	r3, #127	; 0x7f
 80025a2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f103 0018 	add.w	r0, r3, #24
 80025aa:	f107 020b 	add.w	r2, r7, #11
 80025ae:	2301      	movs	r3, #1
 80025b0:	f245 0101 	movw	r1, #20481	; 0x5001
 80025b4:	f000 fca8 	bl	8002f08 <ov5640_write_reg>
 80025b8:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10c      	bne.n	80025da <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 80025c0:	2300      	movs	r3, #0
 80025c2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f103 0018 	add.w	r0, r3, #24
 80025ca:	f107 020b 	add.w	r2, r7, #11
 80025ce:	2301      	movs	r3, #1
 80025d0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80025d4:	f000 fc98 	bl	8002f08 <ov5640_write_reg>
 80025d8:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00f      	beq.n	8002600 <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 80025e0:	f04f 33ff 	mov.w	r3, #4294967295
 80025e4:	60fb      	str	r3, [r7, #12]
      }

      break;
 80025e6:	e00b      	b.n	8002600 <OV5640_SetColorEffect+0x3f4>
      break;
 80025e8:	bf00      	nop
 80025ea:	e00a      	b.n	8002602 <OV5640_SetColorEffect+0x3f6>
      break;
 80025ec:	bf00      	nop
 80025ee:	e008      	b.n	8002602 <OV5640_SetColorEffect+0x3f6>
      break;
 80025f0:	bf00      	nop
 80025f2:	e006      	b.n	8002602 <OV5640_SetColorEffect+0x3f6>
      break;
 80025f4:	bf00      	nop
 80025f6:	e004      	b.n	8002602 <OV5640_SetColorEffect+0x3f6>
      break;
 80025f8:	bf00      	nop
 80025fa:	e002      	b.n	8002602 <OV5640_SetColorEffect+0x3f6>
      break;
 80025fc:	bf00      	nop
 80025fe:	e000      	b.n	8002602 <OV5640_SetColorEffect+0x3f6>
      break;
 8002600:	bf00      	nop
  }

  return ret;
 8002602:	68fb      	ldr	r3, [r7, #12]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8002616:	4a34      	ldr	r2, [pc, #208]	; (80026e8 <OV5640_SetBrightness+0xdc>)
 8002618:	f107 0310 	add.w	r3, r7, #16
 800261c:	ca07      	ldmia	r2, {r0, r1, r2}
 800261e:	c303      	stmia	r3!, {r0, r1}
 8002620:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002622:	23ff      	movs	r3, #255	; 0xff
 8002624:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f103 0018 	add.w	r0, r3, #24
 800262c:	f107 020f 	add.w	r2, r7, #15
 8002630:	2301      	movs	r3, #1
 8002632:	f245 0101 	movw	r1, #20481	; 0x5001
 8002636:	f000 fc67 	bl	8002f08 <ov5640_write_reg>
 800263a:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d111      	bne.n	8002666 <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	3304      	adds	r3, #4
 8002646:	3320      	adds	r3, #32
 8002648:	443b      	add	r3, r7
 800264a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800264e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f103 0018 	add.w	r0, r3, #24
 8002656:	f107 020f 	add.w	r2, r7, #15
 800265a:	2301      	movs	r3, #1
 800265c:	f245 5187 	movw	r1, #21895	; 0x5587
 8002660:	f000 fc52 	bl	8002f08 <ov5640_write_reg>
 8002664:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10c      	bne.n	8002686 <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 800266c:	2304      	movs	r3, #4
 800266e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f103 0018 	add.w	r0, r3, #24
 8002676:	f107 020f 	add.w	r2, r7, #15
 800267a:	2301      	movs	r3, #1
 800267c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002680:	f000 fc42 	bl	8002f08 <ov5640_write_reg>
 8002684:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d127      	bne.n	80026dc <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	da12      	bge.n	80026b8 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f103 0018 	add.w	r0, r3, #24
 800269c:	f107 020f 	add.w	r2, r7, #15
 80026a0:	2301      	movs	r3, #1
 80026a2:	f245 5188 	movw	r1, #21896	; 0x5588
 80026a6:	f000 fc2f 	bl	8002f08 <ov5640_write_reg>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d015      	beq.n	80026dc <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 80026b0:	f04f 33ff 	mov.w	r3, #4294967295
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	e011      	b.n	80026dc <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 80026b8:	2309      	movs	r3, #9
 80026ba:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f103 0018 	add.w	r0, r3, #24
 80026c2:	f107 020f 	add.w	r2, r7, #15
 80026c6:	2301      	movs	r3, #1
 80026c8:	f245 5188 	movw	r1, #21896	; 0x5588
 80026cc:	f000 fc1c 	bl	8002f08 <ov5640_write_reg>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295
 80026da:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 80026dc:	69fb      	ldr	r3, [r7, #28]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	080102e8 	.word	0x080102e8

080026ec <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80026f6:	4a30      	ldr	r2, [pc, #192]	; (80027b8 <OV5640_SetSaturation+0xcc>)
 80026f8:	f107 0310 	add.w	r3, r7, #16
 80026fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80026fe:	c303      	stmia	r3!, {r0, r1}
 8002700:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002702:	23ff      	movs	r3, #255	; 0xff
 8002704:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f103 0018 	add.w	r0, r3, #24
 800270c:	f107 020f 	add.w	r2, r7, #15
 8002710:	2301      	movs	r3, #1
 8002712:	f245 0101 	movw	r1, #20481	; 0x5001
 8002716:	f000 fbf7 	bl	8002f08 <ov5640_write_reg>
 800271a:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d111      	bne.n	8002746 <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	3304      	adds	r3, #4
 8002726:	3320      	adds	r3, #32
 8002728:	443b      	add	r3, r7
 800272a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800272e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f103 0018 	add.w	r0, r3, #24
 8002736:	f107 020f 	add.w	r2, r7, #15
 800273a:	2301      	movs	r3, #1
 800273c:	f245 5183 	movw	r1, #21891	; 0x5583
 8002740:	f000 fbe2 	bl	8002f08 <ov5640_write_reg>
 8002744:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10a      	bne.n	8002762 <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f103 0018 	add.w	r0, r3, #24
 8002752:	f107 020f 	add.w	r2, r7, #15
 8002756:	2301      	movs	r3, #1
 8002758:	f245 5184 	movw	r1, #21892	; 0x5584
 800275c:	f000 fbd4 	bl	8002f08 <ov5640_write_reg>
 8002760:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10c      	bne.n	8002782 <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 8002768:	2302      	movs	r3, #2
 800276a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f103 0018 	add.w	r0, r3, #24
 8002772:	f107 020f 	add.w	r2, r7, #15
 8002776:	2301      	movs	r3, #1
 8002778:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800277c:	f000 fbc4 	bl	8002f08 <ov5640_write_reg>
 8002780:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10c      	bne.n	80027a2 <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 8002788:	2341      	movs	r3, #65	; 0x41
 800278a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f103 0018 	add.w	r0, r3, #24
 8002792:	f107 020f 	add.w	r2, r7, #15
 8002796:	2301      	movs	r3, #1
 8002798:	f245 5188 	movw	r1, #21896	; 0x5588
 800279c:	f000 fbb4 	bl	8002f08 <ov5640_write_reg>
 80027a0:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 80027a8:	f04f 33ff 	mov.w	r3, #4294967295
 80027ac:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80027ae:	69fb      	ldr	r3, [r7, #28]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3720      	adds	r7, #32
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	080102f4 	.word	0x080102f4

080027bc <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 80027c6:	4a30      	ldr	r2, [pc, #192]	; (8002888 <OV5640_SetContrast+0xcc>)
 80027c8:	f107 0310 	add.w	r3, r7, #16
 80027cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80027ce:	c303      	stmia	r3!, {r0, r1}
 80027d0:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80027d2:	23ff      	movs	r3, #255	; 0xff
 80027d4:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f103 0018 	add.w	r0, r3, #24
 80027dc:	f107 020f 	add.w	r2, r7, #15
 80027e0:	2301      	movs	r3, #1
 80027e2:	f245 0101 	movw	r1, #20481	; 0x5001
 80027e6:	f000 fb8f 	bl	8002f08 <ov5640_write_reg>
 80027ea:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10c      	bne.n	800280c <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 80027f2:	2304      	movs	r3, #4
 80027f4:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f103 0018 	add.w	r0, r3, #24
 80027fc:	f107 020f 	add.w	r2, r7, #15
 8002800:	2301      	movs	r3, #1
 8002802:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002806:	f000 fb7f 	bl	8002f08 <ov5640_write_reg>
 800280a:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d111      	bne.n	8002836 <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	3304      	adds	r3, #4
 8002816:	3320      	adds	r3, #32
 8002818:	443b      	add	r3, r7
 800281a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800281e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f103 0018 	add.w	r0, r3, #24
 8002826:	f107 020f 	add.w	r2, r7, #15
 800282a:	2301      	movs	r3, #1
 800282c:	f245 5186 	movw	r1, #21894	; 0x5586
 8002830:	f000 fb6a 	bl	8002f08 <ov5640_write_reg>
 8002834:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10a      	bne.n	8002852 <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f103 0018 	add.w	r0, r3, #24
 8002842:	f107 020f 	add.w	r2, r7, #15
 8002846:	2301      	movs	r3, #1
 8002848:	f245 5185 	movw	r1, #21893	; 0x5585
 800284c:	f000 fb5c 	bl	8002f08 <ov5640_write_reg>
 8002850:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10c      	bne.n	8002872 <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 8002858:	2341      	movs	r3, #65	; 0x41
 800285a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f103 0018 	add.w	r0, r3, #24
 8002862:	f107 020f 	add.w	r2, r7, #15
 8002866:	2301      	movs	r3, #1
 8002868:	f245 5188 	movw	r1, #21896	; 0x5588
 800286c:	f000 fb4c 	bl	8002f08 <ov5640_write_reg>
 8002870:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 8002878:	f04f 33ff 	mov.w	r3, #4294967295
 800287c:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800287e:	69fb      	ldr	r3, [r7, #28]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3720      	adds	r7, #32
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	08010300 	.word	0x08010300

0800288c <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08e      	sub	sp, #56	; 0x38
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8002896:	4a3c      	ldr	r2, [pc, #240]	; (8002988 <OV5640_SetHueDegree+0xfc>)
 8002898:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800289c:	ca07      	ldmia	r2, {r0, r1, r2}
 800289e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 80028a2:	4a3a      	ldr	r2, [pc, #232]	; (800298c <OV5640_SetHueDegree+0x100>)
 80028a4:	f107 031c 	add.w	r3, r7, #28
 80028a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80028aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 80028ae:	4a38      	ldr	r2, [pc, #224]	; (8002990 <OV5640_SetHueDegree+0x104>)
 80028b0:	f107 0310 	add.w	r3, r7, #16
 80028b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80028b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 80028ba:	23ff      	movs	r3, #255	; 0xff
 80028bc:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f103 0018 	add.w	r0, r3, #24
 80028c4:	f107 020f 	add.w	r2, r7, #15
 80028c8:	2301      	movs	r3, #1
 80028ca:	f245 0101 	movw	r1, #20481	; 0x5001
 80028ce:	f000 fb1b 	bl	8002f08 <ov5640_write_reg>
 80028d2:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 80028d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10c      	bne.n	80028f4 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f103 0018 	add.w	r0, r3, #24
 80028e4:	f107 020f 	add.w	r2, r7, #15
 80028e8:	2301      	movs	r3, #1
 80028ea:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80028ee:	f000 fb0b 	bl	8002f08 <ov5640_write_reg>
 80028f2:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 80028f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d111      	bne.n	800291e <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	3306      	adds	r3, #6
 80028fe:	3338      	adds	r3, #56	; 0x38
 8002900:	443b      	add	r3, r7
 8002902:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002906:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f103 0018 	add.w	r0, r3, #24
 800290e:	f107 020f 	add.w	r2, r7, #15
 8002912:	2301      	movs	r3, #1
 8002914:	f245 5181 	movw	r1, #21889	; 0x5581
 8002918:	f000 faf6 	bl	8002f08 <ov5640_write_reg>
 800291c:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 800291e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002920:	2b00      	cmp	r3, #0
 8002922:	d111      	bne.n	8002948 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	3306      	adds	r3, #6
 8002928:	3338      	adds	r3, #56	; 0x38
 800292a:	443b      	add	r3, r7
 800292c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002930:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f103 0018 	add.w	r0, r3, #24
 8002938:	f107 020f 	add.w	r2, r7, #15
 800293c:	2301      	movs	r3, #1
 800293e:	f245 5182 	movw	r1, #21890	; 0x5582
 8002942:	f000 fae1 	bl	8002f08 <ov5640_write_reg>
 8002946:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294a:	2b00      	cmp	r3, #0
 800294c:	d111      	bne.n	8002972 <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	3306      	adds	r3, #6
 8002952:	3338      	adds	r3, #56	; 0x38
 8002954:	443b      	add	r3, r7
 8002956:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800295a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f103 0018 	add.w	r0, r3, #24
 8002962:	f107 020f 	add.w	r2, r7, #15
 8002966:	2301      	movs	r3, #1
 8002968:	f245 5188 	movw	r1, #21896	; 0x5588
 800296c:	f000 facc 	bl	8002f08 <ov5640_write_reg>
 8002970:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 8002972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 8002978:	f04f 33ff 	mov.w	r3, #4294967295
 800297c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 800297e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002980:	4618      	mov	r0, r3
 8002982:	3738      	adds	r7, #56	; 0x38
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	0801030c 	.word	0x0801030c
 800298c:	08010318 	.word	0x08010318
 8002990:	08010324 	.word	0x08010324

08002994 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f103 0018 	add.w	r0, r3, #24
 80029a8:	f107 020b 	add.w	r2, r7, #11
 80029ac:	2301      	movs	r3, #1
 80029ae:	f643 0120 	movw	r1, #14368	; 0x3820
 80029b2:	f000 fa92 	bl	8002eda <ov5640_read_reg>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 80029bc:	f04f 33ff 	mov.w	r3, #4294967295
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	e0cb      	b.n	8002b5c <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 80029c4:	7afb      	ldrb	r3, [r7, #11]
 80029c6:	f023 0306 	bic.w	r3, r3, #6
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f103 0018 	add.w	r0, r3, #24
 80029d4:	f107 020a 	add.w	r2, r7, #10
 80029d8:	2301      	movs	r3, #1
 80029da:	f643 0121 	movw	r1, #14369	; 0x3821
 80029de:	f000 fa7c 	bl	8002eda <ov5640_read_reg>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 80029e8:	f04f 33ff 	mov.w	r3, #4294967295
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	e0b5      	b.n	8002b5c <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 80029f4:	7abb      	ldrb	r3, [r7, #10]
 80029f6:	f023 0306 	bic.w	r3, r3, #6
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d056      	beq.n	8002ab2 <OV5640_MirrorFlipConfig+0x11e>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d87f      	bhi.n	8002b0a <OV5640_MirrorFlipConfig+0x176>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d029      	beq.n	8002a64 <OV5640_MirrorFlipConfig+0xd0>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d179      	bne.n	8002b0a <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f103 0018 	add.w	r0, r3, #24
 8002a1c:	f107 020b 	add.w	r2, r7, #11
 8002a20:	2301      	movs	r3, #1
 8002a22:	f643 0120 	movw	r1, #14368	; 0x3820
 8002a26:	f000 fa6f 	bl	8002f08 <ov5640_write_reg>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 8002a30:	f04f 33ff 	mov.w	r3, #4294967295
 8002a34:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002a36:	e08a      	b.n	8002b4e <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8002a38:	7abb      	ldrb	r3, [r7, #10]
 8002a3a:	f043 0306 	orr.w	r3, r3, #6
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f103 0018 	add.w	r0, r3, #24
 8002a48:	f107 020a 	add.w	r2, r7, #10
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f643 0121 	movw	r1, #14369	; 0x3821
 8002a52:	f000 fa59 	bl	8002f08 <ov5640_write_reg>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d078      	beq.n	8002b4e <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8002a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a60:	60fb      	str	r3, [r7, #12]
          break;
 8002a62:	e074      	b.n	8002b4e <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8002a64:	7afb      	ldrb	r3, [r7, #11]
 8002a66:	f043 0306 	orr.w	r3, r3, #6
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f103 0018 	add.w	r0, r3, #24
 8002a74:	f107 020b 	add.w	r2, r7, #11
 8002a78:	2301      	movs	r3, #1
 8002a7a:	f643 0120 	movw	r1, #14368	; 0x3820
 8002a7e:	f000 fa43 	bl	8002f08 <ov5640_write_reg>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8002a88:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8c:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002a8e:	e060      	b.n	8002b52 <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f103 0018 	add.w	r0, r3, #24
 8002a96:	f107 020a 	add.w	r2, r7, #10
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f643 0121 	movw	r1, #14369	; 0x3821
 8002aa0:	f000 fa32 	bl	8002f08 <ov5640_write_reg>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d053      	beq.n	8002b52 <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002aae:	60fb      	str	r3, [r7, #12]
          break;
 8002ab0:	e04f      	b.n	8002b52 <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 8002ab2:	7afb      	ldrb	r3, [r7, #11]
 8002ab4:	f043 0306 	orr.w	r3, r3, #6
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f103 0018 	add.w	r0, r3, #24
 8002ac2:	f107 020b 	add.w	r2, r7, #11
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f643 0120 	movw	r1, #14368	; 0x3820
 8002acc:	f000 fa1c 	bl	8002f08 <ov5640_write_reg>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002adc:	e03b      	b.n	8002b56 <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 8002ade:	7abb      	ldrb	r3, [r7, #10]
 8002ae0:	f043 0306 	orr.w	r3, r3, #6
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f103 0018 	add.w	r0, r3, #24
 8002aee:	f107 020a 	add.w	r2, r7, #10
 8002af2:	2301      	movs	r3, #1
 8002af4:	f643 0121 	movw	r1, #14369	; 0x3821
 8002af8:	f000 fa06 	bl	8002f08 <ov5640_write_reg>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d029      	beq.n	8002b56 <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
 8002b06:	60fb      	str	r3, [r7, #12]
          break;
 8002b08:	e025      	b.n	8002b56 <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f103 0018 	add.w	r0, r3, #24
 8002b10:	f107 020b 	add.w	r2, r7, #11
 8002b14:	2301      	movs	r3, #1
 8002b16:	f643 0120 	movw	r1, #14368	; 0x3820
 8002b1a:	f000 f9f5 	bl	8002f08 <ov5640_write_reg>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8002b24:	f04f 33ff 	mov.w	r3, #4294967295
 8002b28:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002b2a:	e016      	b.n	8002b5a <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f103 0018 	add.w	r0, r3, #24
 8002b32:	f107 020a 	add.w	r2, r7, #10
 8002b36:	2301      	movs	r3, #1
 8002b38:	f643 0121 	movw	r1, #14369	; 0x3821
 8002b3c:	f000 f9e4 	bl	8002f08 <ov5640_write_reg>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4a:	60fb      	str	r3, [r7, #12]
          break;
 8002b4c:	e005      	b.n	8002b5a <OV5640_MirrorFlipConfig+0x1c6>
          break;
 8002b4e:	bf00      	nop
 8002b50:	e004      	b.n	8002b5c <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002b52:	bf00      	nop
 8002b54:	e002      	b.n	8002b5c <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002b56:	bf00      	nop
 8002b58:	e000      	b.n	8002b5c <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002b5a:	bf00      	nop
      }
    }
  }

  return ret;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8002b74:	f107 030c 	add.w	r3, r7, #12
 8002b78:	4619      	mov	r1, r3
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff f8a2 	bl	8001cc4 <OV5640_GetResolution>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 8002b86:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	e04e      	b.n	8002c2c <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2b44      	cmp	r3, #68	; 0x44
 8002b96:	d112      	bne.n	8002bbe <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 8002b98:	2310      	movs	r3, #16
 8002b9a:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f103 0018 	add.w	r0, r3, #24
 8002ba2:	f107 020b 	add.w	r2, r7, #11
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002bac:	f000 f9ac 	bl	8002f08 <ov5640_write_reg>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d03a      	beq.n	8002c2c <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e036      	b.n	8002c2c <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d802      	bhi.n	8002bca <OV5640_ZoomConfig+0x64>
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d103      	bne.n	8002bd0 <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8002bc8:	e00a      	b.n	8002be0 <OV5640_ZoomConfig+0x7a>
      switch (res)
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d004      	beq.n	8002bd8 <OV5640_ZoomConfig+0x72>
          break;
 8002bce:	e007      	b.n	8002be0 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	085b      	lsrs	r3, r3, #1
 8002bd4:	613b      	str	r3, [r7, #16]
          break;
 8002bd6:	e003      	b.n	8002be0 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	613b      	str	r3, [r7, #16]
          break;
 8002bde:	bf00      	nop
      }

      tmp = 0x00;
 8002be0:	2300      	movs	r3, #0
 8002be2:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f103 0018 	add.w	r0, r3, #24
 8002bea:	f107 020b 	add.w	r2, r7, #11
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002bf4:	f000 f988 	bl	8002f08 <ov5640_write_reg>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	e012      	b.n	8002c2c <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f103 0018 	add.w	r0, r3, #24
 8002c12:	f107 020b 	add.w	r2, r7, #11
 8002c16:	2301      	movs	r3, #1
 8002c18:	f245 6101 	movw	r1, #22017	; 0x5601
 8002c1c:	f000 f974 	bl	8002f08 <ov5640_write_reg>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002c2c:	697b      	ldr	r3, [r7, #20]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 8002c3e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	f040 80ce 	bne.w	8002de8 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f103 0018 	add.w	r0, r3, #24
 8002c52:	f107 020b 	add.w	r2, r7, #11
 8002c56:	2301      	movs	r3, #1
 8002c58:	f243 0138 	movw	r1, #12344	; 0x3038
 8002c5c:	f000 f954 	bl	8002f08 <ov5640_write_reg>
 8002c60:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10a      	bne.n	8002c7e <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f103 0018 	add.w	r0, r3, #24
 8002c6e:	f107 020b 	add.w	r2, r7, #11
 8002c72:	2301      	movs	r3, #1
 8002c74:	f243 0139 	movw	r1, #12345	; 0x3039
 8002c78:	f000 f946 	bl	8002f08 <ov5640_write_reg>
 8002c7c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10c      	bne.n	8002c9e <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 8002c84:	237c      	movs	r3, #124	; 0x7c
 8002c86:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f103 0018 	add.w	r0, r3, #24
 8002c8e:	f107 020b 	add.w	r2, r7, #11
 8002c92:	2301      	movs	r3, #1
 8002c94:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002c98:	f000 f936 	bl	8002f08 <ov5640_write_reg>
 8002c9c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10c      	bne.n	8002cbe <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f103 0018 	add.w	r0, r3, #24
 8002cae:	f107 020b 	add.w	r2, r7, #11
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f643 2108 	movw	r1, #14856	; 0x3a08
 8002cb8:	f000 f926 	bl	8002f08 <ov5640_write_reg>
 8002cbc:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10c      	bne.n	8002cde <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 8002cc4:	2327      	movs	r3, #39	; 0x27
 8002cc6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f103 0018 	add.w	r0, r3, #24
 8002cce:	f107 020b 	add.w	r2, r7, #11
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	f643 2109 	movw	r1, #14857	; 0x3a09
 8002cd8:	f000 f916 	bl	8002f08 <ov5640_write_reg>
 8002cdc:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10c      	bne.n	8002cfe <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f103 0018 	add.w	r0, r3, #24
 8002cee:	f107 020b 	add.w	r2, r7, #11
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8002cf8:	f000 f906 	bl	8002f08 <ov5640_write_reg>
 8002cfc:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10c      	bne.n	8002d1e <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 8002d04:	23f6      	movs	r3, #246	; 0xf6
 8002d06:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f103 0018 	add.w	r0, r3, #24
 8002d0e:	f107 020b 	add.w	r2, r7, #11
 8002d12:	2301      	movs	r3, #1
 8002d14:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8002d18:	f000 f8f6 	bl	8002f08 <ov5640_write_reg>
 8002d1c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10c      	bne.n	8002d3e <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 8002d24:	2304      	movs	r3, #4
 8002d26:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f103 0018 	add.w	r0, r3, #24
 8002d2e:	f107 020b 	add.w	r2, r7, #11
 8002d32:	2301      	movs	r3, #1
 8002d34:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8002d38:	f000 f8e6 	bl	8002f08 <ov5640_write_reg>
 8002d3c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10a      	bne.n	8002d5a <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f103 0018 	add.w	r0, r3, #24
 8002d4a:	f107 020b 	add.w	r2, r7, #11
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8002d54:	f000 f8d8 	bl	8002f08 <ov5640_write_reg>
 8002d58:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10c      	bne.n	8002d7a <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 8002d60:	230b      	movs	r3, #11
 8002d62:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f103 0018 	add.w	r0, r3, #24
 8002d6a:	f107 020b 	add.w	r2, r7, #11
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f643 2102 	movw	r1, #14850	; 0x3a02
 8002d74:	f000 f8c8 	bl	8002f08 <ov5640_write_reg>
 8002d78:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10c      	bne.n	8002d9a <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 8002d80:	2388      	movs	r3, #136	; 0x88
 8002d82:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f103 0018 	add.w	r0, r3, #24
 8002d8a:	f107 020b 	add.w	r2, r7, #11
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f643 2103 	movw	r1, #14851	; 0x3a03
 8002d94:	f000 f8b8 	bl	8002f08 <ov5640_write_reg>
 8002d98:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10c      	bne.n	8002dba <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 8002da0:	230b      	movs	r3, #11
 8002da2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f103 0018 	add.w	r0, r3, #24
 8002daa:	f107 020b 	add.w	r2, r7, #11
 8002dae:	2301      	movs	r3, #1
 8002db0:	f643 2114 	movw	r1, #14868	; 0x3a14
 8002db4:	f000 f8a8 	bl	8002f08 <ov5640_write_reg>
 8002db8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10c      	bne.n	8002dda <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 8002dc0:	2388      	movs	r3, #136	; 0x88
 8002dc2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f103 0018 	add.w	r0, r3, #24
 8002dca:	f107 020b 	add.w	r2, r7, #11
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f643 2115 	movw	r1, #14869	; 0x3a15
 8002dd4:	f000 f898 	bl	8002f08 <ov5640_write_reg>
 8002dd8:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d02b      	beq.n	8002e38 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	e027      	b.n	8002e38 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f103 0018 	add.w	r0, r3, #24
 8002dee:	f107 020b 	add.w	r2, r7, #11
 8002df2:	2301      	movs	r3, #1
 8002df4:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002df8:	f000 f86f 	bl	8002eda <ov5640_read_reg>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	e016      	b.n	8002e38 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 8002e0e:	7afb      	ldrb	r3, [r7, #11]
 8002e10:	f023 0304 	bic.w	r3, r3, #4
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f103 0018 	add.w	r0, r3, #24
 8002e1e:	f107 020b 	add.w	r2, r7, #11
 8002e22:	2301      	movs	r3, #1
 8002e24:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002e28:	f000 f86e 	bl	8002f08 <ov5640_write_reg>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
 8002e36:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002e38:	68fb      	ldr	r3, [r7, #12]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	4798      	blx	r3
 8002e52:	4603      	mov	r3, r0
 8002e54:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8002e56:	bf00      	nop
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	4798      	blx	r3
 8002e5e:	4603      	mov	r3, r0
 8002e60:	461a      	mov	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d8f5      	bhi.n	8002e58 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002e76:	b590      	push	{r4, r7, lr}
 8002e78:	b087      	sub	sp, #28
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	461a      	mov	r2, r3
 8002e82:	460b      	mov	r3, r1
 8002e84:	817b      	strh	r3, [r7, #10]
 8002e86:	4613      	mov	r3, r2
 8002e88:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	691c      	ldr	r4, [r3, #16]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	8918      	ldrh	r0, [r3, #8]
 8002e96:	893b      	ldrh	r3, [r7, #8]
 8002e98:	8979      	ldrh	r1, [r7, #10]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	47a0      	blx	r4
 8002e9e:	4603      	mov	r3, r0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	371c      	adds	r7, #28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd90      	pop	{r4, r7, pc}

08002ea8 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	817b      	strh	r3, [r7, #10]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	68dc      	ldr	r4, [r3, #12]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	8918      	ldrh	r0, [r3, #8]
 8002ec8:	893b      	ldrh	r3, [r7, #8]
 8002eca:	8979      	ldrh	r1, [r7, #10]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	47a0      	blx	r4
 8002ed0:	4603      	mov	r3, r0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd90      	pop	{r4, r7, pc}

08002eda <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8002eda:	b590      	push	{r4, r7, lr}
 8002edc:	b085      	sub	sp, #20
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	817b      	strh	r3, [r7, #10]
 8002eea:	4613      	mov	r3, r2
 8002eec:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685c      	ldr	r4, [r3, #4]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6898      	ldr	r0, [r3, #8]
 8002ef6:	893b      	ldrh	r3, [r7, #8]
 8002ef8:	8979      	ldrh	r1, [r7, #10]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	47a0      	blx	r4
 8002efe:	4603      	mov	r3, r0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd90      	pop	{r4, r7, pc}

08002f08 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	461a      	mov	r2, r3
 8002f14:	460b      	mov	r3, r1
 8002f16:	817b      	strh	r3, [r7, #10]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681c      	ldr	r4, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6898      	ldr	r0, [r3, #8]
 8002f24:	893b      	ldrh	r3, [r7, #8]
 8002f26:	8979      	ldrh	r1, [r7, #10]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	47a0      	blx	r4
 8002f2c:	4603      	mov	r3, r0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd90      	pop	{r4, r7, pc}
	...

08002f38 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002f40:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <RetargetInit+0x28>)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <RetargetInit+0x2c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6898      	ldr	r0, [r3, #8]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	2202      	movs	r2, #2
 8002f50:	2100      	movs	r1, #0
 8002f52:	f00c f957 	bl	800f204 <setvbuf>
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	240df4b0 	.word	0x240df4b0
 8002f64:	24000054 	.word	0x24000054

08002f68 <_isatty>:

int _isatty(int fd) {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	db04      	blt.n	8002f80 <_isatty+0x18>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	dc01      	bgt.n	8002f80 <_isatty+0x18>
    return 1;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e005      	b.n	8002f8c <_isatty+0x24>

  errno = EBADF;
 8002f80:	f00c f8f6 	bl	800f170 <__errno>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2209      	movs	r2, #9
 8002f88:	601a      	str	r2, [r3, #0]
  return 0;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <_write>:

int _write(int fd, char* ptr, int len) {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d002      	beq.n	8002fac <_write+0x18>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d111      	bne.n	8002fd0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <_write+0x54>)
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	f00a f9c1 	bl	800d340 <HAL_UART_Transmit>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <_write+0x38>
      return len;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	e008      	b.n	8002fde <_write+0x4a>
    else
      return EIO;
 8002fcc:	2305      	movs	r3, #5
 8002fce:	e006      	b.n	8002fde <_write+0x4a>
  }
  errno = EBADF;
 8002fd0:	f00c f8ce 	bl	800f170 <__errno>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2209      	movs	r2, #9
 8002fd8:	601a      	str	r2, [r3, #0]
  return -1;
 8002fda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	240df4b0 	.word	0x240df4b0

08002fec <_close>:

int _close(int fd) {
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	db04      	blt.n	8003004 <_close+0x18>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	dc01      	bgt.n	8003004 <_close+0x18>
    return 0;
 8003000:	2300      	movs	r3, #0
 8003002:	e006      	b.n	8003012 <_close+0x26>

  errno = EBADF;
 8003004:	f00c f8b4 	bl	800f170 <__errno>
 8003008:	4603      	mov	r3, r0
 800300a:	2209      	movs	r2, #9
 800300c:	601a      	str	r2, [r3, #0]
  return -1;
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <_read>:

int _read(int fd, char* ptr, int len) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d110      	bne.n	8003050 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800302e:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <_read+0x4c>)
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	f04f 33ff 	mov.w	r3, #4294967295
 8003036:	2201      	movs	r2, #1
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	f00a fa0f 	bl	800d45c <HAL_UART_Receive>
 800303e:	4603      	mov	r3, r0
 8003040:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <_read+0x30>
      return 1;
 8003048:	2301      	movs	r3, #1
 800304a:	e008      	b.n	800305e <_read+0x42>
    else
      return EIO;
 800304c:	2305      	movs	r3, #5
 800304e:	e006      	b.n	800305e <_read+0x42>
  }
  errno = EBADF;
 8003050:	f00c f88e 	bl	800f170 <__errno>
 8003054:	4603      	mov	r3, r0
 8003056:	2209      	movs	r2, #9
 8003058:	601a      	str	r2, [r3, #0]
  return -1;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	240df4b0 	.word	0x240df4b0

0800306c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	db08      	blt.n	800308e <_fstat+0x22>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b02      	cmp	r3, #2
 8003080:	dc05      	bgt.n	800308e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003088:	605a      	str	r2, [r3, #4]
    return 0;
 800308a:	2300      	movs	r3, #0
 800308c:	e005      	b.n	800309a <_fstat+0x2e>
  }

  errno = EBADF;
 800308e:	f00c f86f 	bl	800f170 <__errno>
 8003092:	4603      	mov	r3, r0
 8003094:	2209      	movs	r2, #9
 8003096:	601a      	str	r2, [r3, #0]
  return 0;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80030a8:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <MX_RTC_Init+0x4c>)
 80030aa:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <MX_RTC_Init+0x50>)
 80030ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80030ae:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <MX_RTC_Init+0x4c>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80030b4:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <MX_RTC_Init+0x4c>)
 80030b6:	227f      	movs	r2, #127	; 0x7f
 80030b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80030ba:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <MX_RTC_Init+0x4c>)
 80030bc:	22ff      	movs	r2, #255	; 0xff
 80030be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <MX_RTC_Init+0x4c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <MX_RTC_Init+0x4c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80030cc:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <MX_RTC_Init+0x4c>)
 80030ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030d2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <MX_RTC_Init+0x4c>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80030da:	4805      	ldr	r0, [pc, #20]	; (80030f0 <MX_RTC_Init+0x4c>)
 80030dc:	f009 ffc2 	bl	800d064 <HAL_RTC_Init>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80030e6:	f7fe fa7f 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	240df4b4 	.word	0x240df4b4
 80030f4:	58004000 	.word	0x58004000

080030f8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b0b2      	sub	sp, #200	; 0xc8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003100:	f107 0308 	add.w	r3, r7, #8
 8003104:	22c0      	movs	r2, #192	; 0xc0
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f00c f85b 	bl	800f1c4 <memset>
  if(rtcHandle->Instance==RTC)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a10      	ldr	r2, [pc, #64]	; (8003154 <HAL_RTC_MspInit+0x5c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d119      	bne.n	800314c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003118:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003124:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003128:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800312c:	f107 0308 	add.w	r3, r7, #8
 8003130:	4618      	mov	r0, r3
 8003132:	f008 f9b7 	bl	800b4a4 <HAL_RCCEx_PeriphCLKConfig>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800313c:	f7fe fa54 	bl	80015e8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RTC_MspInit+0x60>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	4a04      	ldr	r2, [pc, #16]	; (8003158 <HAL_RTC_MspInit+0x60>)
 8003146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800314a:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800314c:	bf00      	nop
 800314e:	37c8      	adds	r7, #200	; 0xc8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	58004000 	.word	0x58004000
 8003158:	58024400 	.word	0x58024400

0800315c <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8003166:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <BSP_I2C4_Init+0x64>)
 8003168:	4a16      	ldr	r2, [pc, #88]	; (80031c4 <BSP_I2C4_Init+0x68>)
 800316a:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800316c:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <BSP_I2C4_Init+0x6c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d11f      	bne.n	80031b4 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8003174:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <BSP_I2C4_Init+0x6c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3301      	adds	r3, #1
 800317a:	4a13      	ldr	r2, [pc, #76]	; (80031c8 <BSP_I2C4_Init+0x6c>)
 800317c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800317e:	4810      	ldr	r0, [pc, #64]	; (80031c0 <BSP_I2C4_Init+0x64>)
 8003180:	f006 fa2a 	bl	80095d8 <HAL_I2C_GetState>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d114      	bne.n	80031b4 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800318a:	480d      	ldr	r0, [pc, #52]	; (80031c0 <BSP_I2C4_Init+0x64>)
 800318c:	f000 fb60 	bl	8003850 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8003190:	f008 f972 	bl	800b478 <HAL_RCC_GetPCLK2Freq>
 8003194:	4603      	mov	r3, r0
 8003196:	490d      	ldr	r1, [pc, #52]	; (80031cc <BSP_I2C4_Init+0x70>)
 8003198:	4618      	mov	r0, r3
 800319a:	f000 f8e3 	bl	8003364 <I2C_GetTiming>
 800319e:	4603      	mov	r3, r0
 80031a0:	4619      	mov	r1, r3
 80031a2:	4807      	ldr	r0, [pc, #28]	; (80031c0 <BSP_I2C4_Init+0x64>)
 80031a4:	f000 f838 	bl	8003218 <MX_I2C4_Init>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80031ae:	f06f 0307 	mvn.w	r3, #7
 80031b2:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 80031b4:	687b      	ldr	r3, [r7, #4]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	240dfee4 	.word	0x240dfee4
 80031c4:	58001c00 	.word	0x58001c00
 80031c8:	240df4dc 	.word	0x240df4dc
 80031cc:	000186a0 	.word	0x000186a0

080031d0 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80031d6:	2300      	movs	r3, #0
 80031d8:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 80031da:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <BSP_I2C4_DeInit+0x40>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3b01      	subs	r3, #1
 80031e0:	4a0b      	ldr	r2, [pc, #44]	; (8003210 <BSP_I2C4_DeInit+0x40>)
 80031e2:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 80031e4:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <BSP_I2C4_DeInit+0x40>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10b      	bne.n	8003204 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 80031ec:	4809      	ldr	r0, [pc, #36]	; (8003214 <BSP_I2C4_DeInit+0x44>)
 80031ee:	f000 fb9b 	bl	8003928 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80031f2:	4808      	ldr	r0, [pc, #32]	; (8003214 <BSP_I2C4_DeInit+0x44>)
 80031f4:	f005 ff7e 	bl	80090f4 <HAL_I2C_DeInit>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80031fe:	f06f 0307 	mvn.w	r3, #7
 8003202:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8003204:	687b      	ldr	r3, [r7, #4]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	240df4dc 	.word	0x240df4dc
 8003214:	240dfee4 	.word	0x240dfee4

08003218 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f005 febc 	bl	8008fd4 <HAL_I2C_Init>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
 8003266:	e014      	b.n	8003292 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8003268:	2300      	movs	r3, #0
 800326a:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f006 fc84 	bl	8009b7c <HAL_I2CEx_ConfigAnalogFilter>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	73fb      	strb	r3, [r7, #15]
 800327e:	e008      	b.n	8003292 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003280:	2100      	movs	r1, #0
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f006 fcc5 	bl	8009c12 <HAL_I2CEx_ConfigDigitalFilter>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8003292:	7bfb      	ldrb	r3, [r7, #15]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60ba      	str	r2, [r7, #8]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4603      	mov	r3, r0
 80032a8:	81fb      	strh	r3, [r7, #14]
 80032aa:	460b      	mov	r3, r1
 80032ac:	81bb      	strh	r3, [r7, #12]
 80032ae:	4613      	mov	r3, r2
 80032b0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80032b2:	89b9      	ldrh	r1, [r7, #12]
 80032b4:	89f8      	ldrh	r0, [r7, #14]
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2202      	movs	r2, #2
 80032be:	f000 fb57 	bl	8003970 <I2C4_WriteReg>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	e00c      	b.n	80032e8 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80032ce:	4809      	ldr	r0, [pc, #36]	; (80032f4 <BSP_I2C4_WriteReg16+0x58>)
 80032d0:	f006 f990 	bl	80095f4 <HAL_I2C_GetError>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d103      	bne.n	80032e2 <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80032da:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	e002      	b.n	80032e8 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80032e2:	f06f 0303 	mvn.w	r3, #3
 80032e6:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80032e8:	697b      	ldr	r3, [r7, #20]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	240dfee4 	.word	0x240dfee4

080032f8 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60ba      	str	r2, [r7, #8]
 8003300:	461a      	mov	r2, r3
 8003302:	4603      	mov	r3, r0
 8003304:	81fb      	strh	r3, [r7, #14]
 8003306:	460b      	mov	r3, r1
 8003308:	81bb      	strh	r3, [r7, #12]
 800330a:	4613      	mov	r3, r2
 800330c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 800330e:	89b9      	ldrh	r1, [r7, #12]
 8003310:	89f8      	ldrh	r0, [r7, #14]
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2202      	movs	r2, #2
 800331a:	f000 fb4f 	bl	80039bc <I2C4_ReadReg>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d102      	bne.n	800332a <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	e00c      	b.n	8003344 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800332a:	4809      	ldr	r0, [pc, #36]	; (8003350 <BSP_I2C4_ReadReg16+0x58>)
 800332c:	f006 f962 	bl	80095f4 <HAL_I2C_GetError>
 8003330:	4603      	mov	r3, r0
 8003332:	2b04      	cmp	r3, #4
 8003334:	d103      	bne.n	800333e <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003336:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	e002      	b.n	8003344 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800333e:	f06f 0303 	mvn.w	r3, #3
 8003342:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003344:	697b      	ldr	r3, [r7, #20]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	240dfee4 	.word	0x240dfee4

08003354 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8003358:	f000 ffd4 	bl	8004304 <HAL_GetTick>
 800335c:	4603      	mov	r3, r0
}
 800335e:	4618      	mov	r0, r3
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d06b      	beq.n	8003450 <I2C_GetTiming+0xec>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d068      	beq.n	8003450 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800337e:	2300      	movs	r3, #0
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	e060      	b.n	8003446 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003384:	4a35      	ldr	r2, [pc, #212]	; (800345c <I2C_GetTiming+0xf8>)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3304      	adds	r3, #4
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d352      	bcc.n	8003440 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800339a:	4a30      	ldr	r2, [pc, #192]	; (800345c <I2C_GetTiming+0xf8>)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	212c      	movs	r1, #44	; 0x2c
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	4413      	add	r3, r2
 80033a6:	3308      	adds	r3, #8
 80033a8:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d847      	bhi.n	8003440 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80033b0:	6939      	ldr	r1, [r7, #16]
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f856 	bl	8003464 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80033b8:	6939      	ldr	r1, [r7, #16]
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f940 	bl	8003640 <I2C_Compute_SCLL_SCLH>
 80033c0:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b7f      	cmp	r3, #127	; 0x7f
 80033c6:	d842      	bhi.n	800344e <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80033c8:	4925      	ldr	r1, [pc, #148]	; (8003460 <I2C_GetTiming+0xfc>)
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80033da:	4821      	ldr	r0, [pc, #132]	; (8003460 <I2C_GetTiming+0xfc>)
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4403      	add	r3, r0
 80033e8:	3304      	adds	r3, #4
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	051b      	lsls	r3, r3, #20
 80033ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80033f2:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80033f4:	481a      	ldr	r0, [pc, #104]	; (8003460 <I2C_GetTiming+0xfc>)
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4403      	add	r3, r0
 8003402:	3308      	adds	r3, #8
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	041b      	lsls	r3, r3, #16
 8003408:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800340c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800340e:	4814      	ldr	r0, [pc, #80]	; (8003460 <I2C_GetTiming+0xfc>)
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4403      	add	r3, r0
 800341c:	330c      	adds	r3, #12
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003424:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8003426:	480e      	ldr	r0, [pc, #56]	; (8003460 <I2C_GetTiming+0xfc>)
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4403      	add	r3, r0
 8003434:	3310      	adds	r3, #16
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800343a:	430b      	orrs	r3, r1
 800343c:	617b      	str	r3, [r7, #20]
        }
        break;
 800343e:	e006      	b.n	800344e <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	3301      	adds	r3, #1
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d99b      	bls.n	8003384 <I2C_GetTiming+0x20>
 800344c:	e000      	b.n	8003450 <I2C_GetTiming+0xec>
        break;
 800344e:	bf00      	nop
      }
    }
  }

  return ret;
 8003450:	697b      	ldr	r3, [r7, #20]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	0801082c 	.word	0x0801082c
 8003460:	240df4e0 	.word	0x240df4e0

08003464 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003464:	b480      	push	{r7}
 8003466:	b08f      	sub	sp, #60	; 0x3c
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800346e:	2310      	movs	r3, #16
 8003470:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	085a      	lsrs	r2, r3, #1
 8003476:	4b6e      	ldr	r3, [pc, #440]	; (8003630 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8003478:	4413      	add	r3, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003480:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003482:	2332      	movs	r3, #50	; 0x32
 8003484:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8003486:	f44f 7382 	mov.w	r3, #260	; 0x104
 800348a:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800348c:	4a69      	ldr	r2, [pc, #420]	; (8003634 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	212c      	movs	r1, #44	; 0x2c
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4413      	add	r3, r2
 8003498:	3324      	adds	r3, #36	; 0x24
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	4a65      	ldr	r2, [pc, #404]	; (8003634 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	330c      	adds	r3, #12
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80034b0:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80034b2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80034b4:	495f      	ldr	r1, [pc, #380]	; (8003634 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	202c      	movs	r0, #44	; 0x2c
 80034ba:	fb00 f303 	mul.w	r3, r0, r3
 80034be:	440b      	add	r3, r1
 80034c0:	3328      	adds	r3, #40	; 0x28
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3303      	adds	r3, #3
 80034c6:	69f9      	ldr	r1, [r7, #28]
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80034d0:	4a58      	ldr	r2, [pc, #352]	; (8003634 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	212c      	movs	r1, #44	; 0x2c
 80034d6:	fb01 f303 	mul.w	r3, r1, r3
 80034da:	4413      	add	r3, r2
 80034dc:	3310      	adds	r3, #16
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	4a54      	ldr	r2, [pc, #336]	; (8003634 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	212c      	movs	r1, #44	; 0x2c
 80034e8:	fb01 f303 	mul.w	r3, r1, r3
 80034ec:	4413      	add	r3, r2
 80034ee:	3320      	adds	r3, #32
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80034f4:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80034f6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80034f8:	494e      	ldr	r1, [pc, #312]	; (8003634 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	202c      	movs	r0, #44	; 0x2c
 80034fe:	fb00 f303 	mul.w	r3, r0, r3
 8003502:	440b      	add	r3, r1
 8003504:	3328      	adds	r3, #40	; 0x28
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3304      	adds	r3, #4
 800350a:	69f9      	ldr	r1, [r7, #28]
 800350c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8003514:	4a47      	ldr	r2, [pc, #284]	; (8003634 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	3320      	adds	r3, #32
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	4a43      	ldr	r2, [pc, #268]	; (8003634 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	212c      	movs	r1, #44	; 0x2c
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	4413      	add	r3, r2
 8003532:	3314      	adds	r3, #20
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4403      	add	r3, r0
 8003538:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	2b00      	cmp	r3, #0
 800353e:	dc01      	bgt.n	8003544 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003546:	2b00      	cmp	r3, #0
 8003548:	dc01      	bgt.n	800354e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800354e:	2300      	movs	r3, #0
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28
 8003552:	e062      	b.n	800361a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003554:	2300      	movs	r3, #0
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
 8003558:	e059      	b.n	800360e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	3301      	adds	r3, #1
 800355e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003560:	3201      	adds	r2, #1
 8003562:	fb03 f202 	mul.w	r2, r3, r2
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	fb02 f303 	mul.w	r3, r2, r3
 800356c:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	429a      	cmp	r2, r3
 8003574:	d348      	bcc.n	8003608 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003576:	2300      	movs	r3, #0
 8003578:	623b      	str	r3, [r7, #32]
 800357a:	e042      	b.n	8003602 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357e:	3301      	adds	r3, #1
 8003580:	6a3a      	ldr	r2, [r7, #32]
 8003582:	fb03 f202 	mul.w	r2, r3, r2
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	fb02 f303 	mul.w	r3, r2, r3
 800358c:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800358e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	429a      	cmp	r2, r3
 8003594:	d332      	bcc.n	80035fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	429a      	cmp	r2, r3
 800359c:	d82e      	bhi.n	80035fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800359e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d02a      	beq.n	80035fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80035a6:	4b24      	ldr	r3, [pc, #144]	; (8003638 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	4924      	ldr	r1, [pc, #144]	; (800363c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035b8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80035ba:	4b1f      	ldr	r3, [pc, #124]	; (8003638 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	491f      	ldr	r1, [pc, #124]	; (800363c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	3304      	adds	r3, #4
 80035cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ce:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80035d0:	4b19      	ldr	r3, [pc, #100]	; (8003638 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4919      	ldr	r1, [pc, #100]	; (800363c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	3308      	adds	r3, #8
 80035e2:	6a3a      	ldr	r2, [r7, #32]
 80035e4:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80035ea:	4b13      	ldr	r3, [pc, #76]	; (8003638 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3301      	adds	r3, #1
 80035f0:	4a11      	ldr	r2, [pc, #68]	; (8003638 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80035f2:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80035f4:	4b10      	ldr	r3, [pc, #64]	; (8003638 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b7f      	cmp	r3, #127	; 0x7f
 80035fa:	d812      	bhi.n	8003622 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	3301      	adds	r3, #1
 8003600:	623b      	str	r3, [r7, #32]
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	2b0f      	cmp	r3, #15
 8003606:	d9b9      	bls.n	800357c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	3301      	adds	r3, #1
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	2b0f      	cmp	r3, #15
 8003612:	d9a2      	bls.n	800355a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003616:	3301      	adds	r3, #1
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
 800361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361c:	2b0f      	cmp	r3, #15
 800361e:	d999      	bls.n	8003554 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8003620:	e000      	b.n	8003624 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8003622:	bf00      	nop
          }
        }
      }
    }
  }
}
 8003624:	373c      	adds	r7, #60	; 0x3c
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	3b9aca00 	.word	0x3b9aca00
 8003634:	0801082c 	.word	0x0801082c
 8003638:	240dfee0 	.word	0x240dfee0
 800363c:	240df4e0 	.word	0x240df4e0

08003640 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003640:	b480      	push	{r7}
 8003642:	b093      	sub	sp, #76	; 0x4c
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800364a:	f04f 33ff 	mov.w	r3, #4294967295
 800364e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	085a      	lsrs	r2, r3, #1
 8003654:	4b7a      	ldr	r3, [pc, #488]	; (8003840 <I2C_Compute_SCLL_SCLH+0x200>)
 8003656:	4413      	add	r3, r2
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	fbb3 f3f2 	udiv	r3, r3, r2
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003660:	4a78      	ldr	r2, [pc, #480]	; (8003844 <I2C_Compute_SCLL_SCLH+0x204>)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	212c      	movs	r1, #44	; 0x2c
 8003666:	fb01 f303 	mul.w	r3, r1, r3
 800366a:	4413      	add	r3, r2
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	085a      	lsrs	r2, r3, #1
 8003670:	4b73      	ldr	r3, [pc, #460]	; (8003840 <I2C_Compute_SCLL_SCLH+0x200>)
 8003672:	4413      	add	r3, r2
 8003674:	4973      	ldr	r1, [pc, #460]	; (8003844 <I2C_Compute_SCLL_SCLH+0x204>)
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	202c      	movs	r0, #44	; 0x2c
 800367a:	fb00 f202 	mul.w	r2, r0, r2
 800367e:	440a      	add	r2, r1
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	fbb3 f3f2 	udiv	r3, r3, r2
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003688:	2332      	movs	r3, #50	; 0x32
 800368a:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800368c:	4a6d      	ldr	r2, [pc, #436]	; (8003844 <I2C_Compute_SCLL_SCLH+0x204>)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	212c      	movs	r1, #44	; 0x2c
 8003692:	fb01 f303 	mul.w	r3, r1, r3
 8003696:	4413      	add	r3, r2
 8003698:	3328      	adds	r3, #40	; 0x28
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369e:	fb02 f303 	mul.w	r3, r2, r3
 80036a2:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80036a4:	4a67      	ldr	r2, [pc, #412]	; (8003844 <I2C_Compute_SCLL_SCLH+0x204>)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	212c      	movs	r1, #44	; 0x2c
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	4413      	add	r3, r2
 80036b0:	3304      	adds	r3, #4
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a62      	ldr	r2, [pc, #392]	; (8003840 <I2C_Compute_SCLL_SCLH+0x200>)
 80036b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ba:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80036bc:	4a61      	ldr	r2, [pc, #388]	; (8003844 <I2C_Compute_SCLL_SCLH+0x204>)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	212c      	movs	r1, #44	; 0x2c
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	3308      	adds	r3, #8
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a5c      	ldr	r2, [pc, #368]	; (8003840 <I2C_Compute_SCLL_SCLH+0x200>)
 80036ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d2:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80036d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d6:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80036d8:	2300      	movs	r3, #0
 80036da:	637b      	str	r3, [r7, #52]	; 0x34
 80036dc:	e0a3      	b.n	8003826 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80036de:	495a      	ldr	r1, [pc, #360]	; (8003848 <I2C_Compute_SCLL_SCLH+0x208>)
 80036e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80036f8:	2300      	movs	r3, #0
 80036fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036fc:	e08c      	b.n	8003818 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80036fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	441a      	add	r2, r3
 8003704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003706:	3301      	adds	r3, #1
 8003708:	6979      	ldr	r1, [r7, #20]
 800370a:	fb03 f101 	mul.w	r1, r3, r1
 800370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	440b      	add	r3, r1
 8003714:	4413      	add	r3, r2
 8003716:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003718:	4a4a      	ldr	r2, [pc, #296]	; (8003844 <I2C_Compute_SCLL_SCLH+0x204>)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	212c      	movs	r1, #44	; 0x2c
 800371e:	fb01 f303 	mul.w	r3, r1, r3
 8003722:	4413      	add	r3, r2
 8003724:	3318      	adds	r3, #24
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	429a      	cmp	r2, r3
 800372c:	d971      	bls.n	8003812 <I2C_Compute_SCLL_SCLH+0x1d2>
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	1ad2      	subs	r2, r2, r3
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	089b      	lsrs	r3, r3, #2
 800373a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800373c:	429a      	cmp	r2, r3
 800373e:	d268      	bcs.n	8003812 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003740:	2300      	movs	r3, #0
 8003742:	63bb      	str	r3, [r7, #56]	; 0x38
 8003744:	e062      	b.n	800380c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	441a      	add	r2, r3
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	3301      	adds	r3, #1
 8003750:	6979      	ldr	r1, [r7, #20]
 8003752:	fb03 f101 	mul.w	r1, r3, r1
 8003756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	440b      	add	r3, r1
 800375c:	4413      	add	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	441a      	add	r2, r3
 8003766:	4937      	ldr	r1, [pc, #220]	; (8003844 <I2C_Compute_SCLL_SCLH+0x204>)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	202c      	movs	r0, #44	; 0x2c
 800376c:	fb00 f303 	mul.w	r3, r0, r3
 8003770:	440b      	add	r3, r1
 8003772:	3320      	adds	r3, #32
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	441a      	add	r2, r3
 8003778:	4932      	ldr	r1, [pc, #200]	; (8003844 <I2C_Compute_SCLL_SCLH+0x204>)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	202c      	movs	r0, #44	; 0x2c
 800377e:	fb00 f303 	mul.w	r3, r0, r3
 8003782:	440b      	add	r3, r1
 8003784:	3324      	adds	r3, #36	; 0x24
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4413      	add	r3, r2
 800378a:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	429a      	cmp	r2, r3
 8003792:	d338      	bcc.n	8003806 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	429a      	cmp	r2, r3
 800379a:	d834      	bhi.n	8003806 <I2C_Compute_SCLL_SCLH+0x1c6>
 800379c:	4a29      	ldr	r2, [pc, #164]	; (8003844 <I2C_Compute_SCLL_SCLH+0x204>)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	212c      	movs	r1, #44	; 0x2c
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	4413      	add	r3, r2
 80037a8:	331c      	adds	r3, #28
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d329      	bcc.n	8003806 <I2C_Compute_SCLL_SCLH+0x1c6>
 80037b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d225      	bcs.n	8003806 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80037c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	da02      	bge.n	80037ce <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	425b      	negs	r3, r3
 80037cc:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d917      	bls.n	8003806 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80037da:	491b      	ldr	r1, [pc, #108]	; (8003848 <I2C_Compute_SCLL_SCLH+0x208>)
 80037dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	3310      	adds	r3, #16
 80037ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037ec:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80037ee:	4916      	ldr	r1, [pc, #88]	; (8003848 <I2C_Compute_SCLL_SCLH+0x208>)
 80037f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	330c      	adds	r3, #12
 80037fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003800:	601a      	str	r2, [r3, #0]
              ret = count;
 8003802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003804:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003808:	3301      	adds	r3, #1
 800380a:	63bb      	str	r3, [r7, #56]	; 0x38
 800380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380e:	2bff      	cmp	r3, #255	; 0xff
 8003810:	d999      	bls.n	8003746 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003814:	3301      	adds	r3, #1
 8003816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800381a:	2bff      	cmp	r3, #255	; 0xff
 800381c:	f67f af6f 	bls.w	80036fe <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003822:	3301      	adds	r3, #1
 8003824:	637b      	str	r3, [r7, #52]	; 0x34
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <I2C_Compute_SCLL_SCLH+0x20c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800382c:	429a      	cmp	r2, r3
 800382e:	f4ff af56 	bcc.w	80036de <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8003832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003834:	4618      	mov	r0, r3
 8003836:	374c      	adds	r7, #76	; 0x4c
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	3b9aca00 	.word	0x3b9aca00
 8003844:	0801082c 	.word	0x0801082c
 8003848:	240df4e0 	.word	0x240df4e0
 800384c:	240dfee0 	.word	0x240dfee0

08003850 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	; 0x28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003858:	4b31      	ldr	r3, [pc, #196]	; (8003920 <I2C4_MspInit+0xd0>)
 800385a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800385e:	4a30      	ldr	r2, [pc, #192]	; (8003920 <I2C4_MspInit+0xd0>)
 8003860:	f043 0308 	orr.w	r3, r3, #8
 8003864:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003868:	4b2d      	ldr	r3, [pc, #180]	; (8003920 <I2C4_MspInit+0xd0>)
 800386a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8003876:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <I2C4_MspInit+0xd0>)
 8003878:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800387c:	4a28      	ldr	r2, [pc, #160]	; (8003920 <I2C4_MspInit+0xd0>)
 800387e:	f043 0308 	orr.w	r3, r3, #8
 8003882:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003886:	4b26      	ldr	r3, [pc, #152]	; (8003920 <I2C4_MspInit+0xd0>)
 8003888:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8003894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003898:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800389a:	2312      	movs	r3, #18
 800389c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80038a2:	2302      	movs	r3, #2
 80038a4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80038a6:	2304      	movs	r3, #4
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80038aa:	f107 0314 	add.w	r3, r7, #20
 80038ae:	4619      	mov	r1, r3
 80038b0:	481c      	ldr	r0, [pc, #112]	; (8003924 <I2C4_MspInit+0xd4>)
 80038b2:	f005 f8a1 	bl	80089f8 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80038b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038ba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80038bc:	2312      	movs	r3, #18
 80038be:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80038c4:	2302      	movs	r3, #2
 80038c6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80038c8:	2304      	movs	r3, #4
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	4619      	mov	r1, r3
 80038d2:	4814      	ldr	r0, [pc, #80]	; (8003924 <I2C4_MspInit+0xd4>)
 80038d4:	f005 f890 	bl	80089f8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 80038d8:	4b11      	ldr	r3, [pc, #68]	; (8003920 <I2C4_MspInit+0xd0>)
 80038da:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80038de:	4a10      	ldr	r2, [pc, #64]	; (8003920 <I2C4_MspInit+0xd0>)
 80038e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80038e8:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <I2C4_MspInit+0xd0>)
 80038ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80038ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 80038f6:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <I2C4_MspInit+0xd0>)
 80038f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038fc:	4a08      	ldr	r2, [pc, #32]	; (8003920 <I2C4_MspInit+0xd0>)
 80038fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003902:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <I2C4_MspInit+0xd0>)
 8003908:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800390c:	4a04      	ldr	r2, [pc, #16]	; (8003920 <I2C4_MspInit+0xd0>)
 800390e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003912:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8003916:	bf00      	nop
 8003918:	3728      	adds	r7, #40	; 0x28
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	58024400 	.word	0x58024400
 8003924:	58020c00 	.word	0x58020c00

08003928 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8003930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003934:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4619      	mov	r1, r3
 800393a:	480b      	ldr	r0, [pc, #44]	; (8003968 <I2C4_MspDeInit+0x40>)
 800393c:	f005 fa0c 	bl	8008d58 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003944:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4619      	mov	r1, r3
 800394a:	4807      	ldr	r0, [pc, #28]	; (8003968 <I2C4_MspDeInit+0x40>)
 800394c:	f005 fa04 	bl	8008d58 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <I2C4_MspDeInit+0x44>)
 8003952:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003956:	4a05      	ldr	r2, [pc, #20]	; (800396c <I2C4_MspDeInit+0x44>)
 8003958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800395c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8003960:	bf00      	nop
 8003962:	3720      	adds	r7, #32
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	58020c00 	.word	0x58020c00
 800396c:	58024400 	.word	0x58024400

08003970 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af04      	add	r7, sp, #16
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	4603      	mov	r3, r0
 800397a:	81fb      	strh	r3, [r7, #14]
 800397c:	460b      	mov	r3, r1
 800397e:	81bb      	strh	r3, [r7, #12]
 8003980:	4613      	mov	r3, r2
 8003982:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003984:	8978      	ldrh	r0, [r7, #10]
 8003986:	89ba      	ldrh	r2, [r7, #12]
 8003988:	89f9      	ldrh	r1, [r7, #14]
 800398a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800398e:	9302      	str	r3, [sp, #8]
 8003990:	8b3b      	ldrh	r3, [r7, #24]
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	4603      	mov	r3, r0
 800399a:	4807      	ldr	r0, [pc, #28]	; (80039b8 <I2C4_WriteReg+0x48>)
 800399c:	f005 fbee 	bl	800917c <HAL_I2C_Mem_Write>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e001      	b.n	80039ae <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80039aa:	f06f 0307 	mvn.w	r3, #7
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	240dfee4 	.word	0x240dfee4

080039bc <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af04      	add	r7, sp, #16
 80039c2:	607b      	str	r3, [r7, #4]
 80039c4:	4603      	mov	r3, r0
 80039c6:	81fb      	strh	r3, [r7, #14]
 80039c8:	460b      	mov	r3, r1
 80039ca:	81bb      	strh	r3, [r7, #12]
 80039cc:	4613      	mov	r3, r2
 80039ce:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80039d0:	8978      	ldrh	r0, [r7, #10]
 80039d2:	89ba      	ldrh	r2, [r7, #12]
 80039d4:	89f9      	ldrh	r1, [r7, #14]
 80039d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039da:	9302      	str	r3, [sp, #8]
 80039dc:	8b3b      	ldrh	r3, [r7, #24]
 80039de:	9301      	str	r3, [sp, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	4603      	mov	r3, r0
 80039e6:	4807      	ldr	r0, [pc, #28]	; (8003a04 <I2C4_ReadReg+0x48>)
 80039e8:	f005 fcdc 	bl	80093a4 <HAL_I2C_Mem_Read>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e001      	b.n	80039fa <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80039f6:	f06f 0307 	mvn.w	r3, #7
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	240dfee4 	.word	0x240dfee4

08003a08 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003a1e:	f06f 0301 	mvn.w	r3, #1
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	e02d      	b.n	8003a82 <BSP_CAMERA_Init+0x7a>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    HAL_DCMI_MspInit(&hdcmi);
 8003a26:	4819      	ldr	r0, [pc, #100]	; (8003a8c <BSP_CAMERA_Init+0x84>)
 8003a28:	f7fc fe68 	bl	80006fc <HAL_DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    MX_DCMI_Init();
 8003a2c:	f7fc fe32 	bl	8000694 <MX_DCMI_Init>

    if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 8003a30:	2000      	movs	r0, #0
 8003a32:	f000 f887 	bl	8003b44 <BSP_CAMERA_HwReset>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <BSP_CAMERA_Init+0x3c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003a3c:	f06f 0307 	mvn.w	r3, #7
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	e01e      	b.n	8003a82 <BSP_CAMERA_Init+0x7a>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	68b8      	ldr	r0, [r7, #8]
 8003a48:	f000 f93e 	bl	8003cc8 <OV5640_Probe>
 8003a4c:	6178      	str	r0, [r7, #20]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <BSP_CAMERA_Init+0x54>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003a54:	f06f 0306 	mvn.w	r3, #6
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	e012      	b.n	8003a82 <BSP_CAMERA_Init+0x7a>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 8003a5c:	490c      	ldr	r1, [pc, #48]	; (8003a90 <BSP_CAMERA_Init+0x88>)
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4613      	mov	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	4413      	add	r3, r2
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	440b      	add	r3, r1
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 8003a6e:	4908      	ldr	r1, [pc, #32]	; (8003a90 <BSP_CAMERA_Init+0x88>)
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4613      	mov	r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	4413      	add	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	440b      	add	r3, r1
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 8003a82:	697b      	ldr	r3, [r7, #20]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	240000d4 	.word	0x240000d4
 8003a90:	240dff3c 	.word	0x240dff3c

08003a94 <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003aa6:	f06f 0301 	mvn.w	r3, #1
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	e022      	b.n	8003af4 <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hdcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 8003aae:	68bc      	ldr	r4, [r7, #8]
 8003ab0:	4913      	ldr	r1, [pc, #76]	; (8003b00 <BSP_CAMERA_Start+0x6c>)
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	4413      	add	r3, r2
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	440b      	add	r3, r1
 8003abe:	6818      	ldr	r0, [r3, #0]
 8003ac0:	490f      	ldr	r1, [pc, #60]	; (8003b00 <BSP_CAMERA_Start+0x6c>)
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4413      	add	r3, r2
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	440b      	add	r3, r1
 8003ace:	3304      	adds	r3, #4
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	f000 f8a6 	bl	8003c24 <GetSize>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	4622      	mov	r2, r4
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4809      	ldr	r0, [pc, #36]	; (8003b04 <BSP_CAMERA_Start+0x70>)
 8003ae0:	f000 fdca 	bl	8004678 <HAL_DCMI_Start_DMA>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8003aea:	f06f 0303 	mvn.w	r3, #3
 8003aee:	e002      	b.n	8003af6 <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8003af4:	697b      	ldr	r3, [r7, #20]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd90      	pop	{r4, r7, pc}
 8003afe:	bf00      	nop
 8003b00:	240dff3c 	.word	0x240dff3c
 8003b04:	240000d4 	.word	0x240000d4

08003b08 <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003b16:	f06f 0301 	mvn.w	r3, #1
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	e00b      	b.n	8003b36 <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hdcmi) != HAL_OK)
 8003b1e:	4808      	ldr	r0, [pc, #32]	; (8003b40 <BSP_CAMERA_Stop+0x38>)
 8003b20:	f000 fe6c 	bl	80047fc <HAL_DCMI_Stop>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8003b2a:	f06f 0303 	mvn.w	r3, #3
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e001      	b.n	8003b36 <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8003b36:	68fb      	ldr	r3, [r7, #12]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	240000d4 	.word	0x240000d4

08003b44 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <BSP_CAMERA_HwReset+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003b56:	f06f 0301 	mvn.w	r3, #1
 8003b5a:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b085      	sub	sp, #20
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <BSP_CAMERA_PwrDown+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003b7c:	f06f 0301 	mvn.w	r3, #1
 8003b80:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003b82:	68fb      	ldr	r3, [r7, #12]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	f7ff ffdb 	bl	8003b90 <BSP_CAMERA_LineEventCallback>
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 {
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 8003bea:	2000      	movs	r0, #0
 8003bec:	f7fd fcec 	bl	80015c8 <BSP_CAMERA_FrameEventCallback>
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8003c00:	2000      	movs	r0, #0
 8003c02:	f7ff ffcf 	bl	8003ba4 <BSP_CAMERA_VsyncEventCallback>
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 8003c16:	2000      	movs	r0, #0
 8003c18:	f7ff ffce 	bl	8003bb8 <BSP_CAMERA_ErrorCallback>
}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d102      	bne.n	8003c3e <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 8003c38:	2303      	movs	r3, #3
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	e001      	b.n	8003c42 <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 8003c3e:	2302      	movs	r3, #2
 8003c40:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d834      	bhi.n	8003cb2 <GetSize+0x8e>
 8003c48:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <GetSize+0x2c>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003c65 	.word	0x08003c65
 8003c54:	08003c75 	.word	0x08003c75
 8003c58:	08003c85 	.word	0x08003c85
 8003c5c:	08003c95 	.word	0x08003c95
 8003c60:	08003ca5 	.word	0x08003ca5
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	60fb      	str	r3, [r7, #12]
    break;
 8003c72:	e01f      	b.n	8003cb4 <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8003c7a:	fb02 f303 	mul.w	r3, r2, r3
 8003c7e:	089b      	lsrs	r3, r3, #2
 8003c80:	60fb      	str	r3, [r7, #12]
    break;
 8003c82:	e017      	b.n	8003cb4 <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	4613      	mov	r3, r2
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	025b      	lsls	r3, r3, #9
 8003c8e:	089b      	lsrs	r3, r3, #2
 8003c90:	60fb      	str	r3, [r7, #12]
    break;
 8003c92:	e00f      	b.n	8003cb4 <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 8003c9a:	fb02 f303 	mul.w	r3, r2, r3
 8003c9e:	089b      	lsrs	r3, r3, #2
 8003ca0:	60fb      	str	r3, [r7, #12]
    break;
 8003ca2:	e007      	b.n	8003cb4 <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4a07      	ldr	r2, [pc, #28]	; (8003cc4 <GetSize+0xa0>)
 8003ca8:	fb02 f303 	mul.w	r3, r2, r3
 8003cac:	089b      	lsrs	r3, r3, #2
 8003cae:	60fb      	str	r3, [r7, #12]
    break;
 8003cb0:	e000      	b.n	8003cb4 <GetSize+0x90>
  default:
    break;
 8003cb2:	bf00      	nop
  }

  return (int32_t)size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	0005dc00 	.word	0x0005dc00

08003cc8 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08a      	sub	sp, #40	; 0x28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8003cd2:	2378      	movs	r3, #120	; 0x78
 8003cd4:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003cd6:	4b2c      	ldr	r3, [pc, #176]	; (8003d88 <OV5640_Probe+0xc0>)
 8003cd8:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003cda:	4b2c      	ldr	r3, [pc, #176]	; (8003d8c <OV5640_Probe+0xc4>)
 8003cdc:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8003cde:	4b2c      	ldr	r3, [pc, #176]	; (8003d90 <OV5640_Probe+0xc8>)
 8003ce0:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8003ce2:	4b2c      	ldr	r3, [pc, #176]	; (8003d94 <OV5640_Probe+0xcc>)
 8003ce4:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003ce6:	4b2c      	ldr	r3, [pc, #176]	; (8003d98 <OV5640_Probe+0xd0>)
 8003ce8:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8003cea:	f107 030c 	add.w	r3, r7, #12
 8003cee:	4619      	mov	r1, r3
 8003cf0:	482a      	ldr	r0, [pc, #168]	; (8003d9c <OV5640_Probe+0xd4>)
 8003cf2:	f7fd fc7f 	bl	80015f4 <OV5640_RegisterBusIO>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003cfc:	f06f 0304 	mvn.w	r3, #4
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
 8003d02:	e03c      	b.n	8003d7e <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8003d04:	f107 0308 	add.w	r3, r7, #8
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4824      	ldr	r0, [pc, #144]	; (8003d9c <OV5640_Probe+0xd4>)
 8003d0c:	f7fe f8c6 	bl	8001e9c <OV5640_ReadID>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d16:	f06f 0304 	mvn.w	r3, #4
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1c:	e02f      	b.n	8003d7e <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f245 6240 	movw	r2, #22080	; 0x5640
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003d28:	f06f 0306 	mvn.w	r3, #6
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d2e:	e026      	b.n	8003d7e <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8003d30:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <OV5640_Probe+0xd8>)
 8003d32:	4a1c      	ldr	r2, [pc, #112]	; (8003da4 <OV5640_Probe+0xdc>)
 8003d34:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 8003d36:	4b1c      	ldr	r3, [pc, #112]	; (8003da8 <OV5640_Probe+0xe0>)
 8003d38:	4a18      	ldr	r2, [pc, #96]	; (8003d9c <OV5640_Probe+0xd4>)
 8003d3a:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8003d3c:	4b18      	ldr	r3, [pc, #96]	; (8003da0 <OV5640_Probe+0xd8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a19      	ldr	r2, [pc, #100]	; (8003da8 <OV5640_Probe+0xe0>)
 8003d44:	6810      	ldr	r0, [r2, #0]
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	4798      	blx	r3
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d52:	f06f 0304 	mvn.w	r3, #4
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
 8003d58:	e011      	b.n	8003d7e <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <OV5640_Probe+0xd8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4a11      	ldr	r2, [pc, #68]	; (8003da8 <OV5640_Probe+0xe0>)
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	4911      	ldr	r1, [pc, #68]	; (8003dac <OV5640_Probe+0xe4>)
 8003d66:	6809      	ldr	r1, [r1, #0]
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4798      	blx	r3
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d72:	f06f 0304 	mvn.w	r3, #4
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
 8003d78:	e001      	b.n	8003d7e <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3728      	adds	r7, #40	; 0x28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	0800315d 	.word	0x0800315d
 8003d8c:	080031d1 	.word	0x080031d1
 8003d90:	080032f9 	.word	0x080032f9
 8003d94:	0800329d 	.word	0x0800329d
 8003d98:	08003355 	.word	0x08003355
 8003d9c:	240dff74 	.word	0x240dff74
 8003da0:	240dff6c 	.word	0x240dff6c
 8003da4:	24000000 	.word	0x24000000
 8003da8:	240dff38 	.word	0x240dff38
 8003dac:	240dff70 	.word	0x240dff70

08003db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003db6:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <HAL_MspInit+0x30>)
 8003db8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003dbc:	4a08      	ldr	r2, [pc, #32]	; (8003de0 <HAL_MspInit+0x30>)
 8003dbe:	f043 0302 	orr.w	r3, r3, #2
 8003dc2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003dc6:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <HAL_MspInit+0x30>)
 8003dc8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	607b      	str	r3, [r7, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	58024400 	.word	0x58024400

08003de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003de8:	e7fe      	b.n	8003de8 <NMI_Handler+0x4>

08003dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dea:	b480      	push	{r7}
 8003dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dee:	e7fe      	b.n	8003dee <HardFault_Handler+0x4>

08003df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003df4:	e7fe      	b.n	8003df4 <MemManage_Handler+0x4>

08003df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003df6:	b480      	push	{r7}
 8003df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dfa:	e7fe      	b.n	8003dfa <BusFault_Handler+0x4>

08003dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e00:	e7fe      	b.n	8003e00 <UsageFault_Handler+0x4>

08003e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e02:	b480      	push	{r7}
 8003e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e06:	bf00      	nop
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e14:	bf00      	nop
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e30:	f000 fa54 	bl	80042dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e34:	bf00      	nop
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e3c:	4802      	ldr	r0, [pc, #8]	; (8003e48 <USART1_IRQHandler+0x10>)
 8003e3e:	f009 fbd5 	bl	800d5ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e42:	bf00      	nop
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	240dffa0 	.word	0x240dffa0

08003e4c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003e50:	4802      	ldr	r0, [pc, #8]	; (8003e5c <DMA2_Stream1_IRQHandler+0x10>)
 8003e52:	f002 f9c3 	bl	80061dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	24000124 	.word	0x24000124

08003e60 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003e64:	4802      	ldr	r0, [pc, #8]	; (8003e70 <DCMI_PSSI_IRQHandler+0x10>)
 8003e66:	f000 fd29 	bl	80048bc <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	240000d4 	.word	0x240000d4

08003e74 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003e78:	4802      	ldr	r0, [pc, #8]	; (8003e84 <LTDC_IRQHandler+0x10>)
 8003e7a:	f005 ffe7 	bl	8009e4c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003e7e:	bf00      	nop
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	24000204 	.word	0x24000204

08003e88 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC Error global Interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003e8c:	4802      	ldr	r0, [pc, #8]	; (8003e98 <LTDC_ER_IRQHandler+0x10>)
 8003e8e:	f005 ffdd 	bl	8009e4c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8003e92:	bf00      	nop
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	24000204 	.word	0x24000204

08003e9c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003ea0:	4802      	ldr	r0, [pc, #8]	; (8003eac <DMA2D_IRQHandler+0x10>)
 8003ea2:	f003 fe95 	bl	8007bd0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003ea6:	bf00      	nop
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	2400019c 	.word	0x2400019c

08003eb0 <_lseek>:
//  (void)file;
//  return 1;
//}

int _lseek(int file, int ptr, int dir)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ed4:	4a14      	ldr	r2, [pc, #80]	; (8003f28 <_sbrk+0x5c>)
 8003ed6:	4b15      	ldr	r3, [pc, #84]	; (8003f2c <_sbrk+0x60>)
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ee0:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <_sbrk+0x64>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d102      	bne.n	8003eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ee8:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <_sbrk+0x64>)
 8003eea:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <_sbrk+0x68>)
 8003eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <_sbrk+0x64>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d207      	bcs.n	8003f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003efc:	f00b f938 	bl	800f170 <__errno>
 8003f00:	4603      	mov	r3, r0
 8003f02:	220c      	movs	r2, #12
 8003f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f06:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0a:	e009      	b.n	8003f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f0c:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <_sbrk+0x64>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f12:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <_sbrk+0x64>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	4a05      	ldr	r2, [pc, #20]	; (8003f30 <_sbrk+0x64>)
 8003f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	24100000 	.word	0x24100000
 8003f2c:	00000400 	.word	0x00000400
 8003f30:	240dff9c 	.word	0x240dff9c
 8003f34:	240e0048 	.word	0x240e0048

08003f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f3c:	4b32      	ldr	r3, [pc, #200]	; (8004008 <SystemInit+0xd0>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f42:	4a31      	ldr	r2, [pc, #196]	; (8004008 <SystemInit+0xd0>)
 8003f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f4c:	4b2f      	ldr	r3, [pc, #188]	; (800400c <SystemInit+0xd4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d807      	bhi.n	8003f68 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f58:	4b2c      	ldr	r3, [pc, #176]	; (800400c <SystemInit+0xd4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f023 030f 	bic.w	r3, r3, #15
 8003f60:	4a2a      	ldr	r2, [pc, #168]	; (800400c <SystemInit+0xd4>)
 8003f62:	f043 0303 	orr.w	r3, r3, #3
 8003f66:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003f68:	4b29      	ldr	r3, [pc, #164]	; (8004010 <SystemInit+0xd8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a28      	ldr	r2, [pc, #160]	; (8004010 <SystemInit+0xd8>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f74:	4b26      	ldr	r3, [pc, #152]	; (8004010 <SystemInit+0xd8>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003f7a:	4b25      	ldr	r3, [pc, #148]	; (8004010 <SystemInit+0xd8>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4924      	ldr	r1, [pc, #144]	; (8004010 <SystemInit+0xd8>)
 8003f80:	4b24      	ldr	r3, [pc, #144]	; (8004014 <SystemInit+0xdc>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f86:	4b21      	ldr	r3, [pc, #132]	; (800400c <SystemInit+0xd4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d007      	beq.n	8003fa2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f92:	4b1e      	ldr	r3, [pc, #120]	; (800400c <SystemInit+0xd4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f023 030f 	bic.w	r3, r3, #15
 8003f9a:	4a1c      	ldr	r2, [pc, #112]	; (800400c <SystemInit+0xd4>)
 8003f9c:	f043 0303 	orr.w	r3, r3, #3
 8003fa0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003fa2:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <SystemInit+0xd8>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003fa8:	4b19      	ldr	r3, [pc, #100]	; (8004010 <SystemInit+0xd8>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8003fae:	4b18      	ldr	r3, [pc, #96]	; (8004010 <SystemInit+0xd8>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003fb4:	4b16      	ldr	r3, [pc, #88]	; (8004010 <SystemInit+0xd8>)
 8003fb6:	4a18      	ldr	r2, [pc, #96]	; (8004018 <SystemInit+0xe0>)
 8003fb8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003fba:	4b15      	ldr	r3, [pc, #84]	; (8004010 <SystemInit+0xd8>)
 8003fbc:	4a17      	ldr	r2, [pc, #92]	; (800401c <SystemInit+0xe4>)
 8003fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003fc0:	4b13      	ldr	r3, [pc, #76]	; (8004010 <SystemInit+0xd8>)
 8003fc2:	4a17      	ldr	r2, [pc, #92]	; (8004020 <SystemInit+0xe8>)
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003fc6:	4b12      	ldr	r3, [pc, #72]	; (8004010 <SystemInit+0xd8>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003fcc:	4b10      	ldr	r3, [pc, #64]	; (8004010 <SystemInit+0xd8>)
 8003fce:	4a14      	ldr	r2, [pc, #80]	; (8004020 <SystemInit+0xe8>)
 8003fd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <SystemInit+0xd8>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <SystemInit+0xd8>)
 8003fda:	4a11      	ldr	r2, [pc, #68]	; (8004020 <SystemInit+0xe8>)
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <SystemInit+0xd8>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <SystemInit+0xd8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a09      	ldr	r2, [pc, #36]	; (8004010 <SystemInit+0xd8>)
 8003fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003ff0:	4b07      	ldr	r3, [pc, #28]	; (8004010 <SystemInit+0xd8>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <SystemInit+0xec>)
 8003ff8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003ffc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003ffe:	bf00      	nop
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	e000ed00 	.word	0xe000ed00
 800400c:	52002000 	.word	0x52002000
 8004010:	58024400 	.word	0x58024400
 8004014:	eaf6ed7f 	.word	0xeaf6ed7f
 8004018:	02020200 	.word	0x02020200
 800401c:	01ff0000 	.word	0x01ff0000
 8004020:	01010280 	.word	0x01010280
 8004024:	52004000 	.word	0x52004000

08004028 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800402c:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <MX_USART1_UART_Init+0x90>)
 800402e:	4a23      	ldr	r2, [pc, #140]	; (80040bc <MX_USART1_UART_Init+0x94>)
 8004030:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004032:	4b21      	ldr	r3, [pc, #132]	; (80040b8 <MX_USART1_UART_Init+0x90>)
 8004034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004038:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800403a:	4b1f      	ldr	r3, [pc, #124]	; (80040b8 <MX_USART1_UART_Init+0x90>)
 800403c:	2200      	movs	r2, #0
 800403e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004040:	4b1d      	ldr	r3, [pc, #116]	; (80040b8 <MX_USART1_UART_Init+0x90>)
 8004042:	2200      	movs	r2, #0
 8004044:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004046:	4b1c      	ldr	r3, [pc, #112]	; (80040b8 <MX_USART1_UART_Init+0x90>)
 8004048:	2200      	movs	r2, #0
 800404a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800404c:	4b1a      	ldr	r3, [pc, #104]	; (80040b8 <MX_USART1_UART_Init+0x90>)
 800404e:	220c      	movs	r2, #12
 8004050:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004052:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <MX_USART1_UART_Init+0x90>)
 8004054:	2200      	movs	r2, #0
 8004056:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004058:	4b17      	ldr	r3, [pc, #92]	; (80040b8 <MX_USART1_UART_Init+0x90>)
 800405a:	2200      	movs	r2, #0
 800405c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800405e:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <MX_USART1_UART_Init+0x90>)
 8004060:	2200      	movs	r2, #0
 8004062:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004064:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <MX_USART1_UART_Init+0x90>)
 8004066:	2200      	movs	r2, #0
 8004068:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800406a:	4b13      	ldr	r3, [pc, #76]	; (80040b8 <MX_USART1_UART_Init+0x90>)
 800406c:	2200      	movs	r2, #0
 800406e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004070:	4811      	ldr	r0, [pc, #68]	; (80040b8 <MX_USART1_UART_Init+0x90>)
 8004072:	f009 f915 	bl	800d2a0 <HAL_UART_Init>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800407c:	f7fd fab4 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004080:	2100      	movs	r1, #0
 8004082:	480d      	ldr	r0, [pc, #52]	; (80040b8 <MX_USART1_UART_Init+0x90>)
 8004084:	f00a ffaa 	bl	800efdc <HAL_UARTEx_SetTxFifoThreshold>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800408e:	f7fd faab 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004092:	2100      	movs	r1, #0
 8004094:	4808      	ldr	r0, [pc, #32]	; (80040b8 <MX_USART1_UART_Init+0x90>)
 8004096:	f00a ffdf 	bl	800f058 <HAL_UARTEx_SetRxFifoThreshold>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80040a0:	f7fd faa2 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80040a4:	4804      	ldr	r0, [pc, #16]	; (80040b8 <MX_USART1_UART_Init+0x90>)
 80040a6:	f00a ff60 	bl	800ef6a <HAL_UARTEx_DisableFifoMode>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80040b0:	f7fd fa9a 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80040b4:	bf00      	nop
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	240dffa0 	.word	0x240dffa0
 80040bc:	40011000 	.word	0x40011000

080040c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b0ba      	sub	sp, #232	; 0xe8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	60da      	str	r2, [r3, #12]
 80040d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040d8:	f107 0310 	add.w	r3, r7, #16
 80040dc:	22c0      	movs	r2, #192	; 0xc0
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f00b f86f 	bl	800f1c4 <memset>
  if(uartHandle->Instance==USART1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a2b      	ldr	r2, [pc, #172]	; (8004198 <HAL_UART_MspInit+0xd8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d14e      	bne.n	800418e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80040f0:	f04f 0201 	mov.w	r2, #1
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004102:	f107 0310 	add.w	r3, r7, #16
 8004106:	4618      	mov	r0, r3
 8004108:	f007 f9cc 	bl	800b4a4 <HAL_RCCEx_PeriphCLKConfig>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004112:	f7fd fa69 	bl	80015e8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004116:	4b21      	ldr	r3, [pc, #132]	; (800419c <HAL_UART_MspInit+0xdc>)
 8004118:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800411c:	4a1f      	ldr	r2, [pc, #124]	; (800419c <HAL_UART_MspInit+0xdc>)
 800411e:	f043 0310 	orr.w	r3, r3, #16
 8004122:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8004126:	4b1d      	ldr	r3, [pc, #116]	; (800419c <HAL_UART_MspInit+0xdc>)
 8004128:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800412c:	f003 0310 	and.w	r3, r3, #16
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004134:	4b19      	ldr	r3, [pc, #100]	; (800419c <HAL_UART_MspInit+0xdc>)
 8004136:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800413a:	4a18      	ldr	r2, [pc, #96]	; (800419c <HAL_UART_MspInit+0xdc>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004144:	4b15      	ldr	r3, [pc, #84]	; (800419c <HAL_UART_MspInit+0xdc>)
 8004146:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	60bb      	str	r3, [r7, #8]
 8004150:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8004152:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004156:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415a:	2302      	movs	r3, #2
 800415c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004160:	2300      	movs	r3, #0
 8004162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004166:	2300      	movs	r3, #0
 8004168:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800416c:	2307      	movs	r3, #7
 800416e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004172:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004176:	4619      	mov	r1, r3
 8004178:	4809      	ldr	r0, [pc, #36]	; (80041a0 <HAL_UART_MspInit+0xe0>)
 800417a:	f004 fc3d 	bl	80089f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800417e:	2200      	movs	r2, #0
 8004180:	2100      	movs	r1, #0
 8004182:	2025      	movs	r0, #37	; 0x25
 8004184:	f000 f9c9 	bl	800451a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004188:	2025      	movs	r0, #37	; 0x25
 800418a:	f000 f9e0 	bl	800454e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800418e:	bf00      	nop
 8004190:	37e8      	adds	r7, #232	; 0xe8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40011000 	.word	0x40011000
 800419c:	58024400 	.word	0x58024400
 80041a0:	58020000 	.word	0x58020000

080041a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80041a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80041a8:	f7ff fec6 	bl	8003f38 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80041ac:	480c      	ldr	r0, [pc, #48]	; (80041e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80041ae:	490d      	ldr	r1, [pc, #52]	; (80041e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80041b0:	4a0d      	ldr	r2, [pc, #52]	; (80041e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80041b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041b4:	e002      	b.n	80041bc <LoopCopyDataInit>

080041b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041ba:	3304      	adds	r3, #4

080041bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80041bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041c0:	d3f9      	bcc.n	80041b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041c2:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80041c4:	4c0a      	ldr	r4, [pc, #40]	; (80041f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80041c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041c8:	e001      	b.n	80041ce <LoopFillZerobss>

080041ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041cc:	3204      	adds	r2, #4

080041ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041d0:	d3fb      	bcc.n	80041ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80041d2:	f00a ffd3 	bl	800f17c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041d6:	f7fd f8f1 	bl	80013bc <main>
  bx  lr
 80041da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041dc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80041e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80041e4:	240000b8 	.word	0x240000b8
  ldr r2, =_sidata
 80041e8:	08010998 	.word	0x08010998
  ldr r2, =_sbss
 80041ec:	240000b8 	.word	0x240000b8
  ldr r4, =_ebss
 80041f0:	240e0048 	.word	0x240e0048

080041f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041f4:	e7fe      	b.n	80041f4 <ADC_IRQHandler>
	...

080041f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041fe:	2003      	movs	r0, #3
 8004200:	f000 f980 	bl	8004504 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004204:	f006 ff78 	bl	800b0f8 <HAL_RCC_GetSysClockFreq>
 8004208:	4602      	mov	r2, r0
 800420a:	4b15      	ldr	r3, [pc, #84]	; (8004260 <HAL_Init+0x68>)
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	0a1b      	lsrs	r3, r3, #8
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	4913      	ldr	r1, [pc, #76]	; (8004264 <HAL_Init+0x6c>)
 8004216:	5ccb      	ldrb	r3, [r1, r3]
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
 8004220:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004222:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <HAL_Init+0x68>)
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	4a0e      	ldr	r2, [pc, #56]	; (8004264 <HAL_Init+0x6c>)
 800422c:	5cd3      	ldrb	r3, [r2, r3]
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	fa22 f303 	lsr.w	r3, r2, r3
 8004238:	4a0b      	ldr	r2, [pc, #44]	; (8004268 <HAL_Init+0x70>)
 800423a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800423c:	4a0b      	ldr	r2, [pc, #44]	; (800426c <HAL_Init+0x74>)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004242:	2000      	movs	r0, #0
 8004244:	f000 f814 	bl	8004270 <HAL_InitTick>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e002      	b.n	8004258 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004252:	f7ff fdad 	bl	8003db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	58024400 	.word	0x58024400
 8004264:	080108b0 	.word	0x080108b0
 8004268:	24000048 	.word	0x24000048
 800426c:	24000044 	.word	0x24000044

08004270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004278:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <HAL_InitTick+0x60>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e021      	b.n	80042c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004284:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <HAL_InitTick+0x64>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <HAL_InitTick+0x60>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	4619      	mov	r1, r3
 800428e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004292:	fbb3 f3f1 	udiv	r3, r3, r1
 8004296:	fbb2 f3f3 	udiv	r3, r2, r3
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f965 	bl	800456a <HAL_SYSTICK_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e00e      	b.n	80042c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b0f      	cmp	r3, #15
 80042ae:	d80a      	bhi.n	80042c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042b0:	2200      	movs	r2, #0
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295
 80042b8:	f000 f92f 	bl	800451a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042bc:	4a06      	ldr	r2, [pc, #24]	; (80042d8 <HAL_InitTick+0x68>)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e000      	b.n	80042c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	24000050 	.word	0x24000050
 80042d4:	24000044 	.word	0x24000044
 80042d8:	2400004c 	.word	0x2400004c

080042dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80042e0:	4b06      	ldr	r3, [pc, #24]	; (80042fc <HAL_IncTick+0x20>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <HAL_IncTick+0x24>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4413      	add	r3, r2
 80042ec:	4a04      	ldr	r2, [pc, #16]	; (8004300 <HAL_IncTick+0x24>)
 80042ee:	6013      	str	r3, [r2, #0]
}
 80042f0:	bf00      	nop
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	24000050 	.word	0x24000050
 8004300:	240e0034 	.word	0x240e0034

08004304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  return uwTick;
 8004308:	4b03      	ldr	r3, [pc, #12]	; (8004318 <HAL_GetTick+0x14>)
 800430a:	681b      	ldr	r3, [r3, #0]
}
 800430c:	4618      	mov	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	240e0034 	.word	0x240e0034

0800431c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004324:	f7ff ffee 	bl	8004304 <HAL_GetTick>
 8004328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d005      	beq.n	8004342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004336:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <HAL_Delay+0x44>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004342:	bf00      	nop
 8004344:	f7ff ffde 	bl	8004304 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	429a      	cmp	r2, r3
 8004352:	d8f7      	bhi.n	8004344 <HAL_Delay+0x28>
  {
  }
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	24000050 	.word	0x24000050

08004364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <__NVIC_SetPriorityGrouping+0x40>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004380:	4013      	ands	r3, r2
 8004382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <__NVIC_SetPriorityGrouping+0x44>)
 800438e:	4313      	orrs	r3, r2
 8004390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004392:	4a04      	ldr	r2, [pc, #16]	; (80043a4 <__NVIC_SetPriorityGrouping+0x40>)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	60d3      	str	r3, [r2, #12]
}
 8004398:	bf00      	nop
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	e000ed00 	.word	0xe000ed00
 80043a8:	05fa0000 	.word	0x05fa0000

080043ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043b0:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <__NVIC_GetPriorityGrouping+0x18>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	0a1b      	lsrs	r3, r3, #8
 80043b6:	f003 0307 	and.w	r3, r3, #7
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	e000ed00 	.word	0xe000ed00

080043c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80043d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	db0b      	blt.n	80043f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043da:	88fb      	ldrh	r3, [r7, #6]
 80043dc:	f003 021f 	and.w	r2, r3, #31
 80043e0:	4907      	ldr	r1, [pc, #28]	; (8004400 <__NVIC_EnableIRQ+0x38>)
 80043e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	2001      	movs	r0, #1
 80043ea:	fa00 f202 	lsl.w	r2, r0, r2
 80043ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	e000e100 	.word	0xe000e100

08004404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	6039      	str	r1, [r7, #0]
 800440e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004414:	2b00      	cmp	r3, #0
 8004416:	db0a      	blt.n	800442e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	b2da      	uxtb	r2, r3
 800441c:	490c      	ldr	r1, [pc, #48]	; (8004450 <__NVIC_SetPriority+0x4c>)
 800441e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004422:	0112      	lsls	r2, r2, #4
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	440b      	add	r3, r1
 8004428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800442c:	e00a      	b.n	8004444 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	b2da      	uxtb	r2, r3
 8004432:	4908      	ldr	r1, [pc, #32]	; (8004454 <__NVIC_SetPriority+0x50>)
 8004434:	88fb      	ldrh	r3, [r7, #6]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	3b04      	subs	r3, #4
 800443c:	0112      	lsls	r2, r2, #4
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	440b      	add	r3, r1
 8004442:	761a      	strb	r2, [r3, #24]
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	e000e100 	.word	0xe000e100
 8004454:	e000ed00 	.word	0xe000ed00

08004458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004458:	b480      	push	{r7}
 800445a:	b089      	sub	sp, #36	; 0x24
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f1c3 0307 	rsb	r3, r3, #7
 8004472:	2b04      	cmp	r3, #4
 8004474:	bf28      	it	cs
 8004476:	2304      	movcs	r3, #4
 8004478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	3304      	adds	r3, #4
 800447e:	2b06      	cmp	r3, #6
 8004480:	d902      	bls.n	8004488 <NVIC_EncodePriority+0x30>
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	3b03      	subs	r3, #3
 8004486:	e000      	b.n	800448a <NVIC_EncodePriority+0x32>
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800448c:	f04f 32ff 	mov.w	r2, #4294967295
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43da      	mvns	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	401a      	ands	r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044a0:	f04f 31ff 	mov.w	r1, #4294967295
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	fa01 f303 	lsl.w	r3, r1, r3
 80044aa:	43d9      	mvns	r1, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b0:	4313      	orrs	r3, r2
         );
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3724      	adds	r7, #36	; 0x24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
	...

080044c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3b01      	subs	r3, #1
 80044cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044d0:	d301      	bcc.n	80044d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044d2:	2301      	movs	r3, #1
 80044d4:	e00f      	b.n	80044f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044d6:	4a0a      	ldr	r2, [pc, #40]	; (8004500 <SysTick_Config+0x40>)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3b01      	subs	r3, #1
 80044dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044de:	210f      	movs	r1, #15
 80044e0:	f04f 30ff 	mov.w	r0, #4294967295
 80044e4:	f7ff ff8e 	bl	8004404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <SysTick_Config+0x40>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044ee:	4b04      	ldr	r3, [pc, #16]	; (8004500 <SysTick_Config+0x40>)
 80044f0:	2207      	movs	r2, #7
 80044f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	e000e010 	.word	0xe000e010

08004504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff ff29 	bl	8004364 <__NVIC_SetPriorityGrouping>
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b086      	sub	sp, #24
 800451e:	af00      	add	r7, sp, #0
 8004520:	4603      	mov	r3, r0
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	607a      	str	r2, [r7, #4]
 8004526:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004528:	f7ff ff40 	bl	80043ac <__NVIC_GetPriorityGrouping>
 800452c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	6978      	ldr	r0, [r7, #20]
 8004534:	f7ff ff90 	bl	8004458 <NVIC_EncodePriority>
 8004538:	4602      	mov	r2, r0
 800453a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800453e:	4611      	mov	r1, r2
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff ff5f 	bl	8004404 <__NVIC_SetPriority>
}
 8004546:	bf00      	nop
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	af00      	add	r7, sp, #0
 8004554:	4603      	mov	r3, r0
 8004556:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004558:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff ff33 	bl	80043c8 <__NVIC_EnableIRQ>
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b082      	sub	sp, #8
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7ff ffa4 	bl	80044c0 <SysTick_Config>
 8004578:	4603      	mov	r3, r0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e069      	b.n	800466a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fc f8aa 	bl	80006fc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6819      	ldr	r1, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	4b2a      	ldr	r3, [pc, #168]	; (8004674 <HAL_DCMI_Init+0xf0>)
 80045ca:	400b      	ands	r3, r1
 80045cc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6819      	ldr	r1, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80045e2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80045ee:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80045fa:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004606:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004612:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b10      	cmp	r3, #16
 8004622:	d112      	bne.n	800464a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	7f1b      	ldrb	r3, [r3, #28]
 8004628:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	7f5b      	ldrb	r3, [r3, #29]
 800462e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004630:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	7f9b      	ldrb	r3, [r3, #30]
 8004636:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004638:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	7fdb      	ldrb	r3, [r3, #31]
 8004640:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004646:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004648:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 021e 	orr.w	r2, r2, #30
 8004658:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	ffe0f007 	.word	0xffe0f007

08004678 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af02      	add	r7, sp, #8
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_DCMI_Start_DMA+0x1c>
 8004690:	2302      	movs	r3, #2
 8004692:	e0ab      	b.n	80047ec <HAL_DCMI_Start_DMA+0x174>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046b2:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0202 	bic.w	r2, r2, #2
 80046c2:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6819      	ldr	r1, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d8:	4a46      	ldr	r2, [pc, #280]	; (80047f4 <HAL_DCMI_Start_DMA+0x17c>)
 80046da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e0:	4a45      	ldr	r2, [pc, #276]	; (80047f8 <HAL_DCMI_Start_DMA+0x180>)
 80046e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e8:	2200      	movs	r2, #0
 80046ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470a:	d219      	bcs.n	8004740 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3328      	adds	r3, #40	; 0x28
 8004716:	4619      	mov	r1, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	f000 fd90 	bl	8005240 <HAL_DMA_Start_IT>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d055      	beq.n	80047d2 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2240      	movs	r2, #64	; 0x40
 800472a:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e055      	b.n	80047ec <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004744:	4a2b      	ldr	r2, [pc, #172]	; (80047f4 <HAL_DCMI_Start_DMA+0x17c>)
 8004746:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2201      	movs	r2, #1
 800474c:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800475a:	e009      	b.n	8004770 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	085a      	lsrs	r2, r3, #1
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	005a      	lsls	r2, r3, #1
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004778:	d2f0      	bcs.n	800475c <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	1e9a      	subs	r2, r3, #2
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	4413      	add	r3, r2
 8004796:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3328      	adds	r3, #40	; 0x28
 80047a2:	4619      	mov	r1, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	f003 fc73 	bl	8008098 <HAL_DMAEx_MultiBufferStart_IT>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00c      	beq.n	80047d2 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2240      	movs	r2, #64	; 0x40
 80047bc:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e00c      	b.n	80047ec <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0201 	orr.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	080049c1 	.word	0x080049c1
 80047f8:	08004ae7 	.word	0x08004ae7

080047fc <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8004804:	4b2b      	ldr	r3, [pc, #172]	; (80048b4 <HAL_DCMI_Stop+0xb8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a2b      	ldr	r2, [pc, #172]	; (80048b8 <HAL_DCMI_Stop+0xbc>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	0a5b      	lsrs	r3, r3, #9
 8004810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004814:	fb02 f303 	mul.w	r3, r2, r3
 8004818:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_DCMI_Stop+0x30>
 8004828:	2302      	movs	r3, #2
 800482a:	e03f      	b.n	80048ac <HAL_DCMI_Stop+0xb0>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0201 	bic.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	3b01      	subs	r3, #1
 8004850:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d108      	bne.n	800486a <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485c:	f043 0220 	orr.w	r2, r3, #32
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	72fb      	strb	r3, [r7, #11]
      break;
 8004868:	e006      	b.n	8004878 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e9      	bne.n	800484c <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004886:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488c:	4618      	mov	r0, r3
 800488e:	f000 ff41 	bl	8005714 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 80048aa:	7afb      	ldrb	r3, [r7, #11]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	24000044 	.word	0x24000044
 80048b8:	10624dd3 	.word	0x10624dd3

080048bc <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d016      	beq.n	8004904 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2204      	movs	r2, #4
 80048dc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e2:	f043 0202 	orr.w	r2, r3, #2
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2204      	movs	r2, #4
 80048ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f6:	4a31      	ldr	r2, [pc, #196]	; (80049bc <HAL_DCMI_IRQHandler+0x100>)
 80048f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fe:	4618      	mov	r0, r3
 8004900:	f001 fa26 	bl	8005d50 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d016      	beq.n	800493c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2202      	movs	r2, #2
 8004914:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491a:	f043 0201 	orr.w	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2204      	movs	r2, #4
 8004926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492e:	4a23      	ldr	r2, [pc, #140]	; (80049bc <HAL_DCMI_IRQHandler+0x100>)
 8004930:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004936:	4618      	mov	r0, r3
 8004938:	f001 fa0a 	bl	8005d50 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	2b00      	cmp	r3, #0
 8004944:	d006      	beq.n	8004954 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2210      	movs	r2, #16
 800494c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff f93c 	bl	8003bcc <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d006      	beq.n	800496c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2208      	movs	r2, #8
 8004964:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff f946 	bl	8003bf8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d01d      	beq.n	80049b2 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b02      	cmp	r3, #2
 8004982:	d107      	bne.n	8004994 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 021e 	bic.w	r2, r2, #30
 8004992:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0201 	bic.w	r2, r2, #1
 80049a2:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2201      	movs	r2, #1
 80049aa:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff f918 	bl	8003be2 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	08004ae7 	.word	0x08004ae7

080049c0 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d043      	beq.n	8004a5e <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049e2:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d118      	bne.n	8004a22 <DCMI_DMAXferCplt+0x62>
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d015      	beq.n	8004a22 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	00da      	lsls	r2, r3, #3
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	2200      	movs	r2, #0
 8004a10:	4619      	mov	r1, r3
 8004a12:	f003 fe9f 	bl	8008754 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	1e5a      	subs	r2, r3, #1
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	639a      	str	r2, [r3, #56]	; 0x38
 8004a20:	e044      	b.n	8004aac <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d13c      	bne.n	8004aac <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a44:	00da      	lsls	r2, r3, #3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4413      	add	r3, r2
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	f003 fe81 	bl	8008754 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	1e5a      	subs	r2, r3, #1
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	639a      	str	r2, [r3, #56]	; 0x38
 8004a5c:	e026      	b.n	8004aac <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d006      	beq.n	8004a7c <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a78:	60da      	str	r2, [r3, #12]
 8004a7a:	e017      	b.n	8004aac <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10f      	bne.n	8004aac <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a90:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a96:	0099      	lsls	r1, r3, #2
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	440a      	add	r2, r1
 8004aa2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d112      	bne.n	8004ade <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d103      	bne.n	8004ade <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d009      	beq.n	8004b12 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f7ff f87b 	bl	8003c0e <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8004b18:	bf00      	nop
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004b28:	f7ff fbec 	bl	8004304 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e37f      	b.n	8005238 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a66      	ldr	r2, [pc, #408]	; (8004cd8 <HAL_DMA_Init+0x1b8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d04a      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a65      	ldr	r2, [pc, #404]	; (8004cdc <HAL_DMA_Init+0x1bc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d045      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a63      	ldr	r2, [pc, #396]	; (8004ce0 <HAL_DMA_Init+0x1c0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d040      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a62      	ldr	r2, [pc, #392]	; (8004ce4 <HAL_DMA_Init+0x1c4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d03b      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a60      	ldr	r2, [pc, #384]	; (8004ce8 <HAL_DMA_Init+0x1c8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d036      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a5f      	ldr	r2, [pc, #380]	; (8004cec <HAL_DMA_Init+0x1cc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d031      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a5d      	ldr	r2, [pc, #372]	; (8004cf0 <HAL_DMA_Init+0x1d0>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d02c      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a5c      	ldr	r2, [pc, #368]	; (8004cf4 <HAL_DMA_Init+0x1d4>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d027      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a5a      	ldr	r2, [pc, #360]	; (8004cf8 <HAL_DMA_Init+0x1d8>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d022      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a59      	ldr	r2, [pc, #356]	; (8004cfc <HAL_DMA_Init+0x1dc>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d01d      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a57      	ldr	r2, [pc, #348]	; (8004d00 <HAL_DMA_Init+0x1e0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d018      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a56      	ldr	r2, [pc, #344]	; (8004d04 <HAL_DMA_Init+0x1e4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d013      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a54      	ldr	r2, [pc, #336]	; (8004d08 <HAL_DMA_Init+0x1e8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00e      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a53      	ldr	r2, [pc, #332]	; (8004d0c <HAL_DMA_Init+0x1ec>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d009      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a51      	ldr	r2, [pc, #324]	; (8004d10 <HAL_DMA_Init+0x1f0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_DMA_Init+0xb8>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a50      	ldr	r2, [pc, #320]	; (8004d14 <HAL_DMA_Init+0x1f4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d101      	bne.n	8004bdc <HAL_DMA_Init+0xbc>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e000      	b.n	8004bde <HAL_DMA_Init+0xbe>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 813c 	beq.w	8004e5c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a37      	ldr	r2, [pc, #220]	; (8004cd8 <HAL_DMA_Init+0x1b8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d04a      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a36      	ldr	r2, [pc, #216]	; (8004cdc <HAL_DMA_Init+0x1bc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d045      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a34      	ldr	r2, [pc, #208]	; (8004ce0 <HAL_DMA_Init+0x1c0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d040      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a33      	ldr	r2, [pc, #204]	; (8004ce4 <HAL_DMA_Init+0x1c4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d03b      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a31      	ldr	r2, [pc, #196]	; (8004ce8 <HAL_DMA_Init+0x1c8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d036      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a30      	ldr	r2, [pc, #192]	; (8004cec <HAL_DMA_Init+0x1cc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d031      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a2e      	ldr	r2, [pc, #184]	; (8004cf0 <HAL_DMA_Init+0x1d0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d02c      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a2d      	ldr	r2, [pc, #180]	; (8004cf4 <HAL_DMA_Init+0x1d4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d027      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a2b      	ldr	r2, [pc, #172]	; (8004cf8 <HAL_DMA_Init+0x1d8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d022      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a2a      	ldr	r2, [pc, #168]	; (8004cfc <HAL_DMA_Init+0x1dc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d01d      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a28      	ldr	r2, [pc, #160]	; (8004d00 <HAL_DMA_Init+0x1e0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d018      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a27      	ldr	r2, [pc, #156]	; (8004d04 <HAL_DMA_Init+0x1e4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d013      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a25      	ldr	r2, [pc, #148]	; (8004d08 <HAL_DMA_Init+0x1e8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00e      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a24      	ldr	r2, [pc, #144]	; (8004d0c <HAL_DMA_Init+0x1ec>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d009      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a22      	ldr	r2, [pc, #136]	; (8004d10 <HAL_DMA_Init+0x1f0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d004      	beq.n	8004c94 <HAL_DMA_Init+0x174>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a21      	ldr	r2, [pc, #132]	; (8004d14 <HAL_DMA_Init+0x1f4>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d108      	bne.n	8004ca6 <HAL_DMA_Init+0x186>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0201 	bic.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e007      	b.n	8004cb6 <HAL_DMA_Init+0x196>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0201 	bic.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004cb6:	e02f      	b.n	8004d18 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cb8:	f7ff fb24 	bl	8004304 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b05      	cmp	r3, #5
 8004cc4:	d928      	bls.n	8004d18 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2203      	movs	r2, #3
 8004cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e2af      	b.n	8005238 <HAL_DMA_Init+0x718>
 8004cd8:	40020010 	.word	0x40020010
 8004cdc:	40020028 	.word	0x40020028
 8004ce0:	40020040 	.word	0x40020040
 8004ce4:	40020058 	.word	0x40020058
 8004ce8:	40020070 	.word	0x40020070
 8004cec:	40020088 	.word	0x40020088
 8004cf0:	400200a0 	.word	0x400200a0
 8004cf4:	400200b8 	.word	0x400200b8
 8004cf8:	40020410 	.word	0x40020410
 8004cfc:	40020428 	.word	0x40020428
 8004d00:	40020440 	.word	0x40020440
 8004d04:	40020458 	.word	0x40020458
 8004d08:	40020470 	.word	0x40020470
 8004d0c:	40020488 	.word	0x40020488
 8004d10:	400204a0 	.word	0x400204a0
 8004d14:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1c8      	bne.n	8004cb8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4b73      	ldr	r3, [pc, #460]	; (8004f00 <HAL_DMA_Init+0x3e0>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004d3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d56:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d107      	bne.n	8004d7c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	4313      	orrs	r3, r2
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b28      	cmp	r3, #40	; 0x28
 8004d82:	d903      	bls.n	8004d8c <HAL_DMA_Init+0x26c>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b2e      	cmp	r3, #46	; 0x2e
 8004d8a:	d91f      	bls.n	8004dcc <HAL_DMA_Init+0x2ac>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b3e      	cmp	r3, #62	; 0x3e
 8004d92:	d903      	bls.n	8004d9c <HAL_DMA_Init+0x27c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2b42      	cmp	r3, #66	; 0x42
 8004d9a:	d917      	bls.n	8004dcc <HAL_DMA_Init+0x2ac>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2b46      	cmp	r3, #70	; 0x46
 8004da2:	d903      	bls.n	8004dac <HAL_DMA_Init+0x28c>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b48      	cmp	r3, #72	; 0x48
 8004daa:	d90f      	bls.n	8004dcc <HAL_DMA_Init+0x2ac>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b4e      	cmp	r3, #78	; 0x4e
 8004db2:	d903      	bls.n	8004dbc <HAL_DMA_Init+0x29c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b52      	cmp	r3, #82	; 0x52
 8004dba:	d907      	bls.n	8004dcc <HAL_DMA_Init+0x2ac>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b73      	cmp	r3, #115	; 0x73
 8004dc2:	d905      	bls.n	8004dd0 <HAL_DMA_Init+0x2b0>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b77      	cmp	r3, #119	; 0x77
 8004dca:	d801      	bhi.n	8004dd0 <HAL_DMA_Init+0x2b0>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <HAL_DMA_Init+0x2b2>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ddc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f023 0307 	bic.w	r3, r3, #7
 8004df4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d117      	bne.n	8004e38 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00e      	beq.n	8004e38 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f002 fbd6 	bl	80075cc <DMA_CheckFifoParam>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2240      	movs	r2, #64	; 0x40
 8004e2a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e1ff      	b.n	8005238 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f002 fb11 	bl	8007468 <DMA_CalcBaseAndBitshift>
 8004e46:	4603      	mov	r3, r0
 8004e48:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4e:	f003 031f 	and.w	r3, r3, #31
 8004e52:	223f      	movs	r2, #63	; 0x3f
 8004e54:	409a      	lsls	r2, r3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	609a      	str	r2, [r3, #8]
 8004e5a:	e0fe      	b.n	800505a <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a28      	ldr	r2, [pc, #160]	; (8004f04 <HAL_DMA_Init+0x3e4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d04a      	beq.n	8004efc <HAL_DMA_Init+0x3dc>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a27      	ldr	r2, [pc, #156]	; (8004f08 <HAL_DMA_Init+0x3e8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d045      	beq.n	8004efc <HAL_DMA_Init+0x3dc>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a25      	ldr	r2, [pc, #148]	; (8004f0c <HAL_DMA_Init+0x3ec>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d040      	beq.n	8004efc <HAL_DMA_Init+0x3dc>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a24      	ldr	r2, [pc, #144]	; (8004f10 <HAL_DMA_Init+0x3f0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d03b      	beq.n	8004efc <HAL_DMA_Init+0x3dc>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a22      	ldr	r2, [pc, #136]	; (8004f14 <HAL_DMA_Init+0x3f4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d036      	beq.n	8004efc <HAL_DMA_Init+0x3dc>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a21      	ldr	r2, [pc, #132]	; (8004f18 <HAL_DMA_Init+0x3f8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d031      	beq.n	8004efc <HAL_DMA_Init+0x3dc>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a1f      	ldr	r2, [pc, #124]	; (8004f1c <HAL_DMA_Init+0x3fc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d02c      	beq.n	8004efc <HAL_DMA_Init+0x3dc>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a1e      	ldr	r2, [pc, #120]	; (8004f20 <HAL_DMA_Init+0x400>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d027      	beq.n	8004efc <HAL_DMA_Init+0x3dc>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <HAL_DMA_Init+0x404>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d022      	beq.n	8004efc <HAL_DMA_Init+0x3dc>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a1b      	ldr	r2, [pc, #108]	; (8004f28 <HAL_DMA_Init+0x408>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d01d      	beq.n	8004efc <HAL_DMA_Init+0x3dc>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a19      	ldr	r2, [pc, #100]	; (8004f2c <HAL_DMA_Init+0x40c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d018      	beq.n	8004efc <HAL_DMA_Init+0x3dc>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a18      	ldr	r2, [pc, #96]	; (8004f30 <HAL_DMA_Init+0x410>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d013      	beq.n	8004efc <HAL_DMA_Init+0x3dc>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a16      	ldr	r2, [pc, #88]	; (8004f34 <HAL_DMA_Init+0x414>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00e      	beq.n	8004efc <HAL_DMA_Init+0x3dc>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a15      	ldr	r2, [pc, #84]	; (8004f38 <HAL_DMA_Init+0x418>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d009      	beq.n	8004efc <HAL_DMA_Init+0x3dc>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a13      	ldr	r2, [pc, #76]	; (8004f3c <HAL_DMA_Init+0x41c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d004      	beq.n	8004efc <HAL_DMA_Init+0x3dc>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a12      	ldr	r2, [pc, #72]	; (8004f40 <HAL_DMA_Init+0x420>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d123      	bne.n	8004f44 <HAL_DMA_Init+0x424>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e022      	b.n	8004f46 <HAL_DMA_Init+0x426>
 8004f00:	fe10803f 	.word	0xfe10803f
 8004f04:	48022c08 	.word	0x48022c08
 8004f08:	48022c1c 	.word	0x48022c1c
 8004f0c:	48022c30 	.word	0x48022c30
 8004f10:	48022c44 	.word	0x48022c44
 8004f14:	48022c58 	.word	0x48022c58
 8004f18:	48022c6c 	.word	0x48022c6c
 8004f1c:	48022c80 	.word	0x48022c80
 8004f20:	48022c94 	.word	0x48022c94
 8004f24:	58025408 	.word	0x58025408
 8004f28:	5802541c 	.word	0x5802541c
 8004f2c:	58025430 	.word	0x58025430
 8004f30:	58025444 	.word	0x58025444
 8004f34:	58025458 	.word	0x58025458
 8004f38:	5802546c 	.word	0x5802546c
 8004f3c:	58025480 	.word	0x58025480
 8004f40:	58025494 	.word	0x58025494
 8004f44:	2300      	movs	r3, #0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d07e      	beq.n	8005048 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a80      	ldr	r2, [pc, #512]	; (8005150 <HAL_DMA_Init+0x630>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d021      	beq.n	8004f98 <HAL_DMA_Init+0x478>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a7e      	ldr	r2, [pc, #504]	; (8005154 <HAL_DMA_Init+0x634>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d01c      	beq.n	8004f98 <HAL_DMA_Init+0x478>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a7d      	ldr	r2, [pc, #500]	; (8005158 <HAL_DMA_Init+0x638>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d017      	beq.n	8004f98 <HAL_DMA_Init+0x478>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a7b      	ldr	r2, [pc, #492]	; (800515c <HAL_DMA_Init+0x63c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d012      	beq.n	8004f98 <HAL_DMA_Init+0x478>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a7a      	ldr	r2, [pc, #488]	; (8005160 <HAL_DMA_Init+0x640>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00d      	beq.n	8004f98 <HAL_DMA_Init+0x478>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a78      	ldr	r2, [pc, #480]	; (8005164 <HAL_DMA_Init+0x644>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d008      	beq.n	8004f98 <HAL_DMA_Init+0x478>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a77      	ldr	r2, [pc, #476]	; (8005168 <HAL_DMA_Init+0x648>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <HAL_DMA_Init+0x478>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a75      	ldr	r2, [pc, #468]	; (800516c <HAL_DMA_Init+0x64c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4b6e      	ldr	r3, [pc, #440]	; (8005170 <HAL_DMA_Init+0x650>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2b40      	cmp	r3, #64	; 0x40
 8004fc0:	d008      	beq.n	8004fd4 <HAL_DMA_Init+0x4b4>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2b80      	cmp	r3, #128	; 0x80
 8004fc8:	d102      	bne.n	8004fd0 <HAL_DMA_Init+0x4b0>
 8004fca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fce:	e002      	b.n	8004fd6 <HAL_DMA_Init+0x4b6>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e000      	b.n	8004fd6 <HAL_DMA_Init+0x4b6>
 8004fd4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	68d2      	ldr	r2, [r2, #12]
 8004fda:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004fe4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004fec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ff4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ffc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005004:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	461a      	mov	r2, r3
 800501a:	4b56      	ldr	r3, [pc, #344]	; (8005174 <HAL_DMA_Init+0x654>)
 800501c:	4413      	add	r3, r2
 800501e:	4a56      	ldr	r2, [pc, #344]	; (8005178 <HAL_DMA_Init+0x658>)
 8005020:	fba2 2303 	umull	r2, r3, r2, r3
 8005024:	091b      	lsrs	r3, r3, #4
 8005026:	009a      	lsls	r2, r3, #2
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f002 fa1b 	bl	8007468 <DMA_CalcBaseAndBitshift>
 8005032:	4603      	mov	r3, r0
 8005034:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503a:	f003 031f 	and.w	r3, r3, #31
 800503e:	2201      	movs	r2, #1
 8005040:	409a      	lsls	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	605a      	str	r2, [r3, #4]
 8005046:	e008      	b.n	800505a <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2240      	movs	r2, #64	; 0x40
 800504c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2203      	movs	r2, #3
 8005052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e0ee      	b.n	8005238 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a47      	ldr	r2, [pc, #284]	; (800517c <HAL_DMA_Init+0x65c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d072      	beq.n	800514a <HAL_DMA_Init+0x62a>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a45      	ldr	r2, [pc, #276]	; (8005180 <HAL_DMA_Init+0x660>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d06d      	beq.n	800514a <HAL_DMA_Init+0x62a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a44      	ldr	r2, [pc, #272]	; (8005184 <HAL_DMA_Init+0x664>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d068      	beq.n	800514a <HAL_DMA_Init+0x62a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a42      	ldr	r2, [pc, #264]	; (8005188 <HAL_DMA_Init+0x668>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d063      	beq.n	800514a <HAL_DMA_Init+0x62a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a41      	ldr	r2, [pc, #260]	; (800518c <HAL_DMA_Init+0x66c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d05e      	beq.n	800514a <HAL_DMA_Init+0x62a>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a3f      	ldr	r2, [pc, #252]	; (8005190 <HAL_DMA_Init+0x670>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d059      	beq.n	800514a <HAL_DMA_Init+0x62a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a3e      	ldr	r2, [pc, #248]	; (8005194 <HAL_DMA_Init+0x674>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d054      	beq.n	800514a <HAL_DMA_Init+0x62a>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a3c      	ldr	r2, [pc, #240]	; (8005198 <HAL_DMA_Init+0x678>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d04f      	beq.n	800514a <HAL_DMA_Init+0x62a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a3b      	ldr	r2, [pc, #236]	; (800519c <HAL_DMA_Init+0x67c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d04a      	beq.n	800514a <HAL_DMA_Init+0x62a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a39      	ldr	r2, [pc, #228]	; (80051a0 <HAL_DMA_Init+0x680>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d045      	beq.n	800514a <HAL_DMA_Init+0x62a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a38      	ldr	r2, [pc, #224]	; (80051a4 <HAL_DMA_Init+0x684>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d040      	beq.n	800514a <HAL_DMA_Init+0x62a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a36      	ldr	r2, [pc, #216]	; (80051a8 <HAL_DMA_Init+0x688>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d03b      	beq.n	800514a <HAL_DMA_Init+0x62a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a35      	ldr	r2, [pc, #212]	; (80051ac <HAL_DMA_Init+0x68c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d036      	beq.n	800514a <HAL_DMA_Init+0x62a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a33      	ldr	r2, [pc, #204]	; (80051b0 <HAL_DMA_Init+0x690>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d031      	beq.n	800514a <HAL_DMA_Init+0x62a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a32      	ldr	r2, [pc, #200]	; (80051b4 <HAL_DMA_Init+0x694>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d02c      	beq.n	800514a <HAL_DMA_Init+0x62a>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a30      	ldr	r2, [pc, #192]	; (80051b8 <HAL_DMA_Init+0x698>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d027      	beq.n	800514a <HAL_DMA_Init+0x62a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a14      	ldr	r2, [pc, #80]	; (8005150 <HAL_DMA_Init+0x630>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d022      	beq.n	800514a <HAL_DMA_Init+0x62a>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a12      	ldr	r2, [pc, #72]	; (8005154 <HAL_DMA_Init+0x634>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d01d      	beq.n	800514a <HAL_DMA_Init+0x62a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a11      	ldr	r2, [pc, #68]	; (8005158 <HAL_DMA_Init+0x638>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d018      	beq.n	800514a <HAL_DMA_Init+0x62a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a0f      	ldr	r2, [pc, #60]	; (800515c <HAL_DMA_Init+0x63c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d013      	beq.n	800514a <HAL_DMA_Init+0x62a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a0e      	ldr	r2, [pc, #56]	; (8005160 <HAL_DMA_Init+0x640>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00e      	beq.n	800514a <HAL_DMA_Init+0x62a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a0c      	ldr	r2, [pc, #48]	; (8005164 <HAL_DMA_Init+0x644>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d009      	beq.n	800514a <HAL_DMA_Init+0x62a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a0b      	ldr	r2, [pc, #44]	; (8005168 <HAL_DMA_Init+0x648>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d004      	beq.n	800514a <HAL_DMA_Init+0x62a>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a09      	ldr	r2, [pc, #36]	; (800516c <HAL_DMA_Init+0x64c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d138      	bne.n	80051bc <HAL_DMA_Init+0x69c>
 800514a:	2301      	movs	r3, #1
 800514c:	e037      	b.n	80051be <HAL_DMA_Init+0x69e>
 800514e:	bf00      	nop
 8005150:	58025408 	.word	0x58025408
 8005154:	5802541c 	.word	0x5802541c
 8005158:	58025430 	.word	0x58025430
 800515c:	58025444 	.word	0x58025444
 8005160:	58025458 	.word	0x58025458
 8005164:	5802546c 	.word	0x5802546c
 8005168:	58025480 	.word	0x58025480
 800516c:	58025494 	.word	0x58025494
 8005170:	fffe000f 	.word	0xfffe000f
 8005174:	a7fdabf8 	.word	0xa7fdabf8
 8005178:	cccccccd 	.word	0xcccccccd
 800517c:	40020010 	.word	0x40020010
 8005180:	40020028 	.word	0x40020028
 8005184:	40020040 	.word	0x40020040
 8005188:	40020058 	.word	0x40020058
 800518c:	40020070 	.word	0x40020070
 8005190:	40020088 	.word	0x40020088
 8005194:	400200a0 	.word	0x400200a0
 8005198:	400200b8 	.word	0x400200b8
 800519c:	40020410 	.word	0x40020410
 80051a0:	40020428 	.word	0x40020428
 80051a4:	40020440 	.word	0x40020440
 80051a8:	40020458 	.word	0x40020458
 80051ac:	40020470 	.word	0x40020470
 80051b0:	40020488 	.word	0x40020488
 80051b4:	400204a0 	.word	0x400204a0
 80051b8:	400204b8 	.word	0x400204b8
 80051bc:	2300      	movs	r3, #0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d032      	beq.n	8005228 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f002 fa7e 	bl	80076c4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	2b80      	cmp	r3, #128	; 0x80
 80051ce:	d102      	bne.n	80051d6 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80051ea:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d010      	beq.n	8005216 <HAL_DMA_Init+0x6f6>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d80c      	bhi.n	8005216 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f002 fafb 	bl	80077f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005212:	605a      	str	r2, [r3, #4]
 8005214:	e008      	b.n	8005228 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e226      	b.n	80056aa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_DMA_Start_IT+0x2a>
 8005266:	2302      	movs	r3, #2
 8005268:	e21f      	b.n	80056aa <HAL_DMA_Start_IT+0x46a>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b01      	cmp	r3, #1
 800527c:	f040 820a 	bne.w	8005694 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2202      	movs	r2, #2
 8005284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a68      	ldr	r2, [pc, #416]	; (8005434 <HAL_DMA_Start_IT+0x1f4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d04a      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a66      	ldr	r2, [pc, #408]	; (8005438 <HAL_DMA_Start_IT+0x1f8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d045      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a65      	ldr	r2, [pc, #404]	; (800543c <HAL_DMA_Start_IT+0x1fc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d040      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a63      	ldr	r2, [pc, #396]	; (8005440 <HAL_DMA_Start_IT+0x200>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d03b      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a62      	ldr	r2, [pc, #392]	; (8005444 <HAL_DMA_Start_IT+0x204>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d036      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a60      	ldr	r2, [pc, #384]	; (8005448 <HAL_DMA_Start_IT+0x208>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d031      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a5f      	ldr	r2, [pc, #380]	; (800544c <HAL_DMA_Start_IT+0x20c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d02c      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a5d      	ldr	r2, [pc, #372]	; (8005450 <HAL_DMA_Start_IT+0x210>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d027      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a5c      	ldr	r2, [pc, #368]	; (8005454 <HAL_DMA_Start_IT+0x214>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d022      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a5a      	ldr	r2, [pc, #360]	; (8005458 <HAL_DMA_Start_IT+0x218>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d01d      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a59      	ldr	r2, [pc, #356]	; (800545c <HAL_DMA_Start_IT+0x21c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d018      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a57      	ldr	r2, [pc, #348]	; (8005460 <HAL_DMA_Start_IT+0x220>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d013      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a56      	ldr	r2, [pc, #344]	; (8005464 <HAL_DMA_Start_IT+0x224>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00e      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a54      	ldr	r2, [pc, #336]	; (8005468 <HAL_DMA_Start_IT+0x228>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d009      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a53      	ldr	r2, [pc, #332]	; (800546c <HAL_DMA_Start_IT+0x22c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d004      	beq.n	800532e <HAL_DMA_Start_IT+0xee>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a51      	ldr	r2, [pc, #324]	; (8005470 <HAL_DMA_Start_IT+0x230>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d108      	bne.n	8005340 <HAL_DMA_Start_IT+0x100>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0201 	bic.w	r2, r2, #1
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e007      	b.n	8005350 <HAL_DMA_Start_IT+0x110>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0201 	bic.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	68b9      	ldr	r1, [r7, #8]
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f001 fea2 	bl	80070a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a34      	ldr	r2, [pc, #208]	; (8005434 <HAL_DMA_Start_IT+0x1f4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d04a      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a33      	ldr	r2, [pc, #204]	; (8005438 <HAL_DMA_Start_IT+0x1f8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d045      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a31      	ldr	r2, [pc, #196]	; (800543c <HAL_DMA_Start_IT+0x1fc>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d040      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a30      	ldr	r2, [pc, #192]	; (8005440 <HAL_DMA_Start_IT+0x200>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d03b      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a2e      	ldr	r2, [pc, #184]	; (8005444 <HAL_DMA_Start_IT+0x204>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d036      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a2d      	ldr	r2, [pc, #180]	; (8005448 <HAL_DMA_Start_IT+0x208>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d031      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a2b      	ldr	r2, [pc, #172]	; (800544c <HAL_DMA_Start_IT+0x20c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d02c      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a2a      	ldr	r2, [pc, #168]	; (8005450 <HAL_DMA_Start_IT+0x210>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d027      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a28      	ldr	r2, [pc, #160]	; (8005454 <HAL_DMA_Start_IT+0x214>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d022      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a27      	ldr	r2, [pc, #156]	; (8005458 <HAL_DMA_Start_IT+0x218>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d01d      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a25      	ldr	r2, [pc, #148]	; (800545c <HAL_DMA_Start_IT+0x21c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d018      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a24      	ldr	r2, [pc, #144]	; (8005460 <HAL_DMA_Start_IT+0x220>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d013      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a22      	ldr	r2, [pc, #136]	; (8005464 <HAL_DMA_Start_IT+0x224>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00e      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a21      	ldr	r2, [pc, #132]	; (8005468 <HAL_DMA_Start_IT+0x228>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d009      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1f      	ldr	r2, [pc, #124]	; (800546c <HAL_DMA_Start_IT+0x22c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d004      	beq.n	80053fc <HAL_DMA_Start_IT+0x1bc>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1e      	ldr	r2, [pc, #120]	; (8005470 <HAL_DMA_Start_IT+0x230>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d101      	bne.n	8005400 <HAL_DMA_Start_IT+0x1c0>
 80053fc:	2301      	movs	r3, #1
 80053fe:	e000      	b.n	8005402 <HAL_DMA_Start_IT+0x1c2>
 8005400:	2300      	movs	r3, #0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d036      	beq.n	8005474 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f023 021e 	bic.w	r2, r3, #30
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0216 	orr.w	r2, r2, #22
 8005418:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d03e      	beq.n	80054a0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 0208 	orr.w	r2, r2, #8
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e035      	b.n	80054a0 <HAL_DMA_Start_IT+0x260>
 8005434:	40020010 	.word	0x40020010
 8005438:	40020028 	.word	0x40020028
 800543c:	40020040 	.word	0x40020040
 8005440:	40020058 	.word	0x40020058
 8005444:	40020070 	.word	0x40020070
 8005448:	40020088 	.word	0x40020088
 800544c:	400200a0 	.word	0x400200a0
 8005450:	400200b8 	.word	0x400200b8
 8005454:	40020410 	.word	0x40020410
 8005458:	40020428 	.word	0x40020428
 800545c:	40020440 	.word	0x40020440
 8005460:	40020458 	.word	0x40020458
 8005464:	40020470 	.word	0x40020470
 8005468:	40020488 	.word	0x40020488
 800546c:	400204a0 	.word	0x400204a0
 8005470:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f023 020e 	bic.w	r2, r3, #14
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 020a 	orr.w	r2, r2, #10
 8005486:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0204 	orr.w	r2, r2, #4
 800549e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a83      	ldr	r2, [pc, #524]	; (80056b4 <HAL_DMA_Start_IT+0x474>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d072      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a82      	ldr	r2, [pc, #520]	; (80056b8 <HAL_DMA_Start_IT+0x478>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d06d      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a80      	ldr	r2, [pc, #512]	; (80056bc <HAL_DMA_Start_IT+0x47c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d068      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a7f      	ldr	r2, [pc, #508]	; (80056c0 <HAL_DMA_Start_IT+0x480>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d063      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a7d      	ldr	r2, [pc, #500]	; (80056c4 <HAL_DMA_Start_IT+0x484>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d05e      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a7c      	ldr	r2, [pc, #496]	; (80056c8 <HAL_DMA_Start_IT+0x488>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d059      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a7a      	ldr	r2, [pc, #488]	; (80056cc <HAL_DMA_Start_IT+0x48c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d054      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a79      	ldr	r2, [pc, #484]	; (80056d0 <HAL_DMA_Start_IT+0x490>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d04f      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a77      	ldr	r2, [pc, #476]	; (80056d4 <HAL_DMA_Start_IT+0x494>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d04a      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a76      	ldr	r2, [pc, #472]	; (80056d8 <HAL_DMA_Start_IT+0x498>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d045      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a74      	ldr	r2, [pc, #464]	; (80056dc <HAL_DMA_Start_IT+0x49c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d040      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a73      	ldr	r2, [pc, #460]	; (80056e0 <HAL_DMA_Start_IT+0x4a0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d03b      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a71      	ldr	r2, [pc, #452]	; (80056e4 <HAL_DMA_Start_IT+0x4a4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d036      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a70      	ldr	r2, [pc, #448]	; (80056e8 <HAL_DMA_Start_IT+0x4a8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d031      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a6e      	ldr	r2, [pc, #440]	; (80056ec <HAL_DMA_Start_IT+0x4ac>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d02c      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a6d      	ldr	r2, [pc, #436]	; (80056f0 <HAL_DMA_Start_IT+0x4b0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d027      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a6b      	ldr	r2, [pc, #428]	; (80056f4 <HAL_DMA_Start_IT+0x4b4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d022      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a6a      	ldr	r2, [pc, #424]	; (80056f8 <HAL_DMA_Start_IT+0x4b8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d01d      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a68      	ldr	r2, [pc, #416]	; (80056fc <HAL_DMA_Start_IT+0x4bc>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d018      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a67      	ldr	r2, [pc, #412]	; (8005700 <HAL_DMA_Start_IT+0x4c0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d013      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a65      	ldr	r2, [pc, #404]	; (8005704 <HAL_DMA_Start_IT+0x4c4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00e      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a64      	ldr	r2, [pc, #400]	; (8005708 <HAL_DMA_Start_IT+0x4c8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d009      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a62      	ldr	r2, [pc, #392]	; (800570c <HAL_DMA_Start_IT+0x4cc>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d004      	beq.n	8005590 <HAL_DMA_Start_IT+0x350>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a61      	ldr	r2, [pc, #388]	; (8005710 <HAL_DMA_Start_IT+0x4d0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d101      	bne.n	8005594 <HAL_DMA_Start_IT+0x354>
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <HAL_DMA_Start_IT+0x356>
 8005594:	2300      	movs	r3, #0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01a      	beq.n	80055d0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d007      	beq.n	80055b8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055b6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d007      	beq.n	80055d0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a37      	ldr	r2, [pc, #220]	; (80056b4 <HAL_DMA_Start_IT+0x474>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d04a      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a36      	ldr	r2, [pc, #216]	; (80056b8 <HAL_DMA_Start_IT+0x478>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d045      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a34      	ldr	r2, [pc, #208]	; (80056bc <HAL_DMA_Start_IT+0x47c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d040      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a33      	ldr	r2, [pc, #204]	; (80056c0 <HAL_DMA_Start_IT+0x480>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d03b      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a31      	ldr	r2, [pc, #196]	; (80056c4 <HAL_DMA_Start_IT+0x484>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d036      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a30      	ldr	r2, [pc, #192]	; (80056c8 <HAL_DMA_Start_IT+0x488>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d031      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a2e      	ldr	r2, [pc, #184]	; (80056cc <HAL_DMA_Start_IT+0x48c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d02c      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a2d      	ldr	r2, [pc, #180]	; (80056d0 <HAL_DMA_Start_IT+0x490>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d027      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a2b      	ldr	r2, [pc, #172]	; (80056d4 <HAL_DMA_Start_IT+0x494>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d022      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a2a      	ldr	r2, [pc, #168]	; (80056d8 <HAL_DMA_Start_IT+0x498>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d01d      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a28      	ldr	r2, [pc, #160]	; (80056dc <HAL_DMA_Start_IT+0x49c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d018      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a27      	ldr	r2, [pc, #156]	; (80056e0 <HAL_DMA_Start_IT+0x4a0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d013      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a25      	ldr	r2, [pc, #148]	; (80056e4 <HAL_DMA_Start_IT+0x4a4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00e      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a24      	ldr	r2, [pc, #144]	; (80056e8 <HAL_DMA_Start_IT+0x4a8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d009      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a22      	ldr	r2, [pc, #136]	; (80056ec <HAL_DMA_Start_IT+0x4ac>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d004      	beq.n	8005670 <HAL_DMA_Start_IT+0x430>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a21      	ldr	r2, [pc, #132]	; (80056f0 <HAL_DMA_Start_IT+0x4b0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d108      	bne.n	8005682 <HAL_DMA_Start_IT+0x442>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	e012      	b.n	80056a8 <HAL_DMA_Start_IT+0x468>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0201 	orr.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	e009      	b.n	80056a8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800569a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40020010 	.word	0x40020010
 80056b8:	40020028 	.word	0x40020028
 80056bc:	40020040 	.word	0x40020040
 80056c0:	40020058 	.word	0x40020058
 80056c4:	40020070 	.word	0x40020070
 80056c8:	40020088 	.word	0x40020088
 80056cc:	400200a0 	.word	0x400200a0
 80056d0:	400200b8 	.word	0x400200b8
 80056d4:	40020410 	.word	0x40020410
 80056d8:	40020428 	.word	0x40020428
 80056dc:	40020440 	.word	0x40020440
 80056e0:	40020458 	.word	0x40020458
 80056e4:	40020470 	.word	0x40020470
 80056e8:	40020488 	.word	0x40020488
 80056ec:	400204a0 	.word	0x400204a0
 80056f0:	400204b8 	.word	0x400204b8
 80056f4:	58025408 	.word	0x58025408
 80056f8:	5802541c 	.word	0x5802541c
 80056fc:	58025430 	.word	0x58025430
 8005700:	58025444 	.word	0x58025444
 8005704:	58025458 	.word	0x58025458
 8005708:	5802546c 	.word	0x5802546c
 800570c:	58025480 	.word	0x58025480
 8005710:	58025494 	.word	0x58025494

08005714 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800571c:	f7fe fdf2 	bl	8004304 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e2dc      	b.n	8005ce6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d008      	beq.n	800574a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2280      	movs	r2, #128	; 0x80
 800573c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e2cd      	b.n	8005ce6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a76      	ldr	r2, [pc, #472]	; (8005928 <HAL_DMA_Abort+0x214>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d04a      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a74      	ldr	r2, [pc, #464]	; (800592c <HAL_DMA_Abort+0x218>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d045      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a73      	ldr	r2, [pc, #460]	; (8005930 <HAL_DMA_Abort+0x21c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d040      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a71      	ldr	r2, [pc, #452]	; (8005934 <HAL_DMA_Abort+0x220>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d03b      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a70      	ldr	r2, [pc, #448]	; (8005938 <HAL_DMA_Abort+0x224>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d036      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a6e      	ldr	r2, [pc, #440]	; (800593c <HAL_DMA_Abort+0x228>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d031      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a6d      	ldr	r2, [pc, #436]	; (8005940 <HAL_DMA_Abort+0x22c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d02c      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a6b      	ldr	r2, [pc, #428]	; (8005944 <HAL_DMA_Abort+0x230>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d027      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a6a      	ldr	r2, [pc, #424]	; (8005948 <HAL_DMA_Abort+0x234>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d022      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a68      	ldr	r2, [pc, #416]	; (800594c <HAL_DMA_Abort+0x238>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d01d      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a67      	ldr	r2, [pc, #412]	; (8005950 <HAL_DMA_Abort+0x23c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d018      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a65      	ldr	r2, [pc, #404]	; (8005954 <HAL_DMA_Abort+0x240>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d013      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a64      	ldr	r2, [pc, #400]	; (8005958 <HAL_DMA_Abort+0x244>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00e      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a62      	ldr	r2, [pc, #392]	; (800595c <HAL_DMA_Abort+0x248>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d009      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a61      	ldr	r2, [pc, #388]	; (8005960 <HAL_DMA_Abort+0x24c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d004      	beq.n	80057ea <HAL_DMA_Abort+0xd6>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a5f      	ldr	r2, [pc, #380]	; (8005964 <HAL_DMA_Abort+0x250>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d101      	bne.n	80057ee <HAL_DMA_Abort+0xda>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <HAL_DMA_Abort+0xdc>
 80057ee:	2300      	movs	r3, #0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d013      	beq.n	800581c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 021e 	bic.w	r2, r2, #30
 8005802:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695a      	ldr	r2, [r3, #20]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005812:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	e00a      	b.n	8005832 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 020e 	bic.w	r2, r2, #14
 800582a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a3c      	ldr	r2, [pc, #240]	; (8005928 <HAL_DMA_Abort+0x214>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d072      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a3a      	ldr	r2, [pc, #232]	; (800592c <HAL_DMA_Abort+0x218>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d06d      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a39      	ldr	r2, [pc, #228]	; (8005930 <HAL_DMA_Abort+0x21c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d068      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a37      	ldr	r2, [pc, #220]	; (8005934 <HAL_DMA_Abort+0x220>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d063      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a36      	ldr	r2, [pc, #216]	; (8005938 <HAL_DMA_Abort+0x224>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d05e      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a34      	ldr	r2, [pc, #208]	; (800593c <HAL_DMA_Abort+0x228>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d059      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a33      	ldr	r2, [pc, #204]	; (8005940 <HAL_DMA_Abort+0x22c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d054      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a31      	ldr	r2, [pc, #196]	; (8005944 <HAL_DMA_Abort+0x230>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d04f      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a30      	ldr	r2, [pc, #192]	; (8005948 <HAL_DMA_Abort+0x234>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d04a      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a2e      	ldr	r2, [pc, #184]	; (800594c <HAL_DMA_Abort+0x238>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d045      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a2d      	ldr	r2, [pc, #180]	; (8005950 <HAL_DMA_Abort+0x23c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d040      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a2b      	ldr	r2, [pc, #172]	; (8005954 <HAL_DMA_Abort+0x240>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d03b      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a2a      	ldr	r2, [pc, #168]	; (8005958 <HAL_DMA_Abort+0x244>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d036      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a28      	ldr	r2, [pc, #160]	; (800595c <HAL_DMA_Abort+0x248>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d031      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a27      	ldr	r2, [pc, #156]	; (8005960 <HAL_DMA_Abort+0x24c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d02c      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a25      	ldr	r2, [pc, #148]	; (8005964 <HAL_DMA_Abort+0x250>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d027      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a24      	ldr	r2, [pc, #144]	; (8005968 <HAL_DMA_Abort+0x254>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d022      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a22      	ldr	r2, [pc, #136]	; (800596c <HAL_DMA_Abort+0x258>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d01d      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a21      	ldr	r2, [pc, #132]	; (8005970 <HAL_DMA_Abort+0x25c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d018      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1f      	ldr	r2, [pc, #124]	; (8005974 <HAL_DMA_Abort+0x260>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d013      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a1e      	ldr	r2, [pc, #120]	; (8005978 <HAL_DMA_Abort+0x264>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d00e      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a1c      	ldr	r2, [pc, #112]	; (800597c <HAL_DMA_Abort+0x268>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d009      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a1b      	ldr	r2, [pc, #108]	; (8005980 <HAL_DMA_Abort+0x26c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d004      	beq.n	8005922 <HAL_DMA_Abort+0x20e>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a19      	ldr	r2, [pc, #100]	; (8005984 <HAL_DMA_Abort+0x270>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d132      	bne.n	8005988 <HAL_DMA_Abort+0x274>
 8005922:	2301      	movs	r3, #1
 8005924:	e031      	b.n	800598a <HAL_DMA_Abort+0x276>
 8005926:	bf00      	nop
 8005928:	40020010 	.word	0x40020010
 800592c:	40020028 	.word	0x40020028
 8005930:	40020040 	.word	0x40020040
 8005934:	40020058 	.word	0x40020058
 8005938:	40020070 	.word	0x40020070
 800593c:	40020088 	.word	0x40020088
 8005940:	400200a0 	.word	0x400200a0
 8005944:	400200b8 	.word	0x400200b8
 8005948:	40020410 	.word	0x40020410
 800594c:	40020428 	.word	0x40020428
 8005950:	40020440 	.word	0x40020440
 8005954:	40020458 	.word	0x40020458
 8005958:	40020470 	.word	0x40020470
 800595c:	40020488 	.word	0x40020488
 8005960:	400204a0 	.word	0x400204a0
 8005964:	400204b8 	.word	0x400204b8
 8005968:	58025408 	.word	0x58025408
 800596c:	5802541c 	.word	0x5802541c
 8005970:	58025430 	.word	0x58025430
 8005974:	58025444 	.word	0x58025444
 8005978:	58025458 	.word	0x58025458
 800597c:	5802546c 	.word	0x5802546c
 8005980:	58025480 	.word	0x58025480
 8005984:	58025494 	.word	0x58025494
 8005988:	2300      	movs	r3, #0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d007      	beq.n	800599e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800599c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a6d      	ldr	r2, [pc, #436]	; (8005b58 <HAL_DMA_Abort+0x444>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d04a      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a6b      	ldr	r2, [pc, #428]	; (8005b5c <HAL_DMA_Abort+0x448>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d045      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a6a      	ldr	r2, [pc, #424]	; (8005b60 <HAL_DMA_Abort+0x44c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d040      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a68      	ldr	r2, [pc, #416]	; (8005b64 <HAL_DMA_Abort+0x450>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d03b      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a67      	ldr	r2, [pc, #412]	; (8005b68 <HAL_DMA_Abort+0x454>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d036      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a65      	ldr	r2, [pc, #404]	; (8005b6c <HAL_DMA_Abort+0x458>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d031      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a64      	ldr	r2, [pc, #400]	; (8005b70 <HAL_DMA_Abort+0x45c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d02c      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a62      	ldr	r2, [pc, #392]	; (8005b74 <HAL_DMA_Abort+0x460>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d027      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a61      	ldr	r2, [pc, #388]	; (8005b78 <HAL_DMA_Abort+0x464>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d022      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a5f      	ldr	r2, [pc, #380]	; (8005b7c <HAL_DMA_Abort+0x468>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d01d      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a5e      	ldr	r2, [pc, #376]	; (8005b80 <HAL_DMA_Abort+0x46c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d018      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a5c      	ldr	r2, [pc, #368]	; (8005b84 <HAL_DMA_Abort+0x470>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d013      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a5b      	ldr	r2, [pc, #364]	; (8005b88 <HAL_DMA_Abort+0x474>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00e      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a59      	ldr	r2, [pc, #356]	; (8005b8c <HAL_DMA_Abort+0x478>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d009      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a58      	ldr	r2, [pc, #352]	; (8005b90 <HAL_DMA_Abort+0x47c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d004      	beq.n	8005a3e <HAL_DMA_Abort+0x32a>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a56      	ldr	r2, [pc, #344]	; (8005b94 <HAL_DMA_Abort+0x480>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d108      	bne.n	8005a50 <HAL_DMA_Abort+0x33c>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0201 	bic.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	e007      	b.n	8005a60 <HAL_DMA_Abort+0x34c>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0201 	bic.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a60:	e013      	b.n	8005a8a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a62:	f7fe fc4f 	bl	8004304 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b05      	cmp	r3, #5
 8005a6e:	d90c      	bls.n	8005a8a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2220      	movs	r2, #32
 8005a74:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2203      	movs	r2, #3
 8005a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e12d      	b.n	8005ce6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e5      	bne.n	8005a62 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2f      	ldr	r2, [pc, #188]	; (8005b58 <HAL_DMA_Abort+0x444>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d04a      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a2d      	ldr	r2, [pc, #180]	; (8005b5c <HAL_DMA_Abort+0x448>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d045      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a2c      	ldr	r2, [pc, #176]	; (8005b60 <HAL_DMA_Abort+0x44c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d040      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a2a      	ldr	r2, [pc, #168]	; (8005b64 <HAL_DMA_Abort+0x450>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d03b      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a29      	ldr	r2, [pc, #164]	; (8005b68 <HAL_DMA_Abort+0x454>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d036      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a27      	ldr	r2, [pc, #156]	; (8005b6c <HAL_DMA_Abort+0x458>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d031      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a26      	ldr	r2, [pc, #152]	; (8005b70 <HAL_DMA_Abort+0x45c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d02c      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a24      	ldr	r2, [pc, #144]	; (8005b74 <HAL_DMA_Abort+0x460>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d027      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a23      	ldr	r2, [pc, #140]	; (8005b78 <HAL_DMA_Abort+0x464>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d022      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a21      	ldr	r2, [pc, #132]	; (8005b7c <HAL_DMA_Abort+0x468>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d01d      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a20      	ldr	r2, [pc, #128]	; (8005b80 <HAL_DMA_Abort+0x46c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d018      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1e      	ldr	r2, [pc, #120]	; (8005b84 <HAL_DMA_Abort+0x470>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d013      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1d      	ldr	r2, [pc, #116]	; (8005b88 <HAL_DMA_Abort+0x474>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00e      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a1b      	ldr	r2, [pc, #108]	; (8005b8c <HAL_DMA_Abort+0x478>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d009      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a1a      	ldr	r2, [pc, #104]	; (8005b90 <HAL_DMA_Abort+0x47c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d004      	beq.n	8005b36 <HAL_DMA_Abort+0x422>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a18      	ldr	r2, [pc, #96]	; (8005b94 <HAL_DMA_Abort+0x480>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d101      	bne.n	8005b3a <HAL_DMA_Abort+0x426>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <HAL_DMA_Abort+0x428>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d02b      	beq.n	8005b98 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b44:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4a:	f003 031f 	and.w	r3, r3, #31
 8005b4e:	223f      	movs	r2, #63	; 0x3f
 8005b50:	409a      	lsls	r2, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	609a      	str	r2, [r3, #8]
 8005b56:	e02a      	b.n	8005bae <HAL_DMA_Abort+0x49a>
 8005b58:	40020010 	.word	0x40020010
 8005b5c:	40020028 	.word	0x40020028
 8005b60:	40020040 	.word	0x40020040
 8005b64:	40020058 	.word	0x40020058
 8005b68:	40020070 	.word	0x40020070
 8005b6c:	40020088 	.word	0x40020088
 8005b70:	400200a0 	.word	0x400200a0
 8005b74:	400200b8 	.word	0x400200b8
 8005b78:	40020410 	.word	0x40020410
 8005b7c:	40020428 	.word	0x40020428
 8005b80:	40020440 	.word	0x40020440
 8005b84:	40020458 	.word	0x40020458
 8005b88:	40020470 	.word	0x40020470
 8005b8c:	40020488 	.word	0x40020488
 8005b90:	400204a0 	.word	0x400204a0
 8005b94:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba2:	f003 031f 	and.w	r3, r3, #31
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	409a      	lsls	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a4f      	ldr	r2, [pc, #316]	; (8005cf0 <HAL_DMA_Abort+0x5dc>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d072      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a4d      	ldr	r2, [pc, #308]	; (8005cf4 <HAL_DMA_Abort+0x5e0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d06d      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a4c      	ldr	r2, [pc, #304]	; (8005cf8 <HAL_DMA_Abort+0x5e4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d068      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a4a      	ldr	r2, [pc, #296]	; (8005cfc <HAL_DMA_Abort+0x5e8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d063      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a49      	ldr	r2, [pc, #292]	; (8005d00 <HAL_DMA_Abort+0x5ec>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d05e      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a47      	ldr	r2, [pc, #284]	; (8005d04 <HAL_DMA_Abort+0x5f0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d059      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a46      	ldr	r2, [pc, #280]	; (8005d08 <HAL_DMA_Abort+0x5f4>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d054      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a44      	ldr	r2, [pc, #272]	; (8005d0c <HAL_DMA_Abort+0x5f8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d04f      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a43      	ldr	r2, [pc, #268]	; (8005d10 <HAL_DMA_Abort+0x5fc>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d04a      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a41      	ldr	r2, [pc, #260]	; (8005d14 <HAL_DMA_Abort+0x600>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d045      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a40      	ldr	r2, [pc, #256]	; (8005d18 <HAL_DMA_Abort+0x604>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d040      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a3e      	ldr	r2, [pc, #248]	; (8005d1c <HAL_DMA_Abort+0x608>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d03b      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a3d      	ldr	r2, [pc, #244]	; (8005d20 <HAL_DMA_Abort+0x60c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d036      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a3b      	ldr	r2, [pc, #236]	; (8005d24 <HAL_DMA_Abort+0x610>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d031      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a3a      	ldr	r2, [pc, #232]	; (8005d28 <HAL_DMA_Abort+0x614>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d02c      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a38      	ldr	r2, [pc, #224]	; (8005d2c <HAL_DMA_Abort+0x618>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d027      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a37      	ldr	r2, [pc, #220]	; (8005d30 <HAL_DMA_Abort+0x61c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d022      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a35      	ldr	r2, [pc, #212]	; (8005d34 <HAL_DMA_Abort+0x620>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01d      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a34      	ldr	r2, [pc, #208]	; (8005d38 <HAL_DMA_Abort+0x624>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d018      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a32      	ldr	r2, [pc, #200]	; (8005d3c <HAL_DMA_Abort+0x628>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d013      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a31      	ldr	r2, [pc, #196]	; (8005d40 <HAL_DMA_Abort+0x62c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00e      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a2f      	ldr	r2, [pc, #188]	; (8005d44 <HAL_DMA_Abort+0x630>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d009      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a2e      	ldr	r2, [pc, #184]	; (8005d48 <HAL_DMA_Abort+0x634>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d004      	beq.n	8005c9e <HAL_DMA_Abort+0x58a>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a2c      	ldr	r2, [pc, #176]	; (8005d4c <HAL_DMA_Abort+0x638>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d101      	bne.n	8005ca2 <HAL_DMA_Abort+0x58e>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <HAL_DMA_Abort+0x590>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d015      	beq.n	8005cd4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005cb0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00c      	beq.n	8005cd4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cc8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005cd2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	40020010 	.word	0x40020010
 8005cf4:	40020028 	.word	0x40020028
 8005cf8:	40020040 	.word	0x40020040
 8005cfc:	40020058 	.word	0x40020058
 8005d00:	40020070 	.word	0x40020070
 8005d04:	40020088 	.word	0x40020088
 8005d08:	400200a0 	.word	0x400200a0
 8005d0c:	400200b8 	.word	0x400200b8
 8005d10:	40020410 	.word	0x40020410
 8005d14:	40020428 	.word	0x40020428
 8005d18:	40020440 	.word	0x40020440
 8005d1c:	40020458 	.word	0x40020458
 8005d20:	40020470 	.word	0x40020470
 8005d24:	40020488 	.word	0x40020488
 8005d28:	400204a0 	.word	0x400204a0
 8005d2c:	400204b8 	.word	0x400204b8
 8005d30:	58025408 	.word	0x58025408
 8005d34:	5802541c 	.word	0x5802541c
 8005d38:	58025430 	.word	0x58025430
 8005d3c:	58025444 	.word	0x58025444
 8005d40:	58025458 	.word	0x58025458
 8005d44:	5802546c 	.word	0x5802546c
 8005d48:	58025480 	.word	0x58025480
 8005d4c:	58025494 	.word	0x58025494

08005d50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e237      	b.n	80061d2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d004      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2280      	movs	r2, #128	; 0x80
 8005d72:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e22c      	b.n	80061d2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a5c      	ldr	r2, [pc, #368]	; (8005ef0 <HAL_DMA_Abort_IT+0x1a0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d04a      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a5b      	ldr	r2, [pc, #364]	; (8005ef4 <HAL_DMA_Abort_IT+0x1a4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d045      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a59      	ldr	r2, [pc, #356]	; (8005ef8 <HAL_DMA_Abort_IT+0x1a8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d040      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a58      	ldr	r2, [pc, #352]	; (8005efc <HAL_DMA_Abort_IT+0x1ac>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d03b      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a56      	ldr	r2, [pc, #344]	; (8005f00 <HAL_DMA_Abort_IT+0x1b0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d036      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a55      	ldr	r2, [pc, #340]	; (8005f04 <HAL_DMA_Abort_IT+0x1b4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d031      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a53      	ldr	r2, [pc, #332]	; (8005f08 <HAL_DMA_Abort_IT+0x1b8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d02c      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a52      	ldr	r2, [pc, #328]	; (8005f0c <HAL_DMA_Abort_IT+0x1bc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d027      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a50      	ldr	r2, [pc, #320]	; (8005f10 <HAL_DMA_Abort_IT+0x1c0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d022      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a4f      	ldr	r2, [pc, #316]	; (8005f14 <HAL_DMA_Abort_IT+0x1c4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d01d      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a4d      	ldr	r2, [pc, #308]	; (8005f18 <HAL_DMA_Abort_IT+0x1c8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d018      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a4c      	ldr	r2, [pc, #304]	; (8005f1c <HAL_DMA_Abort_IT+0x1cc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d013      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a4a      	ldr	r2, [pc, #296]	; (8005f20 <HAL_DMA_Abort_IT+0x1d0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00e      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a49      	ldr	r2, [pc, #292]	; (8005f24 <HAL_DMA_Abort_IT+0x1d4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d009      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a47      	ldr	r2, [pc, #284]	; (8005f28 <HAL_DMA_Abort_IT+0x1d8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d004      	beq.n	8005e18 <HAL_DMA_Abort_IT+0xc8>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a46      	ldr	r2, [pc, #280]	; (8005f2c <HAL_DMA_Abort_IT+0x1dc>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d101      	bne.n	8005e1c <HAL_DMA_Abort_IT+0xcc>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e000      	b.n	8005e1e <HAL_DMA_Abort_IT+0xce>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 8086 	beq.w	8005f30 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2204      	movs	r2, #4
 8005e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a2f      	ldr	r2, [pc, #188]	; (8005ef0 <HAL_DMA_Abort_IT+0x1a0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d04a      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a2e      	ldr	r2, [pc, #184]	; (8005ef4 <HAL_DMA_Abort_IT+0x1a4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d045      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a2c      	ldr	r2, [pc, #176]	; (8005ef8 <HAL_DMA_Abort_IT+0x1a8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d040      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a2b      	ldr	r2, [pc, #172]	; (8005efc <HAL_DMA_Abort_IT+0x1ac>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d03b      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a29      	ldr	r2, [pc, #164]	; (8005f00 <HAL_DMA_Abort_IT+0x1b0>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d036      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a28      	ldr	r2, [pc, #160]	; (8005f04 <HAL_DMA_Abort_IT+0x1b4>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d031      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a26      	ldr	r2, [pc, #152]	; (8005f08 <HAL_DMA_Abort_IT+0x1b8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d02c      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a25      	ldr	r2, [pc, #148]	; (8005f0c <HAL_DMA_Abort_IT+0x1bc>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d027      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a23      	ldr	r2, [pc, #140]	; (8005f10 <HAL_DMA_Abort_IT+0x1c0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d022      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a22      	ldr	r2, [pc, #136]	; (8005f14 <HAL_DMA_Abort_IT+0x1c4>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d01d      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a20      	ldr	r2, [pc, #128]	; (8005f18 <HAL_DMA_Abort_IT+0x1c8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d018      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1f      	ldr	r2, [pc, #124]	; (8005f1c <HAL_DMA_Abort_IT+0x1cc>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d013      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1d      	ldr	r2, [pc, #116]	; (8005f20 <HAL_DMA_Abort_IT+0x1d0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00e      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1c      	ldr	r2, [pc, #112]	; (8005f24 <HAL_DMA_Abort_IT+0x1d4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1a      	ldr	r2, [pc, #104]	; (8005f28 <HAL_DMA_Abort_IT+0x1d8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x17c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a19      	ldr	r2, [pc, #100]	; (8005f2c <HAL_DMA_Abort_IT+0x1dc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d108      	bne.n	8005ede <HAL_DMA_Abort_IT+0x18e>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0201 	bic.w	r2, r2, #1
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	e178      	b.n	80061d0 <HAL_DMA_Abort_IT+0x480>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0201 	bic.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]
 8005eee:	e16f      	b.n	80061d0 <HAL_DMA_Abort_IT+0x480>
 8005ef0:	40020010 	.word	0x40020010
 8005ef4:	40020028 	.word	0x40020028
 8005ef8:	40020040 	.word	0x40020040
 8005efc:	40020058 	.word	0x40020058
 8005f00:	40020070 	.word	0x40020070
 8005f04:	40020088 	.word	0x40020088
 8005f08:	400200a0 	.word	0x400200a0
 8005f0c:	400200b8 	.word	0x400200b8
 8005f10:	40020410 	.word	0x40020410
 8005f14:	40020428 	.word	0x40020428
 8005f18:	40020440 	.word	0x40020440
 8005f1c:	40020458 	.word	0x40020458
 8005f20:	40020470 	.word	0x40020470
 8005f24:	40020488 	.word	0x40020488
 8005f28:	400204a0 	.word	0x400204a0
 8005f2c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 020e 	bic.w	r2, r2, #14
 8005f3e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a6c      	ldr	r2, [pc, #432]	; (80060f8 <HAL_DMA_Abort_IT+0x3a8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d04a      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a6b      	ldr	r2, [pc, #428]	; (80060fc <HAL_DMA_Abort_IT+0x3ac>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d045      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a69      	ldr	r2, [pc, #420]	; (8006100 <HAL_DMA_Abort_IT+0x3b0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d040      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a68      	ldr	r2, [pc, #416]	; (8006104 <HAL_DMA_Abort_IT+0x3b4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d03b      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a66      	ldr	r2, [pc, #408]	; (8006108 <HAL_DMA_Abort_IT+0x3b8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d036      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a65      	ldr	r2, [pc, #404]	; (800610c <HAL_DMA_Abort_IT+0x3bc>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d031      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a63      	ldr	r2, [pc, #396]	; (8006110 <HAL_DMA_Abort_IT+0x3c0>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d02c      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a62      	ldr	r2, [pc, #392]	; (8006114 <HAL_DMA_Abort_IT+0x3c4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d027      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a60      	ldr	r2, [pc, #384]	; (8006118 <HAL_DMA_Abort_IT+0x3c8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d022      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a5f      	ldr	r2, [pc, #380]	; (800611c <HAL_DMA_Abort_IT+0x3cc>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d01d      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a5d      	ldr	r2, [pc, #372]	; (8006120 <HAL_DMA_Abort_IT+0x3d0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d018      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a5c      	ldr	r2, [pc, #368]	; (8006124 <HAL_DMA_Abort_IT+0x3d4>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d013      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a5a      	ldr	r2, [pc, #360]	; (8006128 <HAL_DMA_Abort_IT+0x3d8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d00e      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a59      	ldr	r2, [pc, #356]	; (800612c <HAL_DMA_Abort_IT+0x3dc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d009      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a57      	ldr	r2, [pc, #348]	; (8006130 <HAL_DMA_Abort_IT+0x3e0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d004      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0x290>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a56      	ldr	r2, [pc, #344]	; (8006134 <HAL_DMA_Abort_IT+0x3e4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d108      	bne.n	8005ff2 <HAL_DMA_Abort_IT+0x2a2>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0201 	bic.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	e007      	b.n	8006002 <HAL_DMA_Abort_IT+0x2b2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0201 	bic.w	r2, r2, #1
 8006000:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a3c      	ldr	r2, [pc, #240]	; (80060f8 <HAL_DMA_Abort_IT+0x3a8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d072      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a3a      	ldr	r2, [pc, #232]	; (80060fc <HAL_DMA_Abort_IT+0x3ac>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d06d      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a39      	ldr	r2, [pc, #228]	; (8006100 <HAL_DMA_Abort_IT+0x3b0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d068      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a37      	ldr	r2, [pc, #220]	; (8006104 <HAL_DMA_Abort_IT+0x3b4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d063      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a36      	ldr	r2, [pc, #216]	; (8006108 <HAL_DMA_Abort_IT+0x3b8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d05e      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a34      	ldr	r2, [pc, #208]	; (800610c <HAL_DMA_Abort_IT+0x3bc>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d059      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a33      	ldr	r2, [pc, #204]	; (8006110 <HAL_DMA_Abort_IT+0x3c0>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d054      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a31      	ldr	r2, [pc, #196]	; (8006114 <HAL_DMA_Abort_IT+0x3c4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d04f      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a30      	ldr	r2, [pc, #192]	; (8006118 <HAL_DMA_Abort_IT+0x3c8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d04a      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a2e      	ldr	r2, [pc, #184]	; (800611c <HAL_DMA_Abort_IT+0x3cc>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d045      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a2d      	ldr	r2, [pc, #180]	; (8006120 <HAL_DMA_Abort_IT+0x3d0>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d040      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a2b      	ldr	r2, [pc, #172]	; (8006124 <HAL_DMA_Abort_IT+0x3d4>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d03b      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a2a      	ldr	r2, [pc, #168]	; (8006128 <HAL_DMA_Abort_IT+0x3d8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d036      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a28      	ldr	r2, [pc, #160]	; (800612c <HAL_DMA_Abort_IT+0x3dc>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d031      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a27      	ldr	r2, [pc, #156]	; (8006130 <HAL_DMA_Abort_IT+0x3e0>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d02c      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a25      	ldr	r2, [pc, #148]	; (8006134 <HAL_DMA_Abort_IT+0x3e4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d027      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a24      	ldr	r2, [pc, #144]	; (8006138 <HAL_DMA_Abort_IT+0x3e8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d022      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a22      	ldr	r2, [pc, #136]	; (800613c <HAL_DMA_Abort_IT+0x3ec>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d01d      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a21      	ldr	r2, [pc, #132]	; (8006140 <HAL_DMA_Abort_IT+0x3f0>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d018      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1f      	ldr	r2, [pc, #124]	; (8006144 <HAL_DMA_Abort_IT+0x3f4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d013      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a1e      	ldr	r2, [pc, #120]	; (8006148 <HAL_DMA_Abort_IT+0x3f8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d00e      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a1c      	ldr	r2, [pc, #112]	; (800614c <HAL_DMA_Abort_IT+0x3fc>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d009      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1b      	ldr	r2, [pc, #108]	; (8006150 <HAL_DMA_Abort_IT+0x400>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d004      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x3a2>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a19      	ldr	r2, [pc, #100]	; (8006154 <HAL_DMA_Abort_IT+0x404>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d132      	bne.n	8006158 <HAL_DMA_Abort_IT+0x408>
 80060f2:	2301      	movs	r3, #1
 80060f4:	e031      	b.n	800615a <HAL_DMA_Abort_IT+0x40a>
 80060f6:	bf00      	nop
 80060f8:	40020010 	.word	0x40020010
 80060fc:	40020028 	.word	0x40020028
 8006100:	40020040 	.word	0x40020040
 8006104:	40020058 	.word	0x40020058
 8006108:	40020070 	.word	0x40020070
 800610c:	40020088 	.word	0x40020088
 8006110:	400200a0 	.word	0x400200a0
 8006114:	400200b8 	.word	0x400200b8
 8006118:	40020410 	.word	0x40020410
 800611c:	40020428 	.word	0x40020428
 8006120:	40020440 	.word	0x40020440
 8006124:	40020458 	.word	0x40020458
 8006128:	40020470 	.word	0x40020470
 800612c:	40020488 	.word	0x40020488
 8006130:	400204a0 	.word	0x400204a0
 8006134:	400204b8 	.word	0x400204b8
 8006138:	58025408 	.word	0x58025408
 800613c:	5802541c 	.word	0x5802541c
 8006140:	58025430 	.word	0x58025430
 8006144:	58025444 	.word	0x58025444
 8006148:	58025458 	.word	0x58025458
 800614c:	5802546c 	.word	0x5802546c
 8006150:	58025480 	.word	0x58025480
 8006154:	58025494 	.word	0x58025494
 8006158:	2300      	movs	r3, #0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d028      	beq.n	80061b0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006168:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800616c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006172:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	2201      	movs	r2, #1
 800617e:	409a      	lsls	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800618c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00c      	beq.n	80061b0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80061ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d003      	beq.n	80061d0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop

080061dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08a      	sub	sp, #40	; 0x28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80061e8:	4b67      	ldr	r3, [pc, #412]	; (8006388 <HAL_DMA_IRQHandler+0x1ac>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a67      	ldr	r2, [pc, #412]	; (800638c <HAL_DMA_IRQHandler+0x1b0>)
 80061ee:	fba2 2303 	umull	r2, r3, r2, r3
 80061f2:	0a9b      	lsrs	r3, r3, #10
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006200:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a5f      	ldr	r2, [pc, #380]	; (8006390 <HAL_DMA_IRQHandler+0x1b4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d04a      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a5d      	ldr	r2, [pc, #372]	; (8006394 <HAL_DMA_IRQHandler+0x1b8>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d045      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a5c      	ldr	r2, [pc, #368]	; (8006398 <HAL_DMA_IRQHandler+0x1bc>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d040      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a5a      	ldr	r2, [pc, #360]	; (800639c <HAL_DMA_IRQHandler+0x1c0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d03b      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a59      	ldr	r2, [pc, #356]	; (80063a0 <HAL_DMA_IRQHandler+0x1c4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d036      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a57      	ldr	r2, [pc, #348]	; (80063a4 <HAL_DMA_IRQHandler+0x1c8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d031      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a56      	ldr	r2, [pc, #344]	; (80063a8 <HAL_DMA_IRQHandler+0x1cc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d02c      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a54      	ldr	r2, [pc, #336]	; (80063ac <HAL_DMA_IRQHandler+0x1d0>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d027      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a53      	ldr	r2, [pc, #332]	; (80063b0 <HAL_DMA_IRQHandler+0x1d4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d022      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a51      	ldr	r2, [pc, #324]	; (80063b4 <HAL_DMA_IRQHandler+0x1d8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d01d      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a50      	ldr	r2, [pc, #320]	; (80063b8 <HAL_DMA_IRQHandler+0x1dc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d018      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a4e      	ldr	r2, [pc, #312]	; (80063bc <HAL_DMA_IRQHandler+0x1e0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d013      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a4d      	ldr	r2, [pc, #308]	; (80063c0 <HAL_DMA_IRQHandler+0x1e4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d00e      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a4b      	ldr	r2, [pc, #300]	; (80063c4 <HAL_DMA_IRQHandler+0x1e8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d009      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a4a      	ldr	r2, [pc, #296]	; (80063c8 <HAL_DMA_IRQHandler+0x1ec>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d004      	beq.n	80062ae <HAL_DMA_IRQHandler+0xd2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a48      	ldr	r2, [pc, #288]	; (80063cc <HAL_DMA_IRQHandler+0x1f0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d101      	bne.n	80062b2 <HAL_DMA_IRQHandler+0xd6>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e000      	b.n	80062b4 <HAL_DMA_IRQHandler+0xd8>
 80062b2:	2300      	movs	r3, #0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 842b 	beq.w	8006b10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062be:	f003 031f 	and.w	r3, r3, #31
 80062c2:	2208      	movs	r2, #8
 80062c4:	409a      	lsls	r2, r3
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	4013      	ands	r3, r2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 80a2 	beq.w	8006414 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a2e      	ldr	r2, [pc, #184]	; (8006390 <HAL_DMA_IRQHandler+0x1b4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d04a      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a2d      	ldr	r2, [pc, #180]	; (8006394 <HAL_DMA_IRQHandler+0x1b8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d045      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a2b      	ldr	r2, [pc, #172]	; (8006398 <HAL_DMA_IRQHandler+0x1bc>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d040      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a2a      	ldr	r2, [pc, #168]	; (800639c <HAL_DMA_IRQHandler+0x1c0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d03b      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a28      	ldr	r2, [pc, #160]	; (80063a0 <HAL_DMA_IRQHandler+0x1c4>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d036      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a27      	ldr	r2, [pc, #156]	; (80063a4 <HAL_DMA_IRQHandler+0x1c8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d031      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a25      	ldr	r2, [pc, #148]	; (80063a8 <HAL_DMA_IRQHandler+0x1cc>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d02c      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a24      	ldr	r2, [pc, #144]	; (80063ac <HAL_DMA_IRQHandler+0x1d0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d027      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a22      	ldr	r2, [pc, #136]	; (80063b0 <HAL_DMA_IRQHandler+0x1d4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d022      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a21      	ldr	r2, [pc, #132]	; (80063b4 <HAL_DMA_IRQHandler+0x1d8>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d01d      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a1f      	ldr	r2, [pc, #124]	; (80063b8 <HAL_DMA_IRQHandler+0x1dc>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d018      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a1e      	ldr	r2, [pc, #120]	; (80063bc <HAL_DMA_IRQHandler+0x1e0>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d013      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1c      	ldr	r2, [pc, #112]	; (80063c0 <HAL_DMA_IRQHandler+0x1e4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00e      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1b      	ldr	r2, [pc, #108]	; (80063c4 <HAL_DMA_IRQHandler+0x1e8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d009      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a19      	ldr	r2, [pc, #100]	; (80063c8 <HAL_DMA_IRQHandler+0x1ec>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d004      	beq.n	8006370 <HAL_DMA_IRQHandler+0x194>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a18      	ldr	r2, [pc, #96]	; (80063cc <HAL_DMA_IRQHandler+0x1f0>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d12f      	bne.n	80063d0 <HAL_DMA_IRQHandler+0x1f4>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0304 	and.w	r3, r3, #4
 800637a:	2b00      	cmp	r3, #0
 800637c:	bf14      	ite	ne
 800637e:	2301      	movne	r3, #1
 8006380:	2300      	moveq	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	e02e      	b.n	80063e4 <HAL_DMA_IRQHandler+0x208>
 8006386:	bf00      	nop
 8006388:	24000044 	.word	0x24000044
 800638c:	1b4e81b5 	.word	0x1b4e81b5
 8006390:	40020010 	.word	0x40020010
 8006394:	40020028 	.word	0x40020028
 8006398:	40020040 	.word	0x40020040
 800639c:	40020058 	.word	0x40020058
 80063a0:	40020070 	.word	0x40020070
 80063a4:	40020088 	.word	0x40020088
 80063a8:	400200a0 	.word	0x400200a0
 80063ac:	400200b8 	.word	0x400200b8
 80063b0:	40020410 	.word	0x40020410
 80063b4:	40020428 	.word	0x40020428
 80063b8:	40020440 	.word	0x40020440
 80063bc:	40020458 	.word	0x40020458
 80063c0:	40020470 	.word	0x40020470
 80063c4:	40020488 	.word	0x40020488
 80063c8:	400204a0 	.word	0x400204a0
 80063cc:	400204b8 	.word	0x400204b8
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	2b00      	cmp	r3, #0
 80063dc:	bf14      	ite	ne
 80063de:	2301      	movne	r3, #1
 80063e0:	2300      	moveq	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d015      	beq.n	8006414 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0204 	bic.w	r2, r2, #4
 80063f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fc:	f003 031f 	and.w	r3, r3, #31
 8006400:	2208      	movs	r2, #8
 8006402:	409a      	lsls	r2, r3
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640c:	f043 0201 	orr.w	r2, r3, #1
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006418:	f003 031f 	and.w	r3, r3, #31
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	fa22 f303 	lsr.w	r3, r2, r3
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d06e      	beq.n	8006508 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a69      	ldr	r2, [pc, #420]	; (80065d4 <HAL_DMA_IRQHandler+0x3f8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d04a      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a67      	ldr	r2, [pc, #412]	; (80065d8 <HAL_DMA_IRQHandler+0x3fc>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d045      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a66      	ldr	r2, [pc, #408]	; (80065dc <HAL_DMA_IRQHandler+0x400>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d040      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a64      	ldr	r2, [pc, #400]	; (80065e0 <HAL_DMA_IRQHandler+0x404>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d03b      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a63      	ldr	r2, [pc, #396]	; (80065e4 <HAL_DMA_IRQHandler+0x408>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d036      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a61      	ldr	r2, [pc, #388]	; (80065e8 <HAL_DMA_IRQHandler+0x40c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d031      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a60      	ldr	r2, [pc, #384]	; (80065ec <HAL_DMA_IRQHandler+0x410>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d02c      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a5e      	ldr	r2, [pc, #376]	; (80065f0 <HAL_DMA_IRQHandler+0x414>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d027      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a5d      	ldr	r2, [pc, #372]	; (80065f4 <HAL_DMA_IRQHandler+0x418>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d022      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a5b      	ldr	r2, [pc, #364]	; (80065f8 <HAL_DMA_IRQHandler+0x41c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d01d      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a5a      	ldr	r2, [pc, #360]	; (80065fc <HAL_DMA_IRQHandler+0x420>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d018      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a58      	ldr	r2, [pc, #352]	; (8006600 <HAL_DMA_IRQHandler+0x424>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d013      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a57      	ldr	r2, [pc, #348]	; (8006604 <HAL_DMA_IRQHandler+0x428>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d00e      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a55      	ldr	r2, [pc, #340]	; (8006608 <HAL_DMA_IRQHandler+0x42c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d009      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a54      	ldr	r2, [pc, #336]	; (800660c <HAL_DMA_IRQHandler+0x430>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d004      	beq.n	80064ca <HAL_DMA_IRQHandler+0x2ee>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a52      	ldr	r2, [pc, #328]	; (8006610 <HAL_DMA_IRQHandler+0x434>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d10a      	bne.n	80064e0 <HAL_DMA_IRQHandler+0x304>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	bf14      	ite	ne
 80064d8:	2301      	movne	r3, #1
 80064da:	2300      	moveq	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	e003      	b.n	80064e8 <HAL_DMA_IRQHandler+0x30c>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2300      	movs	r3, #0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00d      	beq.n	8006508 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	2201      	movs	r2, #1
 80064f6:	409a      	lsls	r2, r3
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006500:	f043 0202 	orr.w	r2, r3, #2
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650c:	f003 031f 	and.w	r3, r3, #31
 8006510:	2204      	movs	r2, #4
 8006512:	409a      	lsls	r2, r3
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	4013      	ands	r3, r2
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 808f 	beq.w	800663c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a2c      	ldr	r2, [pc, #176]	; (80065d4 <HAL_DMA_IRQHandler+0x3f8>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d04a      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a2a      	ldr	r2, [pc, #168]	; (80065d8 <HAL_DMA_IRQHandler+0x3fc>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d045      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a29      	ldr	r2, [pc, #164]	; (80065dc <HAL_DMA_IRQHandler+0x400>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d040      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a27      	ldr	r2, [pc, #156]	; (80065e0 <HAL_DMA_IRQHandler+0x404>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d03b      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a26      	ldr	r2, [pc, #152]	; (80065e4 <HAL_DMA_IRQHandler+0x408>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d036      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a24      	ldr	r2, [pc, #144]	; (80065e8 <HAL_DMA_IRQHandler+0x40c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d031      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a23      	ldr	r2, [pc, #140]	; (80065ec <HAL_DMA_IRQHandler+0x410>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d02c      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a21      	ldr	r2, [pc, #132]	; (80065f0 <HAL_DMA_IRQHandler+0x414>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d027      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a20      	ldr	r2, [pc, #128]	; (80065f4 <HAL_DMA_IRQHandler+0x418>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d022      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a1e      	ldr	r2, [pc, #120]	; (80065f8 <HAL_DMA_IRQHandler+0x41c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d01d      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1d      	ldr	r2, [pc, #116]	; (80065fc <HAL_DMA_IRQHandler+0x420>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d018      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a1b      	ldr	r2, [pc, #108]	; (8006600 <HAL_DMA_IRQHandler+0x424>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d013      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a1a      	ldr	r2, [pc, #104]	; (8006604 <HAL_DMA_IRQHandler+0x428>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d00e      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a18      	ldr	r2, [pc, #96]	; (8006608 <HAL_DMA_IRQHandler+0x42c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d009      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a17      	ldr	r2, [pc, #92]	; (800660c <HAL_DMA_IRQHandler+0x430>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d004      	beq.n	80065be <HAL_DMA_IRQHandler+0x3e2>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a15      	ldr	r2, [pc, #84]	; (8006610 <HAL_DMA_IRQHandler+0x434>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d12a      	bne.n	8006614 <HAL_DMA_IRQHandler+0x438>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	bf14      	ite	ne
 80065cc:	2301      	movne	r3, #1
 80065ce:	2300      	moveq	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	e023      	b.n	800661c <HAL_DMA_IRQHandler+0x440>
 80065d4:	40020010 	.word	0x40020010
 80065d8:	40020028 	.word	0x40020028
 80065dc:	40020040 	.word	0x40020040
 80065e0:	40020058 	.word	0x40020058
 80065e4:	40020070 	.word	0x40020070
 80065e8:	40020088 	.word	0x40020088
 80065ec:	400200a0 	.word	0x400200a0
 80065f0:	400200b8 	.word	0x400200b8
 80065f4:	40020410 	.word	0x40020410
 80065f8:	40020428 	.word	0x40020428
 80065fc:	40020440 	.word	0x40020440
 8006600:	40020458 	.word	0x40020458
 8006604:	40020470 	.word	0x40020470
 8006608:	40020488 	.word	0x40020488
 800660c:	400204a0 	.word	0x400204a0
 8006610:	400204b8 	.word	0x400204b8
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2300      	movs	r3, #0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00d      	beq.n	800663c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006624:	f003 031f 	and.w	r3, r3, #31
 8006628:	2204      	movs	r2, #4
 800662a:	409a      	lsls	r2, r3
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006634:	f043 0204 	orr.w	r2, r3, #4
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006640:	f003 031f 	and.w	r3, r3, #31
 8006644:	2210      	movs	r2, #16
 8006646:	409a      	lsls	r2, r3
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	4013      	ands	r3, r2
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 80a6 	beq.w	800679e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a85      	ldr	r2, [pc, #532]	; (800686c <HAL_DMA_IRQHandler+0x690>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d04a      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a83      	ldr	r2, [pc, #524]	; (8006870 <HAL_DMA_IRQHandler+0x694>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d045      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a82      	ldr	r2, [pc, #520]	; (8006874 <HAL_DMA_IRQHandler+0x698>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d040      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a80      	ldr	r2, [pc, #512]	; (8006878 <HAL_DMA_IRQHandler+0x69c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d03b      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a7f      	ldr	r2, [pc, #508]	; (800687c <HAL_DMA_IRQHandler+0x6a0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d036      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a7d      	ldr	r2, [pc, #500]	; (8006880 <HAL_DMA_IRQHandler+0x6a4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d031      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a7c      	ldr	r2, [pc, #496]	; (8006884 <HAL_DMA_IRQHandler+0x6a8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d02c      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a7a      	ldr	r2, [pc, #488]	; (8006888 <HAL_DMA_IRQHandler+0x6ac>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d027      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a79      	ldr	r2, [pc, #484]	; (800688c <HAL_DMA_IRQHandler+0x6b0>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d022      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a77      	ldr	r2, [pc, #476]	; (8006890 <HAL_DMA_IRQHandler+0x6b4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d01d      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a76      	ldr	r2, [pc, #472]	; (8006894 <HAL_DMA_IRQHandler+0x6b8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d018      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a74      	ldr	r2, [pc, #464]	; (8006898 <HAL_DMA_IRQHandler+0x6bc>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a73      	ldr	r2, [pc, #460]	; (800689c <HAL_DMA_IRQHandler+0x6c0>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00e      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a71      	ldr	r2, [pc, #452]	; (80068a0 <HAL_DMA_IRQHandler+0x6c4>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d009      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a70      	ldr	r2, [pc, #448]	; (80068a4 <HAL_DMA_IRQHandler+0x6c8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d004      	beq.n	80066f2 <HAL_DMA_IRQHandler+0x516>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a6e      	ldr	r2, [pc, #440]	; (80068a8 <HAL_DMA_IRQHandler+0x6cc>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d10a      	bne.n	8006708 <HAL_DMA_IRQHandler+0x52c>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0308 	and.w	r3, r3, #8
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	bf14      	ite	ne
 8006700:	2301      	movne	r3, #1
 8006702:	2300      	moveq	r3, #0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	e009      	b.n	800671c <HAL_DMA_IRQHandler+0x540>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0304 	and.w	r3, r3, #4
 8006712:	2b00      	cmp	r3, #0
 8006714:	bf14      	ite	ne
 8006716:	2301      	movne	r3, #1
 8006718:	2300      	moveq	r3, #0
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d03e      	beq.n	800679e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006724:	f003 031f 	and.w	r3, r3, #31
 8006728:	2210      	movs	r2, #16
 800672a:	409a      	lsls	r2, r3
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d018      	beq.n	8006770 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d108      	bne.n	800675e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006750:	2b00      	cmp	r3, #0
 8006752:	d024      	beq.n	800679e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	4798      	blx	r3
 800675c:	e01f      	b.n	800679e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006762:	2b00      	cmp	r3, #0
 8006764:	d01b      	beq.n	800679e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3
 800676e:	e016      	b.n	800679e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677a:	2b00      	cmp	r3, #0
 800677c:	d107      	bne.n	800678e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0208 	bic.w	r2, r2, #8
 800678c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a2:	f003 031f 	and.w	r3, r3, #31
 80067a6:	2220      	movs	r2, #32
 80067a8:	409a      	lsls	r2, r3
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	4013      	ands	r3, r2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f000 8110 	beq.w	80069d4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a2c      	ldr	r2, [pc, #176]	; (800686c <HAL_DMA_IRQHandler+0x690>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d04a      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a2b      	ldr	r2, [pc, #172]	; (8006870 <HAL_DMA_IRQHandler+0x694>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d045      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a29      	ldr	r2, [pc, #164]	; (8006874 <HAL_DMA_IRQHandler+0x698>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d040      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a28      	ldr	r2, [pc, #160]	; (8006878 <HAL_DMA_IRQHandler+0x69c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d03b      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a26      	ldr	r2, [pc, #152]	; (800687c <HAL_DMA_IRQHandler+0x6a0>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d036      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a25      	ldr	r2, [pc, #148]	; (8006880 <HAL_DMA_IRQHandler+0x6a4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d031      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a23      	ldr	r2, [pc, #140]	; (8006884 <HAL_DMA_IRQHandler+0x6a8>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d02c      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a22      	ldr	r2, [pc, #136]	; (8006888 <HAL_DMA_IRQHandler+0x6ac>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d027      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a20      	ldr	r2, [pc, #128]	; (800688c <HAL_DMA_IRQHandler+0x6b0>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d022      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a1f      	ldr	r2, [pc, #124]	; (8006890 <HAL_DMA_IRQHandler+0x6b4>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d01d      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a1d      	ldr	r2, [pc, #116]	; (8006894 <HAL_DMA_IRQHandler+0x6b8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d018      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a1c      	ldr	r2, [pc, #112]	; (8006898 <HAL_DMA_IRQHandler+0x6bc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d013      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a1a      	ldr	r2, [pc, #104]	; (800689c <HAL_DMA_IRQHandler+0x6c0>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00e      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a19      	ldr	r2, [pc, #100]	; (80068a0 <HAL_DMA_IRQHandler+0x6c4>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d009      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a17      	ldr	r2, [pc, #92]	; (80068a4 <HAL_DMA_IRQHandler+0x6c8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d004      	beq.n	8006854 <HAL_DMA_IRQHandler+0x678>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a16      	ldr	r2, [pc, #88]	; (80068a8 <HAL_DMA_IRQHandler+0x6cc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d12b      	bne.n	80068ac <HAL_DMA_IRQHandler+0x6d0>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0310 	and.w	r3, r3, #16
 800685e:	2b00      	cmp	r3, #0
 8006860:	bf14      	ite	ne
 8006862:	2301      	movne	r3, #1
 8006864:	2300      	moveq	r3, #0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	e02a      	b.n	80068c0 <HAL_DMA_IRQHandler+0x6e4>
 800686a:	bf00      	nop
 800686c:	40020010 	.word	0x40020010
 8006870:	40020028 	.word	0x40020028
 8006874:	40020040 	.word	0x40020040
 8006878:	40020058 	.word	0x40020058
 800687c:	40020070 	.word	0x40020070
 8006880:	40020088 	.word	0x40020088
 8006884:	400200a0 	.word	0x400200a0
 8006888:	400200b8 	.word	0x400200b8
 800688c:	40020410 	.word	0x40020410
 8006890:	40020428 	.word	0x40020428
 8006894:	40020440 	.word	0x40020440
 8006898:	40020458 	.word	0x40020458
 800689c:	40020470 	.word	0x40020470
 80068a0:	40020488 	.word	0x40020488
 80068a4:	400204a0 	.word	0x400204a0
 80068a8:	400204b8 	.word	0x400204b8
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	bf14      	ite	ne
 80068ba:	2301      	movne	r3, #1
 80068bc:	2300      	moveq	r3, #0
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 8087 	beq.w	80069d4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	2220      	movs	r2, #32
 80068d0:	409a      	lsls	r2, r3
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d139      	bne.n	8006956 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0216 	bic.w	r2, r2, #22
 80068f0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695a      	ldr	r2, [r3, #20]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006900:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	2b00      	cmp	r3, #0
 8006908:	d103      	bne.n	8006912 <HAL_DMA_IRQHandler+0x736>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690e:	2b00      	cmp	r3, #0
 8006910:	d007      	beq.n	8006922 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 0208 	bic.w	r2, r2, #8
 8006920:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006926:	f003 031f 	and.w	r3, r3, #31
 800692a:	223f      	movs	r2, #63	; 0x3f
 800692c:	409a      	lsls	r2, r3
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 8382 	beq.w	8007050 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	4798      	blx	r3
          }
          return;
 8006954:	e37c      	b.n	8007050 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d018      	beq.n	8006996 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d108      	bne.n	8006984 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006976:	2b00      	cmp	r3, #0
 8006978:	d02c      	beq.n	80069d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	4798      	blx	r3
 8006982:	e027      	b.n	80069d4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d023      	beq.n	80069d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	4798      	blx	r3
 8006994:	e01e      	b.n	80069d4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10f      	bne.n	80069c4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0210 	bic.w	r2, r2, #16
 80069b2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 833e 	beq.w	800705a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f000 8088 	beq.w	8006afc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2204      	movs	r2, #4
 80069f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a89      	ldr	r2, [pc, #548]	; (8006c20 <HAL_DMA_IRQHandler+0xa44>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d04a      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a88      	ldr	r2, [pc, #544]	; (8006c24 <HAL_DMA_IRQHandler+0xa48>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d045      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a86      	ldr	r2, [pc, #536]	; (8006c28 <HAL_DMA_IRQHandler+0xa4c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d040      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a85      	ldr	r2, [pc, #532]	; (8006c2c <HAL_DMA_IRQHandler+0xa50>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d03b      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a83      	ldr	r2, [pc, #524]	; (8006c30 <HAL_DMA_IRQHandler+0xa54>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d036      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a82      	ldr	r2, [pc, #520]	; (8006c34 <HAL_DMA_IRQHandler+0xa58>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d031      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a80      	ldr	r2, [pc, #512]	; (8006c38 <HAL_DMA_IRQHandler+0xa5c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d02c      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a7f      	ldr	r2, [pc, #508]	; (8006c3c <HAL_DMA_IRQHandler+0xa60>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d027      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a7d      	ldr	r2, [pc, #500]	; (8006c40 <HAL_DMA_IRQHandler+0xa64>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d022      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a7c      	ldr	r2, [pc, #496]	; (8006c44 <HAL_DMA_IRQHandler+0xa68>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d01d      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a7a      	ldr	r2, [pc, #488]	; (8006c48 <HAL_DMA_IRQHandler+0xa6c>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d018      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a79      	ldr	r2, [pc, #484]	; (8006c4c <HAL_DMA_IRQHandler+0xa70>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d013      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a77      	ldr	r2, [pc, #476]	; (8006c50 <HAL_DMA_IRQHandler+0xa74>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d00e      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a76      	ldr	r2, [pc, #472]	; (8006c54 <HAL_DMA_IRQHandler+0xa78>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d009      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a74      	ldr	r2, [pc, #464]	; (8006c58 <HAL_DMA_IRQHandler+0xa7c>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d004      	beq.n	8006a94 <HAL_DMA_IRQHandler+0x8b8>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a73      	ldr	r2, [pc, #460]	; (8006c5c <HAL_DMA_IRQHandler+0xa80>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d108      	bne.n	8006aa6 <HAL_DMA_IRQHandler+0x8ca>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0201 	bic.w	r2, r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	e007      	b.n	8006ab6 <HAL_DMA_IRQHandler+0x8da>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0201 	bic.w	r2, r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d307      	bcc.n	8006ad2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1f2      	bne.n	8006ab6 <HAL_DMA_IRQHandler+0x8da>
 8006ad0:	e000      	b.n	8006ad4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006ad2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d004      	beq.n	8006aec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2203      	movs	r2, #3
 8006ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006aea:	e003      	b.n	8006af4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 82aa 	beq.w	800705a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	4798      	blx	r3
 8006b0e:	e2a4      	b.n	800705a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a52      	ldr	r2, [pc, #328]	; (8006c60 <HAL_DMA_IRQHandler+0xa84>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d04a      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x9d4>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a51      	ldr	r2, [pc, #324]	; (8006c64 <HAL_DMA_IRQHandler+0xa88>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d045      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x9d4>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a4f      	ldr	r2, [pc, #316]	; (8006c68 <HAL_DMA_IRQHandler+0xa8c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d040      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x9d4>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a4e      	ldr	r2, [pc, #312]	; (8006c6c <HAL_DMA_IRQHandler+0xa90>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d03b      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x9d4>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a4c      	ldr	r2, [pc, #304]	; (8006c70 <HAL_DMA_IRQHandler+0xa94>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d036      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x9d4>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a4b      	ldr	r2, [pc, #300]	; (8006c74 <HAL_DMA_IRQHandler+0xa98>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d031      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x9d4>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a49      	ldr	r2, [pc, #292]	; (8006c78 <HAL_DMA_IRQHandler+0xa9c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d02c      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x9d4>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a48      	ldr	r2, [pc, #288]	; (8006c7c <HAL_DMA_IRQHandler+0xaa0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d027      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x9d4>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a46      	ldr	r2, [pc, #280]	; (8006c80 <HAL_DMA_IRQHandler+0xaa4>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d022      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x9d4>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a45      	ldr	r2, [pc, #276]	; (8006c84 <HAL_DMA_IRQHandler+0xaa8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d01d      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x9d4>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a43      	ldr	r2, [pc, #268]	; (8006c88 <HAL_DMA_IRQHandler+0xaac>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d018      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x9d4>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a42      	ldr	r2, [pc, #264]	; (8006c8c <HAL_DMA_IRQHandler+0xab0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d013      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x9d4>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a40      	ldr	r2, [pc, #256]	; (8006c90 <HAL_DMA_IRQHandler+0xab4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00e      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x9d4>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a3f      	ldr	r2, [pc, #252]	; (8006c94 <HAL_DMA_IRQHandler+0xab8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d009      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x9d4>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a3d      	ldr	r2, [pc, #244]	; (8006c98 <HAL_DMA_IRQHandler+0xabc>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d004      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x9d4>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a3c      	ldr	r2, [pc, #240]	; (8006c9c <HAL_DMA_IRQHandler+0xac0>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d101      	bne.n	8006bb4 <HAL_DMA_IRQHandler+0x9d8>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e000      	b.n	8006bb6 <HAL_DMA_IRQHandler+0x9da>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 824f 	beq.w	800705a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc8:	f003 031f 	and.w	r3, r3, #31
 8006bcc:	2204      	movs	r2, #4
 8006bce:	409a      	lsls	r2, r3
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 80dd 	beq.w	8006d94 <HAL_DMA_IRQHandler+0xbb8>
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 80d7 	beq.w	8006d94 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bea:	f003 031f 	and.w	r3, r3, #31
 8006bee:	2204      	movs	r2, #4
 8006bf0:	409a      	lsls	r2, r3
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d059      	beq.n	8006cb4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d14a      	bne.n	8006ca0 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 8220 	beq.w	8007054 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c1c:	e21a      	b.n	8007054 <HAL_DMA_IRQHandler+0xe78>
 8006c1e:	bf00      	nop
 8006c20:	40020010 	.word	0x40020010
 8006c24:	40020028 	.word	0x40020028
 8006c28:	40020040 	.word	0x40020040
 8006c2c:	40020058 	.word	0x40020058
 8006c30:	40020070 	.word	0x40020070
 8006c34:	40020088 	.word	0x40020088
 8006c38:	400200a0 	.word	0x400200a0
 8006c3c:	400200b8 	.word	0x400200b8
 8006c40:	40020410 	.word	0x40020410
 8006c44:	40020428 	.word	0x40020428
 8006c48:	40020440 	.word	0x40020440
 8006c4c:	40020458 	.word	0x40020458
 8006c50:	40020470 	.word	0x40020470
 8006c54:	40020488 	.word	0x40020488
 8006c58:	400204a0 	.word	0x400204a0
 8006c5c:	400204b8 	.word	0x400204b8
 8006c60:	48022c08 	.word	0x48022c08
 8006c64:	48022c1c 	.word	0x48022c1c
 8006c68:	48022c30 	.word	0x48022c30
 8006c6c:	48022c44 	.word	0x48022c44
 8006c70:	48022c58 	.word	0x48022c58
 8006c74:	48022c6c 	.word	0x48022c6c
 8006c78:	48022c80 	.word	0x48022c80
 8006c7c:	48022c94 	.word	0x48022c94
 8006c80:	58025408 	.word	0x58025408
 8006c84:	5802541c 	.word	0x5802541c
 8006c88:	58025430 	.word	0x58025430
 8006c8c:	58025444 	.word	0x58025444
 8006c90:	58025458 	.word	0x58025458
 8006c94:	5802546c 	.word	0x5802546c
 8006c98:	58025480 	.word	0x58025480
 8006c9c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 81d5 	beq.w	8007054 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cb2:	e1cf      	b.n	8007054 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f003 0320 	and.w	r3, r3, #32
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d160      	bne.n	8006d80 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a7f      	ldr	r2, [pc, #508]	; (8006ec0 <HAL_DMA_IRQHandler+0xce4>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d04a      	beq.n	8006d5e <HAL_DMA_IRQHandler+0xb82>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a7d      	ldr	r2, [pc, #500]	; (8006ec4 <HAL_DMA_IRQHandler+0xce8>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d045      	beq.n	8006d5e <HAL_DMA_IRQHandler+0xb82>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a7c      	ldr	r2, [pc, #496]	; (8006ec8 <HAL_DMA_IRQHandler+0xcec>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d040      	beq.n	8006d5e <HAL_DMA_IRQHandler+0xb82>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a7a      	ldr	r2, [pc, #488]	; (8006ecc <HAL_DMA_IRQHandler+0xcf0>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d03b      	beq.n	8006d5e <HAL_DMA_IRQHandler+0xb82>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a79      	ldr	r2, [pc, #484]	; (8006ed0 <HAL_DMA_IRQHandler+0xcf4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d036      	beq.n	8006d5e <HAL_DMA_IRQHandler+0xb82>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a77      	ldr	r2, [pc, #476]	; (8006ed4 <HAL_DMA_IRQHandler+0xcf8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d031      	beq.n	8006d5e <HAL_DMA_IRQHandler+0xb82>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a76      	ldr	r2, [pc, #472]	; (8006ed8 <HAL_DMA_IRQHandler+0xcfc>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d02c      	beq.n	8006d5e <HAL_DMA_IRQHandler+0xb82>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a74      	ldr	r2, [pc, #464]	; (8006edc <HAL_DMA_IRQHandler+0xd00>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d027      	beq.n	8006d5e <HAL_DMA_IRQHandler+0xb82>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a73      	ldr	r2, [pc, #460]	; (8006ee0 <HAL_DMA_IRQHandler+0xd04>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d022      	beq.n	8006d5e <HAL_DMA_IRQHandler+0xb82>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a71      	ldr	r2, [pc, #452]	; (8006ee4 <HAL_DMA_IRQHandler+0xd08>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d01d      	beq.n	8006d5e <HAL_DMA_IRQHandler+0xb82>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a70      	ldr	r2, [pc, #448]	; (8006ee8 <HAL_DMA_IRQHandler+0xd0c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d018      	beq.n	8006d5e <HAL_DMA_IRQHandler+0xb82>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a6e      	ldr	r2, [pc, #440]	; (8006eec <HAL_DMA_IRQHandler+0xd10>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d013      	beq.n	8006d5e <HAL_DMA_IRQHandler+0xb82>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a6d      	ldr	r2, [pc, #436]	; (8006ef0 <HAL_DMA_IRQHandler+0xd14>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d00e      	beq.n	8006d5e <HAL_DMA_IRQHandler+0xb82>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a6b      	ldr	r2, [pc, #428]	; (8006ef4 <HAL_DMA_IRQHandler+0xd18>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d009      	beq.n	8006d5e <HAL_DMA_IRQHandler+0xb82>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a6a      	ldr	r2, [pc, #424]	; (8006ef8 <HAL_DMA_IRQHandler+0xd1c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d004      	beq.n	8006d5e <HAL_DMA_IRQHandler+0xb82>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a68      	ldr	r2, [pc, #416]	; (8006efc <HAL_DMA_IRQHandler+0xd20>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d108      	bne.n	8006d70 <HAL_DMA_IRQHandler+0xb94>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0208 	bic.w	r2, r2, #8
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e007      	b.n	8006d80 <HAL_DMA_IRQHandler+0xba4>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0204 	bic.w	r2, r2, #4
 8006d7e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 8165 	beq.w	8007054 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d92:	e15f      	b.n	8007054 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d98:	f003 031f 	and.w	r3, r3, #31
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	409a      	lsls	r2, r3
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	4013      	ands	r3, r2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 80c5 	beq.w	8006f34 <HAL_DMA_IRQHandler+0xd58>
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f003 0302 	and.w	r3, r3, #2
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 80bf 	beq.w	8006f34 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dba:	f003 031f 	and.w	r3, r3, #31
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	409a      	lsls	r2, r3
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d018      	beq.n	8006e02 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d109      	bne.n	8006dee <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 813a 	beq.w	8007058 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dec:	e134      	b.n	8007058 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 8130 	beq.w	8007058 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e00:	e12a      	b.n	8007058 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f003 0320 	and.w	r3, r3, #32
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f040 8089 	bne.w	8006f20 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a2b      	ldr	r2, [pc, #172]	; (8006ec0 <HAL_DMA_IRQHandler+0xce4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d04a      	beq.n	8006eae <HAL_DMA_IRQHandler+0xcd2>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a29      	ldr	r2, [pc, #164]	; (8006ec4 <HAL_DMA_IRQHandler+0xce8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d045      	beq.n	8006eae <HAL_DMA_IRQHandler+0xcd2>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a28      	ldr	r2, [pc, #160]	; (8006ec8 <HAL_DMA_IRQHandler+0xcec>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d040      	beq.n	8006eae <HAL_DMA_IRQHandler+0xcd2>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a26      	ldr	r2, [pc, #152]	; (8006ecc <HAL_DMA_IRQHandler+0xcf0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d03b      	beq.n	8006eae <HAL_DMA_IRQHandler+0xcd2>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a25      	ldr	r2, [pc, #148]	; (8006ed0 <HAL_DMA_IRQHandler+0xcf4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d036      	beq.n	8006eae <HAL_DMA_IRQHandler+0xcd2>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a23      	ldr	r2, [pc, #140]	; (8006ed4 <HAL_DMA_IRQHandler+0xcf8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d031      	beq.n	8006eae <HAL_DMA_IRQHandler+0xcd2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a22      	ldr	r2, [pc, #136]	; (8006ed8 <HAL_DMA_IRQHandler+0xcfc>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d02c      	beq.n	8006eae <HAL_DMA_IRQHandler+0xcd2>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a20      	ldr	r2, [pc, #128]	; (8006edc <HAL_DMA_IRQHandler+0xd00>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d027      	beq.n	8006eae <HAL_DMA_IRQHandler+0xcd2>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a1f      	ldr	r2, [pc, #124]	; (8006ee0 <HAL_DMA_IRQHandler+0xd04>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d022      	beq.n	8006eae <HAL_DMA_IRQHandler+0xcd2>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a1d      	ldr	r2, [pc, #116]	; (8006ee4 <HAL_DMA_IRQHandler+0xd08>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d01d      	beq.n	8006eae <HAL_DMA_IRQHandler+0xcd2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a1c      	ldr	r2, [pc, #112]	; (8006ee8 <HAL_DMA_IRQHandler+0xd0c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d018      	beq.n	8006eae <HAL_DMA_IRQHandler+0xcd2>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a1a      	ldr	r2, [pc, #104]	; (8006eec <HAL_DMA_IRQHandler+0xd10>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d013      	beq.n	8006eae <HAL_DMA_IRQHandler+0xcd2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a19      	ldr	r2, [pc, #100]	; (8006ef0 <HAL_DMA_IRQHandler+0xd14>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d00e      	beq.n	8006eae <HAL_DMA_IRQHandler+0xcd2>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a17      	ldr	r2, [pc, #92]	; (8006ef4 <HAL_DMA_IRQHandler+0xd18>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d009      	beq.n	8006eae <HAL_DMA_IRQHandler+0xcd2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a16      	ldr	r2, [pc, #88]	; (8006ef8 <HAL_DMA_IRQHandler+0xd1c>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d004      	beq.n	8006eae <HAL_DMA_IRQHandler+0xcd2>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a14      	ldr	r2, [pc, #80]	; (8006efc <HAL_DMA_IRQHandler+0xd20>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d128      	bne.n	8006f00 <HAL_DMA_IRQHandler+0xd24>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 0214 	bic.w	r2, r2, #20
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	e027      	b.n	8006f10 <HAL_DMA_IRQHandler+0xd34>
 8006ec0:	40020010 	.word	0x40020010
 8006ec4:	40020028 	.word	0x40020028
 8006ec8:	40020040 	.word	0x40020040
 8006ecc:	40020058 	.word	0x40020058
 8006ed0:	40020070 	.word	0x40020070
 8006ed4:	40020088 	.word	0x40020088
 8006ed8:	400200a0 	.word	0x400200a0
 8006edc:	400200b8 	.word	0x400200b8
 8006ee0:	40020410 	.word	0x40020410
 8006ee4:	40020428 	.word	0x40020428
 8006ee8:	40020440 	.word	0x40020440
 8006eec:	40020458 	.word	0x40020458
 8006ef0:	40020470 	.word	0x40020470
 8006ef4:	40020488 	.word	0x40020488
 8006ef8:	400204a0 	.word	0x400204a0
 8006efc:	400204b8 	.word	0x400204b8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 020a 	bic.w	r2, r2, #10
 8006f0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 8097 	beq.w	8007058 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f32:	e091      	b.n	8007058 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f38:	f003 031f 	and.w	r3, r3, #31
 8006f3c:	2208      	movs	r2, #8
 8006f3e:	409a      	lsls	r2, r3
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	4013      	ands	r3, r2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 8088 	beq.w	800705a <HAL_DMA_IRQHandler+0xe7e>
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 8082 	beq.w	800705a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a41      	ldr	r2, [pc, #260]	; (8007060 <HAL_DMA_IRQHandler+0xe84>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d04a      	beq.n	8006ff6 <HAL_DMA_IRQHandler+0xe1a>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a3f      	ldr	r2, [pc, #252]	; (8007064 <HAL_DMA_IRQHandler+0xe88>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d045      	beq.n	8006ff6 <HAL_DMA_IRQHandler+0xe1a>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a3e      	ldr	r2, [pc, #248]	; (8007068 <HAL_DMA_IRQHandler+0xe8c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d040      	beq.n	8006ff6 <HAL_DMA_IRQHandler+0xe1a>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a3c      	ldr	r2, [pc, #240]	; (800706c <HAL_DMA_IRQHandler+0xe90>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d03b      	beq.n	8006ff6 <HAL_DMA_IRQHandler+0xe1a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a3b      	ldr	r2, [pc, #236]	; (8007070 <HAL_DMA_IRQHandler+0xe94>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d036      	beq.n	8006ff6 <HAL_DMA_IRQHandler+0xe1a>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a39      	ldr	r2, [pc, #228]	; (8007074 <HAL_DMA_IRQHandler+0xe98>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d031      	beq.n	8006ff6 <HAL_DMA_IRQHandler+0xe1a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a38      	ldr	r2, [pc, #224]	; (8007078 <HAL_DMA_IRQHandler+0xe9c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d02c      	beq.n	8006ff6 <HAL_DMA_IRQHandler+0xe1a>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a36      	ldr	r2, [pc, #216]	; (800707c <HAL_DMA_IRQHandler+0xea0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d027      	beq.n	8006ff6 <HAL_DMA_IRQHandler+0xe1a>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a35      	ldr	r2, [pc, #212]	; (8007080 <HAL_DMA_IRQHandler+0xea4>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d022      	beq.n	8006ff6 <HAL_DMA_IRQHandler+0xe1a>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a33      	ldr	r2, [pc, #204]	; (8007084 <HAL_DMA_IRQHandler+0xea8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d01d      	beq.n	8006ff6 <HAL_DMA_IRQHandler+0xe1a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a32      	ldr	r2, [pc, #200]	; (8007088 <HAL_DMA_IRQHandler+0xeac>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d018      	beq.n	8006ff6 <HAL_DMA_IRQHandler+0xe1a>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a30      	ldr	r2, [pc, #192]	; (800708c <HAL_DMA_IRQHandler+0xeb0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d013      	beq.n	8006ff6 <HAL_DMA_IRQHandler+0xe1a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a2f      	ldr	r2, [pc, #188]	; (8007090 <HAL_DMA_IRQHandler+0xeb4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d00e      	beq.n	8006ff6 <HAL_DMA_IRQHandler+0xe1a>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a2d      	ldr	r2, [pc, #180]	; (8007094 <HAL_DMA_IRQHandler+0xeb8>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d009      	beq.n	8006ff6 <HAL_DMA_IRQHandler+0xe1a>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a2c      	ldr	r2, [pc, #176]	; (8007098 <HAL_DMA_IRQHandler+0xebc>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d004      	beq.n	8006ff6 <HAL_DMA_IRQHandler+0xe1a>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a2a      	ldr	r2, [pc, #168]	; (800709c <HAL_DMA_IRQHandler+0xec0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d108      	bne.n	8007008 <HAL_DMA_IRQHandler+0xe2c>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 021c 	bic.w	r2, r2, #28
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	e007      	b.n	8007018 <HAL_DMA_IRQHandler+0xe3c>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 020e 	bic.w	r2, r2, #14
 8007016:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800701c:	f003 031f 	and.w	r3, r3, #31
 8007020:	2201      	movs	r2, #1
 8007022:	409a      	lsls	r2, r3
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d009      	beq.n	800705a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	4798      	blx	r3
 800704e:	e004      	b.n	800705a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8007050:	bf00      	nop
 8007052:	e002      	b.n	800705a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007054:	bf00      	nop
 8007056:	e000      	b.n	800705a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007058:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800705a:	3728      	adds	r7, #40	; 0x28
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	40020010 	.word	0x40020010
 8007064:	40020028 	.word	0x40020028
 8007068:	40020040 	.word	0x40020040
 800706c:	40020058 	.word	0x40020058
 8007070:	40020070 	.word	0x40020070
 8007074:	40020088 	.word	0x40020088
 8007078:	400200a0 	.word	0x400200a0
 800707c:	400200b8 	.word	0x400200b8
 8007080:	40020410 	.word	0x40020410
 8007084:	40020428 	.word	0x40020428
 8007088:	40020440 	.word	0x40020440
 800708c:	40020458 	.word	0x40020458
 8007090:	40020470 	.word	0x40020470
 8007094:	40020488 	.word	0x40020488
 8007098:	400204a0 	.word	0x400204a0
 800709c:	400204b8 	.word	0x400204b8

080070a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a7f      	ldr	r2, [pc, #508]	; (80072bc <DMA_SetConfig+0x21c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d072      	beq.n	80071aa <DMA_SetConfig+0x10a>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a7d      	ldr	r2, [pc, #500]	; (80072c0 <DMA_SetConfig+0x220>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d06d      	beq.n	80071aa <DMA_SetConfig+0x10a>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a7c      	ldr	r2, [pc, #496]	; (80072c4 <DMA_SetConfig+0x224>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d068      	beq.n	80071aa <DMA_SetConfig+0x10a>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a7a      	ldr	r2, [pc, #488]	; (80072c8 <DMA_SetConfig+0x228>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d063      	beq.n	80071aa <DMA_SetConfig+0x10a>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a79      	ldr	r2, [pc, #484]	; (80072cc <DMA_SetConfig+0x22c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d05e      	beq.n	80071aa <DMA_SetConfig+0x10a>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a77      	ldr	r2, [pc, #476]	; (80072d0 <DMA_SetConfig+0x230>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d059      	beq.n	80071aa <DMA_SetConfig+0x10a>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a76      	ldr	r2, [pc, #472]	; (80072d4 <DMA_SetConfig+0x234>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d054      	beq.n	80071aa <DMA_SetConfig+0x10a>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a74      	ldr	r2, [pc, #464]	; (80072d8 <DMA_SetConfig+0x238>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d04f      	beq.n	80071aa <DMA_SetConfig+0x10a>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a73      	ldr	r2, [pc, #460]	; (80072dc <DMA_SetConfig+0x23c>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d04a      	beq.n	80071aa <DMA_SetConfig+0x10a>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a71      	ldr	r2, [pc, #452]	; (80072e0 <DMA_SetConfig+0x240>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d045      	beq.n	80071aa <DMA_SetConfig+0x10a>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a70      	ldr	r2, [pc, #448]	; (80072e4 <DMA_SetConfig+0x244>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d040      	beq.n	80071aa <DMA_SetConfig+0x10a>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a6e      	ldr	r2, [pc, #440]	; (80072e8 <DMA_SetConfig+0x248>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d03b      	beq.n	80071aa <DMA_SetConfig+0x10a>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a6d      	ldr	r2, [pc, #436]	; (80072ec <DMA_SetConfig+0x24c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d036      	beq.n	80071aa <DMA_SetConfig+0x10a>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a6b      	ldr	r2, [pc, #428]	; (80072f0 <DMA_SetConfig+0x250>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d031      	beq.n	80071aa <DMA_SetConfig+0x10a>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a6a      	ldr	r2, [pc, #424]	; (80072f4 <DMA_SetConfig+0x254>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d02c      	beq.n	80071aa <DMA_SetConfig+0x10a>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a68      	ldr	r2, [pc, #416]	; (80072f8 <DMA_SetConfig+0x258>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d027      	beq.n	80071aa <DMA_SetConfig+0x10a>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a67      	ldr	r2, [pc, #412]	; (80072fc <DMA_SetConfig+0x25c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d022      	beq.n	80071aa <DMA_SetConfig+0x10a>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a65      	ldr	r2, [pc, #404]	; (8007300 <DMA_SetConfig+0x260>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d01d      	beq.n	80071aa <DMA_SetConfig+0x10a>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a64      	ldr	r2, [pc, #400]	; (8007304 <DMA_SetConfig+0x264>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d018      	beq.n	80071aa <DMA_SetConfig+0x10a>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a62      	ldr	r2, [pc, #392]	; (8007308 <DMA_SetConfig+0x268>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d013      	beq.n	80071aa <DMA_SetConfig+0x10a>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a61      	ldr	r2, [pc, #388]	; (800730c <DMA_SetConfig+0x26c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d00e      	beq.n	80071aa <DMA_SetConfig+0x10a>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a5f      	ldr	r2, [pc, #380]	; (8007310 <DMA_SetConfig+0x270>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d009      	beq.n	80071aa <DMA_SetConfig+0x10a>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a5e      	ldr	r2, [pc, #376]	; (8007314 <DMA_SetConfig+0x274>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d004      	beq.n	80071aa <DMA_SetConfig+0x10a>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a5c      	ldr	r2, [pc, #368]	; (8007318 <DMA_SetConfig+0x278>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d101      	bne.n	80071ae <DMA_SetConfig+0x10e>
 80071aa:	2301      	movs	r3, #1
 80071ac:	e000      	b.n	80071b0 <DMA_SetConfig+0x110>
 80071ae:	2300      	movs	r3, #0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00d      	beq.n	80071d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80071bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d004      	beq.n	80071d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80071ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a39      	ldr	r2, [pc, #228]	; (80072bc <DMA_SetConfig+0x21c>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d04a      	beq.n	8007270 <DMA_SetConfig+0x1d0>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a38      	ldr	r2, [pc, #224]	; (80072c0 <DMA_SetConfig+0x220>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d045      	beq.n	8007270 <DMA_SetConfig+0x1d0>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a36      	ldr	r2, [pc, #216]	; (80072c4 <DMA_SetConfig+0x224>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d040      	beq.n	8007270 <DMA_SetConfig+0x1d0>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a35      	ldr	r2, [pc, #212]	; (80072c8 <DMA_SetConfig+0x228>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d03b      	beq.n	8007270 <DMA_SetConfig+0x1d0>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a33      	ldr	r2, [pc, #204]	; (80072cc <DMA_SetConfig+0x22c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d036      	beq.n	8007270 <DMA_SetConfig+0x1d0>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a32      	ldr	r2, [pc, #200]	; (80072d0 <DMA_SetConfig+0x230>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d031      	beq.n	8007270 <DMA_SetConfig+0x1d0>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a30      	ldr	r2, [pc, #192]	; (80072d4 <DMA_SetConfig+0x234>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d02c      	beq.n	8007270 <DMA_SetConfig+0x1d0>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a2f      	ldr	r2, [pc, #188]	; (80072d8 <DMA_SetConfig+0x238>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d027      	beq.n	8007270 <DMA_SetConfig+0x1d0>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a2d      	ldr	r2, [pc, #180]	; (80072dc <DMA_SetConfig+0x23c>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d022      	beq.n	8007270 <DMA_SetConfig+0x1d0>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a2c      	ldr	r2, [pc, #176]	; (80072e0 <DMA_SetConfig+0x240>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d01d      	beq.n	8007270 <DMA_SetConfig+0x1d0>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a2a      	ldr	r2, [pc, #168]	; (80072e4 <DMA_SetConfig+0x244>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d018      	beq.n	8007270 <DMA_SetConfig+0x1d0>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a29      	ldr	r2, [pc, #164]	; (80072e8 <DMA_SetConfig+0x248>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d013      	beq.n	8007270 <DMA_SetConfig+0x1d0>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a27      	ldr	r2, [pc, #156]	; (80072ec <DMA_SetConfig+0x24c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d00e      	beq.n	8007270 <DMA_SetConfig+0x1d0>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a26      	ldr	r2, [pc, #152]	; (80072f0 <DMA_SetConfig+0x250>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d009      	beq.n	8007270 <DMA_SetConfig+0x1d0>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a24      	ldr	r2, [pc, #144]	; (80072f4 <DMA_SetConfig+0x254>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d004      	beq.n	8007270 <DMA_SetConfig+0x1d0>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a23      	ldr	r2, [pc, #140]	; (80072f8 <DMA_SetConfig+0x258>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d101      	bne.n	8007274 <DMA_SetConfig+0x1d4>
 8007270:	2301      	movs	r3, #1
 8007272:	e000      	b.n	8007276 <DMA_SetConfig+0x1d6>
 8007274:	2300      	movs	r3, #0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d059      	beq.n	800732e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800727e:	f003 031f 	and.w	r3, r3, #31
 8007282:	223f      	movs	r2, #63	; 0x3f
 8007284:	409a      	lsls	r2, r3
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007298:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	2b40      	cmp	r3, #64	; 0x40
 80072a8:	d138      	bne.n	800731c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80072ba:	e0ae      	b.n	800741a <DMA_SetConfig+0x37a>
 80072bc:	40020010 	.word	0x40020010
 80072c0:	40020028 	.word	0x40020028
 80072c4:	40020040 	.word	0x40020040
 80072c8:	40020058 	.word	0x40020058
 80072cc:	40020070 	.word	0x40020070
 80072d0:	40020088 	.word	0x40020088
 80072d4:	400200a0 	.word	0x400200a0
 80072d8:	400200b8 	.word	0x400200b8
 80072dc:	40020410 	.word	0x40020410
 80072e0:	40020428 	.word	0x40020428
 80072e4:	40020440 	.word	0x40020440
 80072e8:	40020458 	.word	0x40020458
 80072ec:	40020470 	.word	0x40020470
 80072f0:	40020488 	.word	0x40020488
 80072f4:	400204a0 	.word	0x400204a0
 80072f8:	400204b8 	.word	0x400204b8
 80072fc:	58025408 	.word	0x58025408
 8007300:	5802541c 	.word	0x5802541c
 8007304:	58025430 	.word	0x58025430
 8007308:	58025444 	.word	0x58025444
 800730c:	58025458 	.word	0x58025458
 8007310:	5802546c 	.word	0x5802546c
 8007314:	58025480 	.word	0x58025480
 8007318:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	60da      	str	r2, [r3, #12]
}
 800732c:	e075      	b.n	800741a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a3d      	ldr	r2, [pc, #244]	; (8007428 <DMA_SetConfig+0x388>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d04a      	beq.n	80073ce <DMA_SetConfig+0x32e>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a3b      	ldr	r2, [pc, #236]	; (800742c <DMA_SetConfig+0x38c>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d045      	beq.n	80073ce <DMA_SetConfig+0x32e>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a3a      	ldr	r2, [pc, #232]	; (8007430 <DMA_SetConfig+0x390>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d040      	beq.n	80073ce <DMA_SetConfig+0x32e>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a38      	ldr	r2, [pc, #224]	; (8007434 <DMA_SetConfig+0x394>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d03b      	beq.n	80073ce <DMA_SetConfig+0x32e>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a37      	ldr	r2, [pc, #220]	; (8007438 <DMA_SetConfig+0x398>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d036      	beq.n	80073ce <DMA_SetConfig+0x32e>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a35      	ldr	r2, [pc, #212]	; (800743c <DMA_SetConfig+0x39c>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d031      	beq.n	80073ce <DMA_SetConfig+0x32e>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a34      	ldr	r2, [pc, #208]	; (8007440 <DMA_SetConfig+0x3a0>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d02c      	beq.n	80073ce <DMA_SetConfig+0x32e>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a32      	ldr	r2, [pc, #200]	; (8007444 <DMA_SetConfig+0x3a4>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d027      	beq.n	80073ce <DMA_SetConfig+0x32e>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a31      	ldr	r2, [pc, #196]	; (8007448 <DMA_SetConfig+0x3a8>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d022      	beq.n	80073ce <DMA_SetConfig+0x32e>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a2f      	ldr	r2, [pc, #188]	; (800744c <DMA_SetConfig+0x3ac>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d01d      	beq.n	80073ce <DMA_SetConfig+0x32e>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a2e      	ldr	r2, [pc, #184]	; (8007450 <DMA_SetConfig+0x3b0>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d018      	beq.n	80073ce <DMA_SetConfig+0x32e>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a2c      	ldr	r2, [pc, #176]	; (8007454 <DMA_SetConfig+0x3b4>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d013      	beq.n	80073ce <DMA_SetConfig+0x32e>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a2b      	ldr	r2, [pc, #172]	; (8007458 <DMA_SetConfig+0x3b8>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d00e      	beq.n	80073ce <DMA_SetConfig+0x32e>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a29      	ldr	r2, [pc, #164]	; (800745c <DMA_SetConfig+0x3bc>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d009      	beq.n	80073ce <DMA_SetConfig+0x32e>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a28      	ldr	r2, [pc, #160]	; (8007460 <DMA_SetConfig+0x3c0>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d004      	beq.n	80073ce <DMA_SetConfig+0x32e>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a26      	ldr	r2, [pc, #152]	; (8007464 <DMA_SetConfig+0x3c4>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d101      	bne.n	80073d2 <DMA_SetConfig+0x332>
 80073ce:	2301      	movs	r3, #1
 80073d0:	e000      	b.n	80073d4 <DMA_SetConfig+0x334>
 80073d2:	2300      	movs	r3, #0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d020      	beq.n	800741a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073dc:	f003 031f 	and.w	r3, r3, #31
 80073e0:	2201      	movs	r2, #1
 80073e2:	409a      	lsls	r2, r3
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	2b40      	cmp	r3, #64	; 0x40
 80073f6:	d108      	bne.n	800740a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	60da      	str	r2, [r3, #12]
}
 8007408:	e007      	b.n	800741a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	60da      	str	r2, [r3, #12]
}
 800741a:	bf00      	nop
 800741c:	371c      	adds	r7, #28
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	48022c08 	.word	0x48022c08
 800742c:	48022c1c 	.word	0x48022c1c
 8007430:	48022c30 	.word	0x48022c30
 8007434:	48022c44 	.word	0x48022c44
 8007438:	48022c58 	.word	0x48022c58
 800743c:	48022c6c 	.word	0x48022c6c
 8007440:	48022c80 	.word	0x48022c80
 8007444:	48022c94 	.word	0x48022c94
 8007448:	58025408 	.word	0x58025408
 800744c:	5802541c 	.word	0x5802541c
 8007450:	58025430 	.word	0x58025430
 8007454:	58025444 	.word	0x58025444
 8007458:	58025458 	.word	0x58025458
 800745c:	5802546c 	.word	0x5802546c
 8007460:	58025480 	.word	0x58025480
 8007464:	58025494 	.word	0x58025494

08007468 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a42      	ldr	r2, [pc, #264]	; (8007580 <DMA_CalcBaseAndBitshift+0x118>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d04a      	beq.n	8007510 <DMA_CalcBaseAndBitshift+0xa8>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a41      	ldr	r2, [pc, #260]	; (8007584 <DMA_CalcBaseAndBitshift+0x11c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d045      	beq.n	8007510 <DMA_CalcBaseAndBitshift+0xa8>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a3f      	ldr	r2, [pc, #252]	; (8007588 <DMA_CalcBaseAndBitshift+0x120>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d040      	beq.n	8007510 <DMA_CalcBaseAndBitshift+0xa8>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a3e      	ldr	r2, [pc, #248]	; (800758c <DMA_CalcBaseAndBitshift+0x124>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d03b      	beq.n	8007510 <DMA_CalcBaseAndBitshift+0xa8>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a3c      	ldr	r2, [pc, #240]	; (8007590 <DMA_CalcBaseAndBitshift+0x128>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d036      	beq.n	8007510 <DMA_CalcBaseAndBitshift+0xa8>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a3b      	ldr	r2, [pc, #236]	; (8007594 <DMA_CalcBaseAndBitshift+0x12c>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d031      	beq.n	8007510 <DMA_CalcBaseAndBitshift+0xa8>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a39      	ldr	r2, [pc, #228]	; (8007598 <DMA_CalcBaseAndBitshift+0x130>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d02c      	beq.n	8007510 <DMA_CalcBaseAndBitshift+0xa8>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a38      	ldr	r2, [pc, #224]	; (800759c <DMA_CalcBaseAndBitshift+0x134>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d027      	beq.n	8007510 <DMA_CalcBaseAndBitshift+0xa8>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a36      	ldr	r2, [pc, #216]	; (80075a0 <DMA_CalcBaseAndBitshift+0x138>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d022      	beq.n	8007510 <DMA_CalcBaseAndBitshift+0xa8>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a35      	ldr	r2, [pc, #212]	; (80075a4 <DMA_CalcBaseAndBitshift+0x13c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d01d      	beq.n	8007510 <DMA_CalcBaseAndBitshift+0xa8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a33      	ldr	r2, [pc, #204]	; (80075a8 <DMA_CalcBaseAndBitshift+0x140>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d018      	beq.n	8007510 <DMA_CalcBaseAndBitshift+0xa8>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a32      	ldr	r2, [pc, #200]	; (80075ac <DMA_CalcBaseAndBitshift+0x144>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d013      	beq.n	8007510 <DMA_CalcBaseAndBitshift+0xa8>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a30      	ldr	r2, [pc, #192]	; (80075b0 <DMA_CalcBaseAndBitshift+0x148>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d00e      	beq.n	8007510 <DMA_CalcBaseAndBitshift+0xa8>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a2f      	ldr	r2, [pc, #188]	; (80075b4 <DMA_CalcBaseAndBitshift+0x14c>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d009      	beq.n	8007510 <DMA_CalcBaseAndBitshift+0xa8>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a2d      	ldr	r2, [pc, #180]	; (80075b8 <DMA_CalcBaseAndBitshift+0x150>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d004      	beq.n	8007510 <DMA_CalcBaseAndBitshift+0xa8>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a2c      	ldr	r2, [pc, #176]	; (80075bc <DMA_CalcBaseAndBitshift+0x154>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d101      	bne.n	8007514 <DMA_CalcBaseAndBitshift+0xac>
 8007510:	2301      	movs	r3, #1
 8007512:	e000      	b.n	8007516 <DMA_CalcBaseAndBitshift+0xae>
 8007514:	2300      	movs	r3, #0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d024      	beq.n	8007564 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	b2db      	uxtb	r3, r3
 8007520:	3b10      	subs	r3, #16
 8007522:	4a27      	ldr	r2, [pc, #156]	; (80075c0 <DMA_CalcBaseAndBitshift+0x158>)
 8007524:	fba2 2303 	umull	r2, r3, r2, r3
 8007528:	091b      	lsrs	r3, r3, #4
 800752a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f003 0307 	and.w	r3, r3, #7
 8007532:	4a24      	ldr	r2, [pc, #144]	; (80075c4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007534:	5cd3      	ldrb	r3, [r2, r3]
 8007536:	461a      	mov	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b03      	cmp	r3, #3
 8007540:	d908      	bls.n	8007554 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	461a      	mov	r2, r3
 8007548:	4b1f      	ldr	r3, [pc, #124]	; (80075c8 <DMA_CalcBaseAndBitshift+0x160>)
 800754a:	4013      	ands	r3, r2
 800754c:	1d1a      	adds	r2, r3, #4
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	659a      	str	r2, [r3, #88]	; 0x58
 8007552:	e00d      	b.n	8007570 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	461a      	mov	r2, r3
 800755a:	4b1b      	ldr	r3, [pc, #108]	; (80075c8 <DMA_CalcBaseAndBitshift+0x160>)
 800755c:	4013      	ands	r3, r2
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	6593      	str	r3, [r2, #88]	; 0x58
 8007562:	e005      	b.n	8007570 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007574:	4618      	mov	r0, r3
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	40020010 	.word	0x40020010
 8007584:	40020028 	.word	0x40020028
 8007588:	40020040 	.word	0x40020040
 800758c:	40020058 	.word	0x40020058
 8007590:	40020070 	.word	0x40020070
 8007594:	40020088 	.word	0x40020088
 8007598:	400200a0 	.word	0x400200a0
 800759c:	400200b8 	.word	0x400200b8
 80075a0:	40020410 	.word	0x40020410
 80075a4:	40020428 	.word	0x40020428
 80075a8:	40020440 	.word	0x40020440
 80075ac:	40020458 	.word	0x40020458
 80075b0:	40020470 	.word	0x40020470
 80075b4:	40020488 	.word	0x40020488
 80075b8:	400204a0 	.word	0x400204a0
 80075bc:	400204b8 	.word	0x400204b8
 80075c0:	aaaaaaab 	.word	0xaaaaaaab
 80075c4:	080108c0 	.word	0x080108c0
 80075c8:	fffffc00 	.word	0xfffffc00

080075cc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d120      	bne.n	8007622 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d858      	bhi.n	800769a <DMA_CheckFifoParam+0xce>
 80075e8:	a201      	add	r2, pc, #4	; (adr r2, 80075f0 <DMA_CheckFifoParam+0x24>)
 80075ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ee:	bf00      	nop
 80075f0:	08007601 	.word	0x08007601
 80075f4:	08007613 	.word	0x08007613
 80075f8:	08007601 	.word	0x08007601
 80075fc:	0800769b 	.word	0x0800769b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d048      	beq.n	800769e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007610:	e045      	b.n	800769e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800761a:	d142      	bne.n	80076a2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007620:	e03f      	b.n	80076a2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800762a:	d123      	bne.n	8007674 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007630:	2b03      	cmp	r3, #3
 8007632:	d838      	bhi.n	80076a6 <DMA_CheckFifoParam+0xda>
 8007634:	a201      	add	r2, pc, #4	; (adr r2, 800763c <DMA_CheckFifoParam+0x70>)
 8007636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763a:	bf00      	nop
 800763c:	0800764d 	.word	0x0800764d
 8007640:	08007653 	.word	0x08007653
 8007644:	0800764d 	.word	0x0800764d
 8007648:	08007665 	.word	0x08007665
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	73fb      	strb	r3, [r7, #15]
        break;
 8007650:	e030      	b.n	80076b4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d025      	beq.n	80076aa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007662:	e022      	b.n	80076aa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800766c:	d11f      	bne.n	80076ae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007672:	e01c      	b.n	80076ae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	2b02      	cmp	r3, #2
 800767a:	d902      	bls.n	8007682 <DMA_CheckFifoParam+0xb6>
 800767c:	2b03      	cmp	r3, #3
 800767e:	d003      	beq.n	8007688 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007680:	e018      	b.n	80076b4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	73fb      	strb	r3, [r7, #15]
        break;
 8007686:	e015      	b.n	80076b4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00e      	beq.n	80076b2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]
    break;
 8007698:	e00b      	b.n	80076b2 <DMA_CheckFifoParam+0xe6>
        break;
 800769a:	bf00      	nop
 800769c:	e00a      	b.n	80076b4 <DMA_CheckFifoParam+0xe8>
        break;
 800769e:	bf00      	nop
 80076a0:	e008      	b.n	80076b4 <DMA_CheckFifoParam+0xe8>
        break;
 80076a2:	bf00      	nop
 80076a4:	e006      	b.n	80076b4 <DMA_CheckFifoParam+0xe8>
        break;
 80076a6:	bf00      	nop
 80076a8:	e004      	b.n	80076b4 <DMA_CheckFifoParam+0xe8>
        break;
 80076aa:	bf00      	nop
 80076ac:	e002      	b.n	80076b4 <DMA_CheckFifoParam+0xe8>
        break;
 80076ae:	bf00      	nop
 80076b0:	e000      	b.n	80076b4 <DMA_CheckFifoParam+0xe8>
    break;
 80076b2:	bf00      	nop
    }
  }

  return status;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop

080076c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a38      	ldr	r2, [pc, #224]	; (80077b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d022      	beq.n	8007722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a36      	ldr	r2, [pc, #216]	; (80077bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d01d      	beq.n	8007722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a35      	ldr	r2, [pc, #212]	; (80077c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d018      	beq.n	8007722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a33      	ldr	r2, [pc, #204]	; (80077c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d013      	beq.n	8007722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a32      	ldr	r2, [pc, #200]	; (80077c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d00e      	beq.n	8007722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a30      	ldr	r2, [pc, #192]	; (80077cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d009      	beq.n	8007722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a2f      	ldr	r2, [pc, #188]	; (80077d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d004      	beq.n	8007722 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a2d      	ldr	r2, [pc, #180]	; (80077d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d101      	bne.n	8007726 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007722:	2301      	movs	r3, #1
 8007724:	e000      	b.n	8007728 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007726:	2300      	movs	r3, #0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d01a      	beq.n	8007762 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	b2db      	uxtb	r3, r3
 8007732:	3b08      	subs	r3, #8
 8007734:	4a28      	ldr	r2, [pc, #160]	; (80077d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007736:	fba2 2303 	umull	r2, r3, r2, r3
 800773a:	091b      	lsrs	r3, r3, #4
 800773c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	4b26      	ldr	r3, [pc, #152]	; (80077dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	461a      	mov	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a24      	ldr	r2, [pc, #144]	; (80077e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007750:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f003 031f 	and.w	r3, r3, #31
 8007758:	2201      	movs	r2, #1
 800775a:	409a      	lsls	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007760:	e024      	b.n	80077ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	b2db      	uxtb	r3, r3
 8007768:	3b10      	subs	r3, #16
 800776a:	4a1e      	ldr	r2, [pc, #120]	; (80077e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800776c:	fba2 2303 	umull	r2, r3, r2, r3
 8007770:	091b      	lsrs	r3, r3, #4
 8007772:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	4a1c      	ldr	r2, [pc, #112]	; (80077e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d806      	bhi.n	800778a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	4a1b      	ldr	r2, [pc, #108]	; (80077ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d902      	bls.n	800778a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3308      	adds	r3, #8
 8007788:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	4b18      	ldr	r3, [pc, #96]	; (80077f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800778e:	4413      	add	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	461a      	mov	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a16      	ldr	r2, [pc, #88]	; (80077f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800779c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f003 031f 	and.w	r3, r3, #31
 80077a4:	2201      	movs	r2, #1
 80077a6:	409a      	lsls	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80077ac:	bf00      	nop
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	58025408 	.word	0x58025408
 80077bc:	5802541c 	.word	0x5802541c
 80077c0:	58025430 	.word	0x58025430
 80077c4:	58025444 	.word	0x58025444
 80077c8:	58025458 	.word	0x58025458
 80077cc:	5802546c 	.word	0x5802546c
 80077d0:	58025480 	.word	0x58025480
 80077d4:	58025494 	.word	0x58025494
 80077d8:	cccccccd 	.word	0xcccccccd
 80077dc:	16009600 	.word	0x16009600
 80077e0:	58025880 	.word	0x58025880
 80077e4:	aaaaaaab 	.word	0xaaaaaaab
 80077e8:	400204b8 	.word	0x400204b8
 80077ec:	4002040f 	.word	0x4002040f
 80077f0:	10008200 	.word	0x10008200
 80077f4:	40020880 	.word	0x40020880

080077f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	b2db      	uxtb	r3, r3
 8007806:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d04a      	beq.n	80078a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2b08      	cmp	r3, #8
 8007812:	d847      	bhi.n	80078a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a25      	ldr	r2, [pc, #148]	; (80078b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d022      	beq.n	8007864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a24      	ldr	r2, [pc, #144]	; (80078b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d01d      	beq.n	8007864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a22      	ldr	r2, [pc, #136]	; (80078b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d018      	beq.n	8007864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a21      	ldr	r2, [pc, #132]	; (80078bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d013      	beq.n	8007864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a1f      	ldr	r2, [pc, #124]	; (80078c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d00e      	beq.n	8007864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a1e      	ldr	r2, [pc, #120]	; (80078c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d009      	beq.n	8007864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a1c      	ldr	r2, [pc, #112]	; (80078c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d004      	beq.n	8007864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a1b      	ldr	r2, [pc, #108]	; (80078cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d101      	bne.n	8007868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007864:	2301      	movs	r3, #1
 8007866:	e000      	b.n	800786a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007868:	2300      	movs	r3, #0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00a      	beq.n	8007884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	4b17      	ldr	r3, [pc, #92]	; (80078d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007872:	4413      	add	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	461a      	mov	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a15      	ldr	r2, [pc, #84]	; (80078d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007880:	671a      	str	r2, [r3, #112]	; 0x70
 8007882:	e009      	b.n	8007898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	4b14      	ldr	r3, [pc, #80]	; (80078d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007888:	4413      	add	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	461a      	mov	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a11      	ldr	r2, [pc, #68]	; (80078dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007896:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	3b01      	subs	r3, #1
 800789c:	2201      	movs	r2, #1
 800789e:	409a      	lsls	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80078a4:	bf00      	nop
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	58025408 	.word	0x58025408
 80078b4:	5802541c 	.word	0x5802541c
 80078b8:	58025430 	.word	0x58025430
 80078bc:	58025444 	.word	0x58025444
 80078c0:	58025458 	.word	0x58025458
 80078c4:	5802546c 	.word	0x5802546c
 80078c8:	58025480 	.word	0x58025480
 80078cc:	58025494 	.word	0x58025494
 80078d0:	1600963f 	.word	0x1600963f
 80078d4:	58025940 	.word	0x58025940
 80078d8:	1000823f 	.word	0x1000823f
 80078dc:	40020940 	.word	0x40020940

080078e0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e04f      	b.n	8007992 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d106      	bne.n	800790c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7f9 f862 	bl	80009d0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	4b20      	ldr	r3, [pc, #128]	; (800799c <HAL_DMA2D_Init+0xbc>)
 800791c:	4013      	ands	r3, r2
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	6851      	ldr	r1, [r2, #4]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	69d2      	ldr	r2, [r2, #28]
 8007926:	4311      	orrs	r1, r2
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	6812      	ldr	r2, [r2, #0]
 800792c:	430b      	orrs	r3, r1
 800792e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007936:	4b1a      	ldr	r3, [pc, #104]	; (80079a0 <HAL_DMA2D_Init+0xc0>)
 8007938:	4013      	ands	r3, r2
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	6891      	ldr	r1, [r2, #8]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6992      	ldr	r2, [r2, #24]
 8007942:	4311      	orrs	r1, r2
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	6812      	ldr	r2, [r2, #0]
 8007948:	430b      	orrs	r3, r1
 800794a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007952:	4b14      	ldr	r3, [pc, #80]	; (80079a4 <HAL_DMA2D_Init+0xc4>)
 8007954:	4013      	ands	r3, r2
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	68d1      	ldr	r1, [r2, #12]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	6812      	ldr	r2, [r2, #0]
 800795e:	430b      	orrs	r3, r1
 8007960:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007968:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	051a      	lsls	r2, r3, #20
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	055b      	lsls	r3, r3, #21
 8007978:	431a      	orrs	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3708      	adds	r7, #8
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	fff8ffbf 	.word	0xfff8ffbf
 80079a0:	fffffef8 	.word	0xfffffef8
 80079a4:	ffff0000 	.word	0xffff0000

080079a8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d101      	bne.n	80079c4 <HAL_DMA2D_Start+0x1c>
 80079c0:	2302      	movs	r3, #2
 80079c2:	e018      	b.n	80079f6 <HAL_DMA2D_Start+0x4e>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2202      	movs	r2, #2
 80079d0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	68b9      	ldr	r1, [r7, #8]
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 fab4 	bl	8007f4c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f042 0201 	orr.w	r2, r2, #1
 80079f2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b086      	sub	sp, #24
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0301 	and.w	r3, r3, #1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d056      	beq.n	8007ac8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a1a:	f7fc fc73 	bl	8004304 <HAL_GetTick>
 8007a1e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007a20:	e04b      	b.n	8007aba <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d023      	beq.n	8007a7c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f003 0320 	and.w	r3, r3, #32
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d005      	beq.n	8007a4a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a42:	f043 0202 	orr.w	r2, r3, #2
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d005      	beq.n	8007a60 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a58:	f043 0201 	orr.w	r2, r3, #1
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2221      	movs	r2, #33	; 0x21
 8007a66:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2204      	movs	r2, #4
 8007a6c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e0a5      	b.n	8007bc8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a82:	d01a      	beq.n	8007aba <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a84:	f7fc fc3e 	bl	8004304 <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d302      	bcc.n	8007a9a <HAL_DMA2D_PollForTransfer+0x9c>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10f      	bne.n	8007aba <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a9e:	f043 0220 	orr.w	r2, r3, #32
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2203      	movs	r2, #3
 8007aaa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e086      	b.n	8007bc8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d0ac      	beq.n	8007a22 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	f003 0320 	and.w	r3, r3, #32
 8007ad2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d061      	beq.n	8007bae <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007aea:	f7fc fc0b 	bl	8004304 <HAL_GetTick>
 8007aee:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007af0:	e056      	b.n	8007ba0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d02e      	beq.n	8007b62 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f003 0308 	and.w	r3, r3, #8
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d005      	beq.n	8007b1a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b12:	f043 0204 	orr.w	r2, r3, #4
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d005      	beq.n	8007b30 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b28:	f043 0202 	orr.w	r2, r3, #2
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d005      	beq.n	8007b46 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b3e:	f043 0201 	orr.w	r2, r3, #1
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2229      	movs	r2, #41	; 0x29
 8007b4c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2204      	movs	r2, #4
 8007b52:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e032      	b.n	8007bc8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b68:	d01a      	beq.n	8007ba0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b6a:	f7fc fbcb 	bl	8004304 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d302      	bcc.n	8007b80 <HAL_DMA2D_PollForTransfer+0x182>
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10f      	bne.n	8007ba0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b84:	f043 0220 	orr.w	r2, r3, #32
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2203      	movs	r2, #3
 8007b90:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e013      	b.n	8007bc8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f003 0310 	and.w	r3, r3, #16
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d0a1      	beq.n	8007af2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2212      	movs	r2, #18
 8007bb4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d026      	beq.n	8007c40 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d021      	beq.n	8007c40 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c0a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c10:	f043 0201 	orr.w	r2, r3, #1
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2204      	movs	r2, #4
 8007c24:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d003      	beq.n	8007c40 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f003 0320 	and.w	r3, r3, #32
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d026      	beq.n	8007c98 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d021      	beq.n	8007c98 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c62:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2220      	movs	r2, #32
 8007c6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c70:	f043 0202 	orr.w	r2, r3, #2
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2204      	movs	r2, #4
 8007c7c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d003      	beq.n	8007c98 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f003 0308 	and.w	r3, r3, #8
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d026      	beq.n	8007cf0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d021      	beq.n	8007cf0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2208      	movs	r2, #8
 8007cc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cc8:	f043 0204 	orr.w	r2, r3, #4
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2204      	movs	r2, #4
 8007cd4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f003 0304 	and.w	r3, r3, #4
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d013      	beq.n	8007d22 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00e      	beq.n	8007d22 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d12:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2204      	movs	r2, #4
 8007d1a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f853 	bl	8007dc8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f003 0302 	and.w	r3, r3, #2
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d024      	beq.n	8007d76 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d01f      	beq.n	8007d76 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d44:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f003 0310 	and.w	r3, r3, #16
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d01f      	beq.n	8007dc0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d01a      	beq.n	8007dc0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d98:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2210      	movs	r2, #16
 8007da0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f80e 	bl	8007ddc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007dc0:	bf00      	nop
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d101      	bne.n	8007e14 <HAL_DMA2D_ConfigLayer+0x24>
 8007e10:	2302      	movs	r3, #2
 8007e12:	e092      	b.n	8007f3a <HAL_DMA2D_ConfigLayer+0x14a>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	4613      	mov	r3, r2
 8007e28:	00db      	lsls	r3, r3, #3
 8007e2a:	1a9b      	subs	r3, r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	3328      	adds	r3, #40	; 0x28
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	4413      	add	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	041b      	lsls	r3, r3, #16
 8007e40:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007e48:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007e50:	4313      	orrs	r3, r2
 8007e52:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007e54:	4b3c      	ldr	r3, [pc, #240]	; (8007f48 <HAL_DMA2D_ConfigLayer+0x158>)
 8007e56:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	2b0a      	cmp	r3, #10
 8007e5e:	d003      	beq.n	8007e68 <HAL_DMA2D_ConfigLayer+0x78>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	2b09      	cmp	r3, #9
 8007e66:	d107      	bne.n	8007e78 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]
 8007e76:	e005      	b.n	8007e84 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	061b      	lsls	r3, r3, #24
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d120      	bne.n	8007ecc <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	43db      	mvns	r3, r3
 8007e94:	ea02 0103 	and.w	r1, r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	6812      	ldr	r2, [r2, #0]
 8007eaa:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	2b0a      	cmp	r3, #10
 8007eb2:	d003      	beq.n	8007ebc <HAL_DMA2D_ConfigLayer+0xcc>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2b09      	cmp	r3, #9
 8007eba:	d135      	bne.n	8007f28 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	68da      	ldr	r2, [r3, #12]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007ec8:	629a      	str	r2, [r3, #40]	; 0x28
 8007eca:	e02d      	b.n	8007f28 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	2b0b      	cmp	r3, #11
 8007ed2:	d109      	bne.n	8007ee8 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	049b      	lsls	r3, r3, #18
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8007ee6:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	69da      	ldr	r2, [r3, #28]
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	43db      	mvns	r3, r3
 8007ef2:	ea02 0103 	and.w	r1, r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	430a      	orrs	r2, r1
 8007efe:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	6812      	ldr	r2, [r2, #0]
 8007f08:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	2b0a      	cmp	r3, #10
 8007f10:	d003      	beq.n	8007f1a <HAL_DMA2D_ConfigLayer+0x12a>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	2b09      	cmp	r3, #9
 8007f18:	d106      	bne.n	8007f28 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	68da      	ldr	r2, [r3, #12]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007f26:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	371c      	adds	r7, #28
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	ff33000f 	.word	0xff33000f

08007f4c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b08b      	sub	sp, #44	; 0x2c
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f60:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	041a      	lsls	r2, r3, #16
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f84:	d174      	bne.n	8008070 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007f8c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f94:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007f9c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d108      	bne.n	8007fbe <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007fac:	69ba      	ldr	r2, [r7, #24]
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	627b      	str	r3, [r7, #36]	; 0x24
 8007fbc:	e053      	b.n	8008066 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d106      	bne.n	8007fd4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fd2:	e048      	b.n	8008066 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d111      	bne.n	8008000 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	0cdb      	lsrs	r3, r3, #19
 8007fe0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	0a9b      	lsrs	r3, r3, #10
 8007fe6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	08db      	lsrs	r3, r3, #3
 8007fec:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	015a      	lsls	r2, r3, #5
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	02db      	lsls	r3, r3, #11
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ffe:	e032      	b.n	8008066 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	2b03      	cmp	r3, #3
 8008006:	d117      	bne.n	8008038 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	0fdb      	lsrs	r3, r3, #31
 800800c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	0cdb      	lsrs	r3, r3, #19
 8008012:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	0adb      	lsrs	r3, r3, #11
 8008018:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	08db      	lsrs	r3, r3, #3
 800801e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	029b      	lsls	r3, r3, #10
 8008028:	431a      	orrs	r2, r3
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	03db      	lsls	r3, r3, #15
 800802e:	4313      	orrs	r3, r2
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	4313      	orrs	r3, r2
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
 8008036:	e016      	b.n	8008066 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008038:	6a3b      	ldr	r3, [r7, #32]
 800803a:	0f1b      	lsrs	r3, r3, #28
 800803c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	0d1b      	lsrs	r3, r3, #20
 8008042:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	0b1b      	lsrs	r3, r3, #12
 8008048:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	091b      	lsrs	r3, r3, #4
 800804e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	011a      	lsls	r2, r3, #4
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	021b      	lsls	r3, r3, #8
 8008058:	431a      	orrs	r2, r3
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	031b      	lsls	r3, r3, #12
 800805e:	4313      	orrs	r3, r2
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	4313      	orrs	r3, r2
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800806c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800806e:	e00d      	b.n	800808c <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008078:	d104      	bne.n	8008084 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	615a      	str	r2, [r3, #20]
}
 8008082:	e003      	b.n	800808c <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	60da      	str	r2, [r3, #12]
}
 800808c:	bf00      	nop
 800808e:	372c      	adds	r7, #44	; 0x2c
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	2b80      	cmp	r3, #128	; 0x80
 80080b0:	d105      	bne.n	80080be <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e315      	b.n	80086ea <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d101      	bne.n	80080cc <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80080c8:	2302      	movs	r3, #2
 80080ca:	e30e      	b.n	80086ea <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b01      	cmp	r3, #1
 80080de:	f040 82fd 	bne.w	80086dc <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2202      	movs	r2, #2
 80080e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a82      	ldr	r2, [pc, #520]	; (8008300 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d04a      	beq.n	8008190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a81      	ldr	r2, [pc, #516]	; (8008304 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d045      	beq.n	8008190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a7f      	ldr	r2, [pc, #508]	; (8008308 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d040      	beq.n	8008190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a7e      	ldr	r2, [pc, #504]	; (800830c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d03b      	beq.n	8008190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a7c      	ldr	r2, [pc, #496]	; (8008310 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d036      	beq.n	8008190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a7b      	ldr	r2, [pc, #492]	; (8008314 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d031      	beq.n	8008190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a79      	ldr	r2, [pc, #484]	; (8008318 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d02c      	beq.n	8008190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a78      	ldr	r2, [pc, #480]	; (800831c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d027      	beq.n	8008190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a76      	ldr	r2, [pc, #472]	; (8008320 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d022      	beq.n	8008190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a75      	ldr	r2, [pc, #468]	; (8008324 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d01d      	beq.n	8008190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a73      	ldr	r2, [pc, #460]	; (8008328 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d018      	beq.n	8008190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a72      	ldr	r2, [pc, #456]	; (800832c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d013      	beq.n	8008190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a70      	ldr	r2, [pc, #448]	; (8008330 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d00e      	beq.n	8008190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a6f      	ldr	r2, [pc, #444]	; (8008334 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d009      	beq.n	8008190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a6d      	ldr	r2, [pc, #436]	; (8008338 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d004      	beq.n	8008190 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a6c      	ldr	r2, [pc, #432]	; (800833c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d101      	bne.n	8008194 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8008190:	2301      	movs	r3, #1
 8008192:	e000      	b.n	8008196 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8008194:	2300      	movs	r3, #0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d018      	beq.n	80081cc <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80081a8:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b6:	3308      	adds	r3, #8
 80081b8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081be:	f003 031f 	and.w	r3, r3, #31
 80081c2:	223f      	movs	r2, #63	; 0x3f
 80081c4:	409a      	lsls	r2, r3
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	e018      	b.n	80081fe <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6819      	ldr	r1, [r3, #0]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	f248 0320 	movw	r3, #32800	; 0x8020
 80081da:	430b      	orrs	r3, r1
 80081dc:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ea:	3304      	adds	r3, #4
 80081ec:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081f2:	f003 031f 	and.w	r3, r3, #31
 80081f6:	2201      	movs	r2, #1
 80081f8:	409a      	lsls	r2, r3
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	68b9      	ldr	r1, [r7, #8]
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 fb41 	bl	800888c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a3c      	ldr	r2, [pc, #240]	; (8008300 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d072      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a3a      	ldr	r2, [pc, #232]	; (8008304 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d06d      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a39      	ldr	r2, [pc, #228]	; (8008308 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d068      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a37      	ldr	r2, [pc, #220]	; (800830c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d063      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a36      	ldr	r2, [pc, #216]	; (8008310 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d05e      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a34      	ldr	r2, [pc, #208]	; (8008314 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d059      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a33      	ldr	r2, [pc, #204]	; (8008318 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d054      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a31      	ldr	r2, [pc, #196]	; (800831c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d04f      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a30      	ldr	r2, [pc, #192]	; (8008320 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d04a      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a2e      	ldr	r2, [pc, #184]	; (8008324 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d045      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a2d      	ldr	r2, [pc, #180]	; (8008328 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d040      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a2b      	ldr	r2, [pc, #172]	; (800832c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d03b      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a2a      	ldr	r2, [pc, #168]	; (8008330 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d036      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a28      	ldr	r2, [pc, #160]	; (8008334 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d031      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a27      	ldr	r2, [pc, #156]	; (8008338 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d02c      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a25      	ldr	r2, [pc, #148]	; (800833c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d027      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a24      	ldr	r2, [pc, #144]	; (8008340 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d022      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a22      	ldr	r2, [pc, #136]	; (8008344 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d01d      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a21      	ldr	r2, [pc, #132]	; (8008348 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d018      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a1f      	ldr	r2, [pc, #124]	; (800834c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d013      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a1e      	ldr	r2, [pc, #120]	; (8008350 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d00e      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a1c      	ldr	r2, [pc, #112]	; (8008354 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d009      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a1b      	ldr	r2, [pc, #108]	; (8008358 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d004      	beq.n	80082fa <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a19      	ldr	r2, [pc, #100]	; (800835c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d132      	bne.n	8008360 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80082fa:	2301      	movs	r3, #1
 80082fc:	e031      	b.n	8008362 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80082fe:	bf00      	nop
 8008300:	40020010 	.word	0x40020010
 8008304:	40020028 	.word	0x40020028
 8008308:	40020040 	.word	0x40020040
 800830c:	40020058 	.word	0x40020058
 8008310:	40020070 	.word	0x40020070
 8008314:	40020088 	.word	0x40020088
 8008318:	400200a0 	.word	0x400200a0
 800831c:	400200b8 	.word	0x400200b8
 8008320:	40020410 	.word	0x40020410
 8008324:	40020428 	.word	0x40020428
 8008328:	40020440 	.word	0x40020440
 800832c:	40020458 	.word	0x40020458
 8008330:	40020470 	.word	0x40020470
 8008334:	40020488 	.word	0x40020488
 8008338:	400204a0 	.word	0x400204a0
 800833c:	400204b8 	.word	0x400204b8
 8008340:	58025408 	.word	0x58025408
 8008344:	5802541c 	.word	0x5802541c
 8008348:	58025430 	.word	0x58025430
 800834c:	58025444 	.word	0x58025444
 8008350:	58025458 	.word	0x58025458
 8008354:	5802546c 	.word	0x5802546c
 8008358:	58025480 	.word	0x58025480
 800835c:	58025494 	.word	0x58025494
 8008360:	2300      	movs	r3, #0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00d      	beq.n	8008382 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800836e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008374:	2b00      	cmp	r3, #0
 8008376:	d004      	beq.n	8008382 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008380:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a3b      	ldr	r2, [pc, #236]	; (8008474 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d04a      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a39      	ldr	r2, [pc, #228]	; (8008478 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d045      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a38      	ldr	r2, [pc, #224]	; (800847c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d040      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a36      	ldr	r2, [pc, #216]	; (8008480 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d03b      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a35      	ldr	r2, [pc, #212]	; (8008484 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d036      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a33      	ldr	r2, [pc, #204]	; (8008488 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d031      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a32      	ldr	r2, [pc, #200]	; (800848c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d02c      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a30      	ldr	r2, [pc, #192]	; (8008490 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d027      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a2f      	ldr	r2, [pc, #188]	; (8008494 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d022      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a2d      	ldr	r2, [pc, #180]	; (8008498 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d01d      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a2c      	ldr	r2, [pc, #176]	; (800849c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d018      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a2a      	ldr	r2, [pc, #168]	; (80084a0 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d013      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a29      	ldr	r2, [pc, #164]	; (80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00e      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a27      	ldr	r2, [pc, #156]	; (80084a8 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d009      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a26      	ldr	r2, [pc, #152]	; (80084ac <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d004      	beq.n	8008422 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a24      	ldr	r2, [pc, #144]	; (80084b0 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d101      	bne.n	8008426 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8008422:	2301      	movs	r3, #1
 8008424:	e000      	b.n	8008428 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8008426:	2300      	movs	r3, #0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d043      	beq.n	80084b4 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f023 021e 	bic.w	r2, r3, #30
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f042 0216 	orr.w	r2, r2, #22
 800843e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	695a      	ldr	r2, [r3, #20]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800844e:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008454:	2b00      	cmp	r3, #0
 8008456:	d103      	bne.n	8008460 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800845c:	2b00      	cmp	r3, #0
 800845e:	d043      	beq.n	80084e8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f042 0208 	orr.w	r2, r2, #8
 800846e:	601a      	str	r2, [r3, #0]
 8008470:	e03a      	b.n	80084e8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8008472:	bf00      	nop
 8008474:	40020010 	.word	0x40020010
 8008478:	40020028 	.word	0x40020028
 800847c:	40020040 	.word	0x40020040
 8008480:	40020058 	.word	0x40020058
 8008484:	40020070 	.word	0x40020070
 8008488:	40020088 	.word	0x40020088
 800848c:	400200a0 	.word	0x400200a0
 8008490:	400200b8 	.word	0x400200b8
 8008494:	40020410 	.word	0x40020410
 8008498:	40020428 	.word	0x40020428
 800849c:	40020440 	.word	0x40020440
 80084a0:	40020458 	.word	0x40020458
 80084a4:	40020470 	.word	0x40020470
 80084a8:	40020488 	.word	0x40020488
 80084ac:	400204a0 	.word	0x400204a0
 80084b0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f023 020e 	bic.w	r2, r3, #14
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f042 020a 	orr.w	r2, r2, #10
 80084c6:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d103      	bne.n	80084d8 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d007      	beq.n	80084e8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f042 0204 	orr.w	r2, r2, #4
 80084e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a81      	ldr	r2, [pc, #516]	; (80086f4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d072      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a80      	ldr	r2, [pc, #512]	; (80086f8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d06d      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a7e      	ldr	r2, [pc, #504]	; (80086fc <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d068      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a7d      	ldr	r2, [pc, #500]	; (8008700 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d063      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a7b      	ldr	r2, [pc, #492]	; (8008704 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d05e      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a7a      	ldr	r2, [pc, #488]	; (8008708 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d059      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a78      	ldr	r2, [pc, #480]	; (800870c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d054      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a77      	ldr	r2, [pc, #476]	; (8008710 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d04f      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a75      	ldr	r2, [pc, #468]	; (8008714 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d04a      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a74      	ldr	r2, [pc, #464]	; (8008718 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d045      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a72      	ldr	r2, [pc, #456]	; (800871c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d040      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a71      	ldr	r2, [pc, #452]	; (8008720 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d03b      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a6f      	ldr	r2, [pc, #444]	; (8008724 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d036      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a6e      	ldr	r2, [pc, #440]	; (8008728 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d031      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a6c      	ldr	r2, [pc, #432]	; (800872c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d02c      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a6b      	ldr	r2, [pc, #428]	; (8008730 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d027      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a69      	ldr	r2, [pc, #420]	; (8008734 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d022      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a68      	ldr	r2, [pc, #416]	; (8008738 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d01d      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a66      	ldr	r2, [pc, #408]	; (800873c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d018      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a65      	ldr	r2, [pc, #404]	; (8008740 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d013      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a63      	ldr	r2, [pc, #396]	; (8008744 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d00e      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a62      	ldr	r2, [pc, #392]	; (8008748 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d009      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a60      	ldr	r2, [pc, #384]	; (800874c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d004      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a5f      	ldr	r2, [pc, #380]	; (8008750 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d101      	bne.n	80085dc <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80085d8:	2301      	movs	r3, #1
 80085da:	e000      	b.n	80085de <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80085dc:	2300      	movs	r3, #0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d01a      	beq.n	8008618 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d007      	beq.n	8008600 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008604:	2b00      	cmp	r3, #0
 8008606:	d007      	beq.n	8008618 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008616:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a35      	ldr	r2, [pc, #212]	; (80086f4 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d04a      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a34      	ldr	r2, [pc, #208]	; (80086f8 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d045      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a32      	ldr	r2, [pc, #200]	; (80086fc <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d040      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a31      	ldr	r2, [pc, #196]	; (8008700 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d03b      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a2f      	ldr	r2, [pc, #188]	; (8008704 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d036      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a2e      	ldr	r2, [pc, #184]	; (8008708 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d031      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a2c      	ldr	r2, [pc, #176]	; (800870c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d02c      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a2b      	ldr	r2, [pc, #172]	; (8008710 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d027      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a29      	ldr	r2, [pc, #164]	; (8008714 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d022      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a28      	ldr	r2, [pc, #160]	; (8008718 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d01d      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a26      	ldr	r2, [pc, #152]	; (800871c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d018      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a25      	ldr	r2, [pc, #148]	; (8008720 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d013      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a23      	ldr	r2, [pc, #140]	; (8008724 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d00e      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a22      	ldr	r2, [pc, #136]	; (8008728 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d009      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a20      	ldr	r2, [pc, #128]	; (800872c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d004      	beq.n	80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a1f      	ldr	r2, [pc, #124]	; (8008730 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d108      	bne.n	80086ca <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f042 0201 	orr.w	r2, r2, #1
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	e00e      	b.n	80086e8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f042 0201 	orr.w	r2, r2, #1
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	e005      	b.n	80086e8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80086e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3718      	adds	r7, #24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	40020010 	.word	0x40020010
 80086f8:	40020028 	.word	0x40020028
 80086fc:	40020040 	.word	0x40020040
 8008700:	40020058 	.word	0x40020058
 8008704:	40020070 	.word	0x40020070
 8008708:	40020088 	.word	0x40020088
 800870c:	400200a0 	.word	0x400200a0
 8008710:	400200b8 	.word	0x400200b8
 8008714:	40020410 	.word	0x40020410
 8008718:	40020428 	.word	0x40020428
 800871c:	40020440 	.word	0x40020440
 8008720:	40020458 	.word	0x40020458
 8008724:	40020470 	.word	0x40020470
 8008728:	40020488 	.word	0x40020488
 800872c:	400204a0 	.word	0x400204a0
 8008730:	400204b8 	.word	0x400204b8
 8008734:	58025408 	.word	0x58025408
 8008738:	5802541c 	.word	0x5802541c
 800873c:	58025430 	.word	0x58025430
 8008740:	58025444 	.word	0x58025444
 8008744:	58025458 	.word	0x58025458
 8008748:	5802546c 	.word	0x5802546c
 800874c:	58025480 	.word	0x58025480
 8008750:	58025494 	.word	0x58025494

08008754 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	4613      	mov	r3, r2
 8008760:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a39      	ldr	r2, [pc, #228]	; (800884c <HAL_DMAEx_ChangeMemory+0xf8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d04a      	beq.n	8008802 <HAL_DMAEx_ChangeMemory+0xae>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a37      	ldr	r2, [pc, #220]	; (8008850 <HAL_DMAEx_ChangeMemory+0xfc>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d045      	beq.n	8008802 <HAL_DMAEx_ChangeMemory+0xae>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a36      	ldr	r2, [pc, #216]	; (8008854 <HAL_DMAEx_ChangeMemory+0x100>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d040      	beq.n	8008802 <HAL_DMAEx_ChangeMemory+0xae>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a34      	ldr	r2, [pc, #208]	; (8008858 <HAL_DMAEx_ChangeMemory+0x104>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d03b      	beq.n	8008802 <HAL_DMAEx_ChangeMemory+0xae>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a33      	ldr	r2, [pc, #204]	; (800885c <HAL_DMAEx_ChangeMemory+0x108>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d036      	beq.n	8008802 <HAL_DMAEx_ChangeMemory+0xae>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a31      	ldr	r2, [pc, #196]	; (8008860 <HAL_DMAEx_ChangeMemory+0x10c>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d031      	beq.n	8008802 <HAL_DMAEx_ChangeMemory+0xae>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a30      	ldr	r2, [pc, #192]	; (8008864 <HAL_DMAEx_ChangeMemory+0x110>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d02c      	beq.n	8008802 <HAL_DMAEx_ChangeMemory+0xae>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a2e      	ldr	r2, [pc, #184]	; (8008868 <HAL_DMAEx_ChangeMemory+0x114>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d027      	beq.n	8008802 <HAL_DMAEx_ChangeMemory+0xae>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a2d      	ldr	r2, [pc, #180]	; (800886c <HAL_DMAEx_ChangeMemory+0x118>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d022      	beq.n	8008802 <HAL_DMAEx_ChangeMemory+0xae>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a2b      	ldr	r2, [pc, #172]	; (8008870 <HAL_DMAEx_ChangeMemory+0x11c>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d01d      	beq.n	8008802 <HAL_DMAEx_ChangeMemory+0xae>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a2a      	ldr	r2, [pc, #168]	; (8008874 <HAL_DMAEx_ChangeMemory+0x120>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d018      	beq.n	8008802 <HAL_DMAEx_ChangeMemory+0xae>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a28      	ldr	r2, [pc, #160]	; (8008878 <HAL_DMAEx_ChangeMemory+0x124>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d013      	beq.n	8008802 <HAL_DMAEx_ChangeMemory+0xae>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a27      	ldr	r2, [pc, #156]	; (800887c <HAL_DMAEx_ChangeMemory+0x128>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d00e      	beq.n	8008802 <HAL_DMAEx_ChangeMemory+0xae>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a25      	ldr	r2, [pc, #148]	; (8008880 <HAL_DMAEx_ChangeMemory+0x12c>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d009      	beq.n	8008802 <HAL_DMAEx_ChangeMemory+0xae>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a24      	ldr	r2, [pc, #144]	; (8008884 <HAL_DMAEx_ChangeMemory+0x130>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d004      	beq.n	8008802 <HAL_DMAEx_ChangeMemory+0xae>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a22      	ldr	r2, [pc, #136]	; (8008888 <HAL_DMAEx_ChangeMemory+0x134>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d101      	bne.n	8008806 <HAL_DMAEx_ChangeMemory+0xb2>
 8008802:	2301      	movs	r3, #1
 8008804:	e000      	b.n	8008808 <HAL_DMAEx_ChangeMemory+0xb4>
 8008806:	2300      	movs	r3, #0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00c      	beq.n	8008826 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 800880c:	79fb      	ldrb	r3, [r7, #7]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d104      	bne.n	800881c <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	60da      	str	r2, [r3, #12]
 800881a:	e010      	b.n	800883e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	611a      	str	r2, [r3, #16]
 8008824:	e00b      	b.n	800883e <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d104      	bne.n	8008836 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	60da      	str	r2, [r3, #12]
 8008834:	e003      	b.n	800883e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	40020010 	.word	0x40020010
 8008850:	40020028 	.word	0x40020028
 8008854:	40020040 	.word	0x40020040
 8008858:	40020058 	.word	0x40020058
 800885c:	40020070 	.word	0x40020070
 8008860:	40020088 	.word	0x40020088
 8008864:	400200a0 	.word	0x400200a0
 8008868:	400200b8 	.word	0x400200b8
 800886c:	40020410 	.word	0x40020410
 8008870:	40020428 	.word	0x40020428
 8008874:	40020440 	.word	0x40020440
 8008878:	40020458 	.word	0x40020458
 800887c:	40020470 	.word	0x40020470
 8008880:	40020488 	.word	0x40020488
 8008884:	400204a0 	.word	0x400204a0
 8008888:	400204b8 	.word	0x400204b8

0800888c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
 8008898:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a46      	ldr	r2, [pc, #280]	; (80089b8 <DMA_MultiBufferSetConfig+0x12c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d04a      	beq.n	800893a <DMA_MultiBufferSetConfig+0xae>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a44      	ldr	r2, [pc, #272]	; (80089bc <DMA_MultiBufferSetConfig+0x130>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d045      	beq.n	800893a <DMA_MultiBufferSetConfig+0xae>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a43      	ldr	r2, [pc, #268]	; (80089c0 <DMA_MultiBufferSetConfig+0x134>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d040      	beq.n	800893a <DMA_MultiBufferSetConfig+0xae>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a41      	ldr	r2, [pc, #260]	; (80089c4 <DMA_MultiBufferSetConfig+0x138>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d03b      	beq.n	800893a <DMA_MultiBufferSetConfig+0xae>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a40      	ldr	r2, [pc, #256]	; (80089c8 <DMA_MultiBufferSetConfig+0x13c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d036      	beq.n	800893a <DMA_MultiBufferSetConfig+0xae>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a3e      	ldr	r2, [pc, #248]	; (80089cc <DMA_MultiBufferSetConfig+0x140>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d031      	beq.n	800893a <DMA_MultiBufferSetConfig+0xae>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a3d      	ldr	r2, [pc, #244]	; (80089d0 <DMA_MultiBufferSetConfig+0x144>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d02c      	beq.n	800893a <DMA_MultiBufferSetConfig+0xae>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a3b      	ldr	r2, [pc, #236]	; (80089d4 <DMA_MultiBufferSetConfig+0x148>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d027      	beq.n	800893a <DMA_MultiBufferSetConfig+0xae>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a3a      	ldr	r2, [pc, #232]	; (80089d8 <DMA_MultiBufferSetConfig+0x14c>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d022      	beq.n	800893a <DMA_MultiBufferSetConfig+0xae>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a38      	ldr	r2, [pc, #224]	; (80089dc <DMA_MultiBufferSetConfig+0x150>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d01d      	beq.n	800893a <DMA_MultiBufferSetConfig+0xae>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a37      	ldr	r2, [pc, #220]	; (80089e0 <DMA_MultiBufferSetConfig+0x154>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d018      	beq.n	800893a <DMA_MultiBufferSetConfig+0xae>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a35      	ldr	r2, [pc, #212]	; (80089e4 <DMA_MultiBufferSetConfig+0x158>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d013      	beq.n	800893a <DMA_MultiBufferSetConfig+0xae>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a34      	ldr	r2, [pc, #208]	; (80089e8 <DMA_MultiBufferSetConfig+0x15c>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d00e      	beq.n	800893a <DMA_MultiBufferSetConfig+0xae>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a32      	ldr	r2, [pc, #200]	; (80089ec <DMA_MultiBufferSetConfig+0x160>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d009      	beq.n	800893a <DMA_MultiBufferSetConfig+0xae>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a31      	ldr	r2, [pc, #196]	; (80089f0 <DMA_MultiBufferSetConfig+0x164>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d004      	beq.n	800893a <DMA_MultiBufferSetConfig+0xae>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a2f      	ldr	r2, [pc, #188]	; (80089f4 <DMA_MultiBufferSetConfig+0x168>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d101      	bne.n	800893e <DMA_MultiBufferSetConfig+0xb2>
 800893a:	2301      	movs	r3, #1
 800893c:	e000      	b.n	8008940 <DMA_MultiBufferSetConfig+0xb4>
 800893e:	2300      	movs	r3, #0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d019      	beq.n	8008978 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	2b40      	cmp	r3, #64	; 0x40
 8008952:	d108      	bne.n	8008966 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8008964:	e021      	b.n	80089aa <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	60da      	str	r2, [r3, #12]
}
 8008976:	e018      	b.n	80089aa <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	2b40      	cmp	r3, #64	; 0x40
 8008986:	d108      	bne.n	800899a <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	60da      	str	r2, [r3, #12]
}
 8008998:	e007      	b.n	80089aa <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	60da      	str	r2, [r3, #12]
}
 80089aa:	bf00      	nop
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	40020010 	.word	0x40020010
 80089bc:	40020028 	.word	0x40020028
 80089c0:	40020040 	.word	0x40020040
 80089c4:	40020058 	.word	0x40020058
 80089c8:	40020070 	.word	0x40020070
 80089cc:	40020088 	.word	0x40020088
 80089d0:	400200a0 	.word	0x400200a0
 80089d4:	400200b8 	.word	0x400200b8
 80089d8:	40020410 	.word	0x40020410
 80089dc:	40020428 	.word	0x40020428
 80089e0:	40020440 	.word	0x40020440
 80089e4:	40020458 	.word	0x40020458
 80089e8:	40020470 	.word	0x40020470
 80089ec:	40020488 	.word	0x40020488
 80089f0:	400204a0 	.word	0x400204a0
 80089f4:	400204b8 	.word	0x400204b8

080089f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b089      	sub	sp, #36	; 0x24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008a02:	2300      	movs	r3, #0
 8008a04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008a06:	4b89      	ldr	r3, [pc, #548]	; (8008c2c <HAL_GPIO_Init+0x234>)
 8008a08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008a0a:	e194      	b.n	8008d36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	2101      	movs	r1, #1
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	fa01 f303 	lsl.w	r3, r1, r3
 8008a18:	4013      	ands	r3, r2
 8008a1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f000 8186 	beq.w	8008d30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f003 0303 	and.w	r3, r3, #3
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d005      	beq.n	8008a3c <HAL_GPIO_Init+0x44>
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f003 0303 	and.w	r3, r3, #3
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d130      	bne.n	8008a9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	005b      	lsls	r3, r3, #1
 8008a46:	2203      	movs	r2, #3
 8008a48:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4c:	43db      	mvns	r3, r3
 8008a4e:	69ba      	ldr	r2, [r7, #24]
 8008a50:	4013      	ands	r3, r2
 8008a52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	68da      	ldr	r2, [r3, #12]
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	005b      	lsls	r3, r3, #1
 8008a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	69ba      	ldr	r2, [r7, #24]
 8008a6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a72:	2201      	movs	r2, #1
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7a:	43db      	mvns	r3, r3
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	4013      	ands	r3, r2
 8008a80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	091b      	lsrs	r3, r3, #4
 8008a88:	f003 0201 	and.w	r2, r3, #1
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f003 0303 	and.w	r3, r3, #3
 8008aa6:	2b03      	cmp	r3, #3
 8008aa8:	d017      	beq.n	8008ada <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	005b      	lsls	r3, r3, #1
 8008ab4:	2203      	movs	r2, #3
 8008ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aba:	43db      	mvns	r3, r3
 8008abc:	69ba      	ldr	r2, [r7, #24]
 8008abe:	4013      	ands	r3, r2
 8008ac0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	689a      	ldr	r2, [r3, #8]
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	fa02 f303 	lsl.w	r3, r2, r3
 8008ace:	69ba      	ldr	r2, [r7, #24]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	69ba      	ldr	r2, [r7, #24]
 8008ad8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	f003 0303 	and.w	r3, r3, #3
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d123      	bne.n	8008b2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	08da      	lsrs	r2, r3, #3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	3208      	adds	r2, #8
 8008aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	f003 0307 	and.w	r3, r3, #7
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	220f      	movs	r2, #15
 8008afe:	fa02 f303 	lsl.w	r3, r2, r3
 8008b02:	43db      	mvns	r3, r3
 8008b04:	69ba      	ldr	r2, [r7, #24]
 8008b06:	4013      	ands	r3, r2
 8008b08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	691a      	ldr	r2, [r3, #16]
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	f003 0307 	and.w	r3, r3, #7
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	fa02 f303 	lsl.w	r3, r2, r3
 8008b1a:	69ba      	ldr	r2, [r7, #24]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	08da      	lsrs	r2, r3, #3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	3208      	adds	r2, #8
 8008b28:	69b9      	ldr	r1, [r7, #24]
 8008b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	005b      	lsls	r3, r3, #1
 8008b38:	2203      	movs	r2, #3
 8008b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3e:	43db      	mvns	r3, r3
 8008b40:	69ba      	ldr	r2, [r7, #24]
 8008b42:	4013      	ands	r3, r2
 8008b44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f003 0203 	and.w	r2, r3, #3
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	005b      	lsls	r3, r3, #1
 8008b52:	fa02 f303 	lsl.w	r3, r2, r3
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	69ba      	ldr	r2, [r7, #24]
 8008b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 80e0 	beq.w	8008d30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b70:	4b2f      	ldr	r3, [pc, #188]	; (8008c30 <HAL_GPIO_Init+0x238>)
 8008b72:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008b76:	4a2e      	ldr	r2, [pc, #184]	; (8008c30 <HAL_GPIO_Init+0x238>)
 8008b78:	f043 0302 	orr.w	r3, r3, #2
 8008b7c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8008b80:	4b2b      	ldr	r3, [pc, #172]	; (8008c30 <HAL_GPIO_Init+0x238>)
 8008b82:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008b86:	f003 0302 	and.w	r3, r3, #2
 8008b8a:	60fb      	str	r3, [r7, #12]
 8008b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b8e:	4a29      	ldr	r2, [pc, #164]	; (8008c34 <HAL_GPIO_Init+0x23c>)
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	089b      	lsrs	r3, r3, #2
 8008b94:	3302      	adds	r3, #2
 8008b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	f003 0303 	and.w	r3, r3, #3
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	220f      	movs	r2, #15
 8008ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8008baa:	43db      	mvns	r3, r3
 8008bac:	69ba      	ldr	r2, [r7, #24]
 8008bae:	4013      	ands	r3, r2
 8008bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a20      	ldr	r2, [pc, #128]	; (8008c38 <HAL_GPIO_Init+0x240>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d052      	beq.n	8008c60 <HAL_GPIO_Init+0x268>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a1f      	ldr	r2, [pc, #124]	; (8008c3c <HAL_GPIO_Init+0x244>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d031      	beq.n	8008c26 <HAL_GPIO_Init+0x22e>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a1e      	ldr	r2, [pc, #120]	; (8008c40 <HAL_GPIO_Init+0x248>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d02b      	beq.n	8008c22 <HAL_GPIO_Init+0x22a>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a1d      	ldr	r2, [pc, #116]	; (8008c44 <HAL_GPIO_Init+0x24c>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d025      	beq.n	8008c1e <HAL_GPIO_Init+0x226>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a1c      	ldr	r2, [pc, #112]	; (8008c48 <HAL_GPIO_Init+0x250>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d01f      	beq.n	8008c1a <HAL_GPIO_Init+0x222>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a1b      	ldr	r2, [pc, #108]	; (8008c4c <HAL_GPIO_Init+0x254>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d019      	beq.n	8008c16 <HAL_GPIO_Init+0x21e>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a1a      	ldr	r2, [pc, #104]	; (8008c50 <HAL_GPIO_Init+0x258>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d013      	beq.n	8008c12 <HAL_GPIO_Init+0x21a>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a19      	ldr	r2, [pc, #100]	; (8008c54 <HAL_GPIO_Init+0x25c>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d00d      	beq.n	8008c0e <HAL_GPIO_Init+0x216>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a18      	ldr	r2, [pc, #96]	; (8008c58 <HAL_GPIO_Init+0x260>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d007      	beq.n	8008c0a <HAL_GPIO_Init+0x212>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a17      	ldr	r2, [pc, #92]	; (8008c5c <HAL_GPIO_Init+0x264>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d101      	bne.n	8008c06 <HAL_GPIO_Init+0x20e>
 8008c02:	2309      	movs	r3, #9
 8008c04:	e02d      	b.n	8008c62 <HAL_GPIO_Init+0x26a>
 8008c06:	230a      	movs	r3, #10
 8008c08:	e02b      	b.n	8008c62 <HAL_GPIO_Init+0x26a>
 8008c0a:	2308      	movs	r3, #8
 8008c0c:	e029      	b.n	8008c62 <HAL_GPIO_Init+0x26a>
 8008c0e:	2307      	movs	r3, #7
 8008c10:	e027      	b.n	8008c62 <HAL_GPIO_Init+0x26a>
 8008c12:	2306      	movs	r3, #6
 8008c14:	e025      	b.n	8008c62 <HAL_GPIO_Init+0x26a>
 8008c16:	2305      	movs	r3, #5
 8008c18:	e023      	b.n	8008c62 <HAL_GPIO_Init+0x26a>
 8008c1a:	2304      	movs	r3, #4
 8008c1c:	e021      	b.n	8008c62 <HAL_GPIO_Init+0x26a>
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e01f      	b.n	8008c62 <HAL_GPIO_Init+0x26a>
 8008c22:	2302      	movs	r3, #2
 8008c24:	e01d      	b.n	8008c62 <HAL_GPIO_Init+0x26a>
 8008c26:	2301      	movs	r3, #1
 8008c28:	e01b      	b.n	8008c62 <HAL_GPIO_Init+0x26a>
 8008c2a:	bf00      	nop
 8008c2c:	58000080 	.word	0x58000080
 8008c30:	58024400 	.word	0x58024400
 8008c34:	58000400 	.word	0x58000400
 8008c38:	58020000 	.word	0x58020000
 8008c3c:	58020400 	.word	0x58020400
 8008c40:	58020800 	.word	0x58020800
 8008c44:	58020c00 	.word	0x58020c00
 8008c48:	58021000 	.word	0x58021000
 8008c4c:	58021400 	.word	0x58021400
 8008c50:	58021800 	.word	0x58021800
 8008c54:	58021c00 	.word	0x58021c00
 8008c58:	58022000 	.word	0x58022000
 8008c5c:	58022400 	.word	0x58022400
 8008c60:	2300      	movs	r3, #0
 8008c62:	69fa      	ldr	r2, [r7, #28]
 8008c64:	f002 0203 	and.w	r2, r2, #3
 8008c68:	0092      	lsls	r2, r2, #2
 8008c6a:	4093      	lsls	r3, r2
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c72:	4938      	ldr	r1, [pc, #224]	; (8008d54 <HAL_GPIO_Init+0x35c>)
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	089b      	lsrs	r3, r3, #2
 8008c78:	3302      	adds	r3, #2
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	43db      	mvns	r3, r3
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	4013      	ands	r3, r2
 8008c90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d003      	beq.n	8008ca6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008c9e:	69ba      	ldr	r2, [r7, #24]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	43db      	mvns	r3, r3
 8008cba:	69ba      	ldr	r2, [r7, #24]
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	43db      	mvns	r3, r3
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	4013      	ands	r3, r2
 8008cea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d003      	beq.n	8008d00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	69ba      	ldr	r2, [r7, #24]
 8008d04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	43db      	mvns	r3, r3
 8008d10:	69ba      	ldr	r2, [r7, #24]
 8008d12:	4013      	ands	r3, r2
 8008d14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008d22:	69ba      	ldr	r2, [r7, #24]
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	69ba      	ldr	r2, [r7, #24]
 8008d2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	3301      	adds	r3, #1
 8008d34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f47f ae63 	bne.w	8008a0c <HAL_GPIO_Init+0x14>
  }
}
 8008d46:	bf00      	nop
 8008d48:	bf00      	nop
 8008d4a:	3724      	adds	r7, #36	; 0x24
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr
 8008d54:	58000400 	.word	0x58000400

08008d58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008d62:	2300      	movs	r3, #0
 8008d64:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008d66:	4b75      	ldr	r3, [pc, #468]	; (8008f3c <HAL_GPIO_DeInit+0x1e4>)
 8008d68:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008d6a:	e0d9      	b.n	8008f20 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	fa02 f303 	lsl.w	r3, r2, r3
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	4013      	ands	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 80cc 	beq.w	8008f1a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008d82:	4a6f      	ldr	r2, [pc, #444]	; (8008f40 <HAL_GPIO_DeInit+0x1e8>)
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	089b      	lsrs	r3, r3, #2
 8008d88:	3302      	adds	r3, #2
 8008d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d8e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	f003 0303 	and.w	r3, r3, #3
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	220f      	movs	r2, #15
 8008d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	4013      	ands	r3, r2
 8008da2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a67      	ldr	r2, [pc, #412]	; (8008f44 <HAL_GPIO_DeInit+0x1ec>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d037      	beq.n	8008e1c <HAL_GPIO_DeInit+0xc4>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a66      	ldr	r2, [pc, #408]	; (8008f48 <HAL_GPIO_DeInit+0x1f0>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d031      	beq.n	8008e18 <HAL_GPIO_DeInit+0xc0>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a65      	ldr	r2, [pc, #404]	; (8008f4c <HAL_GPIO_DeInit+0x1f4>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d02b      	beq.n	8008e14 <HAL_GPIO_DeInit+0xbc>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a64      	ldr	r2, [pc, #400]	; (8008f50 <HAL_GPIO_DeInit+0x1f8>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d025      	beq.n	8008e10 <HAL_GPIO_DeInit+0xb8>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a63      	ldr	r2, [pc, #396]	; (8008f54 <HAL_GPIO_DeInit+0x1fc>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d01f      	beq.n	8008e0c <HAL_GPIO_DeInit+0xb4>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a62      	ldr	r2, [pc, #392]	; (8008f58 <HAL_GPIO_DeInit+0x200>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d019      	beq.n	8008e08 <HAL_GPIO_DeInit+0xb0>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a61      	ldr	r2, [pc, #388]	; (8008f5c <HAL_GPIO_DeInit+0x204>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d013      	beq.n	8008e04 <HAL_GPIO_DeInit+0xac>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a60      	ldr	r2, [pc, #384]	; (8008f60 <HAL_GPIO_DeInit+0x208>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d00d      	beq.n	8008e00 <HAL_GPIO_DeInit+0xa8>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a5f      	ldr	r2, [pc, #380]	; (8008f64 <HAL_GPIO_DeInit+0x20c>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d007      	beq.n	8008dfc <HAL_GPIO_DeInit+0xa4>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a5e      	ldr	r2, [pc, #376]	; (8008f68 <HAL_GPIO_DeInit+0x210>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d101      	bne.n	8008df8 <HAL_GPIO_DeInit+0xa0>
 8008df4:	2309      	movs	r3, #9
 8008df6:	e012      	b.n	8008e1e <HAL_GPIO_DeInit+0xc6>
 8008df8:	230a      	movs	r3, #10
 8008dfa:	e010      	b.n	8008e1e <HAL_GPIO_DeInit+0xc6>
 8008dfc:	2308      	movs	r3, #8
 8008dfe:	e00e      	b.n	8008e1e <HAL_GPIO_DeInit+0xc6>
 8008e00:	2307      	movs	r3, #7
 8008e02:	e00c      	b.n	8008e1e <HAL_GPIO_DeInit+0xc6>
 8008e04:	2306      	movs	r3, #6
 8008e06:	e00a      	b.n	8008e1e <HAL_GPIO_DeInit+0xc6>
 8008e08:	2305      	movs	r3, #5
 8008e0a:	e008      	b.n	8008e1e <HAL_GPIO_DeInit+0xc6>
 8008e0c:	2304      	movs	r3, #4
 8008e0e:	e006      	b.n	8008e1e <HAL_GPIO_DeInit+0xc6>
 8008e10:	2303      	movs	r3, #3
 8008e12:	e004      	b.n	8008e1e <HAL_GPIO_DeInit+0xc6>
 8008e14:	2302      	movs	r3, #2
 8008e16:	e002      	b.n	8008e1e <HAL_GPIO_DeInit+0xc6>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e000      	b.n	8008e1e <HAL_GPIO_DeInit+0xc6>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	f002 0203 	and.w	r2, r2, #3
 8008e24:	0092      	lsls	r2, r2, #2
 8008e26:	4093      	lsls	r3, r2
 8008e28:	68ba      	ldr	r2, [r7, #8]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d136      	bne.n	8008e9c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	43db      	mvns	r3, r3
 8008e36:	401a      	ands	r2, r3
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	43db      	mvns	r3, r3
 8008e44:	401a      	ands	r2, r3
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e4e:	685a      	ldr	r2, [r3, #4]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	43db      	mvns	r3, r3
 8008e54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e58:	4013      	ands	r3, r2
 8008e5a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	43db      	mvns	r3, r3
 8008e66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	f003 0303 	and.w	r3, r3, #3
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	220f      	movs	r2, #15
 8008e78:	fa02 f303 	lsl.w	r3, r2, r3
 8008e7c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008e7e:	4a30      	ldr	r2, [pc, #192]	; (8008f40 <HAL_GPIO_DeInit+0x1e8>)
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	089b      	lsrs	r3, r3, #2
 8008e84:	3302      	adds	r3, #2
 8008e86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	43da      	mvns	r2, r3
 8008e8e:	482c      	ldr	r0, [pc, #176]	; (8008f40 <HAL_GPIO_DeInit+0x1e8>)
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	089b      	lsrs	r3, r3, #2
 8008e94:	400a      	ands	r2, r1
 8008e96:	3302      	adds	r3, #2
 8008e98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	2103      	movs	r1, #3
 8008ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	08da      	lsrs	r2, r3, #3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	3208      	adds	r2, #8
 8008eb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	f003 0307 	and.w	r3, r3, #7
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	220f      	movs	r2, #15
 8008ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eca:	43db      	mvns	r3, r3
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	08d2      	lsrs	r2, r2, #3
 8008ed0:	4019      	ands	r1, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	3208      	adds	r2, #8
 8008ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68da      	ldr	r2, [r3, #12]
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	005b      	lsls	r3, r3, #1
 8008ee2:	2103      	movs	r1, #3
 8008ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee8:	43db      	mvns	r3, r3
 8008eea:	401a      	ands	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685a      	ldr	r2, [r3, #4]
 8008ef4:	2101      	movs	r1, #1
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8008efc:	43db      	mvns	r3, r3
 8008efe:	401a      	ands	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	689a      	ldr	r2, [r3, #8]
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	2103      	movs	r1, #3
 8008f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f12:	43db      	mvns	r3, r3
 8008f14:	401a      	ands	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	fa22 f303 	lsr.w	r3, r2, r3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f47f af1f 	bne.w	8008d6c <HAL_GPIO_DeInit+0x14>
  }
}
 8008f2e:	bf00      	nop
 8008f30:	bf00      	nop
 8008f32:	371c      	adds	r7, #28
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	58000080 	.word	0x58000080
 8008f40:	58000400 	.word	0x58000400
 8008f44:	58020000 	.word	0x58020000
 8008f48:	58020400 	.word	0x58020400
 8008f4c:	58020800 	.word	0x58020800
 8008f50:	58020c00 	.word	0x58020c00
 8008f54:	58021000 	.word	0x58021000
 8008f58:	58021400 	.word	0x58021400
 8008f5c:	58021800 	.word	0x58021800
 8008f60:	58021c00 	.word	0x58021c00
 8008f64:	58022000 	.word	0x58022000
 8008f68:	58022400 	.word	0x58022400

08008f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	460b      	mov	r3, r1
 8008f76:	807b      	strh	r3, [r7, #2]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f7c:	787b      	ldrb	r3, [r7, #1]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f82:	887a      	ldrh	r2, [r7, #2]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008f88:	e003      	b.n	8008f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008f8a:	887b      	ldrh	r3, [r7, #2]
 8008f8c:	041a      	lsls	r2, r3, #16
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	619a      	str	r2, [r3, #24]
}
 8008f92:	bf00      	nop
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b085      	sub	sp, #20
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008fb0:	887a      	ldrh	r2, [r7, #2]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	041a      	lsls	r2, r3, #16
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	43d9      	mvns	r1, r3
 8008fbc:	887b      	ldrh	r3, [r7, #2]
 8008fbe:	400b      	ands	r3, r1
 8008fc0:	431a      	orrs	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	619a      	str	r2, [r3, #24]
}
 8008fc6:	bf00      	nop
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
	...

08008fd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d101      	bne.n	8008fe6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e07f      	b.n	80090e6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d106      	bne.n	8009000 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f8a9 	bl	8009152 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2224      	movs	r2, #36	; 0x24
 8009004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f022 0201 	bic.w	r2, r2, #1
 8009016:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009024:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	689a      	ldr	r2, [r3, #8]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009034:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d107      	bne.n	800904e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	689a      	ldr	r2, [r3, #8]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800904a:	609a      	str	r2, [r3, #8]
 800904c:	e006      	b.n	800905c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	689a      	ldr	r2, [r3, #8]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800905a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	2b02      	cmp	r3, #2
 8009062:	d104      	bne.n	800906e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800906c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6859      	ldr	r1, [r3, #4]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	4b1d      	ldr	r3, [pc, #116]	; (80090f0 <HAL_I2C_Init+0x11c>)
 800907a:	430b      	orrs	r3, r1
 800907c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68da      	ldr	r2, [r3, #12]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800908c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	691a      	ldr	r2, [r3, #16]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	430a      	orrs	r2, r1
 80090a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	69d9      	ldr	r1, [r3, #28]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a1a      	ldr	r2, [r3, #32]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	430a      	orrs	r2, r1
 80090b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f042 0201 	orr.w	r2, r2, #1
 80090c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2220      	movs	r2, #32
 80090d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	02008000 	.word	0x02008000

080090f4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e021      	b.n	800914a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2224      	movs	r2, #36	; 0x24
 800910a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f022 0201 	bic.w	r2, r2, #1
 800911c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f821 	bl	8009166 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009152:	b480      	push	{r7}
 8009154:	b083      	sub	sp, #12
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800915a:	bf00      	nop
 800915c:	370c      	adds	r7, #12
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr

08009166 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009166:	b480      	push	{r7}
 8009168:	b083      	sub	sp, #12
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800916e:	bf00      	nop
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
	...

0800917c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b088      	sub	sp, #32
 8009180:	af02      	add	r7, sp, #8
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	4608      	mov	r0, r1
 8009186:	4611      	mov	r1, r2
 8009188:	461a      	mov	r2, r3
 800918a:	4603      	mov	r3, r0
 800918c:	817b      	strh	r3, [r7, #10]
 800918e:	460b      	mov	r3, r1
 8009190:	813b      	strh	r3, [r7, #8]
 8009192:	4613      	mov	r3, r2
 8009194:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800919c:	b2db      	uxtb	r3, r3
 800919e:	2b20      	cmp	r3, #32
 80091a0:	f040 80f9 	bne.w	8009396 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80091a4:	6a3b      	ldr	r3, [r7, #32]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d002      	beq.n	80091b0 <HAL_I2C_Mem_Write+0x34>
 80091aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d105      	bne.n	80091bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	e0ed      	b.n	8009398 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d101      	bne.n	80091ca <HAL_I2C_Mem_Write+0x4e>
 80091c6:	2302      	movs	r3, #2
 80091c8:	e0e6      	b.n	8009398 <HAL_I2C_Mem_Write+0x21c>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80091d2:	f7fb f897 	bl	8004304 <HAL_GetTick>
 80091d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	2319      	movs	r3, #25
 80091de:	2201      	movs	r2, #1
 80091e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f000 fadd 	bl	80097a4 <I2C_WaitOnFlagUntilTimeout>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e0d1      	b.n	8009398 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2221      	movs	r2, #33	; 0x21
 80091f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2240      	movs	r2, #64	; 0x40
 8009200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6a3a      	ldr	r2, [r7, #32]
 800920e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009214:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800921c:	88f8      	ldrh	r0, [r7, #6]
 800921e:	893a      	ldrh	r2, [r7, #8]
 8009220:	8979      	ldrh	r1, [r7, #10]
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	9301      	str	r3, [sp, #4]
 8009226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	4603      	mov	r3, r0
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f9ed 	bl	800960c <I2C_RequestMemoryWrite>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d005      	beq.n	8009244 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e0a9      	b.n	8009398 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009248:	b29b      	uxth	r3, r3
 800924a:	2bff      	cmp	r3, #255	; 0xff
 800924c:	d90e      	bls.n	800926c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	22ff      	movs	r2, #255	; 0xff
 8009252:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009258:	b2da      	uxtb	r2, r3
 800925a:	8979      	ldrh	r1, [r7, #10]
 800925c:	2300      	movs	r3, #0
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f000 fc57 	bl	8009b18 <I2C_TransferConfig>
 800926a:	e00f      	b.n	800928c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009270:	b29a      	uxth	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800927a:	b2da      	uxtb	r2, r3
 800927c:	8979      	ldrh	r1, [r7, #10]
 800927e:	2300      	movs	r3, #0
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f000 fc46 	bl	8009b18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800928c:	697a      	ldr	r2, [r7, #20]
 800928e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f000 fad6 	bl	8009842 <I2C_WaitOnTXISFlagUntilTimeout>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d001      	beq.n	80092a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e07b      	b.n	8009398 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a4:	781a      	ldrb	r2, [r3, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b0:	1c5a      	adds	r2, r3, #1
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	3b01      	subs	r3, #1
 80092be:	b29a      	uxth	r2, r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092c8:	3b01      	subs	r3, #1
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d034      	beq.n	8009344 <HAL_I2C_Mem_Write+0x1c8>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d130      	bne.n	8009344 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e8:	2200      	movs	r2, #0
 80092ea:	2180      	movs	r1, #128	; 0x80
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 fa59 	bl	80097a4 <I2C_WaitOnFlagUntilTimeout>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e04d      	b.n	8009398 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009300:	b29b      	uxth	r3, r3
 8009302:	2bff      	cmp	r3, #255	; 0xff
 8009304:	d90e      	bls.n	8009324 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	22ff      	movs	r2, #255	; 0xff
 800930a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009310:	b2da      	uxtb	r2, r3
 8009312:	8979      	ldrh	r1, [r7, #10]
 8009314:	2300      	movs	r3, #0
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f000 fbfb 	bl	8009b18 <I2C_TransferConfig>
 8009322:	e00f      	b.n	8009344 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009328:	b29a      	uxth	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009332:	b2da      	uxtb	r2, r3
 8009334:	8979      	ldrh	r1, [r7, #10]
 8009336:	2300      	movs	r3, #0
 8009338:	9300      	str	r3, [sp, #0]
 800933a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f000 fbea 	bl	8009b18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009348:	b29b      	uxth	r3, r3
 800934a:	2b00      	cmp	r3, #0
 800934c:	d19e      	bne.n	800928c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 fabc 	bl	80098d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e01a      	b.n	8009398 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2220      	movs	r2, #32
 8009368:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6859      	ldr	r1, [r3, #4]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	4b0a      	ldr	r3, [pc, #40]	; (80093a0 <HAL_I2C_Mem_Write+0x224>)
 8009376:	400b      	ands	r3, r1
 8009378:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2220      	movs	r2, #32
 800937e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	e000      	b.n	8009398 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009396:	2302      	movs	r3, #2
  }
}
 8009398:	4618      	mov	r0, r3
 800939a:	3718      	adds	r7, #24
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	fe00e800 	.word	0xfe00e800

080093a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b088      	sub	sp, #32
 80093a8:	af02      	add	r7, sp, #8
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	4608      	mov	r0, r1
 80093ae:	4611      	mov	r1, r2
 80093b0:	461a      	mov	r2, r3
 80093b2:	4603      	mov	r3, r0
 80093b4:	817b      	strh	r3, [r7, #10]
 80093b6:	460b      	mov	r3, r1
 80093b8:	813b      	strh	r3, [r7, #8]
 80093ba:	4613      	mov	r3, r2
 80093bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b20      	cmp	r3, #32
 80093c8:	f040 80fd 	bne.w	80095c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d002      	beq.n	80093d8 <HAL_I2C_Mem_Read+0x34>
 80093d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d105      	bne.n	80093e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e0f1      	b.n	80095c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d101      	bne.n	80093f2 <HAL_I2C_Mem_Read+0x4e>
 80093ee:	2302      	movs	r3, #2
 80093f0:	e0ea      	b.n	80095c8 <HAL_I2C_Mem_Read+0x224>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80093fa:	f7fa ff83 	bl	8004304 <HAL_GetTick>
 80093fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	9300      	str	r3, [sp, #0]
 8009404:	2319      	movs	r3, #25
 8009406:	2201      	movs	r2, #1
 8009408:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f000 f9c9 	bl	80097a4 <I2C_WaitOnFlagUntilTimeout>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	e0d5      	b.n	80095c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2222      	movs	r2, #34	; 0x22
 8009420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2240      	movs	r2, #64	; 0x40
 8009428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6a3a      	ldr	r2, [r7, #32]
 8009436:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800943c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2200      	movs	r2, #0
 8009442:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009444:	88f8      	ldrh	r0, [r7, #6]
 8009446:	893a      	ldrh	r2, [r7, #8]
 8009448:	8979      	ldrh	r1, [r7, #10]
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	9301      	str	r3, [sp, #4]
 800944e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	4603      	mov	r3, r0
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f000 f92d 	bl	80096b4 <I2C_RequestMemoryRead>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d005      	beq.n	800946c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e0ad      	b.n	80095c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009470:	b29b      	uxth	r3, r3
 8009472:	2bff      	cmp	r3, #255	; 0xff
 8009474:	d90e      	bls.n	8009494 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	22ff      	movs	r2, #255	; 0xff
 800947a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009480:	b2da      	uxtb	r2, r3
 8009482:	8979      	ldrh	r1, [r7, #10]
 8009484:	4b52      	ldr	r3, [pc, #328]	; (80095d0 <HAL_I2C_Mem_Read+0x22c>)
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 fb43 	bl	8009b18 <I2C_TransferConfig>
 8009492:	e00f      	b.n	80094b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009498:	b29a      	uxth	r2, r3
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094a2:	b2da      	uxtb	r2, r3
 80094a4:	8979      	ldrh	r1, [r7, #10]
 80094a6:	4b4a      	ldr	r3, [pc, #296]	; (80095d0 <HAL_I2C_Mem_Read+0x22c>)
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f000 fb32 	bl	8009b18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ba:	2200      	movs	r2, #0
 80094bc:	2104      	movs	r1, #4
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f000 f970 	bl	80097a4 <I2C_WaitOnFlagUntilTimeout>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d001      	beq.n	80094ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e07c      	b.n	80095c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d8:	b2d2      	uxtb	r2, r2
 80094da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e0:	1c5a      	adds	r2, r3, #1
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ea:	3b01      	subs	r3, #1
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	3b01      	subs	r3, #1
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009504:	b29b      	uxth	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d034      	beq.n	8009574 <HAL_I2C_Mem_Read+0x1d0>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800950e:	2b00      	cmp	r3, #0
 8009510:	d130      	bne.n	8009574 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009518:	2200      	movs	r2, #0
 800951a:	2180      	movs	r1, #128	; 0x80
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f000 f941 	bl	80097a4 <I2C_WaitOnFlagUntilTimeout>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e04d      	b.n	80095c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009530:	b29b      	uxth	r3, r3
 8009532:	2bff      	cmp	r3, #255	; 0xff
 8009534:	d90e      	bls.n	8009554 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	22ff      	movs	r2, #255	; 0xff
 800953a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009540:	b2da      	uxtb	r2, r3
 8009542:	8979      	ldrh	r1, [r7, #10]
 8009544:	2300      	movs	r3, #0
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 fae3 	bl	8009b18 <I2C_TransferConfig>
 8009552:	e00f      	b.n	8009574 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009558:	b29a      	uxth	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009562:	b2da      	uxtb	r2, r3
 8009564:	8979      	ldrh	r1, [r7, #10]
 8009566:	2300      	movs	r3, #0
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f000 fad2 	bl	8009b18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009578:	b29b      	uxth	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d19a      	bne.n	80094b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f000 f9a4 	bl	80098d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e01a      	b.n	80095c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2220      	movs	r2, #32
 8009598:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6859      	ldr	r1, [r3, #4]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	4b0b      	ldr	r3, [pc, #44]	; (80095d4 <HAL_I2C_Mem_Read+0x230>)
 80095a6:	400b      	ands	r3, r1
 80095a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2220      	movs	r2, #32
 80095ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80095c2:	2300      	movs	r3, #0
 80095c4:	e000      	b.n	80095c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80095c6:	2302      	movs	r3, #2
  }
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3718      	adds	r7, #24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	80002400 	.word	0x80002400
 80095d4:	fe00e800 	.word	0xfe00e800

080095d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095e6:	b2db      	uxtb	r3, r3
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8009600:	4618      	mov	r0, r3
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af02      	add	r7, sp, #8
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	4608      	mov	r0, r1
 8009616:	4611      	mov	r1, r2
 8009618:	461a      	mov	r2, r3
 800961a:	4603      	mov	r3, r0
 800961c:	817b      	strh	r3, [r7, #10]
 800961e:	460b      	mov	r3, r1
 8009620:	813b      	strh	r3, [r7, #8]
 8009622:	4613      	mov	r3, r2
 8009624:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009626:	88fb      	ldrh	r3, [r7, #6]
 8009628:	b2da      	uxtb	r2, r3
 800962a:	8979      	ldrh	r1, [r7, #10]
 800962c:	4b20      	ldr	r3, [pc, #128]	; (80096b0 <I2C_RequestMemoryWrite+0xa4>)
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f000 fa6f 	bl	8009b18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800963a:	69fa      	ldr	r2, [r7, #28]
 800963c:	69b9      	ldr	r1, [r7, #24]
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f000 f8ff 	bl	8009842 <I2C_WaitOnTXISFlagUntilTimeout>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	e02c      	b.n	80096a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800964e:	88fb      	ldrh	r3, [r7, #6]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d105      	bne.n	8009660 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009654:	893b      	ldrh	r3, [r7, #8]
 8009656:	b2da      	uxtb	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	629a      	str	r2, [r3, #40]	; 0x28
 800965e:	e015      	b.n	800968c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009660:	893b      	ldrh	r3, [r7, #8]
 8009662:	0a1b      	lsrs	r3, r3, #8
 8009664:	b29b      	uxth	r3, r3
 8009666:	b2da      	uxtb	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800966e:	69fa      	ldr	r2, [r7, #28]
 8009670:	69b9      	ldr	r1, [r7, #24]
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f000 f8e5 	bl	8009842 <I2C_WaitOnTXISFlagUntilTimeout>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d001      	beq.n	8009682 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e012      	b.n	80096a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009682:	893b      	ldrh	r3, [r7, #8]
 8009684:	b2da      	uxtb	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	2200      	movs	r2, #0
 8009694:	2180      	movs	r1, #128	; 0x80
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 f884 	bl	80097a4 <I2C_WaitOnFlagUntilTimeout>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e000      	b.n	80096a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	80002000 	.word	0x80002000

080096b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b086      	sub	sp, #24
 80096b8:	af02      	add	r7, sp, #8
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	4608      	mov	r0, r1
 80096be:	4611      	mov	r1, r2
 80096c0:	461a      	mov	r2, r3
 80096c2:	4603      	mov	r3, r0
 80096c4:	817b      	strh	r3, [r7, #10]
 80096c6:	460b      	mov	r3, r1
 80096c8:	813b      	strh	r3, [r7, #8]
 80096ca:	4613      	mov	r3, r2
 80096cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80096ce:	88fb      	ldrh	r3, [r7, #6]
 80096d0:	b2da      	uxtb	r2, r3
 80096d2:	8979      	ldrh	r1, [r7, #10]
 80096d4:	4b20      	ldr	r3, [pc, #128]	; (8009758 <I2C_RequestMemoryRead+0xa4>)
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	2300      	movs	r3, #0
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f000 fa1c 	bl	8009b18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096e0:	69fa      	ldr	r2, [r7, #28]
 80096e2:	69b9      	ldr	r1, [r7, #24]
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f000 f8ac 	bl	8009842 <I2C_WaitOnTXISFlagUntilTimeout>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d001      	beq.n	80096f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e02c      	b.n	800974e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80096f4:	88fb      	ldrh	r3, [r7, #6]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d105      	bne.n	8009706 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80096fa:	893b      	ldrh	r3, [r7, #8]
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	629a      	str	r2, [r3, #40]	; 0x28
 8009704:	e015      	b.n	8009732 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009706:	893b      	ldrh	r3, [r7, #8]
 8009708:	0a1b      	lsrs	r3, r3, #8
 800970a:	b29b      	uxth	r3, r3
 800970c:	b2da      	uxtb	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009714:	69fa      	ldr	r2, [r7, #28]
 8009716:	69b9      	ldr	r1, [r7, #24]
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	f000 f892 	bl	8009842 <I2C_WaitOnTXISFlagUntilTimeout>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d001      	beq.n	8009728 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e012      	b.n	800974e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009728:	893b      	ldrh	r3, [r7, #8]
 800972a:	b2da      	uxtb	r2, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	2200      	movs	r2, #0
 800973a:	2140      	movs	r1, #64	; 0x40
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f000 f831 	bl	80097a4 <I2C_WaitOnFlagUntilTimeout>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e000      	b.n	800974e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	80002000 	.word	0x80002000

0800975c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	f003 0302 	and.w	r3, r3, #2
 800976e:	2b02      	cmp	r3, #2
 8009770:	d103      	bne.n	800977a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2200      	movs	r2, #0
 8009778:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	2b01      	cmp	r3, #1
 8009786:	d007      	beq.n	8009798 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	699a      	ldr	r2, [r3, #24]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f042 0201 	orr.w	r2, r2, #1
 8009796:	619a      	str	r2, [r3, #24]
  }
}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	603b      	str	r3, [r7, #0]
 80097b0:	4613      	mov	r3, r2
 80097b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097b4:	e031      	b.n	800981a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097bc:	d02d      	beq.n	800981a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097be:	f7fa fda1 	bl	8004304 <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d302      	bcc.n	80097d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d122      	bne.n	800981a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	699a      	ldr	r2, [r3, #24]
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	4013      	ands	r3, r2
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	bf0c      	ite	eq
 80097e4:	2301      	moveq	r3, #1
 80097e6:	2300      	movne	r3, #0
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	461a      	mov	r2, r3
 80097ec:	79fb      	ldrb	r3, [r7, #7]
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d113      	bne.n	800981a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097f6:	f043 0220 	orr.w	r2, r3, #32
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2220      	movs	r2, #32
 8009802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	e00f      	b.n	800983a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	699a      	ldr	r2, [r3, #24]
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	4013      	ands	r3, r2
 8009824:	68ba      	ldr	r2, [r7, #8]
 8009826:	429a      	cmp	r2, r3
 8009828:	bf0c      	ite	eq
 800982a:	2301      	moveq	r3, #1
 800982c:	2300      	movne	r3, #0
 800982e:	b2db      	uxtb	r3, r3
 8009830:	461a      	mov	r2, r3
 8009832:	79fb      	ldrb	r3, [r7, #7]
 8009834:	429a      	cmp	r2, r3
 8009836:	d0be      	beq.n	80097b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	60f8      	str	r0, [r7, #12]
 800984a:	60b9      	str	r1, [r7, #8]
 800984c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800984e:	e033      	b.n	80098b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	68b9      	ldr	r1, [r7, #8]
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f000 f87f 	bl	8009958 <I2C_IsErrorOccurred>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	e031      	b.n	80098c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800986a:	d025      	beq.n	80098b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800986c:	f7fa fd4a 	bl	8004304 <HAL_GetTick>
 8009870:	4602      	mov	r2, r0
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	429a      	cmp	r2, r3
 800987a:	d302      	bcc.n	8009882 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d11a      	bne.n	80098b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	f003 0302 	and.w	r3, r3, #2
 800988c:	2b02      	cmp	r3, #2
 800988e:	d013      	beq.n	80098b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009894:	f043 0220 	orr.w	r2, r3, #32
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2220      	movs	r2, #32
 80098a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e007      	b.n	80098c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	699b      	ldr	r3, [r3, #24]
 80098be:	f003 0302 	and.w	r3, r3, #2
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d1c4      	bne.n	8009850 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098dc:	e02f      	b.n	800993e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	68b9      	ldr	r1, [r7, #8]
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f000 f838 	bl	8009958 <I2C_IsErrorOccurred>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e02d      	b.n	800994e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098f2:	f7fa fd07 	bl	8004304 <HAL_GetTick>
 80098f6:	4602      	mov	r2, r0
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d302      	bcc.n	8009908 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d11a      	bne.n	800993e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	f003 0320 	and.w	r3, r3, #32
 8009912:	2b20      	cmp	r3, #32
 8009914:	d013      	beq.n	800993e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800991a:	f043 0220 	orr.w	r2, r3, #32
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2220      	movs	r2, #32
 8009926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e007      	b.n	800994e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	f003 0320 	and.w	r3, r3, #32
 8009948:	2b20      	cmp	r3, #32
 800994a:	d1c8      	bne.n	80098de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
	...

08009958 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b08a      	sub	sp, #40	; 0x28
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009964:	2300      	movs	r3, #0
 8009966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009972:	2300      	movs	r3, #0
 8009974:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	f003 0310 	and.w	r3, r3, #16
 8009980:	2b00      	cmp	r3, #0
 8009982:	d068      	beq.n	8009a56 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2210      	movs	r2, #16
 800998a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800998c:	e049      	b.n	8009a22 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009994:	d045      	beq.n	8009a22 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009996:	f7fa fcb5 	bl	8004304 <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d302      	bcc.n	80099ac <I2C_IsErrorOccurred+0x54>
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d13a      	bne.n	8009a22 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099ce:	d121      	bne.n	8009a14 <I2C_IsErrorOccurred+0xbc>
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099d6:	d01d      	beq.n	8009a14 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80099d8:	7cfb      	ldrb	r3, [r7, #19]
 80099da:	2b20      	cmp	r3, #32
 80099dc:	d01a      	beq.n	8009a14 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80099ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80099ee:	f7fa fc89 	bl	8004304 <HAL_GetTick>
 80099f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099f4:	e00e      	b.n	8009a14 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80099f6:	f7fa fc85 	bl	8004304 <HAL_GetTick>
 80099fa:	4602      	mov	r2, r0
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	2b19      	cmp	r3, #25
 8009a02:	d907      	bls.n	8009a14 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009a04:	6a3b      	ldr	r3, [r7, #32]
 8009a06:	f043 0320 	orr.w	r3, r3, #32
 8009a0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009a12:	e006      	b.n	8009a22 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	f003 0320 	and.w	r3, r3, #32
 8009a1e:	2b20      	cmp	r3, #32
 8009a20:	d1e9      	bne.n	80099f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	f003 0320 	and.w	r3, r3, #32
 8009a2c:	2b20      	cmp	r3, #32
 8009a2e:	d003      	beq.n	8009a38 <I2C_IsErrorOccurred+0xe0>
 8009a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d0aa      	beq.n	800998e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d103      	bne.n	8009a48 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2220      	movs	r2, #32
 8009a46:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009a48:	6a3b      	ldr	r3, [r7, #32]
 8009a4a:	f043 0304 	orr.w	r3, r3, #4
 8009a4e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00b      	beq.n	8009a80 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009a68:	6a3b      	ldr	r3, [r7, #32]
 8009a6a:	f043 0301 	orr.w	r3, r3, #1
 8009a6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00b      	beq.n	8009aa2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009a8a:	6a3b      	ldr	r3, [r7, #32]
 8009a8c:	f043 0308 	orr.w	r3, r3, #8
 8009a90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00b      	beq.n	8009ac4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009aac:	6a3b      	ldr	r3, [r7, #32]
 8009aae:	f043 0302 	orr.w	r3, r3, #2
 8009ab2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009abc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d01c      	beq.n	8009b06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f7ff fe45 	bl	800975c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6859      	ldr	r1, [r3, #4]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	4b0d      	ldr	r3, [pc, #52]	; (8009b14 <I2C_IsErrorOccurred+0x1bc>)
 8009ade:	400b      	ands	r3, r1
 8009ae0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ae6:	6a3b      	ldr	r3, [r7, #32]
 8009ae8:	431a      	orrs	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2220      	movs	r2, #32
 8009af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3728      	adds	r7, #40	; 0x28
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	fe00e800 	.word	0xfe00e800

08009b18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b087      	sub	sp, #28
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	607b      	str	r3, [r7, #4]
 8009b22:	460b      	mov	r3, r1
 8009b24:	817b      	strh	r3, [r7, #10]
 8009b26:	4613      	mov	r3, r2
 8009b28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b2a:	897b      	ldrh	r3, [r7, #10]
 8009b2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b30:	7a7b      	ldrb	r3, [r7, #9]
 8009b32:	041b      	lsls	r3, r3, #16
 8009b34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b3e:	6a3b      	ldr	r3, [r7, #32]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	685a      	ldr	r2, [r3, #4]
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	0d5b      	lsrs	r3, r3, #21
 8009b52:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009b56:	4b08      	ldr	r3, [pc, #32]	; (8009b78 <I2C_TransferConfig+0x60>)
 8009b58:	430b      	orrs	r3, r1
 8009b5a:	43db      	mvns	r3, r3
 8009b5c:	ea02 0103 	and.w	r1, r2, r3
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	697a      	ldr	r2, [r7, #20]
 8009b66:	430a      	orrs	r2, r1
 8009b68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009b6a:	bf00      	nop
 8009b6c:	371c      	adds	r7, #28
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	03ff63ff 	.word	0x03ff63ff

08009b7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	2b20      	cmp	r3, #32
 8009b90:	d138      	bne.n	8009c04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d101      	bne.n	8009ba0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	e032      	b.n	8009c06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2224      	movs	r2, #36	; 0x24
 8009bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f022 0201 	bic.w	r2, r2, #1
 8009bbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009bce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	6819      	ldr	r1, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	430a      	orrs	r2, r1
 8009bde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f042 0201 	orr.w	r2, r2, #1
 8009bee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	e000      	b.n	8009c06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c04:	2302      	movs	r3, #2
  }
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009c12:	b480      	push	{r7}
 8009c14:	b085      	sub	sp, #20
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
 8009c1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b20      	cmp	r3, #32
 8009c26:	d139      	bne.n	8009c9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d101      	bne.n	8009c36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009c32:	2302      	movs	r3, #2
 8009c34:	e033      	b.n	8009c9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2224      	movs	r2, #36	; 0x24
 8009c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f022 0201 	bic.w	r2, r2, #1
 8009c54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009c64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	021b      	lsls	r3, r3, #8
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f042 0201 	orr.w	r2, r2, #1
 8009c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2220      	movs	r2, #32
 8009c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	e000      	b.n	8009c9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009c9c:	2302      	movs	r3, #2
  }
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
	...

08009cac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d101      	bne.n	8009cbe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e0bf      	b.n	8009e3e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d106      	bne.n	8009cd8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7f7 fa58 	bl	8001188 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2202      	movs	r2, #2
 8009cdc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	699a      	ldr	r2, [r3, #24]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009cee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	6999      	ldr	r1, [r3, #24]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685a      	ldr	r2, [r3, #4]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d04:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	430a      	orrs	r2, r1
 8009d12:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6899      	ldr	r1, [r3, #8]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	4b4a      	ldr	r3, [pc, #296]	; (8009e48 <HAL_LTDC_Init+0x19c>)
 8009d20:	400b      	ands	r3, r1
 8009d22:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	695b      	ldr	r3, [r3, #20]
 8009d28:	041b      	lsls	r3, r3, #16
 8009d2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6899      	ldr	r1, [r3, #8]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	699a      	ldr	r2, [r3, #24]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	431a      	orrs	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68d9      	ldr	r1, [r3, #12]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	4b3e      	ldr	r3, [pc, #248]	; (8009e48 <HAL_LTDC_Init+0x19c>)
 8009d4e:	400b      	ands	r3, r1
 8009d50:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	69db      	ldr	r3, [r3, #28]
 8009d56:	041b      	lsls	r3, r3, #16
 8009d58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68d9      	ldr	r1, [r3, #12]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a1a      	ldr	r2, [r3, #32]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	431a      	orrs	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	430a      	orrs	r2, r1
 8009d6e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6919      	ldr	r1, [r3, #16]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	4b33      	ldr	r3, [pc, #204]	; (8009e48 <HAL_LTDC_Init+0x19c>)
 8009d7c:	400b      	ands	r3, r1
 8009d7e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d84:	041b      	lsls	r3, r3, #16
 8009d86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	6919      	ldr	r1, [r3, #16]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	431a      	orrs	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	430a      	orrs	r2, r1
 8009d9c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	6959      	ldr	r1, [r3, #20]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	4b27      	ldr	r3, [pc, #156]	; (8009e48 <HAL_LTDC_Init+0x19c>)
 8009daa:	400b      	ands	r3, r1
 8009dac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db2:	041b      	lsls	r3, r3, #16
 8009db4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6959      	ldr	r1, [r3, #20]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	431a      	orrs	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	430a      	orrs	r2, r1
 8009dca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009dd2:	021b      	lsls	r3, r3, #8
 8009dd4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009ddc:	041b      	lsls	r3, r3, #16
 8009dde:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009dee:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009df6:	68ba      	ldr	r2, [r7, #8]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009e02:	431a      	orrs	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	430a      	orrs	r2, r1
 8009e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f042 0206 	orr.w	r2, r2, #6
 8009e1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	699a      	ldr	r2, [r3, #24]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f042 0201 	orr.w	r2, r2, #1
 8009e2a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	f000f800 	.word	0xf000f800

08009e4c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e62:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f003 0304 	and.w	r3, r3, #4
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d023      	beq.n	8009eb6 <HAL_LTDC_IRQHandler+0x6a>
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	f003 0304 	and.w	r3, r3, #4
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d01e      	beq.n	8009eb6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f022 0204 	bic.w	r2, r2, #4
 8009e86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2204      	movs	r2, #4
 8009e8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009e96:	f043 0201 	orr.w	r2, r3, #1
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2204      	movs	r2, #4
 8009ea4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f86f 	bl	8009f94 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f003 0302 	and.w	r3, r3, #2
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d023      	beq.n	8009f08 <HAL_LTDC_IRQHandler+0xbc>
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	f003 0302 	and.w	r3, r3, #2
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d01e      	beq.n	8009f08 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f022 0202 	bic.w	r2, r2, #2
 8009ed8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2202      	movs	r2, #2
 8009ee0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009ee8:	f043 0202 	orr.w	r2, r3, #2
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2204      	movs	r2, #4
 8009ef6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f846 	bl	8009f94 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f003 0301 	and.w	r3, r3, #1
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d01b      	beq.n	8009f4a <HAL_LTDC_IRQHandler+0xfe>
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	f003 0301 	and.w	r3, r3, #1
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d016      	beq.n	8009f4a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f022 0201 	bic.w	r2, r2, #1
 8009f2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2201      	movs	r2, #1
 8009f32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f82f 	bl	8009fa8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f003 0308 	and.w	r3, r3, #8
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d01b      	beq.n	8009f8c <HAL_LTDC_IRQHandler+0x140>
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	f003 0308 	and.w	r3, r3, #8
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d016      	beq.n	8009f8c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f022 0208 	bic.w	r2, r2, #8
 8009f6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2208      	movs	r2, #8
 8009f74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f818 	bl	8009fbc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009f8c:	bf00      	nop
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009fd0:	b5b0      	push	{r4, r5, r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d101      	bne.n	8009fea <HAL_LTDC_ConfigLayer+0x1a>
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	e02c      	b.n	800a044 <HAL_LTDC_ConfigLayer+0x74>
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2202      	movs	r2, #2
 8009ff6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2134      	movs	r1, #52	; 0x34
 800a000:	fb01 f303 	mul.w	r3, r1, r3
 800a004:	4413      	add	r3, r2
 800a006:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	4614      	mov	r4, r2
 800a00e:	461d      	mov	r5, r3
 800a010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a01a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a01c:	682b      	ldr	r3, [r5, #0]
 800a01e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	68b9      	ldr	r1, [r7, #8]
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f000 f811 	bl	800a04c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2201      	movs	r2, #1
 800a030:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bdb0      	pop	{r4, r5, r7, pc}

0800a04c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b089      	sub	sp, #36	; 0x24
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	0c1b      	lsrs	r3, r3, #16
 800a064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a068:	4413      	add	r3, r2
 800a06a:	041b      	lsls	r3, r3, #16
 800a06c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	461a      	mov	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	01db      	lsls	r3, r3, #7
 800a078:	4413      	add	r3, r2
 800a07a:	3384      	adds	r3, #132	; 0x84
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	6812      	ldr	r2, [r2, #0]
 800a082:	4611      	mov	r1, r2
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	01d2      	lsls	r2, r2, #7
 800a088:	440a      	add	r2, r1
 800a08a:	3284      	adds	r2, #132	; 0x84
 800a08c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a090:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	0c1b      	lsrs	r3, r3, #16
 800a09e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a0a2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a0a4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	01db      	lsls	r3, r3, #7
 800a0b0:	440b      	add	r3, r1
 800a0b2:	3384      	adds	r3, #132	; 0x84
 800a0b4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a0ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	68da      	ldr	r2, [r3, #12]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a0ca:	4413      	add	r3, r2
 800a0cc:	041b      	lsls	r3, r3, #16
 800a0ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	01db      	lsls	r3, r3, #7
 800a0da:	4413      	add	r3, r2
 800a0dc:	3384      	adds	r3, #132	; 0x84
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	6812      	ldr	r2, [r2, #0]
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	01d2      	lsls	r2, r2, #7
 800a0ea:	440a      	add	r2, r1
 800a0ec:	3284      	adds	r2, #132	; 0x84
 800a0ee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a0f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	689a      	ldr	r2, [r3, #8]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a102:	4413      	add	r3, r2
 800a104:	1c5a      	adds	r2, r3, #1
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4619      	mov	r1, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	01db      	lsls	r3, r3, #7
 800a110:	440b      	add	r3, r1
 800a112:	3384      	adds	r3, #132	; 0x84
 800a114:	4619      	mov	r1, r3
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	4313      	orrs	r3, r2
 800a11a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	461a      	mov	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	01db      	lsls	r3, r3, #7
 800a126:	4413      	add	r3, r2
 800a128:	3384      	adds	r3, #132	; 0x84
 800a12a:	691b      	ldr	r3, [r3, #16]
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	6812      	ldr	r2, [r2, #0]
 800a130:	4611      	mov	r1, r2
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	01d2      	lsls	r2, r2, #7
 800a136:	440a      	add	r2, r1
 800a138:	3284      	adds	r2, #132	; 0x84
 800a13a:	f023 0307 	bic.w	r3, r3, #7
 800a13e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	461a      	mov	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	01db      	lsls	r3, r3, #7
 800a14a:	4413      	add	r3, r2
 800a14c:	3384      	adds	r3, #132	; 0x84
 800a14e:	461a      	mov	r2, r3
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	691b      	ldr	r3, [r3, #16]
 800a154:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a15c:	021b      	lsls	r3, r3, #8
 800a15e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a166:	041b      	lsls	r3, r3, #16
 800a168:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	699b      	ldr	r3, [r3, #24]
 800a16e:	061b      	lsls	r3, r3, #24
 800a170:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	461a      	mov	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	01db      	lsls	r3, r3, #7
 800a17c:	4413      	add	r3, r2
 800a17e:	3384      	adds	r3, #132	; 0x84
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	461a      	mov	r2, r3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	01db      	lsls	r3, r3, #7
 800a18c:	4413      	add	r3, r2
 800a18e:	3384      	adds	r3, #132	; 0x84
 800a190:	461a      	mov	r2, r3
 800a192:	2300      	movs	r3, #0
 800a194:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a19c:	461a      	mov	r2, r3
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	431a      	orrs	r2, r3
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	431a      	orrs	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	01db      	lsls	r3, r3, #7
 800a1b0:	440b      	add	r3, r1
 800a1b2:	3384      	adds	r3, #132	; 0x84
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	01db      	lsls	r3, r3, #7
 800a1c6:	4413      	add	r3, r2
 800a1c8:	3384      	adds	r3, #132	; 0x84
 800a1ca:	695b      	ldr	r3, [r3, #20]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	6812      	ldr	r2, [r2, #0]
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	01d2      	lsls	r2, r2, #7
 800a1d6:	440a      	add	r2, r1
 800a1d8:	3284      	adds	r2, #132	; 0x84
 800a1da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a1de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	01db      	lsls	r3, r3, #7
 800a1ea:	4413      	add	r3, r2
 800a1ec:	3384      	adds	r3, #132	; 0x84
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	01db      	lsls	r3, r3, #7
 800a200:	4413      	add	r3, r2
 800a202:	3384      	adds	r3, #132	; 0x84
 800a204:	69da      	ldr	r2, [r3, #28]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4619      	mov	r1, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	01db      	lsls	r3, r3, #7
 800a210:	440b      	add	r3, r1
 800a212:	3384      	adds	r3, #132	; 0x84
 800a214:	4619      	mov	r1, r3
 800a216:	4b58      	ldr	r3, [pc, #352]	; (800a378 <LTDC_SetConfig+0x32c>)
 800a218:	4013      	ands	r3, r2
 800a21a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	69da      	ldr	r2, [r3, #28]
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	6a1b      	ldr	r3, [r3, #32]
 800a224:	68f9      	ldr	r1, [r7, #12]
 800a226:	6809      	ldr	r1, [r1, #0]
 800a228:	4608      	mov	r0, r1
 800a22a:	6879      	ldr	r1, [r7, #4]
 800a22c:	01c9      	lsls	r1, r1, #7
 800a22e:	4401      	add	r1, r0
 800a230:	3184      	adds	r1, #132	; 0x84
 800a232:	4313      	orrs	r3, r2
 800a234:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	461a      	mov	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	01db      	lsls	r3, r3, #7
 800a240:	4413      	add	r3, r2
 800a242:	3384      	adds	r3, #132	; 0x84
 800a244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	461a      	mov	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	01db      	lsls	r3, r3, #7
 800a250:	4413      	add	r3, r2
 800a252:	3384      	adds	r3, #132	; 0x84
 800a254:	461a      	mov	r2, r3
 800a256:	2300      	movs	r3, #0
 800a258:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	461a      	mov	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	01db      	lsls	r3, r3, #7
 800a264:	4413      	add	r3, r2
 800a266:	3384      	adds	r3, #132	; 0x84
 800a268:	461a      	mov	r2, r3
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d102      	bne.n	800a27e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a278:	2304      	movs	r3, #4
 800a27a:	61fb      	str	r3, [r7, #28]
 800a27c:	e01b      	b.n	800a2b6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	2b01      	cmp	r3, #1
 800a284:	d102      	bne.n	800a28c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a286:	2303      	movs	r3, #3
 800a288:	61fb      	str	r3, [r7, #28]
 800a28a:	e014      	b.n	800a2b6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	2b04      	cmp	r3, #4
 800a292:	d00b      	beq.n	800a2ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d007      	beq.n	800a2ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a2a0:	2b03      	cmp	r3, #3
 800a2a2:	d003      	beq.n	800a2ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a2a8:	2b07      	cmp	r3, #7
 800a2aa:	d102      	bne.n	800a2b2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	61fb      	str	r3, [r7, #28]
 800a2b0:	e001      	b.n	800a2b6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	01db      	lsls	r3, r3, #7
 800a2c0:	4413      	add	r3, r2
 800a2c2:	3384      	adds	r3, #132	; 0x84
 800a2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	6812      	ldr	r2, [r2, #0]
 800a2ca:	4611      	mov	r1, r2
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	01d2      	lsls	r2, r2, #7
 800a2d0:	440a      	add	r2, r1
 800a2d2:	3284      	adds	r2, #132	; 0x84
 800a2d4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a2d8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2de:	69fa      	ldr	r2, [r7, #28]
 800a2e0:	fb02 f303 	mul.w	r3, r2, r3
 800a2e4:	041a      	lsls	r2, r3, #16
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	6859      	ldr	r1, [r3, #4]
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	1acb      	subs	r3, r1, r3
 800a2f0:	69f9      	ldr	r1, [r7, #28]
 800a2f2:	fb01 f303 	mul.w	r3, r1, r3
 800a2f6:	3307      	adds	r3, #7
 800a2f8:	68f9      	ldr	r1, [r7, #12]
 800a2fa:	6809      	ldr	r1, [r1, #0]
 800a2fc:	4608      	mov	r0, r1
 800a2fe:	6879      	ldr	r1, [r7, #4]
 800a300:	01c9      	lsls	r1, r1, #7
 800a302:	4401      	add	r1, r0
 800a304:	3184      	adds	r1, #132	; 0x84
 800a306:	4313      	orrs	r3, r2
 800a308:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	461a      	mov	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	01db      	lsls	r3, r3, #7
 800a314:	4413      	add	r3, r2
 800a316:	3384      	adds	r3, #132	; 0x84
 800a318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4619      	mov	r1, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	01db      	lsls	r3, r3, #7
 800a324:	440b      	add	r3, r1
 800a326:	3384      	adds	r3, #132	; 0x84
 800a328:	4619      	mov	r1, r3
 800a32a:	4b14      	ldr	r3, [pc, #80]	; (800a37c <LTDC_SetConfig+0x330>)
 800a32c:	4013      	ands	r3, r2
 800a32e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	461a      	mov	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	01db      	lsls	r3, r3, #7
 800a33a:	4413      	add	r3, r2
 800a33c:	3384      	adds	r3, #132	; 0x84
 800a33e:	461a      	mov	r2, r3
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a344:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	461a      	mov	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	01db      	lsls	r3, r3, #7
 800a350:	4413      	add	r3, r2
 800a352:	3384      	adds	r3, #132	; 0x84
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	6812      	ldr	r2, [r2, #0]
 800a35a:	4611      	mov	r1, r2
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	01d2      	lsls	r2, r2, #7
 800a360:	440a      	add	r2, r1
 800a362:	3284      	adds	r2, #132	; 0x84
 800a364:	f043 0301 	orr.w	r3, r3, #1
 800a368:	6013      	str	r3, [r2, #0]
}
 800a36a:	bf00      	nop
 800a36c:	3724      	adds	r7, #36	; 0x24
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	fffff8f8 	.word	0xfffff8f8
 800a37c:	fffff800 	.word	0xfffff800

0800a380 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800a380:	b480      	push	{r7}
 800a382:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800a384:	4b05      	ldr	r3, [pc, #20]	; (800a39c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a04      	ldr	r2, [pc, #16]	; (800a39c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a38a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a38e:	6013      	str	r3, [r2, #0]
}
 800a390:	bf00      	nop
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr
 800a39a:	bf00      	nop
 800a39c:	58024800 	.word	0x58024800

0800a3a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a3a8:	4b29      	ldr	r3, [pc, #164]	; (800a450 <HAL_PWREx_ConfigSupply+0xb0>)
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	f003 0307 	and.w	r3, r3, #7
 800a3b0:	2b06      	cmp	r3, #6
 800a3b2:	d00a      	beq.n	800a3ca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a3b4:	4b26      	ldr	r3, [pc, #152]	; (800a450 <HAL_PWREx_ConfigSupply+0xb0>)
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d001      	beq.n	800a3c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e040      	b.n	800a448 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	e03e      	b.n	800a448 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a3ca:	4b21      	ldr	r3, [pc, #132]	; (800a450 <HAL_PWREx_ConfigSupply+0xb0>)
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800a3d2:	491f      	ldr	r1, [pc, #124]	; (800a450 <HAL_PWREx_ConfigSupply+0xb0>)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a3da:	f7f9 ff93 	bl	8004304 <HAL_GetTick>
 800a3de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a3e0:	e009      	b.n	800a3f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a3e2:	f7f9 ff8f 	bl	8004304 <HAL_GetTick>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3f0:	d901      	bls.n	800a3f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e028      	b.n	800a448 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a3f6:	4b16      	ldr	r3, [pc, #88]	; (800a450 <HAL_PWREx_ConfigSupply+0xb0>)
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a402:	d1ee      	bne.n	800a3e2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b1e      	cmp	r3, #30
 800a408:	d008      	beq.n	800a41c <HAL_PWREx_ConfigSupply+0x7c>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2b2e      	cmp	r3, #46	; 0x2e
 800a40e:	d005      	beq.n	800a41c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2b1d      	cmp	r3, #29
 800a414:	d002      	beq.n	800a41c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2b2d      	cmp	r3, #45	; 0x2d
 800a41a:	d114      	bne.n	800a446 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a41c:	f7f9 ff72 	bl	8004304 <HAL_GetTick>
 800a420:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a422:	e009      	b.n	800a438 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a424:	f7f9 ff6e 	bl	8004304 <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a432:	d901      	bls.n	800a438 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	e007      	b.n	800a448 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a438:	4b05      	ldr	r3, [pc, #20]	; (800a450 <HAL_PWREx_ConfigSupply+0xb0>)
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a444:	d1ee      	bne.n	800a424 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	58024800 	.word	0x58024800

0800a454 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b08c      	sub	sp, #48	; 0x30
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d102      	bne.n	800a468 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	f000 bc1f 	b.w	800aca6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 0301 	and.w	r3, r3, #1
 800a470:	2b00      	cmp	r3, #0
 800a472:	f000 80b3 	beq.w	800a5dc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a476:	4b95      	ldr	r3, [pc, #596]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a47e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a480:	4b92      	ldr	r3, [pc, #584]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a484:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a488:	2b10      	cmp	r3, #16
 800a48a:	d007      	beq.n	800a49c <HAL_RCC_OscConfig+0x48>
 800a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48e:	2b18      	cmp	r3, #24
 800a490:	d112      	bne.n	800a4b8 <HAL_RCC_OscConfig+0x64>
 800a492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a494:	f003 0303 	and.w	r3, r3, #3
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d10d      	bne.n	800a4b8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a49c:	4b8b      	ldr	r3, [pc, #556]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f000 8098 	beq.w	800a5da <HAL_RCC_OscConfig+0x186>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f040 8093 	bne.w	800a5da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e3f6      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4c0:	d106      	bne.n	800a4d0 <HAL_RCC_OscConfig+0x7c>
 800a4c2:	4b82      	ldr	r3, [pc, #520]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a81      	ldr	r2, [pc, #516]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a4c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4cc:	6013      	str	r3, [r2, #0]
 800a4ce:	e058      	b.n	800a582 <HAL_RCC_OscConfig+0x12e>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d112      	bne.n	800a4fe <HAL_RCC_OscConfig+0xaa>
 800a4d8:	4b7c      	ldr	r3, [pc, #496]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a7b      	ldr	r2, [pc, #492]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a4de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4e2:	6013      	str	r3, [r2, #0]
 800a4e4:	4b79      	ldr	r3, [pc, #484]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a78      	ldr	r2, [pc, #480]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a4ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a4ee:	6013      	str	r3, [r2, #0]
 800a4f0:	4b76      	ldr	r3, [pc, #472]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a75      	ldr	r2, [pc, #468]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a4f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4fa:	6013      	str	r3, [r2, #0]
 800a4fc:	e041      	b.n	800a582 <HAL_RCC_OscConfig+0x12e>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a506:	d112      	bne.n	800a52e <HAL_RCC_OscConfig+0xda>
 800a508:	4b70      	ldr	r3, [pc, #448]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a6f      	ldr	r2, [pc, #444]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a50e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a512:	6013      	str	r3, [r2, #0]
 800a514:	4b6d      	ldr	r3, [pc, #436]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a6c      	ldr	r2, [pc, #432]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a51a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	4b6a      	ldr	r3, [pc, #424]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a69      	ldr	r2, [pc, #420]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a52a:	6013      	str	r3, [r2, #0]
 800a52c:	e029      	b.n	800a582 <HAL_RCC_OscConfig+0x12e>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a536:	d112      	bne.n	800a55e <HAL_RCC_OscConfig+0x10a>
 800a538:	4b64      	ldr	r3, [pc, #400]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a63      	ldr	r2, [pc, #396]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a53e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a542:	6013      	str	r3, [r2, #0]
 800a544:	4b61      	ldr	r3, [pc, #388]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a60      	ldr	r2, [pc, #384]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a54a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	4b5e      	ldr	r3, [pc, #376]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a5d      	ldr	r2, [pc, #372]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a55a:	6013      	str	r3, [r2, #0]
 800a55c:	e011      	b.n	800a582 <HAL_RCC_OscConfig+0x12e>
 800a55e:	4b5b      	ldr	r3, [pc, #364]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a5a      	ldr	r2, [pc, #360]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a568:	6013      	str	r3, [r2, #0]
 800a56a:	4b58      	ldr	r3, [pc, #352]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a57      	ldr	r2, [pc, #348]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a574:	6013      	str	r3, [r2, #0]
 800a576:	4b55      	ldr	r3, [pc, #340]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a54      	ldr	r2, [pc, #336]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a57c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a580:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d013      	beq.n	800a5b2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a58a:	f7f9 febb 	bl	8004304 <HAL_GetTick>
 800a58e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a590:	e008      	b.n	800a5a4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a592:	f7f9 feb7 	bl	8004304 <HAL_GetTick>
 800a596:	4602      	mov	r2, r0
 800a598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59a:	1ad3      	subs	r3, r2, r3
 800a59c:	2b64      	cmp	r3, #100	; 0x64
 800a59e:	d901      	bls.n	800a5a4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a5a0:	2303      	movs	r3, #3
 800a5a2:	e380      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a5a4:	4b49      	ldr	r3, [pc, #292]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d0f0      	beq.n	800a592 <HAL_RCC_OscConfig+0x13e>
 800a5b0:	e014      	b.n	800a5dc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5b2:	f7f9 fea7 	bl	8004304 <HAL_GetTick>
 800a5b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a5b8:	e008      	b.n	800a5cc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a5ba:	f7f9 fea3 	bl	8004304 <HAL_GetTick>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	2b64      	cmp	r3, #100	; 0x64
 800a5c6:	d901      	bls.n	800a5cc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	e36c      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a5cc:	4b3f      	ldr	r3, [pc, #252]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1f0      	bne.n	800a5ba <HAL_RCC_OscConfig+0x166>
 800a5d8:	e000      	b.n	800a5dc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f003 0302 	and.w	r3, r3, #2
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f000 808c 	beq.w	800a702 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a5ea:	4b38      	ldr	r3, [pc, #224]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5f2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a5f4:	4b35      	ldr	r3, [pc, #212]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5f8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a5fa:	6a3b      	ldr	r3, [r7, #32]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d007      	beq.n	800a610 <HAL_RCC_OscConfig+0x1bc>
 800a600:	6a3b      	ldr	r3, [r7, #32]
 800a602:	2b18      	cmp	r3, #24
 800a604:	d137      	bne.n	800a676 <HAL_RCC_OscConfig+0x222>
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	f003 0303 	and.w	r3, r3, #3
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d132      	bne.n	800a676 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a610:	4b2e      	ldr	r3, [pc, #184]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f003 0304 	and.w	r3, r3, #4
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d005      	beq.n	800a628 <HAL_RCC_OscConfig+0x1d4>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d101      	bne.n	800a628 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e33e      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a628:	4b28      	ldr	r3, [pc, #160]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f023 0219 	bic.w	r2, r3, #25
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	4925      	ldr	r1, [pc, #148]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a636:	4313      	orrs	r3, r2
 800a638:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a63a:	f7f9 fe63 	bl	8004304 <HAL_GetTick>
 800a63e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a640:	e008      	b.n	800a654 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a642:	f7f9 fe5f 	bl	8004304 <HAL_GetTick>
 800a646:	4602      	mov	r2, r0
 800a648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64a:	1ad3      	subs	r3, r2, r3
 800a64c:	2b02      	cmp	r3, #2
 800a64e:	d901      	bls.n	800a654 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a650:	2303      	movs	r3, #3
 800a652:	e328      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a654:	4b1d      	ldr	r3, [pc, #116]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 0304 	and.w	r3, r3, #4
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d0f0      	beq.n	800a642 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a660:	4b1a      	ldr	r3, [pc, #104]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	061b      	lsls	r3, r3, #24
 800a66e:	4917      	ldr	r1, [pc, #92]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a670:	4313      	orrs	r3, r2
 800a672:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a674:	e045      	b.n	800a702 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d028      	beq.n	800a6d0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a67e:	4b13      	ldr	r3, [pc, #76]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f023 0219 	bic.w	r2, r3, #25
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	4910      	ldr	r1, [pc, #64]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a68c:	4313      	orrs	r3, r2
 800a68e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a690:	f7f9 fe38 	bl	8004304 <HAL_GetTick>
 800a694:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a696:	e008      	b.n	800a6aa <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a698:	f7f9 fe34 	bl	8004304 <HAL_GetTick>
 800a69c:	4602      	mov	r2, r0
 800a69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d901      	bls.n	800a6aa <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a6a6:	2303      	movs	r3, #3
 800a6a8:	e2fd      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a6aa:	4b08      	ldr	r3, [pc, #32]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 0304 	and.w	r3, r3, #4
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d0f0      	beq.n	800a698 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6b6:	4b05      	ldr	r3, [pc, #20]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	061b      	lsls	r3, r3, #24
 800a6c4:	4901      	ldr	r1, [pc, #4]	; (800a6cc <HAL_RCC_OscConfig+0x278>)
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	604b      	str	r3, [r1, #4]
 800a6ca:	e01a      	b.n	800a702 <HAL_RCC_OscConfig+0x2ae>
 800a6cc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a6d0:	4b97      	ldr	r3, [pc, #604]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a96      	ldr	r2, [pc, #600]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a6d6:	f023 0301 	bic.w	r3, r3, #1
 800a6da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6dc:	f7f9 fe12 	bl	8004304 <HAL_GetTick>
 800a6e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a6e2:	e008      	b.n	800a6f6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6e4:	f7f9 fe0e 	bl	8004304 <HAL_GetTick>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ec:	1ad3      	subs	r3, r2, r3
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	d901      	bls.n	800a6f6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	e2d7      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a6f6:	4b8e      	ldr	r3, [pc, #568]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f003 0304 	and.w	r3, r3, #4
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1f0      	bne.n	800a6e4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f003 0310 	and.w	r3, r3, #16
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d06a      	beq.n	800a7e4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a70e:	4b88      	ldr	r3, [pc, #544]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a716:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a718:	4b85      	ldr	r3, [pc, #532]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a71c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	2b08      	cmp	r3, #8
 800a722:	d007      	beq.n	800a734 <HAL_RCC_OscConfig+0x2e0>
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	2b18      	cmp	r3, #24
 800a728:	d11b      	bne.n	800a762 <HAL_RCC_OscConfig+0x30e>
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	f003 0303 	and.w	r3, r3, #3
 800a730:	2b01      	cmp	r3, #1
 800a732:	d116      	bne.n	800a762 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a734:	4b7e      	ldr	r3, [pc, #504]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d005      	beq.n	800a74c <HAL_RCC_OscConfig+0x2f8>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	69db      	ldr	r3, [r3, #28]
 800a744:	2b80      	cmp	r3, #128	; 0x80
 800a746:	d001      	beq.n	800a74c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	e2ac      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a74c:	4b78      	ldr	r3, [pc, #480]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6a1b      	ldr	r3, [r3, #32]
 800a758:	061b      	lsls	r3, r3, #24
 800a75a:	4975      	ldr	r1, [pc, #468]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a75c:	4313      	orrs	r3, r2
 800a75e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a760:	e040      	b.n	800a7e4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	69db      	ldr	r3, [r3, #28]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d023      	beq.n	800a7b2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a76a:	4b71      	ldr	r3, [pc, #452]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a70      	ldr	r2, [pc, #448]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a776:	f7f9 fdc5 	bl	8004304 <HAL_GetTick>
 800a77a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a77c:	e008      	b.n	800a790 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a77e:	f7f9 fdc1 	bl	8004304 <HAL_GetTick>
 800a782:	4602      	mov	r2, r0
 800a784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d901      	bls.n	800a790 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a78c:	2303      	movs	r3, #3
 800a78e:	e28a      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a790:	4b67      	ldr	r3, [pc, #412]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d0f0      	beq.n	800a77e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a79c:	4b64      	ldr	r3, [pc, #400]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6a1b      	ldr	r3, [r3, #32]
 800a7a8:	061b      	lsls	r3, r3, #24
 800a7aa:	4961      	ldr	r1, [pc, #388]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	60cb      	str	r3, [r1, #12]
 800a7b0:	e018      	b.n	800a7e4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a7b2:	4b5f      	ldr	r3, [pc, #380]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a5e      	ldr	r2, [pc, #376]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a7b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7be:	f7f9 fda1 	bl	8004304 <HAL_GetTick>
 800a7c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a7c4:	e008      	b.n	800a7d8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a7c6:	f7f9 fd9d 	bl	8004304 <HAL_GetTick>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ce:	1ad3      	subs	r3, r2, r3
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d901      	bls.n	800a7d8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	e266      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a7d8:	4b55      	ldr	r3, [pc, #340]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d1f0      	bne.n	800a7c6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 0308 	and.w	r3, r3, #8
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d036      	beq.n	800a85e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	695b      	ldr	r3, [r3, #20]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d019      	beq.n	800a82c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a7f8:	4b4d      	ldr	r3, [pc, #308]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a7fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7fc:	4a4c      	ldr	r2, [pc, #304]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a7fe:	f043 0301 	orr.w	r3, r3, #1
 800a802:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a804:	f7f9 fd7e 	bl	8004304 <HAL_GetTick>
 800a808:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a80a:	e008      	b.n	800a81e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a80c:	f7f9 fd7a 	bl	8004304 <HAL_GetTick>
 800a810:	4602      	mov	r2, r0
 800a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	2b02      	cmp	r3, #2
 800a818:	d901      	bls.n	800a81e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a81a:	2303      	movs	r3, #3
 800a81c:	e243      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a81e:	4b44      	ldr	r3, [pc, #272]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a822:	f003 0302 	and.w	r3, r3, #2
 800a826:	2b00      	cmp	r3, #0
 800a828:	d0f0      	beq.n	800a80c <HAL_RCC_OscConfig+0x3b8>
 800a82a:	e018      	b.n	800a85e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a82c:	4b40      	ldr	r3, [pc, #256]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a82e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a830:	4a3f      	ldr	r2, [pc, #252]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a832:	f023 0301 	bic.w	r3, r3, #1
 800a836:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a838:	f7f9 fd64 	bl	8004304 <HAL_GetTick>
 800a83c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a83e:	e008      	b.n	800a852 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a840:	f7f9 fd60 	bl	8004304 <HAL_GetTick>
 800a844:	4602      	mov	r2, r0
 800a846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d901      	bls.n	800a852 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e229      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a852:	4b37      	ldr	r3, [pc, #220]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a856:	f003 0302 	and.w	r3, r3, #2
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1f0      	bne.n	800a840 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 0320 	and.w	r3, r3, #32
 800a866:	2b00      	cmp	r3, #0
 800a868:	d036      	beq.n	800a8d8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	699b      	ldr	r3, [r3, #24]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d019      	beq.n	800a8a6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a872:	4b2f      	ldr	r3, [pc, #188]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a2e      	ldr	r2, [pc, #184]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a878:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a87c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a87e:	f7f9 fd41 	bl	8004304 <HAL_GetTick>
 800a882:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a884:	e008      	b.n	800a898 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a886:	f7f9 fd3d 	bl	8004304 <HAL_GetTick>
 800a88a:	4602      	mov	r2, r0
 800a88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	2b02      	cmp	r3, #2
 800a892:	d901      	bls.n	800a898 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800a894:	2303      	movs	r3, #3
 800a896:	e206      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a898:	4b25      	ldr	r3, [pc, #148]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d0f0      	beq.n	800a886 <HAL_RCC_OscConfig+0x432>
 800a8a4:	e018      	b.n	800a8d8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a8a6:	4b22      	ldr	r3, [pc, #136]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a21      	ldr	r2, [pc, #132]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a8ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a8b2:	f7f9 fd27 	bl	8004304 <HAL_GetTick>
 800a8b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a8b8:	e008      	b.n	800a8cc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a8ba:	f7f9 fd23 	bl	8004304 <HAL_GetTick>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c2:	1ad3      	subs	r3, r2, r3
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d901      	bls.n	800a8cc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	e1ec      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a8cc:	4b18      	ldr	r3, [pc, #96]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1f0      	bne.n	800a8ba <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 0304 	and.w	r3, r3, #4
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f000 80af 	beq.w	800aa44 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a8e6:	4b13      	ldr	r3, [pc, #76]	; (800a934 <HAL_RCC_OscConfig+0x4e0>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a12      	ldr	r2, [pc, #72]	; (800a934 <HAL_RCC_OscConfig+0x4e0>)
 800a8ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a8f2:	f7f9 fd07 	bl	8004304 <HAL_GetTick>
 800a8f6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a8f8:	e008      	b.n	800a90c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8fa:	f7f9 fd03 	bl	8004304 <HAL_GetTick>
 800a8fe:	4602      	mov	r2, r0
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	1ad3      	subs	r3, r2, r3
 800a904:	2b64      	cmp	r3, #100	; 0x64
 800a906:	d901      	bls.n	800a90c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800a908:	2303      	movs	r3, #3
 800a90a:	e1cc      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a90c:	4b09      	ldr	r3, [pc, #36]	; (800a934 <HAL_RCC_OscConfig+0x4e0>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a914:	2b00      	cmp	r3, #0
 800a916:	d0f0      	beq.n	800a8fa <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d10b      	bne.n	800a938 <HAL_RCC_OscConfig+0x4e4>
 800a920:	4b03      	ldr	r3, [pc, #12]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a924:	4a02      	ldr	r2, [pc, #8]	; (800a930 <HAL_RCC_OscConfig+0x4dc>)
 800a926:	f043 0301 	orr.w	r3, r3, #1
 800a92a:	6713      	str	r3, [r2, #112]	; 0x70
 800a92c:	e05b      	b.n	800a9e6 <HAL_RCC_OscConfig+0x592>
 800a92e:	bf00      	nop
 800a930:	58024400 	.word	0x58024400
 800a934:	58024800 	.word	0x58024800
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d112      	bne.n	800a966 <HAL_RCC_OscConfig+0x512>
 800a940:	4b9d      	ldr	r3, [pc, #628]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a944:	4a9c      	ldr	r2, [pc, #624]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a946:	f023 0301 	bic.w	r3, r3, #1
 800a94a:	6713      	str	r3, [r2, #112]	; 0x70
 800a94c:	4b9a      	ldr	r3, [pc, #616]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a94e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a950:	4a99      	ldr	r2, [pc, #612]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a956:	6713      	str	r3, [r2, #112]	; 0x70
 800a958:	4b97      	ldr	r3, [pc, #604]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a95a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a95c:	4a96      	ldr	r2, [pc, #600]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a95e:	f023 0304 	bic.w	r3, r3, #4
 800a962:	6713      	str	r3, [r2, #112]	; 0x70
 800a964:	e03f      	b.n	800a9e6 <HAL_RCC_OscConfig+0x592>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	2b05      	cmp	r3, #5
 800a96c:	d112      	bne.n	800a994 <HAL_RCC_OscConfig+0x540>
 800a96e:	4b92      	ldr	r3, [pc, #584]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a972:	4a91      	ldr	r2, [pc, #580]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a974:	f043 0304 	orr.w	r3, r3, #4
 800a978:	6713      	str	r3, [r2, #112]	; 0x70
 800a97a:	4b8f      	ldr	r3, [pc, #572]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a97c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a97e:	4a8e      	ldr	r2, [pc, #568]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a984:	6713      	str	r3, [r2, #112]	; 0x70
 800a986:	4b8c      	ldr	r3, [pc, #560]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a98a:	4a8b      	ldr	r2, [pc, #556]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a98c:	f043 0301 	orr.w	r3, r3, #1
 800a990:	6713      	str	r3, [r2, #112]	; 0x70
 800a992:	e028      	b.n	800a9e6 <HAL_RCC_OscConfig+0x592>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	2b85      	cmp	r3, #133	; 0x85
 800a99a:	d112      	bne.n	800a9c2 <HAL_RCC_OscConfig+0x56e>
 800a99c:	4b86      	ldr	r3, [pc, #536]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a99e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a0:	4a85      	ldr	r2, [pc, #532]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a9a2:	f043 0304 	orr.w	r3, r3, #4
 800a9a6:	6713      	str	r3, [r2, #112]	; 0x70
 800a9a8:	4b83      	ldr	r3, [pc, #524]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a9aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ac:	4a82      	ldr	r2, [pc, #520]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a9ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9b2:	6713      	str	r3, [r2, #112]	; 0x70
 800a9b4:	4b80      	ldr	r3, [pc, #512]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a9b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9b8:	4a7f      	ldr	r2, [pc, #508]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a9ba:	f043 0301 	orr.w	r3, r3, #1
 800a9be:	6713      	str	r3, [r2, #112]	; 0x70
 800a9c0:	e011      	b.n	800a9e6 <HAL_RCC_OscConfig+0x592>
 800a9c2:	4b7d      	ldr	r3, [pc, #500]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9c6:	4a7c      	ldr	r2, [pc, #496]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a9c8:	f023 0301 	bic.w	r3, r3, #1
 800a9cc:	6713      	str	r3, [r2, #112]	; 0x70
 800a9ce:	4b7a      	ldr	r3, [pc, #488]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a9d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9d2:	4a79      	ldr	r2, [pc, #484]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a9d4:	f023 0304 	bic.w	r3, r3, #4
 800a9d8:	6713      	str	r3, [r2, #112]	; 0x70
 800a9da:	4b77      	ldr	r3, [pc, #476]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9de:	4a76      	ldr	r2, [pc, #472]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800a9e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d015      	beq.n	800aa1a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9ee:	f7f9 fc89 	bl	8004304 <HAL_GetTick>
 800a9f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a9f4:	e00a      	b.n	800aa0c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9f6:	f7f9 fc85 	bl	8004304 <HAL_GetTick>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d901      	bls.n	800aa0c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800aa08:	2303      	movs	r3, #3
 800aa0a:	e14c      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa0c:	4b6a      	ldr	r3, [pc, #424]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800aa0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa10:	f003 0302 	and.w	r3, r3, #2
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d0ee      	beq.n	800a9f6 <HAL_RCC_OscConfig+0x5a2>
 800aa18:	e014      	b.n	800aa44 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa1a:	f7f9 fc73 	bl	8004304 <HAL_GetTick>
 800aa1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aa20:	e00a      	b.n	800aa38 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa22:	f7f9 fc6f 	bl	8004304 <HAL_GetTick>
 800aa26:	4602      	mov	r2, r0
 800aa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2a:	1ad3      	subs	r3, r2, r3
 800aa2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d901      	bls.n	800aa38 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800aa34:	2303      	movs	r3, #3
 800aa36:	e136      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aa38:	4b5f      	ldr	r3, [pc, #380]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800aa3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa3c:	f003 0302 	and.w	r3, r3, #2
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1ee      	bne.n	800aa22 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f000 812b 	beq.w	800aca4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800aa4e:	4b5a      	ldr	r3, [pc, #360]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa56:	2b18      	cmp	r3, #24
 800aa58:	f000 80bb 	beq.w	800abd2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	f040 8095 	bne.w	800ab90 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa66:	4b54      	ldr	r3, [pc, #336]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a53      	ldr	r2, [pc, #332]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800aa6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa72:	f7f9 fc47 	bl	8004304 <HAL_GetTick>
 800aa76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa78:	e008      	b.n	800aa8c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa7a:	f7f9 fc43 	bl	8004304 <HAL_GetTick>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d901      	bls.n	800aa8c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800aa88:	2303      	movs	r3, #3
 800aa8a:	e10c      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa8c:	4b4a      	ldr	r3, [pc, #296]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d1f0      	bne.n	800aa7a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa98:	4b47      	ldr	r3, [pc, #284]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800aa9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa9c:	4b47      	ldr	r3, [pc, #284]	; (800abbc <HAL_RCC_OscConfig+0x768>)
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aaa8:	0112      	lsls	r2, r2, #4
 800aaaa:	430a      	orrs	r2, r1
 800aaac:	4942      	ldr	r1, [pc, #264]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800aaae:	4313      	orrs	r3, r2
 800aab0:	628b      	str	r3, [r1, #40]	; 0x28
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aab6:	3b01      	subs	r3, #1
 800aab8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aac0:	3b01      	subs	r3, #1
 800aac2:	025b      	lsls	r3, r3, #9
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	431a      	orrs	r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aacc:	3b01      	subs	r3, #1
 800aace:	041b      	lsls	r3, r3, #16
 800aad0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aad4:	431a      	orrs	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aada:	3b01      	subs	r3, #1
 800aadc:	061b      	lsls	r3, r3, #24
 800aade:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aae2:	4935      	ldr	r1, [pc, #212]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800aae4:	4313      	orrs	r3, r2
 800aae6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800aae8:	4b33      	ldr	r3, [pc, #204]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800aaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaec:	4a32      	ldr	r2, [pc, #200]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800aaee:	f023 0301 	bic.w	r3, r3, #1
 800aaf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aaf4:	4b30      	ldr	r3, [pc, #192]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800aaf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaf8:	4b31      	ldr	r3, [pc, #196]	; (800abc0 <HAL_RCC_OscConfig+0x76c>)
 800aafa:	4013      	ands	r3, r2
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ab00:	00d2      	lsls	r2, r2, #3
 800ab02:	492d      	ldr	r1, [pc, #180]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800ab04:	4313      	orrs	r3, r2
 800ab06:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ab08:	4b2b      	ldr	r3, [pc, #172]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800ab0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0c:	f023 020c 	bic.w	r2, r3, #12
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab14:	4928      	ldr	r1, [pc, #160]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800ab16:	4313      	orrs	r3, r2
 800ab18:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ab1a:	4b27      	ldr	r3, [pc, #156]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800ab1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1e:	f023 0202 	bic.w	r2, r3, #2
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab26:	4924      	ldr	r1, [pc, #144]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ab2c:	4b22      	ldr	r3, [pc, #136]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800ab2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab30:	4a21      	ldr	r2, [pc, #132]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800ab32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab38:	4b1f      	ldr	r3, [pc, #124]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800ab3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3c:	4a1e      	ldr	r2, [pc, #120]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800ab3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ab44:	4b1c      	ldr	r3, [pc, #112]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800ab46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab48:	4a1b      	ldr	r2, [pc, #108]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800ab4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ab50:	4b19      	ldr	r3, [pc, #100]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800ab52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab54:	4a18      	ldr	r2, [pc, #96]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800ab56:	f043 0301 	orr.w	r3, r3, #1
 800ab5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab5c:	4b16      	ldr	r3, [pc, #88]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a15      	ldr	r2, [pc, #84]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800ab62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab68:	f7f9 fbcc 	bl	8004304 <HAL_GetTick>
 800ab6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab6e:	e008      	b.n	800ab82 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab70:	f7f9 fbc8 	bl	8004304 <HAL_GetTick>
 800ab74:	4602      	mov	r2, r0
 800ab76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d901      	bls.n	800ab82 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	e091      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab82:	4b0d      	ldr	r3, [pc, #52]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d0f0      	beq.n	800ab70 <HAL_RCC_OscConfig+0x71c>
 800ab8e:	e089      	b.n	800aca4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab90:	4b09      	ldr	r3, [pc, #36]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a08      	ldr	r2, [pc, #32]	; (800abb8 <HAL_RCC_OscConfig+0x764>)
 800ab96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab9c:	f7f9 fbb2 	bl	8004304 <HAL_GetTick>
 800aba0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aba2:	e00f      	b.n	800abc4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aba4:	f7f9 fbae 	bl	8004304 <HAL_GetTick>
 800aba8:	4602      	mov	r2, r0
 800abaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d908      	bls.n	800abc4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800abb2:	2303      	movs	r3, #3
 800abb4:	e077      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
 800abb6:	bf00      	nop
 800abb8:	58024400 	.word	0x58024400
 800abbc:	fffffc0c 	.word	0xfffffc0c
 800abc0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800abc4:	4b3a      	ldr	r3, [pc, #232]	; (800acb0 <HAL_RCC_OscConfig+0x85c>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1e9      	bne.n	800aba4 <HAL_RCC_OscConfig+0x750>
 800abd0:	e068      	b.n	800aca4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800abd2:	4b37      	ldr	r3, [pc, #220]	; (800acb0 <HAL_RCC_OscConfig+0x85c>)
 800abd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800abd8:	4b35      	ldr	r3, [pc, #212]	; (800acb0 <HAL_RCC_OscConfig+0x85c>)
 800abda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abdc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d031      	beq.n	800ac4a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	f003 0203 	and.w	r2, r3, #3
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d12a      	bne.n	800ac4a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	091b      	lsrs	r3, r3, #4
 800abf8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d122      	bne.n	800ac4a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac0e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d11a      	bne.n	800ac4a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	0a5b      	lsrs	r3, r3, #9
 800ac18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac20:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d111      	bne.n	800ac4a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	0c1b      	lsrs	r3, r3, #16
 800ac2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac32:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d108      	bne.n	800ac4a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	0e1b      	lsrs	r3, r3, #24
 800ac3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d001      	beq.n	800ac4e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e02b      	b.n	800aca6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ac4e:	4b18      	ldr	r3, [pc, #96]	; (800acb0 <HAL_RCC_OscConfig+0x85c>)
 800ac50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac52:	08db      	lsrs	r3, r3, #3
 800ac54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac58:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac5e:	693a      	ldr	r2, [r7, #16]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d01f      	beq.n	800aca4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ac64:	4b12      	ldr	r3, [pc, #72]	; (800acb0 <HAL_RCC_OscConfig+0x85c>)
 800ac66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac68:	4a11      	ldr	r2, [pc, #68]	; (800acb0 <HAL_RCC_OscConfig+0x85c>)
 800ac6a:	f023 0301 	bic.w	r3, r3, #1
 800ac6e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ac70:	f7f9 fb48 	bl	8004304 <HAL_GetTick>
 800ac74:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ac76:	bf00      	nop
 800ac78:	f7f9 fb44 	bl	8004304 <HAL_GetTick>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d0f9      	beq.n	800ac78 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ac84:	4b0a      	ldr	r3, [pc, #40]	; (800acb0 <HAL_RCC_OscConfig+0x85c>)
 800ac86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac88:	4b0a      	ldr	r3, [pc, #40]	; (800acb4 <HAL_RCC_OscConfig+0x860>)
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ac90:	00d2      	lsls	r2, r2, #3
 800ac92:	4907      	ldr	r1, [pc, #28]	; (800acb0 <HAL_RCC_OscConfig+0x85c>)
 800ac94:	4313      	orrs	r3, r2
 800ac96:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ac98:	4b05      	ldr	r3, [pc, #20]	; (800acb0 <HAL_RCC_OscConfig+0x85c>)
 800ac9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9c:	4a04      	ldr	r2, [pc, #16]	; (800acb0 <HAL_RCC_OscConfig+0x85c>)
 800ac9e:	f043 0301 	orr.w	r3, r3, #1
 800aca2:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3730      	adds	r7, #48	; 0x30
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	58024400 	.word	0x58024400
 800acb4:	ffff0007 	.word	0xffff0007

0800acb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d101      	bne.n	800accc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	e19c      	b.n	800b006 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800accc:	4b8a      	ldr	r3, [pc, #552]	; (800aef8 <HAL_RCC_ClockConfig+0x240>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 030f 	and.w	r3, r3, #15
 800acd4:	683a      	ldr	r2, [r7, #0]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d910      	bls.n	800acfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acda:	4b87      	ldr	r3, [pc, #540]	; (800aef8 <HAL_RCC_ClockConfig+0x240>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f023 020f 	bic.w	r2, r3, #15
 800ace2:	4985      	ldr	r1, [pc, #532]	; (800aef8 <HAL_RCC_ClockConfig+0x240>)
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800acea:	4b83      	ldr	r3, [pc, #524]	; (800aef8 <HAL_RCC_ClockConfig+0x240>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f003 030f 	and.w	r3, r3, #15
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d001      	beq.n	800acfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e184      	b.n	800b006 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0304 	and.w	r3, r3, #4
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d010      	beq.n	800ad2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	691a      	ldr	r2, [r3, #16]
 800ad0c:	4b7b      	ldr	r3, [pc, #492]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad0e:	699b      	ldr	r3, [r3, #24]
 800ad10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d908      	bls.n	800ad2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ad18:	4b78      	ldr	r3, [pc, #480]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	691b      	ldr	r3, [r3, #16]
 800ad24:	4975      	ldr	r1, [pc, #468]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad26:	4313      	orrs	r3, r2
 800ad28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f003 0308 	and.w	r3, r3, #8
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d010      	beq.n	800ad58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	695a      	ldr	r2, [r3, #20]
 800ad3a:	4b70      	ldr	r3, [pc, #448]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad3c:	69db      	ldr	r3, [r3, #28]
 800ad3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d908      	bls.n	800ad58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ad46:	4b6d      	ldr	r3, [pc, #436]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad48:	69db      	ldr	r3, [r3, #28]
 800ad4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	695b      	ldr	r3, [r3, #20]
 800ad52:	496a      	ldr	r1, [pc, #424]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad54:	4313      	orrs	r3, r2
 800ad56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f003 0310 	and.w	r3, r3, #16
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d010      	beq.n	800ad86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	699a      	ldr	r2, [r3, #24]
 800ad68:	4b64      	ldr	r3, [pc, #400]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad6a:	69db      	ldr	r3, [r3, #28]
 800ad6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d908      	bls.n	800ad86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ad74:	4b61      	ldr	r3, [pc, #388]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad76:	69db      	ldr	r3, [r3, #28]
 800ad78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	699b      	ldr	r3, [r3, #24]
 800ad80:	495e      	ldr	r1, [pc, #376]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad82:	4313      	orrs	r3, r2
 800ad84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f003 0320 	and.w	r3, r3, #32
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d010      	beq.n	800adb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	69da      	ldr	r2, [r3, #28]
 800ad96:	4b59      	ldr	r3, [pc, #356]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ad98:	6a1b      	ldr	r3, [r3, #32]
 800ad9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d908      	bls.n	800adb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ada2:	4b56      	ldr	r3, [pc, #344]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ada4:	6a1b      	ldr	r3, [r3, #32]
 800ada6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	69db      	ldr	r3, [r3, #28]
 800adae:	4953      	ldr	r1, [pc, #332]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800adb0:	4313      	orrs	r3, r2
 800adb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 0302 	and.w	r3, r3, #2
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d010      	beq.n	800ade2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	68da      	ldr	r2, [r3, #12]
 800adc4:	4b4d      	ldr	r3, [pc, #308]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800adc6:	699b      	ldr	r3, [r3, #24]
 800adc8:	f003 030f 	and.w	r3, r3, #15
 800adcc:	429a      	cmp	r2, r3
 800adce:	d908      	bls.n	800ade2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800add0:	4b4a      	ldr	r3, [pc, #296]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	f023 020f 	bic.w	r2, r3, #15
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	4947      	ldr	r1, [pc, #284]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800adde:	4313      	orrs	r3, r2
 800ade0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f003 0301 	and.w	r3, r3, #1
 800adea:	2b00      	cmp	r3, #0
 800adec:	d055      	beq.n	800ae9a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800adee:	4b43      	ldr	r3, [pc, #268]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800adf0:	699b      	ldr	r3, [r3, #24]
 800adf2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	4940      	ldr	r1, [pc, #256]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800adfc:	4313      	orrs	r3, r2
 800adfe:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d107      	bne.n	800ae18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ae08:	4b3c      	ldr	r3, [pc, #240]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d121      	bne.n	800ae58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	e0f6      	b.n	800b006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	2b03      	cmp	r3, #3
 800ae1e:	d107      	bne.n	800ae30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ae20:	4b36      	ldr	r3, [pc, #216]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d115      	bne.n	800ae58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e0ea      	b.n	800b006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d107      	bne.n	800ae48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ae38:	4b30      	ldr	r3, [pc, #192]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d109      	bne.n	800ae58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ae44:	2301      	movs	r3, #1
 800ae46:	e0de      	b.n	800b006 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ae48:	4b2c      	ldr	r3, [pc, #176]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 0304 	and.w	r3, r3, #4
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ae54:	2301      	movs	r3, #1
 800ae56:	e0d6      	b.n	800b006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ae58:	4b28      	ldr	r3, [pc, #160]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ae5a:	691b      	ldr	r3, [r3, #16]
 800ae5c:	f023 0207 	bic.w	r2, r3, #7
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	4925      	ldr	r1, [pc, #148]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ae66:	4313      	orrs	r3, r2
 800ae68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae6a:	f7f9 fa4b 	bl	8004304 <HAL_GetTick>
 800ae6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae70:	e00a      	b.n	800ae88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae72:	f7f9 fa47 	bl	8004304 <HAL_GetTick>
 800ae76:	4602      	mov	r2, r0
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	1ad3      	subs	r3, r2, r3
 800ae7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d901      	bls.n	800ae88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ae84:	2303      	movs	r3, #3
 800ae86:	e0be      	b.n	800b006 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae88:	4b1c      	ldr	r3, [pc, #112]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800ae8a:	691b      	ldr	r3, [r3, #16]
 800ae8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	00db      	lsls	r3, r3, #3
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d1eb      	bne.n	800ae72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 0302 	and.w	r3, r3, #2
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d010      	beq.n	800aec8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	68da      	ldr	r2, [r3, #12]
 800aeaa:	4b14      	ldr	r3, [pc, #80]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800aeac:	699b      	ldr	r3, [r3, #24]
 800aeae:	f003 030f 	and.w	r3, r3, #15
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d208      	bcs.n	800aec8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aeb6:	4b11      	ldr	r3, [pc, #68]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800aeb8:	699b      	ldr	r3, [r3, #24]
 800aeba:	f023 020f 	bic.w	r2, r3, #15
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	490e      	ldr	r1, [pc, #56]	; (800aefc <HAL_RCC_ClockConfig+0x244>)
 800aec4:	4313      	orrs	r3, r2
 800aec6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aec8:	4b0b      	ldr	r3, [pc, #44]	; (800aef8 <HAL_RCC_ClockConfig+0x240>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f003 030f 	and.w	r3, r3, #15
 800aed0:	683a      	ldr	r2, [r7, #0]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d214      	bcs.n	800af00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aed6:	4b08      	ldr	r3, [pc, #32]	; (800aef8 <HAL_RCC_ClockConfig+0x240>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f023 020f 	bic.w	r2, r3, #15
 800aede:	4906      	ldr	r1, [pc, #24]	; (800aef8 <HAL_RCC_ClockConfig+0x240>)
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aee6:	4b04      	ldr	r3, [pc, #16]	; (800aef8 <HAL_RCC_ClockConfig+0x240>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f003 030f 	and.w	r3, r3, #15
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d005      	beq.n	800af00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	e086      	b.n	800b006 <HAL_RCC_ClockConfig+0x34e>
 800aef8:	52002000 	.word	0x52002000
 800aefc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 0304 	and.w	r3, r3, #4
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d010      	beq.n	800af2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	691a      	ldr	r2, [r3, #16]
 800af10:	4b3f      	ldr	r3, [pc, #252]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af12:	699b      	ldr	r3, [r3, #24]
 800af14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af18:	429a      	cmp	r2, r3
 800af1a:	d208      	bcs.n	800af2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800af1c:	4b3c      	ldr	r3, [pc, #240]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	4939      	ldr	r1, [pc, #228]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af2a:	4313      	orrs	r3, r2
 800af2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f003 0308 	and.w	r3, r3, #8
 800af36:	2b00      	cmp	r3, #0
 800af38:	d010      	beq.n	800af5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	695a      	ldr	r2, [r3, #20]
 800af3e:	4b34      	ldr	r3, [pc, #208]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af40:	69db      	ldr	r3, [r3, #28]
 800af42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af46:	429a      	cmp	r2, r3
 800af48:	d208      	bcs.n	800af5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800af4a:	4b31      	ldr	r3, [pc, #196]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af4c:	69db      	ldr	r3, [r3, #28]
 800af4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	492e      	ldr	r1, [pc, #184]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af58:	4313      	orrs	r3, r2
 800af5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f003 0310 	and.w	r3, r3, #16
 800af64:	2b00      	cmp	r3, #0
 800af66:	d010      	beq.n	800af8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	699a      	ldr	r2, [r3, #24]
 800af6c:	4b28      	ldr	r3, [pc, #160]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af6e:	69db      	ldr	r3, [r3, #28]
 800af70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af74:	429a      	cmp	r2, r3
 800af76:	d208      	bcs.n	800af8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af78:	4b25      	ldr	r3, [pc, #148]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af7a:	69db      	ldr	r3, [r3, #28]
 800af7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	699b      	ldr	r3, [r3, #24]
 800af84:	4922      	ldr	r1, [pc, #136]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af86:	4313      	orrs	r3, r2
 800af88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f003 0320 	and.w	r3, r3, #32
 800af92:	2b00      	cmp	r3, #0
 800af94:	d010      	beq.n	800afb8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	69da      	ldr	r2, [r3, #28]
 800af9a:	4b1d      	ldr	r3, [pc, #116]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d208      	bcs.n	800afb8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800afa6:	4b1a      	ldr	r3, [pc, #104]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	69db      	ldr	r3, [r3, #28]
 800afb2:	4917      	ldr	r1, [pc, #92]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800afb4:	4313      	orrs	r3, r2
 800afb6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800afb8:	f000 f89e 	bl	800b0f8 <HAL_RCC_GetSysClockFreq>
 800afbc:	4602      	mov	r2, r0
 800afbe:	4b14      	ldr	r3, [pc, #80]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	0a1b      	lsrs	r3, r3, #8
 800afc4:	f003 030f 	and.w	r3, r3, #15
 800afc8:	4912      	ldr	r1, [pc, #72]	; (800b014 <HAL_RCC_ClockConfig+0x35c>)
 800afca:	5ccb      	ldrb	r3, [r1, r3]
 800afcc:	f003 031f 	and.w	r3, r3, #31
 800afd0:	fa22 f303 	lsr.w	r3, r2, r3
 800afd4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800afd6:	4b0e      	ldr	r3, [pc, #56]	; (800b010 <HAL_RCC_ClockConfig+0x358>)
 800afd8:	699b      	ldr	r3, [r3, #24]
 800afda:	f003 030f 	and.w	r3, r3, #15
 800afde:	4a0d      	ldr	r2, [pc, #52]	; (800b014 <HAL_RCC_ClockConfig+0x35c>)
 800afe0:	5cd3      	ldrb	r3, [r2, r3]
 800afe2:	f003 031f 	and.w	r3, r3, #31
 800afe6:	693a      	ldr	r2, [r7, #16]
 800afe8:	fa22 f303 	lsr.w	r3, r2, r3
 800afec:	4a0a      	ldr	r2, [pc, #40]	; (800b018 <HAL_RCC_ClockConfig+0x360>)
 800afee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aff0:	4a0a      	ldr	r2, [pc, #40]	; (800b01c <HAL_RCC_ClockConfig+0x364>)
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800aff6:	4b0a      	ldr	r3, [pc, #40]	; (800b020 <HAL_RCC_ClockConfig+0x368>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4618      	mov	r0, r3
 800affc:	f7f9 f938 	bl	8004270 <HAL_InitTick>
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b004:	7bfb      	ldrb	r3, [r7, #15]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3718      	adds	r7, #24
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	58024400 	.word	0x58024400
 800b014:	080108b0 	.word	0x080108b0
 800b018:	24000048 	.word	0x24000048
 800b01c:	24000044 	.word	0x24000044
 800b020:	2400004c 	.word	0x2400004c

0800b024 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b08c      	sub	sp, #48	; 0x30
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d12a      	bne.n	800b08c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b036:	4b2d      	ldr	r3, [pc, #180]	; (800b0ec <HAL_RCC_MCOConfig+0xc8>)
 800b038:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b03c:	4a2b      	ldr	r2, [pc, #172]	; (800b0ec <HAL_RCC_MCOConfig+0xc8>)
 800b03e:	f043 0301 	orr.w	r3, r3, #1
 800b042:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b046:	4b29      	ldr	r3, [pc, #164]	; (800b0ec <HAL_RCC_MCOConfig+0xc8>)
 800b048:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b04c:	f003 0301 	and.w	r3, r3, #1
 800b050:	61bb      	str	r3, [r7, #24]
 800b052:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b054:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b05a:	2302      	movs	r3, #2
 800b05c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b05e:	2303      	movs	r3, #3
 800b060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b062:	2300      	movs	r3, #0
 800b064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b066:	2300      	movs	r3, #0
 800b068:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b06a:	f107 031c 	add.w	r3, r7, #28
 800b06e:	4619      	mov	r1, r3
 800b070:	481f      	ldr	r0, [pc, #124]	; (800b0f0 <HAL_RCC_MCOConfig+0xcc>)
 800b072:	f7fd fcc1 	bl	80089f8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b076:	4b1d      	ldr	r3, [pc, #116]	; (800b0ec <HAL_RCC_MCOConfig+0xc8>)
 800b078:	691b      	ldr	r3, [r3, #16]
 800b07a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b07e:	68b9      	ldr	r1, [r7, #8]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	430b      	orrs	r3, r1
 800b084:	4919      	ldr	r1, [pc, #100]	; (800b0ec <HAL_RCC_MCOConfig+0xc8>)
 800b086:	4313      	orrs	r3, r2
 800b088:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b08a:	e02a      	b.n	800b0e2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b08c:	4b17      	ldr	r3, [pc, #92]	; (800b0ec <HAL_RCC_MCOConfig+0xc8>)
 800b08e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b092:	4a16      	ldr	r2, [pc, #88]	; (800b0ec <HAL_RCC_MCOConfig+0xc8>)
 800b094:	f043 0304 	orr.w	r3, r3, #4
 800b098:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b09c:	4b13      	ldr	r3, [pc, #76]	; (800b0ec <HAL_RCC_MCOConfig+0xc8>)
 800b09e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b0a2:	f003 0304 	and.w	r3, r3, #4
 800b0a6:	617b      	str	r3, [r7, #20]
 800b0a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b0aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0b0:	2302      	movs	r3, #2
 800b0b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0b4:	2303      	movs	r3, #3
 800b0b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b0c0:	f107 031c 	add.w	r3, r7, #28
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	480b      	ldr	r0, [pc, #44]	; (800b0f4 <HAL_RCC_MCOConfig+0xd0>)
 800b0c8:	f7fd fc96 	bl	80089f8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b0cc:	4b07      	ldr	r3, [pc, #28]	; (800b0ec <HAL_RCC_MCOConfig+0xc8>)
 800b0ce:	691b      	ldr	r3, [r3, #16]
 800b0d0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	01d9      	lsls	r1, r3, #7
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	430b      	orrs	r3, r1
 800b0dc:	4903      	ldr	r1, [pc, #12]	; (800b0ec <HAL_RCC_MCOConfig+0xc8>)
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	610b      	str	r3, [r1, #16]
}
 800b0e2:	bf00      	nop
 800b0e4:	3730      	adds	r7, #48	; 0x30
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	58024400 	.word	0x58024400
 800b0f0:	58020000 	.word	0x58020000
 800b0f4:	58020800 	.word	0x58020800

0800b0f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b089      	sub	sp, #36	; 0x24
 800b0fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b0fe:	4bb3      	ldr	r3, [pc, #716]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b106:	2b18      	cmp	r3, #24
 800b108:	f200 8155 	bhi.w	800b3b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800b10c:	a201      	add	r2, pc, #4	; (adr r2, 800b114 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b112:	bf00      	nop
 800b114:	0800b179 	.word	0x0800b179
 800b118:	0800b3b7 	.word	0x0800b3b7
 800b11c:	0800b3b7 	.word	0x0800b3b7
 800b120:	0800b3b7 	.word	0x0800b3b7
 800b124:	0800b3b7 	.word	0x0800b3b7
 800b128:	0800b3b7 	.word	0x0800b3b7
 800b12c:	0800b3b7 	.word	0x0800b3b7
 800b130:	0800b3b7 	.word	0x0800b3b7
 800b134:	0800b19f 	.word	0x0800b19f
 800b138:	0800b3b7 	.word	0x0800b3b7
 800b13c:	0800b3b7 	.word	0x0800b3b7
 800b140:	0800b3b7 	.word	0x0800b3b7
 800b144:	0800b3b7 	.word	0x0800b3b7
 800b148:	0800b3b7 	.word	0x0800b3b7
 800b14c:	0800b3b7 	.word	0x0800b3b7
 800b150:	0800b3b7 	.word	0x0800b3b7
 800b154:	0800b1a5 	.word	0x0800b1a5
 800b158:	0800b3b7 	.word	0x0800b3b7
 800b15c:	0800b3b7 	.word	0x0800b3b7
 800b160:	0800b3b7 	.word	0x0800b3b7
 800b164:	0800b3b7 	.word	0x0800b3b7
 800b168:	0800b3b7 	.word	0x0800b3b7
 800b16c:	0800b3b7 	.word	0x0800b3b7
 800b170:	0800b3b7 	.word	0x0800b3b7
 800b174:	0800b1ab 	.word	0x0800b1ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b178:	4b94      	ldr	r3, [pc, #592]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 0320 	and.w	r3, r3, #32
 800b180:	2b00      	cmp	r3, #0
 800b182:	d009      	beq.n	800b198 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b184:	4b91      	ldr	r3, [pc, #580]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	08db      	lsrs	r3, r3, #3
 800b18a:	f003 0303 	and.w	r3, r3, #3
 800b18e:	4a90      	ldr	r2, [pc, #576]	; (800b3d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b190:	fa22 f303 	lsr.w	r3, r2, r3
 800b194:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b196:	e111      	b.n	800b3bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b198:	4b8d      	ldr	r3, [pc, #564]	; (800b3d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b19a:	61bb      	str	r3, [r7, #24]
      break;
 800b19c:	e10e      	b.n	800b3bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b19e:	4b8d      	ldr	r3, [pc, #564]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b1a0:	61bb      	str	r3, [r7, #24]
      break;
 800b1a2:	e10b      	b.n	800b3bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b1a4:	4b8c      	ldr	r3, [pc, #560]	; (800b3d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b1a6:	61bb      	str	r3, [r7, #24]
      break;
 800b1a8:	e108      	b.n	800b3bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1aa:	4b88      	ldr	r3, [pc, #544]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ae:	f003 0303 	and.w	r3, r3, #3
 800b1b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b1b4:	4b85      	ldr	r3, [pc, #532]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b8:	091b      	lsrs	r3, r3, #4
 800b1ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b1c0:	4b82      	ldr	r3, [pc, #520]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c4:	f003 0301 	and.w	r3, r3, #1
 800b1c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b1ca:	4b80      	ldr	r3, [pc, #512]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ce:	08db      	lsrs	r3, r3, #3
 800b1d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1d4:	68fa      	ldr	r2, [r7, #12]
 800b1d6:	fb02 f303 	mul.w	r3, r2, r3
 800b1da:	ee07 3a90 	vmov	s15, r3
 800b1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	f000 80e1 	beq.w	800b3b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	f000 8083 	beq.w	800b2fc <HAL_RCC_GetSysClockFreq+0x204>
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	f200 80a1 	bhi.w	800b340 <HAL_RCC_GetSysClockFreq+0x248>
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d003      	beq.n	800b20c <HAL_RCC_GetSysClockFreq+0x114>
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	2b01      	cmp	r3, #1
 800b208:	d056      	beq.n	800b2b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b20a:	e099      	b.n	800b340 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b20c:	4b6f      	ldr	r3, [pc, #444]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 0320 	and.w	r3, r3, #32
 800b214:	2b00      	cmp	r3, #0
 800b216:	d02d      	beq.n	800b274 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b218:	4b6c      	ldr	r3, [pc, #432]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	08db      	lsrs	r3, r3, #3
 800b21e:	f003 0303 	and.w	r3, r3, #3
 800b222:	4a6b      	ldr	r2, [pc, #428]	; (800b3d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b224:	fa22 f303 	lsr.w	r3, r2, r3
 800b228:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	ee07 3a90 	vmov	s15, r3
 800b230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	ee07 3a90 	vmov	s15, r3
 800b23a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b23e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b242:	4b62      	ldr	r3, [pc, #392]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b24a:	ee07 3a90 	vmov	s15, r3
 800b24e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b252:	ed97 6a02 	vldr	s12, [r7, #8]
 800b256:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b3dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b25a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b25e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b26a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b26e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b272:	e087      	b.n	800b384 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	ee07 3a90 	vmov	s15, r3
 800b27a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b27e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b3e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b286:	4b51      	ldr	r3, [pc, #324]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b28e:	ee07 3a90 	vmov	s15, r3
 800b292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b296:	ed97 6a02 	vldr	s12, [r7, #8]
 800b29a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b3dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b29e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b2b6:	e065      	b.n	800b384 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	ee07 3a90 	vmov	s15, r3
 800b2be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b3e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b2c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ca:	4b40      	ldr	r3, [pc, #256]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2d2:	ee07 3a90 	vmov	s15, r3
 800b2d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2da:	ed97 6a02 	vldr	s12, [r7, #8]
 800b2de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b3dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b2e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b2fa:	e043      	b.n	800b384 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	ee07 3a90 	vmov	s15, r3
 800b302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b306:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b3e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b30a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b30e:	4b2f      	ldr	r3, [pc, #188]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b316:	ee07 3a90 	vmov	s15, r3
 800b31a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b31e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b322:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b3dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b32a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b32e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b33a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b33e:	e021      	b.n	800b384 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	ee07 3a90 	vmov	s15, r3
 800b346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b34a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b3e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b34e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b352:	4b1e      	ldr	r3, [pc, #120]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b35a:	ee07 3a90 	vmov	s15, r3
 800b35e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b362:	ed97 6a02 	vldr	s12, [r7, #8]
 800b366:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b3dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800b36a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b36e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b37a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b37e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b382:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b384:	4b11      	ldr	r3, [pc, #68]	; (800b3cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b388:	0a5b      	lsrs	r3, r3, #9
 800b38a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b38e:	3301      	adds	r3, #1
 800b390:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	ee07 3a90 	vmov	s15, r3
 800b398:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b39c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3a8:	ee17 3a90 	vmov	r3, s15
 800b3ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b3ae:	e005      	b.n	800b3bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	61bb      	str	r3, [r7, #24]
      break;
 800b3b4:	e002      	b.n	800b3bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b3b6:	4b07      	ldr	r3, [pc, #28]	; (800b3d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b3b8:	61bb      	str	r3, [r7, #24]
      break;
 800b3ba:	bf00      	nop
  }

  return sysclockfreq;
 800b3bc:	69bb      	ldr	r3, [r7, #24]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3724      	adds	r7, #36	; 0x24
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	58024400 	.word	0x58024400
 800b3d0:	03d09000 	.word	0x03d09000
 800b3d4:	003d0900 	.word	0x003d0900
 800b3d8:	016e3600 	.word	0x016e3600
 800b3dc:	46000000 	.word	0x46000000
 800b3e0:	4c742400 	.word	0x4c742400
 800b3e4:	4a742400 	.word	0x4a742400
 800b3e8:	4bb71b00 	.word	0x4bb71b00

0800b3ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b3f2:	f7ff fe81 	bl	800b0f8 <HAL_RCC_GetSysClockFreq>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	4b10      	ldr	r3, [pc, #64]	; (800b43c <HAL_RCC_GetHCLKFreq+0x50>)
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	0a1b      	lsrs	r3, r3, #8
 800b3fe:	f003 030f 	and.w	r3, r3, #15
 800b402:	490f      	ldr	r1, [pc, #60]	; (800b440 <HAL_RCC_GetHCLKFreq+0x54>)
 800b404:	5ccb      	ldrb	r3, [r1, r3]
 800b406:	f003 031f 	and.w	r3, r3, #31
 800b40a:	fa22 f303 	lsr.w	r3, r2, r3
 800b40e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b410:	4b0a      	ldr	r3, [pc, #40]	; (800b43c <HAL_RCC_GetHCLKFreq+0x50>)
 800b412:	699b      	ldr	r3, [r3, #24]
 800b414:	f003 030f 	and.w	r3, r3, #15
 800b418:	4a09      	ldr	r2, [pc, #36]	; (800b440 <HAL_RCC_GetHCLKFreq+0x54>)
 800b41a:	5cd3      	ldrb	r3, [r2, r3]
 800b41c:	f003 031f 	and.w	r3, r3, #31
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	fa22 f303 	lsr.w	r3, r2, r3
 800b426:	4a07      	ldr	r2, [pc, #28]	; (800b444 <HAL_RCC_GetHCLKFreq+0x58>)
 800b428:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b42a:	4a07      	ldr	r2, [pc, #28]	; (800b448 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b430:	4b04      	ldr	r3, [pc, #16]	; (800b444 <HAL_RCC_GetHCLKFreq+0x58>)
 800b432:	681b      	ldr	r3, [r3, #0]
}
 800b434:	4618      	mov	r0, r3
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	58024400 	.word	0x58024400
 800b440:	080108b0 	.word	0x080108b0
 800b444:	24000048 	.word	0x24000048
 800b448:	24000044 	.word	0x24000044

0800b44c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b450:	f7ff ffcc 	bl	800b3ec <HAL_RCC_GetHCLKFreq>
 800b454:	4602      	mov	r2, r0
 800b456:	4b06      	ldr	r3, [pc, #24]	; (800b470 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b458:	69db      	ldr	r3, [r3, #28]
 800b45a:	091b      	lsrs	r3, r3, #4
 800b45c:	f003 0307 	and.w	r3, r3, #7
 800b460:	4904      	ldr	r1, [pc, #16]	; (800b474 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b462:	5ccb      	ldrb	r3, [r1, r3]
 800b464:	f003 031f 	and.w	r3, r3, #31
 800b468:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	58024400 	.word	0x58024400
 800b474:	080108b0 	.word	0x080108b0

0800b478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b47c:	f7ff ffb6 	bl	800b3ec <HAL_RCC_GetHCLKFreq>
 800b480:	4602      	mov	r2, r0
 800b482:	4b06      	ldr	r3, [pc, #24]	; (800b49c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b484:	69db      	ldr	r3, [r3, #28]
 800b486:	0a1b      	lsrs	r3, r3, #8
 800b488:	f003 0307 	and.w	r3, r3, #7
 800b48c:	4904      	ldr	r1, [pc, #16]	; (800b4a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b48e:	5ccb      	ldrb	r3, [r1, r3]
 800b490:	f003 031f 	and.w	r3, r3, #31
 800b494:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b498:	4618      	mov	r0, r3
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	58024400 	.word	0x58024400
 800b4a0:	080108b0 	.word	0x080108b0

0800b4a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b4a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b4a8:	b0c8      	sub	sp, #288	; 0x120
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b4bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b4c8:	2500      	movs	r5, #0
 800b4ca:	ea54 0305 	orrs.w	r3, r4, r5
 800b4ce:	d049      	beq.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b4d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b4da:	d02f      	beq.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b4dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b4e0:	d828      	bhi.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b4e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4e6:	d01a      	beq.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b4e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4ec:	d822      	bhi.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d003      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b4f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4f6:	d007      	beq.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b4f8:	e01c      	b.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4fa:	4ba7      	ldr	r3, [pc, #668]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4fe:	4aa6      	ldr	r2, [pc, #664]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b504:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b506:	e01a      	b.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b50c:	3308      	adds	r3, #8
 800b50e:	2102      	movs	r1, #2
 800b510:	4618      	mov	r0, r3
 800b512:	f001 fc43 	bl	800cd9c <RCCEx_PLL2_Config>
 800b516:	4603      	mov	r3, r0
 800b518:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b51c:	e00f      	b.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b51e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b522:	3328      	adds	r3, #40	; 0x28
 800b524:	2102      	movs	r1, #2
 800b526:	4618      	mov	r0, r3
 800b528:	f001 fcea 	bl	800cf00 <RCCEx_PLL3_Config>
 800b52c:	4603      	mov	r3, r0
 800b52e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b532:	e004      	b.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b534:	2301      	movs	r3, #1
 800b536:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b53a:	e000      	b.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b53c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b53e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b542:	2b00      	cmp	r3, #0
 800b544:	d10a      	bne.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b546:	4b94      	ldr	r3, [pc, #592]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b54a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b54e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b554:	4a90      	ldr	r2, [pc, #576]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b556:	430b      	orrs	r3, r1
 800b558:	6513      	str	r3, [r2, #80]	; 0x50
 800b55a:	e003      	b.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b55c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b560:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b570:	f04f 0900 	mov.w	r9, #0
 800b574:	ea58 0309 	orrs.w	r3, r8, r9
 800b578:	d047      	beq.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b57a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b57e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b580:	2b04      	cmp	r3, #4
 800b582:	d82a      	bhi.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b584:	a201      	add	r2, pc, #4	; (adr r2, 800b58c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b58a:	bf00      	nop
 800b58c:	0800b5a1 	.word	0x0800b5a1
 800b590:	0800b5af 	.word	0x0800b5af
 800b594:	0800b5c5 	.word	0x0800b5c5
 800b598:	0800b5e3 	.word	0x0800b5e3
 800b59c:	0800b5e3 	.word	0x0800b5e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5a0:	4b7d      	ldr	r3, [pc, #500]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a4:	4a7c      	ldr	r2, [pc, #496]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b5ac:	e01a      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5b2:	3308      	adds	r3, #8
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f001 fbf0 	bl	800cd9c <RCCEx_PLL2_Config>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b5c2:	e00f      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b5c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5c8:	3328      	adds	r3, #40	; 0x28
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f001 fc97 	bl	800cf00 <RCCEx_PLL3_Config>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b5d8:	e004      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b5e0:	e000      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b5e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d10a      	bne.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b5ec:	4b6a      	ldr	r3, [pc, #424]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5f0:	f023 0107 	bic.w	r1, r3, #7
 800b5f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5fa:	4a67      	ldr	r2, [pc, #412]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5fc:	430b      	orrs	r3, r1
 800b5fe:	6513      	str	r3, [r2, #80]	; 0x50
 800b600:	e003      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b602:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b606:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b60a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b612:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b616:	f04f 0b00 	mov.w	fp, #0
 800b61a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b61e:	d054      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b626:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b62a:	d036      	beq.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b62c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b630:	d82f      	bhi.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b636:	d032      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b63c:	d829      	bhi.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b63e:	2bc0      	cmp	r3, #192	; 0xc0
 800b640:	d02f      	beq.n	800b6a2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b642:	2bc0      	cmp	r3, #192	; 0xc0
 800b644:	d825      	bhi.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b646:	2b80      	cmp	r3, #128	; 0x80
 800b648:	d018      	beq.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b64a:	2b80      	cmp	r3, #128	; 0x80
 800b64c:	d821      	bhi.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d002      	beq.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b652:	2b40      	cmp	r3, #64	; 0x40
 800b654:	d007      	beq.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b656:	e01c      	b.n	800b692 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b658:	4b4f      	ldr	r3, [pc, #316]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b65c:	4a4e      	ldr	r2, [pc, #312]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b65e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b662:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b664:	e01e      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b66a:	3308      	adds	r3, #8
 800b66c:	2100      	movs	r1, #0
 800b66e:	4618      	mov	r0, r3
 800b670:	f001 fb94 	bl	800cd9c <RCCEx_PLL2_Config>
 800b674:	4603      	mov	r3, r0
 800b676:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b67a:	e013      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b67c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b680:	3328      	adds	r3, #40	; 0x28
 800b682:	2100      	movs	r1, #0
 800b684:	4618      	mov	r0, r3
 800b686:	f001 fc3b 	bl	800cf00 <RCCEx_PLL3_Config>
 800b68a:	4603      	mov	r3, r0
 800b68c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b690:	e008      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b692:	2301      	movs	r3, #1
 800b694:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b698:	e004      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b69a:	bf00      	nop
 800b69c:	e002      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b69e:	bf00      	nop
 800b6a0:	e000      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b6a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d10a      	bne.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b6ac:	4b3a      	ldr	r3, [pc, #232]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6b0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b6b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6ba:	4a37      	ldr	r2, [pc, #220]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6bc:	430b      	orrs	r3, r1
 800b6be:	6513      	str	r3, [r2, #80]	; 0x50
 800b6c0:	e003      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b6c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b6ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b6d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6da:	2300      	movs	r3, #0
 800b6dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b6e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	d05c      	beq.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b6ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6f0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b6f4:	d03b      	beq.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b6f6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b6fa:	d834      	bhi.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b6fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b700:	d037      	beq.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b706:	d82e      	bhi.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b708:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b70c:	d033      	beq.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b70e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b712:	d828      	bhi.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b718:	d01a      	beq.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b71a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b71e:	d822      	bhi.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b720:	2b00      	cmp	r3, #0
 800b722:	d003      	beq.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b728:	d007      	beq.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b72a:	e01c      	b.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b72c:	4b1a      	ldr	r3, [pc, #104]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b730:	4a19      	ldr	r2, [pc, #100]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b736:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b738:	e01e      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b73a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b73e:	3308      	adds	r3, #8
 800b740:	2100      	movs	r1, #0
 800b742:	4618      	mov	r0, r3
 800b744:	f001 fb2a 	bl	800cd9c <RCCEx_PLL2_Config>
 800b748:	4603      	mov	r3, r0
 800b74a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b74e:	e013      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b750:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b754:	3328      	adds	r3, #40	; 0x28
 800b756:	2100      	movs	r1, #0
 800b758:	4618      	mov	r0, r3
 800b75a:	f001 fbd1 	bl	800cf00 <RCCEx_PLL3_Config>
 800b75e:	4603      	mov	r3, r0
 800b760:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b764:	e008      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b76c:	e004      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b76e:	bf00      	nop
 800b770:	e002      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b772:	bf00      	nop
 800b774:	e000      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b776:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b778:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10d      	bne.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b780:	4b05      	ldr	r3, [pc, #20]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b784:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800b788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b78c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b78e:	4a02      	ldr	r2, [pc, #8]	; (800b798 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b790:	430b      	orrs	r3, r1
 800b792:	6513      	str	r3, [r2, #80]	; 0x50
 800b794:	e006      	b.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b796:	bf00      	nop
 800b798:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b79c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b7a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b7b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b7ba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b7be:	460b      	mov	r3, r1
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	d03a      	beq.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b7c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7ca:	2b30      	cmp	r3, #48	; 0x30
 800b7cc:	d01f      	beq.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b7ce:	2b30      	cmp	r3, #48	; 0x30
 800b7d0:	d819      	bhi.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b7d2:	2b20      	cmp	r3, #32
 800b7d4:	d00c      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b7d6:	2b20      	cmp	r3, #32
 800b7d8:	d815      	bhi.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d019      	beq.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b7de:	2b10      	cmp	r3, #16
 800b7e0:	d111      	bne.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7e2:	4bae      	ldr	r3, [pc, #696]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e6:	4aad      	ldr	r2, [pc, #692]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b7ee:	e011      	b.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7f4:	3308      	adds	r3, #8
 800b7f6:	2102      	movs	r1, #2
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f001 facf 	bl	800cd9c <RCCEx_PLL2_Config>
 800b7fe:	4603      	mov	r3, r0
 800b800:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b804:	e006      	b.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b80c:	e002      	b.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b80e:	bf00      	nop
 800b810:	e000      	b.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b812:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b814:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d10a      	bne.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b81c:	4b9f      	ldr	r3, [pc, #636]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b81e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b820:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b82a:	4a9c      	ldr	r2, [pc, #624]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b82c:	430b      	orrs	r3, r1
 800b82e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b830:	e003      	b.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b832:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b836:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b83a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b842:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b846:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b84a:	2300      	movs	r3, #0
 800b84c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b850:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b854:	460b      	mov	r3, r1
 800b856:	4313      	orrs	r3, r2
 800b858:	d051      	beq.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b85a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b85e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b864:	d035      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b86a:	d82e      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b86c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b870:	d031      	beq.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b872:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b876:	d828      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b87c:	d01a      	beq.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b87e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b882:	d822      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b884:	2b00      	cmp	r3, #0
 800b886:	d003      	beq.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800b888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b88c:	d007      	beq.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800b88e:	e01c      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b890:	4b82      	ldr	r3, [pc, #520]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b894:	4a81      	ldr	r2, [pc, #516]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b89a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b89c:	e01c      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b89e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f001 fa78 	bl	800cd9c <RCCEx_PLL2_Config>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b8b2:	e011      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8b8:	3328      	adds	r3, #40	; 0x28
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f001 fb1f 	bl	800cf00 <RCCEx_PLL3_Config>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b8c8:	e006      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b8d0:	e002      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b8d2:	bf00      	nop
 800b8d4:	e000      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b8d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d10a      	bne.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b8e0:	4b6e      	ldr	r3, [pc, #440]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8e4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b8e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8ee:	4a6b      	ldr	r2, [pc, #428]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8f0:	430b      	orrs	r3, r1
 800b8f2:	6513      	str	r3, [r2, #80]	; 0x50
 800b8f4:	e003      	b.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b8fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b906:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b90a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b90e:	2300      	movs	r3, #0
 800b910:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b914:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b918:	460b      	mov	r3, r1
 800b91a:	4313      	orrs	r3, r2
 800b91c:	d053      	beq.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b91e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b928:	d033      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800b92a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b92e:	d82c      	bhi.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b930:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b934:	d02f      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800b936:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b93a:	d826      	bhi.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b93c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b940:	d02b      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b942:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b946:	d820      	bhi.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b94c:	d012      	beq.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b94e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b952:	d81a      	bhi.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b954:	2b00      	cmp	r3, #0
 800b956:	d022      	beq.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800b958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b95c:	d115      	bne.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b95e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b962:	3308      	adds	r3, #8
 800b964:	2101      	movs	r1, #1
 800b966:	4618      	mov	r0, r3
 800b968:	f001 fa18 	bl	800cd9c <RCCEx_PLL2_Config>
 800b96c:	4603      	mov	r3, r0
 800b96e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b972:	e015      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b978:	3328      	adds	r3, #40	; 0x28
 800b97a:	2101      	movs	r1, #1
 800b97c:	4618      	mov	r0, r3
 800b97e:	f001 fabf 	bl	800cf00 <RCCEx_PLL3_Config>
 800b982:	4603      	mov	r3, r0
 800b984:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b988:	e00a      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b990:	e006      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b992:	bf00      	nop
 800b994:	e004      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b996:	bf00      	nop
 800b998:	e002      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b99a:	bf00      	nop
 800b99c:	e000      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b99e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d10a      	bne.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b9a8:	4b3c      	ldr	r3, [pc, #240]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b9b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9b6:	4a39      	ldr	r2, [pc, #228]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9b8:	430b      	orrs	r3, r1
 800b9ba:	6513      	str	r3, [r2, #80]	; 0x50
 800b9bc:	e003      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b9c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b9c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b9d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b9dc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	d060      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b9e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b9ee:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b9f2:	d039      	beq.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800b9f4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b9f8:	d832      	bhi.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b9fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9fe:	d035      	beq.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ba00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba04:	d82c      	bhi.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ba06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba0a:	d031      	beq.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800ba0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba10:	d826      	bhi.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ba12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba16:	d02d      	beq.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800ba18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba1c:	d820      	bhi.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ba1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba22:	d012      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ba24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba28:	d81a      	bhi.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d024      	beq.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ba2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba32:	d115      	bne.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba38:	3308      	adds	r3, #8
 800ba3a:	2101      	movs	r1, #1
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f001 f9ad 	bl	800cd9c <RCCEx_PLL2_Config>
 800ba42:	4603      	mov	r3, r0
 800ba44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ba48:	e017      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba4e:	3328      	adds	r3, #40	; 0x28
 800ba50:	2101      	movs	r1, #1
 800ba52:	4618      	mov	r0, r3
 800ba54:	f001 fa54 	bl	800cf00 <RCCEx_PLL3_Config>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ba5e:	e00c      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ba66:	e008      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ba68:	bf00      	nop
 800ba6a:	e006      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ba6c:	bf00      	nop
 800ba6e:	e004      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ba70:	bf00      	nop
 800ba72:	e002      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ba74:	bf00      	nop
 800ba76:	e000      	b.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ba78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10e      	bne.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ba82:	4b06      	ldr	r3, [pc, #24]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba86:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ba8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba92:	4a02      	ldr	r2, [pc, #8]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba94:	430b      	orrs	r3, r1
 800ba96:	6593      	str	r3, [r2, #88]	; 0x58
 800ba98:	e006      	b.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ba9a:	bf00      	nop
 800ba9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baa0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800baa4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800baa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800baac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bab8:	2300      	movs	r3, #0
 800baba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800babe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bac2:	460b      	mov	r3, r1
 800bac4:	4313      	orrs	r3, r2
 800bac6:	d037      	beq.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bacc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bad2:	d00e      	beq.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bad8:	d816      	bhi.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bada:	2b00      	cmp	r3, #0
 800badc:	d018      	beq.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bae2:	d111      	bne.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bae4:	4bc4      	ldr	r3, [pc, #784]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae8:	4ac3      	ldr	r2, [pc, #780]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800baea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800baee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800baf0:	e00f      	b.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800baf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800baf6:	3308      	adds	r3, #8
 800baf8:	2101      	movs	r1, #1
 800bafa:	4618      	mov	r0, r3
 800bafc:	f001 f94e 	bl	800cd9c <RCCEx_PLL2_Config>
 800bb00:	4603      	mov	r3, r0
 800bb02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bb06:	e004      	b.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb08:	2301      	movs	r3, #1
 800bb0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bb0e:	e000      	b.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bb10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d10a      	bne.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bb1a:	4bb7      	ldr	r3, [pc, #732]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb1e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bb22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb28:	4ab3      	ldr	r2, [pc, #716]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb2a:	430b      	orrs	r3, r1
 800bb2c:	6513      	str	r3, [r2, #80]	; 0x50
 800bb2e:	e003      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bb38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb40:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bb44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bb4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4313      	orrs	r3, r2
 800bb56:	d039      	beq.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bb58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb5e:	2b03      	cmp	r3, #3
 800bb60:	d81c      	bhi.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bb62:	a201      	add	r2, pc, #4	; (adr r2, 800bb68 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bb64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb68:	0800bba5 	.word	0x0800bba5
 800bb6c:	0800bb79 	.word	0x0800bb79
 800bb70:	0800bb87 	.word	0x0800bb87
 800bb74:	0800bba5 	.word	0x0800bba5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb78:	4b9f      	ldr	r3, [pc, #636]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7c:	4a9e      	ldr	r2, [pc, #632]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bb84:	e00f      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb8a:	3308      	adds	r3, #8
 800bb8c:	2102      	movs	r1, #2
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f001 f904 	bl	800cd9c <RCCEx_PLL2_Config>
 800bb94:	4603      	mov	r3, r0
 800bb96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bb9a:	e004      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bba2:	e000      	b.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bba6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d10a      	bne.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bbae:	4b92      	ldr	r3, [pc, #584]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbb2:	f023 0103 	bic.w	r1, r3, #3
 800bbb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbbc:	4a8e      	ldr	r2, [pc, #568]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbbe:	430b      	orrs	r3, r1
 800bbc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bbc2:	e003      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbc8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bbcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bbd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bbe2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	f000 8099 	beq.w	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bbee:	4b83      	ldr	r3, [pc, #524]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a82      	ldr	r2, [pc, #520]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bbf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bbfa:	f7f8 fb83 	bl	8004304 <HAL_GetTick>
 800bbfe:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc02:	e00b      	b.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc04:	f7f8 fb7e 	bl	8004304 <HAL_GetTick>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bc0e:	1ad3      	subs	r3, r2, r3
 800bc10:	2b64      	cmp	r3, #100	; 0x64
 800bc12:	d903      	bls.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bc14:	2303      	movs	r3, #3
 800bc16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bc1a:	e005      	b.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc1c:	4b77      	ldr	r3, [pc, #476]	; (800bdfc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d0ed      	beq.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bc28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d173      	bne.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bc30:	4b71      	ldr	r3, [pc, #452]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc3c:	4053      	eors	r3, r2
 800bc3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d015      	beq.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bc46:	4b6c      	ldr	r3, [pc, #432]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc4e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc52:	4b69      	ldr	r3, [pc, #420]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc56:	4a68      	ldr	r2, [pc, #416]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc5c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc5e:	4b66      	ldr	r3, [pc, #408]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc62:	4a65      	ldr	r2, [pc, #404]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc68:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bc6a:	4a63      	ldr	r2, [pc, #396]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bc72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc7e:	d118      	bne.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc80:	f7f8 fb40 	bl	8004304 <HAL_GetTick>
 800bc84:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc88:	e00d      	b.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc8a:	f7f8 fb3b 	bl	8004304 <HAL_GetTick>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bc94:	1ad2      	subs	r2, r2, r3
 800bc96:	f241 3388 	movw	r3, #5000	; 0x1388
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d903      	bls.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bc9e:	2303      	movs	r3, #3
 800bca0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800bca4:	e005      	b.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bca6:	4b54      	ldr	r3, [pc, #336]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcaa:	f003 0302 	and.w	r3, r3, #2
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d0eb      	beq.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bcb2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d129      	bne.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bcba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bcc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcca:	d10e      	bne.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bccc:	4b4a      	ldr	r3, [pc, #296]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcce:	691b      	ldr	r3, [r3, #16]
 800bcd0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bcd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bcdc:	091a      	lsrs	r2, r3, #4
 800bcde:	4b48      	ldr	r3, [pc, #288]	; (800be00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bce0:	4013      	ands	r3, r2
 800bce2:	4a45      	ldr	r2, [pc, #276]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bce4:	430b      	orrs	r3, r1
 800bce6:	6113      	str	r3, [r2, #16]
 800bce8:	e005      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bcea:	4b43      	ldr	r3, [pc, #268]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	4a42      	ldr	r2, [pc, #264]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcf0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bcf4:	6113      	str	r3, [r2, #16]
 800bcf6:	4b40      	ldr	r3, [pc, #256]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcf8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bcfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd06:	4a3c      	ldr	r2, [pc, #240]	; (800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd08:	430b      	orrs	r3, r1
 800bd0a:	6713      	str	r3, [r2, #112]	; 0x70
 800bd0c:	e008      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bd0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd12:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800bd16:	e003      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bd20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd28:	f002 0301 	and.w	r3, r2, #1
 800bd2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd30:	2300      	movs	r3, #0
 800bd32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	f000 8090 	beq.w	800be62 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bd42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd4a:	2b28      	cmp	r3, #40	; 0x28
 800bd4c:	d870      	bhi.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bd4e:	a201      	add	r2, pc, #4	; (adr r2, 800bd54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bd50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd54:	0800be39 	.word	0x0800be39
 800bd58:	0800be31 	.word	0x0800be31
 800bd5c:	0800be31 	.word	0x0800be31
 800bd60:	0800be31 	.word	0x0800be31
 800bd64:	0800be31 	.word	0x0800be31
 800bd68:	0800be31 	.word	0x0800be31
 800bd6c:	0800be31 	.word	0x0800be31
 800bd70:	0800be31 	.word	0x0800be31
 800bd74:	0800be05 	.word	0x0800be05
 800bd78:	0800be31 	.word	0x0800be31
 800bd7c:	0800be31 	.word	0x0800be31
 800bd80:	0800be31 	.word	0x0800be31
 800bd84:	0800be31 	.word	0x0800be31
 800bd88:	0800be31 	.word	0x0800be31
 800bd8c:	0800be31 	.word	0x0800be31
 800bd90:	0800be31 	.word	0x0800be31
 800bd94:	0800be1b 	.word	0x0800be1b
 800bd98:	0800be31 	.word	0x0800be31
 800bd9c:	0800be31 	.word	0x0800be31
 800bda0:	0800be31 	.word	0x0800be31
 800bda4:	0800be31 	.word	0x0800be31
 800bda8:	0800be31 	.word	0x0800be31
 800bdac:	0800be31 	.word	0x0800be31
 800bdb0:	0800be31 	.word	0x0800be31
 800bdb4:	0800be39 	.word	0x0800be39
 800bdb8:	0800be31 	.word	0x0800be31
 800bdbc:	0800be31 	.word	0x0800be31
 800bdc0:	0800be31 	.word	0x0800be31
 800bdc4:	0800be31 	.word	0x0800be31
 800bdc8:	0800be31 	.word	0x0800be31
 800bdcc:	0800be31 	.word	0x0800be31
 800bdd0:	0800be31 	.word	0x0800be31
 800bdd4:	0800be39 	.word	0x0800be39
 800bdd8:	0800be31 	.word	0x0800be31
 800bddc:	0800be31 	.word	0x0800be31
 800bde0:	0800be31 	.word	0x0800be31
 800bde4:	0800be31 	.word	0x0800be31
 800bde8:	0800be31 	.word	0x0800be31
 800bdec:	0800be31 	.word	0x0800be31
 800bdf0:	0800be31 	.word	0x0800be31
 800bdf4:	0800be39 	.word	0x0800be39
 800bdf8:	58024400 	.word	0x58024400
 800bdfc:	58024800 	.word	0x58024800
 800be00:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be08:	3308      	adds	r3, #8
 800be0a:	2101      	movs	r1, #1
 800be0c:	4618      	mov	r0, r3
 800be0e:	f000 ffc5 	bl	800cd9c <RCCEx_PLL2_Config>
 800be12:	4603      	mov	r3, r0
 800be14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800be18:	e00f      	b.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be1e:	3328      	adds	r3, #40	; 0x28
 800be20:	2101      	movs	r1, #1
 800be22:	4618      	mov	r0, r3
 800be24:	f001 f86c 	bl	800cf00 <RCCEx_PLL3_Config>
 800be28:	4603      	mov	r3, r0
 800be2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800be2e:	e004      	b.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be30:	2301      	movs	r3, #1
 800be32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800be36:	e000      	b.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800be38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d10b      	bne.n	800be5a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800be42:	4bc0      	ldr	r3, [pc, #768]	; (800c144 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800be44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be46:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800be4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be52:	4abc      	ldr	r2, [pc, #752]	; (800c144 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800be54:	430b      	orrs	r3, r1
 800be56:	6553      	str	r3, [r2, #84]	; 0x54
 800be58:	e003      	b.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be5e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800be62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6a:	f002 0302 	and.w	r3, r2, #2
 800be6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be72:	2300      	movs	r3, #0
 800be74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800be78:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800be7c:	460b      	mov	r3, r1
 800be7e:	4313      	orrs	r3, r2
 800be80:	d043      	beq.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800be82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be8a:	2b05      	cmp	r3, #5
 800be8c:	d824      	bhi.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800be8e:	a201      	add	r2, pc, #4	; (adr r2, 800be94 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800be90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be94:	0800bee1 	.word	0x0800bee1
 800be98:	0800bead 	.word	0x0800bead
 800be9c:	0800bec3 	.word	0x0800bec3
 800bea0:	0800bee1 	.word	0x0800bee1
 800bea4:	0800bee1 	.word	0x0800bee1
 800bea8:	0800bee1 	.word	0x0800bee1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800beac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800beb0:	3308      	adds	r3, #8
 800beb2:	2101      	movs	r1, #1
 800beb4:	4618      	mov	r0, r3
 800beb6:	f000 ff71 	bl	800cd9c <RCCEx_PLL2_Config>
 800beba:	4603      	mov	r3, r0
 800bebc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bec0:	e00f      	b.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bec6:	3328      	adds	r3, #40	; 0x28
 800bec8:	2101      	movs	r1, #1
 800beca:	4618      	mov	r0, r3
 800becc:	f001 f818 	bl	800cf00 <RCCEx_PLL3_Config>
 800bed0:	4603      	mov	r3, r0
 800bed2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bed6:	e004      	b.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bed8:	2301      	movs	r3, #1
 800beda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bede:	e000      	b.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800bee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bee2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d10b      	bne.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800beea:	4b96      	ldr	r3, [pc, #600]	; (800c144 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800beec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beee:	f023 0107 	bic.w	r1, r3, #7
 800bef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800befa:	4a92      	ldr	r2, [pc, #584]	; (800c144 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800befc:	430b      	orrs	r3, r1
 800befe:	6553      	str	r3, [r2, #84]	; 0x54
 800bf00:	e003      	b.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf06:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bf0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf12:	f002 0304 	and.w	r3, r2, #4
 800bf16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf20:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bf24:	460b      	mov	r3, r1
 800bf26:	4313      	orrs	r3, r2
 800bf28:	d043      	beq.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bf2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf32:	2b05      	cmp	r3, #5
 800bf34:	d824      	bhi.n	800bf80 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800bf36:	a201      	add	r2, pc, #4	; (adr r2, 800bf3c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800bf38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf3c:	0800bf89 	.word	0x0800bf89
 800bf40:	0800bf55 	.word	0x0800bf55
 800bf44:	0800bf6b 	.word	0x0800bf6b
 800bf48:	0800bf89 	.word	0x0800bf89
 800bf4c:	0800bf89 	.word	0x0800bf89
 800bf50:	0800bf89 	.word	0x0800bf89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf58:	3308      	adds	r3, #8
 800bf5a:	2101      	movs	r1, #1
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f000 ff1d 	bl	800cd9c <RCCEx_PLL2_Config>
 800bf62:	4603      	mov	r3, r0
 800bf64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bf68:	e00f      	b.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf6e:	3328      	adds	r3, #40	; 0x28
 800bf70:	2101      	movs	r1, #1
 800bf72:	4618      	mov	r0, r3
 800bf74:	f000 ffc4 	bl	800cf00 <RCCEx_PLL3_Config>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bf7e:	e004      	b.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf80:	2301      	movs	r3, #1
 800bf82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bf86:	e000      	b.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800bf88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10b      	bne.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bf92:	4b6c      	ldr	r3, [pc, #432]	; (800c144 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf96:	f023 0107 	bic.w	r1, r3, #7
 800bf9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bfa2:	4a68      	ldr	r2, [pc, #416]	; (800c144 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bfa4:	430b      	orrs	r3, r1
 800bfa6:	6593      	str	r3, [r2, #88]	; 0x58
 800bfa8:	e003      	b.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfaa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bfae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bfb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfba:	f002 0320 	and.w	r3, r2, #32
 800bfbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bfc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bfcc:	460b      	mov	r3, r1
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	d055      	beq.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bfd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bfda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfde:	d033      	beq.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800bfe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfe4:	d82c      	bhi.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bfe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfea:	d02f      	beq.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800bfec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bff0:	d826      	bhi.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bff2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bff6:	d02b      	beq.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800bff8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bffc:	d820      	bhi.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c002:	d012      	beq.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c008:	d81a      	bhi.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d022      	beq.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c00e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c012:	d115      	bne.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c014:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c018:	3308      	adds	r3, #8
 800c01a:	2100      	movs	r1, #0
 800c01c:	4618      	mov	r0, r3
 800c01e:	f000 febd 	bl	800cd9c <RCCEx_PLL2_Config>
 800c022:	4603      	mov	r3, r0
 800c024:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c028:	e015      	b.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c02a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c02e:	3328      	adds	r3, #40	; 0x28
 800c030:	2102      	movs	r1, #2
 800c032:	4618      	mov	r0, r3
 800c034:	f000 ff64 	bl	800cf00 <RCCEx_PLL3_Config>
 800c038:	4603      	mov	r3, r0
 800c03a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c03e:	e00a      	b.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c040:	2301      	movs	r3, #1
 800c042:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c046:	e006      	b.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c048:	bf00      	nop
 800c04a:	e004      	b.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c04c:	bf00      	nop
 800c04e:	e002      	b.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c050:	bf00      	nop
 800c052:	e000      	b.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c054:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c056:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d10b      	bne.n	800c076 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c05e:	4b39      	ldr	r3, [pc, #228]	; (800c144 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c062:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c06a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c06e:	4a35      	ldr	r2, [pc, #212]	; (800c144 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c070:	430b      	orrs	r3, r1
 800c072:	6553      	str	r3, [r2, #84]	; 0x54
 800c074:	e003      	b.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c076:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c07a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c07e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c086:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c08a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c08e:	2300      	movs	r3, #0
 800c090:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c094:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c098:	460b      	mov	r3, r1
 800c09a:	4313      	orrs	r3, r2
 800c09c:	d058      	beq.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c09e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c0a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c0aa:	d033      	beq.n	800c114 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c0ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c0b0:	d82c      	bhi.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c0b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0b6:	d02f      	beq.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c0b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0bc:	d826      	bhi.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c0be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c0c2:	d02b      	beq.n	800c11c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c0c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c0c8:	d820      	bhi.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c0ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0ce:	d012      	beq.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c0d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0d4:	d81a      	bhi.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d022      	beq.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c0da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0de:	d115      	bne.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0e4:	3308      	adds	r3, #8
 800c0e6:	2100      	movs	r1, #0
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f000 fe57 	bl	800cd9c <RCCEx_PLL2_Config>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c0f4:	e015      	b.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c0f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0fa:	3328      	adds	r3, #40	; 0x28
 800c0fc:	2102      	movs	r1, #2
 800c0fe:	4618      	mov	r0, r3
 800c100:	f000 fefe 	bl	800cf00 <RCCEx_PLL3_Config>
 800c104:	4603      	mov	r3, r0
 800c106:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c10a:	e00a      	b.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c112:	e006      	b.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c114:	bf00      	nop
 800c116:	e004      	b.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c118:	bf00      	nop
 800c11a:	e002      	b.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c11c:	bf00      	nop
 800c11e:	e000      	b.n	800c122 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c120:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c122:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c126:	2b00      	cmp	r3, #0
 800c128:	d10e      	bne.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c12a:	4b06      	ldr	r3, [pc, #24]	; (800c144 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c12c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c12e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c132:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c136:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c13a:	4a02      	ldr	r2, [pc, #8]	; (800c144 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c13c:	430b      	orrs	r3, r1
 800c13e:	6593      	str	r3, [r2, #88]	; 0x58
 800c140:	e006      	b.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c142:	bf00      	nop
 800c144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c148:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c14c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c158:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c15c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c160:	2300      	movs	r3, #0
 800c162:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c166:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c16a:	460b      	mov	r3, r1
 800c16c:	4313      	orrs	r3, r2
 800c16e:	d055      	beq.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c174:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c178:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c17c:	d033      	beq.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c17e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c182:	d82c      	bhi.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c188:	d02f      	beq.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c18a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c18e:	d826      	bhi.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c190:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c194:	d02b      	beq.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c196:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c19a:	d820      	bhi.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c19c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1a0:	d012      	beq.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c1a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1a6:	d81a      	bhi.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d022      	beq.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c1ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1b0:	d115      	bne.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1b6:	3308      	adds	r3, #8
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f000 fdee 	bl	800cd9c <RCCEx_PLL2_Config>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c1c6:	e015      	b.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1cc:	3328      	adds	r3, #40	; 0x28
 800c1ce:	2102      	movs	r1, #2
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f000 fe95 	bl	800cf00 <RCCEx_PLL3_Config>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c1dc:	e00a      	b.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c1e4:	e006      	b.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c1e6:	bf00      	nop
 800c1e8:	e004      	b.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c1ea:	bf00      	nop
 800c1ec:	e002      	b.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c1ee:	bf00      	nop
 800c1f0:	e000      	b.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c1f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d10b      	bne.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c1fc:	4ba1      	ldr	r3, [pc, #644]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c1fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c200:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c204:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c208:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c20c:	4a9d      	ldr	r2, [pc, #628]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c20e:	430b      	orrs	r3, r1
 800c210:	6593      	str	r3, [r2, #88]	; 0x58
 800c212:	e003      	b.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c214:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c218:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c21c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c224:	f002 0308 	and.w	r3, r2, #8
 800c228:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c22c:	2300      	movs	r3, #0
 800c22e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c232:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c236:	460b      	mov	r3, r1
 800c238:	4313      	orrs	r3, r2
 800c23a:	d01e      	beq.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c23c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c248:	d10c      	bne.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c24a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c24e:	3328      	adds	r3, #40	; 0x28
 800c250:	2102      	movs	r1, #2
 800c252:	4618      	mov	r0, r3
 800c254:	f000 fe54 	bl	800cf00 <RCCEx_PLL3_Config>
 800c258:	4603      	mov	r3, r0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d002      	beq.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c25e:	2301      	movs	r3, #1
 800c260:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c264:	4b87      	ldr	r3, [pc, #540]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c268:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c26c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c274:	4a83      	ldr	r2, [pc, #524]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c276:	430b      	orrs	r3, r1
 800c278:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c27a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c282:	f002 0310 	and.w	r3, r2, #16
 800c286:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c28a:	2300      	movs	r3, #0
 800c28c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c290:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c294:	460b      	mov	r3, r1
 800c296:	4313      	orrs	r3, r2
 800c298:	d01e      	beq.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c29a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c29e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c2a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2a6:	d10c      	bne.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c2a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2ac:	3328      	adds	r3, #40	; 0x28
 800c2ae:	2102      	movs	r1, #2
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f000 fe25 	bl	800cf00 <RCCEx_PLL3_Config>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d002      	beq.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c2c2:	4b70      	ldr	r3, [pc, #448]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c2c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c2ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c2d2:	4a6c      	ldr	r2, [pc, #432]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c2d4:	430b      	orrs	r3, r1
 800c2d6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c2d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c2e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c2ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	d03e      	beq.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c2f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c304:	d022      	beq.n	800c34c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c30a:	d81b      	bhi.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d003      	beq.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c314:	d00b      	beq.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c316:	e015      	b.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c31c:	3308      	adds	r3, #8
 800c31e:	2100      	movs	r1, #0
 800c320:	4618      	mov	r0, r3
 800c322:	f000 fd3b 	bl	800cd9c <RCCEx_PLL2_Config>
 800c326:	4603      	mov	r3, r0
 800c328:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c32c:	e00f      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c32e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c332:	3328      	adds	r3, #40	; 0x28
 800c334:	2102      	movs	r1, #2
 800c336:	4618      	mov	r0, r3
 800c338:	f000 fde2 	bl	800cf00 <RCCEx_PLL3_Config>
 800c33c:	4603      	mov	r3, r0
 800c33e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c342:	e004      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c34a:	e000      	b.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c34c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c34e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c352:	2b00      	cmp	r3, #0
 800c354:	d10b      	bne.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c356:	4b4b      	ldr	r3, [pc, #300]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c35a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c35e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c362:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c366:	4a47      	ldr	r2, [pc, #284]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c368:	430b      	orrs	r3, r1
 800c36a:	6593      	str	r3, [r2, #88]	; 0x58
 800c36c:	e003      	b.n	800c376 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c36e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c372:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c382:	67bb      	str	r3, [r7, #120]	; 0x78
 800c384:	2300      	movs	r3, #0
 800c386:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c388:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c38c:	460b      	mov	r3, r1
 800c38e:	4313      	orrs	r3, r2
 800c390:	d03b      	beq.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c39a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c39e:	d01f      	beq.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c3a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3a4:	d818      	bhi.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c3a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3aa:	d003      	beq.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c3ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3b0:	d007      	beq.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c3b2:	e011      	b.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3b4:	4b33      	ldr	r3, [pc, #204]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b8:	4a32      	ldr	r2, [pc, #200]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c3c0:	e00f      	b.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3c6:	3328      	adds	r3, #40	; 0x28
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f000 fd98 	bl	800cf00 <RCCEx_PLL3_Config>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c3d6:	e004      	b.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c3de:	e000      	b.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c3e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d10b      	bne.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c3ea:	4b26      	ldr	r3, [pc, #152]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c3f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3fa:	4a22      	ldr	r2, [pc, #136]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3fc:	430b      	orrs	r3, r1
 800c3fe:	6553      	str	r3, [r2, #84]	; 0x54
 800c400:	e003      	b.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c402:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c406:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c40a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c412:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c416:	673b      	str	r3, [r7, #112]	; 0x70
 800c418:	2300      	movs	r3, #0
 800c41a:	677b      	str	r3, [r7, #116]	; 0x74
 800c41c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c420:	460b      	mov	r3, r1
 800c422:	4313      	orrs	r3, r2
 800c424:	d034      	beq.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d003      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c434:	d007      	beq.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c436:	e011      	b.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c438:	4b12      	ldr	r3, [pc, #72]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c43c:	4a11      	ldr	r2, [pc, #68]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c43e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c442:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c444:	e00e      	b.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c44a:	3308      	adds	r3, #8
 800c44c:	2102      	movs	r1, #2
 800c44e:	4618      	mov	r0, r3
 800c450:	f000 fca4 	bl	800cd9c <RCCEx_PLL2_Config>
 800c454:	4603      	mov	r3, r0
 800c456:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c45a:	e003      	b.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c45c:	2301      	movs	r3, #1
 800c45e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c462:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c464:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d10d      	bne.n	800c488 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c46c:	4b05      	ldr	r3, [pc, #20]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c46e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c470:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c47a:	4a02      	ldr	r2, [pc, #8]	; (800c484 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c47c:	430b      	orrs	r3, r1
 800c47e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c480:	e006      	b.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c482:	bf00      	nop
 800c484:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c488:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c48c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c498:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c49c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c49e:	2300      	movs	r3, #0
 800c4a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c4a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c4a6:	460b      	mov	r3, r1
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	d00c      	beq.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c4ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4b0:	3328      	adds	r3, #40	; 0x28
 800c4b2:	2102      	movs	r1, #2
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f000 fd23 	bl	800cf00 <RCCEx_PLL3_Config>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d002      	beq.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c4c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ce:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c4d2:	663b      	str	r3, [r7, #96]	; 0x60
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	667b      	str	r3, [r7, #100]	; 0x64
 800c4d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c4dc:	460b      	mov	r3, r1
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	d038      	beq.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c4e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4ee:	d018      	beq.n	800c522 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c4f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4f4:	d811      	bhi.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c4f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4fa:	d014      	beq.n	800c526 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c4fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c500:	d80b      	bhi.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c502:	2b00      	cmp	r3, #0
 800c504:	d011      	beq.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c50a:	d106      	bne.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c50c:	4bc3      	ldr	r3, [pc, #780]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c510:	4ac2      	ldr	r2, [pc, #776]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c516:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c518:	e008      	b.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c51a:	2301      	movs	r3, #1
 800c51c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c520:	e004      	b.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c522:	bf00      	nop
 800c524:	e002      	b.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c526:	bf00      	nop
 800c528:	e000      	b.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c52a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c52c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c530:	2b00      	cmp	r3, #0
 800c532:	d10b      	bne.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c534:	4bb9      	ldr	r3, [pc, #740]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c538:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c53c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c544:	4ab5      	ldr	r2, [pc, #724]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c546:	430b      	orrs	r3, r1
 800c548:	6553      	str	r3, [r2, #84]	; 0x54
 800c54a:	e003      	b.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c54c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c550:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c560:	65bb      	str	r3, [r7, #88]	; 0x58
 800c562:	2300      	movs	r3, #0
 800c564:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c566:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c56a:	460b      	mov	r3, r1
 800c56c:	4313      	orrs	r3, r2
 800c56e:	d009      	beq.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c570:	4baa      	ldr	r3, [pc, #680]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c574:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c57c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c57e:	4aa7      	ldr	r2, [pc, #668]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c580:	430b      	orrs	r3, r1
 800c582:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c590:	653b      	str	r3, [r7, #80]	; 0x50
 800c592:	2300      	movs	r3, #0
 800c594:	657b      	str	r3, [r7, #84]	; 0x54
 800c596:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c59a:	460b      	mov	r3, r1
 800c59c:	4313      	orrs	r3, r2
 800c59e:	d009      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c5a0:	4b9e      	ldr	r3, [pc, #632]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5a4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c5a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ae:	4a9b      	ldr	r2, [pc, #620]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5b0:	430b      	orrs	r3, r1
 800c5b2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c5b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5bc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c5c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	d009      	beq.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c5d0:	4b92      	ldr	r3, [pc, #584]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5d4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800c5d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5de:	4a8f      	ldr	r2, [pc, #572]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5e0:	430b      	orrs	r3, r1
 800c5e2:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c5e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ec:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c5f0:	643b      	str	r3, [r7, #64]	; 0x40
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	647b      	str	r3, [r7, #68]	; 0x44
 800c5f6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	d00e      	beq.n	800c61e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c600:	4b86      	ldr	r3, [pc, #536]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	4a85      	ldr	r2, [pc, #532]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c606:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c60a:	6113      	str	r3, [r2, #16]
 800c60c:	4b83      	ldr	r3, [pc, #524]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c60e:	6919      	ldr	r1, [r3, #16]
 800c610:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c614:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c618:	4a80      	ldr	r2, [pc, #512]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c61a:	430b      	orrs	r3, r1
 800c61c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c61e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c626:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c62a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c62c:	2300      	movs	r3, #0
 800c62e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c630:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c634:	460b      	mov	r3, r1
 800c636:	4313      	orrs	r3, r2
 800c638:	d009      	beq.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c63a:	4b78      	ldr	r3, [pc, #480]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c63c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c63e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c648:	4a74      	ldr	r2, [pc, #464]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c64a:	430b      	orrs	r3, r1
 800c64c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c64e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c656:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c65a:	633b      	str	r3, [r7, #48]	; 0x30
 800c65c:	2300      	movs	r3, #0
 800c65e:	637b      	str	r3, [r7, #52]	; 0x34
 800c660:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c664:	460b      	mov	r3, r1
 800c666:	4313      	orrs	r3, r2
 800c668:	d00a      	beq.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c66a:	4b6c      	ldr	r3, [pc, #432]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c66c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c66e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c67a:	4a68      	ldr	r2, [pc, #416]	; (800c81c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c67c:	430b      	orrs	r3, r1
 800c67e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c688:	2100      	movs	r1, #0
 800c68a:	62b9      	str	r1, [r7, #40]	; 0x28
 800c68c:	f003 0301 	and.w	r3, r3, #1
 800c690:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c692:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c696:	460b      	mov	r3, r1
 800c698:	4313      	orrs	r3, r2
 800c69a:	d011      	beq.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c69c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6a0:	3308      	adds	r3, #8
 800c6a2:	2100      	movs	r1, #0
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f000 fb79 	bl	800cd9c <RCCEx_PLL2_Config>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c6b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d003      	beq.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c6c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	6239      	str	r1, [r7, #32]
 800c6cc:	f003 0302 	and.w	r3, r3, #2
 800c6d0:	627b      	str	r3, [r7, #36]	; 0x24
 800c6d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	d011      	beq.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c6dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6e0:	3308      	adds	r3, #8
 800c6e2:	2101      	movs	r1, #1
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f000 fb59 	bl	800cd9c <RCCEx_PLL2_Config>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c6f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d003      	beq.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c708:	2100      	movs	r1, #0
 800c70a:	61b9      	str	r1, [r7, #24]
 800c70c:	f003 0304 	and.w	r3, r3, #4
 800c710:	61fb      	str	r3, [r7, #28]
 800c712:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c716:	460b      	mov	r3, r1
 800c718:	4313      	orrs	r3, r2
 800c71a:	d011      	beq.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c71c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c720:	3308      	adds	r3, #8
 800c722:	2102      	movs	r1, #2
 800c724:	4618      	mov	r0, r3
 800c726:	f000 fb39 	bl	800cd9c <RCCEx_PLL2_Config>
 800c72a:	4603      	mov	r3, r0
 800c72c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c730:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c734:	2b00      	cmp	r3, #0
 800c736:	d003      	beq.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c738:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c73c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	2100      	movs	r1, #0
 800c74a:	6139      	str	r1, [r7, #16]
 800c74c:	f003 0308 	and.w	r3, r3, #8
 800c750:	617b      	str	r3, [r7, #20]
 800c752:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c756:	460b      	mov	r3, r1
 800c758:	4313      	orrs	r3, r2
 800c75a:	d011      	beq.n	800c780 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c75c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c760:	3328      	adds	r3, #40	; 0x28
 800c762:	2100      	movs	r1, #0
 800c764:	4618      	mov	r0, r3
 800c766:	f000 fbcb 	bl	800cf00 <RCCEx_PLL3_Config>
 800c76a:	4603      	mov	r3, r0
 800c76c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800c770:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c774:	2b00      	cmp	r3, #0
 800c776:	d003      	beq.n	800c780 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c778:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c77c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c788:	2100      	movs	r1, #0
 800c78a:	60b9      	str	r1, [r7, #8]
 800c78c:	f003 0310 	and.w	r3, r3, #16
 800c790:	60fb      	str	r3, [r7, #12]
 800c792:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c796:	460b      	mov	r3, r1
 800c798:	4313      	orrs	r3, r2
 800c79a:	d011      	beq.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c79c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7a0:	3328      	adds	r3, #40	; 0x28
 800c7a2:	2101      	movs	r1, #1
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f000 fbab 	bl	800cf00 <RCCEx_PLL3_Config>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c7b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d003      	beq.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c7c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	6039      	str	r1, [r7, #0]
 800c7cc:	f003 0320 	and.w	r3, r3, #32
 800c7d0:	607b      	str	r3, [r7, #4]
 800c7d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	d011      	beq.n	800c800 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c7dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7e0:	3328      	adds	r3, #40	; 0x28
 800c7e2:	2102      	movs	r1, #2
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f000 fb8b 	bl	800cf00 <RCCEx_PLL3_Config>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c7f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d003      	beq.n	800c800 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800c800:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800c804:	2b00      	cmp	r3, #0
 800c806:	d101      	bne.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800c808:	2300      	movs	r3, #0
 800c80a:	e000      	b.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800c80c:	2301      	movs	r3, #1
}
 800c80e:	4618      	mov	r0, r3
 800c810:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800c814:	46bd      	mov	sp, r7
 800c816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c81a:	bf00      	nop
 800c81c:	58024400 	.word	0x58024400

0800c820 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800c824:	f7fe fde2 	bl	800b3ec <HAL_RCC_GetHCLKFreq>
 800c828:	4602      	mov	r2, r0
 800c82a:	4b06      	ldr	r3, [pc, #24]	; (800c844 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c82c:	6a1b      	ldr	r3, [r3, #32]
 800c82e:	091b      	lsrs	r3, r3, #4
 800c830:	f003 0307 	and.w	r3, r3, #7
 800c834:	4904      	ldr	r1, [pc, #16]	; (800c848 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c836:	5ccb      	ldrb	r3, [r1, r3]
 800c838:	f003 031f 	and.w	r3, r3, #31
 800c83c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c840:	4618      	mov	r0, r3
 800c842:	bd80      	pop	{r7, pc}
 800c844:	58024400 	.word	0x58024400
 800c848:	080108b0 	.word	0x080108b0

0800c84c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b089      	sub	sp, #36	; 0x24
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c854:	4ba1      	ldr	r3, [pc, #644]	; (800cadc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c858:	f003 0303 	and.w	r3, r3, #3
 800c85c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c85e:	4b9f      	ldr	r3, [pc, #636]	; (800cadc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c862:	0b1b      	lsrs	r3, r3, #12
 800c864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c868:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c86a:	4b9c      	ldr	r3, [pc, #624]	; (800cadc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c86e:	091b      	lsrs	r3, r3, #4
 800c870:	f003 0301 	and.w	r3, r3, #1
 800c874:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c876:	4b99      	ldr	r3, [pc, #612]	; (800cadc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c87a:	08db      	lsrs	r3, r3, #3
 800c87c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c880:	693a      	ldr	r2, [r7, #16]
 800c882:	fb02 f303 	mul.w	r3, r2, r3
 800c886:	ee07 3a90 	vmov	s15, r3
 800c88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c88e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	2b00      	cmp	r3, #0
 800c896:	f000 8111 	beq.w	800cabc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c89a:	69bb      	ldr	r3, [r7, #24]
 800c89c:	2b02      	cmp	r3, #2
 800c89e:	f000 8083 	beq.w	800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	f200 80a1 	bhi.w	800c9ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c8aa:	69bb      	ldr	r3, [r7, #24]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d003      	beq.n	800c8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	d056      	beq.n	800c964 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c8b6:	e099      	b.n	800c9ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8b8:	4b88      	ldr	r3, [pc, #544]	; (800cadc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f003 0320 	and.w	r3, r3, #32
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d02d      	beq.n	800c920 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8c4:	4b85      	ldr	r3, [pc, #532]	; (800cadc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	08db      	lsrs	r3, r3, #3
 800c8ca:	f003 0303 	and.w	r3, r3, #3
 800c8ce:	4a84      	ldr	r2, [pc, #528]	; (800cae0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c8d0:	fa22 f303 	lsr.w	r3, r2, r3
 800c8d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	ee07 3a90 	vmov	s15, r3
 800c8dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	ee07 3a90 	vmov	s15, r3
 800c8e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8ee:	4b7b      	ldr	r3, [pc, #492]	; (800cadc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8f6:	ee07 3a90 	vmov	s15, r3
 800c8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800c902:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c90e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c91a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c91e:	e087      	b.n	800ca30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	ee07 3a90 	vmov	s15, r3
 800c926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c92a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cae8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c92e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c932:	4b6a      	ldr	r3, [pc, #424]	; (800cadc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c93a:	ee07 3a90 	vmov	s15, r3
 800c93e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c942:	ed97 6a03 	vldr	s12, [r7, #12]
 800c946:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c94a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c94e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c95e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c962:	e065      	b.n	800ca30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	ee07 3a90 	vmov	s15, r3
 800c96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c96e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800caec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c976:	4b59      	ldr	r3, [pc, #356]	; (800cadc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c97e:	ee07 3a90 	vmov	s15, r3
 800c982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c986:	ed97 6a03 	vldr	s12, [r7, #12]
 800c98a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c98e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c99a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c99e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9a6:	e043      	b.n	800ca30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	ee07 3a90 	vmov	s15, r3
 800c9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800caf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c9b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ba:	4b48      	ldr	r3, [pc, #288]	; (800cadc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9c2:	ee07 3a90 	vmov	s15, r3
 800c9c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9ea:	e021      	b.n	800ca30 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	ee07 3a90 	vmov	s15, r3
 800c9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800caec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c9fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9fe:	4b37      	ldr	r3, [pc, #220]	; (800cadc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca06:	ee07 3a90 	vmov	s15, r3
 800ca0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca12:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cae4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca2e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ca30:	4b2a      	ldr	r3, [pc, #168]	; (800cadc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca34:	0a5b      	lsrs	r3, r3, #9
 800ca36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca3a:	ee07 3a90 	vmov	s15, r3
 800ca3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca56:	ee17 2a90 	vmov	r2, s15
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ca5e:	4b1f      	ldr	r3, [pc, #124]	; (800cadc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca62:	0c1b      	lsrs	r3, r3, #16
 800ca64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca68:	ee07 3a90 	vmov	s15, r3
 800ca6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca78:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca84:	ee17 2a90 	vmov	r2, s15
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ca8c:	4b13      	ldr	r3, [pc, #76]	; (800cadc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca90:	0e1b      	lsrs	r3, r3, #24
 800ca92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca96:	ee07 3a90 	vmov	s15, r3
 800ca9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800caa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800caa6:	edd7 6a07 	vldr	s13, [r7, #28]
 800caaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cab2:	ee17 2a90 	vmov	r2, s15
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800caba:	e008      	b.n	800cace <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2200      	movs	r2, #0
 800cac0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	609a      	str	r2, [r3, #8]
}
 800cace:	bf00      	nop
 800cad0:	3724      	adds	r7, #36	; 0x24
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	58024400 	.word	0x58024400
 800cae0:	03d09000 	.word	0x03d09000
 800cae4:	46000000 	.word	0x46000000
 800cae8:	4c742400 	.word	0x4c742400
 800caec:	4a742400 	.word	0x4a742400
 800caf0:	4bb71b00 	.word	0x4bb71b00

0800caf4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b089      	sub	sp, #36	; 0x24
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cafc:	4ba1      	ldr	r3, [pc, #644]	; (800cd84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb00:	f003 0303 	and.w	r3, r3, #3
 800cb04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cb06:	4b9f      	ldr	r3, [pc, #636]	; (800cd84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb0a:	0d1b      	lsrs	r3, r3, #20
 800cb0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cb12:	4b9c      	ldr	r3, [pc, #624]	; (800cd84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb16:	0a1b      	lsrs	r3, r3, #8
 800cb18:	f003 0301 	and.w	r3, r3, #1
 800cb1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cb1e:	4b99      	ldr	r3, [pc, #612]	; (800cd84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb22:	08db      	lsrs	r3, r3, #3
 800cb24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cb28:	693a      	ldr	r2, [r7, #16]
 800cb2a:	fb02 f303 	mul.w	r3, r2, r3
 800cb2e:	ee07 3a90 	vmov	s15, r3
 800cb32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f000 8111 	beq.w	800cd64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	2b02      	cmp	r3, #2
 800cb46:	f000 8083 	beq.w	800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	2b02      	cmp	r3, #2
 800cb4e:	f200 80a1 	bhi.w	800cc94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cb52:	69bb      	ldr	r3, [r7, #24]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d003      	beq.n	800cb60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cb58:	69bb      	ldr	r3, [r7, #24]
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d056      	beq.n	800cc0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cb5e:	e099      	b.n	800cc94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb60:	4b88      	ldr	r3, [pc, #544]	; (800cd84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f003 0320 	and.w	r3, r3, #32
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d02d      	beq.n	800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb6c:	4b85      	ldr	r3, [pc, #532]	; (800cd84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	08db      	lsrs	r3, r3, #3
 800cb72:	f003 0303 	and.w	r3, r3, #3
 800cb76:	4a84      	ldr	r2, [pc, #528]	; (800cd88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cb78:	fa22 f303 	lsr.w	r3, r2, r3
 800cb7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	ee07 3a90 	vmov	s15, r3
 800cb84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	ee07 3a90 	vmov	s15, r3
 800cb8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb96:	4b7b      	ldr	r3, [pc, #492]	; (800cd84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb9e:	ee07 3a90 	vmov	s15, r3
 800cba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cba6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbaa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cd8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cbc6:	e087      	b.n	800ccd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	ee07 3a90 	vmov	s15, r3
 800cbce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cd90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cbd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbda:	4b6a      	ldr	r3, [pc, #424]	; (800cd84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbe2:	ee07 3a90 	vmov	s15, r3
 800cbe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbea:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cd8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc0a:	e065      	b.n	800ccd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	ee07 3a90 	vmov	s15, r3
 800cc12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cd94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cc1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc1e:	4b59      	ldr	r3, [pc, #356]	; (800cd84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc26:	ee07 3a90 	vmov	s15, r3
 800cc2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc32:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cd8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc4e:	e043      	b.n	800ccd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	ee07 3a90 	vmov	s15, r3
 800cc56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cd98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cc5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc62:	4b48      	ldr	r3, [pc, #288]	; (800cd84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc6a:	ee07 3a90 	vmov	s15, r3
 800cc6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc72:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc76:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cd8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc92:	e021      	b.n	800ccd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	ee07 3a90 	vmov	s15, r3
 800cc9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cd94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cca6:	4b37      	ldr	r3, [pc, #220]	; (800cd84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccae:	ee07 3a90 	vmov	s15, r3
 800ccb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cd8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccd6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ccd8:	4b2a      	ldr	r3, [pc, #168]	; (800cd84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccdc:	0a5b      	lsrs	r3, r3, #9
 800ccde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cce2:	ee07 3a90 	vmov	s15, r3
 800cce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccf2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccfe:	ee17 2a90 	vmov	r2, s15
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cd06:	4b1f      	ldr	r3, [pc, #124]	; (800cd84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd0a:	0c1b      	lsrs	r3, r3, #16
 800cd0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd10:	ee07 3a90 	vmov	s15, r3
 800cd14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd20:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd2c:	ee17 2a90 	vmov	r2, s15
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cd34:	4b13      	ldr	r3, [pc, #76]	; (800cd84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd38:	0e1b      	lsrs	r3, r3, #24
 800cd3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd3e:	ee07 3a90 	vmov	s15, r3
 800cd42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd5a:	ee17 2a90 	vmov	r2, s15
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cd62:	e008      	b.n	800cd76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2200      	movs	r2, #0
 800cd68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	609a      	str	r2, [r3, #8]
}
 800cd76:	bf00      	nop
 800cd78:	3724      	adds	r7, #36	; 0x24
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd80:	4770      	bx	lr
 800cd82:	bf00      	nop
 800cd84:	58024400 	.word	0x58024400
 800cd88:	03d09000 	.word	0x03d09000
 800cd8c:	46000000 	.word	0x46000000
 800cd90:	4c742400 	.word	0x4c742400
 800cd94:	4a742400 	.word	0x4a742400
 800cd98:	4bb71b00 	.word	0x4bb71b00

0800cd9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cda6:	2300      	movs	r3, #0
 800cda8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cdaa:	4b53      	ldr	r3, [pc, #332]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800cdac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdae:	f003 0303 	and.w	r3, r3, #3
 800cdb2:	2b03      	cmp	r3, #3
 800cdb4:	d101      	bne.n	800cdba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e099      	b.n	800ceee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cdba:	4b4f      	ldr	r3, [pc, #316]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4a4e      	ldr	r2, [pc, #312]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800cdc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cdc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdc6:	f7f7 fa9d 	bl	8004304 <HAL_GetTick>
 800cdca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cdcc:	e008      	b.n	800cde0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cdce:	f7f7 fa99 	bl	8004304 <HAL_GetTick>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	1ad3      	subs	r3, r2, r3
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	d901      	bls.n	800cde0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cddc:	2303      	movs	r3, #3
 800cdde:	e086      	b.n	800ceee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cde0:	4b45      	ldr	r3, [pc, #276]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d1f0      	bne.n	800cdce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cdec:	4b42      	ldr	r3, [pc, #264]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800cdee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	031b      	lsls	r3, r3, #12
 800cdfa:	493f      	ldr	r1, [pc, #252]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	628b      	str	r3, [r1, #40]	; 0x28
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	3b01      	subs	r3, #1
 800ce06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	689b      	ldr	r3, [r3, #8]
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	025b      	lsls	r3, r3, #9
 800ce12:	b29b      	uxth	r3, r3
 800ce14:	431a      	orrs	r2, r3
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	68db      	ldr	r3, [r3, #12]
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	041b      	lsls	r3, r3, #16
 800ce1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ce22:	431a      	orrs	r2, r3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	691b      	ldr	r3, [r3, #16]
 800ce28:	3b01      	subs	r3, #1
 800ce2a:	061b      	lsls	r3, r3, #24
 800ce2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ce30:	4931      	ldr	r1, [pc, #196]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800ce32:	4313      	orrs	r3, r2
 800ce34:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ce36:	4b30      	ldr	r3, [pc, #192]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800ce38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	695b      	ldr	r3, [r3, #20]
 800ce42:	492d      	ldr	r1, [pc, #180]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800ce44:	4313      	orrs	r3, r2
 800ce46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ce48:	4b2b      	ldr	r3, [pc, #172]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800ce4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce4c:	f023 0220 	bic.w	r2, r3, #32
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	699b      	ldr	r3, [r3, #24]
 800ce54:	4928      	ldr	r1, [pc, #160]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800ce56:	4313      	orrs	r3, r2
 800ce58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ce5a:	4b27      	ldr	r3, [pc, #156]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800ce5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce5e:	4a26      	ldr	r2, [pc, #152]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800ce60:	f023 0310 	bic.w	r3, r3, #16
 800ce64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ce66:	4b24      	ldr	r3, [pc, #144]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800ce68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce6a:	4b24      	ldr	r3, [pc, #144]	; (800cefc <RCCEx_PLL2_Config+0x160>)
 800ce6c:	4013      	ands	r3, r2
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	69d2      	ldr	r2, [r2, #28]
 800ce72:	00d2      	lsls	r2, r2, #3
 800ce74:	4920      	ldr	r1, [pc, #128]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800ce76:	4313      	orrs	r3, r2
 800ce78:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ce7a:	4b1f      	ldr	r3, [pc, #124]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800ce7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7e:	4a1e      	ldr	r2, [pc, #120]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800ce80:	f043 0310 	orr.w	r3, r3, #16
 800ce84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d106      	bne.n	800ce9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ce8c:	4b1a      	ldr	r3, [pc, #104]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800ce8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce90:	4a19      	ldr	r2, [pc, #100]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800ce92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce96:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce98:	e00f      	b.n	800ceba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d106      	bne.n	800ceae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cea0:	4b15      	ldr	r3, [pc, #84]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800cea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea4:	4a14      	ldr	r2, [pc, #80]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800cea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ceaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ceac:	e005      	b.n	800ceba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ceae:	4b12      	ldr	r3, [pc, #72]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800ceb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb2:	4a11      	ldr	r2, [pc, #68]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800ceb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ceb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ceba:	4b0f      	ldr	r3, [pc, #60]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4a0e      	ldr	r2, [pc, #56]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800cec0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cec6:	f7f7 fa1d 	bl	8004304 <HAL_GetTick>
 800ceca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cecc:	e008      	b.n	800cee0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cece:	f7f7 fa19 	bl	8004304 <HAL_GetTick>
 800ced2:	4602      	mov	r2, r0
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	1ad3      	subs	r3, r2, r3
 800ced8:	2b02      	cmp	r3, #2
 800ceda:	d901      	bls.n	800cee0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cedc:	2303      	movs	r3, #3
 800cede:	e006      	b.n	800ceee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cee0:	4b05      	ldr	r3, [pc, #20]	; (800cef8 <RCCEx_PLL2_Config+0x15c>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d0f0      	beq.n	800cece <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ceec:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	58024400 	.word	0x58024400
 800cefc:	ffff0007 	.word	0xffff0007

0800cf00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cf0e:	4b53      	ldr	r3, [pc, #332]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cf10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf12:	f003 0303 	and.w	r3, r3, #3
 800cf16:	2b03      	cmp	r3, #3
 800cf18:	d101      	bne.n	800cf1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e099      	b.n	800d052 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cf1e:	4b4f      	ldr	r3, [pc, #316]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	4a4e      	ldr	r2, [pc, #312]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cf24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf2a:	f7f7 f9eb 	bl	8004304 <HAL_GetTick>
 800cf2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cf30:	e008      	b.n	800cf44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cf32:	f7f7 f9e7 	bl	8004304 <HAL_GetTick>
 800cf36:	4602      	mov	r2, r0
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	2b02      	cmp	r3, #2
 800cf3e:	d901      	bls.n	800cf44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cf40:	2303      	movs	r3, #3
 800cf42:	e086      	b.n	800d052 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cf44:	4b45      	ldr	r3, [pc, #276]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d1f0      	bne.n	800cf32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cf50:	4b42      	ldr	r3, [pc, #264]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cf52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf54:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	051b      	lsls	r3, r3, #20
 800cf5e:	493f      	ldr	r1, [pc, #252]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cf60:	4313      	orrs	r3, r2
 800cf62:	628b      	str	r3, [r1, #40]	; 0x28
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	3b01      	subs	r3, #1
 800cf6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	3b01      	subs	r3, #1
 800cf74:	025b      	lsls	r3, r3, #9
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	431a      	orrs	r2, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	68db      	ldr	r3, [r3, #12]
 800cf7e:	3b01      	subs	r3, #1
 800cf80:	041b      	lsls	r3, r3, #16
 800cf82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cf86:	431a      	orrs	r2, r3
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	691b      	ldr	r3, [r3, #16]
 800cf8c:	3b01      	subs	r3, #1
 800cf8e:	061b      	lsls	r3, r3, #24
 800cf90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf94:	4931      	ldr	r1, [pc, #196]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cf96:	4313      	orrs	r3, r2
 800cf98:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cf9a:	4b30      	ldr	r3, [pc, #192]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cf9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	695b      	ldr	r3, [r3, #20]
 800cfa6:	492d      	ldr	r1, [pc, #180]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cfac:	4b2b      	ldr	r3, [pc, #172]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	699b      	ldr	r3, [r3, #24]
 800cfb8:	4928      	ldr	r1, [pc, #160]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cfbe:	4b27      	ldr	r3, [pc, #156]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cfc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc2:	4a26      	ldr	r2, [pc, #152]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cfc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cfc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cfca:	4b24      	ldr	r3, [pc, #144]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cfcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfce:	4b24      	ldr	r3, [pc, #144]	; (800d060 <RCCEx_PLL3_Config+0x160>)
 800cfd0:	4013      	ands	r3, r2
 800cfd2:	687a      	ldr	r2, [r7, #4]
 800cfd4:	69d2      	ldr	r2, [r2, #28]
 800cfd6:	00d2      	lsls	r2, r2, #3
 800cfd8:	4920      	ldr	r1, [pc, #128]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cfde:	4b1f      	ldr	r3, [pc, #124]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe2:	4a1e      	ldr	r2, [pc, #120]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cfe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfe8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d106      	bne.n	800cffe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cff0:	4b1a      	ldr	r3, [pc, #104]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff4:	4a19      	ldr	r2, [pc, #100]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800cff6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cffa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cffc:	e00f      	b.n	800d01e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	2b01      	cmp	r3, #1
 800d002:	d106      	bne.n	800d012 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d004:	4b15      	ldr	r3, [pc, #84]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800d006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d008:	4a14      	ldr	r2, [pc, #80]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800d00a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d00e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d010:	e005      	b.n	800d01e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d012:	4b12      	ldr	r3, [pc, #72]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800d014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d016:	4a11      	ldr	r2, [pc, #68]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800d018:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d01c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d01e:	4b0f      	ldr	r3, [pc, #60]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4a0e      	ldr	r2, [pc, #56]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800d024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d02a:	f7f7 f96b 	bl	8004304 <HAL_GetTick>
 800d02e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d030:	e008      	b.n	800d044 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d032:	f7f7 f967 	bl	8004304 <HAL_GetTick>
 800d036:	4602      	mov	r2, r0
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	1ad3      	subs	r3, r2, r3
 800d03c:	2b02      	cmp	r3, #2
 800d03e:	d901      	bls.n	800d044 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d040:	2303      	movs	r3, #3
 800d042:	e006      	b.n	800d052 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d044:	4b05      	ldr	r3, [pc, #20]	; (800d05c <RCCEx_PLL3_Config+0x15c>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d0f0      	beq.n	800d032 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d050:	7bfb      	ldrb	r3, [r7, #15]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	58024400 	.word	0x58024400
 800d060:	ffff0007 	.word	0xffff0007

0800d064 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d06c:	2301      	movs	r3, #1
 800d06e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d074      	beq.n	800d160 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d106      	bne.n	800d090 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f7f6 f834 	bl	80030f8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2202      	movs	r2, #2
 800d094:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	f003 0310 	and.w	r3, r3, #16
 800d0a2:	2b10      	cmp	r3, #16
 800d0a4:	d053      	beq.n	800d14e <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	22ca      	movs	r2, #202	; 0xca
 800d0ac:	625a      	str	r2, [r3, #36]	; 0x24
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2253      	movs	r2, #83	; 0x53
 800d0b4:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 f87e 	bl	800d1b8 <RTC_EnterInitMode>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d0c0:	7bfb      	ldrb	r3, [r7, #15]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d124      	bne.n	800d110 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	6999      	ldr	r1, [r3, #24]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	4b26      	ldr	r3, [pc, #152]	; (800d16c <HAL_RTC_Init+0x108>)
 800d0d2:	400b      	ands	r3, r1
 800d0d4:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	6999      	ldr	r1, [r3, #24]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	685a      	ldr	r2, [r3, #4]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	691b      	ldr	r3, [r3, #16]
 800d0e4:	431a      	orrs	r2, r3
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	699b      	ldr	r3, [r3, #24]
 800d0ea:	431a      	orrs	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	430a      	orrs	r2, r1
 800d0f2:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	689b      	ldr	r3, [r3, #8]
 800d0f8:	0419      	lsls	r1, r3, #16
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	68da      	ldr	r2, [r3, #12]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	430a      	orrs	r2, r1
 800d104:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 f88c 	bl	800d224 <RTC_ExitInitMode>
 800d10c:	4603      	mov	r3, r0
 800d10e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d110:	7bfb      	ldrb	r3, [r7, #15]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d116      	bne.n	800d144 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	699a      	ldr	r2, [r3, #24]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800d124:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	6999      	ldr	r1, [r3, #24]
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6a1a      	ldr	r2, [r3, #32]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	69db      	ldr	r3, [r3, #28]
 800d134:	431a      	orrs	r2, r3
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	695b      	ldr	r3, [r3, #20]
 800d13a:	431a      	orrs	r2, r3
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	430a      	orrs	r2, r1
 800d142:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	22ff      	movs	r2, #255	; 0xff
 800d14a:	625a      	str	r2, [r3, #36]	; 0x24
 800d14c:	e001      	b.n	800d152 <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d14e:	2300      	movs	r3, #0
 800d150:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d152:	7bfb      	ldrb	r3, [r7, #15]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d103      	bne.n	800d160 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2201      	movs	r2, #1
 800d15c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800d160:	7bfb      	ldrb	r3, [r7, #15]
}
 800d162:	4618      	mov	r0, r3
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	fb8fffbf 	.word	0xfb8fffbf

0800d170 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a0d      	ldr	r2, [pc, #52]	; (800d1b4 <HAL_RTC_WaitForSynchro+0x44>)
 800d17e:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d180:	f7f7 f8c0 	bl	8004304 <HAL_GetTick>
 800d184:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d186:	e009      	b.n	800d19c <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d188:	f7f7 f8bc 	bl	8004304 <HAL_GetTick>
 800d18c:	4602      	mov	r2, r0
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	1ad3      	subs	r3, r2, r3
 800d192:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d196:	d901      	bls.n	800d19c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d198:	2303      	movs	r3, #3
 800d19a:	e007      	b.n	800d1ac <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	68db      	ldr	r3, [r3, #12]
 800d1a2:	f003 0320 	and.w	r3, r3, #32
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d0ee      	beq.n	800d188 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d1aa:	2300      	movs	r3, #0
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3710      	adds	r7, #16
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}
 800d1b4:	0001005f 	.word	0x0001005f

0800d1b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	68db      	ldr	r3, [r3, #12]
 800d1ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d123      	bne.n	800d21a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	68da      	ldr	r2, [r3, #12]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d1e0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d1e2:	f7f7 f88f 	bl	8004304 <HAL_GetTick>
 800d1e6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d1e8:	e00d      	b.n	800d206 <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d1ea:	f7f7 f88b 	bl	8004304 <HAL_GetTick>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	1ad3      	subs	r3, r2, r3
 800d1f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d1f8:	d905      	bls.n	800d206 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800d1fa:	2303      	movs	r3, #3
 800d1fc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2203      	movs	r2, #3
 800d202:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d210:	2b00      	cmp	r3, #0
 800d212:	d102      	bne.n	800d21a <RTC_EnterInitMode+0x62>
 800d214:	7bfb      	ldrb	r3, [r7, #15]
 800d216:	2b03      	cmp	r3, #3
 800d218:	d1e7      	bne.n	800d1ea <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800d21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3710      	adds	r7, #16
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b084      	sub	sp, #16
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d22c:	2300      	movs	r3, #0
 800d22e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d230:	4b1a      	ldr	r3, [pc, #104]	; (800d29c <RTC_ExitInitMode+0x78>)
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	4a19      	ldr	r2, [pc, #100]	; (800d29c <RTC_ExitInitMode+0x78>)
 800d236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d23a:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d23c:	4b17      	ldr	r3, [pc, #92]	; (800d29c <RTC_ExitInitMode+0x78>)
 800d23e:	699b      	ldr	r3, [r3, #24]
 800d240:	f003 0320 	and.w	r3, r3, #32
 800d244:	2b00      	cmp	r3, #0
 800d246:	d10c      	bne.n	800d262 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f7ff ff91 	bl	800d170 <HAL_RTC_WaitForSynchro>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	d01e      	beq.n	800d292 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2203      	movs	r2, #3
 800d258:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d25c:	2303      	movs	r3, #3
 800d25e:	73fb      	strb	r3, [r7, #15]
 800d260:	e017      	b.n	800d292 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d262:	4b0e      	ldr	r3, [pc, #56]	; (800d29c <RTC_ExitInitMode+0x78>)
 800d264:	699b      	ldr	r3, [r3, #24]
 800d266:	4a0d      	ldr	r2, [pc, #52]	; (800d29c <RTC_ExitInitMode+0x78>)
 800d268:	f023 0320 	bic.w	r3, r3, #32
 800d26c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f7ff ff7e 	bl	800d170 <HAL_RTC_WaitForSynchro>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d005      	beq.n	800d286 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2203      	movs	r2, #3
 800d27e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d282:	2303      	movs	r3, #3
 800d284:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d286:	4b05      	ldr	r3, [pc, #20]	; (800d29c <RTC_ExitInitMode+0x78>)
 800d288:	699b      	ldr	r3, [r3, #24]
 800d28a:	4a04      	ldr	r2, [pc, #16]	; (800d29c <RTC_ExitInitMode+0x78>)
 800d28c:	f043 0320 	orr.w	r3, r3, #32
 800d290:	6193      	str	r3, [r2, #24]
  }

  return status;
 800d292:	7bfb      	ldrb	r3, [r7, #15]
}
 800d294:	4618      	mov	r0, r3
 800d296:	3710      	adds	r7, #16
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	58004000 	.word	0x58004000

0800d2a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d101      	bne.n	800d2b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e042      	b.n	800d338 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d106      	bne.n	800d2ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f7f6 fefb 	bl	80040c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2224      	movs	r2, #36	; 0x24
 800d2ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	681a      	ldr	r2, [r3, #0]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f022 0201 	bic.w	r2, r2, #1
 800d2e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 fd5c 	bl	800dda0 <UART_SetConfig>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d101      	bne.n	800d2f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	e022      	b.n	800d338 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d002      	beq.n	800d300 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f001 fbbc 	bl	800ea78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	685a      	ldr	r2, [r3, #4]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d30e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	689a      	ldr	r2, [r3, #8]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d31e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f042 0201 	orr.w	r2, r2, #1
 800d32e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f001 fc43 	bl	800ebbc <UART_CheckIdleState>
 800d336:	4603      	mov	r3, r0
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3708      	adds	r7, #8
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b08a      	sub	sp, #40	; 0x28
 800d344:	af02      	add	r7, sp, #8
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	603b      	str	r3, [r7, #0]
 800d34c:	4613      	mov	r3, r2
 800d34e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d356:	2b20      	cmp	r3, #32
 800d358:	d17b      	bne.n	800d452 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d002      	beq.n	800d366 <HAL_UART_Transmit+0x26>
 800d360:	88fb      	ldrh	r3, [r7, #6]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d101      	bne.n	800d36a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d366:	2301      	movs	r3, #1
 800d368:	e074      	b.n	800d454 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2200      	movs	r2, #0
 800d36e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2221      	movs	r2, #33	; 0x21
 800d376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d37a:	f7f6 ffc3 	bl	8004304 <HAL_GetTick>
 800d37e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	88fa      	ldrh	r2, [r7, #6]
 800d384:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	88fa      	ldrh	r2, [r7, #6]
 800d38c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	689b      	ldr	r3, [r3, #8]
 800d394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d398:	d108      	bne.n	800d3ac <HAL_UART_Transmit+0x6c>
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	691b      	ldr	r3, [r3, #16]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d104      	bne.n	800d3ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	61bb      	str	r3, [r7, #24]
 800d3aa:	e003      	b.n	800d3b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d3b4:	e030      	b.n	800d418 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	2180      	movs	r1, #128	; 0x80
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f001 fca5 	bl	800ed10 <UART_WaitOnFlagUntilTimeout>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d005      	beq.n	800d3d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2220      	movs	r2, #32
 800d3d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d3d4:	2303      	movs	r3, #3
 800d3d6:	e03d      	b.n	800d454 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d10b      	bne.n	800d3f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d3de:	69bb      	ldr	r3, [r7, #24]
 800d3e0:	881b      	ldrh	r3, [r3, #0]
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d3ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d3ee:	69bb      	ldr	r3, [r7, #24]
 800d3f0:	3302      	adds	r3, #2
 800d3f2:	61bb      	str	r3, [r7, #24]
 800d3f4:	e007      	b.n	800d406 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	781a      	ldrb	r2, [r3, #0]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	3301      	adds	r3, #1
 800d404:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	3b01      	subs	r3, #1
 800d410:	b29a      	uxth	r2, r3
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d41e:	b29b      	uxth	r3, r3
 800d420:	2b00      	cmp	r3, #0
 800d422:	d1c8      	bne.n	800d3b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	9300      	str	r3, [sp, #0]
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	2200      	movs	r2, #0
 800d42c:	2140      	movs	r1, #64	; 0x40
 800d42e:	68f8      	ldr	r0, [r7, #12]
 800d430:	f001 fc6e 	bl	800ed10 <UART_WaitOnFlagUntilTimeout>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d005      	beq.n	800d446 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2220      	movs	r2, #32
 800d43e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d442:	2303      	movs	r3, #3
 800d444:	e006      	b.n	800d454 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2220      	movs	r2, #32
 800d44a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d44e:	2300      	movs	r3, #0
 800d450:	e000      	b.n	800d454 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d452:	2302      	movs	r3, #2
  }
}
 800d454:	4618      	mov	r0, r3
 800d456:	3720      	adds	r7, #32
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b08a      	sub	sp, #40	; 0x28
 800d460:	af02      	add	r7, sp, #8
 800d462:	60f8      	str	r0, [r7, #12]
 800d464:	60b9      	str	r1, [r7, #8]
 800d466:	603b      	str	r3, [r7, #0]
 800d468:	4613      	mov	r3, r2
 800d46a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d472:	2b20      	cmp	r3, #32
 800d474:	f040 80b5 	bne.w	800d5e2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d002      	beq.n	800d484 <HAL_UART_Receive+0x28>
 800d47e:	88fb      	ldrh	r3, [r7, #6]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d101      	bne.n	800d488 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d484:	2301      	movs	r3, #1
 800d486:	e0ad      	b.n	800d5e4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2200      	movs	r2, #0
 800d48c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2222      	movs	r2, #34	; 0x22
 800d494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2200      	movs	r2, #0
 800d49c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d49e:	f7f6 ff31 	bl	8004304 <HAL_GetTick>
 800d4a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	88fa      	ldrh	r2, [r7, #6]
 800d4a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	88fa      	ldrh	r2, [r7, #6]
 800d4b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	689b      	ldr	r3, [r3, #8]
 800d4b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4bc:	d10e      	bne.n	800d4dc <HAL_UART_Receive+0x80>
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	691b      	ldr	r3, [r3, #16]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d105      	bne.n	800d4d2 <HAL_UART_Receive+0x76>
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d4cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d4d0:	e02d      	b.n	800d52e <HAL_UART_Receive+0xd2>
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	22ff      	movs	r2, #255	; 0xff
 800d4d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d4da:	e028      	b.n	800d52e <HAL_UART_Receive+0xd2>
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	689b      	ldr	r3, [r3, #8]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d10d      	bne.n	800d500 <HAL_UART_Receive+0xa4>
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	691b      	ldr	r3, [r3, #16]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d104      	bne.n	800d4f6 <HAL_UART_Receive+0x9a>
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	22ff      	movs	r2, #255	; 0xff
 800d4f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d4f4:	e01b      	b.n	800d52e <HAL_UART_Receive+0xd2>
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	227f      	movs	r2, #127	; 0x7f
 800d4fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d4fe:	e016      	b.n	800d52e <HAL_UART_Receive+0xd2>
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	689b      	ldr	r3, [r3, #8]
 800d504:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d508:	d10d      	bne.n	800d526 <HAL_UART_Receive+0xca>
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	691b      	ldr	r3, [r3, #16]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d104      	bne.n	800d51c <HAL_UART_Receive+0xc0>
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	227f      	movs	r2, #127	; 0x7f
 800d516:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d51a:	e008      	b.n	800d52e <HAL_UART_Receive+0xd2>
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	223f      	movs	r2, #63	; 0x3f
 800d520:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d524:	e003      	b.n	800d52e <HAL_UART_Receive+0xd2>
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2200      	movs	r2, #0
 800d52a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d534:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	689b      	ldr	r3, [r3, #8]
 800d53a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d53e:	d108      	bne.n	800d552 <HAL_UART_Receive+0xf6>
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	691b      	ldr	r3, [r3, #16]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d104      	bne.n	800d552 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800d548:	2300      	movs	r3, #0
 800d54a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	61bb      	str	r3, [r7, #24]
 800d550:	e003      	b.n	800d55a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d556:	2300      	movs	r3, #0
 800d558:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d55a:	e036      	b.n	800d5ca <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	9300      	str	r3, [sp, #0]
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	2200      	movs	r2, #0
 800d564:	2120      	movs	r1, #32
 800d566:	68f8      	ldr	r0, [r7, #12]
 800d568:	f001 fbd2 	bl	800ed10 <UART_WaitOnFlagUntilTimeout>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d005      	beq.n	800d57e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2220      	movs	r2, #32
 800d576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800d57a:	2303      	movs	r3, #3
 800d57c:	e032      	b.n	800d5e4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800d57e:	69fb      	ldr	r3, [r7, #28]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d10c      	bne.n	800d59e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d58a:	b29a      	uxth	r2, r3
 800d58c:	8a7b      	ldrh	r3, [r7, #18]
 800d58e:	4013      	ands	r3, r2
 800d590:	b29a      	uxth	r2, r3
 800d592:	69bb      	ldr	r3, [r7, #24]
 800d594:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	3302      	adds	r3, #2
 800d59a:	61bb      	str	r3, [r7, #24]
 800d59c:	e00c      	b.n	800d5b8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a4:	b2da      	uxtb	r2, r3
 800d5a6:	8a7b      	ldrh	r3, [r7, #18]
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	4013      	ands	r3, r2
 800d5ac:	b2da      	uxtb	r2, r3
 800d5ae:	69fb      	ldr	r3, [r7, #28]
 800d5b0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	b29a      	uxth	r2, r3
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d1c2      	bne.n	800d55c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2220      	movs	r2, #32
 800d5da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	e000      	b.n	800d5e4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800d5e2:	2302      	movs	r3, #2
  }
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	3720      	adds	r7, #32
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b0ba      	sub	sp, #232	; 0xe8
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	69db      	ldr	r3, [r3, #28]
 800d5fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d612:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d616:	f640 030f 	movw	r3, #2063	; 0x80f
 800d61a:	4013      	ands	r3, r2
 800d61c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d620:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d624:	2b00      	cmp	r3, #0
 800d626:	d11b      	bne.n	800d660 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d62c:	f003 0320 	and.w	r3, r3, #32
 800d630:	2b00      	cmp	r3, #0
 800d632:	d015      	beq.n	800d660 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d638:	f003 0320 	and.w	r3, r3, #32
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d105      	bne.n	800d64c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d009      	beq.n	800d660 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d650:	2b00      	cmp	r3, #0
 800d652:	f000 8377 	beq.w	800dd44 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	4798      	blx	r3
      }
      return;
 800d65e:	e371      	b.n	800dd44 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d660:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d664:	2b00      	cmp	r3, #0
 800d666:	f000 8123 	beq.w	800d8b0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d66a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d66e:	4b8d      	ldr	r3, [pc, #564]	; (800d8a4 <HAL_UART_IRQHandler+0x2b8>)
 800d670:	4013      	ands	r3, r2
 800d672:	2b00      	cmp	r3, #0
 800d674:	d106      	bne.n	800d684 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d676:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d67a:	4b8b      	ldr	r3, [pc, #556]	; (800d8a8 <HAL_UART_IRQHandler+0x2bc>)
 800d67c:	4013      	ands	r3, r2
 800d67e:	2b00      	cmp	r3, #0
 800d680:	f000 8116 	beq.w	800d8b0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d688:	f003 0301 	and.w	r3, r3, #1
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d011      	beq.n	800d6b4 <HAL_UART_IRQHandler+0xc8>
 800d690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d00b      	beq.n	800d6b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6aa:	f043 0201 	orr.w	r2, r3, #1
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d6b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6b8:	f003 0302 	and.w	r3, r3, #2
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d011      	beq.n	800d6e4 <HAL_UART_IRQHandler+0xf8>
 800d6c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d6c4:	f003 0301 	and.w	r3, r3, #1
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d00b      	beq.n	800d6e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2202      	movs	r2, #2
 800d6d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6da:	f043 0204 	orr.w	r2, r3, #4
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d6e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6e8:	f003 0304 	and.w	r3, r3, #4
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d011      	beq.n	800d714 <HAL_UART_IRQHandler+0x128>
 800d6f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d6f4:	f003 0301 	and.w	r3, r3, #1
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d00b      	beq.n	800d714 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	2204      	movs	r2, #4
 800d702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d70a:	f043 0202 	orr.w	r2, r3, #2
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d718:	f003 0308 	and.w	r3, r3, #8
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d017      	beq.n	800d750 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d724:	f003 0320 	and.w	r3, r3, #32
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d105      	bne.n	800d738 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d72c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d730:	4b5c      	ldr	r3, [pc, #368]	; (800d8a4 <HAL_UART_IRQHandler+0x2b8>)
 800d732:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d734:	2b00      	cmp	r3, #0
 800d736:	d00b      	beq.n	800d750 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2208      	movs	r2, #8
 800d73e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d746:	f043 0208 	orr.w	r2, r3, #8
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d012      	beq.n	800d782 <HAL_UART_IRQHandler+0x196>
 800d75c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d760:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d764:	2b00      	cmp	r3, #0
 800d766:	d00c      	beq.n	800d782 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d770:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d778:	f043 0220 	orr.w	r2, r3, #32
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d788:	2b00      	cmp	r3, #0
 800d78a:	f000 82dd 	beq.w	800dd48 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d78e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d792:	f003 0320 	and.w	r3, r3, #32
 800d796:	2b00      	cmp	r3, #0
 800d798:	d013      	beq.n	800d7c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d79a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d79e:	f003 0320 	and.w	r3, r3, #32
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d105      	bne.n	800d7b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d7a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d007      	beq.n	800d7c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d003      	beq.n	800d7c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	689b      	ldr	r3, [r3, #8]
 800d7d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7d6:	2b40      	cmp	r3, #64	; 0x40
 800d7d8:	d005      	beq.n	800d7e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d7da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d7de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d054      	beq.n	800d890 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f001 fafa 	bl	800ede0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	689b      	ldr	r3, [r3, #8]
 800d7f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7f6:	2b40      	cmp	r3, #64	; 0x40
 800d7f8:	d146      	bne.n	800d888 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	3308      	adds	r3, #8
 800d800:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d804:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d808:	e853 3f00 	ldrex	r3, [r3]
 800d80c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d818:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	3308      	adds	r3, #8
 800d822:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d826:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d82a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d82e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d832:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d836:	e841 2300 	strex	r3, r2, [r1]
 800d83a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d83e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d1d9      	bne.n	800d7fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d017      	beq.n	800d880 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d856:	4a15      	ldr	r2, [pc, #84]	; (800d8ac <HAL_UART_IRQHandler+0x2c0>)
 800d858:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d860:	4618      	mov	r0, r3
 800d862:	f7f8 fa75 	bl	8005d50 <HAL_DMA_Abort_IT>
 800d866:	4603      	mov	r3, r0
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d019      	beq.n	800d8a0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d87a:	4610      	mov	r0, r2
 800d87c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d87e:	e00f      	b.n	800d8a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f000 fa77 	bl	800dd74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d886:	e00b      	b.n	800d8a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 fa73 	bl	800dd74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d88e:	e007      	b.n	800d8a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 fa6f 	bl	800dd74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2200      	movs	r2, #0
 800d89a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d89e:	e253      	b.n	800dd48 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8a0:	bf00      	nop
    return;
 800d8a2:	e251      	b.n	800dd48 <HAL_UART_IRQHandler+0x75c>
 800d8a4:	10000001 	.word	0x10000001
 800d8a8:	04000120 	.word	0x04000120
 800d8ac:	0800eead 	.word	0x0800eead

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	f040 81e7 	bne.w	800dc88 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d8ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8be:	f003 0310 	and.w	r3, r3, #16
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	f000 81e0 	beq.w	800dc88 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d8c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8cc:	f003 0310 	and.w	r3, r3, #16
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f000 81d9 	beq.w	800dc88 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	2210      	movs	r2, #16
 800d8dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	689b      	ldr	r3, [r3, #8]
 800d8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8e8:	2b40      	cmp	r3, #64	; 0x40
 800d8ea:	f040 8151 	bne.w	800db90 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4a96      	ldr	r2, [pc, #600]	; (800db50 <HAL_UART_IRQHandler+0x564>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d068      	beq.n	800d9ce <HAL_UART_IRQHandler+0x3e2>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a93      	ldr	r2, [pc, #588]	; (800db54 <HAL_UART_IRQHandler+0x568>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d061      	beq.n	800d9ce <HAL_UART_IRQHandler+0x3e2>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	4a91      	ldr	r2, [pc, #580]	; (800db58 <HAL_UART_IRQHandler+0x56c>)
 800d914:	4293      	cmp	r3, r2
 800d916:	d05a      	beq.n	800d9ce <HAL_UART_IRQHandler+0x3e2>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	4a8e      	ldr	r2, [pc, #568]	; (800db5c <HAL_UART_IRQHandler+0x570>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d053      	beq.n	800d9ce <HAL_UART_IRQHandler+0x3e2>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	4a8c      	ldr	r2, [pc, #560]	; (800db60 <HAL_UART_IRQHandler+0x574>)
 800d930:	4293      	cmp	r3, r2
 800d932:	d04c      	beq.n	800d9ce <HAL_UART_IRQHandler+0x3e2>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a89      	ldr	r2, [pc, #548]	; (800db64 <HAL_UART_IRQHandler+0x578>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d045      	beq.n	800d9ce <HAL_UART_IRQHandler+0x3e2>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4a87      	ldr	r2, [pc, #540]	; (800db68 <HAL_UART_IRQHandler+0x57c>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d03e      	beq.n	800d9ce <HAL_UART_IRQHandler+0x3e2>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4a84      	ldr	r2, [pc, #528]	; (800db6c <HAL_UART_IRQHandler+0x580>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d037      	beq.n	800d9ce <HAL_UART_IRQHandler+0x3e2>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	4a82      	ldr	r2, [pc, #520]	; (800db70 <HAL_UART_IRQHandler+0x584>)
 800d968:	4293      	cmp	r3, r2
 800d96a:	d030      	beq.n	800d9ce <HAL_UART_IRQHandler+0x3e2>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a7f      	ldr	r2, [pc, #508]	; (800db74 <HAL_UART_IRQHandler+0x588>)
 800d976:	4293      	cmp	r3, r2
 800d978:	d029      	beq.n	800d9ce <HAL_UART_IRQHandler+0x3e2>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4a7d      	ldr	r2, [pc, #500]	; (800db78 <HAL_UART_IRQHandler+0x58c>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d022      	beq.n	800d9ce <HAL_UART_IRQHandler+0x3e2>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a7a      	ldr	r2, [pc, #488]	; (800db7c <HAL_UART_IRQHandler+0x590>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d01b      	beq.n	800d9ce <HAL_UART_IRQHandler+0x3e2>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4a78      	ldr	r2, [pc, #480]	; (800db80 <HAL_UART_IRQHandler+0x594>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d014      	beq.n	800d9ce <HAL_UART_IRQHandler+0x3e2>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a75      	ldr	r2, [pc, #468]	; (800db84 <HAL_UART_IRQHandler+0x598>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d00d      	beq.n	800d9ce <HAL_UART_IRQHandler+0x3e2>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4a73      	ldr	r2, [pc, #460]	; (800db88 <HAL_UART_IRQHandler+0x59c>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d006      	beq.n	800d9ce <HAL_UART_IRQHandler+0x3e2>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a70      	ldr	r2, [pc, #448]	; (800db8c <HAL_UART_IRQHandler+0x5a0>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d106      	bne.n	800d9dc <HAL_UART_IRQHandler+0x3f0>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	e005      	b.n	800d9e8 <HAL_UART_IRQHandler+0x3fc>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d9ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	f000 81ab 	beq.w	800dd4c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d9fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800da00:	429a      	cmp	r2, r3
 800da02:	f080 81a3 	bcs.w	800dd4c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800da0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da16:	69db      	ldr	r3, [r3, #28]
 800da18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da1c:	f000 8087 	beq.w	800db2e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da2c:	e853 3f00 	ldrex	r3, [r3]
 800da30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800da34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	461a      	mov	r2, r3
 800da46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800da4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800da4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800da56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800da5a:	e841 2300 	strex	r3, r2, [r1]
 800da5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800da62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1da      	bne.n	800da20 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	3308      	adds	r3, #8
 800da70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800da74:	e853 3f00 	ldrex	r3, [r3]
 800da78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800da7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da7c:	f023 0301 	bic.w	r3, r3, #1
 800da80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	3308      	adds	r3, #8
 800da8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800da8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800da92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800da96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800da9a:	e841 2300 	strex	r3, r2, [r1]
 800da9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800daa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d1e1      	bne.n	800da6a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	3308      	adds	r3, #8
 800daac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dab0:	e853 3f00 	ldrex	r3, [r3]
 800dab4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dabc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	3308      	adds	r3, #8
 800dac6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800daca:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dacc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dace:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dad0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dad2:	e841 2300 	strex	r3, r2, [r1]
 800dad6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d1e3      	bne.n	800daa6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2220      	movs	r2, #32
 800dae2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2200      	movs	r2, #0
 800daea:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daf4:	e853 3f00 	ldrex	r3, [r3]
 800daf8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dafa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dafc:	f023 0310 	bic.w	r3, r3, #16
 800db00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	461a      	mov	r2, r3
 800db0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800db0e:	65bb      	str	r3, [r7, #88]	; 0x58
 800db10:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db16:	e841 2300 	strex	r3, r2, [r1]
 800db1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800db1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d1e4      	bne.n	800daec <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db28:	4618      	mov	r0, r3
 800db2a:	f7f7 fdf3 	bl	8005714 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2202      	movs	r2, #2
 800db32:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db40:	b29b      	uxth	r3, r3
 800db42:	1ad3      	subs	r3, r2, r3
 800db44:	b29b      	uxth	r3, r3
 800db46:	4619      	mov	r1, r3
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 f91d 	bl	800dd88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800db4e:	e0fd      	b.n	800dd4c <HAL_UART_IRQHandler+0x760>
 800db50:	40020010 	.word	0x40020010
 800db54:	40020028 	.word	0x40020028
 800db58:	40020040 	.word	0x40020040
 800db5c:	40020058 	.word	0x40020058
 800db60:	40020070 	.word	0x40020070
 800db64:	40020088 	.word	0x40020088
 800db68:	400200a0 	.word	0x400200a0
 800db6c:	400200b8 	.word	0x400200b8
 800db70:	40020410 	.word	0x40020410
 800db74:	40020428 	.word	0x40020428
 800db78:	40020440 	.word	0x40020440
 800db7c:	40020458 	.word	0x40020458
 800db80:	40020470 	.word	0x40020470
 800db84:	40020488 	.word	0x40020488
 800db88:	400204a0 	.word	0x400204a0
 800db8c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	1ad3      	subs	r3, r2, r3
 800dba0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	f000 80cf 	beq.w	800dd50 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800dbb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	f000 80ca 	beq.w	800dd50 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc4:	e853 3f00 	ldrex	r3, [r3]
 800dbc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dbca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dbd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	461a      	mov	r2, r3
 800dbda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dbde:	647b      	str	r3, [r7, #68]	; 0x44
 800dbe0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dbe4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dbe6:	e841 2300 	strex	r3, r2, [r1]
 800dbea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dbec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d1e4      	bne.n	800dbbc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	3308      	adds	r3, #8
 800dbf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfc:	e853 3f00 	ldrex	r3, [r3]
 800dc00:	623b      	str	r3, [r7, #32]
   return(result);
 800dc02:	6a3a      	ldr	r2, [r7, #32]
 800dc04:	4b55      	ldr	r3, [pc, #340]	; (800dd5c <HAL_UART_IRQHandler+0x770>)
 800dc06:	4013      	ands	r3, r2
 800dc08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	3308      	adds	r3, #8
 800dc12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dc16:	633a      	str	r2, [r7, #48]	; 0x30
 800dc18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc1e:	e841 2300 	strex	r3, r2, [r1]
 800dc22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d1e3      	bne.n	800dbf2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2220      	movs	r2, #32
 800dc2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2200      	movs	r2, #0
 800dc36:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	e853 3f00 	ldrex	r3, [r3]
 800dc4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f023 0310 	bic.w	r3, r3, #16
 800dc52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dc60:	61fb      	str	r3, [r7, #28]
 800dc62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc64:	69b9      	ldr	r1, [r7, #24]
 800dc66:	69fa      	ldr	r2, [r7, #28]
 800dc68:	e841 2300 	strex	r3, r2, [r1]
 800dc6c:	617b      	str	r3, [r7, #20]
   return(result);
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d1e4      	bne.n	800dc3e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2202      	movs	r2, #2
 800dc78:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dc7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dc7e:	4619      	mov	r1, r3
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f000 f881 	bl	800dd88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dc86:	e063      	b.n	800dd50 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dc88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d00e      	beq.n	800dcb2 <HAL_UART_IRQHandler+0x6c6>
 800dc94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d008      	beq.n	800dcb2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dca8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f001 f93f 	bl	800ef2e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dcb0:	e051      	b.n	800dd56 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dcb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d014      	beq.n	800dce8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dcbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dcc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d105      	bne.n	800dcd6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dcca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dcce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d008      	beq.n	800dce8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d03a      	beq.n	800dd54 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	4798      	blx	r3
    }
    return;
 800dce6:	e035      	b.n	800dd54 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d009      	beq.n	800dd08 <HAL_UART_IRQHandler+0x71c>
 800dcf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dcf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d003      	beq.n	800dd08 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f001 f8e9 	bl	800eed8 <UART_EndTransmit_IT>
    return;
 800dd06:	e026      	b.n	800dd56 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dd08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d009      	beq.n	800dd28 <HAL_UART_IRQHandler+0x73c>
 800dd14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d003      	beq.n	800dd28 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f001 f918 	bl	800ef56 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd26:	e016      	b.n	800dd56 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dd28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d010      	beq.n	800dd56 <HAL_UART_IRQHandler+0x76a>
 800dd34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	da0c      	bge.n	800dd56 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f001 f900 	bl	800ef42 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dd42:	e008      	b.n	800dd56 <HAL_UART_IRQHandler+0x76a>
      return;
 800dd44:	bf00      	nop
 800dd46:	e006      	b.n	800dd56 <HAL_UART_IRQHandler+0x76a>
    return;
 800dd48:	bf00      	nop
 800dd4a:	e004      	b.n	800dd56 <HAL_UART_IRQHandler+0x76a>
      return;
 800dd4c:	bf00      	nop
 800dd4e:	e002      	b.n	800dd56 <HAL_UART_IRQHandler+0x76a>
      return;
 800dd50:	bf00      	nop
 800dd52:	e000      	b.n	800dd56 <HAL_UART_IRQHandler+0x76a>
    return;
 800dd54:	bf00      	nop
  }
}
 800dd56:	37e8      	adds	r7, #232	; 0xe8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}
 800dd5c:	effffffe 	.word	0xeffffffe

0800dd60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dd68:	bf00      	nop
 800dd6a:	370c      	adds	r7, #12
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dd74:	b480      	push	{r7}
 800dd76:	b083      	sub	sp, #12
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dd7c:	bf00      	nop
 800dd7e:	370c      	adds	r7, #12
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b083      	sub	sp, #12
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	460b      	mov	r3, r1
 800dd92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dd94:	bf00      	nop
 800dd96:	370c      	adds	r7, #12
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9e:	4770      	bx	lr

0800dda0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dda0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dda4:	b092      	sub	sp, #72	; 0x48
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	689a      	ldr	r2, [r3, #8]
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	691b      	ldr	r3, [r3, #16]
 800ddb8:	431a      	orrs	r2, r3
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	695b      	ldr	r3, [r3, #20]
 800ddbe:	431a      	orrs	r2, r3
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	69db      	ldr	r3, [r3, #28]
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	4bbe      	ldr	r3, [pc, #760]	; (800e0c8 <UART_SetConfig+0x328>)
 800ddd0:	4013      	ands	r3, r2
 800ddd2:	697a      	ldr	r2, [r7, #20]
 800ddd4:	6812      	ldr	r2, [r2, #0]
 800ddd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ddd8:	430b      	orrs	r3, r1
 800ddda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	68da      	ldr	r2, [r3, #12]
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	430a      	orrs	r2, r1
 800ddf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	699b      	ldr	r3, [r3, #24]
 800ddf6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4ab3      	ldr	r2, [pc, #716]	; (800e0cc <UART_SetConfig+0x32c>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d004      	beq.n	800de0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	6a1b      	ldr	r3, [r3, #32]
 800de06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de08:	4313      	orrs	r3, r2
 800de0a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	689a      	ldr	r2, [r3, #8]
 800de12:	4baf      	ldr	r3, [pc, #700]	; (800e0d0 <UART_SetConfig+0x330>)
 800de14:	4013      	ands	r3, r2
 800de16:	697a      	ldr	r2, [r7, #20]
 800de18:	6812      	ldr	r2, [r2, #0]
 800de1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800de1c:	430b      	orrs	r3, r1
 800de1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de26:	f023 010f 	bic.w	r1, r3, #15
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	430a      	orrs	r2, r1
 800de34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4aa6      	ldr	r2, [pc, #664]	; (800e0d4 <UART_SetConfig+0x334>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d177      	bne.n	800df30 <UART_SetConfig+0x190>
 800de40:	4ba5      	ldr	r3, [pc, #660]	; (800e0d8 <UART_SetConfig+0x338>)
 800de42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de48:	2b28      	cmp	r3, #40	; 0x28
 800de4a:	d86d      	bhi.n	800df28 <UART_SetConfig+0x188>
 800de4c:	a201      	add	r2, pc, #4	; (adr r2, 800de54 <UART_SetConfig+0xb4>)
 800de4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de52:	bf00      	nop
 800de54:	0800def9 	.word	0x0800def9
 800de58:	0800df29 	.word	0x0800df29
 800de5c:	0800df29 	.word	0x0800df29
 800de60:	0800df29 	.word	0x0800df29
 800de64:	0800df29 	.word	0x0800df29
 800de68:	0800df29 	.word	0x0800df29
 800de6c:	0800df29 	.word	0x0800df29
 800de70:	0800df29 	.word	0x0800df29
 800de74:	0800df01 	.word	0x0800df01
 800de78:	0800df29 	.word	0x0800df29
 800de7c:	0800df29 	.word	0x0800df29
 800de80:	0800df29 	.word	0x0800df29
 800de84:	0800df29 	.word	0x0800df29
 800de88:	0800df29 	.word	0x0800df29
 800de8c:	0800df29 	.word	0x0800df29
 800de90:	0800df29 	.word	0x0800df29
 800de94:	0800df09 	.word	0x0800df09
 800de98:	0800df29 	.word	0x0800df29
 800de9c:	0800df29 	.word	0x0800df29
 800dea0:	0800df29 	.word	0x0800df29
 800dea4:	0800df29 	.word	0x0800df29
 800dea8:	0800df29 	.word	0x0800df29
 800deac:	0800df29 	.word	0x0800df29
 800deb0:	0800df29 	.word	0x0800df29
 800deb4:	0800df11 	.word	0x0800df11
 800deb8:	0800df29 	.word	0x0800df29
 800debc:	0800df29 	.word	0x0800df29
 800dec0:	0800df29 	.word	0x0800df29
 800dec4:	0800df29 	.word	0x0800df29
 800dec8:	0800df29 	.word	0x0800df29
 800decc:	0800df29 	.word	0x0800df29
 800ded0:	0800df29 	.word	0x0800df29
 800ded4:	0800df19 	.word	0x0800df19
 800ded8:	0800df29 	.word	0x0800df29
 800dedc:	0800df29 	.word	0x0800df29
 800dee0:	0800df29 	.word	0x0800df29
 800dee4:	0800df29 	.word	0x0800df29
 800dee8:	0800df29 	.word	0x0800df29
 800deec:	0800df29 	.word	0x0800df29
 800def0:	0800df29 	.word	0x0800df29
 800def4:	0800df21 	.word	0x0800df21
 800def8:	2301      	movs	r3, #1
 800defa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800defe:	e326      	b.n	800e54e <UART_SetConfig+0x7ae>
 800df00:	2304      	movs	r3, #4
 800df02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df06:	e322      	b.n	800e54e <UART_SetConfig+0x7ae>
 800df08:	2308      	movs	r3, #8
 800df0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df0e:	e31e      	b.n	800e54e <UART_SetConfig+0x7ae>
 800df10:	2310      	movs	r3, #16
 800df12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df16:	e31a      	b.n	800e54e <UART_SetConfig+0x7ae>
 800df18:	2320      	movs	r3, #32
 800df1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df1e:	e316      	b.n	800e54e <UART_SetConfig+0x7ae>
 800df20:	2340      	movs	r3, #64	; 0x40
 800df22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df26:	e312      	b.n	800e54e <UART_SetConfig+0x7ae>
 800df28:	2380      	movs	r3, #128	; 0x80
 800df2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df2e:	e30e      	b.n	800e54e <UART_SetConfig+0x7ae>
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4a69      	ldr	r2, [pc, #420]	; (800e0dc <UART_SetConfig+0x33c>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d130      	bne.n	800df9c <UART_SetConfig+0x1fc>
 800df3a:	4b67      	ldr	r3, [pc, #412]	; (800e0d8 <UART_SetConfig+0x338>)
 800df3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df3e:	f003 0307 	and.w	r3, r3, #7
 800df42:	2b05      	cmp	r3, #5
 800df44:	d826      	bhi.n	800df94 <UART_SetConfig+0x1f4>
 800df46:	a201      	add	r2, pc, #4	; (adr r2, 800df4c <UART_SetConfig+0x1ac>)
 800df48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df4c:	0800df65 	.word	0x0800df65
 800df50:	0800df6d 	.word	0x0800df6d
 800df54:	0800df75 	.word	0x0800df75
 800df58:	0800df7d 	.word	0x0800df7d
 800df5c:	0800df85 	.word	0x0800df85
 800df60:	0800df8d 	.word	0x0800df8d
 800df64:	2300      	movs	r3, #0
 800df66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df6a:	e2f0      	b.n	800e54e <UART_SetConfig+0x7ae>
 800df6c:	2304      	movs	r3, #4
 800df6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df72:	e2ec      	b.n	800e54e <UART_SetConfig+0x7ae>
 800df74:	2308      	movs	r3, #8
 800df76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df7a:	e2e8      	b.n	800e54e <UART_SetConfig+0x7ae>
 800df7c:	2310      	movs	r3, #16
 800df7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df82:	e2e4      	b.n	800e54e <UART_SetConfig+0x7ae>
 800df84:	2320      	movs	r3, #32
 800df86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df8a:	e2e0      	b.n	800e54e <UART_SetConfig+0x7ae>
 800df8c:	2340      	movs	r3, #64	; 0x40
 800df8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df92:	e2dc      	b.n	800e54e <UART_SetConfig+0x7ae>
 800df94:	2380      	movs	r3, #128	; 0x80
 800df96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df9a:	e2d8      	b.n	800e54e <UART_SetConfig+0x7ae>
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4a4f      	ldr	r2, [pc, #316]	; (800e0e0 <UART_SetConfig+0x340>)
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	d130      	bne.n	800e008 <UART_SetConfig+0x268>
 800dfa6:	4b4c      	ldr	r3, [pc, #304]	; (800e0d8 <UART_SetConfig+0x338>)
 800dfa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfaa:	f003 0307 	and.w	r3, r3, #7
 800dfae:	2b05      	cmp	r3, #5
 800dfb0:	d826      	bhi.n	800e000 <UART_SetConfig+0x260>
 800dfb2:	a201      	add	r2, pc, #4	; (adr r2, 800dfb8 <UART_SetConfig+0x218>)
 800dfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb8:	0800dfd1 	.word	0x0800dfd1
 800dfbc:	0800dfd9 	.word	0x0800dfd9
 800dfc0:	0800dfe1 	.word	0x0800dfe1
 800dfc4:	0800dfe9 	.word	0x0800dfe9
 800dfc8:	0800dff1 	.word	0x0800dff1
 800dfcc:	0800dff9 	.word	0x0800dff9
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfd6:	e2ba      	b.n	800e54e <UART_SetConfig+0x7ae>
 800dfd8:	2304      	movs	r3, #4
 800dfda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfde:	e2b6      	b.n	800e54e <UART_SetConfig+0x7ae>
 800dfe0:	2308      	movs	r3, #8
 800dfe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfe6:	e2b2      	b.n	800e54e <UART_SetConfig+0x7ae>
 800dfe8:	2310      	movs	r3, #16
 800dfea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfee:	e2ae      	b.n	800e54e <UART_SetConfig+0x7ae>
 800dff0:	2320      	movs	r3, #32
 800dff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dff6:	e2aa      	b.n	800e54e <UART_SetConfig+0x7ae>
 800dff8:	2340      	movs	r3, #64	; 0x40
 800dffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dffe:	e2a6      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e000:	2380      	movs	r3, #128	; 0x80
 800e002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e006:	e2a2      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	4a35      	ldr	r2, [pc, #212]	; (800e0e4 <UART_SetConfig+0x344>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d130      	bne.n	800e074 <UART_SetConfig+0x2d4>
 800e012:	4b31      	ldr	r3, [pc, #196]	; (800e0d8 <UART_SetConfig+0x338>)
 800e014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e016:	f003 0307 	and.w	r3, r3, #7
 800e01a:	2b05      	cmp	r3, #5
 800e01c:	d826      	bhi.n	800e06c <UART_SetConfig+0x2cc>
 800e01e:	a201      	add	r2, pc, #4	; (adr r2, 800e024 <UART_SetConfig+0x284>)
 800e020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e024:	0800e03d 	.word	0x0800e03d
 800e028:	0800e045 	.word	0x0800e045
 800e02c:	0800e04d 	.word	0x0800e04d
 800e030:	0800e055 	.word	0x0800e055
 800e034:	0800e05d 	.word	0x0800e05d
 800e038:	0800e065 	.word	0x0800e065
 800e03c:	2300      	movs	r3, #0
 800e03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e042:	e284      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e044:	2304      	movs	r3, #4
 800e046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e04a:	e280      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e04c:	2308      	movs	r3, #8
 800e04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e052:	e27c      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e054:	2310      	movs	r3, #16
 800e056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e05a:	e278      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e05c:	2320      	movs	r3, #32
 800e05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e062:	e274      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e064:	2340      	movs	r3, #64	; 0x40
 800e066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e06a:	e270      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e06c:	2380      	movs	r3, #128	; 0x80
 800e06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e072:	e26c      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4a1b      	ldr	r2, [pc, #108]	; (800e0e8 <UART_SetConfig+0x348>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d142      	bne.n	800e104 <UART_SetConfig+0x364>
 800e07e:	4b16      	ldr	r3, [pc, #88]	; (800e0d8 <UART_SetConfig+0x338>)
 800e080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e082:	f003 0307 	and.w	r3, r3, #7
 800e086:	2b05      	cmp	r3, #5
 800e088:	d838      	bhi.n	800e0fc <UART_SetConfig+0x35c>
 800e08a:	a201      	add	r2, pc, #4	; (adr r2, 800e090 <UART_SetConfig+0x2f0>)
 800e08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e090:	0800e0a9 	.word	0x0800e0a9
 800e094:	0800e0b1 	.word	0x0800e0b1
 800e098:	0800e0b9 	.word	0x0800e0b9
 800e09c:	0800e0c1 	.word	0x0800e0c1
 800e0a0:	0800e0ed 	.word	0x0800e0ed
 800e0a4:	0800e0f5 	.word	0x0800e0f5
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ae:	e24e      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e0b0:	2304      	movs	r3, #4
 800e0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0b6:	e24a      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e0b8:	2308      	movs	r3, #8
 800e0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0be:	e246      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e0c0:	2310      	movs	r3, #16
 800e0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0c6:	e242      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e0c8:	cfff69f3 	.word	0xcfff69f3
 800e0cc:	58000c00 	.word	0x58000c00
 800e0d0:	11fff4ff 	.word	0x11fff4ff
 800e0d4:	40011000 	.word	0x40011000
 800e0d8:	58024400 	.word	0x58024400
 800e0dc:	40004400 	.word	0x40004400
 800e0e0:	40004800 	.word	0x40004800
 800e0e4:	40004c00 	.word	0x40004c00
 800e0e8:	40005000 	.word	0x40005000
 800e0ec:	2320      	movs	r3, #32
 800e0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0f2:	e22c      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e0f4:	2340      	movs	r3, #64	; 0x40
 800e0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0fa:	e228      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e0fc:	2380      	movs	r3, #128	; 0x80
 800e0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e102:	e224      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	4ab1      	ldr	r2, [pc, #708]	; (800e3d0 <UART_SetConfig+0x630>)
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d176      	bne.n	800e1fc <UART_SetConfig+0x45c>
 800e10e:	4bb1      	ldr	r3, [pc, #708]	; (800e3d4 <UART_SetConfig+0x634>)
 800e110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e116:	2b28      	cmp	r3, #40	; 0x28
 800e118:	d86c      	bhi.n	800e1f4 <UART_SetConfig+0x454>
 800e11a:	a201      	add	r2, pc, #4	; (adr r2, 800e120 <UART_SetConfig+0x380>)
 800e11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e120:	0800e1c5 	.word	0x0800e1c5
 800e124:	0800e1f5 	.word	0x0800e1f5
 800e128:	0800e1f5 	.word	0x0800e1f5
 800e12c:	0800e1f5 	.word	0x0800e1f5
 800e130:	0800e1f5 	.word	0x0800e1f5
 800e134:	0800e1f5 	.word	0x0800e1f5
 800e138:	0800e1f5 	.word	0x0800e1f5
 800e13c:	0800e1f5 	.word	0x0800e1f5
 800e140:	0800e1cd 	.word	0x0800e1cd
 800e144:	0800e1f5 	.word	0x0800e1f5
 800e148:	0800e1f5 	.word	0x0800e1f5
 800e14c:	0800e1f5 	.word	0x0800e1f5
 800e150:	0800e1f5 	.word	0x0800e1f5
 800e154:	0800e1f5 	.word	0x0800e1f5
 800e158:	0800e1f5 	.word	0x0800e1f5
 800e15c:	0800e1f5 	.word	0x0800e1f5
 800e160:	0800e1d5 	.word	0x0800e1d5
 800e164:	0800e1f5 	.word	0x0800e1f5
 800e168:	0800e1f5 	.word	0x0800e1f5
 800e16c:	0800e1f5 	.word	0x0800e1f5
 800e170:	0800e1f5 	.word	0x0800e1f5
 800e174:	0800e1f5 	.word	0x0800e1f5
 800e178:	0800e1f5 	.word	0x0800e1f5
 800e17c:	0800e1f5 	.word	0x0800e1f5
 800e180:	0800e1dd 	.word	0x0800e1dd
 800e184:	0800e1f5 	.word	0x0800e1f5
 800e188:	0800e1f5 	.word	0x0800e1f5
 800e18c:	0800e1f5 	.word	0x0800e1f5
 800e190:	0800e1f5 	.word	0x0800e1f5
 800e194:	0800e1f5 	.word	0x0800e1f5
 800e198:	0800e1f5 	.word	0x0800e1f5
 800e19c:	0800e1f5 	.word	0x0800e1f5
 800e1a0:	0800e1e5 	.word	0x0800e1e5
 800e1a4:	0800e1f5 	.word	0x0800e1f5
 800e1a8:	0800e1f5 	.word	0x0800e1f5
 800e1ac:	0800e1f5 	.word	0x0800e1f5
 800e1b0:	0800e1f5 	.word	0x0800e1f5
 800e1b4:	0800e1f5 	.word	0x0800e1f5
 800e1b8:	0800e1f5 	.word	0x0800e1f5
 800e1bc:	0800e1f5 	.word	0x0800e1f5
 800e1c0:	0800e1ed 	.word	0x0800e1ed
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ca:	e1c0      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e1cc:	2304      	movs	r3, #4
 800e1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1d2:	e1bc      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e1d4:	2308      	movs	r3, #8
 800e1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1da:	e1b8      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e1dc:	2310      	movs	r3, #16
 800e1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1e2:	e1b4      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e1e4:	2320      	movs	r3, #32
 800e1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ea:	e1b0      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e1ec:	2340      	movs	r3, #64	; 0x40
 800e1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1f2:	e1ac      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e1f4:	2380      	movs	r3, #128	; 0x80
 800e1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1fa:	e1a8      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	4a75      	ldr	r2, [pc, #468]	; (800e3d8 <UART_SetConfig+0x638>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d130      	bne.n	800e268 <UART_SetConfig+0x4c8>
 800e206:	4b73      	ldr	r3, [pc, #460]	; (800e3d4 <UART_SetConfig+0x634>)
 800e208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e20a:	f003 0307 	and.w	r3, r3, #7
 800e20e:	2b05      	cmp	r3, #5
 800e210:	d826      	bhi.n	800e260 <UART_SetConfig+0x4c0>
 800e212:	a201      	add	r2, pc, #4	; (adr r2, 800e218 <UART_SetConfig+0x478>)
 800e214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e218:	0800e231 	.word	0x0800e231
 800e21c:	0800e239 	.word	0x0800e239
 800e220:	0800e241 	.word	0x0800e241
 800e224:	0800e249 	.word	0x0800e249
 800e228:	0800e251 	.word	0x0800e251
 800e22c:	0800e259 	.word	0x0800e259
 800e230:	2300      	movs	r3, #0
 800e232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e236:	e18a      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e238:	2304      	movs	r3, #4
 800e23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e23e:	e186      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e240:	2308      	movs	r3, #8
 800e242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e246:	e182      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e248:	2310      	movs	r3, #16
 800e24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e24e:	e17e      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e250:	2320      	movs	r3, #32
 800e252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e256:	e17a      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e258:	2340      	movs	r3, #64	; 0x40
 800e25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25e:	e176      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e260:	2380      	movs	r3, #128	; 0x80
 800e262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e266:	e172      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4a5b      	ldr	r2, [pc, #364]	; (800e3dc <UART_SetConfig+0x63c>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d130      	bne.n	800e2d4 <UART_SetConfig+0x534>
 800e272:	4b58      	ldr	r3, [pc, #352]	; (800e3d4 <UART_SetConfig+0x634>)
 800e274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e276:	f003 0307 	and.w	r3, r3, #7
 800e27a:	2b05      	cmp	r3, #5
 800e27c:	d826      	bhi.n	800e2cc <UART_SetConfig+0x52c>
 800e27e:	a201      	add	r2, pc, #4	; (adr r2, 800e284 <UART_SetConfig+0x4e4>)
 800e280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e284:	0800e29d 	.word	0x0800e29d
 800e288:	0800e2a5 	.word	0x0800e2a5
 800e28c:	0800e2ad 	.word	0x0800e2ad
 800e290:	0800e2b5 	.word	0x0800e2b5
 800e294:	0800e2bd 	.word	0x0800e2bd
 800e298:	0800e2c5 	.word	0x0800e2c5
 800e29c:	2300      	movs	r3, #0
 800e29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2a2:	e154      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e2a4:	2304      	movs	r3, #4
 800e2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2aa:	e150      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e2ac:	2308      	movs	r3, #8
 800e2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2b2:	e14c      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e2b4:	2310      	movs	r3, #16
 800e2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ba:	e148      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e2bc:	2320      	movs	r3, #32
 800e2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2c2:	e144      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e2c4:	2340      	movs	r3, #64	; 0x40
 800e2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ca:	e140      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e2cc:	2380      	movs	r3, #128	; 0x80
 800e2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2d2:	e13c      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4a41      	ldr	r2, [pc, #260]	; (800e3e0 <UART_SetConfig+0x640>)
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	f040 8082 	bne.w	800e3e4 <UART_SetConfig+0x644>
 800e2e0:	4b3c      	ldr	r3, [pc, #240]	; (800e3d4 <UART_SetConfig+0x634>)
 800e2e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e2e8:	2b28      	cmp	r3, #40	; 0x28
 800e2ea:	d86d      	bhi.n	800e3c8 <UART_SetConfig+0x628>
 800e2ec:	a201      	add	r2, pc, #4	; (adr r2, 800e2f4 <UART_SetConfig+0x554>)
 800e2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2f2:	bf00      	nop
 800e2f4:	0800e399 	.word	0x0800e399
 800e2f8:	0800e3c9 	.word	0x0800e3c9
 800e2fc:	0800e3c9 	.word	0x0800e3c9
 800e300:	0800e3c9 	.word	0x0800e3c9
 800e304:	0800e3c9 	.word	0x0800e3c9
 800e308:	0800e3c9 	.word	0x0800e3c9
 800e30c:	0800e3c9 	.word	0x0800e3c9
 800e310:	0800e3c9 	.word	0x0800e3c9
 800e314:	0800e3a1 	.word	0x0800e3a1
 800e318:	0800e3c9 	.word	0x0800e3c9
 800e31c:	0800e3c9 	.word	0x0800e3c9
 800e320:	0800e3c9 	.word	0x0800e3c9
 800e324:	0800e3c9 	.word	0x0800e3c9
 800e328:	0800e3c9 	.word	0x0800e3c9
 800e32c:	0800e3c9 	.word	0x0800e3c9
 800e330:	0800e3c9 	.word	0x0800e3c9
 800e334:	0800e3a9 	.word	0x0800e3a9
 800e338:	0800e3c9 	.word	0x0800e3c9
 800e33c:	0800e3c9 	.word	0x0800e3c9
 800e340:	0800e3c9 	.word	0x0800e3c9
 800e344:	0800e3c9 	.word	0x0800e3c9
 800e348:	0800e3c9 	.word	0x0800e3c9
 800e34c:	0800e3c9 	.word	0x0800e3c9
 800e350:	0800e3c9 	.word	0x0800e3c9
 800e354:	0800e3b1 	.word	0x0800e3b1
 800e358:	0800e3c9 	.word	0x0800e3c9
 800e35c:	0800e3c9 	.word	0x0800e3c9
 800e360:	0800e3c9 	.word	0x0800e3c9
 800e364:	0800e3c9 	.word	0x0800e3c9
 800e368:	0800e3c9 	.word	0x0800e3c9
 800e36c:	0800e3c9 	.word	0x0800e3c9
 800e370:	0800e3c9 	.word	0x0800e3c9
 800e374:	0800e3b9 	.word	0x0800e3b9
 800e378:	0800e3c9 	.word	0x0800e3c9
 800e37c:	0800e3c9 	.word	0x0800e3c9
 800e380:	0800e3c9 	.word	0x0800e3c9
 800e384:	0800e3c9 	.word	0x0800e3c9
 800e388:	0800e3c9 	.word	0x0800e3c9
 800e38c:	0800e3c9 	.word	0x0800e3c9
 800e390:	0800e3c9 	.word	0x0800e3c9
 800e394:	0800e3c1 	.word	0x0800e3c1
 800e398:	2301      	movs	r3, #1
 800e39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e39e:	e0d6      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e3a0:	2304      	movs	r3, #4
 800e3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3a6:	e0d2      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e3a8:	2308      	movs	r3, #8
 800e3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ae:	e0ce      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e3b0:	2310      	movs	r3, #16
 800e3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3b6:	e0ca      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e3b8:	2320      	movs	r3, #32
 800e3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3be:	e0c6      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e3c0:	2340      	movs	r3, #64	; 0x40
 800e3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3c6:	e0c2      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e3c8:	2380      	movs	r3, #128	; 0x80
 800e3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ce:	e0be      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e3d0:	40011400 	.word	0x40011400
 800e3d4:	58024400 	.word	0x58024400
 800e3d8:	40007800 	.word	0x40007800
 800e3dc:	40007c00 	.word	0x40007c00
 800e3e0:	40011800 	.word	0x40011800
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	4aad      	ldr	r2, [pc, #692]	; (800e6a0 <UART_SetConfig+0x900>)
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d176      	bne.n	800e4dc <UART_SetConfig+0x73c>
 800e3ee:	4bad      	ldr	r3, [pc, #692]	; (800e6a4 <UART_SetConfig+0x904>)
 800e3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e3f6:	2b28      	cmp	r3, #40	; 0x28
 800e3f8:	d86c      	bhi.n	800e4d4 <UART_SetConfig+0x734>
 800e3fa:	a201      	add	r2, pc, #4	; (adr r2, 800e400 <UART_SetConfig+0x660>)
 800e3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e400:	0800e4a5 	.word	0x0800e4a5
 800e404:	0800e4d5 	.word	0x0800e4d5
 800e408:	0800e4d5 	.word	0x0800e4d5
 800e40c:	0800e4d5 	.word	0x0800e4d5
 800e410:	0800e4d5 	.word	0x0800e4d5
 800e414:	0800e4d5 	.word	0x0800e4d5
 800e418:	0800e4d5 	.word	0x0800e4d5
 800e41c:	0800e4d5 	.word	0x0800e4d5
 800e420:	0800e4ad 	.word	0x0800e4ad
 800e424:	0800e4d5 	.word	0x0800e4d5
 800e428:	0800e4d5 	.word	0x0800e4d5
 800e42c:	0800e4d5 	.word	0x0800e4d5
 800e430:	0800e4d5 	.word	0x0800e4d5
 800e434:	0800e4d5 	.word	0x0800e4d5
 800e438:	0800e4d5 	.word	0x0800e4d5
 800e43c:	0800e4d5 	.word	0x0800e4d5
 800e440:	0800e4b5 	.word	0x0800e4b5
 800e444:	0800e4d5 	.word	0x0800e4d5
 800e448:	0800e4d5 	.word	0x0800e4d5
 800e44c:	0800e4d5 	.word	0x0800e4d5
 800e450:	0800e4d5 	.word	0x0800e4d5
 800e454:	0800e4d5 	.word	0x0800e4d5
 800e458:	0800e4d5 	.word	0x0800e4d5
 800e45c:	0800e4d5 	.word	0x0800e4d5
 800e460:	0800e4bd 	.word	0x0800e4bd
 800e464:	0800e4d5 	.word	0x0800e4d5
 800e468:	0800e4d5 	.word	0x0800e4d5
 800e46c:	0800e4d5 	.word	0x0800e4d5
 800e470:	0800e4d5 	.word	0x0800e4d5
 800e474:	0800e4d5 	.word	0x0800e4d5
 800e478:	0800e4d5 	.word	0x0800e4d5
 800e47c:	0800e4d5 	.word	0x0800e4d5
 800e480:	0800e4c5 	.word	0x0800e4c5
 800e484:	0800e4d5 	.word	0x0800e4d5
 800e488:	0800e4d5 	.word	0x0800e4d5
 800e48c:	0800e4d5 	.word	0x0800e4d5
 800e490:	0800e4d5 	.word	0x0800e4d5
 800e494:	0800e4d5 	.word	0x0800e4d5
 800e498:	0800e4d5 	.word	0x0800e4d5
 800e49c:	0800e4d5 	.word	0x0800e4d5
 800e4a0:	0800e4cd 	.word	0x0800e4cd
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4aa:	e050      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e4ac:	2304      	movs	r3, #4
 800e4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4b2:	e04c      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e4b4:	2308      	movs	r3, #8
 800e4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ba:	e048      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e4bc:	2310      	movs	r3, #16
 800e4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4c2:	e044      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e4c4:	2320      	movs	r3, #32
 800e4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ca:	e040      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e4cc:	2340      	movs	r3, #64	; 0x40
 800e4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4d2:	e03c      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e4d4:	2380      	movs	r3, #128	; 0x80
 800e4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4da:	e038      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4a71      	ldr	r2, [pc, #452]	; (800e6a8 <UART_SetConfig+0x908>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d130      	bne.n	800e548 <UART_SetConfig+0x7a8>
 800e4e6:	4b6f      	ldr	r3, [pc, #444]	; (800e6a4 <UART_SetConfig+0x904>)
 800e4e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4ea:	f003 0307 	and.w	r3, r3, #7
 800e4ee:	2b05      	cmp	r3, #5
 800e4f0:	d826      	bhi.n	800e540 <UART_SetConfig+0x7a0>
 800e4f2:	a201      	add	r2, pc, #4	; (adr r2, 800e4f8 <UART_SetConfig+0x758>)
 800e4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4f8:	0800e511 	.word	0x0800e511
 800e4fc:	0800e519 	.word	0x0800e519
 800e500:	0800e521 	.word	0x0800e521
 800e504:	0800e529 	.word	0x0800e529
 800e508:	0800e531 	.word	0x0800e531
 800e50c:	0800e539 	.word	0x0800e539
 800e510:	2302      	movs	r3, #2
 800e512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e516:	e01a      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e518:	2304      	movs	r3, #4
 800e51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e51e:	e016      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e520:	2308      	movs	r3, #8
 800e522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e526:	e012      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e528:	2310      	movs	r3, #16
 800e52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e52e:	e00e      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e530:	2320      	movs	r3, #32
 800e532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e536:	e00a      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e538:	2340      	movs	r3, #64	; 0x40
 800e53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e53e:	e006      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e540:	2380      	movs	r3, #128	; 0x80
 800e542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e546:	e002      	b.n	800e54e <UART_SetConfig+0x7ae>
 800e548:	2380      	movs	r3, #128	; 0x80
 800e54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	4a55      	ldr	r2, [pc, #340]	; (800e6a8 <UART_SetConfig+0x908>)
 800e554:	4293      	cmp	r3, r2
 800e556:	f040 80f8 	bne.w	800e74a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e55a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e55e:	2b20      	cmp	r3, #32
 800e560:	dc46      	bgt.n	800e5f0 <UART_SetConfig+0x850>
 800e562:	2b02      	cmp	r3, #2
 800e564:	db75      	blt.n	800e652 <UART_SetConfig+0x8b2>
 800e566:	3b02      	subs	r3, #2
 800e568:	2b1e      	cmp	r3, #30
 800e56a:	d872      	bhi.n	800e652 <UART_SetConfig+0x8b2>
 800e56c:	a201      	add	r2, pc, #4	; (adr r2, 800e574 <UART_SetConfig+0x7d4>)
 800e56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e572:	bf00      	nop
 800e574:	0800e5f7 	.word	0x0800e5f7
 800e578:	0800e653 	.word	0x0800e653
 800e57c:	0800e5ff 	.word	0x0800e5ff
 800e580:	0800e653 	.word	0x0800e653
 800e584:	0800e653 	.word	0x0800e653
 800e588:	0800e653 	.word	0x0800e653
 800e58c:	0800e60f 	.word	0x0800e60f
 800e590:	0800e653 	.word	0x0800e653
 800e594:	0800e653 	.word	0x0800e653
 800e598:	0800e653 	.word	0x0800e653
 800e59c:	0800e653 	.word	0x0800e653
 800e5a0:	0800e653 	.word	0x0800e653
 800e5a4:	0800e653 	.word	0x0800e653
 800e5a8:	0800e653 	.word	0x0800e653
 800e5ac:	0800e61f 	.word	0x0800e61f
 800e5b0:	0800e653 	.word	0x0800e653
 800e5b4:	0800e653 	.word	0x0800e653
 800e5b8:	0800e653 	.word	0x0800e653
 800e5bc:	0800e653 	.word	0x0800e653
 800e5c0:	0800e653 	.word	0x0800e653
 800e5c4:	0800e653 	.word	0x0800e653
 800e5c8:	0800e653 	.word	0x0800e653
 800e5cc:	0800e653 	.word	0x0800e653
 800e5d0:	0800e653 	.word	0x0800e653
 800e5d4:	0800e653 	.word	0x0800e653
 800e5d8:	0800e653 	.word	0x0800e653
 800e5dc:	0800e653 	.word	0x0800e653
 800e5e0:	0800e653 	.word	0x0800e653
 800e5e4:	0800e653 	.word	0x0800e653
 800e5e8:	0800e653 	.word	0x0800e653
 800e5ec:	0800e645 	.word	0x0800e645
 800e5f0:	2b40      	cmp	r3, #64	; 0x40
 800e5f2:	d02a      	beq.n	800e64a <UART_SetConfig+0x8aa>
 800e5f4:	e02d      	b.n	800e652 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e5f6:	f7fe f913 	bl	800c820 <HAL_RCCEx_GetD3PCLK1Freq>
 800e5fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e5fc:	e02f      	b.n	800e65e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e602:	4618      	mov	r0, r3
 800e604:	f7fe f922 	bl	800c84c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e60c:	e027      	b.n	800e65e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e60e:	f107 0318 	add.w	r3, r7, #24
 800e612:	4618      	mov	r0, r3
 800e614:	f7fe fa6e 	bl	800caf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e61c:	e01f      	b.n	800e65e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e61e:	4b21      	ldr	r3, [pc, #132]	; (800e6a4 <UART_SetConfig+0x904>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f003 0320 	and.w	r3, r3, #32
 800e626:	2b00      	cmp	r3, #0
 800e628:	d009      	beq.n	800e63e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e62a:	4b1e      	ldr	r3, [pc, #120]	; (800e6a4 <UART_SetConfig+0x904>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	08db      	lsrs	r3, r3, #3
 800e630:	f003 0303 	and.w	r3, r3, #3
 800e634:	4a1d      	ldr	r2, [pc, #116]	; (800e6ac <UART_SetConfig+0x90c>)
 800e636:	fa22 f303 	lsr.w	r3, r2, r3
 800e63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e63c:	e00f      	b.n	800e65e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e63e:	4b1b      	ldr	r3, [pc, #108]	; (800e6ac <UART_SetConfig+0x90c>)
 800e640:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e642:	e00c      	b.n	800e65e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e644:	4b1a      	ldr	r3, [pc, #104]	; (800e6b0 <UART_SetConfig+0x910>)
 800e646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e648:	e009      	b.n	800e65e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e64a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e64e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e650:	e005      	b.n	800e65e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e652:	2300      	movs	r3, #0
 800e654:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e656:	2301      	movs	r3, #1
 800e658:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e65c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e65e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e660:	2b00      	cmp	r3, #0
 800e662:	f000 81ee 	beq.w	800ea42 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e66a:	4a12      	ldr	r2, [pc, #72]	; (800e6b4 <UART_SetConfig+0x914>)
 800e66c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e670:	461a      	mov	r2, r3
 800e672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e674:	fbb3 f3f2 	udiv	r3, r3, r2
 800e678:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	685a      	ldr	r2, [r3, #4]
 800e67e:	4613      	mov	r3, r2
 800e680:	005b      	lsls	r3, r3, #1
 800e682:	4413      	add	r3, r2
 800e684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e686:	429a      	cmp	r2, r3
 800e688:	d305      	bcc.n	800e696 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e692:	429a      	cmp	r2, r3
 800e694:	d910      	bls.n	800e6b8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e696:	2301      	movs	r3, #1
 800e698:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e69c:	e1d1      	b.n	800ea42 <UART_SetConfig+0xca2>
 800e69e:	bf00      	nop
 800e6a0:	40011c00 	.word	0x40011c00
 800e6a4:	58024400 	.word	0x58024400
 800e6a8:	58000c00 	.word	0x58000c00
 800e6ac:	03d09000 	.word	0x03d09000
 800e6b0:	003d0900 	.word	0x003d0900
 800e6b4:	080108c8 	.word	0x080108c8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	60bb      	str	r3, [r7, #8]
 800e6be:	60fa      	str	r2, [r7, #12]
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c4:	4ac0      	ldr	r2, [pc, #768]	; (800e9c8 <UART_SetConfig+0xc28>)
 800e6c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	603b      	str	r3, [r7, #0]
 800e6d0:	607a      	str	r2, [r7, #4]
 800e6d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e6da:	f7f1 fe59 	bl	8000390 <__aeabi_uldivmod>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	460b      	mov	r3, r1
 800e6e2:	4610      	mov	r0, r2
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	f04f 0200 	mov.w	r2, #0
 800e6ea:	f04f 0300 	mov.w	r3, #0
 800e6ee:	020b      	lsls	r3, r1, #8
 800e6f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e6f4:	0202      	lsls	r2, r0, #8
 800e6f6:	6979      	ldr	r1, [r7, #20]
 800e6f8:	6849      	ldr	r1, [r1, #4]
 800e6fa:	0849      	lsrs	r1, r1, #1
 800e6fc:	2000      	movs	r0, #0
 800e6fe:	460c      	mov	r4, r1
 800e700:	4605      	mov	r5, r0
 800e702:	eb12 0804 	adds.w	r8, r2, r4
 800e706:	eb43 0905 	adc.w	r9, r3, r5
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	2200      	movs	r2, #0
 800e710:	469a      	mov	sl, r3
 800e712:	4693      	mov	fp, r2
 800e714:	4652      	mov	r2, sl
 800e716:	465b      	mov	r3, fp
 800e718:	4640      	mov	r0, r8
 800e71a:	4649      	mov	r1, r9
 800e71c:	f7f1 fe38 	bl	8000390 <__aeabi_uldivmod>
 800e720:	4602      	mov	r2, r0
 800e722:	460b      	mov	r3, r1
 800e724:	4613      	mov	r3, r2
 800e726:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e72e:	d308      	bcc.n	800e742 <UART_SetConfig+0x9a2>
 800e730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e736:	d204      	bcs.n	800e742 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e73e:	60da      	str	r2, [r3, #12]
 800e740:	e17f      	b.n	800ea42 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e742:	2301      	movs	r3, #1
 800e744:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e748:	e17b      	b.n	800ea42 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	69db      	ldr	r3, [r3, #28]
 800e74e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e752:	f040 80bd 	bne.w	800e8d0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e756:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e75a:	2b20      	cmp	r3, #32
 800e75c:	dc48      	bgt.n	800e7f0 <UART_SetConfig+0xa50>
 800e75e:	2b00      	cmp	r3, #0
 800e760:	db7b      	blt.n	800e85a <UART_SetConfig+0xaba>
 800e762:	2b20      	cmp	r3, #32
 800e764:	d879      	bhi.n	800e85a <UART_SetConfig+0xaba>
 800e766:	a201      	add	r2, pc, #4	; (adr r2, 800e76c <UART_SetConfig+0x9cc>)
 800e768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e76c:	0800e7f7 	.word	0x0800e7f7
 800e770:	0800e7ff 	.word	0x0800e7ff
 800e774:	0800e85b 	.word	0x0800e85b
 800e778:	0800e85b 	.word	0x0800e85b
 800e77c:	0800e807 	.word	0x0800e807
 800e780:	0800e85b 	.word	0x0800e85b
 800e784:	0800e85b 	.word	0x0800e85b
 800e788:	0800e85b 	.word	0x0800e85b
 800e78c:	0800e817 	.word	0x0800e817
 800e790:	0800e85b 	.word	0x0800e85b
 800e794:	0800e85b 	.word	0x0800e85b
 800e798:	0800e85b 	.word	0x0800e85b
 800e79c:	0800e85b 	.word	0x0800e85b
 800e7a0:	0800e85b 	.word	0x0800e85b
 800e7a4:	0800e85b 	.word	0x0800e85b
 800e7a8:	0800e85b 	.word	0x0800e85b
 800e7ac:	0800e827 	.word	0x0800e827
 800e7b0:	0800e85b 	.word	0x0800e85b
 800e7b4:	0800e85b 	.word	0x0800e85b
 800e7b8:	0800e85b 	.word	0x0800e85b
 800e7bc:	0800e85b 	.word	0x0800e85b
 800e7c0:	0800e85b 	.word	0x0800e85b
 800e7c4:	0800e85b 	.word	0x0800e85b
 800e7c8:	0800e85b 	.word	0x0800e85b
 800e7cc:	0800e85b 	.word	0x0800e85b
 800e7d0:	0800e85b 	.word	0x0800e85b
 800e7d4:	0800e85b 	.word	0x0800e85b
 800e7d8:	0800e85b 	.word	0x0800e85b
 800e7dc:	0800e85b 	.word	0x0800e85b
 800e7e0:	0800e85b 	.word	0x0800e85b
 800e7e4:	0800e85b 	.word	0x0800e85b
 800e7e8:	0800e85b 	.word	0x0800e85b
 800e7ec:	0800e84d 	.word	0x0800e84d
 800e7f0:	2b40      	cmp	r3, #64	; 0x40
 800e7f2:	d02e      	beq.n	800e852 <UART_SetConfig+0xab2>
 800e7f4:	e031      	b.n	800e85a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7f6:	f7fc fe29 	bl	800b44c <HAL_RCC_GetPCLK1Freq>
 800e7fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e7fc:	e033      	b.n	800e866 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e7fe:	f7fc fe3b 	bl	800b478 <HAL_RCC_GetPCLK2Freq>
 800e802:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e804:	e02f      	b.n	800e866 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7fe f81e 	bl	800c84c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e814:	e027      	b.n	800e866 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e816:	f107 0318 	add.w	r3, r7, #24
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7fe f96a 	bl	800caf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e824:	e01f      	b.n	800e866 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e826:	4b69      	ldr	r3, [pc, #420]	; (800e9cc <UART_SetConfig+0xc2c>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f003 0320 	and.w	r3, r3, #32
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d009      	beq.n	800e846 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e832:	4b66      	ldr	r3, [pc, #408]	; (800e9cc <UART_SetConfig+0xc2c>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	08db      	lsrs	r3, r3, #3
 800e838:	f003 0303 	and.w	r3, r3, #3
 800e83c:	4a64      	ldr	r2, [pc, #400]	; (800e9d0 <UART_SetConfig+0xc30>)
 800e83e:	fa22 f303 	lsr.w	r3, r2, r3
 800e842:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e844:	e00f      	b.n	800e866 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e846:	4b62      	ldr	r3, [pc, #392]	; (800e9d0 <UART_SetConfig+0xc30>)
 800e848:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e84a:	e00c      	b.n	800e866 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e84c:	4b61      	ldr	r3, [pc, #388]	; (800e9d4 <UART_SetConfig+0xc34>)
 800e84e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e850:	e009      	b.n	800e866 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e858:	e005      	b.n	800e866 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e85a:	2300      	movs	r3, #0
 800e85c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e85e:	2301      	movs	r3, #1
 800e860:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e864:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e868:	2b00      	cmp	r3, #0
 800e86a:	f000 80ea 	beq.w	800ea42 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e872:	4a55      	ldr	r2, [pc, #340]	; (800e9c8 <UART_SetConfig+0xc28>)
 800e874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e878:	461a      	mov	r2, r3
 800e87a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e87c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e880:	005a      	lsls	r2, r3, #1
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	685b      	ldr	r3, [r3, #4]
 800e886:	085b      	lsrs	r3, r3, #1
 800e888:	441a      	add	r2, r3
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e892:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e896:	2b0f      	cmp	r3, #15
 800e898:	d916      	bls.n	800e8c8 <UART_SetConfig+0xb28>
 800e89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e89c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8a0:	d212      	bcs.n	800e8c8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	f023 030f 	bic.w	r3, r3, #15
 800e8aa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ae:	085b      	lsrs	r3, r3, #1
 800e8b0:	b29b      	uxth	r3, r3
 800e8b2:	f003 0307 	and.w	r3, r3, #7
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e8c4:	60da      	str	r2, [r3, #12]
 800e8c6:	e0bc      	b.n	800ea42 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e8ce:	e0b8      	b.n	800ea42 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e8d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e8d4:	2b20      	cmp	r3, #32
 800e8d6:	dc4b      	bgt.n	800e970 <UART_SetConfig+0xbd0>
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	f2c0 8087 	blt.w	800e9ec <UART_SetConfig+0xc4c>
 800e8de:	2b20      	cmp	r3, #32
 800e8e0:	f200 8084 	bhi.w	800e9ec <UART_SetConfig+0xc4c>
 800e8e4:	a201      	add	r2, pc, #4	; (adr r2, 800e8ec <UART_SetConfig+0xb4c>)
 800e8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ea:	bf00      	nop
 800e8ec:	0800e977 	.word	0x0800e977
 800e8f0:	0800e97f 	.word	0x0800e97f
 800e8f4:	0800e9ed 	.word	0x0800e9ed
 800e8f8:	0800e9ed 	.word	0x0800e9ed
 800e8fc:	0800e987 	.word	0x0800e987
 800e900:	0800e9ed 	.word	0x0800e9ed
 800e904:	0800e9ed 	.word	0x0800e9ed
 800e908:	0800e9ed 	.word	0x0800e9ed
 800e90c:	0800e997 	.word	0x0800e997
 800e910:	0800e9ed 	.word	0x0800e9ed
 800e914:	0800e9ed 	.word	0x0800e9ed
 800e918:	0800e9ed 	.word	0x0800e9ed
 800e91c:	0800e9ed 	.word	0x0800e9ed
 800e920:	0800e9ed 	.word	0x0800e9ed
 800e924:	0800e9ed 	.word	0x0800e9ed
 800e928:	0800e9ed 	.word	0x0800e9ed
 800e92c:	0800e9a7 	.word	0x0800e9a7
 800e930:	0800e9ed 	.word	0x0800e9ed
 800e934:	0800e9ed 	.word	0x0800e9ed
 800e938:	0800e9ed 	.word	0x0800e9ed
 800e93c:	0800e9ed 	.word	0x0800e9ed
 800e940:	0800e9ed 	.word	0x0800e9ed
 800e944:	0800e9ed 	.word	0x0800e9ed
 800e948:	0800e9ed 	.word	0x0800e9ed
 800e94c:	0800e9ed 	.word	0x0800e9ed
 800e950:	0800e9ed 	.word	0x0800e9ed
 800e954:	0800e9ed 	.word	0x0800e9ed
 800e958:	0800e9ed 	.word	0x0800e9ed
 800e95c:	0800e9ed 	.word	0x0800e9ed
 800e960:	0800e9ed 	.word	0x0800e9ed
 800e964:	0800e9ed 	.word	0x0800e9ed
 800e968:	0800e9ed 	.word	0x0800e9ed
 800e96c:	0800e9df 	.word	0x0800e9df
 800e970:	2b40      	cmp	r3, #64	; 0x40
 800e972:	d037      	beq.n	800e9e4 <UART_SetConfig+0xc44>
 800e974:	e03a      	b.n	800e9ec <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e976:	f7fc fd69 	bl	800b44c <HAL_RCC_GetPCLK1Freq>
 800e97a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e97c:	e03c      	b.n	800e9f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e97e:	f7fc fd7b 	bl	800b478 <HAL_RCC_GetPCLK2Freq>
 800e982:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e984:	e038      	b.n	800e9f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7fd ff5e 	bl	800c84c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e994:	e030      	b.n	800e9f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e996:	f107 0318 	add.w	r3, r7, #24
 800e99a:	4618      	mov	r0, r3
 800e99c:	f7fe f8aa 	bl	800caf4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e9a0:	69fb      	ldr	r3, [r7, #28]
 800e9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9a4:	e028      	b.n	800e9f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e9a6:	4b09      	ldr	r3, [pc, #36]	; (800e9cc <UART_SetConfig+0xc2c>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f003 0320 	and.w	r3, r3, #32
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d012      	beq.n	800e9d8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e9b2:	4b06      	ldr	r3, [pc, #24]	; (800e9cc <UART_SetConfig+0xc2c>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	08db      	lsrs	r3, r3, #3
 800e9b8:	f003 0303 	and.w	r3, r3, #3
 800e9bc:	4a04      	ldr	r2, [pc, #16]	; (800e9d0 <UART_SetConfig+0xc30>)
 800e9be:	fa22 f303 	lsr.w	r3, r2, r3
 800e9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e9c4:	e018      	b.n	800e9f8 <UART_SetConfig+0xc58>
 800e9c6:	bf00      	nop
 800e9c8:	080108c8 	.word	0x080108c8
 800e9cc:	58024400 	.word	0x58024400
 800e9d0:	03d09000 	.word	0x03d09000
 800e9d4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e9d8:	4b24      	ldr	r3, [pc, #144]	; (800ea6c <UART_SetConfig+0xccc>)
 800e9da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9dc:	e00c      	b.n	800e9f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e9de:	4b24      	ldr	r3, [pc, #144]	; (800ea70 <UART_SetConfig+0xcd0>)
 800e9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9e2:	e009      	b.n	800e9f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e9e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9ea:	e005      	b.n	800e9f8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e9f6:	bf00      	nop
    }

    if (pclk != 0U)
 800e9f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d021      	beq.n	800ea42 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea02:	4a1c      	ldr	r2, [pc, #112]	; (800ea74 <UART_SetConfig+0xcd4>)
 800ea04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea08:	461a      	mov	r2, r3
 800ea0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea0c:	fbb3 f2f2 	udiv	r2, r3, r2
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	085b      	lsrs	r3, r3, #1
 800ea16:	441a      	add	r2, r3
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	685b      	ldr	r3, [r3, #4]
 800ea1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea20:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea24:	2b0f      	cmp	r3, #15
 800ea26:	d909      	bls.n	800ea3c <UART_SetConfig+0xc9c>
 800ea28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea2e:	d205      	bcs.n	800ea3c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ea30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea32:	b29a      	uxth	r2, r3
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	60da      	str	r2, [r3, #12]
 800ea3a:	e002      	b.n	800ea42 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	2201      	movs	r2, #1
 800ea46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	2200      	movs	r2, #0
 800ea56:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ea5e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3748      	adds	r7, #72	; 0x48
 800ea66:	46bd      	mov	sp, r7
 800ea68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ea6c:	03d09000 	.word	0x03d09000
 800ea70:	003d0900 	.word	0x003d0900
 800ea74:	080108c8 	.word	0x080108c8

0800ea78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b083      	sub	sp, #12
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea84:	f003 0301 	and.w	r3, r3, #1
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d00a      	beq.n	800eaa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	430a      	orrs	r2, r1
 800eaa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaa6:	f003 0302 	and.w	r3, r3, #2
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d00a      	beq.n	800eac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	430a      	orrs	r2, r1
 800eac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eac8:	f003 0304 	and.w	r3, r3, #4
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00a      	beq.n	800eae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	430a      	orrs	r2, r1
 800eae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaea:	f003 0308 	and.w	r3, r3, #8
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d00a      	beq.n	800eb08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	430a      	orrs	r2, r1
 800eb06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb0c:	f003 0310 	and.w	r3, r3, #16
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d00a      	beq.n	800eb2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	689b      	ldr	r3, [r3, #8]
 800eb1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	430a      	orrs	r2, r1
 800eb28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb2e:	f003 0320 	and.w	r3, r3, #32
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d00a      	beq.n	800eb4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	689b      	ldr	r3, [r3, #8]
 800eb3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	430a      	orrs	r2, r1
 800eb4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d01a      	beq.n	800eb8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	430a      	orrs	r2, r1
 800eb6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb76:	d10a      	bne.n	800eb8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	685b      	ldr	r3, [r3, #4]
 800eb7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	430a      	orrs	r2, r1
 800eb8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d00a      	beq.n	800ebb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	430a      	orrs	r2, r1
 800ebae:	605a      	str	r2, [r3, #4]
  }
}
 800ebb0:	bf00      	nop
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b098      	sub	sp, #96	; 0x60
 800ebc0:	af02      	add	r7, sp, #8
 800ebc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ebcc:	f7f5 fb9a 	bl	8004304 <HAL_GetTick>
 800ebd0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f003 0308 	and.w	r3, r3, #8
 800ebdc:	2b08      	cmp	r3, #8
 800ebde:	d12f      	bne.n	800ec40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ebe0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ebe4:	9300      	str	r3, [sp, #0]
 800ebe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebe8:	2200      	movs	r2, #0
 800ebea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 f88e 	bl	800ed10 <UART_WaitOnFlagUntilTimeout>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d022      	beq.n	800ec40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec02:	e853 3f00 	ldrex	r3, [r3]
 800ec06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ec08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec0e:	653b      	str	r3, [r7, #80]	; 0x50
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	461a      	mov	r2, r3
 800ec16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec18:	647b      	str	r3, [r7, #68]	; 0x44
 800ec1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ec1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec20:	e841 2300 	strex	r3, r2, [r1]
 800ec24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ec26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d1e6      	bne.n	800ebfa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2220      	movs	r2, #32
 800ec30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2200      	movs	r2, #0
 800ec38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ec3c:	2303      	movs	r3, #3
 800ec3e:	e063      	b.n	800ed08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	f003 0304 	and.w	r3, r3, #4
 800ec4a:	2b04      	cmp	r3, #4
 800ec4c:	d149      	bne.n	800ece2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ec52:	9300      	str	r3, [sp, #0]
 800ec54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec56:	2200      	movs	r2, #0
 800ec58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f000 f857 	bl	800ed10 <UART_WaitOnFlagUntilTimeout>
 800ec62:	4603      	mov	r3, r0
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d03c      	beq.n	800ece2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec70:	e853 3f00 	ldrex	r3, [r3]
 800ec74:	623b      	str	r3, [r7, #32]
   return(result);
 800ec76:	6a3b      	ldr	r3, [r7, #32]
 800ec78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ec7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	461a      	mov	r2, r3
 800ec84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec86:	633b      	str	r3, [r7, #48]	; 0x30
 800ec88:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec8e:	e841 2300 	strex	r3, r2, [r1]
 800ec92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d1e6      	bne.n	800ec68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	3308      	adds	r3, #8
 800eca0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	e853 3f00 	ldrex	r3, [r3]
 800eca8:	60fb      	str	r3, [r7, #12]
   return(result);
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	f023 0301 	bic.w	r3, r3, #1
 800ecb0:	64bb      	str	r3, [r7, #72]	; 0x48
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	3308      	adds	r3, #8
 800ecb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ecba:	61fa      	str	r2, [r7, #28]
 800ecbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecbe:	69b9      	ldr	r1, [r7, #24]
 800ecc0:	69fa      	ldr	r2, [r7, #28]
 800ecc2:	e841 2300 	strex	r3, r2, [r1]
 800ecc6:	617b      	str	r3, [r7, #20]
   return(result);
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d1e5      	bne.n	800ec9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2220      	movs	r2, #32
 800ecd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ecde:	2303      	movs	r3, #3
 800ece0:	e012      	b.n	800ed08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2220      	movs	r2, #32
 800ece6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2220      	movs	r2, #32
 800ecee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2200      	movs	r2, #0
 800ed02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ed06:	2300      	movs	r3, #0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3758      	adds	r7, #88	; 0x58
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b084      	sub	sp, #16
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	603b      	str	r3, [r7, #0]
 800ed1c:	4613      	mov	r3, r2
 800ed1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed20:	e049      	b.n	800edb6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed28:	d045      	beq.n	800edb6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed2a:	f7f5 faeb 	bl	8004304 <HAL_GetTick>
 800ed2e:	4602      	mov	r2, r0
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	69ba      	ldr	r2, [r7, #24]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d302      	bcc.n	800ed40 <UART_WaitOnFlagUntilTimeout+0x30>
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d101      	bne.n	800ed44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ed40:	2303      	movs	r3, #3
 800ed42:	e048      	b.n	800edd6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f003 0304 	and.w	r3, r3, #4
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d031      	beq.n	800edb6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	69db      	ldr	r3, [r3, #28]
 800ed58:	f003 0308 	and.w	r3, r3, #8
 800ed5c:	2b08      	cmp	r3, #8
 800ed5e:	d110      	bne.n	800ed82 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	2208      	movs	r2, #8
 800ed66:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ed68:	68f8      	ldr	r0, [r7, #12]
 800ed6a:	f000 f839 	bl	800ede0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	2208      	movs	r2, #8
 800ed72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	2200      	movs	r2, #0
 800ed7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ed7e:	2301      	movs	r3, #1
 800ed80:	e029      	b.n	800edd6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	69db      	ldr	r3, [r3, #28]
 800ed88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed90:	d111      	bne.n	800edb6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ed9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ed9c:	68f8      	ldr	r0, [r7, #12]
 800ed9e:	f000 f81f 	bl	800ede0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2220      	movs	r2, #32
 800eda6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2200      	movs	r2, #0
 800edae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800edb2:	2303      	movs	r3, #3
 800edb4:	e00f      	b.n	800edd6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	69da      	ldr	r2, [r3, #28]
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	4013      	ands	r3, r2
 800edc0:	68ba      	ldr	r2, [r7, #8]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	bf0c      	ite	eq
 800edc6:	2301      	moveq	r3, #1
 800edc8:	2300      	movne	r3, #0
 800edca:	b2db      	uxtb	r3, r3
 800edcc:	461a      	mov	r2, r3
 800edce:	79fb      	ldrb	r3, [r7, #7]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d0a6      	beq.n	800ed22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800edd4:	2300      	movs	r3, #0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3710      	adds	r7, #16
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
	...

0800ede0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b095      	sub	sp, #84	; 0x54
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edf0:	e853 3f00 	ldrex	r3, [r3]
 800edf4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800edf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800edfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	461a      	mov	r2, r3
 800ee04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee06:	643b      	str	r3, [r7, #64]	; 0x40
 800ee08:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee0e:	e841 2300 	strex	r3, r2, [r1]
 800ee12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d1e6      	bne.n	800ede8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	3308      	adds	r3, #8
 800ee20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee22:	6a3b      	ldr	r3, [r7, #32]
 800ee24:	e853 3f00 	ldrex	r3, [r3]
 800ee28:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee2a:	69fa      	ldr	r2, [r7, #28]
 800ee2c:	4b1e      	ldr	r3, [pc, #120]	; (800eea8 <UART_EndRxTransfer+0xc8>)
 800ee2e:	4013      	ands	r3, r2
 800ee30:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	3308      	adds	r3, #8
 800ee38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ee3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee42:	e841 2300 	strex	r3, r2, [r1]
 800ee46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d1e5      	bne.n	800ee1a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee52:	2b01      	cmp	r3, #1
 800ee54:	d118      	bne.n	800ee88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	e853 3f00 	ldrex	r3, [r3]
 800ee62:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	f023 0310 	bic.w	r3, r3, #16
 800ee6a:	647b      	str	r3, [r7, #68]	; 0x44
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	461a      	mov	r2, r3
 800ee72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee74:	61bb      	str	r3, [r7, #24]
 800ee76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee78:	6979      	ldr	r1, [r7, #20]
 800ee7a:	69ba      	ldr	r2, [r7, #24]
 800ee7c:	e841 2300 	strex	r3, r2, [r1]
 800ee80:	613b      	str	r3, [r7, #16]
   return(result);
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d1e6      	bne.n	800ee56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2220      	movs	r2, #32
 800ee8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2200      	movs	r2, #0
 800ee94:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2200      	movs	r2, #0
 800ee9a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ee9c:	bf00      	nop
 800ee9e:	3754      	adds	r7, #84	; 0x54
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr
 800eea8:	effffffe 	.word	0xeffffffe

0800eeac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b084      	sub	sp, #16
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	2200      	movs	r2, #0
 800eebe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	2200      	movs	r2, #0
 800eec6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eeca:	68f8      	ldr	r0, [r7, #12]
 800eecc:	f7fe ff52 	bl	800dd74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eed0:	bf00      	nop
 800eed2:	3710      	adds	r7, #16
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b088      	sub	sp, #32
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	e853 3f00 	ldrex	r3, [r3]
 800eeec:	60bb      	str	r3, [r7, #8]
   return(result);
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eef4:	61fb      	str	r3, [r7, #28]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	461a      	mov	r2, r3
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	61bb      	str	r3, [r7, #24]
 800ef00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef02:	6979      	ldr	r1, [r7, #20]
 800ef04:	69ba      	ldr	r2, [r7, #24]
 800ef06:	e841 2300 	strex	r3, r2, [r1]
 800ef0a:	613b      	str	r3, [r7, #16]
   return(result);
 800ef0c:	693b      	ldr	r3, [r7, #16]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d1e6      	bne.n	800eee0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2220      	movs	r2, #32
 800ef16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	f7fe ff1d 	bl	800dd60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef26:	bf00      	nop
 800ef28:	3720      	adds	r7, #32
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}

0800ef2e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ef2e:	b480      	push	{r7}
 800ef30:	b083      	sub	sp, #12
 800ef32:	af00      	add	r7, sp, #0
 800ef34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ef36:	bf00      	nop
 800ef38:	370c      	adds	r7, #12
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr

0800ef42 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ef42:	b480      	push	{r7}
 800ef44:	b083      	sub	sp, #12
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ef4a:	bf00      	nop
 800ef4c:	370c      	adds	r7, #12
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef54:	4770      	bx	lr

0800ef56 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ef56:	b480      	push	{r7}
 800ef58:	b083      	sub	sp, #12
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ef5e:	bf00      	nop
 800ef60:	370c      	adds	r7, #12
 800ef62:	46bd      	mov	sp, r7
 800ef64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef68:	4770      	bx	lr

0800ef6a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ef6a:	b480      	push	{r7}
 800ef6c:	b085      	sub	sp, #20
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d101      	bne.n	800ef80 <HAL_UARTEx_DisableFifoMode+0x16>
 800ef7c:	2302      	movs	r3, #2
 800ef7e:	e027      	b.n	800efd0 <HAL_UARTEx_DisableFifoMode+0x66>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2201      	movs	r2, #1
 800ef84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2224      	movs	r2, #36	; 0x24
 800ef8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f022 0201 	bic.w	r2, r2, #1
 800efa6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800efae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2200      	movs	r2, #0
 800efb4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	68fa      	ldr	r2, [r7, #12]
 800efbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2220      	movs	r2, #32
 800efc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2200      	movs	r2, #0
 800efca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800efce:	2300      	movs	r3, #0
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3714      	adds	r7, #20
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr

0800efdc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b084      	sub	sp, #16
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800efec:	2b01      	cmp	r3, #1
 800efee:	d101      	bne.n	800eff4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eff0:	2302      	movs	r3, #2
 800eff2:	e02d      	b.n	800f050 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2201      	movs	r2, #1
 800eff8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2224      	movs	r2, #36	; 0x24
 800f000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f022 0201 	bic.w	r2, r2, #1
 800f01a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	689b      	ldr	r3, [r3, #8]
 800f022:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	683a      	ldr	r2, [r7, #0]
 800f02c:	430a      	orrs	r2, r1
 800f02e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f000 f84f 	bl	800f0d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	68fa      	ldr	r2, [r7, #12]
 800f03c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2220      	movs	r2, #32
 800f042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2200      	movs	r2, #0
 800f04a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f04e:	2300      	movs	r3, #0
}
 800f050:	4618      	mov	r0, r3
 800f052:	3710      	adds	r7, #16
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}

0800f058 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d101      	bne.n	800f070 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f06c:	2302      	movs	r3, #2
 800f06e:	e02d      	b.n	800f0cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2201      	movs	r2, #1
 800f074:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2224      	movs	r2, #36	; 0x24
 800f07c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	681a      	ldr	r2, [r3, #0]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f022 0201 	bic.w	r2, r2, #1
 800f096:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	689b      	ldr	r3, [r3, #8]
 800f09e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	683a      	ldr	r2, [r7, #0]
 800f0a8:	430a      	orrs	r2, r1
 800f0aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f000 f811 	bl	800f0d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2220      	movs	r2, #32
 800f0be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f0ca:	2300      	movs	r3, #0
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3710      	adds	r7, #16
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b085      	sub	sp, #20
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d108      	bne.n	800f0f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2201      	movs	r2, #1
 800f0e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f0f4:	e031      	b.n	800f15a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f0f6:	2310      	movs	r3, #16
 800f0f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f0fa:	2310      	movs	r3, #16
 800f0fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	689b      	ldr	r3, [r3, #8]
 800f104:	0e5b      	lsrs	r3, r3, #25
 800f106:	b2db      	uxtb	r3, r3
 800f108:	f003 0307 	and.w	r3, r3, #7
 800f10c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	689b      	ldr	r3, [r3, #8]
 800f114:	0f5b      	lsrs	r3, r3, #29
 800f116:	b2db      	uxtb	r3, r3
 800f118:	f003 0307 	and.w	r3, r3, #7
 800f11c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f11e:	7bbb      	ldrb	r3, [r7, #14]
 800f120:	7b3a      	ldrb	r2, [r7, #12]
 800f122:	4911      	ldr	r1, [pc, #68]	; (800f168 <UARTEx_SetNbDataToProcess+0x94>)
 800f124:	5c8a      	ldrb	r2, [r1, r2]
 800f126:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f12a:	7b3a      	ldrb	r2, [r7, #12]
 800f12c:	490f      	ldr	r1, [pc, #60]	; (800f16c <UARTEx_SetNbDataToProcess+0x98>)
 800f12e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f130:	fb93 f3f2 	sdiv	r3, r3, r2
 800f134:	b29a      	uxth	r2, r3
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f13c:	7bfb      	ldrb	r3, [r7, #15]
 800f13e:	7b7a      	ldrb	r2, [r7, #13]
 800f140:	4909      	ldr	r1, [pc, #36]	; (800f168 <UARTEx_SetNbDataToProcess+0x94>)
 800f142:	5c8a      	ldrb	r2, [r1, r2]
 800f144:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f148:	7b7a      	ldrb	r2, [r7, #13]
 800f14a:	4908      	ldr	r1, [pc, #32]	; (800f16c <UARTEx_SetNbDataToProcess+0x98>)
 800f14c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f14e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f152:	b29a      	uxth	r2, r3
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f15a:	bf00      	nop
 800f15c:	3714      	adds	r7, #20
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr
 800f166:	bf00      	nop
 800f168:	080108e0 	.word	0x080108e0
 800f16c:	080108e8 	.word	0x080108e8

0800f170 <__errno>:
 800f170:	4b01      	ldr	r3, [pc, #4]	; (800f178 <__errno+0x8>)
 800f172:	6818      	ldr	r0, [r3, #0]
 800f174:	4770      	bx	lr
 800f176:	bf00      	nop
 800f178:	24000054 	.word	0x24000054

0800f17c <__libc_init_array>:
 800f17c:	b570      	push	{r4, r5, r6, lr}
 800f17e:	4d0d      	ldr	r5, [pc, #52]	; (800f1b4 <__libc_init_array+0x38>)
 800f180:	4c0d      	ldr	r4, [pc, #52]	; (800f1b8 <__libc_init_array+0x3c>)
 800f182:	1b64      	subs	r4, r4, r5
 800f184:	10a4      	asrs	r4, r4, #2
 800f186:	2600      	movs	r6, #0
 800f188:	42a6      	cmp	r6, r4
 800f18a:	d109      	bne.n	800f1a0 <__libc_init_array+0x24>
 800f18c:	4d0b      	ldr	r5, [pc, #44]	; (800f1bc <__libc_init_array+0x40>)
 800f18e:	4c0c      	ldr	r4, [pc, #48]	; (800f1c0 <__libc_init_array+0x44>)
 800f190:	f001 f87c 	bl	801028c <_init>
 800f194:	1b64      	subs	r4, r4, r5
 800f196:	10a4      	asrs	r4, r4, #2
 800f198:	2600      	movs	r6, #0
 800f19a:	42a6      	cmp	r6, r4
 800f19c:	d105      	bne.n	800f1aa <__libc_init_array+0x2e>
 800f19e:	bd70      	pop	{r4, r5, r6, pc}
 800f1a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1a4:	4798      	blx	r3
 800f1a6:	3601      	adds	r6, #1
 800f1a8:	e7ee      	b.n	800f188 <__libc_init_array+0xc>
 800f1aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1ae:	4798      	blx	r3
 800f1b0:	3601      	adds	r6, #1
 800f1b2:	e7f2      	b.n	800f19a <__libc_init_array+0x1e>
 800f1b4:	08010990 	.word	0x08010990
 800f1b8:	08010990 	.word	0x08010990
 800f1bc:	08010990 	.word	0x08010990
 800f1c0:	08010994 	.word	0x08010994

0800f1c4 <memset>:
 800f1c4:	4402      	add	r2, r0
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	4293      	cmp	r3, r2
 800f1ca:	d100      	bne.n	800f1ce <memset+0xa>
 800f1cc:	4770      	bx	lr
 800f1ce:	f803 1b01 	strb.w	r1, [r3], #1
 800f1d2:	e7f9      	b.n	800f1c8 <memset+0x4>

0800f1d4 <iprintf>:
 800f1d4:	b40f      	push	{r0, r1, r2, r3}
 800f1d6:	4b0a      	ldr	r3, [pc, #40]	; (800f200 <iprintf+0x2c>)
 800f1d8:	b513      	push	{r0, r1, r4, lr}
 800f1da:	681c      	ldr	r4, [r3, #0]
 800f1dc:	b124      	cbz	r4, 800f1e8 <iprintf+0x14>
 800f1de:	69a3      	ldr	r3, [r4, #24]
 800f1e0:	b913      	cbnz	r3, 800f1e8 <iprintf+0x14>
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	f000 f9ee 	bl	800f5c4 <__sinit>
 800f1e8:	ab05      	add	r3, sp, #20
 800f1ea:	9a04      	ldr	r2, [sp, #16]
 800f1ec:	68a1      	ldr	r1, [r4, #8]
 800f1ee:	9301      	str	r3, [sp, #4]
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	f000 fbff 	bl	800f9f4 <_vfiprintf_r>
 800f1f6:	b002      	add	sp, #8
 800f1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1fc:	b004      	add	sp, #16
 800f1fe:	4770      	bx	lr
 800f200:	24000054 	.word	0x24000054

0800f204 <setvbuf>:
 800f204:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f208:	461d      	mov	r5, r3
 800f20a:	4b5d      	ldr	r3, [pc, #372]	; (800f380 <setvbuf+0x17c>)
 800f20c:	681f      	ldr	r7, [r3, #0]
 800f20e:	4604      	mov	r4, r0
 800f210:	460e      	mov	r6, r1
 800f212:	4690      	mov	r8, r2
 800f214:	b127      	cbz	r7, 800f220 <setvbuf+0x1c>
 800f216:	69bb      	ldr	r3, [r7, #24]
 800f218:	b913      	cbnz	r3, 800f220 <setvbuf+0x1c>
 800f21a:	4638      	mov	r0, r7
 800f21c:	f000 f9d2 	bl	800f5c4 <__sinit>
 800f220:	4b58      	ldr	r3, [pc, #352]	; (800f384 <setvbuf+0x180>)
 800f222:	429c      	cmp	r4, r3
 800f224:	d167      	bne.n	800f2f6 <setvbuf+0xf2>
 800f226:	687c      	ldr	r4, [r7, #4]
 800f228:	f1b8 0f02 	cmp.w	r8, #2
 800f22c:	d006      	beq.n	800f23c <setvbuf+0x38>
 800f22e:	f1b8 0f01 	cmp.w	r8, #1
 800f232:	f200 809f 	bhi.w	800f374 <setvbuf+0x170>
 800f236:	2d00      	cmp	r5, #0
 800f238:	f2c0 809c 	blt.w	800f374 <setvbuf+0x170>
 800f23c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f23e:	07db      	lsls	r3, r3, #31
 800f240:	d405      	bmi.n	800f24e <setvbuf+0x4a>
 800f242:	89a3      	ldrh	r3, [r4, #12]
 800f244:	0598      	lsls	r0, r3, #22
 800f246:	d402      	bmi.n	800f24e <setvbuf+0x4a>
 800f248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f24a:	f000 fa59 	bl	800f700 <__retarget_lock_acquire_recursive>
 800f24e:	4621      	mov	r1, r4
 800f250:	4638      	mov	r0, r7
 800f252:	f000 f923 	bl	800f49c <_fflush_r>
 800f256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f258:	b141      	cbz	r1, 800f26c <setvbuf+0x68>
 800f25a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f25e:	4299      	cmp	r1, r3
 800f260:	d002      	beq.n	800f268 <setvbuf+0x64>
 800f262:	4638      	mov	r0, r7
 800f264:	f000 fabc 	bl	800f7e0 <_free_r>
 800f268:	2300      	movs	r3, #0
 800f26a:	6363      	str	r3, [r4, #52]	; 0x34
 800f26c:	2300      	movs	r3, #0
 800f26e:	61a3      	str	r3, [r4, #24]
 800f270:	6063      	str	r3, [r4, #4]
 800f272:	89a3      	ldrh	r3, [r4, #12]
 800f274:	0619      	lsls	r1, r3, #24
 800f276:	d503      	bpl.n	800f280 <setvbuf+0x7c>
 800f278:	6921      	ldr	r1, [r4, #16]
 800f27a:	4638      	mov	r0, r7
 800f27c:	f000 fab0 	bl	800f7e0 <_free_r>
 800f280:	89a3      	ldrh	r3, [r4, #12]
 800f282:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800f286:	f023 0303 	bic.w	r3, r3, #3
 800f28a:	f1b8 0f02 	cmp.w	r8, #2
 800f28e:	81a3      	strh	r3, [r4, #12]
 800f290:	d06c      	beq.n	800f36c <setvbuf+0x168>
 800f292:	ab01      	add	r3, sp, #4
 800f294:	466a      	mov	r2, sp
 800f296:	4621      	mov	r1, r4
 800f298:	4638      	mov	r0, r7
 800f29a:	f000 fa33 	bl	800f704 <__swhatbuf_r>
 800f29e:	89a3      	ldrh	r3, [r4, #12]
 800f2a0:	4318      	orrs	r0, r3
 800f2a2:	81a0      	strh	r0, [r4, #12]
 800f2a4:	2d00      	cmp	r5, #0
 800f2a6:	d130      	bne.n	800f30a <setvbuf+0x106>
 800f2a8:	9d00      	ldr	r5, [sp, #0]
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	f000 fa90 	bl	800f7d0 <malloc>
 800f2b0:	4606      	mov	r6, r0
 800f2b2:	2800      	cmp	r0, #0
 800f2b4:	d155      	bne.n	800f362 <setvbuf+0x15e>
 800f2b6:	f8dd 9000 	ldr.w	r9, [sp]
 800f2ba:	45a9      	cmp	r9, r5
 800f2bc:	d14a      	bne.n	800f354 <setvbuf+0x150>
 800f2be:	f04f 35ff 	mov.w	r5, #4294967295
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	60a2      	str	r2, [r4, #8]
 800f2c6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800f2ca:	6022      	str	r2, [r4, #0]
 800f2cc:	6122      	str	r2, [r4, #16]
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2d4:	6162      	str	r2, [r4, #20]
 800f2d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f2d8:	f043 0302 	orr.w	r3, r3, #2
 800f2dc:	07d2      	lsls	r2, r2, #31
 800f2de:	81a3      	strh	r3, [r4, #12]
 800f2e0:	d405      	bmi.n	800f2ee <setvbuf+0xea>
 800f2e2:	f413 7f00 	tst.w	r3, #512	; 0x200
 800f2e6:	d102      	bne.n	800f2ee <setvbuf+0xea>
 800f2e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2ea:	f000 fa0a 	bl	800f702 <__retarget_lock_release_recursive>
 800f2ee:	4628      	mov	r0, r5
 800f2f0:	b003      	add	sp, #12
 800f2f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2f6:	4b24      	ldr	r3, [pc, #144]	; (800f388 <setvbuf+0x184>)
 800f2f8:	429c      	cmp	r4, r3
 800f2fa:	d101      	bne.n	800f300 <setvbuf+0xfc>
 800f2fc:	68bc      	ldr	r4, [r7, #8]
 800f2fe:	e793      	b.n	800f228 <setvbuf+0x24>
 800f300:	4b22      	ldr	r3, [pc, #136]	; (800f38c <setvbuf+0x188>)
 800f302:	429c      	cmp	r4, r3
 800f304:	bf08      	it	eq
 800f306:	68fc      	ldreq	r4, [r7, #12]
 800f308:	e78e      	b.n	800f228 <setvbuf+0x24>
 800f30a:	2e00      	cmp	r6, #0
 800f30c:	d0cd      	beq.n	800f2aa <setvbuf+0xa6>
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	b913      	cbnz	r3, 800f318 <setvbuf+0x114>
 800f312:	4638      	mov	r0, r7
 800f314:	f000 f956 	bl	800f5c4 <__sinit>
 800f318:	f1b8 0f01 	cmp.w	r8, #1
 800f31c:	bf08      	it	eq
 800f31e:	89a3      	ldrheq	r3, [r4, #12]
 800f320:	6026      	str	r6, [r4, #0]
 800f322:	bf04      	itt	eq
 800f324:	f043 0301 	orreq.w	r3, r3, #1
 800f328:	81a3      	strheq	r3, [r4, #12]
 800f32a:	89a2      	ldrh	r2, [r4, #12]
 800f32c:	f012 0308 	ands.w	r3, r2, #8
 800f330:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f334:	d01c      	beq.n	800f370 <setvbuf+0x16c>
 800f336:	07d3      	lsls	r3, r2, #31
 800f338:	bf41      	itttt	mi
 800f33a:	2300      	movmi	r3, #0
 800f33c:	426d      	negmi	r5, r5
 800f33e:	60a3      	strmi	r3, [r4, #8]
 800f340:	61a5      	strmi	r5, [r4, #24]
 800f342:	bf58      	it	pl
 800f344:	60a5      	strpl	r5, [r4, #8]
 800f346:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800f348:	f015 0501 	ands.w	r5, r5, #1
 800f34c:	d115      	bne.n	800f37a <setvbuf+0x176>
 800f34e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800f352:	e7c8      	b.n	800f2e6 <setvbuf+0xe2>
 800f354:	4648      	mov	r0, r9
 800f356:	f000 fa3b 	bl	800f7d0 <malloc>
 800f35a:	4606      	mov	r6, r0
 800f35c:	2800      	cmp	r0, #0
 800f35e:	d0ae      	beq.n	800f2be <setvbuf+0xba>
 800f360:	464d      	mov	r5, r9
 800f362:	89a3      	ldrh	r3, [r4, #12]
 800f364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f368:	81a3      	strh	r3, [r4, #12]
 800f36a:	e7d0      	b.n	800f30e <setvbuf+0x10a>
 800f36c:	2500      	movs	r5, #0
 800f36e:	e7a8      	b.n	800f2c2 <setvbuf+0xbe>
 800f370:	60a3      	str	r3, [r4, #8]
 800f372:	e7e8      	b.n	800f346 <setvbuf+0x142>
 800f374:	f04f 35ff 	mov.w	r5, #4294967295
 800f378:	e7b9      	b.n	800f2ee <setvbuf+0xea>
 800f37a:	2500      	movs	r5, #0
 800f37c:	e7b7      	b.n	800f2ee <setvbuf+0xea>
 800f37e:	bf00      	nop
 800f380:	24000054 	.word	0x24000054
 800f384:	08010914 	.word	0x08010914
 800f388:	08010934 	.word	0x08010934
 800f38c:	080108f4 	.word	0x080108f4

0800f390 <__sflush_r>:
 800f390:	898a      	ldrh	r2, [r1, #12]
 800f392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f396:	4605      	mov	r5, r0
 800f398:	0710      	lsls	r0, r2, #28
 800f39a:	460c      	mov	r4, r1
 800f39c:	d458      	bmi.n	800f450 <__sflush_r+0xc0>
 800f39e:	684b      	ldr	r3, [r1, #4]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	dc05      	bgt.n	800f3b0 <__sflush_r+0x20>
 800f3a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	dc02      	bgt.n	800f3b0 <__sflush_r+0x20>
 800f3aa:	2000      	movs	r0, #0
 800f3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f3b2:	2e00      	cmp	r6, #0
 800f3b4:	d0f9      	beq.n	800f3aa <__sflush_r+0x1a>
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f3bc:	682f      	ldr	r7, [r5, #0]
 800f3be:	602b      	str	r3, [r5, #0]
 800f3c0:	d032      	beq.n	800f428 <__sflush_r+0x98>
 800f3c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f3c4:	89a3      	ldrh	r3, [r4, #12]
 800f3c6:	075a      	lsls	r2, r3, #29
 800f3c8:	d505      	bpl.n	800f3d6 <__sflush_r+0x46>
 800f3ca:	6863      	ldr	r3, [r4, #4]
 800f3cc:	1ac0      	subs	r0, r0, r3
 800f3ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f3d0:	b10b      	cbz	r3, 800f3d6 <__sflush_r+0x46>
 800f3d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f3d4:	1ac0      	subs	r0, r0, r3
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	4602      	mov	r2, r0
 800f3da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f3dc:	6a21      	ldr	r1, [r4, #32]
 800f3de:	4628      	mov	r0, r5
 800f3e0:	47b0      	blx	r6
 800f3e2:	1c43      	adds	r3, r0, #1
 800f3e4:	89a3      	ldrh	r3, [r4, #12]
 800f3e6:	d106      	bne.n	800f3f6 <__sflush_r+0x66>
 800f3e8:	6829      	ldr	r1, [r5, #0]
 800f3ea:	291d      	cmp	r1, #29
 800f3ec:	d82c      	bhi.n	800f448 <__sflush_r+0xb8>
 800f3ee:	4a2a      	ldr	r2, [pc, #168]	; (800f498 <__sflush_r+0x108>)
 800f3f0:	40ca      	lsrs	r2, r1
 800f3f2:	07d6      	lsls	r6, r2, #31
 800f3f4:	d528      	bpl.n	800f448 <__sflush_r+0xb8>
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	6062      	str	r2, [r4, #4]
 800f3fa:	04d9      	lsls	r1, r3, #19
 800f3fc:	6922      	ldr	r2, [r4, #16]
 800f3fe:	6022      	str	r2, [r4, #0]
 800f400:	d504      	bpl.n	800f40c <__sflush_r+0x7c>
 800f402:	1c42      	adds	r2, r0, #1
 800f404:	d101      	bne.n	800f40a <__sflush_r+0x7a>
 800f406:	682b      	ldr	r3, [r5, #0]
 800f408:	b903      	cbnz	r3, 800f40c <__sflush_r+0x7c>
 800f40a:	6560      	str	r0, [r4, #84]	; 0x54
 800f40c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f40e:	602f      	str	r7, [r5, #0]
 800f410:	2900      	cmp	r1, #0
 800f412:	d0ca      	beq.n	800f3aa <__sflush_r+0x1a>
 800f414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f418:	4299      	cmp	r1, r3
 800f41a:	d002      	beq.n	800f422 <__sflush_r+0x92>
 800f41c:	4628      	mov	r0, r5
 800f41e:	f000 f9df 	bl	800f7e0 <_free_r>
 800f422:	2000      	movs	r0, #0
 800f424:	6360      	str	r0, [r4, #52]	; 0x34
 800f426:	e7c1      	b.n	800f3ac <__sflush_r+0x1c>
 800f428:	6a21      	ldr	r1, [r4, #32]
 800f42a:	2301      	movs	r3, #1
 800f42c:	4628      	mov	r0, r5
 800f42e:	47b0      	blx	r6
 800f430:	1c41      	adds	r1, r0, #1
 800f432:	d1c7      	bne.n	800f3c4 <__sflush_r+0x34>
 800f434:	682b      	ldr	r3, [r5, #0]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d0c4      	beq.n	800f3c4 <__sflush_r+0x34>
 800f43a:	2b1d      	cmp	r3, #29
 800f43c:	d001      	beq.n	800f442 <__sflush_r+0xb2>
 800f43e:	2b16      	cmp	r3, #22
 800f440:	d101      	bne.n	800f446 <__sflush_r+0xb6>
 800f442:	602f      	str	r7, [r5, #0]
 800f444:	e7b1      	b.n	800f3aa <__sflush_r+0x1a>
 800f446:	89a3      	ldrh	r3, [r4, #12]
 800f448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f44c:	81a3      	strh	r3, [r4, #12]
 800f44e:	e7ad      	b.n	800f3ac <__sflush_r+0x1c>
 800f450:	690f      	ldr	r7, [r1, #16]
 800f452:	2f00      	cmp	r7, #0
 800f454:	d0a9      	beq.n	800f3aa <__sflush_r+0x1a>
 800f456:	0793      	lsls	r3, r2, #30
 800f458:	680e      	ldr	r6, [r1, #0]
 800f45a:	bf08      	it	eq
 800f45c:	694b      	ldreq	r3, [r1, #20]
 800f45e:	600f      	str	r7, [r1, #0]
 800f460:	bf18      	it	ne
 800f462:	2300      	movne	r3, #0
 800f464:	eba6 0807 	sub.w	r8, r6, r7
 800f468:	608b      	str	r3, [r1, #8]
 800f46a:	f1b8 0f00 	cmp.w	r8, #0
 800f46e:	dd9c      	ble.n	800f3aa <__sflush_r+0x1a>
 800f470:	6a21      	ldr	r1, [r4, #32]
 800f472:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f474:	4643      	mov	r3, r8
 800f476:	463a      	mov	r2, r7
 800f478:	4628      	mov	r0, r5
 800f47a:	47b0      	blx	r6
 800f47c:	2800      	cmp	r0, #0
 800f47e:	dc06      	bgt.n	800f48e <__sflush_r+0xfe>
 800f480:	89a3      	ldrh	r3, [r4, #12]
 800f482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f486:	81a3      	strh	r3, [r4, #12]
 800f488:	f04f 30ff 	mov.w	r0, #4294967295
 800f48c:	e78e      	b.n	800f3ac <__sflush_r+0x1c>
 800f48e:	4407      	add	r7, r0
 800f490:	eba8 0800 	sub.w	r8, r8, r0
 800f494:	e7e9      	b.n	800f46a <__sflush_r+0xda>
 800f496:	bf00      	nop
 800f498:	20400001 	.word	0x20400001

0800f49c <_fflush_r>:
 800f49c:	b538      	push	{r3, r4, r5, lr}
 800f49e:	690b      	ldr	r3, [r1, #16]
 800f4a0:	4605      	mov	r5, r0
 800f4a2:	460c      	mov	r4, r1
 800f4a4:	b913      	cbnz	r3, 800f4ac <_fflush_r+0x10>
 800f4a6:	2500      	movs	r5, #0
 800f4a8:	4628      	mov	r0, r5
 800f4aa:	bd38      	pop	{r3, r4, r5, pc}
 800f4ac:	b118      	cbz	r0, 800f4b6 <_fflush_r+0x1a>
 800f4ae:	6983      	ldr	r3, [r0, #24]
 800f4b0:	b90b      	cbnz	r3, 800f4b6 <_fflush_r+0x1a>
 800f4b2:	f000 f887 	bl	800f5c4 <__sinit>
 800f4b6:	4b14      	ldr	r3, [pc, #80]	; (800f508 <_fflush_r+0x6c>)
 800f4b8:	429c      	cmp	r4, r3
 800f4ba:	d11b      	bne.n	800f4f4 <_fflush_r+0x58>
 800f4bc:	686c      	ldr	r4, [r5, #4]
 800f4be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d0ef      	beq.n	800f4a6 <_fflush_r+0xa>
 800f4c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f4c8:	07d0      	lsls	r0, r2, #31
 800f4ca:	d404      	bmi.n	800f4d6 <_fflush_r+0x3a>
 800f4cc:	0599      	lsls	r1, r3, #22
 800f4ce:	d402      	bmi.n	800f4d6 <_fflush_r+0x3a>
 800f4d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4d2:	f000 f915 	bl	800f700 <__retarget_lock_acquire_recursive>
 800f4d6:	4628      	mov	r0, r5
 800f4d8:	4621      	mov	r1, r4
 800f4da:	f7ff ff59 	bl	800f390 <__sflush_r>
 800f4de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f4e0:	07da      	lsls	r2, r3, #31
 800f4e2:	4605      	mov	r5, r0
 800f4e4:	d4e0      	bmi.n	800f4a8 <_fflush_r+0xc>
 800f4e6:	89a3      	ldrh	r3, [r4, #12]
 800f4e8:	059b      	lsls	r3, r3, #22
 800f4ea:	d4dd      	bmi.n	800f4a8 <_fflush_r+0xc>
 800f4ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4ee:	f000 f908 	bl	800f702 <__retarget_lock_release_recursive>
 800f4f2:	e7d9      	b.n	800f4a8 <_fflush_r+0xc>
 800f4f4:	4b05      	ldr	r3, [pc, #20]	; (800f50c <_fflush_r+0x70>)
 800f4f6:	429c      	cmp	r4, r3
 800f4f8:	d101      	bne.n	800f4fe <_fflush_r+0x62>
 800f4fa:	68ac      	ldr	r4, [r5, #8]
 800f4fc:	e7df      	b.n	800f4be <_fflush_r+0x22>
 800f4fe:	4b04      	ldr	r3, [pc, #16]	; (800f510 <_fflush_r+0x74>)
 800f500:	429c      	cmp	r4, r3
 800f502:	bf08      	it	eq
 800f504:	68ec      	ldreq	r4, [r5, #12]
 800f506:	e7da      	b.n	800f4be <_fflush_r+0x22>
 800f508:	08010914 	.word	0x08010914
 800f50c:	08010934 	.word	0x08010934
 800f510:	080108f4 	.word	0x080108f4

0800f514 <std>:
 800f514:	2300      	movs	r3, #0
 800f516:	b510      	push	{r4, lr}
 800f518:	4604      	mov	r4, r0
 800f51a:	e9c0 3300 	strd	r3, r3, [r0]
 800f51e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f522:	6083      	str	r3, [r0, #8]
 800f524:	8181      	strh	r1, [r0, #12]
 800f526:	6643      	str	r3, [r0, #100]	; 0x64
 800f528:	81c2      	strh	r2, [r0, #14]
 800f52a:	6183      	str	r3, [r0, #24]
 800f52c:	4619      	mov	r1, r3
 800f52e:	2208      	movs	r2, #8
 800f530:	305c      	adds	r0, #92	; 0x5c
 800f532:	f7ff fe47 	bl	800f1c4 <memset>
 800f536:	4b05      	ldr	r3, [pc, #20]	; (800f54c <std+0x38>)
 800f538:	6263      	str	r3, [r4, #36]	; 0x24
 800f53a:	4b05      	ldr	r3, [pc, #20]	; (800f550 <std+0x3c>)
 800f53c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f53e:	4b05      	ldr	r3, [pc, #20]	; (800f554 <std+0x40>)
 800f540:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f542:	4b05      	ldr	r3, [pc, #20]	; (800f558 <std+0x44>)
 800f544:	6224      	str	r4, [r4, #32]
 800f546:	6323      	str	r3, [r4, #48]	; 0x30
 800f548:	bd10      	pop	{r4, pc}
 800f54a:	bf00      	nop
 800f54c:	0800ff9d 	.word	0x0800ff9d
 800f550:	0800ffbf 	.word	0x0800ffbf
 800f554:	0800fff7 	.word	0x0800fff7
 800f558:	0801001b 	.word	0x0801001b

0800f55c <_cleanup_r>:
 800f55c:	4901      	ldr	r1, [pc, #4]	; (800f564 <_cleanup_r+0x8>)
 800f55e:	f000 b8af 	b.w	800f6c0 <_fwalk_reent>
 800f562:	bf00      	nop
 800f564:	0800f49d 	.word	0x0800f49d

0800f568 <__sfmoreglue>:
 800f568:	b570      	push	{r4, r5, r6, lr}
 800f56a:	2268      	movs	r2, #104	; 0x68
 800f56c:	1e4d      	subs	r5, r1, #1
 800f56e:	4355      	muls	r5, r2
 800f570:	460e      	mov	r6, r1
 800f572:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f576:	f000 f99f 	bl	800f8b8 <_malloc_r>
 800f57a:	4604      	mov	r4, r0
 800f57c:	b140      	cbz	r0, 800f590 <__sfmoreglue+0x28>
 800f57e:	2100      	movs	r1, #0
 800f580:	e9c0 1600 	strd	r1, r6, [r0]
 800f584:	300c      	adds	r0, #12
 800f586:	60a0      	str	r0, [r4, #8]
 800f588:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f58c:	f7ff fe1a 	bl	800f1c4 <memset>
 800f590:	4620      	mov	r0, r4
 800f592:	bd70      	pop	{r4, r5, r6, pc}

0800f594 <__sfp_lock_acquire>:
 800f594:	4801      	ldr	r0, [pc, #4]	; (800f59c <__sfp_lock_acquire+0x8>)
 800f596:	f000 b8b3 	b.w	800f700 <__retarget_lock_acquire_recursive>
 800f59a:	bf00      	nop
 800f59c:	240e0039 	.word	0x240e0039

0800f5a0 <__sfp_lock_release>:
 800f5a0:	4801      	ldr	r0, [pc, #4]	; (800f5a8 <__sfp_lock_release+0x8>)
 800f5a2:	f000 b8ae 	b.w	800f702 <__retarget_lock_release_recursive>
 800f5a6:	bf00      	nop
 800f5a8:	240e0039 	.word	0x240e0039

0800f5ac <__sinit_lock_acquire>:
 800f5ac:	4801      	ldr	r0, [pc, #4]	; (800f5b4 <__sinit_lock_acquire+0x8>)
 800f5ae:	f000 b8a7 	b.w	800f700 <__retarget_lock_acquire_recursive>
 800f5b2:	bf00      	nop
 800f5b4:	240e003a 	.word	0x240e003a

0800f5b8 <__sinit_lock_release>:
 800f5b8:	4801      	ldr	r0, [pc, #4]	; (800f5c0 <__sinit_lock_release+0x8>)
 800f5ba:	f000 b8a2 	b.w	800f702 <__retarget_lock_release_recursive>
 800f5be:	bf00      	nop
 800f5c0:	240e003a 	.word	0x240e003a

0800f5c4 <__sinit>:
 800f5c4:	b510      	push	{r4, lr}
 800f5c6:	4604      	mov	r4, r0
 800f5c8:	f7ff fff0 	bl	800f5ac <__sinit_lock_acquire>
 800f5cc:	69a3      	ldr	r3, [r4, #24]
 800f5ce:	b11b      	cbz	r3, 800f5d8 <__sinit+0x14>
 800f5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5d4:	f7ff bff0 	b.w	800f5b8 <__sinit_lock_release>
 800f5d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f5dc:	6523      	str	r3, [r4, #80]	; 0x50
 800f5de:	4b13      	ldr	r3, [pc, #76]	; (800f62c <__sinit+0x68>)
 800f5e0:	4a13      	ldr	r2, [pc, #76]	; (800f630 <__sinit+0x6c>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800f5e6:	42a3      	cmp	r3, r4
 800f5e8:	bf04      	itt	eq
 800f5ea:	2301      	moveq	r3, #1
 800f5ec:	61a3      	streq	r3, [r4, #24]
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	f000 f820 	bl	800f634 <__sfp>
 800f5f4:	6060      	str	r0, [r4, #4]
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	f000 f81c 	bl	800f634 <__sfp>
 800f5fc:	60a0      	str	r0, [r4, #8]
 800f5fe:	4620      	mov	r0, r4
 800f600:	f000 f818 	bl	800f634 <__sfp>
 800f604:	2200      	movs	r2, #0
 800f606:	60e0      	str	r0, [r4, #12]
 800f608:	2104      	movs	r1, #4
 800f60a:	6860      	ldr	r0, [r4, #4]
 800f60c:	f7ff ff82 	bl	800f514 <std>
 800f610:	68a0      	ldr	r0, [r4, #8]
 800f612:	2201      	movs	r2, #1
 800f614:	2109      	movs	r1, #9
 800f616:	f7ff ff7d 	bl	800f514 <std>
 800f61a:	68e0      	ldr	r0, [r4, #12]
 800f61c:	2202      	movs	r2, #2
 800f61e:	2112      	movs	r1, #18
 800f620:	f7ff ff78 	bl	800f514 <std>
 800f624:	2301      	movs	r3, #1
 800f626:	61a3      	str	r3, [r4, #24]
 800f628:	e7d2      	b.n	800f5d0 <__sinit+0xc>
 800f62a:	bf00      	nop
 800f62c:	080108f0 	.word	0x080108f0
 800f630:	0800f55d 	.word	0x0800f55d

0800f634 <__sfp>:
 800f634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f636:	4607      	mov	r7, r0
 800f638:	f7ff ffac 	bl	800f594 <__sfp_lock_acquire>
 800f63c:	4b1e      	ldr	r3, [pc, #120]	; (800f6b8 <__sfp+0x84>)
 800f63e:	681e      	ldr	r6, [r3, #0]
 800f640:	69b3      	ldr	r3, [r6, #24]
 800f642:	b913      	cbnz	r3, 800f64a <__sfp+0x16>
 800f644:	4630      	mov	r0, r6
 800f646:	f7ff ffbd 	bl	800f5c4 <__sinit>
 800f64a:	3648      	adds	r6, #72	; 0x48
 800f64c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f650:	3b01      	subs	r3, #1
 800f652:	d503      	bpl.n	800f65c <__sfp+0x28>
 800f654:	6833      	ldr	r3, [r6, #0]
 800f656:	b30b      	cbz	r3, 800f69c <__sfp+0x68>
 800f658:	6836      	ldr	r6, [r6, #0]
 800f65a:	e7f7      	b.n	800f64c <__sfp+0x18>
 800f65c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f660:	b9d5      	cbnz	r5, 800f698 <__sfp+0x64>
 800f662:	4b16      	ldr	r3, [pc, #88]	; (800f6bc <__sfp+0x88>)
 800f664:	60e3      	str	r3, [r4, #12]
 800f666:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f66a:	6665      	str	r5, [r4, #100]	; 0x64
 800f66c:	f000 f847 	bl	800f6fe <__retarget_lock_init_recursive>
 800f670:	f7ff ff96 	bl	800f5a0 <__sfp_lock_release>
 800f674:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f678:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f67c:	6025      	str	r5, [r4, #0]
 800f67e:	61a5      	str	r5, [r4, #24]
 800f680:	2208      	movs	r2, #8
 800f682:	4629      	mov	r1, r5
 800f684:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f688:	f7ff fd9c 	bl	800f1c4 <memset>
 800f68c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f690:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f694:	4620      	mov	r0, r4
 800f696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f698:	3468      	adds	r4, #104	; 0x68
 800f69a:	e7d9      	b.n	800f650 <__sfp+0x1c>
 800f69c:	2104      	movs	r1, #4
 800f69e:	4638      	mov	r0, r7
 800f6a0:	f7ff ff62 	bl	800f568 <__sfmoreglue>
 800f6a4:	4604      	mov	r4, r0
 800f6a6:	6030      	str	r0, [r6, #0]
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	d1d5      	bne.n	800f658 <__sfp+0x24>
 800f6ac:	f7ff ff78 	bl	800f5a0 <__sfp_lock_release>
 800f6b0:	230c      	movs	r3, #12
 800f6b2:	603b      	str	r3, [r7, #0]
 800f6b4:	e7ee      	b.n	800f694 <__sfp+0x60>
 800f6b6:	bf00      	nop
 800f6b8:	080108f0 	.word	0x080108f0
 800f6bc:	ffff0001 	.word	0xffff0001

0800f6c0 <_fwalk_reent>:
 800f6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6c4:	4606      	mov	r6, r0
 800f6c6:	4688      	mov	r8, r1
 800f6c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f6cc:	2700      	movs	r7, #0
 800f6ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f6d2:	f1b9 0901 	subs.w	r9, r9, #1
 800f6d6:	d505      	bpl.n	800f6e4 <_fwalk_reent+0x24>
 800f6d8:	6824      	ldr	r4, [r4, #0]
 800f6da:	2c00      	cmp	r4, #0
 800f6dc:	d1f7      	bne.n	800f6ce <_fwalk_reent+0xe>
 800f6de:	4638      	mov	r0, r7
 800f6e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6e4:	89ab      	ldrh	r3, [r5, #12]
 800f6e6:	2b01      	cmp	r3, #1
 800f6e8:	d907      	bls.n	800f6fa <_fwalk_reent+0x3a>
 800f6ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	d003      	beq.n	800f6fa <_fwalk_reent+0x3a>
 800f6f2:	4629      	mov	r1, r5
 800f6f4:	4630      	mov	r0, r6
 800f6f6:	47c0      	blx	r8
 800f6f8:	4307      	orrs	r7, r0
 800f6fa:	3568      	adds	r5, #104	; 0x68
 800f6fc:	e7e9      	b.n	800f6d2 <_fwalk_reent+0x12>

0800f6fe <__retarget_lock_init_recursive>:
 800f6fe:	4770      	bx	lr

0800f700 <__retarget_lock_acquire_recursive>:
 800f700:	4770      	bx	lr

0800f702 <__retarget_lock_release_recursive>:
 800f702:	4770      	bx	lr

0800f704 <__swhatbuf_r>:
 800f704:	b570      	push	{r4, r5, r6, lr}
 800f706:	460e      	mov	r6, r1
 800f708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f70c:	2900      	cmp	r1, #0
 800f70e:	b096      	sub	sp, #88	; 0x58
 800f710:	4614      	mov	r4, r2
 800f712:	461d      	mov	r5, r3
 800f714:	da08      	bge.n	800f728 <__swhatbuf_r+0x24>
 800f716:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f71a:	2200      	movs	r2, #0
 800f71c:	602a      	str	r2, [r5, #0]
 800f71e:	061a      	lsls	r2, r3, #24
 800f720:	d410      	bmi.n	800f744 <__swhatbuf_r+0x40>
 800f722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f726:	e00e      	b.n	800f746 <__swhatbuf_r+0x42>
 800f728:	466a      	mov	r2, sp
 800f72a:	f000 fd5d 	bl	80101e8 <_fstat_r>
 800f72e:	2800      	cmp	r0, #0
 800f730:	dbf1      	blt.n	800f716 <__swhatbuf_r+0x12>
 800f732:	9a01      	ldr	r2, [sp, #4]
 800f734:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f738:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f73c:	425a      	negs	r2, r3
 800f73e:	415a      	adcs	r2, r3
 800f740:	602a      	str	r2, [r5, #0]
 800f742:	e7ee      	b.n	800f722 <__swhatbuf_r+0x1e>
 800f744:	2340      	movs	r3, #64	; 0x40
 800f746:	2000      	movs	r0, #0
 800f748:	6023      	str	r3, [r4, #0]
 800f74a:	b016      	add	sp, #88	; 0x58
 800f74c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f750 <__smakebuf_r>:
 800f750:	898b      	ldrh	r3, [r1, #12]
 800f752:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f754:	079d      	lsls	r5, r3, #30
 800f756:	4606      	mov	r6, r0
 800f758:	460c      	mov	r4, r1
 800f75a:	d507      	bpl.n	800f76c <__smakebuf_r+0x1c>
 800f75c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f760:	6023      	str	r3, [r4, #0]
 800f762:	6123      	str	r3, [r4, #16]
 800f764:	2301      	movs	r3, #1
 800f766:	6163      	str	r3, [r4, #20]
 800f768:	b002      	add	sp, #8
 800f76a:	bd70      	pop	{r4, r5, r6, pc}
 800f76c:	ab01      	add	r3, sp, #4
 800f76e:	466a      	mov	r2, sp
 800f770:	f7ff ffc8 	bl	800f704 <__swhatbuf_r>
 800f774:	9900      	ldr	r1, [sp, #0]
 800f776:	4605      	mov	r5, r0
 800f778:	4630      	mov	r0, r6
 800f77a:	f000 f89d 	bl	800f8b8 <_malloc_r>
 800f77e:	b948      	cbnz	r0, 800f794 <__smakebuf_r+0x44>
 800f780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f784:	059a      	lsls	r2, r3, #22
 800f786:	d4ef      	bmi.n	800f768 <__smakebuf_r+0x18>
 800f788:	f023 0303 	bic.w	r3, r3, #3
 800f78c:	f043 0302 	orr.w	r3, r3, #2
 800f790:	81a3      	strh	r3, [r4, #12]
 800f792:	e7e3      	b.n	800f75c <__smakebuf_r+0xc>
 800f794:	4b0d      	ldr	r3, [pc, #52]	; (800f7cc <__smakebuf_r+0x7c>)
 800f796:	62b3      	str	r3, [r6, #40]	; 0x28
 800f798:	89a3      	ldrh	r3, [r4, #12]
 800f79a:	6020      	str	r0, [r4, #0]
 800f79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7a0:	81a3      	strh	r3, [r4, #12]
 800f7a2:	9b00      	ldr	r3, [sp, #0]
 800f7a4:	6163      	str	r3, [r4, #20]
 800f7a6:	9b01      	ldr	r3, [sp, #4]
 800f7a8:	6120      	str	r0, [r4, #16]
 800f7aa:	b15b      	cbz	r3, 800f7c4 <__smakebuf_r+0x74>
 800f7ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7b0:	4630      	mov	r0, r6
 800f7b2:	f000 fd2b 	bl	801020c <_isatty_r>
 800f7b6:	b128      	cbz	r0, 800f7c4 <__smakebuf_r+0x74>
 800f7b8:	89a3      	ldrh	r3, [r4, #12]
 800f7ba:	f023 0303 	bic.w	r3, r3, #3
 800f7be:	f043 0301 	orr.w	r3, r3, #1
 800f7c2:	81a3      	strh	r3, [r4, #12]
 800f7c4:	89a0      	ldrh	r0, [r4, #12]
 800f7c6:	4305      	orrs	r5, r0
 800f7c8:	81a5      	strh	r5, [r4, #12]
 800f7ca:	e7cd      	b.n	800f768 <__smakebuf_r+0x18>
 800f7cc:	0800f55d 	.word	0x0800f55d

0800f7d0 <malloc>:
 800f7d0:	4b02      	ldr	r3, [pc, #8]	; (800f7dc <malloc+0xc>)
 800f7d2:	4601      	mov	r1, r0
 800f7d4:	6818      	ldr	r0, [r3, #0]
 800f7d6:	f000 b86f 	b.w	800f8b8 <_malloc_r>
 800f7da:	bf00      	nop
 800f7dc:	24000054 	.word	0x24000054

0800f7e0 <_free_r>:
 800f7e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f7e2:	2900      	cmp	r1, #0
 800f7e4:	d044      	beq.n	800f870 <_free_r+0x90>
 800f7e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7ea:	9001      	str	r0, [sp, #4]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	f1a1 0404 	sub.w	r4, r1, #4
 800f7f2:	bfb8      	it	lt
 800f7f4:	18e4      	addlt	r4, r4, r3
 800f7f6:	f000 fd2b 	bl	8010250 <__malloc_lock>
 800f7fa:	4a1e      	ldr	r2, [pc, #120]	; (800f874 <_free_r+0x94>)
 800f7fc:	9801      	ldr	r0, [sp, #4]
 800f7fe:	6813      	ldr	r3, [r2, #0]
 800f800:	b933      	cbnz	r3, 800f810 <_free_r+0x30>
 800f802:	6063      	str	r3, [r4, #4]
 800f804:	6014      	str	r4, [r2, #0]
 800f806:	b003      	add	sp, #12
 800f808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f80c:	f000 bd26 	b.w	801025c <__malloc_unlock>
 800f810:	42a3      	cmp	r3, r4
 800f812:	d908      	bls.n	800f826 <_free_r+0x46>
 800f814:	6825      	ldr	r5, [r4, #0]
 800f816:	1961      	adds	r1, r4, r5
 800f818:	428b      	cmp	r3, r1
 800f81a:	bf01      	itttt	eq
 800f81c:	6819      	ldreq	r1, [r3, #0]
 800f81e:	685b      	ldreq	r3, [r3, #4]
 800f820:	1949      	addeq	r1, r1, r5
 800f822:	6021      	streq	r1, [r4, #0]
 800f824:	e7ed      	b.n	800f802 <_free_r+0x22>
 800f826:	461a      	mov	r2, r3
 800f828:	685b      	ldr	r3, [r3, #4]
 800f82a:	b10b      	cbz	r3, 800f830 <_free_r+0x50>
 800f82c:	42a3      	cmp	r3, r4
 800f82e:	d9fa      	bls.n	800f826 <_free_r+0x46>
 800f830:	6811      	ldr	r1, [r2, #0]
 800f832:	1855      	adds	r5, r2, r1
 800f834:	42a5      	cmp	r5, r4
 800f836:	d10b      	bne.n	800f850 <_free_r+0x70>
 800f838:	6824      	ldr	r4, [r4, #0]
 800f83a:	4421      	add	r1, r4
 800f83c:	1854      	adds	r4, r2, r1
 800f83e:	42a3      	cmp	r3, r4
 800f840:	6011      	str	r1, [r2, #0]
 800f842:	d1e0      	bne.n	800f806 <_free_r+0x26>
 800f844:	681c      	ldr	r4, [r3, #0]
 800f846:	685b      	ldr	r3, [r3, #4]
 800f848:	6053      	str	r3, [r2, #4]
 800f84a:	4421      	add	r1, r4
 800f84c:	6011      	str	r1, [r2, #0]
 800f84e:	e7da      	b.n	800f806 <_free_r+0x26>
 800f850:	d902      	bls.n	800f858 <_free_r+0x78>
 800f852:	230c      	movs	r3, #12
 800f854:	6003      	str	r3, [r0, #0]
 800f856:	e7d6      	b.n	800f806 <_free_r+0x26>
 800f858:	6825      	ldr	r5, [r4, #0]
 800f85a:	1961      	adds	r1, r4, r5
 800f85c:	428b      	cmp	r3, r1
 800f85e:	bf04      	itt	eq
 800f860:	6819      	ldreq	r1, [r3, #0]
 800f862:	685b      	ldreq	r3, [r3, #4]
 800f864:	6063      	str	r3, [r4, #4]
 800f866:	bf04      	itt	eq
 800f868:	1949      	addeq	r1, r1, r5
 800f86a:	6021      	streq	r1, [r4, #0]
 800f86c:	6054      	str	r4, [r2, #4]
 800f86e:	e7ca      	b.n	800f806 <_free_r+0x26>
 800f870:	b003      	add	sp, #12
 800f872:	bd30      	pop	{r4, r5, pc}
 800f874:	240e003c 	.word	0x240e003c

0800f878 <sbrk_aligned>:
 800f878:	b570      	push	{r4, r5, r6, lr}
 800f87a:	4e0e      	ldr	r6, [pc, #56]	; (800f8b4 <sbrk_aligned+0x3c>)
 800f87c:	460c      	mov	r4, r1
 800f87e:	6831      	ldr	r1, [r6, #0]
 800f880:	4605      	mov	r5, r0
 800f882:	b911      	cbnz	r1, 800f88a <sbrk_aligned+0x12>
 800f884:	f000 fb7a 	bl	800ff7c <_sbrk_r>
 800f888:	6030      	str	r0, [r6, #0]
 800f88a:	4621      	mov	r1, r4
 800f88c:	4628      	mov	r0, r5
 800f88e:	f000 fb75 	bl	800ff7c <_sbrk_r>
 800f892:	1c43      	adds	r3, r0, #1
 800f894:	d00a      	beq.n	800f8ac <sbrk_aligned+0x34>
 800f896:	1cc4      	adds	r4, r0, #3
 800f898:	f024 0403 	bic.w	r4, r4, #3
 800f89c:	42a0      	cmp	r0, r4
 800f89e:	d007      	beq.n	800f8b0 <sbrk_aligned+0x38>
 800f8a0:	1a21      	subs	r1, r4, r0
 800f8a2:	4628      	mov	r0, r5
 800f8a4:	f000 fb6a 	bl	800ff7c <_sbrk_r>
 800f8a8:	3001      	adds	r0, #1
 800f8aa:	d101      	bne.n	800f8b0 <sbrk_aligned+0x38>
 800f8ac:	f04f 34ff 	mov.w	r4, #4294967295
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	bd70      	pop	{r4, r5, r6, pc}
 800f8b4:	240e0040 	.word	0x240e0040

0800f8b8 <_malloc_r>:
 800f8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8bc:	1ccd      	adds	r5, r1, #3
 800f8be:	f025 0503 	bic.w	r5, r5, #3
 800f8c2:	3508      	adds	r5, #8
 800f8c4:	2d0c      	cmp	r5, #12
 800f8c6:	bf38      	it	cc
 800f8c8:	250c      	movcc	r5, #12
 800f8ca:	2d00      	cmp	r5, #0
 800f8cc:	4607      	mov	r7, r0
 800f8ce:	db01      	blt.n	800f8d4 <_malloc_r+0x1c>
 800f8d0:	42a9      	cmp	r1, r5
 800f8d2:	d905      	bls.n	800f8e0 <_malloc_r+0x28>
 800f8d4:	230c      	movs	r3, #12
 800f8d6:	603b      	str	r3, [r7, #0]
 800f8d8:	2600      	movs	r6, #0
 800f8da:	4630      	mov	r0, r6
 800f8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8e0:	4e2e      	ldr	r6, [pc, #184]	; (800f99c <_malloc_r+0xe4>)
 800f8e2:	f000 fcb5 	bl	8010250 <__malloc_lock>
 800f8e6:	6833      	ldr	r3, [r6, #0]
 800f8e8:	461c      	mov	r4, r3
 800f8ea:	bb34      	cbnz	r4, 800f93a <_malloc_r+0x82>
 800f8ec:	4629      	mov	r1, r5
 800f8ee:	4638      	mov	r0, r7
 800f8f0:	f7ff ffc2 	bl	800f878 <sbrk_aligned>
 800f8f4:	1c43      	adds	r3, r0, #1
 800f8f6:	4604      	mov	r4, r0
 800f8f8:	d14d      	bne.n	800f996 <_malloc_r+0xde>
 800f8fa:	6834      	ldr	r4, [r6, #0]
 800f8fc:	4626      	mov	r6, r4
 800f8fe:	2e00      	cmp	r6, #0
 800f900:	d140      	bne.n	800f984 <_malloc_r+0xcc>
 800f902:	6823      	ldr	r3, [r4, #0]
 800f904:	4631      	mov	r1, r6
 800f906:	4638      	mov	r0, r7
 800f908:	eb04 0803 	add.w	r8, r4, r3
 800f90c:	f000 fb36 	bl	800ff7c <_sbrk_r>
 800f910:	4580      	cmp	r8, r0
 800f912:	d13a      	bne.n	800f98a <_malloc_r+0xd2>
 800f914:	6821      	ldr	r1, [r4, #0]
 800f916:	3503      	adds	r5, #3
 800f918:	1a6d      	subs	r5, r5, r1
 800f91a:	f025 0503 	bic.w	r5, r5, #3
 800f91e:	3508      	adds	r5, #8
 800f920:	2d0c      	cmp	r5, #12
 800f922:	bf38      	it	cc
 800f924:	250c      	movcc	r5, #12
 800f926:	4629      	mov	r1, r5
 800f928:	4638      	mov	r0, r7
 800f92a:	f7ff ffa5 	bl	800f878 <sbrk_aligned>
 800f92e:	3001      	adds	r0, #1
 800f930:	d02b      	beq.n	800f98a <_malloc_r+0xd2>
 800f932:	6823      	ldr	r3, [r4, #0]
 800f934:	442b      	add	r3, r5
 800f936:	6023      	str	r3, [r4, #0]
 800f938:	e00e      	b.n	800f958 <_malloc_r+0xa0>
 800f93a:	6822      	ldr	r2, [r4, #0]
 800f93c:	1b52      	subs	r2, r2, r5
 800f93e:	d41e      	bmi.n	800f97e <_malloc_r+0xc6>
 800f940:	2a0b      	cmp	r2, #11
 800f942:	d916      	bls.n	800f972 <_malloc_r+0xba>
 800f944:	1961      	adds	r1, r4, r5
 800f946:	42a3      	cmp	r3, r4
 800f948:	6025      	str	r5, [r4, #0]
 800f94a:	bf18      	it	ne
 800f94c:	6059      	strne	r1, [r3, #4]
 800f94e:	6863      	ldr	r3, [r4, #4]
 800f950:	bf08      	it	eq
 800f952:	6031      	streq	r1, [r6, #0]
 800f954:	5162      	str	r2, [r4, r5]
 800f956:	604b      	str	r3, [r1, #4]
 800f958:	4638      	mov	r0, r7
 800f95a:	f104 060b 	add.w	r6, r4, #11
 800f95e:	f000 fc7d 	bl	801025c <__malloc_unlock>
 800f962:	f026 0607 	bic.w	r6, r6, #7
 800f966:	1d23      	adds	r3, r4, #4
 800f968:	1af2      	subs	r2, r6, r3
 800f96a:	d0b6      	beq.n	800f8da <_malloc_r+0x22>
 800f96c:	1b9b      	subs	r3, r3, r6
 800f96e:	50a3      	str	r3, [r4, r2]
 800f970:	e7b3      	b.n	800f8da <_malloc_r+0x22>
 800f972:	6862      	ldr	r2, [r4, #4]
 800f974:	42a3      	cmp	r3, r4
 800f976:	bf0c      	ite	eq
 800f978:	6032      	streq	r2, [r6, #0]
 800f97a:	605a      	strne	r2, [r3, #4]
 800f97c:	e7ec      	b.n	800f958 <_malloc_r+0xa0>
 800f97e:	4623      	mov	r3, r4
 800f980:	6864      	ldr	r4, [r4, #4]
 800f982:	e7b2      	b.n	800f8ea <_malloc_r+0x32>
 800f984:	4634      	mov	r4, r6
 800f986:	6876      	ldr	r6, [r6, #4]
 800f988:	e7b9      	b.n	800f8fe <_malloc_r+0x46>
 800f98a:	230c      	movs	r3, #12
 800f98c:	603b      	str	r3, [r7, #0]
 800f98e:	4638      	mov	r0, r7
 800f990:	f000 fc64 	bl	801025c <__malloc_unlock>
 800f994:	e7a1      	b.n	800f8da <_malloc_r+0x22>
 800f996:	6025      	str	r5, [r4, #0]
 800f998:	e7de      	b.n	800f958 <_malloc_r+0xa0>
 800f99a:	bf00      	nop
 800f99c:	240e003c 	.word	0x240e003c

0800f9a0 <__sfputc_r>:
 800f9a0:	6893      	ldr	r3, [r2, #8]
 800f9a2:	3b01      	subs	r3, #1
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	b410      	push	{r4}
 800f9a8:	6093      	str	r3, [r2, #8]
 800f9aa:	da08      	bge.n	800f9be <__sfputc_r+0x1e>
 800f9ac:	6994      	ldr	r4, [r2, #24]
 800f9ae:	42a3      	cmp	r3, r4
 800f9b0:	db01      	blt.n	800f9b6 <__sfputc_r+0x16>
 800f9b2:	290a      	cmp	r1, #10
 800f9b4:	d103      	bne.n	800f9be <__sfputc_r+0x1e>
 800f9b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9ba:	f000 bb33 	b.w	8010024 <__swbuf_r>
 800f9be:	6813      	ldr	r3, [r2, #0]
 800f9c0:	1c58      	adds	r0, r3, #1
 800f9c2:	6010      	str	r0, [r2, #0]
 800f9c4:	7019      	strb	r1, [r3, #0]
 800f9c6:	4608      	mov	r0, r1
 800f9c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9cc:	4770      	bx	lr

0800f9ce <__sfputs_r>:
 800f9ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9d0:	4606      	mov	r6, r0
 800f9d2:	460f      	mov	r7, r1
 800f9d4:	4614      	mov	r4, r2
 800f9d6:	18d5      	adds	r5, r2, r3
 800f9d8:	42ac      	cmp	r4, r5
 800f9da:	d101      	bne.n	800f9e0 <__sfputs_r+0x12>
 800f9dc:	2000      	movs	r0, #0
 800f9de:	e007      	b.n	800f9f0 <__sfputs_r+0x22>
 800f9e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9e4:	463a      	mov	r2, r7
 800f9e6:	4630      	mov	r0, r6
 800f9e8:	f7ff ffda 	bl	800f9a0 <__sfputc_r>
 800f9ec:	1c43      	adds	r3, r0, #1
 800f9ee:	d1f3      	bne.n	800f9d8 <__sfputs_r+0xa>
 800f9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f9f4 <_vfiprintf_r>:
 800f9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f8:	460d      	mov	r5, r1
 800f9fa:	b09d      	sub	sp, #116	; 0x74
 800f9fc:	4614      	mov	r4, r2
 800f9fe:	4698      	mov	r8, r3
 800fa00:	4606      	mov	r6, r0
 800fa02:	b118      	cbz	r0, 800fa0c <_vfiprintf_r+0x18>
 800fa04:	6983      	ldr	r3, [r0, #24]
 800fa06:	b90b      	cbnz	r3, 800fa0c <_vfiprintf_r+0x18>
 800fa08:	f7ff fddc 	bl	800f5c4 <__sinit>
 800fa0c:	4b89      	ldr	r3, [pc, #548]	; (800fc34 <_vfiprintf_r+0x240>)
 800fa0e:	429d      	cmp	r5, r3
 800fa10:	d11b      	bne.n	800fa4a <_vfiprintf_r+0x56>
 800fa12:	6875      	ldr	r5, [r6, #4]
 800fa14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa16:	07d9      	lsls	r1, r3, #31
 800fa18:	d405      	bmi.n	800fa26 <_vfiprintf_r+0x32>
 800fa1a:	89ab      	ldrh	r3, [r5, #12]
 800fa1c:	059a      	lsls	r2, r3, #22
 800fa1e:	d402      	bmi.n	800fa26 <_vfiprintf_r+0x32>
 800fa20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa22:	f7ff fe6d 	bl	800f700 <__retarget_lock_acquire_recursive>
 800fa26:	89ab      	ldrh	r3, [r5, #12]
 800fa28:	071b      	lsls	r3, r3, #28
 800fa2a:	d501      	bpl.n	800fa30 <_vfiprintf_r+0x3c>
 800fa2c:	692b      	ldr	r3, [r5, #16]
 800fa2e:	b9eb      	cbnz	r3, 800fa6c <_vfiprintf_r+0x78>
 800fa30:	4629      	mov	r1, r5
 800fa32:	4630      	mov	r0, r6
 800fa34:	f000 fb5a 	bl	80100ec <__swsetup_r>
 800fa38:	b1c0      	cbz	r0, 800fa6c <_vfiprintf_r+0x78>
 800fa3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa3c:	07dc      	lsls	r4, r3, #31
 800fa3e:	d50e      	bpl.n	800fa5e <_vfiprintf_r+0x6a>
 800fa40:	f04f 30ff 	mov.w	r0, #4294967295
 800fa44:	b01d      	add	sp, #116	; 0x74
 800fa46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa4a:	4b7b      	ldr	r3, [pc, #492]	; (800fc38 <_vfiprintf_r+0x244>)
 800fa4c:	429d      	cmp	r5, r3
 800fa4e:	d101      	bne.n	800fa54 <_vfiprintf_r+0x60>
 800fa50:	68b5      	ldr	r5, [r6, #8]
 800fa52:	e7df      	b.n	800fa14 <_vfiprintf_r+0x20>
 800fa54:	4b79      	ldr	r3, [pc, #484]	; (800fc3c <_vfiprintf_r+0x248>)
 800fa56:	429d      	cmp	r5, r3
 800fa58:	bf08      	it	eq
 800fa5a:	68f5      	ldreq	r5, [r6, #12]
 800fa5c:	e7da      	b.n	800fa14 <_vfiprintf_r+0x20>
 800fa5e:	89ab      	ldrh	r3, [r5, #12]
 800fa60:	0598      	lsls	r0, r3, #22
 800fa62:	d4ed      	bmi.n	800fa40 <_vfiprintf_r+0x4c>
 800fa64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa66:	f7ff fe4c 	bl	800f702 <__retarget_lock_release_recursive>
 800fa6a:	e7e9      	b.n	800fa40 <_vfiprintf_r+0x4c>
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	9309      	str	r3, [sp, #36]	; 0x24
 800fa70:	2320      	movs	r3, #32
 800fa72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa76:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa7a:	2330      	movs	r3, #48	; 0x30
 800fa7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fc40 <_vfiprintf_r+0x24c>
 800fa80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa84:	f04f 0901 	mov.w	r9, #1
 800fa88:	4623      	mov	r3, r4
 800fa8a:	469a      	mov	sl, r3
 800fa8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa90:	b10a      	cbz	r2, 800fa96 <_vfiprintf_r+0xa2>
 800fa92:	2a25      	cmp	r2, #37	; 0x25
 800fa94:	d1f9      	bne.n	800fa8a <_vfiprintf_r+0x96>
 800fa96:	ebba 0b04 	subs.w	fp, sl, r4
 800fa9a:	d00b      	beq.n	800fab4 <_vfiprintf_r+0xc0>
 800fa9c:	465b      	mov	r3, fp
 800fa9e:	4622      	mov	r2, r4
 800faa0:	4629      	mov	r1, r5
 800faa2:	4630      	mov	r0, r6
 800faa4:	f7ff ff93 	bl	800f9ce <__sfputs_r>
 800faa8:	3001      	adds	r0, #1
 800faaa:	f000 80aa 	beq.w	800fc02 <_vfiprintf_r+0x20e>
 800faae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fab0:	445a      	add	r2, fp
 800fab2:	9209      	str	r2, [sp, #36]	; 0x24
 800fab4:	f89a 3000 	ldrb.w	r3, [sl]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	f000 80a2 	beq.w	800fc02 <_vfiprintf_r+0x20e>
 800fabe:	2300      	movs	r3, #0
 800fac0:	f04f 32ff 	mov.w	r2, #4294967295
 800fac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fac8:	f10a 0a01 	add.w	sl, sl, #1
 800facc:	9304      	str	r3, [sp, #16]
 800face:	9307      	str	r3, [sp, #28]
 800fad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fad4:	931a      	str	r3, [sp, #104]	; 0x68
 800fad6:	4654      	mov	r4, sl
 800fad8:	2205      	movs	r2, #5
 800fada:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fade:	4858      	ldr	r0, [pc, #352]	; (800fc40 <_vfiprintf_r+0x24c>)
 800fae0:	f7f0 fc06 	bl	80002f0 <memchr>
 800fae4:	9a04      	ldr	r2, [sp, #16]
 800fae6:	b9d8      	cbnz	r0, 800fb20 <_vfiprintf_r+0x12c>
 800fae8:	06d1      	lsls	r1, r2, #27
 800faea:	bf44      	itt	mi
 800faec:	2320      	movmi	r3, #32
 800faee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800faf2:	0713      	lsls	r3, r2, #28
 800faf4:	bf44      	itt	mi
 800faf6:	232b      	movmi	r3, #43	; 0x2b
 800faf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fafc:	f89a 3000 	ldrb.w	r3, [sl]
 800fb00:	2b2a      	cmp	r3, #42	; 0x2a
 800fb02:	d015      	beq.n	800fb30 <_vfiprintf_r+0x13c>
 800fb04:	9a07      	ldr	r2, [sp, #28]
 800fb06:	4654      	mov	r4, sl
 800fb08:	2000      	movs	r0, #0
 800fb0a:	f04f 0c0a 	mov.w	ip, #10
 800fb0e:	4621      	mov	r1, r4
 800fb10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb14:	3b30      	subs	r3, #48	; 0x30
 800fb16:	2b09      	cmp	r3, #9
 800fb18:	d94e      	bls.n	800fbb8 <_vfiprintf_r+0x1c4>
 800fb1a:	b1b0      	cbz	r0, 800fb4a <_vfiprintf_r+0x156>
 800fb1c:	9207      	str	r2, [sp, #28]
 800fb1e:	e014      	b.n	800fb4a <_vfiprintf_r+0x156>
 800fb20:	eba0 0308 	sub.w	r3, r0, r8
 800fb24:	fa09 f303 	lsl.w	r3, r9, r3
 800fb28:	4313      	orrs	r3, r2
 800fb2a:	9304      	str	r3, [sp, #16]
 800fb2c:	46a2      	mov	sl, r4
 800fb2e:	e7d2      	b.n	800fad6 <_vfiprintf_r+0xe2>
 800fb30:	9b03      	ldr	r3, [sp, #12]
 800fb32:	1d19      	adds	r1, r3, #4
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	9103      	str	r1, [sp, #12]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	bfbb      	ittet	lt
 800fb3c:	425b      	neglt	r3, r3
 800fb3e:	f042 0202 	orrlt.w	r2, r2, #2
 800fb42:	9307      	strge	r3, [sp, #28]
 800fb44:	9307      	strlt	r3, [sp, #28]
 800fb46:	bfb8      	it	lt
 800fb48:	9204      	strlt	r2, [sp, #16]
 800fb4a:	7823      	ldrb	r3, [r4, #0]
 800fb4c:	2b2e      	cmp	r3, #46	; 0x2e
 800fb4e:	d10c      	bne.n	800fb6a <_vfiprintf_r+0x176>
 800fb50:	7863      	ldrb	r3, [r4, #1]
 800fb52:	2b2a      	cmp	r3, #42	; 0x2a
 800fb54:	d135      	bne.n	800fbc2 <_vfiprintf_r+0x1ce>
 800fb56:	9b03      	ldr	r3, [sp, #12]
 800fb58:	1d1a      	adds	r2, r3, #4
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	9203      	str	r2, [sp, #12]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	bfb8      	it	lt
 800fb62:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb66:	3402      	adds	r4, #2
 800fb68:	9305      	str	r3, [sp, #20]
 800fb6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fc50 <_vfiprintf_r+0x25c>
 800fb6e:	7821      	ldrb	r1, [r4, #0]
 800fb70:	2203      	movs	r2, #3
 800fb72:	4650      	mov	r0, sl
 800fb74:	f7f0 fbbc 	bl	80002f0 <memchr>
 800fb78:	b140      	cbz	r0, 800fb8c <_vfiprintf_r+0x198>
 800fb7a:	2340      	movs	r3, #64	; 0x40
 800fb7c:	eba0 000a 	sub.w	r0, r0, sl
 800fb80:	fa03 f000 	lsl.w	r0, r3, r0
 800fb84:	9b04      	ldr	r3, [sp, #16]
 800fb86:	4303      	orrs	r3, r0
 800fb88:	3401      	adds	r4, #1
 800fb8a:	9304      	str	r3, [sp, #16]
 800fb8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb90:	482c      	ldr	r0, [pc, #176]	; (800fc44 <_vfiprintf_r+0x250>)
 800fb92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb96:	2206      	movs	r2, #6
 800fb98:	f7f0 fbaa 	bl	80002f0 <memchr>
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	d03f      	beq.n	800fc20 <_vfiprintf_r+0x22c>
 800fba0:	4b29      	ldr	r3, [pc, #164]	; (800fc48 <_vfiprintf_r+0x254>)
 800fba2:	bb1b      	cbnz	r3, 800fbec <_vfiprintf_r+0x1f8>
 800fba4:	9b03      	ldr	r3, [sp, #12]
 800fba6:	3307      	adds	r3, #7
 800fba8:	f023 0307 	bic.w	r3, r3, #7
 800fbac:	3308      	adds	r3, #8
 800fbae:	9303      	str	r3, [sp, #12]
 800fbb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbb2:	443b      	add	r3, r7
 800fbb4:	9309      	str	r3, [sp, #36]	; 0x24
 800fbb6:	e767      	b.n	800fa88 <_vfiprintf_r+0x94>
 800fbb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbbc:	460c      	mov	r4, r1
 800fbbe:	2001      	movs	r0, #1
 800fbc0:	e7a5      	b.n	800fb0e <_vfiprintf_r+0x11a>
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	3401      	adds	r4, #1
 800fbc6:	9305      	str	r3, [sp, #20]
 800fbc8:	4619      	mov	r1, r3
 800fbca:	f04f 0c0a 	mov.w	ip, #10
 800fbce:	4620      	mov	r0, r4
 800fbd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbd4:	3a30      	subs	r2, #48	; 0x30
 800fbd6:	2a09      	cmp	r2, #9
 800fbd8:	d903      	bls.n	800fbe2 <_vfiprintf_r+0x1ee>
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d0c5      	beq.n	800fb6a <_vfiprintf_r+0x176>
 800fbde:	9105      	str	r1, [sp, #20]
 800fbe0:	e7c3      	b.n	800fb6a <_vfiprintf_r+0x176>
 800fbe2:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbe6:	4604      	mov	r4, r0
 800fbe8:	2301      	movs	r3, #1
 800fbea:	e7f0      	b.n	800fbce <_vfiprintf_r+0x1da>
 800fbec:	ab03      	add	r3, sp, #12
 800fbee:	9300      	str	r3, [sp, #0]
 800fbf0:	462a      	mov	r2, r5
 800fbf2:	4b16      	ldr	r3, [pc, #88]	; (800fc4c <_vfiprintf_r+0x258>)
 800fbf4:	a904      	add	r1, sp, #16
 800fbf6:	4630      	mov	r0, r6
 800fbf8:	f3af 8000 	nop.w
 800fbfc:	4607      	mov	r7, r0
 800fbfe:	1c78      	adds	r0, r7, #1
 800fc00:	d1d6      	bne.n	800fbb0 <_vfiprintf_r+0x1bc>
 800fc02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc04:	07d9      	lsls	r1, r3, #31
 800fc06:	d405      	bmi.n	800fc14 <_vfiprintf_r+0x220>
 800fc08:	89ab      	ldrh	r3, [r5, #12]
 800fc0a:	059a      	lsls	r2, r3, #22
 800fc0c:	d402      	bmi.n	800fc14 <_vfiprintf_r+0x220>
 800fc0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc10:	f7ff fd77 	bl	800f702 <__retarget_lock_release_recursive>
 800fc14:	89ab      	ldrh	r3, [r5, #12]
 800fc16:	065b      	lsls	r3, r3, #25
 800fc18:	f53f af12 	bmi.w	800fa40 <_vfiprintf_r+0x4c>
 800fc1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc1e:	e711      	b.n	800fa44 <_vfiprintf_r+0x50>
 800fc20:	ab03      	add	r3, sp, #12
 800fc22:	9300      	str	r3, [sp, #0]
 800fc24:	462a      	mov	r2, r5
 800fc26:	4b09      	ldr	r3, [pc, #36]	; (800fc4c <_vfiprintf_r+0x258>)
 800fc28:	a904      	add	r1, sp, #16
 800fc2a:	4630      	mov	r0, r6
 800fc2c:	f000 f880 	bl	800fd30 <_printf_i>
 800fc30:	e7e4      	b.n	800fbfc <_vfiprintf_r+0x208>
 800fc32:	bf00      	nop
 800fc34:	08010914 	.word	0x08010914
 800fc38:	08010934 	.word	0x08010934
 800fc3c:	080108f4 	.word	0x080108f4
 800fc40:	08010954 	.word	0x08010954
 800fc44:	0801095e 	.word	0x0801095e
 800fc48:	00000000 	.word	0x00000000
 800fc4c:	0800f9cf 	.word	0x0800f9cf
 800fc50:	0801095a 	.word	0x0801095a

0800fc54 <_printf_common>:
 800fc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc58:	4616      	mov	r6, r2
 800fc5a:	4699      	mov	r9, r3
 800fc5c:	688a      	ldr	r2, [r1, #8]
 800fc5e:	690b      	ldr	r3, [r1, #16]
 800fc60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fc64:	4293      	cmp	r3, r2
 800fc66:	bfb8      	it	lt
 800fc68:	4613      	movlt	r3, r2
 800fc6a:	6033      	str	r3, [r6, #0]
 800fc6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fc70:	4607      	mov	r7, r0
 800fc72:	460c      	mov	r4, r1
 800fc74:	b10a      	cbz	r2, 800fc7a <_printf_common+0x26>
 800fc76:	3301      	adds	r3, #1
 800fc78:	6033      	str	r3, [r6, #0]
 800fc7a:	6823      	ldr	r3, [r4, #0]
 800fc7c:	0699      	lsls	r1, r3, #26
 800fc7e:	bf42      	ittt	mi
 800fc80:	6833      	ldrmi	r3, [r6, #0]
 800fc82:	3302      	addmi	r3, #2
 800fc84:	6033      	strmi	r3, [r6, #0]
 800fc86:	6825      	ldr	r5, [r4, #0]
 800fc88:	f015 0506 	ands.w	r5, r5, #6
 800fc8c:	d106      	bne.n	800fc9c <_printf_common+0x48>
 800fc8e:	f104 0a19 	add.w	sl, r4, #25
 800fc92:	68e3      	ldr	r3, [r4, #12]
 800fc94:	6832      	ldr	r2, [r6, #0]
 800fc96:	1a9b      	subs	r3, r3, r2
 800fc98:	42ab      	cmp	r3, r5
 800fc9a:	dc26      	bgt.n	800fcea <_printf_common+0x96>
 800fc9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fca0:	1e13      	subs	r3, r2, #0
 800fca2:	6822      	ldr	r2, [r4, #0]
 800fca4:	bf18      	it	ne
 800fca6:	2301      	movne	r3, #1
 800fca8:	0692      	lsls	r2, r2, #26
 800fcaa:	d42b      	bmi.n	800fd04 <_printf_common+0xb0>
 800fcac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fcb0:	4649      	mov	r1, r9
 800fcb2:	4638      	mov	r0, r7
 800fcb4:	47c0      	blx	r8
 800fcb6:	3001      	adds	r0, #1
 800fcb8:	d01e      	beq.n	800fcf8 <_printf_common+0xa4>
 800fcba:	6823      	ldr	r3, [r4, #0]
 800fcbc:	68e5      	ldr	r5, [r4, #12]
 800fcbe:	6832      	ldr	r2, [r6, #0]
 800fcc0:	f003 0306 	and.w	r3, r3, #6
 800fcc4:	2b04      	cmp	r3, #4
 800fcc6:	bf08      	it	eq
 800fcc8:	1aad      	subeq	r5, r5, r2
 800fcca:	68a3      	ldr	r3, [r4, #8]
 800fccc:	6922      	ldr	r2, [r4, #16]
 800fcce:	bf0c      	ite	eq
 800fcd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fcd4:	2500      	movne	r5, #0
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	bfc4      	itt	gt
 800fcda:	1a9b      	subgt	r3, r3, r2
 800fcdc:	18ed      	addgt	r5, r5, r3
 800fcde:	2600      	movs	r6, #0
 800fce0:	341a      	adds	r4, #26
 800fce2:	42b5      	cmp	r5, r6
 800fce4:	d11a      	bne.n	800fd1c <_printf_common+0xc8>
 800fce6:	2000      	movs	r0, #0
 800fce8:	e008      	b.n	800fcfc <_printf_common+0xa8>
 800fcea:	2301      	movs	r3, #1
 800fcec:	4652      	mov	r2, sl
 800fcee:	4649      	mov	r1, r9
 800fcf0:	4638      	mov	r0, r7
 800fcf2:	47c0      	blx	r8
 800fcf4:	3001      	adds	r0, #1
 800fcf6:	d103      	bne.n	800fd00 <_printf_common+0xac>
 800fcf8:	f04f 30ff 	mov.w	r0, #4294967295
 800fcfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd00:	3501      	adds	r5, #1
 800fd02:	e7c6      	b.n	800fc92 <_printf_common+0x3e>
 800fd04:	18e1      	adds	r1, r4, r3
 800fd06:	1c5a      	adds	r2, r3, #1
 800fd08:	2030      	movs	r0, #48	; 0x30
 800fd0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fd0e:	4422      	add	r2, r4
 800fd10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fd14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fd18:	3302      	adds	r3, #2
 800fd1a:	e7c7      	b.n	800fcac <_printf_common+0x58>
 800fd1c:	2301      	movs	r3, #1
 800fd1e:	4622      	mov	r2, r4
 800fd20:	4649      	mov	r1, r9
 800fd22:	4638      	mov	r0, r7
 800fd24:	47c0      	blx	r8
 800fd26:	3001      	adds	r0, #1
 800fd28:	d0e6      	beq.n	800fcf8 <_printf_common+0xa4>
 800fd2a:	3601      	adds	r6, #1
 800fd2c:	e7d9      	b.n	800fce2 <_printf_common+0x8e>
	...

0800fd30 <_printf_i>:
 800fd30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fd34:	7e0f      	ldrb	r7, [r1, #24]
 800fd36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fd38:	2f78      	cmp	r7, #120	; 0x78
 800fd3a:	4691      	mov	r9, r2
 800fd3c:	4680      	mov	r8, r0
 800fd3e:	460c      	mov	r4, r1
 800fd40:	469a      	mov	sl, r3
 800fd42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fd46:	d807      	bhi.n	800fd58 <_printf_i+0x28>
 800fd48:	2f62      	cmp	r7, #98	; 0x62
 800fd4a:	d80a      	bhi.n	800fd62 <_printf_i+0x32>
 800fd4c:	2f00      	cmp	r7, #0
 800fd4e:	f000 80d8 	beq.w	800ff02 <_printf_i+0x1d2>
 800fd52:	2f58      	cmp	r7, #88	; 0x58
 800fd54:	f000 80a3 	beq.w	800fe9e <_printf_i+0x16e>
 800fd58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fd60:	e03a      	b.n	800fdd8 <_printf_i+0xa8>
 800fd62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fd66:	2b15      	cmp	r3, #21
 800fd68:	d8f6      	bhi.n	800fd58 <_printf_i+0x28>
 800fd6a:	a101      	add	r1, pc, #4	; (adr r1, 800fd70 <_printf_i+0x40>)
 800fd6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd70:	0800fdc9 	.word	0x0800fdc9
 800fd74:	0800fddd 	.word	0x0800fddd
 800fd78:	0800fd59 	.word	0x0800fd59
 800fd7c:	0800fd59 	.word	0x0800fd59
 800fd80:	0800fd59 	.word	0x0800fd59
 800fd84:	0800fd59 	.word	0x0800fd59
 800fd88:	0800fddd 	.word	0x0800fddd
 800fd8c:	0800fd59 	.word	0x0800fd59
 800fd90:	0800fd59 	.word	0x0800fd59
 800fd94:	0800fd59 	.word	0x0800fd59
 800fd98:	0800fd59 	.word	0x0800fd59
 800fd9c:	0800fee9 	.word	0x0800fee9
 800fda0:	0800fe0d 	.word	0x0800fe0d
 800fda4:	0800fecb 	.word	0x0800fecb
 800fda8:	0800fd59 	.word	0x0800fd59
 800fdac:	0800fd59 	.word	0x0800fd59
 800fdb0:	0800ff0b 	.word	0x0800ff0b
 800fdb4:	0800fd59 	.word	0x0800fd59
 800fdb8:	0800fe0d 	.word	0x0800fe0d
 800fdbc:	0800fd59 	.word	0x0800fd59
 800fdc0:	0800fd59 	.word	0x0800fd59
 800fdc4:	0800fed3 	.word	0x0800fed3
 800fdc8:	682b      	ldr	r3, [r5, #0]
 800fdca:	1d1a      	adds	r2, r3, #4
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	602a      	str	r2, [r5, #0]
 800fdd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fdd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fdd8:	2301      	movs	r3, #1
 800fdda:	e0a3      	b.n	800ff24 <_printf_i+0x1f4>
 800fddc:	6820      	ldr	r0, [r4, #0]
 800fdde:	6829      	ldr	r1, [r5, #0]
 800fde0:	0606      	lsls	r6, r0, #24
 800fde2:	f101 0304 	add.w	r3, r1, #4
 800fde6:	d50a      	bpl.n	800fdfe <_printf_i+0xce>
 800fde8:	680e      	ldr	r6, [r1, #0]
 800fdea:	602b      	str	r3, [r5, #0]
 800fdec:	2e00      	cmp	r6, #0
 800fdee:	da03      	bge.n	800fdf8 <_printf_i+0xc8>
 800fdf0:	232d      	movs	r3, #45	; 0x2d
 800fdf2:	4276      	negs	r6, r6
 800fdf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdf8:	485e      	ldr	r0, [pc, #376]	; (800ff74 <_printf_i+0x244>)
 800fdfa:	230a      	movs	r3, #10
 800fdfc:	e019      	b.n	800fe32 <_printf_i+0x102>
 800fdfe:	680e      	ldr	r6, [r1, #0]
 800fe00:	602b      	str	r3, [r5, #0]
 800fe02:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fe06:	bf18      	it	ne
 800fe08:	b236      	sxthne	r6, r6
 800fe0a:	e7ef      	b.n	800fdec <_printf_i+0xbc>
 800fe0c:	682b      	ldr	r3, [r5, #0]
 800fe0e:	6820      	ldr	r0, [r4, #0]
 800fe10:	1d19      	adds	r1, r3, #4
 800fe12:	6029      	str	r1, [r5, #0]
 800fe14:	0601      	lsls	r1, r0, #24
 800fe16:	d501      	bpl.n	800fe1c <_printf_i+0xec>
 800fe18:	681e      	ldr	r6, [r3, #0]
 800fe1a:	e002      	b.n	800fe22 <_printf_i+0xf2>
 800fe1c:	0646      	lsls	r6, r0, #25
 800fe1e:	d5fb      	bpl.n	800fe18 <_printf_i+0xe8>
 800fe20:	881e      	ldrh	r6, [r3, #0]
 800fe22:	4854      	ldr	r0, [pc, #336]	; (800ff74 <_printf_i+0x244>)
 800fe24:	2f6f      	cmp	r7, #111	; 0x6f
 800fe26:	bf0c      	ite	eq
 800fe28:	2308      	moveq	r3, #8
 800fe2a:	230a      	movne	r3, #10
 800fe2c:	2100      	movs	r1, #0
 800fe2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fe32:	6865      	ldr	r5, [r4, #4]
 800fe34:	60a5      	str	r5, [r4, #8]
 800fe36:	2d00      	cmp	r5, #0
 800fe38:	bfa2      	ittt	ge
 800fe3a:	6821      	ldrge	r1, [r4, #0]
 800fe3c:	f021 0104 	bicge.w	r1, r1, #4
 800fe40:	6021      	strge	r1, [r4, #0]
 800fe42:	b90e      	cbnz	r6, 800fe48 <_printf_i+0x118>
 800fe44:	2d00      	cmp	r5, #0
 800fe46:	d04d      	beq.n	800fee4 <_printf_i+0x1b4>
 800fe48:	4615      	mov	r5, r2
 800fe4a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fe4e:	fb03 6711 	mls	r7, r3, r1, r6
 800fe52:	5dc7      	ldrb	r7, [r0, r7]
 800fe54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fe58:	4637      	mov	r7, r6
 800fe5a:	42bb      	cmp	r3, r7
 800fe5c:	460e      	mov	r6, r1
 800fe5e:	d9f4      	bls.n	800fe4a <_printf_i+0x11a>
 800fe60:	2b08      	cmp	r3, #8
 800fe62:	d10b      	bne.n	800fe7c <_printf_i+0x14c>
 800fe64:	6823      	ldr	r3, [r4, #0]
 800fe66:	07de      	lsls	r6, r3, #31
 800fe68:	d508      	bpl.n	800fe7c <_printf_i+0x14c>
 800fe6a:	6923      	ldr	r3, [r4, #16]
 800fe6c:	6861      	ldr	r1, [r4, #4]
 800fe6e:	4299      	cmp	r1, r3
 800fe70:	bfde      	ittt	le
 800fe72:	2330      	movle	r3, #48	; 0x30
 800fe74:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fe78:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fe7c:	1b52      	subs	r2, r2, r5
 800fe7e:	6122      	str	r2, [r4, #16]
 800fe80:	f8cd a000 	str.w	sl, [sp]
 800fe84:	464b      	mov	r3, r9
 800fe86:	aa03      	add	r2, sp, #12
 800fe88:	4621      	mov	r1, r4
 800fe8a:	4640      	mov	r0, r8
 800fe8c:	f7ff fee2 	bl	800fc54 <_printf_common>
 800fe90:	3001      	adds	r0, #1
 800fe92:	d14c      	bne.n	800ff2e <_printf_i+0x1fe>
 800fe94:	f04f 30ff 	mov.w	r0, #4294967295
 800fe98:	b004      	add	sp, #16
 800fe9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe9e:	4835      	ldr	r0, [pc, #212]	; (800ff74 <_printf_i+0x244>)
 800fea0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fea4:	6829      	ldr	r1, [r5, #0]
 800fea6:	6823      	ldr	r3, [r4, #0]
 800fea8:	f851 6b04 	ldr.w	r6, [r1], #4
 800feac:	6029      	str	r1, [r5, #0]
 800feae:	061d      	lsls	r5, r3, #24
 800feb0:	d514      	bpl.n	800fedc <_printf_i+0x1ac>
 800feb2:	07df      	lsls	r7, r3, #31
 800feb4:	bf44      	itt	mi
 800feb6:	f043 0320 	orrmi.w	r3, r3, #32
 800feba:	6023      	strmi	r3, [r4, #0]
 800febc:	b91e      	cbnz	r6, 800fec6 <_printf_i+0x196>
 800febe:	6823      	ldr	r3, [r4, #0]
 800fec0:	f023 0320 	bic.w	r3, r3, #32
 800fec4:	6023      	str	r3, [r4, #0]
 800fec6:	2310      	movs	r3, #16
 800fec8:	e7b0      	b.n	800fe2c <_printf_i+0xfc>
 800feca:	6823      	ldr	r3, [r4, #0]
 800fecc:	f043 0320 	orr.w	r3, r3, #32
 800fed0:	6023      	str	r3, [r4, #0]
 800fed2:	2378      	movs	r3, #120	; 0x78
 800fed4:	4828      	ldr	r0, [pc, #160]	; (800ff78 <_printf_i+0x248>)
 800fed6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800feda:	e7e3      	b.n	800fea4 <_printf_i+0x174>
 800fedc:	0659      	lsls	r1, r3, #25
 800fede:	bf48      	it	mi
 800fee0:	b2b6      	uxthmi	r6, r6
 800fee2:	e7e6      	b.n	800feb2 <_printf_i+0x182>
 800fee4:	4615      	mov	r5, r2
 800fee6:	e7bb      	b.n	800fe60 <_printf_i+0x130>
 800fee8:	682b      	ldr	r3, [r5, #0]
 800feea:	6826      	ldr	r6, [r4, #0]
 800feec:	6961      	ldr	r1, [r4, #20]
 800feee:	1d18      	adds	r0, r3, #4
 800fef0:	6028      	str	r0, [r5, #0]
 800fef2:	0635      	lsls	r5, r6, #24
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	d501      	bpl.n	800fefc <_printf_i+0x1cc>
 800fef8:	6019      	str	r1, [r3, #0]
 800fefa:	e002      	b.n	800ff02 <_printf_i+0x1d2>
 800fefc:	0670      	lsls	r0, r6, #25
 800fefe:	d5fb      	bpl.n	800fef8 <_printf_i+0x1c8>
 800ff00:	8019      	strh	r1, [r3, #0]
 800ff02:	2300      	movs	r3, #0
 800ff04:	6123      	str	r3, [r4, #16]
 800ff06:	4615      	mov	r5, r2
 800ff08:	e7ba      	b.n	800fe80 <_printf_i+0x150>
 800ff0a:	682b      	ldr	r3, [r5, #0]
 800ff0c:	1d1a      	adds	r2, r3, #4
 800ff0e:	602a      	str	r2, [r5, #0]
 800ff10:	681d      	ldr	r5, [r3, #0]
 800ff12:	6862      	ldr	r2, [r4, #4]
 800ff14:	2100      	movs	r1, #0
 800ff16:	4628      	mov	r0, r5
 800ff18:	f7f0 f9ea 	bl	80002f0 <memchr>
 800ff1c:	b108      	cbz	r0, 800ff22 <_printf_i+0x1f2>
 800ff1e:	1b40      	subs	r0, r0, r5
 800ff20:	6060      	str	r0, [r4, #4]
 800ff22:	6863      	ldr	r3, [r4, #4]
 800ff24:	6123      	str	r3, [r4, #16]
 800ff26:	2300      	movs	r3, #0
 800ff28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff2c:	e7a8      	b.n	800fe80 <_printf_i+0x150>
 800ff2e:	6923      	ldr	r3, [r4, #16]
 800ff30:	462a      	mov	r2, r5
 800ff32:	4649      	mov	r1, r9
 800ff34:	4640      	mov	r0, r8
 800ff36:	47d0      	blx	sl
 800ff38:	3001      	adds	r0, #1
 800ff3a:	d0ab      	beq.n	800fe94 <_printf_i+0x164>
 800ff3c:	6823      	ldr	r3, [r4, #0]
 800ff3e:	079b      	lsls	r3, r3, #30
 800ff40:	d413      	bmi.n	800ff6a <_printf_i+0x23a>
 800ff42:	68e0      	ldr	r0, [r4, #12]
 800ff44:	9b03      	ldr	r3, [sp, #12]
 800ff46:	4298      	cmp	r0, r3
 800ff48:	bfb8      	it	lt
 800ff4a:	4618      	movlt	r0, r3
 800ff4c:	e7a4      	b.n	800fe98 <_printf_i+0x168>
 800ff4e:	2301      	movs	r3, #1
 800ff50:	4632      	mov	r2, r6
 800ff52:	4649      	mov	r1, r9
 800ff54:	4640      	mov	r0, r8
 800ff56:	47d0      	blx	sl
 800ff58:	3001      	adds	r0, #1
 800ff5a:	d09b      	beq.n	800fe94 <_printf_i+0x164>
 800ff5c:	3501      	adds	r5, #1
 800ff5e:	68e3      	ldr	r3, [r4, #12]
 800ff60:	9903      	ldr	r1, [sp, #12]
 800ff62:	1a5b      	subs	r3, r3, r1
 800ff64:	42ab      	cmp	r3, r5
 800ff66:	dcf2      	bgt.n	800ff4e <_printf_i+0x21e>
 800ff68:	e7eb      	b.n	800ff42 <_printf_i+0x212>
 800ff6a:	2500      	movs	r5, #0
 800ff6c:	f104 0619 	add.w	r6, r4, #25
 800ff70:	e7f5      	b.n	800ff5e <_printf_i+0x22e>
 800ff72:	bf00      	nop
 800ff74:	08010965 	.word	0x08010965
 800ff78:	08010976 	.word	0x08010976

0800ff7c <_sbrk_r>:
 800ff7c:	b538      	push	{r3, r4, r5, lr}
 800ff7e:	4d06      	ldr	r5, [pc, #24]	; (800ff98 <_sbrk_r+0x1c>)
 800ff80:	2300      	movs	r3, #0
 800ff82:	4604      	mov	r4, r0
 800ff84:	4608      	mov	r0, r1
 800ff86:	602b      	str	r3, [r5, #0]
 800ff88:	f7f3 ffa0 	bl	8003ecc <_sbrk>
 800ff8c:	1c43      	adds	r3, r0, #1
 800ff8e:	d102      	bne.n	800ff96 <_sbrk_r+0x1a>
 800ff90:	682b      	ldr	r3, [r5, #0]
 800ff92:	b103      	cbz	r3, 800ff96 <_sbrk_r+0x1a>
 800ff94:	6023      	str	r3, [r4, #0]
 800ff96:	bd38      	pop	{r3, r4, r5, pc}
 800ff98:	240e0044 	.word	0x240e0044

0800ff9c <__sread>:
 800ff9c:	b510      	push	{r4, lr}
 800ff9e:	460c      	mov	r4, r1
 800ffa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffa4:	f000 f960 	bl	8010268 <_read_r>
 800ffa8:	2800      	cmp	r0, #0
 800ffaa:	bfab      	itete	ge
 800ffac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ffae:	89a3      	ldrhlt	r3, [r4, #12]
 800ffb0:	181b      	addge	r3, r3, r0
 800ffb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ffb6:	bfac      	ite	ge
 800ffb8:	6563      	strge	r3, [r4, #84]	; 0x54
 800ffba:	81a3      	strhlt	r3, [r4, #12]
 800ffbc:	bd10      	pop	{r4, pc}

0800ffbe <__swrite>:
 800ffbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffc2:	461f      	mov	r7, r3
 800ffc4:	898b      	ldrh	r3, [r1, #12]
 800ffc6:	05db      	lsls	r3, r3, #23
 800ffc8:	4605      	mov	r5, r0
 800ffca:	460c      	mov	r4, r1
 800ffcc:	4616      	mov	r6, r2
 800ffce:	d505      	bpl.n	800ffdc <__swrite+0x1e>
 800ffd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffd4:	2302      	movs	r3, #2
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	f000 f928 	bl	801022c <_lseek_r>
 800ffdc:	89a3      	ldrh	r3, [r4, #12]
 800ffde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ffe6:	81a3      	strh	r3, [r4, #12]
 800ffe8:	4632      	mov	r2, r6
 800ffea:	463b      	mov	r3, r7
 800ffec:	4628      	mov	r0, r5
 800ffee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fff2:	f000 b869 	b.w	80100c8 <_write_r>

0800fff6 <__sseek>:
 800fff6:	b510      	push	{r4, lr}
 800fff8:	460c      	mov	r4, r1
 800fffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fffe:	f000 f915 	bl	801022c <_lseek_r>
 8010002:	1c43      	adds	r3, r0, #1
 8010004:	89a3      	ldrh	r3, [r4, #12]
 8010006:	bf15      	itete	ne
 8010008:	6560      	strne	r0, [r4, #84]	; 0x54
 801000a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801000e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010012:	81a3      	strheq	r3, [r4, #12]
 8010014:	bf18      	it	ne
 8010016:	81a3      	strhne	r3, [r4, #12]
 8010018:	bd10      	pop	{r4, pc}

0801001a <__sclose>:
 801001a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801001e:	f000 b8d3 	b.w	80101c8 <_close_r>
	...

08010024 <__swbuf_r>:
 8010024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010026:	460e      	mov	r6, r1
 8010028:	4614      	mov	r4, r2
 801002a:	4605      	mov	r5, r0
 801002c:	b118      	cbz	r0, 8010036 <__swbuf_r+0x12>
 801002e:	6983      	ldr	r3, [r0, #24]
 8010030:	b90b      	cbnz	r3, 8010036 <__swbuf_r+0x12>
 8010032:	f7ff fac7 	bl	800f5c4 <__sinit>
 8010036:	4b21      	ldr	r3, [pc, #132]	; (80100bc <__swbuf_r+0x98>)
 8010038:	429c      	cmp	r4, r3
 801003a:	d12b      	bne.n	8010094 <__swbuf_r+0x70>
 801003c:	686c      	ldr	r4, [r5, #4]
 801003e:	69a3      	ldr	r3, [r4, #24]
 8010040:	60a3      	str	r3, [r4, #8]
 8010042:	89a3      	ldrh	r3, [r4, #12]
 8010044:	071a      	lsls	r2, r3, #28
 8010046:	d52f      	bpl.n	80100a8 <__swbuf_r+0x84>
 8010048:	6923      	ldr	r3, [r4, #16]
 801004a:	b36b      	cbz	r3, 80100a8 <__swbuf_r+0x84>
 801004c:	6923      	ldr	r3, [r4, #16]
 801004e:	6820      	ldr	r0, [r4, #0]
 8010050:	1ac0      	subs	r0, r0, r3
 8010052:	6963      	ldr	r3, [r4, #20]
 8010054:	b2f6      	uxtb	r6, r6
 8010056:	4283      	cmp	r3, r0
 8010058:	4637      	mov	r7, r6
 801005a:	dc04      	bgt.n	8010066 <__swbuf_r+0x42>
 801005c:	4621      	mov	r1, r4
 801005e:	4628      	mov	r0, r5
 8010060:	f7ff fa1c 	bl	800f49c <_fflush_r>
 8010064:	bb30      	cbnz	r0, 80100b4 <__swbuf_r+0x90>
 8010066:	68a3      	ldr	r3, [r4, #8]
 8010068:	3b01      	subs	r3, #1
 801006a:	60a3      	str	r3, [r4, #8]
 801006c:	6823      	ldr	r3, [r4, #0]
 801006e:	1c5a      	adds	r2, r3, #1
 8010070:	6022      	str	r2, [r4, #0]
 8010072:	701e      	strb	r6, [r3, #0]
 8010074:	6963      	ldr	r3, [r4, #20]
 8010076:	3001      	adds	r0, #1
 8010078:	4283      	cmp	r3, r0
 801007a:	d004      	beq.n	8010086 <__swbuf_r+0x62>
 801007c:	89a3      	ldrh	r3, [r4, #12]
 801007e:	07db      	lsls	r3, r3, #31
 8010080:	d506      	bpl.n	8010090 <__swbuf_r+0x6c>
 8010082:	2e0a      	cmp	r6, #10
 8010084:	d104      	bne.n	8010090 <__swbuf_r+0x6c>
 8010086:	4621      	mov	r1, r4
 8010088:	4628      	mov	r0, r5
 801008a:	f7ff fa07 	bl	800f49c <_fflush_r>
 801008e:	b988      	cbnz	r0, 80100b4 <__swbuf_r+0x90>
 8010090:	4638      	mov	r0, r7
 8010092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010094:	4b0a      	ldr	r3, [pc, #40]	; (80100c0 <__swbuf_r+0x9c>)
 8010096:	429c      	cmp	r4, r3
 8010098:	d101      	bne.n	801009e <__swbuf_r+0x7a>
 801009a:	68ac      	ldr	r4, [r5, #8]
 801009c:	e7cf      	b.n	801003e <__swbuf_r+0x1a>
 801009e:	4b09      	ldr	r3, [pc, #36]	; (80100c4 <__swbuf_r+0xa0>)
 80100a0:	429c      	cmp	r4, r3
 80100a2:	bf08      	it	eq
 80100a4:	68ec      	ldreq	r4, [r5, #12]
 80100a6:	e7ca      	b.n	801003e <__swbuf_r+0x1a>
 80100a8:	4621      	mov	r1, r4
 80100aa:	4628      	mov	r0, r5
 80100ac:	f000 f81e 	bl	80100ec <__swsetup_r>
 80100b0:	2800      	cmp	r0, #0
 80100b2:	d0cb      	beq.n	801004c <__swbuf_r+0x28>
 80100b4:	f04f 37ff 	mov.w	r7, #4294967295
 80100b8:	e7ea      	b.n	8010090 <__swbuf_r+0x6c>
 80100ba:	bf00      	nop
 80100bc:	08010914 	.word	0x08010914
 80100c0:	08010934 	.word	0x08010934
 80100c4:	080108f4 	.word	0x080108f4

080100c8 <_write_r>:
 80100c8:	b538      	push	{r3, r4, r5, lr}
 80100ca:	4d07      	ldr	r5, [pc, #28]	; (80100e8 <_write_r+0x20>)
 80100cc:	4604      	mov	r4, r0
 80100ce:	4608      	mov	r0, r1
 80100d0:	4611      	mov	r1, r2
 80100d2:	2200      	movs	r2, #0
 80100d4:	602a      	str	r2, [r5, #0]
 80100d6:	461a      	mov	r2, r3
 80100d8:	f7f2 ff5c 	bl	8002f94 <_write>
 80100dc:	1c43      	adds	r3, r0, #1
 80100de:	d102      	bne.n	80100e6 <_write_r+0x1e>
 80100e0:	682b      	ldr	r3, [r5, #0]
 80100e2:	b103      	cbz	r3, 80100e6 <_write_r+0x1e>
 80100e4:	6023      	str	r3, [r4, #0]
 80100e6:	bd38      	pop	{r3, r4, r5, pc}
 80100e8:	240e0044 	.word	0x240e0044

080100ec <__swsetup_r>:
 80100ec:	4b32      	ldr	r3, [pc, #200]	; (80101b8 <__swsetup_r+0xcc>)
 80100ee:	b570      	push	{r4, r5, r6, lr}
 80100f0:	681d      	ldr	r5, [r3, #0]
 80100f2:	4606      	mov	r6, r0
 80100f4:	460c      	mov	r4, r1
 80100f6:	b125      	cbz	r5, 8010102 <__swsetup_r+0x16>
 80100f8:	69ab      	ldr	r3, [r5, #24]
 80100fa:	b913      	cbnz	r3, 8010102 <__swsetup_r+0x16>
 80100fc:	4628      	mov	r0, r5
 80100fe:	f7ff fa61 	bl	800f5c4 <__sinit>
 8010102:	4b2e      	ldr	r3, [pc, #184]	; (80101bc <__swsetup_r+0xd0>)
 8010104:	429c      	cmp	r4, r3
 8010106:	d10f      	bne.n	8010128 <__swsetup_r+0x3c>
 8010108:	686c      	ldr	r4, [r5, #4]
 801010a:	89a3      	ldrh	r3, [r4, #12]
 801010c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010110:	0719      	lsls	r1, r3, #28
 8010112:	d42c      	bmi.n	801016e <__swsetup_r+0x82>
 8010114:	06dd      	lsls	r5, r3, #27
 8010116:	d411      	bmi.n	801013c <__swsetup_r+0x50>
 8010118:	2309      	movs	r3, #9
 801011a:	6033      	str	r3, [r6, #0]
 801011c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010120:	81a3      	strh	r3, [r4, #12]
 8010122:	f04f 30ff 	mov.w	r0, #4294967295
 8010126:	e03e      	b.n	80101a6 <__swsetup_r+0xba>
 8010128:	4b25      	ldr	r3, [pc, #148]	; (80101c0 <__swsetup_r+0xd4>)
 801012a:	429c      	cmp	r4, r3
 801012c:	d101      	bne.n	8010132 <__swsetup_r+0x46>
 801012e:	68ac      	ldr	r4, [r5, #8]
 8010130:	e7eb      	b.n	801010a <__swsetup_r+0x1e>
 8010132:	4b24      	ldr	r3, [pc, #144]	; (80101c4 <__swsetup_r+0xd8>)
 8010134:	429c      	cmp	r4, r3
 8010136:	bf08      	it	eq
 8010138:	68ec      	ldreq	r4, [r5, #12]
 801013a:	e7e6      	b.n	801010a <__swsetup_r+0x1e>
 801013c:	0758      	lsls	r0, r3, #29
 801013e:	d512      	bpl.n	8010166 <__swsetup_r+0x7a>
 8010140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010142:	b141      	cbz	r1, 8010156 <__swsetup_r+0x6a>
 8010144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010148:	4299      	cmp	r1, r3
 801014a:	d002      	beq.n	8010152 <__swsetup_r+0x66>
 801014c:	4630      	mov	r0, r6
 801014e:	f7ff fb47 	bl	800f7e0 <_free_r>
 8010152:	2300      	movs	r3, #0
 8010154:	6363      	str	r3, [r4, #52]	; 0x34
 8010156:	89a3      	ldrh	r3, [r4, #12]
 8010158:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801015c:	81a3      	strh	r3, [r4, #12]
 801015e:	2300      	movs	r3, #0
 8010160:	6063      	str	r3, [r4, #4]
 8010162:	6923      	ldr	r3, [r4, #16]
 8010164:	6023      	str	r3, [r4, #0]
 8010166:	89a3      	ldrh	r3, [r4, #12]
 8010168:	f043 0308 	orr.w	r3, r3, #8
 801016c:	81a3      	strh	r3, [r4, #12]
 801016e:	6923      	ldr	r3, [r4, #16]
 8010170:	b94b      	cbnz	r3, 8010186 <__swsetup_r+0x9a>
 8010172:	89a3      	ldrh	r3, [r4, #12]
 8010174:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801017c:	d003      	beq.n	8010186 <__swsetup_r+0x9a>
 801017e:	4621      	mov	r1, r4
 8010180:	4630      	mov	r0, r6
 8010182:	f7ff fae5 	bl	800f750 <__smakebuf_r>
 8010186:	89a0      	ldrh	r0, [r4, #12]
 8010188:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801018c:	f010 0301 	ands.w	r3, r0, #1
 8010190:	d00a      	beq.n	80101a8 <__swsetup_r+0xbc>
 8010192:	2300      	movs	r3, #0
 8010194:	60a3      	str	r3, [r4, #8]
 8010196:	6963      	ldr	r3, [r4, #20]
 8010198:	425b      	negs	r3, r3
 801019a:	61a3      	str	r3, [r4, #24]
 801019c:	6923      	ldr	r3, [r4, #16]
 801019e:	b943      	cbnz	r3, 80101b2 <__swsetup_r+0xc6>
 80101a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80101a4:	d1ba      	bne.n	801011c <__swsetup_r+0x30>
 80101a6:	bd70      	pop	{r4, r5, r6, pc}
 80101a8:	0781      	lsls	r1, r0, #30
 80101aa:	bf58      	it	pl
 80101ac:	6963      	ldrpl	r3, [r4, #20]
 80101ae:	60a3      	str	r3, [r4, #8]
 80101b0:	e7f4      	b.n	801019c <__swsetup_r+0xb0>
 80101b2:	2000      	movs	r0, #0
 80101b4:	e7f7      	b.n	80101a6 <__swsetup_r+0xba>
 80101b6:	bf00      	nop
 80101b8:	24000054 	.word	0x24000054
 80101bc:	08010914 	.word	0x08010914
 80101c0:	08010934 	.word	0x08010934
 80101c4:	080108f4 	.word	0x080108f4

080101c8 <_close_r>:
 80101c8:	b538      	push	{r3, r4, r5, lr}
 80101ca:	4d06      	ldr	r5, [pc, #24]	; (80101e4 <_close_r+0x1c>)
 80101cc:	2300      	movs	r3, #0
 80101ce:	4604      	mov	r4, r0
 80101d0:	4608      	mov	r0, r1
 80101d2:	602b      	str	r3, [r5, #0]
 80101d4:	f7f2 ff0a 	bl	8002fec <_close>
 80101d8:	1c43      	adds	r3, r0, #1
 80101da:	d102      	bne.n	80101e2 <_close_r+0x1a>
 80101dc:	682b      	ldr	r3, [r5, #0]
 80101de:	b103      	cbz	r3, 80101e2 <_close_r+0x1a>
 80101e0:	6023      	str	r3, [r4, #0]
 80101e2:	bd38      	pop	{r3, r4, r5, pc}
 80101e4:	240e0044 	.word	0x240e0044

080101e8 <_fstat_r>:
 80101e8:	b538      	push	{r3, r4, r5, lr}
 80101ea:	4d07      	ldr	r5, [pc, #28]	; (8010208 <_fstat_r+0x20>)
 80101ec:	2300      	movs	r3, #0
 80101ee:	4604      	mov	r4, r0
 80101f0:	4608      	mov	r0, r1
 80101f2:	4611      	mov	r1, r2
 80101f4:	602b      	str	r3, [r5, #0]
 80101f6:	f7f2 ff39 	bl	800306c <_fstat>
 80101fa:	1c43      	adds	r3, r0, #1
 80101fc:	d102      	bne.n	8010204 <_fstat_r+0x1c>
 80101fe:	682b      	ldr	r3, [r5, #0]
 8010200:	b103      	cbz	r3, 8010204 <_fstat_r+0x1c>
 8010202:	6023      	str	r3, [r4, #0]
 8010204:	bd38      	pop	{r3, r4, r5, pc}
 8010206:	bf00      	nop
 8010208:	240e0044 	.word	0x240e0044

0801020c <_isatty_r>:
 801020c:	b538      	push	{r3, r4, r5, lr}
 801020e:	4d06      	ldr	r5, [pc, #24]	; (8010228 <_isatty_r+0x1c>)
 8010210:	2300      	movs	r3, #0
 8010212:	4604      	mov	r4, r0
 8010214:	4608      	mov	r0, r1
 8010216:	602b      	str	r3, [r5, #0]
 8010218:	f7f2 fea6 	bl	8002f68 <_isatty>
 801021c:	1c43      	adds	r3, r0, #1
 801021e:	d102      	bne.n	8010226 <_isatty_r+0x1a>
 8010220:	682b      	ldr	r3, [r5, #0]
 8010222:	b103      	cbz	r3, 8010226 <_isatty_r+0x1a>
 8010224:	6023      	str	r3, [r4, #0]
 8010226:	bd38      	pop	{r3, r4, r5, pc}
 8010228:	240e0044 	.word	0x240e0044

0801022c <_lseek_r>:
 801022c:	b538      	push	{r3, r4, r5, lr}
 801022e:	4d07      	ldr	r5, [pc, #28]	; (801024c <_lseek_r+0x20>)
 8010230:	4604      	mov	r4, r0
 8010232:	4608      	mov	r0, r1
 8010234:	4611      	mov	r1, r2
 8010236:	2200      	movs	r2, #0
 8010238:	602a      	str	r2, [r5, #0]
 801023a:	461a      	mov	r2, r3
 801023c:	f7f3 fe38 	bl	8003eb0 <_lseek>
 8010240:	1c43      	adds	r3, r0, #1
 8010242:	d102      	bne.n	801024a <_lseek_r+0x1e>
 8010244:	682b      	ldr	r3, [r5, #0]
 8010246:	b103      	cbz	r3, 801024a <_lseek_r+0x1e>
 8010248:	6023      	str	r3, [r4, #0]
 801024a:	bd38      	pop	{r3, r4, r5, pc}
 801024c:	240e0044 	.word	0x240e0044

08010250 <__malloc_lock>:
 8010250:	4801      	ldr	r0, [pc, #4]	; (8010258 <__malloc_lock+0x8>)
 8010252:	f7ff ba55 	b.w	800f700 <__retarget_lock_acquire_recursive>
 8010256:	bf00      	nop
 8010258:	240e0038 	.word	0x240e0038

0801025c <__malloc_unlock>:
 801025c:	4801      	ldr	r0, [pc, #4]	; (8010264 <__malloc_unlock+0x8>)
 801025e:	f7ff ba50 	b.w	800f702 <__retarget_lock_release_recursive>
 8010262:	bf00      	nop
 8010264:	240e0038 	.word	0x240e0038

08010268 <_read_r>:
 8010268:	b538      	push	{r3, r4, r5, lr}
 801026a:	4d07      	ldr	r5, [pc, #28]	; (8010288 <_read_r+0x20>)
 801026c:	4604      	mov	r4, r0
 801026e:	4608      	mov	r0, r1
 8010270:	4611      	mov	r1, r2
 8010272:	2200      	movs	r2, #0
 8010274:	602a      	str	r2, [r5, #0]
 8010276:	461a      	mov	r2, r3
 8010278:	f7f2 fed0 	bl	800301c <_read>
 801027c:	1c43      	adds	r3, r0, #1
 801027e:	d102      	bne.n	8010286 <_read_r+0x1e>
 8010280:	682b      	ldr	r3, [r5, #0]
 8010282:	b103      	cbz	r3, 8010286 <_read_r+0x1e>
 8010284:	6023      	str	r3, [r4, #0]
 8010286:	bd38      	pop	{r3, r4, r5, pc}
 8010288:	240e0044 	.word	0x240e0044

0801028c <_init>:
 801028c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801028e:	bf00      	nop
 8010290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010292:	bc08      	pop	{r3}
 8010294:	469e      	mov	lr, r3
 8010296:	4770      	bx	lr

08010298 <_fini>:
 8010298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801029a:	bf00      	nop
 801029c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801029e:	bc08      	pop	{r3}
 80102a0:	469e      	mov	lr, r3
 80102a2:	4770      	bx	lr
