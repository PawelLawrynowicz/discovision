
camera_bsp_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd14  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  0800ffc0  0800ffc0  0001ffc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801062c  0801062c  0002062c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010634  08010634  00020634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010638  08010638  00020638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002f8  24000000  0801063c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dc8  240002f8  08010934  000302f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240010c0  08010934  000310c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027bf1  00000000  00000000  00030326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005104  00000000  00000000  00057f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a50  00000000  00000000  0005d020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001828  00000000  00000000  0005ea70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000394b4  00000000  00000000  00060298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029181  00000000  00000000  0009974c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00152b6c  00000000  00000000  000c28cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00215439  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007170  00000000  00000000  0021548c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	240002f8 	.word	0x240002f8
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800ffa8 	.word	0x0800ffa8

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	240002fc 	.word	0x240002fc
 80002e8:	0800ffa8 	.word	0x0800ffa8

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */
//
  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_DCMI_Init+0x60>)
 80005f6:	4a17      	ldr	r2, [pc, #92]	; (8000654 <MX_DCMI_Init+0x64>)
 80005f8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_DCMI_Init+0x60>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_DCMI_Init+0x60>)
 8000602:	2220      	movs	r2, #32
 8000604:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_DCMI_Init+0x60>)
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 800060c:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_DCMI_Init+0x60>)
 800060e:	2240      	movs	r2, #64	; 0x40
 8000610:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_DCMI_Init+0x60>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <MX_DCMI_Init+0x60>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_DCMI_Init+0x60>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_DCMI_Init+0x60>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_DCMI_Init+0x60>)
 800062c:	2200      	movs	r2, #0
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <MX_DCMI_Init+0x60>)
 8000632:	2200      	movs	r2, #0
 8000634:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_DCMI_Init+0x60>)
 8000638:	2200      	movs	r2, #0
 800063a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_DCMI_Init+0x60>)
 800063e:	f004 f8a9 	bl	8004794 <HAL_DCMI_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000648:	f001 f88a 	bl	8001760 <Error_Handler>
//  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
//  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
//  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
  /* USER CODE END DCMI_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	24000314 	.word	0x24000314
 8000654:	48020000 	.word	0x48020000

08000658 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08e      	sub	sp, #56	; 0x38
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a76      	ldr	r2, [pc, #472]	; (8000850 <HAL_DCMI_MspInit+0x1f8>)
 8000676:	4293      	cmp	r3, r2
 8000678:	f040 80e5 	bne.w	8000846 <HAL_DCMI_MspInit+0x1ee>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */
//
  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800067c:	4b75      	ldr	r3, [pc, #468]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 800067e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000682:	4a74      	ldr	r2, [pc, #464]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 800068c:	4b71      	ldr	r3, [pc, #452]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 800068e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	623b      	str	r3, [r7, #32]
 8000698:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b6e      	ldr	r3, [pc, #440]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 800069c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006a0:	4a6c      	ldr	r2, [pc, #432]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006a2:	f043 0302 	orr.w	r3, r3, #2
 80006a6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006aa:	4b6a      	ldr	r3, [pc, #424]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006b0:	f003 0302 	and.w	r3, r3, #2
 80006b4:	61fb      	str	r3, [r7, #28]
 80006b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80006b8:	4b66      	ldr	r3, [pc, #408]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006be:	4a65      	ldr	r2, [pc, #404]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006c8:	4b62      	ldr	r3, [pc, #392]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	4b5f      	ldr	r3, [pc, #380]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006dc:	4a5d      	ldr	r2, [pc, #372]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006e6:	4b5b      	ldr	r3, [pc, #364]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ec:	f003 0308 	and.w	r3, r3, #8
 80006f0:	617b      	str	r3, [r7, #20]
 80006f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f4:	4b57      	ldr	r3, [pc, #348]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006fa:	4a56      	ldr	r2, [pc, #344]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000704:	4b53      	ldr	r3, [pc, #332]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 8000706:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b50      	ldr	r3, [pc, #320]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 8000714:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000718:	4a4e      	ldr	r2, [pc, #312]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000722:	4b4c      	ldr	r3, [pc, #304]	; (8000854 <HAL_DCMI_MspInit+0x1fc>)
 8000724:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7;
 8000730:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000742:	230d      	movs	r3, #13
 8000744:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074a:	4619      	mov	r1, r3
 800074c:	4842      	ldr	r0, [pc, #264]	; (8000858 <HAL_DCMI_MspInit+0x200>)
 800074e:	f008 fa5b 	bl	8008c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000764:	230d      	movs	r3, #13
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076c:	4619      	mov	r1, r3
 800076e:	483b      	ldr	r0, [pc, #236]	; (800085c <HAL_DCMI_MspInit+0x204>)
 8000770:	f008 fa4a 	bl	8008c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000774:	2308      	movs	r3, #8
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000784:	230d      	movs	r3, #13
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078c:	4619      	mov	r1, r3
 800078e:	4834      	ldr	r0, [pc, #208]	; (8000860 <HAL_DCMI_MspInit+0x208>)
 8000790:	f008 fa3a 	bl	8008c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6;
 8000794:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007a6:	230d      	movs	r3, #13
 80007a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	4619      	mov	r1, r3
 80007b0:	482c      	ldr	r0, [pc, #176]	; (8000864 <HAL_DCMI_MspInit+0x20c>)
 80007b2:	f008 fa29 	bl	8008c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80007b6:	2350      	movs	r3, #80	; 0x50
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007c6:	230d      	movs	r3, #13
 80007c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	4619      	mov	r1, r3
 80007d0:	4825      	ldr	r0, [pc, #148]	; (8000868 <HAL_DCMI_MspInit+0x210>)
 80007d2:	f008 fa19 	bl	8008c08 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007d8:	4a25      	ldr	r2, [pc, #148]	; (8000870 <HAL_DCMI_MspInit+0x218>)
 80007da:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007de:	224b      	movs	r2, #75	; 0x4b
 80007e0:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007e2:	4b22      	ldr	r3, [pc, #136]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80007e8:	4b20      	ldr	r3, [pc, #128]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007f4:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <HAL_DCMI_MspInit+0x214>)
 80007f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007fc:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <HAL_DCMI_MspInit+0x214>)
 8000800:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000804:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <HAL_DCMI_MspInit+0x214>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <HAL_DCMI_MspInit+0x214>)
 800080e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000812:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_DCMI_MspInit+0x214>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800081a:	4814      	ldr	r0, [pc, #80]	; (800086c <HAL_DCMI_MspInit+0x214>)
 800081c:	f004 fa88 	bl	8004d30 <HAL_DMA_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <HAL_DCMI_MspInit+0x1d2>
    {
      Error_Handler();
 8000826:	f000 ff9b 	bl	8001760 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a0f      	ldr	r2, [pc, #60]	; (800086c <HAL_DCMI_MspInit+0x214>)
 800082e:	649a      	str	r2, [r3, #72]	; 0x48
 8000830:	4a0e      	ldr	r2, [pc, #56]	; (800086c <HAL_DCMI_MspInit+0x214>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	204e      	movs	r0, #78	; 0x4e
 800083c:	f003 ff75 	bl	800472a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8000840:	204e      	movs	r0, #78	; 0x4e
 8000842:	f003 ff8c 	bl	800475e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */
//
  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000846:	bf00      	nop
 8000848:	3738      	adds	r7, #56	; 0x38
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	48020000 	.word	0x48020000
 8000854:	58024400 	.word	0x58024400
 8000858:	58020400 	.word	0x58020400
 800085c:	58021800 	.word	0x58021800
 8000860:	58020c00 	.word	0x58020c00
 8000864:	58020800 	.word	0x58020800
 8000868:	58020000 	.word	0x58020000
 800086c:	24000364 	.word	0x24000364
 8000870:	40020428 	.word	0x40020428

08000874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_DMA_Init+0x3c>)
 800087c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000880:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <MX_DMA_Init+0x3c>)
 8000882:	f043 0302 	orr.w	r3, r3, #2
 8000886:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_DMA_Init+0x3c>)
 800088c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000890:	f003 0302 	and.w	r3, r3, #2
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	2039      	movs	r0, #57	; 0x39
 800089e:	f003 ff44 	bl	800472a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a2:	2039      	movs	r0, #57	; 0x39
 80008a4:	f003 ff5b 	bl	800475e <HAL_NVIC_EnableIRQ>

}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58024400 	.word	0x58024400

080008b4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008ba:	4a1b      	ldr	r2, [pc, #108]	; (8000928 <MX_DMA2D_Init+0x74>)
 80008bc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_PFC;
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008c4:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008da:	2202      	movs	r2, #2
 80008dc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_INVERTED_ALPHA;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008fc:	4809      	ldr	r0, [pc, #36]	; (8000924 <MX_DMA2D_Init+0x70>)
 80008fe:	f007 f8f7 	bl	8007af0 <HAL_DMA2D_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_DMA2D_Init+0x58>
  {
    Error_Handler();
 8000908:	f000 ff2a 	bl	8001760 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800090c:	2101      	movs	r1, #1
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_DMA2D_Init+0x70>)
 8000910:	f007 fb76 	bl	8008000 <HAL_DMA2D_ConfigLayer>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_DMA2D_Init+0x6a>
  {
    Error_Handler();
 800091a:	f000 ff21 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	240003dc 	.word	0x240003dc
 8000928:	52001000 	.word	0x52001000

0800092c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_DMA2D_MspInit+0x48>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d116      	bne.n	800096c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_DMA2D_MspInit+0x4c>)
 8000940:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000944:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <HAL_DMA2D_MspInit+0x4c>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_DMA2D_MspInit+0x4c>)
 8000950:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000954:	f003 0310 	and.w	r3, r3, #16
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	205a      	movs	r0, #90	; 0x5a
 8000962:	f003 fee2 	bl	800472a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000966:	205a      	movs	r0, #90	; 0x5a
 8000968:	f003 fef9 	bl	800475e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	52001000 	.word	0x52001000
 8000978:	58024400 	.word	0x58024400

0800097c <DMA2D_Convert>:
  }
}

/* USER CODE BEGIN 1 */
void DMA2D_Convert(uint32_t* source, uint32_t* destination)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af02      	add	r7, sp, #8
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  status = HAL_DMA2D_Start(&hdma2d, (uint32_t)source,
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <DMA2D_Convert+0x4c>)
 8000996:	f007 f90f 	bl	8007bb8 <HAL_DMA2D_Start>
 800099a:	4603      	mov	r3, r0
 800099c:	73fb      	strb	r3, [r7, #15]
                        (uint32_t)destination, 480, 272);
  if (status != HAL_OK) {
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <DMA2D_Convert+0x2c>
    Error_Handler();
 80009a4:	f000 fedc 	bl	8001760 <Error_Handler>
  }

  status = HAL_DMA2D_PollForTransfer(&hdma2d, 1000);
 80009a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009ac:	4806      	ldr	r0, [pc, #24]	; (80009c8 <DMA2D_Convert+0x4c>)
 80009ae:	f007 f92e 	bl	8007c0e <HAL_DMA2D_PollForTransfer>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73fb      	strb	r3, [r7, #15]
  if (status != HAL_OK) {
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <DMA2D_Convert+0x44>
    Error_Handler();
 80009bc:	f000 fed0 	bl	8001760 <Error_Handler>
  }
}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	240003dc 	.word	0x240003dc

080009cc <drawVLine>:
/* Includes ------------------------------------------------------------------*/
#include "draw.h"

void drawVLine(uint32_t *buffer, int32_t x, int32_t y_start, int32_t y_end){
 80009cc:	b480      	push	{r7}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	603b      	str	r3, [r7, #0]
	if(y_start<0){
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	da01      	bge.n	80009e4 <drawVLine+0x18>
		y_start=0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
	}
	if(y_end>LTDC_HEIGHT){
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80009ea:	dd02      	ble.n	80009f2 <drawVLine+0x26>
		y_end=LTDC_HEIGHT;
 80009ec:	f44f 7388 	mov.w	r3, #272	; 0x110
 80009f0:	603b      	str	r3, [r7, #0]
	}
//	for rgb565
//	for(uint32_t i = y_start; i<y_end; i++){
//			buffer[(x+i*LTDC_WIDTH)/2] = COLOR;
//	}
	for(uint32_t i = y_start; i<y_end; i++){
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	e01f      	b.n	8000a38 <drawVLine+0x6c>
			buffer[x+i*LTDC_WIDTH] = COLOR;
 80009f8:	697a      	ldr	r2, [r7, #20]
 80009fa:	4613      	mov	r3, r2
 80009fc:	011b      	lsls	r3, r3, #4
 80009fe:	1a9b      	subs	r3, r3, r2
 8000a00:	015b      	lsls	r3, r3, #5
 8000a02:	461a      	mov	r2, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	4413      	add	r3, r2
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000a12:	601a      	str	r2, [r3, #0]
			buffer[1+x+i*LTDC_WIDTH] = COLOR;
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	4613      	mov	r3, r2
 8000a18:	011b      	lsls	r3, r3, #4
 8000a1a:	1a9b      	subs	r3, r3, r2
 8000a1c:	015b      	lsls	r3, r3, #5
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	4413      	add	r3, r2
 8000a24:	3301      	adds	r3, #1
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000a30:	601a      	str	r2, [r3, #0]
	for(uint32_t i = y_start; i<y_end; i++){
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	697a      	ldr	r2, [r7, #20]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d3db      	bcc.n	80009f8 <drawVLine+0x2c>
	}
}
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	371c      	adds	r7, #28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <drawHLine>:
void drawHLine(uint32_t *buffer, int32_t x_start, int32_t x_end, int32_t y){
 8000a4e:	b480      	push	{r7}
 8000a50:	b087      	sub	sp, #28
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
 8000a5a:	603b      	str	r3, [r7, #0]
	if(x_start<0){
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	da01      	bge.n	8000a66 <drawHLine+0x18>
		x_start=0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
	}
	if(x_end>LTDC_WIDTH){
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000a6c:	dd02      	ble.n	8000a74 <drawHLine+0x26>
		x_end=LTDC_WIDTH;
 8000a6e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a72:	607b      	str	r3, [r7, #4]
	}
	x_end=x_end+x_end%2;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	bfb8      	it	lt
 8000a7e:	425b      	neglt	r3, r3
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	4413      	add	r3, r2
 8000a84:	607b      	str	r3, [r7, #4]
//	for rgb565
//	for(uint32_t i = x_start/2; i<x_end/2; i++){
//		buffer[i+LTDC_WIDTH*y/2] = COLOR;
//		buffer[i+(LTDC_WIDTH+LTDC_WIDTH*y)/2] = COLOR;
//	}
	for(uint32_t i = x_start; i<x_end; i++){
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	e020      	b.n	8000ace <drawHLine+0x80>
			buffer[i+LTDC_WIDTH*y] = COLOR;
 8000a8c:	683a      	ldr	r2, [r7, #0]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	011b      	lsls	r3, r3, #4
 8000a92:	1a9b      	subs	r3, r3, r2
 8000a94:	015b      	lsls	r3, r3, #5
 8000a96:	461a      	mov	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000aa6:	601a      	str	r2, [r3, #0]
			buffer[i+LTDC_WIDTH+LTDC_WIDTH*y] = COLOR;
 8000aa8:	683a      	ldr	r2, [r7, #0]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	011b      	lsls	r3, r3, #4
 8000aae:	1a9b      	subs	r3, r3, r2
 8000ab0:	015b      	lsls	r3, r3, #5
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000ac6:	601a      	str	r2, [r3, #0]
	for(uint32_t i = x_start; i<x_end; i++){
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	3301      	adds	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d3da      	bcc.n	8000a8c <drawHLine+0x3e>
		}
}
 8000ad6:	bf00      	nop
 8000ad8:	bf00      	nop
 8000ada:	371c      	adds	r7, #28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <drawCrosshair>:
	drawVLine(buffer, x_end, y_start, y_end);
	drawHLine(buffer, x_start, x_end, y_start);
	drawHLine(buffer, x_start, x_end, y_end);
}

void drawCrosshair(uint32_t *buffer, int32_t x, int32_t y){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	drawHLine(buffer, x-CROSSHAIR_SIZE, x+CROSSHAIR_SIZE, y);
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	f1a3 010f 	sub.w	r1, r3, #15
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	f103 020f 	add.w	r2, r3, #15
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f7ff ffa5 	bl	8000a4e <drawHLine>
	drawVLine(buffer, x, y-CROSSHAIR_SIZE, y+CROSSHAIR_SIZE);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f1a3 020f 	sub.w	r2, r3, #15
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	330f      	adds	r3, #15
 8000b0e:	68b9      	ldr	r1, [r7, #8]
 8000b10:	68f8      	ldr	r0, [r7, #12]
 8000b12:	f7ff ff5b 	bl	80009cc <drawVLine>
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08c      	sub	sp, #48	; 0x30
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
 8000b36:	615a      	str	r2, [r3, #20]
 8000b38:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000b3a:	4b3c      	ldr	r3, [pc, #240]	; (8000c2c <MX_FMC_Init+0x10c>)
 8000b3c:	4a3c      	ldr	r2, [pc, #240]	; (8000c30 <MX_FMC_Init+0x110>)
 8000b3e:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8000b40:	4b3a      	ldr	r3, [pc, #232]	; (8000c2c <MX_FMC_Init+0x10c>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000b46:	4b39      	ldr	r3, [pc, #228]	; (8000c2c <MX_FMC_Init+0x10c>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b4c:	4b37      	ldr	r3, [pc, #220]	; (8000c2c <MX_FMC_Init+0x10c>)
 8000b4e:	2204      	movs	r2, #4
 8000b50:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b52:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <MX_FMC_Init+0x10c>)
 8000b54:	2210      	movs	r2, #16
 8000b56:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b58:	4b34      	ldr	r3, [pc, #208]	; (8000c2c <MX_FMC_Init+0x10c>)
 8000b5a:	2240      	movs	r2, #64	; 0x40
 8000b5c:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000b5e:	4b33      	ldr	r3, [pc, #204]	; (8000c2c <MX_FMC_Init+0x10c>)
 8000b60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b64:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b66:	4b31      	ldr	r3, [pc, #196]	; (8000c2c <MX_FMC_Init+0x10c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b6c:	4b2f      	ldr	r3, [pc, #188]	; (8000c2c <MX_FMC_Init+0x10c>)
 8000b6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b72:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000b74:	4b2d      	ldr	r3, [pc, #180]	; (8000c2c <MX_FMC_Init+0x10c>)
 8000b76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <MX_FMC_Init+0x10c>)
 8000b7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b88:	2307      	movs	r3, #7
 8000b8a:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 5;
 8000b8c:	2305      	movs	r3, #5
 8000b8e:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 6;
 8000b90:	2306      	movs	r3, #6
 8000b92:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8000b94:	2303      	movs	r3, #3
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4821      	ldr	r0, [pc, #132]	; (8000c2c <MX_FMC_Init+0x10c>)
 8000ba8:	f00c fc82 	bl	800d4b0 <HAL_SDRAM_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 8000bb2:	f000 fdd5 	bl	8001760 <Error_Handler>

  /* USER CODE BEGIN FMC_Init 2 */
  FMC_SDRAM_CommandTypeDef Command;
  /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
  /* Step 3: Configure a clock configuration enable command */
	Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	607b      	str	r3, [r7, #4]
	Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2; /* configure the Target Bank bits */
 8000bba:	2308      	movs	r3, #8
 8000bbc:	60bb      	str	r3, [r7, #8]
	Command.AutoRefreshNumber      = 1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	60fb      	str	r3, [r7, #12]
	Command.ModeRegisterDefinition = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4817      	ldr	r0, [pc, #92]	; (8000c2c <MX_FMC_Init+0x10c>)
 8000bd0:	f00c fcaa 	bl	800d528 <HAL_SDRAM_SendCommand>
	HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f003 fca9 	bl	800452c <HAL_Delay>
	/* Step 5: Configure a PALL (precharge all) command */
	Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000bda:	2302      	movs	r3, #2
 8000bdc:	607b      	str	r3, [r7, #4]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000be4:	4619      	mov	r1, r3
 8000be6:	4811      	ldr	r0, [pc, #68]	; (8000c2c <MX_FMC_Init+0x10c>)
 8000be8:	f00c fc9e 	bl	800d528 <HAL_SDRAM_SendCommand>
	/* Step 6: Configure an Auto Refresh command */
	Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000bec:	2303      	movs	r3, #3
 8000bee:	607b      	str	r3, [r7, #4]
	Command.AutoRefreshNumber      = 2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	60fb      	str	r3, [r7, #12]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <MX_FMC_Init+0x10c>)
 8000bfe:	f00c fc93 	bl	800d528 <HAL_SDRAM_SendCommand>
	/* Step 7: Program the external memory mode register */
	Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000c02:	2304      	movs	r3, #4
 8000c04:	607b      	str	r3, [r7, #4]
	Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000c06:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000c0a:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_FMC_Init+0x10c>)
 8000c16:	f00c fc87 	bl	800d528 <HAL_SDRAM_SendCommand>
	/* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
	/* Set the device refresh rate
	* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
					= [(64ms/4096) * 200MHz] - 20 ~= 3115 */
	HAL_SDRAM_ProgramRefreshRate(&hsdram2, 3115);
 8000c1a:	f640 412b 	movw	r1, #3115	; 0xc2b
 8000c1e:	4803      	ldr	r0, [pc, #12]	; (8000c2c <MX_FMC_Init+0x10c>)
 8000c20:	f00c fcb7 	bl	800d592 <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8000c24:	bf00      	nop
 8000c26:	3730      	adds	r7, #48	; 0x30
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	24000444 	.word	0x24000444
 8000c30:	52004140 	.word	0x52004140

08000c34 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b0b8      	sub	sp, #224	; 0xe0
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000c4a:	4b58      	ldr	r3, [pc, #352]	; (8000dac <HAL_FMC_MspInit+0x178>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f040 80a7 	bne.w	8000da2 <HAL_FMC_MspInit+0x16e>
    return;
  }
  FMC_Initialized = 1;
 8000c54:	4b55      	ldr	r3, [pc, #340]	; (8000dac <HAL_FMC_MspInit+0x178>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	22c0      	movs	r2, #192	; 0xc0
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f00e fd52 	bl	800f70c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000c68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 8000c74:	2318      	movs	r3, #24
 8000c76:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 8000c78:	23c8      	movs	r3, #200	; 0xc8
 8000c7a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000c84:	2301      	movs	r3, #1
 8000c86:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f00a fd0b 	bl	800b6b4 <HAL_RCCEx_PeriphCLKConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_FMC_MspInit+0x74>
    {
      Error_Handler();
 8000ca4:	f000 fd5c 	bl	8001760 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ca8:	4b41      	ldr	r3, [pc, #260]	; (8000db0 <HAL_FMC_MspInit+0x17c>)
 8000caa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000cae:	4a40      	ldr	r2, [pc, #256]	; (8000db0 <HAL_FMC_MspInit+0x17c>)
 8000cb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cb4:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000cb8:	4b3d      	ldr	r3, [pc, #244]	; (8000db0 <HAL_FMC_MspInit+0x17c>)
 8000cba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000cc6:	f248 1333 	movw	r3, #33075	; 0x8133
 8000cca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ce0:	230c      	movs	r3, #12
 8000ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cea:	4619      	mov	r1, r3
 8000cec:	4831      	ldr	r0, [pc, #196]	; (8000db4 <HAL_FMC_MspInit+0x180>)
 8000cee:	f007 ff8b 	bl	8008c08 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000cf2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000cf6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d0c:	230c      	movs	r3, #12
 8000d0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d16:	4619      	mov	r1, r3
 8000d18:	4827      	ldr	r0, [pc, #156]	; (8000db8 <HAL_FMC_MspInit+0x184>)
 8000d1a:	f007 ff75 	bl	8008c08 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000d1e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000d22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d38:	230c      	movs	r3, #12
 8000d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d42:	4619      	mov	r1, r3
 8000d44:	481d      	ldr	r0, [pc, #116]	; (8000dbc <HAL_FMC_MspInit+0x188>)
 8000d46:	f007 ff5f 	bl	8008c08 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000d4a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000d4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d64:	230c      	movs	r3, #12
 8000d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d6a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4813      	ldr	r0, [pc, #76]	; (8000dc0 <HAL_FMC_MspInit+0x18c>)
 8000d72:	f007 ff49 	bl	8008c08 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000d76:	23e0      	movs	r3, #224	; 0xe0
 8000d78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d8e:	230c      	movs	r3, #12
 8000d90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480a      	ldr	r0, [pc, #40]	; (8000dc4 <HAL_FMC_MspInit+0x190>)
 8000d9c:	f007 ff34 	bl	8008c08 <HAL_GPIO_Init>
 8000da0:	e000      	b.n	8000da4 <HAL_FMC_MspInit+0x170>
    return;
 8000da2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000da4:	37e0      	adds	r7, #224	; 0xe0
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	24000478 	.word	0x24000478
 8000db0:	58024400 	.word	0x58024400
 8000db4:	58021800 	.word	0x58021800
 8000db8:	58020c00 	.word	0x58020c00
 8000dbc:	58021000 	.word	0x58021000
 8000dc0:	58021400 	.word	0x58021400
 8000dc4:	58021c00 	.word	0x58021c00

08000dc8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000dd0:	f7ff ff30 	bl	8000c34 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <MX_GPIO_Init>:
     PA0   ------> I2S6_WS
     PA3   ------> I2S6_MCK
     PB2   ------> OCTOSPIM_P1_CLK
*/
void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b090      	sub	sp, #64	; 0x40
 8000de0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000df2:	4bc0      	ldr	r3, [pc, #768]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000df4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000df8:	4abe      	ldr	r2, [pc, #760]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e02:	4bbc      	ldr	r3, [pc, #752]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000e04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e10:	4bb8      	ldr	r3, [pc, #736]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000e12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e16:	4ab7      	ldr	r2, [pc, #732]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e20:	4bb4      	ldr	r3, [pc, #720]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000e22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e2e:	4bb1      	ldr	r3, [pc, #708]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000e30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e34:	4aaf      	ldr	r2, [pc, #700]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e3e:	4bad      	ldr	r3, [pc, #692]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000e40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e48:	623b      	str	r3, [r7, #32]
 8000e4a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e4c:	4ba9      	ldr	r3, [pc, #676]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000e4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e52:	4aa8      	ldr	r2, [pc, #672]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000e54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e58:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e5c:	4ba5      	ldr	r3, [pc, #660]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000e5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e66:	61fb      	str	r3, [r7, #28]
 8000e68:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6a:	4ba2      	ldr	r3, [pc, #648]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000e6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e70:	4aa0      	ldr	r2, [pc, #640]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000e72:	f043 0308 	orr.w	r3, r3, #8
 8000e76:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e7a:	4b9e      	ldr	r3, [pc, #632]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000e7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e80:	f003 0308 	and.w	r3, r3, #8
 8000e84:	61bb      	str	r3, [r7, #24]
 8000e86:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e88:	4b9a      	ldr	r3, [pc, #616]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000e8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e8e:	4a99      	ldr	r2, [pc, #612]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e98:	4b96      	ldr	r3, [pc, #600]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000e9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea6:	4b93      	ldr	r3, [pc, #588]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000ea8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eac:	4a91      	ldr	r2, [pc, #580]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000eae:	f043 0310 	orr.w	r3, r3, #16
 8000eb2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eb6:	4b8f      	ldr	r3, [pc, #572]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000eb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ebc:	f003 0310 	and.w	r3, r3, #16
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000ec4:	4b8b      	ldr	r3, [pc, #556]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000ec6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eca:	4a8a      	ldr	r2, [pc, #552]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000ecc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ed4:	4b87      	ldr	r3, [pc, #540]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000ed6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b84      	ldr	r3, [pc, #528]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000ee4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ee8:	4a82      	ldr	r2, [pc, #520]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ef2:	4b80      	ldr	r3, [pc, #512]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000ef4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f00:	4b7c      	ldr	r3, [pc, #496]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000f02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f06:	4a7b      	ldr	r2, [pc, #492]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000f08:	f043 0320 	orr.w	r3, r3, #32
 8000f0c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f10:	4b78      	ldr	r3, [pc, #480]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000f12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f16:	f003 0320 	and.w	r3, r3, #32
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1e:	4b75      	ldr	r3, [pc, #468]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000f20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f24:	4a73      	ldr	r2, [pc, #460]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f2a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f2e:	4b71      	ldr	r3, [pc, #452]	; (80010f4 <MX_GPIO_Init+0x318>)
 8000f30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f38:	603b      	str	r3, [r7, #0]
 8000f3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	210e      	movs	r1, #14
 8000f40:	486d      	ldr	r0, [pc, #436]	; (80010f8 <MX_GPIO_Init+0x31c>)
 8000f42:	f008 f91b 	bl	800917c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	f640 0104 	movw	r1, #2052	; 0x804
 8000f4c:	486b      	ldr	r0, [pc, #428]	; (80010fc <MX_GPIO_Init+0x320>)
 8000f4e:	f008 f915 	bl	800917c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f58:	4869      	ldr	r0, [pc, #420]	; (8001100 <MX_GPIO_Init+0x324>)
 8000f5a:	f008 f90f 	bl	800917c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2108      	movs	r1, #8
 8000f62:	4866      	ldr	r0, [pc, #408]	; (80010fc <MX_GPIO_Init+0x320>)
 8000f64:	f008 f90a 	bl	800917c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2106      	movs	r1, #6
 8000f6c:	4864      	ldr	r0, [pc, #400]	; (8001100 <MX_GPIO_Init+0x324>)
 8000f6e:	f008 f905 	bl	800917c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8000f72:	2330      	movs	r3, #48	; 0x30
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f84:	4619      	mov	r1, r3
 8000f86:	485c      	ldr	r0, [pc, #368]	; (80010f8 <MX_GPIO_Init+0x31c>)
 8000f88:	f007 fe3e 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8000f8c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4854      	ldr	r0, [pc, #336]	; (80010fc <MX_GPIO_Init+0x320>)
 8000faa:	f007 fe2d 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8000fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000fc0:	2309      	movs	r3, #9
 8000fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc8:	4619      	mov	r1, r3
 8000fca:	484c      	ldr	r0, [pc, #304]	; (80010fc <MX_GPIO_Init+0x320>)
 8000fcc:	f007 fe1c 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000fe0:	230a      	movs	r3, #10
 8000fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4846      	ldr	r0, [pc, #280]	; (8001104 <MX_GPIO_Init+0x328>)
 8000fec:	f007 fe0c 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 8000ff0:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001002:	230c      	movs	r3, #12
 8001004:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100a:	4619      	mov	r1, r3
 800100c:	483e      	ldr	r0, [pc, #248]	; (8001108 <MX_GPIO_Init+0x32c>)
 800100e:	f007 fdfb 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8001012:	230e      	movs	r3, #14
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001026:	4619      	mov	r1, r3
 8001028:	4833      	ldr	r0, [pc, #204]	; (80010f8 <MX_GPIO_Init+0x31c>)
 800102a:	f007 fded 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 800102e:	f640 030c 	movw	r3, #2060	; 0x80c
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001040:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001044:	4619      	mov	r1, r3
 8001046:	482d      	ldr	r0, [pc, #180]	; (80010fc <MX_GPIO_Init+0x320>)
 8001048:	f007 fdde 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800104c:	2304      	movs	r3, #4
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800105c:	230c      	movs	r3, #12
 800105e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001064:	4619      	mov	r1, r3
 8001066:	4827      	ldr	r0, [pc, #156]	; (8001104 <MX_GPIO_Init+0x328>)
 8001068:	f007 fdce 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800106c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001072:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001078:	2301      	movs	r3, #1
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001080:	4619      	mov	r1, r3
 8001082:	481d      	ldr	r0, [pc, #116]	; (80010f8 <MX_GPIO_Init+0x31c>)
 8001084:	f007 fdc0 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8001088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800109a:	2305      	movs	r3, #5
 800109c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a2:	4619      	mov	r1, r3
 80010a4:	4816      	ldr	r0, [pc, #88]	; (8001100 <MX_GPIO_Init+0x324>)
 80010a6:	f007 fdaf 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 80010aa:	f640 0306 	movw	r3, #2054	; 0x806
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c0:	4619      	mov	r1, r3
 80010c2:	480f      	ldr	r0, [pc, #60]	; (8001100 <MX_GPIO_Init+0x324>)
 80010c4:	f007 fda0 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 80010c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010dc:	4619      	mov	r1, r3
 80010de:	480a      	ldr	r0, [pc, #40]	; (8001108 <MX_GPIO_Init+0x32c>)
 80010e0:	f007 fd92 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 80010e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e00c      	b.n	800110c <MX_GPIO_Init+0x330>
 80010f2:	bf00      	nop
 80010f4:	58024400 	.word	0x58024400
 80010f8:	58022000 	.word	0x58022000
 80010fc:	58021800 	.word	0x58021800
 8001100:	58020000 	.word	0x58020000
 8001104:	58020c00 	.word	0x58020c00
 8001108:	58020800 	.word	0x58020800
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001112:	2300      	movs	r3, #0
 8001114:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111a:	4619      	mov	r1, r3
 800111c:	4842      	ldr	r0, [pc, #264]	; (8001228 <MX_GPIO_Init+0x44c>)
 800111e:	f007 fd73 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8001122:	2340      	movs	r3, #64	; 0x40
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001132:	230a      	movs	r3, #10
 8001134:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113a:	4619      	mov	r1, r3
 800113c:	483b      	ldr	r0, [pc, #236]	; (800122c <MX_GPIO_Init+0x450>)
 800113e:	f007 fd63 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8001142:	230c      	movs	r3, #12
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001152:	2305      	movs	r3, #5
 8001154:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800115a:	4619      	mov	r1, r3
 800115c:	4834      	ldr	r0, [pc, #208]	; (8001230 <MX_GPIO_Init+0x454>)
 800115e:	f007 fd53 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8001162:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001168:	2312      	movs	r3, #18
 800116a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116c:	2301      	movs	r3, #1
 800116e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001174:	2304      	movs	r3, #4
 8001176:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117c:	4619      	mov	r1, r3
 800117e:	482d      	ldr	r0, [pc, #180]	; (8001234 <MX_GPIO_Init+0x458>)
 8001180:	f007 fd42 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 8001184:	2322      	movs	r3, #34	; 0x22
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001194:	230a      	movs	r3, #10
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800119c:	4619      	mov	r1, r3
 800119e:	4824      	ldr	r0, [pc, #144]	; (8001230 <MX_GPIO_Init+0x454>)
 80011a0:	f007 fd32 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80011a4:	2304      	movs	r3, #4
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b6:	4619      	mov	r1, r3
 80011b8:	481f      	ldr	r0, [pc, #124]	; (8001238 <MX_GPIO_Init+0x45c>)
 80011ba:	f007 fd25 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 80011be:	2308      	movs	r3, #8
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80011ce:	2309      	movs	r3, #9
 80011d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d6:	4619      	mov	r1, r3
 80011d8:	4817      	ldr	r0, [pc, #92]	; (8001238 <MX_GPIO_Init+0x45c>)
 80011da:	f007 fd15 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 80011de:	2309      	movs	r3, #9
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80011ee:	2305      	movs	r3, #5
 80011f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f6:	4619      	mov	r1, r3
 80011f8:	480b      	ldr	r0, [pc, #44]	; (8001228 <MX_GPIO_Init+0x44c>)
 80011fa:	f007 fd05 	bl	8008c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 80011fe:	2304      	movs	r3, #4
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800120e:	2309      	movs	r3, #9
 8001210:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001216:	4619      	mov	r1, r3
 8001218:	4808      	ldr	r0, [pc, #32]	; (800123c <MX_GPIO_Init+0x460>)
 800121a:	f007 fcf5 	bl	8008c08 <HAL_GPIO_Init>

}
 800121e:	bf00      	nop
 8001220:	3740      	adds	r7, #64	; 0x40
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	58020000 	.word	0x58020000
 800122c:	58021800 	.word	0x58021800
 8001230:	58020800 	.word	0x58020800
 8001234:	58020c00 	.word	0x58020c00
 8001238:	58021c00 	.word	0x58021c00
 800123c:	58020400 	.word	0x58020400

08001240 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	; 0x38
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2234      	movs	r2, #52	; 0x34
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f00e fa5d 	bl	800f70c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001252:	4b38      	ldr	r3, [pc, #224]	; (8001334 <MX_LTDC_Init+0xf4>)
 8001254:	4a38      	ldr	r2, [pc, #224]	; (8001338 <MX_LTDC_Init+0xf8>)
 8001256:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001258:	4b36      	ldr	r3, [pc, #216]	; (8001334 <MX_LTDC_Init+0xf4>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800125e:	4b35      	ldr	r3, [pc, #212]	; (8001334 <MX_LTDC_Init+0xf4>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 8001264:	4b33      	ldr	r3, [pc, #204]	; (8001334 <MX_LTDC_Init+0xf4>)
 8001266:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800126a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800126c:	4b31      	ldr	r3, [pc, #196]	; (8001334 <MX_LTDC_Init+0xf4>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001272:	4b30      	ldr	r3, [pc, #192]	; (8001334 <MX_LTDC_Init+0xf4>)
 8001274:	2207      	movs	r2, #7
 8001276:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001278:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <MX_LTDC_Init+0xf4>)
 800127a:	2203      	movs	r2, #3
 800127c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800127e:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <MX_LTDC_Init+0xf4>)
 8001280:	220e      	movs	r2, #14
 8001282:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001284:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <MX_LTDC_Init+0xf4>)
 8001286:	2205      	movs	r2, #5
 8001288:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800128a:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <MX_LTDC_Init+0xf4>)
 800128c:	f240 228e 	movw	r2, #654	; 0x28e
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001292:	4b28      	ldr	r3, [pc, #160]	; (8001334 <MX_LTDC_Init+0xf4>)
 8001294:	f240 12e5 	movw	r2, #485	; 0x1e5
 8001298:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <MX_LTDC_Init+0xf4>)
 800129c:	f44f 7225 	mov.w	r2, #660	; 0x294
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80012a2:	4b24      	ldr	r3, [pc, #144]	; (8001334 <MX_LTDC_Init+0xf4>)
 80012a4:	f240 12e7 	movw	r2, #487	; 0x1e7
 80012a8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80012aa:	4b22      	ldr	r3, [pc, #136]	; (8001334 <MX_LTDC_Init+0xf4>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <MX_LTDC_Init+0xf4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80012ba:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <MX_LTDC_Init+0xf4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80012c2:	481c      	ldr	r0, [pc, #112]	; (8001334 <MX_LTDC_Init+0xf4>)
 80012c4:	f008 fdfa 	bl	8009ebc <HAL_LTDC_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 80012ce:	f000 fa47 	bl	8001760 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80012e2:	2302      	movs	r3, #2
 80012e4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80012ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80012f4:	2305      	movs	r3, #5
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2200      	movs	r2, #0
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_LTDC_Init+0xf4>)
 800131e:	f008 ff5f 	bl	800a1e0 <HAL_LTDC_ConfigLayer>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8001328:	f000 fa1a 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	3738      	adds	r7, #56	; 0x38
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	2400047c 	.word	0x2400047c
 8001338:	50001000 	.word	0x50001000

0800133c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b0bc      	sub	sp, #240	; 0xf0
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001354:	f107 0318 	add.w	r3, r7, #24
 8001358:	22c0      	movs	r2, #192	; 0xc0
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f00e f9d5 	bl	800f70c <memset>
  if(ltdcHandle->Instance==LTDC)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a5b      	ldr	r2, [pc, #364]	; (80014d4 <HAL_LTDC_MspInit+0x198>)
 8001368:	4293      	cmp	r3, r2
 800136a:	f040 80ae 	bne.w	80014ca <HAL_LTDC_MspInit+0x18e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800136e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 800137a:	2318      	movs	r3, #24
 800137c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 800137e:	23c0      	movs	r3, #192	; 0xc0
 8001380:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 8001382:	2311      	movs	r3, #17
 8001384:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001386:	2302      	movs	r3, #2
 8001388:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 16;
 800138a:	2310      	movs	r3, #16
 800138c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800138e:	2300      	movs	r3, #0
 8001390:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001392:	2300      	movs	r3, #0
 8001394:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8001396:	f241 5356 	movw	r3, #5462	; 0x1556
 800139a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139c:	f107 0318 	add.w	r3, r7, #24
 80013a0:	4618      	mov	r0, r3
 80013a2:	f00a f987 	bl	800b6b4 <HAL_RCCEx_PeriphCLKConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 80013ac:	f000 f9d8 	bl	8001760 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80013b0:	4b49      	ldr	r3, [pc, #292]	; (80014d8 <HAL_LTDC_MspInit+0x19c>)
 80013b2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80013b6:	4a48      	ldr	r2, [pc, #288]	; (80014d8 <HAL_LTDC_MspInit+0x19c>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 80013c0:	4b45      	ldr	r3, [pc, #276]	; (80014d8 <HAL_LTDC_MspInit+0x19c>)
 80013c2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 80013ce:	4b42      	ldr	r3, [pc, #264]	; (80014d8 <HAL_LTDC_MspInit+0x19c>)
 80013d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013d4:	4a40      	ldr	r2, [pc, #256]	; (80014d8 <HAL_LTDC_MspInit+0x19c>)
 80013d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013da:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013de:	4b3e      	ldr	r3, [pc, #248]	; (80014d8 <HAL_LTDC_MspInit+0x19c>)
 80013e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013ec:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <HAL_LTDC_MspInit+0x19c>)
 80013ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013f2:	4a39      	ldr	r2, [pc, #228]	; (80014d8 <HAL_LTDC_MspInit+0x19c>)
 80013f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013fc:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <HAL_LTDC_MspInit+0x19c>)
 80013fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <HAL_LTDC_MspInit+0x19c>)
 800140c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001410:	4a31      	ldr	r2, [pc, #196]	; (80014d8 <HAL_LTDC_MspInit+0x19c>)
 8001412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001416:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800141a:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <HAL_LTDC_MspInit+0x19c>)
 800141c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 8001428:	23ff      	movs	r3, #255	; 0xff
 800142a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001440:	230e      	movs	r3, #14
 8001442:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001446:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800144a:	4619      	mov	r1, r3
 800144c:	4823      	ldr	r0, [pc, #140]	; (80014dc <HAL_LTDC_MspInit+0x1a0>)
 800144e:	f007 fbdb 	bl	8008c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 8001452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001456:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800146c:	230e      	movs	r3, #14
 800146e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001472:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001476:	4619      	mov	r1, r3
 8001478:	4819      	ldr	r0, [pc, #100]	; (80014e0 <HAL_LTDC_MspInit+0x1a4>)
 800147a:	f007 fbc5 	bl	8008c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 800147e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001482:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001498:	230e      	movs	r3, #14
 800149a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800149e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014a2:	4619      	mov	r1, r3
 80014a4:	480f      	ldr	r0, [pc, #60]	; (80014e4 <HAL_LTDC_MspInit+0x1a8>)
 80014a6:	f007 fbaf 	bl	8008c08 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	2058      	movs	r0, #88	; 0x58
 80014b0:	f003 f93b 	bl	800472a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80014b4:	2058      	movs	r0, #88	; 0x58
 80014b6:	f003 f952 	bl	800475e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	2059      	movs	r0, #89	; 0x59
 80014c0:	f003 f933 	bl	800472a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80014c4:	2059      	movs	r0, #89	; 0x59
 80014c6:	f003 f94a 	bl	800475e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80014ca:	bf00      	nop
 80014cc:	37f0      	adds	r7, #240	; 0xf0
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	50001000 	.word	0x50001000
 80014d8:	58024400 	.word	0x58024400
 80014dc:	58022800 	.word	0x58022800
 80014e0:	58022400 	.word	0x58022400
 80014e4:	58022000 	.word	0x58022000

080014e8 <LTDC_Init_from_buffer>:
  /* USER CODE END LTDC_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTDC_Init_from_buffer(uint32_t* buffer){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b090      	sub	sp, #64	; 0x40
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	2234      	movs	r2, #52	; 0x34
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f00e f907 	bl	800f70c <memset>
	pLayerCfg.WindowX0 = 28;
 80014fe:	231c      	movs	r3, #28
 8001500:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = 508;
 8001502:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8001506:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 6;
 8001508:	2306      	movs	r3, #6
 800150a:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = 278;
 800150c:	f44f 738b 	mov.w	r3, #278	; 0x116
 8001510:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001516:	23ff      	movs	r3, #255	; 0xff
 8001518:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800151e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001524:	2305      	movs	r3, #5
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.FBStartAdress = (uint32_t)buffer;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.ImageWidth = 480;
 800152c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = 272;
 8001532:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001536:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	2200      	movs	r2, #0
 8001550:	4619      	mov	r1, r3
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <LTDC_Init_from_buffer+0x84>)
 8001554:	f008 fe44 	bl	800a1e0 <HAL_LTDC_ConfigLayer>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <LTDC_Init_from_buffer+0x7a>
	{
	Error_Handler();
 800155e:	f000 f8ff 	bl	8001760 <Error_Handler>
	}
}
 8001562:	bf00      	nop
 8001564:	3740      	adds	r7, #64	; 0x40
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2400047c 	.word	0x2400047c

08001570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001576:	f002 ff47 	bl	8004408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800157a:	f000 f85b 	bl	8001634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157e:	f7ff fc2d 	bl	8000ddc <MX_GPIO_Init>
  MX_DMA_Init();
 8001582:	f7ff f977 	bl	8000874 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001586:	f002 fe57 	bl	8004238 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 800158a:	f7ff f993 	bl	80008b4 <MX_DMA2D_Init>
  MX_LTDC_Init();
 800158e:	f7ff fe57 	bl	8001240 <MX_LTDC_Init>
  MX_DCMI_Init();
 8001592:	f7ff f82d 	bl	80005f0 <MX_DCMI_Init>
  MX_RTC_Init();
 8001596:	f001 fe8d 	bl	80032b4 <MX_RTC_Init>
  MX_FMC_Init();
 800159a:	f7ff fac1 	bl	8000b20 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
    RetargetInit(&huart1);
 800159e:	4820      	ldr	r0, [pc, #128]	; (8001620 <main+0xb0>)
 80015a0:	f001 fde8 	bl	8003174 <RetargetInit>

    BSP_CAMERA_PwrDown(0);
 80015a4:	2000      	movs	r0, #0
 80015a6:	f002 fbe8 	bl	8003d7a <BSP_CAMERA_PwrDown>
    if (BSP_CAMERA_Init(0, CAMERA_R480x272, CAMERA_PF_RGB565) !=
 80015aa:	2200      	movs	r2, #0
 80015ac:	2102      	movs	r1, #2
 80015ae:	2000      	movs	r0, #0
 80015b0:	f002 fb32 	bl	8003c18 <BSP_CAMERA_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <main+0x4e>
        BSP_ERROR_NONE) {
        Error_Handler();
 80015ba:	f000 f8d1 	bl	8001760 <Error_Handler>
    }
    HAL_Delay(1000);
 80015be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015c2:	f002 ffb3 	bl	800452c <HAL_Delay>
    //  buffer[5460] = 255;
    LTDC_Init_from_buffer((uint32_t *)LCD_BUFFER);
 80015c6:	4817      	ldr	r0, [pc, #92]	; (8001624 <main+0xb4>)
 80015c8:	f7ff ff8e 	bl	80014e8 <LTDC_Init_from_buffer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1) {
    	// make photo
        BSP_CAMERA_Start(0, (uint8_t *)CAMERA_BUFFER, CAMERA_MODE_SNAPSHOT);
 80015cc:	2202      	movs	r2, #2
 80015ce:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80015d2:	2000      	movs	r0, #0
 80015d4:	f002 fb66 	bl	8003ca4 <BSP_CAMERA_Start>
        while (camera_frame_ready == 0) {
 80015d8:	e002      	b.n	80015e0 <main+0x70>
        	HAL_Delay(200);
 80015da:	20c8      	movs	r0, #200	; 0xc8
 80015dc:	f002 ffa6 	bl	800452c <HAL_Delay>
        while (camera_frame_ready == 0) {
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <main+0xb8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f8      	beq.n	80015da <main+0x6a>
        };
        BSP_CAMERA_Stop(0);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f002 fb95 	bl	8003d18 <BSP_CAMERA_Stop>
        // process photo
        DMA2D_Convert((uint32_t *)CAMERA_BUFFER, (uint32_t *)LCD_BUFFER);
 80015ee:	490d      	ldr	r1, [pc, #52]	; (8001624 <main+0xb4>)
 80015f0:	f04f 4050 	mov.w	r0, #3489660928	; 0xd0000000
 80015f4:	f7ff f9c2 	bl	800097c <DMA2D_Convert>

        // post process
        postProcess((uint32_t *)LCD_BUFFER, LTDC_WIDTH, LTDC_HEIGHT, 96, 96, GRID_SIZE, probabilites);
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <main+0xbc>)
 80015fa:	9302      	str	r3, [sp, #8]
 80015fc:	230c      	movs	r3, #12
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	2360      	movs	r3, #96	; 0x60
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	2360      	movs	r3, #96	; 0x60
 8001606:	f44f 7288 	mov.w	r2, #272	; 0x110
 800160a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <main+0xb4>)
 8001610:	f001 fd4e 	bl	80030b0 <postProcess>
        //drawHLine((uint32_t*)LCD_BUFFER, 30, 100, 30);
        HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 8001614:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <main+0xc0>)
 800161a:	f007 fdc8 	bl	80091ae <HAL_GPIO_TogglePin>
    while (1) {
 800161e:	e7d5      	b.n	80015cc <main+0x5c>
 8001620:	24001018 	.word	0x24001018
 8001624:	d007f800 	.word	0xd007f800
 8001628:	24000524 	.word	0x24000524
 800162c:	24000000 	.word	0x24000000
 8001630:	58021800 	.word	0x58021800

08001634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b09c      	sub	sp, #112	; 0x70
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163e:	224c      	movs	r2, #76	; 0x4c
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f00e f862 	bl	800f70c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2220      	movs	r2, #32
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f00e f85c 	bl	800f70c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001654:	4b38      	ldr	r3, [pc, #224]	; (8001738 <SystemClock_Config+0x104>)
 8001656:	f04f 32ff 	mov.w	r2, #4294967295
 800165a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800165e:	2004      	movs	r0, #4
 8001660:	f008 ffa6 	bl	800a5b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001664:	2300      	movs	r3, #0
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	4b34      	ldr	r3, [pc, #208]	; (800173c <SystemClock_Config+0x108>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4a33      	ldr	r2, [pc, #204]	; (800173c <SystemClock_Config+0x108>)
 800166e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001672:	6193      	str	r3, [r2, #24]
 8001674:	4b31      	ldr	r3, [pc, #196]	; (800173c <SystemClock_Config+0x108>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001680:	bf00      	nop
 8001682:	4b2e      	ldr	r3, [pc, #184]	; (800173c <SystemClock_Config+0x108>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800168a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800168e:	d1f8      	bne.n	8001682 <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001690:	f008 ff7e 	bl	800a590 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001694:	4b28      	ldr	r3, [pc, #160]	; (8001738 <SystemClock_Config+0x104>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001698:	4a27      	ldr	r2, [pc, #156]	; (8001738 <SystemClock_Config+0x104>)
 800169a:	f023 0318 	bic.w	r3, r3, #24
 800169e:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80016a0:	2305      	movs	r3, #5
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016aa:	2301      	movs	r3, #1
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ae:	2302      	movs	r3, #2
 80016b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b2:	2302      	movs	r3, #2
 80016b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80016b6:	2303      	movs	r3, #3
 80016b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 69;
 80016ba:	2345      	movs	r3, #69	; 0x45
 80016bc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016be:	2302      	movs	r3, #2
 80016c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 80016c2:	230c      	movs	r3, #12
 80016c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 16;
 80016c6:	2310      	movs	r3, #16
 80016c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80016ca:	230c      	movs	r3, #12
 80016cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 5462;
 80016d2:	f241 5356 	movw	r3, #5462	; 0x1556
 80016d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016dc:	4618      	mov	r0, r3
 80016de:	f008 ffc1 	bl	800a664 <HAL_RCC_OscConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80016e8:	f000 f83a 	bl	8001760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ec:	233f      	movs	r3, #63	; 0x3f
 80016ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f0:	2303      	movs	r3, #3
 80016f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016fc:	2340      	movs	r3, #64	; 0x40
 80016fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001700:	2340      	movs	r3, #64	; 0x40
 8001702:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001708:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800170a:	2340      	movs	r3, #64	; 0x40
 800170c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2107      	movs	r1, #7
 8001712:	4618      	mov	r0, r3
 8001714:	f009 fbd8 	bl	800aec8 <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800171e:	f000 f81f 	bl	8001760 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001722:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001726:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800172a:	2000      	movs	r0, #0
 800172c:	f009 fd82 	bl	800b234 <HAL_RCC_MCOConfig>
}
 8001730:	bf00      	nop
 8001732:	3770      	adds	r7, #112	; 0x70
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	58024400 	.word	0x58024400
 800173c:	58024800 	.word	0x58024800

08001740 <BSP_CAMERA_FrameEventCallback>:

/* USER CODE BEGIN 4 */

void BSP_CAMERA_FrameEventCallback(uint32_t Instance) {
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
    camera_frame_ready = 1;
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <BSP_CAMERA_FrameEventCallback+0x1c>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	24000524 	.word	0x24000524

08001760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001764:	b672      	cpsid	i
}
 8001766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state
     */
    __disable_irq();
    while (1) {
 8001768:	e7fe      	b.n	8001768 <Error_Handler+0x8>
	...

0800176c <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d103      	bne.n	8001784 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	e02c      	b.n	80017de <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	891a      	ldrh	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	695a      	ldr	r2, [r3, #20]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a0c      	ldr	r2, [pc, #48]	; (80017e8 <OV5640_RegisterBusIO+0x7c>)
 80017b8:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <OV5640_RegisterBusIO+0x80>)
 80017be:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d004      	beq.n	80017d8 <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4798      	blx	r3
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	e002      	b.n	80017de <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 80017d8:	f04f 33ff 	mov.w	r3, #4294967295
 80017dc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80017de:	68fb      	ldr	r3, [r7, #12]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	08002fef 	.word	0x08002fef
 80017ec:	08003021 	.word	0x08003021

080017f0 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001806:	2b00      	cmp	r3, #0
 8001808:	d165      	bne.n	80018d6 <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	2b04      	cmp	r3, #4
 800180e:	d80e      	bhi.n	800182e <OV5640_Init+0x3e>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00f      	beq.n	8001836 <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d00c      	beq.n	8001836 <OV5640_Init+0x46>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d009      	beq.n	8001836 <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b07      	cmp	r3, #7
 8001826:	d006      	beq.n	8001836 <OV5640_Init+0x46>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b08      	cmp	r3, #8
 800182c:	d003      	beq.n	8001836 <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	61bb      	str	r3, [r7, #24]
 8001834:	e04f      	b.n	80018d6 <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	e01f      	b.n	800187c <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001842:	d018      	beq.n	8001876 <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8001844:	4a26      	ldr	r2, [pc, #152]	; (80018e0 <OV5640_Init+0xf0>)
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	885b      	ldrh	r3, [r3, #2]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f103 0018 	add.w	r0, r3, #24
 8001858:	4a21      	ldr	r2, [pc, #132]	; (80018e0 <OV5640_Init+0xf0>)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001860:	f107 0217 	add.w	r2, r7, #23
 8001864:	2301      	movs	r3, #1
 8001866:	f001 fc0b 	bl	8003080 <ov5640_write_reg>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d002      	beq.n	8001876 <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
 8001874:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3301      	adds	r3, #1
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	2bfd      	cmp	r3, #253	; 0xfd
 8001880:	d9dc      	bls.n	800183c <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d126      	bne.n	80018d6 <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 f9e0 	bl	8001c50 <OV5640_SetResolution>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	e01b      	b.n	80018d6 <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 f833 	bl	800190c <OV5640_SetPixelFormat>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	e010      	b.n	80018d6 <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 80018b4:	2300      	movs	r3, #0
 80018b6:	2201      	movs	r2, #1
 80018b8:	2101      	movs	r1, #1
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 fb64 	bl	8001f88 <OV5640_SetPolarities>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	e003      	b.n	80018d6 <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 80018d6:	69bb      	ldr	r3, [r7, #24]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3720      	adds	r7, #32
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	08010008 	.word	0x08010008

080018e4 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d103      	bne.n	80018fe <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00f      	beq.n	8001940 <OV5640_SetPixelFormat+0x34>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d00c      	beq.n	8001940 <OV5640_SetPixelFormat+0x34>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d009      	beq.n	8001940 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2b07      	cmp	r3, #7
 8001930:	d006      	beq.n	8001940 <OV5640_SetPixelFormat+0x34>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2b08      	cmp	r3, #8
 8001936:	d003      	beq.n	8001940 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e16a      	b.n	8001c16 <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	3b01      	subs	r3, #1
 8001944:	2b07      	cmp	r3, #7
 8001946:	f200 80c3 	bhi.w	8001ad0 <OV5640_SetPixelFormat+0x1c4>
 800194a:	a201      	add	r2, pc, #4	; (adr r2, 8001950 <OV5640_SetPixelFormat+0x44>)
 800194c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001950:	080019c9 	.word	0x080019c9
 8001954:	08001971 	.word	0x08001971
 8001958:	08001ad1 	.word	0x08001ad1
 800195c:	08001ad1 	.word	0x08001ad1
 8001960:	08001ad1 	.word	0x08001ad1
 8001964:	08001ad1 	.word	0x08001ad1
 8001968:	08001a21 	.word	0x08001a21
 800196c:	08001a79 	.word	0x08001a79
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	e024      	b.n	80019c0 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197c:	d01d      	beq.n	80019ba <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 800197e:	4aa8      	ldr	r2, [pc, #672]	; (8001c20 <OV5640_SetPixelFormat+0x314>)
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	885b      	ldrh	r3, [r3, #2]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f103 0018 	add.w	r0, r3, #24
 8001992:	4aa3      	ldr	r2, [pc, #652]	; (8001c20 <OV5640_SetPixelFormat+0x314>)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800199a:	f107 020f 	add.w	r2, r7, #15
 800199e:	2301      	movs	r3, #1
 80019a0:	f001 fb6e 	bl	8003080 <ov5640_write_reg>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e003      	b.n	80019ba <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80019b2:	2101      	movs	r1, #1
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f001 fb00 	bl	8002fba <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	3301      	adds	r3, #1
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d9d7      	bls.n	8001976 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 80019c6:	e0af      	b.n	8001b28 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	e024      	b.n	8001a18 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d4:	d01d      	beq.n	8001a12 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 80019d6:	4a93      	ldr	r2, [pc, #588]	; (8001c24 <OV5640_SetPixelFormat+0x318>)
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	885b      	ldrh	r3, [r3, #2]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f103 0018 	add.w	r0, r3, #24
 80019ea:	4a8e      	ldr	r2, [pc, #568]	; (8001c24 <OV5640_SetPixelFormat+0x318>)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80019f2:	f107 020f 	add.w	r2, r7, #15
 80019f6:	2301      	movs	r3, #1
 80019f8:	f001 fb42 	bl	8003080 <ov5640_write_reg>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	e003      	b.n	8001a12 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f001 fad4 	bl	8002fba <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	3301      	adds	r3, #1
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d9d7      	bls.n	80019ce <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8001a1e:	e083      	b.n	8001b28 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	e024      	b.n	8001a70 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2c:	d01d      	beq.n	8001a6a <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8001a2e:	4a7e      	ldr	r2, [pc, #504]	; (8001c28 <OV5640_SetPixelFormat+0x31c>)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	885b      	ldrh	r3, [r3, #2]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f103 0018 	add.w	r0, r3, #24
 8001a42:	4a79      	ldr	r2, [pc, #484]	; (8001c28 <OV5640_SetPixelFormat+0x31c>)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001a4a:	f107 020f 	add.w	r2, r7, #15
 8001a4e:	2301      	movs	r3, #1
 8001a50:	f001 fb16 	bl	8003080 <ov5640_write_reg>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	e003      	b.n	8001a6a <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001a62:	2101      	movs	r1, #1
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f001 faa8 	bl	8002fba <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d9d7      	bls.n	8001a26 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 8001a76:	e057      	b.n	8001b28 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	e024      	b.n	8001ac8 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d01d      	beq.n	8001ac2 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8001a86:	4a69      	ldr	r2, [pc, #420]	; (8001c2c <OV5640_SetPixelFormat+0x320>)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	885b      	ldrh	r3, [r3, #2]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f103 0018 	add.w	r0, r3, #24
 8001a9a:	4a64      	ldr	r2, [pc, #400]	; (8001c2c <OV5640_SetPixelFormat+0x320>)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001aa2:	f107 020f 	add.w	r2, r7, #15
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f001 faea 	bl	8003080 <ov5640_write_reg>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e003      	b.n	8001ac2 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001aba:	2101      	movs	r1, #1
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f001 fa7c 	bl	8002fba <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d9d7      	bls.n	8001a7e <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8001ace:	e02b      	b.n	8001b28 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	e024      	b.n	8001b20 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001adc:	d01d      	beq.n	8001b1a <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8001ade:	4a54      	ldr	r2, [pc, #336]	; (8001c30 <OV5640_SetPixelFormat+0x324>)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	885b      	ldrh	r3, [r3, #2]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f103 0018 	add.w	r0, r3, #24
 8001af2:	4a4f      	ldr	r2, [pc, #316]	; (8001c30 <OV5640_SetPixelFormat+0x324>)
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001afa:	f107 020f 	add.w	r2, r7, #15
 8001afe:	2301      	movs	r3, #1
 8001b00:	f001 fabe 	bl	8003080 <ov5640_write_reg>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	e003      	b.n	8001b1a <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001b12:	2101      	movs	r1, #1
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f001 fa50 	bl	8002fba <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d9d7      	bls.n	8001ad6 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8001b26:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d173      	bne.n	8001c16 <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f103 0018 	add.w	r0, r3, #24
 8001b34:	f107 020f 	add.w	r2, r7, #15
 8001b38:	2301      	movs	r3, #1
 8001b3a:	f643 0121 	movw	r1, #14369	; 0x3821
 8001b3e:	f001 fa88 	bl	8003052 <ov5640_read_reg>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8001b48:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	e062      	b.n	8001c16 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	f043 0320 	orr.w	r3, r3, #32
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f103 0018 	add.w	r0, r3, #24
 8001b60:	f107 020f 	add.w	r2, r7, #15
 8001b64:	2301      	movs	r3, #1
 8001b66:	f643 0121 	movw	r1, #14369	; 0x3821
 8001b6a:	f001 fa89 	bl	8003080 <ov5640_write_reg>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8001b74:	f04f 33ff 	mov.w	r3, #4294967295
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	e04c      	b.n	8001c16 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f103 0018 	add.w	r0, r3, #24
 8001b82:	f107 020f 	add.w	r2, r7, #15
 8001b86:	2301      	movs	r3, #1
 8001b88:	f243 0102 	movw	r1, #12290	; 0x3002
 8001b8c:	f001 fa61 	bl	8003052 <ov5640_read_reg>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e03b      	b.n	8001c16 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	f023 031c 	bic.w	r3, r3, #28
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f103 0018 	add.w	r0, r3, #24
 8001bae:	f107 020f 	add.w	r2, r7, #15
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f243 0102 	movw	r1, #12290	; 0x3002
 8001bb8:	f001 fa62 	bl	8003080 <ov5640_write_reg>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	e025      	b.n	8001c16 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f103 0018 	add.w	r0, r3, #24
 8001bd0:	f107 020f 	add.w	r2, r7, #15
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	f243 0106 	movw	r1, #12294	; 0x3006
 8001bda:	f001 fa3a 	bl	8003052 <ov5640_read_reg>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8001be4:	f04f 33ff 	mov.w	r3, #4294967295
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	e014      	b.n	8001c16 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f103 0018 	add.w	r0, r3, #24
 8001bfc:	f107 020f 	add.w	r2, r7, #15
 8001c00:	2301      	movs	r3, #1
 8001c02:	f243 0106 	movw	r1, #12294	; 0x3006
 8001c06:	f001 fa3b 	bl	8003080 <ov5640_write_reg>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295
 8001c14:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8001c16:	697b      	ldr	r3, [r7, #20]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	08010400 	.word	0x08010400
 8001c24:	08010408 	.word	0x08010408
 8001c28:	08010410 	.word	0x08010410
 8001c2c:	08010418 	.word	0x08010418
 8001c30:	08010420 	.word	0x08010420

08001c34 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d903      	bls.n	8001c6c <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	e0d8      	b.n	8001e1e <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	f200 80d1 	bhi.w	8001e16 <OV5640_SetResolution+0x1c6>
 8001c74:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <OV5640_SetResolution+0x2c>)
 8001c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7a:	bf00      	nop
 8001c7c:	08001c91 	.word	0x08001c91
 8001c80:	08001cdf 	.word	0x08001cdf
 8001c84:	08001d2d 	.word	0x08001d2d
 8001c88:	08001d7b 	.word	0x08001d7b
 8001c8c:	08001dc9 	.word	0x08001dc9
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	e01f      	b.n	8001cd6 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9c:	d018      	beq.n	8001cd0 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8001c9e:	4a62      	ldr	r2, [pc, #392]	; (8001e28 <OV5640_SetResolution+0x1d8>)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	885b      	ldrh	r3, [r3, #2]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f103 0018 	add.w	r0, r3, #24
 8001cb2:	4a5d      	ldr	r2, [pc, #372]	; (8001e28 <OV5640_SetResolution+0x1d8>)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001cba:	f107 020f 	add.w	r2, r7, #15
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f001 f9de 	bl	8003080 <ov5640_write_reg>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d9dc      	bls.n	8001c96 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001cdc:	e09f      	b.n	8001e1e <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	e01f      	b.n	8001d24 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cea:	d018      	beq.n	8001d1e <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8001cec:	4a4f      	ldr	r2, [pc, #316]	; (8001e2c <OV5640_SetResolution+0x1dc>)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	885b      	ldrh	r3, [r3, #2]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f103 0018 	add.w	r0, r3, #24
 8001d00:	4a4a      	ldr	r2, [pc, #296]	; (8001e2c <OV5640_SetResolution+0x1dc>)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001d08:	f107 020f 	add.w	r2, r7, #15
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f001 f9b7 	bl	8003080 <ov5640_write_reg>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	3301      	adds	r3, #1
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d9dc      	bls.n	8001ce4 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8001d2a:	e078      	b.n	8001e1e <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	e01f      	b.n	8001d72 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d38:	d018      	beq.n	8001d6c <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8001d3a:	4a3d      	ldr	r2, [pc, #244]	; (8001e30 <OV5640_SetResolution+0x1e0>)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	885b      	ldrh	r3, [r3, #2]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f103 0018 	add.w	r0, r3, #24
 8001d4e:	4a38      	ldr	r2, [pc, #224]	; (8001e30 <OV5640_SetResolution+0x1e0>)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001d56:	f107 020f 	add.w	r2, r7, #15
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	f001 f990 	bl	8003080 <ov5640_write_reg>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d9dc      	bls.n	8001d32 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8001d78:	e051      	b.n	8001e1e <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	e01f      	b.n	8001dc0 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d86:	d018      	beq.n	8001dba <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8001d88:	4a2a      	ldr	r2, [pc, #168]	; (8001e34 <OV5640_SetResolution+0x1e4>)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	885b      	ldrh	r3, [r3, #2]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f103 0018 	add.w	r0, r3, #24
 8001d9c:	4a25      	ldr	r2, [pc, #148]	; (8001e34 <OV5640_SetResolution+0x1e4>)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001da4:	f107 020f 	add.w	r2, r7, #15
 8001da8:	2301      	movs	r3, #1
 8001daa:	f001 f969 	bl	8003080 <ov5640_write_reg>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
 8001db8:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d9dc      	bls.n	8001d80 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8001dc6:	e02a      	b.n	8001e1e <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	e01f      	b.n	8001e0e <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd4:	d018      	beq.n	8001e08 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8001dd6:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <OV5640_SetResolution+0x1e8>)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	885b      	ldrh	r3, [r3, #2]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f103 0018 	add.w	r0, r3, #24
 8001dea:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <OV5640_SetResolution+0x1e8>)
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001df2:	f107 020f 	add.w	r2, r7, #15
 8001df6:	2301      	movs	r3, #1
 8001df8:	f001 f942 	bl	8003080 <ov5640_write_reg>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d9dc      	bls.n	8001dce <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8001e14:	e003      	b.n	8001e1e <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	617b      	str	r3, [r7, #20]
        break;
 8001e1c:	bf00      	nop
    }
  }

  return ret;
 8001e1e:	697b      	ldr	r3, [r7, #20]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	08010428 	.word	0x08010428
 8001e2c:	08010438 	.word	0x08010438
 8001e30:	08010448 	.word	0x08010448
 8001e34:	08010458 	.word	0x08010458
 8001e38:	08010468 	.word	0x08010468

08001e3c <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f103 0018 	add.w	r0, r3, #24
 8001e4c:	f107 020f 	add.w	r2, r7, #15
 8001e50:	2301      	movs	r3, #1
 8001e52:	f643 0108 	movw	r1, #14344	; 0x3808
 8001e56:	f001 f8fc 	bl	8003052 <ov5640_read_reg>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	e08a      	b.n	8001f7e <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f103 0018 	add.w	r0, r3, #24
 8001e76:	f107 020f 	add.w	r2, r7, #15
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f643 0109 	movw	r1, #14345	; 0x3809
 8001e80:	f001 f8e7 	bl	8003052 <ov5640_read_reg>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e075      	b.n	8001f7e <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	8a7b      	ldrh	r3, [r7, #18]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f103 0018 	add.w	r0, r3, #24
 8001ea2:	f107 020f 	add.w	r2, r7, #15
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f643 010a 	movw	r1, #14346	; 0x380a
 8001eac:	f001 f8d1 	bl	8003052 <ov5640_read_reg>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	e05f      	b.n	8001f7e <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f103 0018 	add.w	r0, r3, #24
 8001ecc:	f107 020f 	add.w	r2, r7, #15
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f643 010b 	movw	r1, #14347	; 0x380b
 8001ed6:	f001 f8bc 	bl	8003052 <ov5640_read_reg>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 8001ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	e04a      	b.n	8001f7e <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	8a3b      	ldrh	r3, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 8001ef2:	8a7b      	ldrh	r3, [r7, #18]
 8001ef4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001ef8:	d109      	bne.n	8001f0e <OV5640_GetResolution+0xd2>
 8001efa:	8a3b      	ldrh	r3, [r7, #16]
 8001efc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001f00:	d105      	bne.n	8001f0e <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2204      	movs	r2, #4
 8001f06:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	e037      	b.n	8001f7e <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 8001f0e:	8a7b      	ldrh	r3, [r7, #18]
 8001f10:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001f14:	d109      	bne.n	8001f2a <OV5640_GetResolution+0xee>
 8001f16:	8a3b      	ldrh	r3, [r7, #16]
 8001f18:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001f1c:	d105      	bne.n	8001f2a <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2203      	movs	r2, #3
 8001f22:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	e029      	b.n	8001f7e <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 8001f2a:	8a7b      	ldrh	r3, [r7, #18]
 8001f2c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001f30:	d109      	bne.n	8001f46 <OV5640_GetResolution+0x10a>
 8001f32:	8a3b      	ldrh	r3, [r7, #16]
 8001f34:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001f38:	d105      	bne.n	8001f46 <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	e01b      	b.n	8001f7e <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 8001f46:	8a7b      	ldrh	r3, [r7, #18]
 8001f48:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f4c:	d108      	bne.n	8001f60 <OV5640_GetResolution+0x124>
 8001f4e:	8a3b      	ldrh	r3, [r7, #16]
 8001f50:	2bf0      	cmp	r3, #240	; 0xf0
 8001f52:	d105      	bne.n	8001f60 <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	e00e      	b.n	8001f7e <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 8001f60:	8a7b      	ldrh	r3, [r7, #18]
 8001f62:	2ba0      	cmp	r3, #160	; 0xa0
 8001f64:	d108      	bne.n	8001f78 <OV5640_GetResolution+0x13c>
 8001f66:	8a3b      	ldrh	r3, [r7, #16]
 8001f68:	2b78      	cmp	r3, #120	; 0x78
 8001f6a:	d105      	bne.n	8001f78 <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	e002      	b.n	8001f7e <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 8001f78:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8001f7e:	697b      	ldr	r3, [r7, #20]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d011      	beq.n	8001fc4 <OV5640_SetPolarities+0x3c>
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <OV5640_SetPolarities+0x24>
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d10b      	bne.n	8001fc4 <OV5640_SetPolarities+0x3c>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d105      	bne.n	8001fc4 <OV5640_SetPolarities+0x3c>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d006      	beq.n	8001fcc <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8001fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	e01e      	b.n	800200a <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	015b      	lsls	r3, r3, #5
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f103 0018 	add.w	r0, r3, #24
 8001ff0:	f107 0213 	add.w	r2, r7, #19
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f244 7140 	movw	r1, #18240	; 0x4740
 8001ffa:	f001 f841 	bl	8003080 <ov5640_write_reg>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8002004:	f04f 33ff 	mov.w	r3, #4294967295
 8002008:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800200a:	697b      	ldr	r3, [r7, #20]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f103 0018 	add.w	r0, r3, #24
 800202e:	f107 020b 	add.w	r2, r7, #11
 8002032:	2301      	movs	r3, #1
 8002034:	f243 0108 	movw	r1, #12296	; 0x3008
 8002038:	f001 f822 	bl	8003080 <ov5640_write_reg>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e032      	b.n	80020b0 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 800204a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 ffb3 	bl	8002fba <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f103 0018 	add.w	r0, r3, #24
 800205a:	f107 020b 	add.w	r2, r7, #11
 800205e:	2301      	movs	r3, #1
 8002060:	f243 010a 	movw	r1, #12298	; 0x300a
 8002064:	f000 fff5 	bl	8003052 <ov5640_read_reg>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	e01c      	b.n	80020b0 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8002076:	7afb      	ldrb	r3, [r7, #11]
 8002078:	021a      	lsls	r2, r3, #8
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f103 0018 	add.w	r0, r3, #24
 8002084:	f107 020b 	add.w	r2, r7, #11
 8002088:	2301      	movs	r3, #1
 800208a:	f243 010b 	movw	r1, #12299	; 0x300b
 800208e:	f000 ffe0 	bl	8003052 <ov5640_read_reg>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8002098:	f04f 33ff 	mov.w	r3, #4294967295
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	e007      	b.n	80020b0 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	7afa      	ldrb	r2, [r7, #11]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 80020b0:	68fb      	ldr	r3, [r7, #12]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b085      	sub	sp, #20
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d103      	bne.n	80020d2 <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	e01f      	b.n	8002112 <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2201      	movs	r2, #1
 80020d6:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	2201      	movs	r2, #1
 80020dc:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2201      	movs	r2, #1
 80020e2:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2201      	movs	r2, #1
 80020e8:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	2201      	movs	r2, #1
 80020ee:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	2201      	movs	r2, #1
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2201      	movs	r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2201      	movs	r2, #1
 8002100:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	2201      	movs	r2, #1
 8002106:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2201      	movs	r2, #1
 800210c:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 800212a:	2300      	movs	r3, #0
 800212c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f103 0018 	add.w	r0, r3, #24
 8002134:	f107 020f 	add.w	r2, r7, #15
 8002138:	2301      	movs	r3, #1
 800213a:	f243 4106 	movw	r1, #13318	; 0x3406
 800213e:	f000 ff9f 	bl	8003080 <ov5640_write_reg>
 8002142:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10c      	bne.n	8002164 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 800214a:	2346      	movs	r3, #70	; 0x46
 800214c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f103 0018 	add.w	r0, r3, #24
 8002154:	f107 020f 	add.w	r2, r7, #15
 8002158:	2301      	movs	r3, #1
 800215a:	f245 1190 	movw	r1, #20880	; 0x5190
 800215e:	f000 ff8f 	bl	8003080 <ov5640_write_reg>
 8002162:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 800216a:	23f8      	movs	r3, #248	; 0xf8
 800216c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f103 0018 	add.w	r0, r3, #24
 8002174:	f107 020f 	add.w	r2, r7, #15
 8002178:	2301      	movs	r3, #1
 800217a:	f245 1191 	movw	r1, #20881	; 0x5191
 800217e:	f000 ff7f 	bl	8003080 <ov5640_write_reg>
 8002182:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10c      	bne.n	80021a4 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 800218a:	2304      	movs	r3, #4
 800218c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f103 0018 	add.w	r0, r3, #24
 8002194:	f107 020f 	add.w	r2, r7, #15
 8002198:	2301      	movs	r3, #1
 800219a:	f245 1192 	movw	r1, #20882	; 0x5192
 800219e:	f000 ff6f 	bl	8003080 <ov5640_write_reg>
 80021a2:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 80db 	bne.w	8002362 <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	2b07      	cmp	r3, #7
 80021b2:	f200 80af 	bhi.w	8002314 <OV5640_SetLightMode+0x1f4>
 80021b6:	a201      	add	r2, pc, #4	; (adr r2, 80021bc <OV5640_SetLightMode+0x9c>)
 80021b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021bc:	080021dd 	.word	0x080021dd
 80021c0:	0800222b 	.word	0x0800222b
 80021c4:	08002315 	.word	0x08002315
 80021c8:	080022c7 	.word	0x080022c7
 80021cc:	08002315 	.word	0x08002315
 80021d0:	08002315 	.word	0x08002315
 80021d4:	08002315 	.word	0x08002315
 80021d8:	08002279 	.word	0x08002279
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 80021dc:	2300      	movs	r3, #0
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	e01f      	b.n	8002222 <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d018      	beq.n	800221c <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 80021ea:	4a61      	ldr	r2, [pc, #388]	; (8002370 <OV5640_SetLightMode+0x250>)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	885b      	ldrh	r3, [r3, #2]
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f103 0018 	add.w	r0, r3, #24
 80021fe:	4a5c      	ldr	r2, [pc, #368]	; (8002370 <OV5640_SetLightMode+0x250>)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002206:	f107 020f 	add.w	r2, r7, #15
 800220a:	2301      	movs	r3, #1
 800220c:	f000 ff38 	bl	8003080 <ov5640_write_reg>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	3301      	adds	r3, #1
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	2b06      	cmp	r3, #6
 8002226:	d9dc      	bls.n	80021e2 <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 8002228:	e09c      	b.n	8002364 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	e01f      	b.n	8002270 <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002236:	d018      	beq.n	800226a <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8002238:	4a4e      	ldr	r2, [pc, #312]	; (8002374 <OV5640_SetLightMode+0x254>)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	885b      	ldrh	r3, [r3, #2]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f103 0018 	add.w	r0, r3, #24
 800224c:	4a49      	ldr	r2, [pc, #292]	; (8002374 <OV5640_SetLightMode+0x254>)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002254:	f107 020f 	add.w	r2, r7, #15
 8002258:	2301      	movs	r3, #1
 800225a:	f000 ff11 	bl	8003080 <ov5640_write_reg>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	3301      	adds	r3, #1
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	2b06      	cmp	r3, #6
 8002274:	d9dc      	bls.n	8002230 <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 8002276:	e075      	b.n	8002364 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	e01f      	b.n	80022be <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d018      	beq.n	80022b8 <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8002286:	4a3c      	ldr	r2, [pc, #240]	; (8002378 <OV5640_SetLightMode+0x258>)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	885b      	ldrh	r3, [r3, #2]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f103 0018 	add.w	r0, r3, #24
 800229a:	4a37      	ldr	r2, [pc, #220]	; (8002378 <OV5640_SetLightMode+0x258>)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80022a2:	f107 020f 	add.w	r2, r7, #15
 80022a6:	2301      	movs	r3, #1
 80022a8:	f000 feea 	bl	8003080 <ov5640_write_reg>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	3301      	adds	r3, #1
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	2b06      	cmp	r3, #6
 80022c2:	d9dc      	bls.n	800227e <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 80022c4:	e04e      	b.n	8002364 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	e01f      	b.n	800230c <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d2:	d018      	beq.n	8002306 <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 80022d4:	4a29      	ldr	r2, [pc, #164]	; (800237c <OV5640_SetLightMode+0x25c>)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	885b      	ldrh	r3, [r3, #2]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f103 0018 	add.w	r0, r3, #24
 80022e8:	4a24      	ldr	r2, [pc, #144]	; (800237c <OV5640_SetLightMode+0x25c>)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80022f0:	f107 020f 	add.w	r2, r7, #15
 80022f4:	2301      	movs	r3, #1
 80022f6:	f000 fec3 	bl	8003080 <ov5640_write_reg>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 8002300:	f04f 33ff 	mov.w	r3, #4294967295
 8002304:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	3301      	adds	r3, #1
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	2b06      	cmp	r3, #6
 8002310:	d9dc      	bls.n	80022cc <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 8002312:	e027      	b.n	8002364 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	e01f      	b.n	800235a <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d018      	beq.n	8002354 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8002322:	4a17      	ldr	r2, [pc, #92]	; (8002380 <OV5640_SetLightMode+0x260>)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	885b      	ldrh	r3, [r3, #2]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f103 0018 	add.w	r0, r3, #24
 8002336:	4a12      	ldr	r2, [pc, #72]	; (8002380 <OV5640_SetLightMode+0x260>)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800233e:	f107 020f 	add.w	r2, r7, #15
 8002342:	2301      	movs	r3, #1
 8002344:	f000 fe9c 	bl	8003080 <ov5640_write_reg>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
 8002352:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	3301      	adds	r3, #1
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	2b06      	cmp	r3, #6
 800235e:	d9dc      	bls.n	800231a <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 8002360:	e000      	b.n	8002364 <OV5640_SetLightMode+0x244>
    }
  }
 8002362:	bf00      	nop
  return ret;
 8002364:	697b      	ldr	r3, [r7, #20]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	08010478 	.word	0x08010478
 8002374:	08010494 	.word	0x08010494
 8002378:	080104b0 	.word	0x080104b0
 800237c:	080104cc 	.word	0x080104cc
 8002380:	080104e8 	.word	0x080104e8

08002384 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	3b01      	subs	r3, #1
 8002392:	2b1f      	cmp	r3, #31
 8002394:	f200 81c0 	bhi.w	8002718 <OV5640_SetColorEffect+0x394>
 8002398:	a201      	add	r2, pc, #4	; (adr r2, 80023a0 <OV5640_SetColorEffect+0x1c>)
 800239a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239e:	bf00      	nop
 80023a0:	08002421 	.word	0x08002421
 80023a4:	080024ab 	.word	0x080024ab
 80023a8:	08002719 	.word	0x08002719
 80023ac:	08002535 	.word	0x08002535
 80023b0:	08002719 	.word	0x08002719
 80023b4:	08002719 	.word	0x08002719
 80023b8:	08002719 	.word	0x08002719
 80023bc:	080025bf 	.word	0x080025bf
 80023c0:	08002719 	.word	0x08002719
 80023c4:	08002719 	.word	0x08002719
 80023c8:	08002719 	.word	0x08002719
 80023cc:	08002719 	.word	0x08002719
 80023d0:	08002719 	.word	0x08002719
 80023d4:	08002719 	.word	0x08002719
 80023d8:	08002719 	.word	0x08002719
 80023dc:	08002649 	.word	0x08002649
 80023e0:	08002719 	.word	0x08002719
 80023e4:	08002719 	.word	0x08002719
 80023e8:	08002719 	.word	0x08002719
 80023ec:	08002719 	.word	0x08002719
 80023f0:	08002719 	.word	0x08002719
 80023f4:	08002719 	.word	0x08002719
 80023f8:	08002719 	.word	0x08002719
 80023fc:	08002719 	.word	0x08002719
 8002400:	08002719 	.word	0x08002719
 8002404:	08002719 	.word	0x08002719
 8002408:	08002719 	.word	0x08002719
 800240c:	08002719 	.word	0x08002719
 8002410:	08002719 	.word	0x08002719
 8002414:	08002719 	.word	0x08002719
 8002418:	08002719 	.word	0x08002719
 800241c:	080026d1 	.word	0x080026d1
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 8002420:	23ff      	movs	r3, #255	; 0xff
 8002422:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f103 0018 	add.w	r0, r3, #24
 800242a:	f107 020b 	add.w	r2, r7, #11
 800242e:	2301      	movs	r3, #1
 8002430:	f245 0101 	movw	r1, #20481	; 0x5001
 8002434:	f000 fe24 	bl	8003080 <ov5640_write_reg>
 8002438:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10c      	bne.n	800245a <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 8002440:	2318      	movs	r3, #24
 8002442:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f103 0018 	add.w	r0, r3, #24
 800244a:	f107 020b 	add.w	r2, r7, #11
 800244e:	2301      	movs	r3, #1
 8002450:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002454:	f000 fe14 	bl	8003080 <ov5640_write_reg>
 8002458:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10c      	bne.n	800247a <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 8002460:	23a0      	movs	r3, #160	; 0xa0
 8002462:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f103 0018 	add.w	r0, r3, #24
 800246a:	f107 020b 	add.w	r2, r7, #11
 800246e:	2301      	movs	r3, #1
 8002470:	f245 5183 	movw	r1, #21891	; 0x5583
 8002474:	f000 fe04 	bl	8003080 <ov5640_write_reg>
 8002478:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10c      	bne.n	800249a <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 8002480:	2340      	movs	r3, #64	; 0x40
 8002482:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f103 0018 	add.w	r0, r3, #24
 800248a:	f107 020b 	add.w	r2, r7, #11
 800248e:	2301      	movs	r3, #1
 8002490:	f245 5184 	movw	r1, #21892	; 0x5584
 8002494:	f000 fdf4 	bl	8003080 <ov5640_write_reg>
 8002498:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 815f 	beq.w	8002760 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 80024a2:	f04f 33ff 	mov.w	r3, #4294967295
 80024a6:	60fb      	str	r3, [r7, #12]
      }
      break;
 80024a8:	e15a      	b.n	8002760 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 80024aa:	23ff      	movs	r3, #255	; 0xff
 80024ac:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f103 0018 	add.w	r0, r3, #24
 80024b4:	f107 020b 	add.w	r2, r7, #11
 80024b8:	2301      	movs	r3, #1
 80024ba:	f245 0101 	movw	r1, #20481	; 0x5001
 80024be:	f000 fddf 	bl	8003080 <ov5640_write_reg>
 80024c2:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10c      	bne.n	80024e4 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 80024ca:	2318      	movs	r3, #24
 80024cc:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f103 0018 	add.w	r0, r3, #24
 80024d4:	f107 020b 	add.w	r2, r7, #11
 80024d8:	2301      	movs	r3, #1
 80024da:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80024de:	f000 fdcf 	bl	8003080 <ov5640_write_reg>
 80024e2:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10c      	bne.n	8002504 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f103 0018 	add.w	r0, r3, #24
 80024f4:	f107 020b 	add.w	r2, r7, #11
 80024f8:	2301      	movs	r3, #1
 80024fa:	f245 5183 	movw	r1, #21891	; 0x5583
 80024fe:	f000 fdbf 	bl	8003080 <ov5640_write_reg>
 8002502:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10c      	bne.n	8002524 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 800250a:	23c0      	movs	r3, #192	; 0xc0
 800250c:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f103 0018 	add.w	r0, r3, #24
 8002514:	f107 020b 	add.w	r2, r7, #11
 8002518:	2301      	movs	r3, #1
 800251a:	f245 5184 	movw	r1, #21892	; 0x5584
 800251e:	f000 fdaf 	bl	8003080 <ov5640_write_reg>
 8002522:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 811c 	beq.w	8002764 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 800252c:	f04f 33ff 	mov.w	r3, #4294967295
 8002530:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002532:	e117      	b.n	8002764 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 8002534:	23ff      	movs	r3, #255	; 0xff
 8002536:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f103 0018 	add.w	r0, r3, #24
 800253e:	f107 020b 	add.w	r2, r7, #11
 8002542:	2301      	movs	r3, #1
 8002544:	f245 0101 	movw	r1, #20481	; 0x5001
 8002548:	f000 fd9a 	bl	8003080 <ov5640_write_reg>
 800254c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10c      	bne.n	800256e <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 8002554:	2318      	movs	r3, #24
 8002556:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f103 0018 	add.w	r0, r3, #24
 800255e:	f107 020b 	add.w	r2, r7, #11
 8002562:	2301      	movs	r3, #1
 8002564:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002568:	f000 fd8a 	bl	8003080 <ov5640_write_reg>
 800256c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10c      	bne.n	800258e <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 8002574:	2360      	movs	r3, #96	; 0x60
 8002576:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f103 0018 	add.w	r0, r3, #24
 800257e:	f107 020b 	add.w	r2, r7, #11
 8002582:	2301      	movs	r3, #1
 8002584:	f245 5183 	movw	r1, #21891	; 0x5583
 8002588:	f000 fd7a 	bl	8003080 <ov5640_write_reg>
 800258c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10c      	bne.n	80025ae <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 8002594:	2360      	movs	r3, #96	; 0x60
 8002596:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f103 0018 	add.w	r0, r3, #24
 800259e:	f107 020b 	add.w	r2, r7, #11
 80025a2:	2301      	movs	r3, #1
 80025a4:	f245 5184 	movw	r1, #21892	; 0x5584
 80025a8:	f000 fd6a 	bl	8003080 <ov5640_write_reg>
 80025ac:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 80d9 	beq.w	8002768 <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 80025b6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ba:	60fb      	str	r3, [r7, #12]
      }
      break;
 80025bc:	e0d4      	b.n	8002768 <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 80025be:	23ff      	movs	r3, #255	; 0xff
 80025c0:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f103 0018 	add.w	r0, r3, #24
 80025c8:	f107 020b 	add.w	r2, r7, #11
 80025cc:	2301      	movs	r3, #1
 80025ce:	f245 0101 	movw	r1, #20481	; 0x5001
 80025d2:	f000 fd55 	bl	8003080 <ov5640_write_reg>
 80025d6:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10c      	bne.n	80025f8 <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 80025de:	2318      	movs	r3, #24
 80025e0:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f103 0018 	add.w	r0, r3, #24
 80025e8:	f107 020b 	add.w	r2, r7, #11
 80025ec:	2301      	movs	r3, #1
 80025ee:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80025f2:	f000 fd45 	bl	8003080 <ov5640_write_reg>
 80025f6:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10c      	bne.n	8002618 <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f103 0018 	add.w	r0, r3, #24
 8002608:	f107 020b 	add.w	r2, r7, #11
 800260c:	2301      	movs	r3, #1
 800260e:	f245 5183 	movw	r1, #21891	; 0x5583
 8002612:	f000 fd35 	bl	8003080 <ov5640_write_reg>
 8002616:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f103 0018 	add.w	r0, r3, #24
 8002628:	f107 020b 	add.w	r2, r7, #11
 800262c:	2301      	movs	r3, #1
 800262e:	f245 5184 	movw	r1, #21892	; 0x5584
 8002632:	f000 fd25 	bl	8003080 <ov5640_write_reg>
 8002636:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 8096 	beq.w	800276c <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8002640:	f04f 33ff 	mov.w	r3, #4294967295
 8002644:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002646:	e091      	b.n	800276c <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 8002648:	23ff      	movs	r3, #255	; 0xff
 800264a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f103 0018 	add.w	r0, r3, #24
 8002652:	f107 020b 	add.w	r2, r7, #11
 8002656:	2301      	movs	r3, #1
 8002658:	f245 0101 	movw	r1, #20481	; 0x5001
 800265c:	f000 fd10 	bl	8003080 <ov5640_write_reg>
 8002660:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10c      	bne.n	8002682 <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 8002668:	2318      	movs	r3, #24
 800266a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f103 0018 	add.w	r0, r3, #24
 8002672:	f107 020b 	add.w	r2, r7, #11
 8002676:	2301      	movs	r3, #1
 8002678:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800267c:	f000 fd00 	bl	8003080 <ov5640_write_reg>
 8002680:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10c      	bne.n	80026a2 <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 8002688:	2340      	movs	r3, #64	; 0x40
 800268a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f103 0018 	add.w	r0, r3, #24
 8002692:	f107 020b 	add.w	r2, r7, #11
 8002696:	2301      	movs	r3, #1
 8002698:	f245 5183 	movw	r1, #21891	; 0x5583
 800269c:	f000 fcf0 	bl	8003080 <ov5640_write_reg>
 80026a0:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10c      	bne.n	80026c2 <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 80026a8:	23a0      	movs	r3, #160	; 0xa0
 80026aa:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f103 0018 	add.w	r0, r3, #24
 80026b2:	f107 020b 	add.w	r2, r7, #11
 80026b6:	2301      	movs	r3, #1
 80026b8:	f245 5184 	movw	r1, #21892	; 0x5584
 80026bc:	f000 fce0 	bl	8003080 <ov5640_write_reg>
 80026c0:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d053      	beq.n	8002770 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 80026c8:	f04f 33ff 	mov.w	r3, #4294967295
 80026cc:	60fb      	str	r3, [r7, #12]
      }
      break;
 80026ce:	e04f      	b.n	8002770 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 80026d0:	23ff      	movs	r3, #255	; 0xff
 80026d2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f103 0018 	add.w	r0, r3, #24
 80026da:	f107 020b 	add.w	r2, r7, #11
 80026de:	2301      	movs	r3, #1
 80026e0:	f245 0101 	movw	r1, #20481	; 0x5001
 80026e4:	f000 fccc 	bl	8003080 <ov5640_write_reg>
 80026e8:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10c      	bne.n	800270a <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 80026f0:	2340      	movs	r3, #64	; 0x40
 80026f2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f103 0018 	add.w	r0, r3, #24
 80026fa:	f107 020b 	add.w	r2, r7, #11
 80026fe:	2301      	movs	r3, #1
 8002700:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002704:	f000 fcbc 	bl	8003080 <ov5640_write_reg>
 8002708:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d031      	beq.n	8002774 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 8002710:	f04f 33ff 	mov.w	r3, #4294967295
 8002714:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002716:	e02d      	b.n	8002774 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 8002718:	237f      	movs	r3, #127	; 0x7f
 800271a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f103 0018 	add.w	r0, r3, #24
 8002722:	f107 020b 	add.w	r2, r7, #11
 8002726:	2301      	movs	r3, #1
 8002728:	f245 0101 	movw	r1, #20481	; 0x5001
 800272c:	f000 fca8 	bl	8003080 <ov5640_write_reg>
 8002730:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10c      	bne.n	8002752 <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 8002738:	2300      	movs	r3, #0
 800273a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f103 0018 	add.w	r0, r3, #24
 8002742:	f107 020b 	add.w	r2, r7, #11
 8002746:	2301      	movs	r3, #1
 8002748:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800274c:	f000 fc98 	bl	8003080 <ov5640_write_reg>
 8002750:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00f      	beq.n	8002778 <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 8002758:	f04f 33ff 	mov.w	r3, #4294967295
 800275c:	60fb      	str	r3, [r7, #12]
      }

      break;
 800275e:	e00b      	b.n	8002778 <OV5640_SetColorEffect+0x3f4>
      break;
 8002760:	bf00      	nop
 8002762:	e00a      	b.n	800277a <OV5640_SetColorEffect+0x3f6>
      break;
 8002764:	bf00      	nop
 8002766:	e008      	b.n	800277a <OV5640_SetColorEffect+0x3f6>
      break;
 8002768:	bf00      	nop
 800276a:	e006      	b.n	800277a <OV5640_SetColorEffect+0x3f6>
      break;
 800276c:	bf00      	nop
 800276e:	e004      	b.n	800277a <OV5640_SetColorEffect+0x3f6>
      break;
 8002770:	bf00      	nop
 8002772:	e002      	b.n	800277a <OV5640_SetColorEffect+0x3f6>
      break;
 8002774:	bf00      	nop
 8002776:	e000      	b.n	800277a <OV5640_SetColorEffect+0x3f6>
      break;
 8002778:	bf00      	nop
  }

  return ret;
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 800278e:	4a34      	ldr	r2, [pc, #208]	; (8002860 <OV5640_SetBrightness+0xdc>)
 8002790:	f107 0310 	add.w	r3, r7, #16
 8002794:	ca07      	ldmia	r2, {r0, r1, r2}
 8002796:	c303      	stmia	r3!, {r0, r1}
 8002798:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800279a:	23ff      	movs	r3, #255	; 0xff
 800279c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f103 0018 	add.w	r0, r3, #24
 80027a4:	f107 020f 	add.w	r2, r7, #15
 80027a8:	2301      	movs	r3, #1
 80027aa:	f245 0101 	movw	r1, #20481	; 0x5001
 80027ae:	f000 fc67 	bl	8003080 <ov5640_write_reg>
 80027b2:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d111      	bne.n	80027de <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	3304      	adds	r3, #4
 80027be:	3320      	adds	r3, #32
 80027c0:	443b      	add	r3, r7
 80027c2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80027c6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f103 0018 	add.w	r0, r3, #24
 80027ce:	f107 020f 	add.w	r2, r7, #15
 80027d2:	2301      	movs	r3, #1
 80027d4:	f245 5187 	movw	r1, #21895	; 0x5587
 80027d8:	f000 fc52 	bl	8003080 <ov5640_write_reg>
 80027dc:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10c      	bne.n	80027fe <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 80027e4:	2304      	movs	r3, #4
 80027e6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f103 0018 	add.w	r0, r3, #24
 80027ee:	f107 020f 	add.w	r2, r7, #15
 80027f2:	2301      	movs	r3, #1
 80027f4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80027f8:	f000 fc42 	bl	8003080 <ov5640_write_reg>
 80027fc:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d127      	bne.n	8002854 <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	da12      	bge.n	8002830 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f103 0018 	add.w	r0, r3, #24
 8002814:	f107 020f 	add.w	r2, r7, #15
 8002818:	2301      	movs	r3, #1
 800281a:	f245 5188 	movw	r1, #21896	; 0x5588
 800281e:	f000 fc2f 	bl	8003080 <ov5640_write_reg>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d015      	beq.n	8002854 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8002828:	f04f 33ff 	mov.w	r3, #4294967295
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	e011      	b.n	8002854 <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 8002830:	2309      	movs	r3, #9
 8002832:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f103 0018 	add.w	r0, r3, #24
 800283a:	f107 020f 	add.w	r2, r7, #15
 800283e:	2301      	movs	r3, #1
 8002840:	f245 5188 	movw	r1, #21896	; 0x5588
 8002844:	f000 fc1c 	bl	8003080 <ov5640_write_reg>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 800284e:	f04f 33ff 	mov.w	r3, #4294967295
 8002852:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 8002854:	69fb      	ldr	r3, [r7, #28]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3720      	adds	r7, #32
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	0800ffc0 	.word	0x0800ffc0

08002864 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 800286e:	4a30      	ldr	r2, [pc, #192]	; (8002930 <OV5640_SetSaturation+0xcc>)
 8002870:	f107 0310 	add.w	r3, r7, #16
 8002874:	ca07      	ldmia	r2, {r0, r1, r2}
 8002876:	c303      	stmia	r3!, {r0, r1}
 8002878:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800287a:	23ff      	movs	r3, #255	; 0xff
 800287c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f103 0018 	add.w	r0, r3, #24
 8002884:	f107 020f 	add.w	r2, r7, #15
 8002888:	2301      	movs	r3, #1
 800288a:	f245 0101 	movw	r1, #20481	; 0x5001
 800288e:	f000 fbf7 	bl	8003080 <ov5640_write_reg>
 8002892:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d111      	bne.n	80028be <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	3304      	adds	r3, #4
 800289e:	3320      	adds	r3, #32
 80028a0:	443b      	add	r3, r7
 80028a2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80028a6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f103 0018 	add.w	r0, r3, #24
 80028ae:	f107 020f 	add.w	r2, r7, #15
 80028b2:	2301      	movs	r3, #1
 80028b4:	f245 5183 	movw	r1, #21891	; 0x5583
 80028b8:	f000 fbe2 	bl	8003080 <ov5640_write_reg>
 80028bc:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10a      	bne.n	80028da <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f103 0018 	add.w	r0, r3, #24
 80028ca:	f107 020f 	add.w	r2, r7, #15
 80028ce:	2301      	movs	r3, #1
 80028d0:	f245 5184 	movw	r1, #21892	; 0x5584
 80028d4:	f000 fbd4 	bl	8003080 <ov5640_write_reg>
 80028d8:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10c      	bne.n	80028fa <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 80028e0:	2302      	movs	r3, #2
 80028e2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f103 0018 	add.w	r0, r3, #24
 80028ea:	f107 020f 	add.w	r2, r7, #15
 80028ee:	2301      	movs	r3, #1
 80028f0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80028f4:	f000 fbc4 	bl	8003080 <ov5640_write_reg>
 80028f8:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10c      	bne.n	800291a <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 8002900:	2341      	movs	r3, #65	; 0x41
 8002902:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f103 0018 	add.w	r0, r3, #24
 800290a:	f107 020f 	add.w	r2, r7, #15
 800290e:	2301      	movs	r3, #1
 8002910:	f245 5188 	movw	r1, #21896	; 0x5588
 8002914:	f000 fbb4 	bl	8003080 <ov5640_write_reg>
 8002918:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 8002920:	f04f 33ff 	mov.w	r3, #4294967295
 8002924:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8002926:	69fb      	ldr	r3, [r7, #28]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3720      	adds	r7, #32
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	0800ffcc 	.word	0x0800ffcc

08002934 <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 800293e:	4a30      	ldr	r2, [pc, #192]	; (8002a00 <OV5640_SetContrast+0xcc>)
 8002940:	f107 0310 	add.w	r3, r7, #16
 8002944:	ca07      	ldmia	r2, {r0, r1, r2}
 8002946:	c303      	stmia	r3!, {r0, r1}
 8002948:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800294a:	23ff      	movs	r3, #255	; 0xff
 800294c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f103 0018 	add.w	r0, r3, #24
 8002954:	f107 020f 	add.w	r2, r7, #15
 8002958:	2301      	movs	r3, #1
 800295a:	f245 0101 	movw	r1, #20481	; 0x5001
 800295e:	f000 fb8f 	bl	8003080 <ov5640_write_reg>
 8002962:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10c      	bne.n	8002984 <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 800296a:	2304      	movs	r3, #4
 800296c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f103 0018 	add.w	r0, r3, #24
 8002974:	f107 020f 	add.w	r2, r7, #15
 8002978:	2301      	movs	r3, #1
 800297a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800297e:	f000 fb7f 	bl	8003080 <ov5640_write_reg>
 8002982:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d111      	bne.n	80029ae <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	3304      	adds	r3, #4
 800298e:	3320      	adds	r3, #32
 8002990:	443b      	add	r3, r7
 8002992:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002996:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f103 0018 	add.w	r0, r3, #24
 800299e:	f107 020f 	add.w	r2, r7, #15
 80029a2:	2301      	movs	r3, #1
 80029a4:	f245 5186 	movw	r1, #21894	; 0x5586
 80029a8:	f000 fb6a 	bl	8003080 <ov5640_write_reg>
 80029ac:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f103 0018 	add.w	r0, r3, #24
 80029ba:	f107 020f 	add.w	r2, r7, #15
 80029be:	2301      	movs	r3, #1
 80029c0:	f245 5185 	movw	r1, #21893	; 0x5585
 80029c4:	f000 fb5c 	bl	8003080 <ov5640_write_reg>
 80029c8:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10c      	bne.n	80029ea <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 80029d0:	2341      	movs	r3, #65	; 0x41
 80029d2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f103 0018 	add.w	r0, r3, #24
 80029da:	f107 020f 	add.w	r2, r7, #15
 80029de:	2301      	movs	r3, #1
 80029e0:	f245 5188 	movw	r1, #21896	; 0x5588
 80029e4:	f000 fb4c 	bl	8003080 <ov5640_write_reg>
 80029e8:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
 80029f4:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80029f6:	69fb      	ldr	r3, [r7, #28]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3720      	adds	r7, #32
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	0800ffd8 	.word	0x0800ffd8

08002a04 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08e      	sub	sp, #56	; 0x38
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8002a0e:	4a3c      	ldr	r2, [pc, #240]	; (8002b00 <OV5640_SetHueDegree+0xfc>)
 8002a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a14:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8002a1a:	4a3a      	ldr	r2, [pc, #232]	; (8002b04 <OV5640_SetHueDegree+0x100>)
 8002a1c:	f107 031c 	add.w	r3, r7, #28
 8002a20:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8002a26:	4a38      	ldr	r2, [pc, #224]	; (8002b08 <OV5640_SetHueDegree+0x104>)
 8002a28:	f107 0310 	add.w	r3, r7, #16
 8002a2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 8002a32:	23ff      	movs	r3, #255	; 0xff
 8002a34:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f103 0018 	add.w	r0, r3, #24
 8002a3c:	f107 020f 	add.w	r2, r7, #15
 8002a40:	2301      	movs	r3, #1
 8002a42:	f245 0101 	movw	r1, #20481	; 0x5001
 8002a46:	f000 fb1b 	bl	8003080 <ov5640_write_reg>
 8002a4a:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10c      	bne.n	8002a6c <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 8002a52:	2301      	movs	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f103 0018 	add.w	r0, r3, #24
 8002a5c:	f107 020f 	add.w	r2, r7, #15
 8002a60:	2301      	movs	r3, #1
 8002a62:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002a66:	f000 fb0b 	bl	8003080 <ov5640_write_reg>
 8002a6a:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d111      	bne.n	8002a96 <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	3306      	adds	r3, #6
 8002a76:	3338      	adds	r3, #56	; 0x38
 8002a78:	443b      	add	r3, r7
 8002a7a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002a7e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f103 0018 	add.w	r0, r3, #24
 8002a86:	f107 020f 	add.w	r2, r7, #15
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	f245 5181 	movw	r1, #21889	; 0x5581
 8002a90:	f000 faf6 	bl	8003080 <ov5640_write_reg>
 8002a94:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d111      	bne.n	8002ac0 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	3306      	adds	r3, #6
 8002aa0:	3338      	adds	r3, #56	; 0x38
 8002aa2:	443b      	add	r3, r7
 8002aa4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002aa8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f103 0018 	add.w	r0, r3, #24
 8002ab0:	f107 020f 	add.w	r2, r7, #15
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	f245 5182 	movw	r1, #21890	; 0x5582
 8002aba:	f000 fae1 	bl	8003080 <ov5640_write_reg>
 8002abe:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d111      	bne.n	8002aea <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	3306      	adds	r3, #6
 8002aca:	3338      	adds	r3, #56	; 0x38
 8002acc:	443b      	add	r3, r7
 8002ace:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ad2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f103 0018 	add.w	r0, r3, #24
 8002ada:	f107 020f 	add.w	r2, r7, #15
 8002ade:	2301      	movs	r3, #1
 8002ae0:	f245 5188 	movw	r1, #21896	; 0x5588
 8002ae4:	f000 facc 	bl	8003080 <ov5640_write_reg>
 8002ae8:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 8002aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 8002af0:	f04f 33ff 	mov.w	r3, #4294967295
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 8002af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3738      	adds	r7, #56	; 0x38
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	0800ffe4 	.word	0x0800ffe4
 8002b04:	0800fff0 	.word	0x0800fff0
 8002b08:	0800fffc 	.word	0x0800fffc

08002b0c <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f103 0018 	add.w	r0, r3, #24
 8002b20:	f107 020b 	add.w	r2, r7, #11
 8002b24:	2301      	movs	r3, #1
 8002b26:	f643 0120 	movw	r1, #14368	; 0x3820
 8002b2a:	f000 fa92 	bl	8003052 <ov5640_read_reg>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8002b34:	f04f 33ff 	mov.w	r3, #4294967295
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	e0cb      	b.n	8002cd4 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 8002b3c:	7afb      	ldrb	r3, [r7, #11]
 8002b3e:	f023 0306 	bic.w	r3, r3, #6
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f103 0018 	add.w	r0, r3, #24
 8002b4c:	f107 020a 	add.w	r2, r7, #10
 8002b50:	2301      	movs	r3, #1
 8002b52:	f643 0121 	movw	r1, #14369	; 0x3821
 8002b56:	f000 fa7c 	bl	8003052 <ov5640_read_reg>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 8002b60:	f04f 33ff 	mov.w	r3, #4294967295
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	e0b5      	b.n	8002cd4 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 8002b6c:	7abb      	ldrb	r3, [r7, #10]
 8002b6e:	f023 0306 	bic.w	r3, r3, #6
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d056      	beq.n	8002c2a <OV5640_MirrorFlipConfig+0x11e>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d87f      	bhi.n	8002c82 <OV5640_MirrorFlipConfig+0x176>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d029      	beq.n	8002bdc <OV5640_MirrorFlipConfig+0xd0>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d179      	bne.n	8002c82 <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f103 0018 	add.w	r0, r3, #24
 8002b94:	f107 020b 	add.w	r2, r7, #11
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f643 0120 	movw	r1, #14368	; 0x3820
 8002b9e:	f000 fa6f 	bl	8003080 <ov5640_write_reg>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 8002ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bac:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002bae:	e08a      	b.n	8002cc6 <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8002bb0:	7abb      	ldrb	r3, [r7, #10]
 8002bb2:	f043 0306 	orr.w	r3, r3, #6
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f103 0018 	add.w	r0, r3, #24
 8002bc0:	f107 020a 	add.w	r2, r7, #10
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	f643 0121 	movw	r1, #14369	; 0x3821
 8002bca:	f000 fa59 	bl	8003080 <ov5640_write_reg>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d078      	beq.n	8002cc6 <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8002bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd8:	60fb      	str	r3, [r7, #12]
          break;
 8002bda:	e074      	b.n	8002cc6 <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8002bdc:	7afb      	ldrb	r3, [r7, #11]
 8002bde:	f043 0306 	orr.w	r3, r3, #6
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f103 0018 	add.w	r0, r3, #24
 8002bec:	f107 020b 	add.w	r2, r7, #11
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f643 0120 	movw	r1, #14368	; 0x3820
 8002bf6:	f000 fa43 	bl	8003080 <ov5640_write_reg>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d003      	beq.n	8002c08 <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8002c00:	f04f 33ff 	mov.w	r3, #4294967295
 8002c04:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002c06:	e060      	b.n	8002cca <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f103 0018 	add.w	r0, r3, #24
 8002c0e:	f107 020a 	add.w	r2, r7, #10
 8002c12:	2301      	movs	r3, #1
 8002c14:	f643 0121 	movw	r1, #14369	; 0x3821
 8002c18:	f000 fa32 	bl	8003080 <ov5640_write_reg>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d053      	beq.n	8002cca <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295
 8002c26:	60fb      	str	r3, [r7, #12]
          break;
 8002c28:	e04f      	b.n	8002cca <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 8002c2a:	7afb      	ldrb	r3, [r7, #11]
 8002c2c:	f043 0306 	orr.w	r3, r3, #6
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f103 0018 	add.w	r0, r3, #24
 8002c3a:	f107 020b 	add.w	r2, r7, #11
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f643 0120 	movw	r1, #14368	; 0x3820
 8002c44:	f000 fa1c 	bl	8003080 <ov5640_write_reg>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 8002c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c52:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002c54:	e03b      	b.n	8002cce <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 8002c56:	7abb      	ldrb	r3, [r7, #10]
 8002c58:	f043 0306 	orr.w	r3, r3, #6
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f103 0018 	add.w	r0, r3, #24
 8002c66:	f107 020a 	add.w	r2, r7, #10
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f643 0121 	movw	r1, #14369	; 0x3821
 8002c70:	f000 fa06 	bl	8003080 <ov5640_write_reg>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d029      	beq.n	8002cce <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7e:	60fb      	str	r3, [r7, #12]
          break;
 8002c80:	e025      	b.n	8002cce <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f103 0018 	add.w	r0, r3, #24
 8002c88:	f107 020b 	add.w	r2, r7, #11
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f643 0120 	movw	r1, #14368	; 0x3820
 8002c92:	f000 f9f5 	bl	8003080 <ov5640_write_reg>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8002c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca0:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002ca2:	e016      	b.n	8002cd2 <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f103 0018 	add.w	r0, r3, #24
 8002caa:	f107 020a 	add.w	r2, r7, #10
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f643 0121 	movw	r1, #14369	; 0x3821
 8002cb4:	f000 f9e4 	bl	8003080 <ov5640_write_reg>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc2:	60fb      	str	r3, [r7, #12]
          break;
 8002cc4:	e005      	b.n	8002cd2 <OV5640_MirrorFlipConfig+0x1c6>
          break;
 8002cc6:	bf00      	nop
 8002cc8:	e004      	b.n	8002cd4 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002cca:	bf00      	nop
 8002ccc:	e002      	b.n	8002cd4 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002cce:	bf00      	nop
 8002cd0:	e000      	b.n	8002cd4 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002cd2:	bf00      	nop
      }
    }
  }

  return ret;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8002cec:	f107 030c 	add.w	r3, r7, #12
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff f8a2 	bl	8001e3c <OV5640_GetResolution>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e04e      	b.n	8002da4 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b44      	cmp	r3, #68	; 0x44
 8002d0e:	d112      	bne.n	8002d36 <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 8002d10:	2310      	movs	r3, #16
 8002d12:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f103 0018 	add.w	r0, r3, #24
 8002d1a:	f107 020b 	add.w	r2, r7, #11
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002d24:	f000 f9ac 	bl	8003080 <ov5640_write_reg>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d03a      	beq.n	8002da4 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 8002d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	e036      	b.n	8002da4 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d802      	bhi.n	8002d42 <OV5640_ZoomConfig+0x64>
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d103      	bne.n	8002d48 <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8002d40:	e00a      	b.n	8002d58 <OV5640_ZoomConfig+0x7a>
      switch (res)
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d004      	beq.n	8002d50 <OV5640_ZoomConfig+0x72>
          break;
 8002d46:	e007      	b.n	8002d58 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	613b      	str	r3, [r7, #16]
          break;
 8002d4e:	e003      	b.n	8002d58 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	089b      	lsrs	r3, r3, #2
 8002d54:	613b      	str	r3, [r7, #16]
          break;
 8002d56:	bf00      	nop
      }

      tmp = 0x00;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f103 0018 	add.w	r0, r3, #24
 8002d62:	f107 020b 	add.w	r2, r7, #11
 8002d66:	2301      	movs	r3, #1
 8002d68:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002d6c:	f000 f988 	bl	8003080 <ov5640_write_reg>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	e012      	b.n	8002da4 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f103 0018 	add.w	r0, r3, #24
 8002d8a:	f107 020b 	add.w	r2, r7, #11
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f245 6101 	movw	r1, #22017	; 0x5601
 8002d94:	f000 f974 	bl	8003080 <ov5640_write_reg>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 8002d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002da2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002da4:	697b      	ldr	r3, [r7, #20]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b084      	sub	sp, #16
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	f040 80ce 	bne.w	8002f60 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f103 0018 	add.w	r0, r3, #24
 8002dca:	f107 020b 	add.w	r2, r7, #11
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f243 0138 	movw	r1, #12344	; 0x3038
 8002dd4:	f000 f954 	bl	8003080 <ov5640_write_reg>
 8002dd8:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10a      	bne.n	8002df6 <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f103 0018 	add.w	r0, r3, #24
 8002de6:	f107 020b 	add.w	r2, r7, #11
 8002dea:	2301      	movs	r3, #1
 8002dec:	f243 0139 	movw	r1, #12345	; 0x3039
 8002df0:	f000 f946 	bl	8003080 <ov5640_write_reg>
 8002df4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10c      	bne.n	8002e16 <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 8002dfc:	237c      	movs	r3, #124	; 0x7c
 8002dfe:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f103 0018 	add.w	r0, r3, #24
 8002e06:	f107 020b 	add.w	r2, r7, #11
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002e10:	f000 f936 	bl	8003080 <ov5640_write_reg>
 8002e14:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10c      	bne.n	8002e36 <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f103 0018 	add.w	r0, r3, #24
 8002e26:	f107 020b 	add.w	r2, r7, #11
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f643 2108 	movw	r1, #14856	; 0x3a08
 8002e30:	f000 f926 	bl	8003080 <ov5640_write_reg>
 8002e34:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10c      	bne.n	8002e56 <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 8002e3c:	2327      	movs	r3, #39	; 0x27
 8002e3e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f103 0018 	add.w	r0, r3, #24
 8002e46:	f107 020b 	add.w	r2, r7, #11
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f643 2109 	movw	r1, #14857	; 0x3a09
 8002e50:	f000 f916 	bl	8003080 <ov5640_write_reg>
 8002e54:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10c      	bne.n	8002e76 <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f103 0018 	add.w	r0, r3, #24
 8002e66:	f107 020b 	add.w	r2, r7, #11
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8002e70:	f000 f906 	bl	8003080 <ov5640_write_reg>
 8002e74:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10c      	bne.n	8002e96 <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 8002e7c:	23f6      	movs	r3, #246	; 0xf6
 8002e7e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f103 0018 	add.w	r0, r3, #24
 8002e86:	f107 020b 	add.w	r2, r7, #11
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8002e90:	f000 f8f6 	bl	8003080 <ov5640_write_reg>
 8002e94:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10c      	bne.n	8002eb6 <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f103 0018 	add.w	r0, r3, #24
 8002ea6:	f107 020b 	add.w	r2, r7, #11
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8002eb0:	f000 f8e6 	bl	8003080 <ov5640_write_reg>
 8002eb4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10a      	bne.n	8002ed2 <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f103 0018 	add.w	r0, r3, #24
 8002ec2:	f107 020b 	add.w	r2, r7, #11
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8002ecc:	f000 f8d8 	bl	8003080 <ov5640_write_reg>
 8002ed0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10c      	bne.n	8002ef2 <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 8002ed8:	230b      	movs	r3, #11
 8002eda:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f103 0018 	add.w	r0, r3, #24
 8002ee2:	f107 020b 	add.w	r2, r7, #11
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f643 2102 	movw	r1, #14850	; 0x3a02
 8002eec:	f000 f8c8 	bl	8003080 <ov5640_write_reg>
 8002ef0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10c      	bne.n	8002f12 <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 8002ef8:	2388      	movs	r3, #136	; 0x88
 8002efa:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f103 0018 	add.w	r0, r3, #24
 8002f02:	f107 020b 	add.w	r2, r7, #11
 8002f06:	2301      	movs	r3, #1
 8002f08:	f643 2103 	movw	r1, #14851	; 0x3a03
 8002f0c:	f000 f8b8 	bl	8003080 <ov5640_write_reg>
 8002f10:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10c      	bne.n	8002f32 <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 8002f18:	230b      	movs	r3, #11
 8002f1a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f103 0018 	add.w	r0, r3, #24
 8002f22:	f107 020b 	add.w	r2, r7, #11
 8002f26:	2301      	movs	r3, #1
 8002f28:	f643 2114 	movw	r1, #14868	; 0x3a14
 8002f2c:	f000 f8a8 	bl	8003080 <ov5640_write_reg>
 8002f30:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10c      	bne.n	8002f52 <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 8002f38:	2388      	movs	r3, #136	; 0x88
 8002f3a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f103 0018 	add.w	r0, r3, #24
 8002f42:	f107 020b 	add.w	r2, r7, #11
 8002f46:	2301      	movs	r3, #1
 8002f48:	f643 2115 	movw	r1, #14869	; 0x3a15
 8002f4c:	f000 f898 	bl	8003080 <ov5640_write_reg>
 8002f50:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d02b      	beq.n	8002fb0 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 8002f58:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	e027      	b.n	8002fb0 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f103 0018 	add.w	r0, r3, #24
 8002f66:	f107 020b 	add.w	r2, r7, #11
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002f70:	f000 f86f 	bl	8003052 <ov5640_read_reg>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	e016      	b.n	8002fb0 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 8002f86:	7afb      	ldrb	r3, [r7, #11]
 8002f88:	f023 0304 	bic.w	r3, r3, #4
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f103 0018 	add.w	r0, r3, #24
 8002f96:	f107 020b 	add.w	r2, r7, #11
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002fa0:	f000 f86e 	bl	8003080 <ov5640_write_reg>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295
 8002fae:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	4798      	blx	r3
 8002fca:	4603      	mov	r3, r0
 8002fcc:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8002fce:	bf00      	nop
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	4798      	blx	r3
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	461a      	mov	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d8f5      	bhi.n	8002fd0 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002fee:	b590      	push	{r4, r7, lr}
 8002ff0:	b087      	sub	sp, #28
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	817b      	strh	r3, [r7, #10]
 8002ffe:	4613      	mov	r3, r2
 8003000:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	691c      	ldr	r4, [r3, #16]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	8918      	ldrh	r0, [r3, #8]
 800300e:	893b      	ldrh	r3, [r7, #8]
 8003010:	8979      	ldrh	r1, [r7, #10]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	47a0      	blx	r4
 8003016:	4603      	mov	r3, r0
}
 8003018:	4618      	mov	r0, r3
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	bd90      	pop	{r4, r7, pc}

08003020 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	461a      	mov	r2, r3
 800302c:	460b      	mov	r3, r1
 800302e:	817b      	strh	r3, [r7, #10]
 8003030:	4613      	mov	r3, r2
 8003032:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	68dc      	ldr	r4, [r3, #12]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	8918      	ldrh	r0, [r3, #8]
 8003040:	893b      	ldrh	r3, [r7, #8]
 8003042:	8979      	ldrh	r1, [r7, #10]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	47a0      	blx	r4
 8003048:	4603      	mov	r3, r0
}
 800304a:	4618      	mov	r0, r3
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	bd90      	pop	{r4, r7, pc}

08003052 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8003052:	b590      	push	{r4, r7, lr}
 8003054:	b085      	sub	sp, #20
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	461a      	mov	r2, r3
 800305e:	460b      	mov	r3, r1
 8003060:	817b      	strh	r3, [r7, #10]
 8003062:	4613      	mov	r3, r2
 8003064:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	685c      	ldr	r4, [r3, #4]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6898      	ldr	r0, [r3, #8]
 800306e:	893b      	ldrh	r3, [r7, #8]
 8003070:	8979      	ldrh	r1, [r7, #10]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	47a0      	blx	r4
 8003076:	4603      	mov	r3, r0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	bd90      	pop	{r4, r7, pc}

08003080 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	461a      	mov	r2, r3
 800308c:	460b      	mov	r3, r1
 800308e:	817b      	strh	r3, [r7, #10]
 8003090:	4613      	mov	r3, r2
 8003092:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681c      	ldr	r4, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6898      	ldr	r0, [r3, #8]
 800309c:	893b      	ldrh	r3, [r7, #8]
 800309e:	8979      	ldrh	r1, [r7, #10]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	47a0      	blx	r4
 80030a4:	4603      	mov	r3, r0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd90      	pop	{r4, r7, pc}
	...

080030b0 <postProcess>:
		uint32_t original_height,
		uint32_t scaled_width,
		uint32_t scaled_height,
		uint32_t grid_size,
		float probabilities[GRID_SIZE][GRID_SIZE]
){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
	if(scaled_width != scaled_height){
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d14f      	bne.n	8003166 <postProcess+0xb6>
		return;
	}

	uint8_t pixels_per_grid = scaled_width/GRID_SIZE;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	4a29      	ldr	r2, [pc, #164]	; (8003170 <postProcess+0xc0>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	08db      	lsrs	r3, r3, #3
 80030d0:	757b      	strb	r3, [r7, #21]

	for(uint8_t i=0; i<GRID_SIZE; i++){
 80030d2:	2300      	movs	r3, #0
 80030d4:	75fb      	strb	r3, [r7, #23]
 80030d6:	e042      	b.n	800315e <postProcess+0xae>
		for(uint8_t j=0; j<GRID_SIZE; j++){
 80030d8:	2300      	movs	r3, #0
 80030da:	75bb      	strb	r3, [r7, #22]
 80030dc:	e039      	b.n	8003152 <postProcess+0xa2>
			if(probabilities[j][i]>THRESHOLD){
 80030de:	7dba      	ldrb	r2, [r7, #22]
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	461a      	mov	r2, r3
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	441a      	add	r2, r3
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	edd3 7a00 	vldr	s15, [r3]
 80030f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80030fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003104:	dd22      	ble.n	800314c <postProcess+0x9c>
				drawCrosshair(buffer, ((i*pixels_per_grid+pixels_per_grid/2)*original_width)/scaled_width, ((j*pixels_per_grid+pixels_per_grid/2)*original_height)/scaled_height);
 8003106:	7dfb      	ldrb	r3, [r7, #23]
 8003108:	7d7a      	ldrb	r2, [r7, #21]
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	7d7a      	ldrb	r2, [r7, #21]
 8003110:	0852      	lsrs	r2, r2, #1
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	4413      	add	r3, r2
 8003116:	461a      	mov	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	fb03 f202 	mul.w	r2, r3, r2
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	fbb2 f3f3 	udiv	r3, r2, r3
 8003124:	4619      	mov	r1, r3
 8003126:	7dbb      	ldrb	r3, [r7, #22]
 8003128:	7d7a      	ldrb	r2, [r7, #21]
 800312a:	fb02 f303 	mul.w	r3, r2, r3
 800312e:	7d7a      	ldrb	r2, [r7, #21]
 8003130:	0852      	lsrs	r2, r2, #1
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	4413      	add	r3, r2
 8003136:	461a      	mov	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	fb03 f202 	mul.w	r2, r3, r2
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	461a      	mov	r2, r3
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f7fd fccc 	bl	8000ae4 <drawCrosshair>
		for(uint8_t j=0; j<GRID_SIZE; j++){
 800314c:	7dbb      	ldrb	r3, [r7, #22]
 800314e:	3301      	adds	r3, #1
 8003150:	75bb      	strb	r3, [r7, #22]
 8003152:	7dbb      	ldrb	r3, [r7, #22]
 8003154:	2b0b      	cmp	r3, #11
 8003156:	d9c2      	bls.n	80030de <postProcess+0x2e>
	for(uint8_t i=0; i<GRID_SIZE; i++){
 8003158:	7dfb      	ldrb	r3, [r7, #23]
 800315a:	3301      	adds	r3, #1
 800315c:	75fb      	strb	r3, [r7, #23]
 800315e:	7dfb      	ldrb	r3, [r7, #23]
 8003160:	2b0b      	cmp	r3, #11
 8003162:	d9b9      	bls.n	80030d8 <postProcess+0x28>
 8003164:	e000      	b.n	8003168 <postProcess+0xb8>
		return;
 8003166:	bf00      	nop
			}
		}
	}
}
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	aaaaaaab 	.word	0xaaaaaaab

08003174 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800317c:	4a07      	ldr	r2, [pc, #28]	; (800319c <RetargetInit+0x28>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8003182:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <RetargetInit+0x2c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6898      	ldr	r0, [r3, #8]
 8003188:	2300      	movs	r3, #0
 800318a:	2202      	movs	r2, #2
 800318c:	2100      	movs	r1, #0
 800318e:	f00c fac5 	bl	800f71c <setvbuf>
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	24000528 	.word	0x24000528
 80031a0:	24000294 	.word	0x24000294

080031a4 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d002      	beq.n	80031bc <_write+0x18>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d111      	bne.n	80031e0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80031bc:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <_write+0x54>)
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	f04f 33ff 	mov.w	r3, #4294967295
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	f00a fa5a 	bl	800d682 <HAL_UART_Transmit>
 80031ce:	4603      	mov	r3, r0
 80031d0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80031d2:	7dfb      	ldrb	r3, [r7, #23]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <_write+0x38>
      return len;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	e008      	b.n	80031ee <_write+0x4a>
    else
      return EIO;
 80031dc:	2305      	movs	r3, #5
 80031de:	e006      	b.n	80031ee <_write+0x4a>
  }
  errno = EBADF;
 80031e0:	f00c fa6a 	bl	800f6b8 <__errno>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2209      	movs	r2, #9
 80031e8:	601a      	str	r2, [r3, #0]
  return -1;
 80031ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	24000528 	.word	0x24000528

080031fc <_close>:

int _close(int fd) {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	db04      	blt.n	8003214 <_close+0x18>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b02      	cmp	r3, #2
 800320e:	dc01      	bgt.n	8003214 <_close+0x18>
    return 0;
 8003210:	2300      	movs	r3, #0
 8003212:	e006      	b.n	8003222 <_close+0x26>

  errno = EBADF;
 8003214:	f00c fa50 	bl	800f6b8 <__errno>
 8003218:	4603      	mov	r3, r0
 800321a:	2209      	movs	r2, #9
 800321c:	601a      	str	r2, [r3, #0]
  return -1;
 800321e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <_read>:

int _read(int fd, char* ptr, int len) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d110      	bne.n	8003260 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800323e:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <_read+0x4c>)
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	f04f 33ff 	mov.w	r3, #4294967295
 8003246:	2201      	movs	r2, #1
 8003248:	68b9      	ldr	r1, [r7, #8]
 800324a:	f00a faa8 	bl	800d79e <HAL_UART_Receive>
 800324e:	4603      	mov	r3, r0
 8003250:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <_read+0x30>
      return 1;
 8003258:	2301      	movs	r3, #1
 800325a:	e008      	b.n	800326e <_read+0x42>
    else
      return EIO;
 800325c:	2305      	movs	r3, #5
 800325e:	e006      	b.n	800326e <_read+0x42>
  }
  errno = EBADF;
 8003260:	f00c fa2a 	bl	800f6b8 <__errno>
 8003264:	4603      	mov	r3, r0
 8003266:	2209      	movs	r2, #9
 8003268:	601a      	str	r2, [r3, #0]
  return -1;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	24000528 	.word	0x24000528

0800327c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	db08      	blt.n	800329e <_fstat+0x22>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	dc05      	bgt.n	800329e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003298:	605a      	str	r2, [r3, #4]
    return 0;
 800329a:	2300      	movs	r3, #0
 800329c:	e005      	b.n	80032aa <_fstat+0x2e>
  }

  errno = EBADF;
 800329e:	f00c fa0b 	bl	800f6b8 <__errno>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2209      	movs	r2, #9
 80032a6:	601a      	str	r2, [r3, #0]
  return 0;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80032b8:	4b11      	ldr	r3, [pc, #68]	; (8003300 <MX_RTC_Init+0x4c>)
 80032ba:	4a12      	ldr	r2, [pc, #72]	; (8003304 <MX_RTC_Init+0x50>)
 80032bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80032be:	4b10      	ldr	r3, [pc, #64]	; (8003300 <MX_RTC_Init+0x4c>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80032c4:	4b0e      	ldr	r3, [pc, #56]	; (8003300 <MX_RTC_Init+0x4c>)
 80032c6:	227f      	movs	r2, #127	; 0x7f
 80032c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80032ca:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <MX_RTC_Init+0x4c>)
 80032cc:	22ff      	movs	r2, #255	; 0xff
 80032ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <MX_RTC_Init+0x4c>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <MX_RTC_Init+0x4c>)
 80032d8:	2200      	movs	r2, #0
 80032da:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80032dc:	4b08      	ldr	r3, [pc, #32]	; (8003300 <MX_RTC_Init+0x4c>)
 80032de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032e2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <MX_RTC_Init+0x4c>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80032ea:	4805      	ldr	r0, [pc, #20]	; (8003300 <MX_RTC_Init+0x4c>)
 80032ec:	f009 ffc2 	bl	800d274 <HAL_RTC_Init>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80032f6:	f7fe fa33 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80032fa:	bf00      	nop
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	2400052c 	.word	0x2400052c
 8003304:	58004000 	.word	0x58004000

08003308 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b0b2      	sub	sp, #200	; 0xc8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003310:	f107 0308 	add.w	r3, r7, #8
 8003314:	22c0      	movs	r2, #192	; 0xc0
 8003316:	2100      	movs	r1, #0
 8003318:	4618      	mov	r0, r3
 800331a:	f00c f9f7 	bl	800f70c <memset>
  if(rtcHandle->Instance==RTC)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a10      	ldr	r2, [pc, #64]	; (8003364 <HAL_RTC_MspInit+0x5c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d119      	bne.n	800335c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003328:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003338:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800333c:	f107 0308 	add.w	r3, r7, #8
 8003340:	4618      	mov	r0, r3
 8003342:	f008 f9b7 	bl	800b6b4 <HAL_RCCEx_PeriphCLKConfig>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800334c:	f7fe fa08 	bl	8001760 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RTC_MspInit+0x60>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	4a04      	ldr	r2, [pc, #16]	; (8003368 <HAL_RTC_MspInit+0x60>)
 8003356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800335a:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800335c:	bf00      	nop
 800335e:	37c8      	adds	r7, #200	; 0xc8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	58004000 	.word	0x58004000
 8003368:	58024400 	.word	0x58024400

0800336c <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003372:	2300      	movs	r3, #0
 8003374:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8003376:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <BSP_I2C4_Init+0x64>)
 8003378:	4a16      	ldr	r2, [pc, #88]	; (80033d4 <BSP_I2C4_Init+0x68>)
 800337a:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800337c:	4b16      	ldr	r3, [pc, #88]	; (80033d8 <BSP_I2C4_Init+0x6c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d11f      	bne.n	80033c4 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8003384:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <BSP_I2C4_Init+0x6c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3301      	adds	r3, #1
 800338a:	4a13      	ldr	r2, [pc, #76]	; (80033d8 <BSP_I2C4_Init+0x6c>)
 800338c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800338e:	4810      	ldr	r0, [pc, #64]	; (80033d0 <BSP_I2C4_Init+0x64>)
 8003390:	f006 fa2a 	bl	80097e8 <HAL_I2C_GetState>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d114      	bne.n	80033c4 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800339a:	480d      	ldr	r0, [pc, #52]	; (80033d0 <BSP_I2C4_Init+0x64>)
 800339c:	f000 fb60 	bl	8003a60 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80033a0:	f008 f972 	bl	800b688 <HAL_RCC_GetPCLK2Freq>
 80033a4:	4603      	mov	r3, r0
 80033a6:	490d      	ldr	r1, [pc, #52]	; (80033dc <BSP_I2C4_Init+0x70>)
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 f8e3 	bl	8003574 <I2C_GetTiming>
 80033ae:	4603      	mov	r3, r0
 80033b0:	4619      	mov	r1, r3
 80033b2:	4807      	ldr	r0, [pc, #28]	; (80033d0 <BSP_I2C4_Init+0x64>)
 80033b4:	f000 f838 	bl	8003428 <MX_I2C4_Init>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80033be:	f06f 0307 	mvn.w	r3, #7
 80033c2:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 80033c4:	687b      	ldr	r3, [r7, #4]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	24000f5c 	.word	0x24000f5c
 80033d4:	58001c00 	.word	0x58001c00
 80033d8:	24000554 	.word	0x24000554
 80033dc:	000186a0 	.word	0x000186a0

080033e0 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 80033ea:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <BSP_I2C4_DeInit+0x40>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <BSP_I2C4_DeInit+0x40>)
 80033f2:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 80033f4:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <BSP_I2C4_DeInit+0x40>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10b      	bne.n	8003414 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 80033fc:	4809      	ldr	r0, [pc, #36]	; (8003424 <BSP_I2C4_DeInit+0x44>)
 80033fe:	f000 fb9b 	bl	8003b38 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8003402:	4808      	ldr	r0, [pc, #32]	; (8003424 <BSP_I2C4_DeInit+0x44>)
 8003404:	f005 ff7e 	bl	8009304 <HAL_I2C_DeInit>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800340e:	f06f 0307 	mvn.w	r3, #7
 8003412:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8003414:	687b      	ldr	r3, [r7, #4]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	24000554 	.word	0x24000554
 8003424:	24000f5c 	.word	0x24000f5c

08003428 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f005 febc 	bl	80091e4 <HAL_I2C_Init>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
 8003476:	e014      	b.n	80034a2 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8003478:	2300      	movs	r3, #0
 800347a:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f006 fc84 	bl	8009d8c <HAL_I2CEx_ConfigAnalogFilter>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
 800348e:	e008      	b.n	80034a2 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003490:	2100      	movs	r1, #0
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f006 fcc5 	bl	8009e22 <HAL_I2CEx_ConfigDigitalFilter>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	60ba      	str	r2, [r7, #8]
 80034b4:	461a      	mov	r2, r3
 80034b6:	4603      	mov	r3, r0
 80034b8:	81fb      	strh	r3, [r7, #14]
 80034ba:	460b      	mov	r3, r1
 80034bc:	81bb      	strh	r3, [r7, #12]
 80034be:	4613      	mov	r3, r2
 80034c0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80034c2:	89b9      	ldrh	r1, [r7, #12]
 80034c4:	89f8      	ldrh	r0, [r7, #14]
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2202      	movs	r2, #2
 80034ce:	f000 fb57 	bl	8003b80 <I2C4_WriteReg>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	e00c      	b.n	80034f8 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80034de:	4809      	ldr	r0, [pc, #36]	; (8003504 <BSP_I2C4_WriteReg16+0x58>)
 80034e0:	f006 f990 	bl	8009804 <HAL_I2C_GetError>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d103      	bne.n	80034f2 <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80034ea:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	e002      	b.n	80034f8 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80034f2:	f06f 0303 	mvn.w	r3, #3
 80034f6:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80034f8:	697b      	ldr	r3, [r7, #20]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	24000f5c 	.word	0x24000f5c

08003508 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af02      	add	r7, sp, #8
 800350e:	60ba      	str	r2, [r7, #8]
 8003510:	461a      	mov	r2, r3
 8003512:	4603      	mov	r3, r0
 8003514:	81fb      	strh	r3, [r7, #14]
 8003516:	460b      	mov	r3, r1
 8003518:	81bb      	strh	r3, [r7, #12]
 800351a:	4613      	mov	r3, r2
 800351c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 800351e:	89b9      	ldrh	r1, [r7, #12]
 8003520:	89f8      	ldrh	r0, [r7, #14]
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2202      	movs	r2, #2
 800352a:	f000 fb4f 	bl	8003bcc <I2C4_ReadReg>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d102      	bne.n	800353a <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	e00c      	b.n	8003554 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800353a:	4809      	ldr	r0, [pc, #36]	; (8003560 <BSP_I2C4_ReadReg16+0x58>)
 800353c:	f006 f962 	bl	8009804 <HAL_I2C_GetError>
 8003540:	4603      	mov	r3, r0
 8003542:	2b04      	cmp	r3, #4
 8003544:	d103      	bne.n	800354e <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003546:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	e002      	b.n	8003554 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800354e:	f06f 0303 	mvn.w	r3, #3
 8003552:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003554:	697b      	ldr	r3, [r7, #20]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	24000f5c 	.word	0x24000f5c

08003564 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8003568:	f000 ffd4 	bl	8004514 <HAL_GetTick>
 800356c:	4603      	mov	r3, r0
}
 800356e:	4618      	mov	r0, r3
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d06b      	beq.n	8003660 <I2C_GetTiming+0xec>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d068      	beq.n	8003660 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	e060      	b.n	8003656 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003594:	4a35      	ldr	r2, [pc, #212]	; (800366c <I2C_GetTiming+0xf8>)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	212c      	movs	r1, #44	; 0x2c
 800359a:	fb01 f303 	mul.w	r3, r1, r3
 800359e:	4413      	add	r3, r2
 80035a0:	3304      	adds	r3, #4
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d352      	bcc.n	8003650 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80035aa:	4a30      	ldr	r2, [pc, #192]	; (800366c <I2C_GetTiming+0xf8>)
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	212c      	movs	r1, #44	; 0x2c
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	4413      	add	r3, r2
 80035b6:	3308      	adds	r3, #8
 80035b8:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d847      	bhi.n	8003650 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80035c0:	6939      	ldr	r1, [r7, #16]
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f856 	bl	8003674 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80035c8:	6939      	ldr	r1, [r7, #16]
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f940 	bl	8003850 <I2C_Compute_SCLL_SCLH>
 80035d0:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2b7f      	cmp	r3, #127	; 0x7f
 80035d6:	d842      	bhi.n	800365e <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80035d8:	4925      	ldr	r1, [pc, #148]	; (8003670 <I2C_GetTiming+0xfc>)
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80035ea:	4821      	ldr	r0, [pc, #132]	; (8003670 <I2C_GetTiming+0xfc>)
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4403      	add	r3, r0
 80035f8:	3304      	adds	r3, #4
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	051b      	lsls	r3, r3, #20
 80035fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003602:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003604:	481a      	ldr	r0, [pc, #104]	; (8003670 <I2C_GetTiming+0xfc>)
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4403      	add	r3, r0
 8003612:	3308      	adds	r3, #8
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	041b      	lsls	r3, r3, #16
 8003618:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800361c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800361e:	4814      	ldr	r0, [pc, #80]	; (8003670 <I2C_GetTiming+0xfc>)
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4403      	add	r3, r0
 800362c:	330c      	adds	r3, #12
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003634:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8003636:	480e      	ldr	r0, [pc, #56]	; (8003670 <I2C_GetTiming+0xfc>)
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4403      	add	r3, r0
 8003644:	3310      	adds	r3, #16
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800364a:	430b      	orrs	r3, r1
 800364c:	617b      	str	r3, [r7, #20]
        }
        break;
 800364e:	e006      	b.n	800365e <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	3301      	adds	r3, #1
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d99b      	bls.n	8003594 <I2C_GetTiming+0x20>
 800365c:	e000      	b.n	8003660 <I2C_GetTiming+0xec>
        break;
 800365e:	bf00      	nop
      }
    }
  }

  return ret;
 8003660:	697b      	ldr	r3, [r7, #20]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	08010504 	.word	0x08010504
 8003670:	24000558 	.word	0x24000558

08003674 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003674:	b480      	push	{r7}
 8003676:	b08f      	sub	sp, #60	; 0x3c
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800367e:	2310      	movs	r3, #16
 8003680:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	085a      	lsrs	r2, r3, #1
 8003686:	4b6e      	ldr	r3, [pc, #440]	; (8003840 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8003688:	4413      	add	r3, r2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003690:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003692:	2332      	movs	r3, #50	; 0x32
 8003694:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8003696:	f44f 7382 	mov.w	r3, #260	; 0x104
 800369a:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800369c:	4a69      	ldr	r2, [pc, #420]	; (8003844 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	212c      	movs	r1, #44	; 0x2c
 80036a2:	fb01 f303 	mul.w	r3, r1, r3
 80036a6:	4413      	add	r3, r2
 80036a8:	3324      	adds	r3, #36	; 0x24
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	4a65      	ldr	r2, [pc, #404]	; (8003844 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	212c      	movs	r1, #44	; 0x2c
 80036b4:	fb01 f303 	mul.w	r3, r1, r3
 80036b8:	4413      	add	r3, r2
 80036ba:	330c      	adds	r3, #12
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80036c0:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80036c2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80036c4:	495f      	ldr	r1, [pc, #380]	; (8003844 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	202c      	movs	r0, #44	; 0x2c
 80036ca:	fb00 f303 	mul.w	r3, r0, r3
 80036ce:	440b      	add	r3, r1
 80036d0:	3328      	adds	r3, #40	; 0x28
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3303      	adds	r3, #3
 80036d6:	69f9      	ldr	r1, [r7, #28]
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80036e0:	4a58      	ldr	r2, [pc, #352]	; (8003844 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	212c      	movs	r1, #44	; 0x2c
 80036e6:	fb01 f303 	mul.w	r3, r1, r3
 80036ea:	4413      	add	r3, r2
 80036ec:	3310      	adds	r3, #16
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	4a54      	ldr	r2, [pc, #336]	; (8003844 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	212c      	movs	r1, #44	; 0x2c
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	3320      	adds	r3, #32
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003704:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003706:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003708:	494e      	ldr	r1, [pc, #312]	; (8003844 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	202c      	movs	r0, #44	; 0x2c
 800370e:	fb00 f303 	mul.w	r3, r0, r3
 8003712:	440b      	add	r3, r1
 8003714:	3328      	adds	r3, #40	; 0x28
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3304      	adds	r3, #4
 800371a:	69f9      	ldr	r1, [r7, #28]
 800371c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8003724:	4a47      	ldr	r2, [pc, #284]	; (8003844 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	212c      	movs	r1, #44	; 0x2c
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	4413      	add	r3, r2
 8003730:	3320      	adds	r3, #32
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	4a43      	ldr	r2, [pc, #268]	; (8003844 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	212c      	movs	r1, #44	; 0x2c
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	4413      	add	r3, r2
 8003742:	3314      	adds	r3, #20
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4403      	add	r3, r0
 8003748:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	2b00      	cmp	r3, #0
 800374e:	dc01      	bgt.n	8003754 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003756:	2b00      	cmp	r3, #0
 8003758:	dc01      	bgt.n	800375e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800375e:	2300      	movs	r3, #0
 8003760:	62bb      	str	r3, [r7, #40]	; 0x28
 8003762:	e062      	b.n	800382a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003764:	2300      	movs	r3, #0
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
 8003768:	e059      	b.n	800381e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	3301      	adds	r3, #1
 800376e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003770:	3201      	adds	r2, #1
 8003772:	fb03 f202 	mul.w	r2, r3, r2
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	fb02 f303 	mul.w	r3, r2, r3
 800377c:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	429a      	cmp	r2, r3
 8003784:	d348      	bcc.n	8003818 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003786:	2300      	movs	r3, #0
 8003788:	623b      	str	r3, [r7, #32]
 800378a:	e042      	b.n	8003812 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378e:	3301      	adds	r3, #1
 8003790:	6a3a      	ldr	r2, [r7, #32]
 8003792:	fb03 f202 	mul.w	r2, r3, r2
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	fb02 f303 	mul.w	r3, r2, r3
 800379c:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d332      	bcc.n	800380c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80037a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d82e      	bhi.n	800380c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 80037ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d02a      	beq.n	800380c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80037b6:	4b24      	ldr	r3, [pc, #144]	; (8003848 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4924      	ldr	r1, [pc, #144]	; (800384c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037c8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80037ca:	4b1f      	ldr	r3, [pc, #124]	; (8003848 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	491f      	ldr	r1, [pc, #124]	; (800384c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	3304      	adds	r3, #4
 80037dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037de:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80037e0:	4b19      	ldr	r3, [pc, #100]	; (8003848 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4919      	ldr	r1, [pc, #100]	; (800384c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	3308      	adds	r3, #8
 80037f2:	6a3a      	ldr	r2, [r7, #32]
 80037f4:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3301      	adds	r3, #1
 8003800:	4a11      	ldr	r2, [pc, #68]	; (8003848 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003802:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003804:	4b10      	ldr	r3, [pc, #64]	; (8003848 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b7f      	cmp	r3, #127	; 0x7f
 800380a:	d812      	bhi.n	8003832 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	3301      	adds	r3, #1
 8003810:	623b      	str	r3, [r7, #32]
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	2b0f      	cmp	r3, #15
 8003816:	d9b9      	bls.n	800378c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	3301      	adds	r3, #1
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	2b0f      	cmp	r3, #15
 8003822:	d9a2      	bls.n	800376a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	3301      	adds	r3, #1
 8003828:	62bb      	str	r3, [r7, #40]	; 0x28
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	2b0f      	cmp	r3, #15
 800382e:	d999      	bls.n	8003764 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8003830:	e000      	b.n	8003834 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8003832:	bf00      	nop
          }
        }
      }
    }
  }
}
 8003834:	373c      	adds	r7, #60	; 0x3c
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	3b9aca00 	.word	0x3b9aca00
 8003844:	08010504 	.word	0x08010504
 8003848:	24000f58 	.word	0x24000f58
 800384c:	24000558 	.word	0x24000558

08003850 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003850:	b480      	push	{r7}
 8003852:	b093      	sub	sp, #76	; 0x4c
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800385a:	f04f 33ff 	mov.w	r3, #4294967295
 800385e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	085a      	lsrs	r2, r3, #1
 8003864:	4b7a      	ldr	r3, [pc, #488]	; (8003a50 <I2C_Compute_SCLL_SCLH+0x200>)
 8003866:	4413      	add	r3, r2
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	fbb3 f3f2 	udiv	r3, r3, r2
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003870:	4a78      	ldr	r2, [pc, #480]	; (8003a54 <I2C_Compute_SCLL_SCLH+0x204>)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	212c      	movs	r1, #44	; 0x2c
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	4413      	add	r3, r2
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	085a      	lsrs	r2, r3, #1
 8003880:	4b73      	ldr	r3, [pc, #460]	; (8003a50 <I2C_Compute_SCLL_SCLH+0x200>)
 8003882:	4413      	add	r3, r2
 8003884:	4973      	ldr	r1, [pc, #460]	; (8003a54 <I2C_Compute_SCLL_SCLH+0x204>)
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	202c      	movs	r0, #44	; 0x2c
 800388a:	fb00 f202 	mul.w	r2, r0, r2
 800388e:	440a      	add	r2, r1
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	fbb3 f3f2 	udiv	r3, r3, r2
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003898:	2332      	movs	r3, #50	; 0x32
 800389a:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800389c:	4a6d      	ldr	r2, [pc, #436]	; (8003a54 <I2C_Compute_SCLL_SCLH+0x204>)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	212c      	movs	r1, #44	; 0x2c
 80038a2:	fb01 f303 	mul.w	r3, r1, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	3328      	adds	r3, #40	; 0x28
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ae:	fb02 f303 	mul.w	r3, r2, r3
 80038b2:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80038b4:	4a67      	ldr	r2, [pc, #412]	; (8003a54 <I2C_Compute_SCLL_SCLH+0x204>)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	212c      	movs	r1, #44	; 0x2c
 80038ba:	fb01 f303 	mul.w	r3, r1, r3
 80038be:	4413      	add	r3, r2
 80038c0:	3304      	adds	r3, #4
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a62      	ldr	r2, [pc, #392]	; (8003a50 <I2C_Compute_SCLL_SCLH+0x200>)
 80038c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ca:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80038cc:	4a61      	ldr	r2, [pc, #388]	; (8003a54 <I2C_Compute_SCLL_SCLH+0x204>)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	212c      	movs	r1, #44	; 0x2c
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	3308      	adds	r3, #8
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a5c      	ldr	r2, [pc, #368]	; (8003a50 <I2C_Compute_SCLL_SCLH+0x200>)
 80038de:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e2:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80038e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e6:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80038e8:	2300      	movs	r3, #0
 80038ea:	637b      	str	r3, [r7, #52]	; 0x34
 80038ec:	e0a3      	b.n	8003a36 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80038ee:	495a      	ldr	r1, [pc, #360]	; (8003a58 <I2C_Compute_SCLL_SCLH+0x208>)
 80038f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003908:	2300      	movs	r3, #0
 800390a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800390c:	e08c      	b.n	8003a28 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	441a      	add	r2, r3
 8003914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003916:	3301      	adds	r3, #1
 8003918:	6979      	ldr	r1, [r7, #20]
 800391a:	fb03 f101 	mul.w	r1, r3, r1
 800391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	440b      	add	r3, r1
 8003924:	4413      	add	r3, r2
 8003926:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003928:	4a4a      	ldr	r2, [pc, #296]	; (8003a54 <I2C_Compute_SCLL_SCLH+0x204>)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	212c      	movs	r1, #44	; 0x2c
 800392e:	fb01 f303 	mul.w	r3, r1, r3
 8003932:	4413      	add	r3, r2
 8003934:	3318      	adds	r3, #24
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	429a      	cmp	r2, r3
 800393c:	d971      	bls.n	8003a22 <I2C_Compute_SCLL_SCLH+0x1d2>
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	1ad2      	subs	r2, r2, r3
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	089b      	lsrs	r3, r3, #2
 800394a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800394c:	429a      	cmp	r2, r3
 800394e:	d268      	bcs.n	8003a22 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003950:	2300      	movs	r3, #0
 8003952:	63bb      	str	r3, [r7, #56]	; 0x38
 8003954:	e062      	b.n	8003a1c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	441a      	add	r2, r3
 800395c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395e:	3301      	adds	r3, #1
 8003960:	6979      	ldr	r1, [r7, #20]
 8003962:	fb03 f101 	mul.w	r1, r3, r1
 8003966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	440b      	add	r3, r1
 800396c:	4413      	add	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	441a      	add	r2, r3
 8003976:	4937      	ldr	r1, [pc, #220]	; (8003a54 <I2C_Compute_SCLL_SCLH+0x204>)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	202c      	movs	r0, #44	; 0x2c
 800397c:	fb00 f303 	mul.w	r3, r0, r3
 8003980:	440b      	add	r3, r1
 8003982:	3320      	adds	r3, #32
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	441a      	add	r2, r3
 8003988:	4932      	ldr	r1, [pc, #200]	; (8003a54 <I2C_Compute_SCLL_SCLH+0x204>)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	202c      	movs	r0, #44	; 0x2c
 800398e:	fb00 f303 	mul.w	r3, r0, r3
 8003992:	440b      	add	r3, r1
 8003994:	3324      	adds	r3, #36	; 0x24
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4413      	add	r3, r2
 800399a:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d338      	bcc.n	8003a16 <I2C_Compute_SCLL_SCLH+0x1c6>
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d834      	bhi.n	8003a16 <I2C_Compute_SCLL_SCLH+0x1c6>
 80039ac:	4a29      	ldr	r2, [pc, #164]	; (8003a54 <I2C_Compute_SCLL_SCLH+0x204>)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	212c      	movs	r1, #44	; 0x2c
 80039b2:	fb01 f303 	mul.w	r3, r1, r3
 80039b6:	4413      	add	r3, r2
 80039b8:	331c      	adds	r3, #28
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d329      	bcc.n	8003a16 <I2C_Compute_SCLL_SCLH+0x1c6>
 80039c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d225      	bcs.n	8003a16 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80039d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	da02      	bge.n	80039de <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80039d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039da:	425b      	negs	r3, r3
 80039dc:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80039de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d917      	bls.n	8003a16 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80039e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e8:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80039ea:	491b      	ldr	r1, [pc, #108]	; (8003a58 <I2C_Compute_SCLL_SCLH+0x208>)
 80039ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	3310      	adds	r3, #16
 80039fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039fc:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80039fe:	4916      	ldr	r1, [pc, #88]	; (8003a58 <I2C_Compute_SCLL_SCLH+0x208>)
 8003a00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	330c      	adds	r3, #12
 8003a0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a10:	601a      	str	r2, [r3, #0]
              ret = count;
 8003a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a14:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a18:	3301      	adds	r3, #1
 8003a1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1e:	2bff      	cmp	r3, #255	; 0xff
 8003a20:	d999      	bls.n	8003956 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a24:	3301      	adds	r3, #1
 8003a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a2a:	2bff      	cmp	r3, #255	; 0xff
 8003a2c:	f67f af6f 	bls.w	800390e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a32:	3301      	adds	r3, #1
 8003a34:	637b      	str	r3, [r7, #52]	; 0x34
 8003a36:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <I2C_Compute_SCLL_SCLH+0x20c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	f4ff af56 	bcc.w	80038ee <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8003a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	374c      	adds	r7, #76	; 0x4c
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	3b9aca00 	.word	0x3b9aca00
 8003a54:	08010504 	.word	0x08010504
 8003a58:	24000558 	.word	0x24000558
 8003a5c:	24000f58 	.word	0x24000f58

08003a60 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08a      	sub	sp, #40	; 0x28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003a68:	4b31      	ldr	r3, [pc, #196]	; (8003b30 <I2C4_MspInit+0xd0>)
 8003a6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003a6e:	4a30      	ldr	r2, [pc, #192]	; (8003b30 <I2C4_MspInit+0xd0>)
 8003a70:	f043 0308 	orr.w	r3, r3, #8
 8003a74:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003a78:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <I2C4_MspInit+0xd0>)
 8003a7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8003a86:	4b2a      	ldr	r3, [pc, #168]	; (8003b30 <I2C4_MspInit+0xd0>)
 8003a88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003a8c:	4a28      	ldr	r2, [pc, #160]	; (8003b30 <I2C4_MspInit+0xd0>)
 8003a8e:	f043 0308 	orr.w	r3, r3, #8
 8003a92:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003a96:	4b26      	ldr	r3, [pc, #152]	; (8003b30 <I2C4_MspInit+0xd0>)
 8003a98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8003aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aa8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003aaa:	2312      	movs	r3, #18
 8003aac:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8003aba:	f107 0314 	add.w	r3, r7, #20
 8003abe:	4619      	mov	r1, r3
 8003ac0:	481c      	ldr	r0, [pc, #112]	; (8003b34 <I2C4_MspInit+0xd4>)
 8003ac2:	f005 f8a1 	bl	8008c08 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aca:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003acc:	2312      	movs	r3, #18
 8003ace:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003ad8:	2304      	movs	r3, #4
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003adc:	f107 0314 	add.w	r3, r7, #20
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4814      	ldr	r0, [pc, #80]	; (8003b34 <I2C4_MspInit+0xd4>)
 8003ae4:	f005 f890 	bl	8008c08 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <I2C4_MspInit+0xd0>)
 8003aea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003aee:	4a10      	ldr	r2, [pc, #64]	; (8003b30 <I2C4_MspInit+0xd0>)
 8003af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003af8:	4b0d      	ldr	r3, [pc, #52]	; (8003b30 <I2C4_MspInit+0xd0>)
 8003afa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8003b06:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <I2C4_MspInit+0xd0>)
 8003b08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b0c:	4a08      	ldr	r2, [pc, #32]	; (8003b30 <I2C4_MspInit+0xd0>)
 8003b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b12:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003b16:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <I2C4_MspInit+0xd0>)
 8003b18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b1c:	4a04      	ldr	r2, [pc, #16]	; (8003b30 <I2C4_MspInit+0xd0>)
 8003b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b22:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8003b26:	bf00      	nop
 8003b28:	3728      	adds	r7, #40	; 0x28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	58024400 	.word	0x58024400
 8003b34:	58020c00 	.word	0x58020c00

08003b38 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8003b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b44:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	480b      	ldr	r0, [pc, #44]	; (8003b78 <I2C4_MspDeInit+0x40>)
 8003b4c:	f005 fa0c 	bl	8008f68 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003b50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b54:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4807      	ldr	r0, [pc, #28]	; (8003b78 <I2C4_MspDeInit+0x40>)
 8003b5c:	f005 fa04 	bl	8008f68 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <I2C4_MspDeInit+0x44>)
 8003b62:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003b66:	4a05      	ldr	r2, [pc, #20]	; (8003b7c <I2C4_MspDeInit+0x44>)
 8003b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b6c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8003b70:	bf00      	nop
 8003b72:	3720      	adds	r7, #32
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	58020c00 	.word	0x58020c00
 8003b7c:	58024400 	.word	0x58024400

08003b80 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af04      	add	r7, sp, #16
 8003b86:	607b      	str	r3, [r7, #4]
 8003b88:	4603      	mov	r3, r0
 8003b8a:	81fb      	strh	r3, [r7, #14]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	81bb      	strh	r3, [r7, #12]
 8003b90:	4613      	mov	r3, r2
 8003b92:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003b94:	8978      	ldrh	r0, [r7, #10]
 8003b96:	89ba      	ldrh	r2, [r7, #12]
 8003b98:	89f9      	ldrh	r1, [r7, #14]
 8003b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b9e:	9302      	str	r3, [sp, #8]
 8003ba0:	8b3b      	ldrh	r3, [r7, #24]
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	4603      	mov	r3, r0
 8003baa:	4807      	ldr	r0, [pc, #28]	; (8003bc8 <I2C4_WriteReg+0x48>)
 8003bac:	f005 fbee 	bl	800938c <HAL_I2C_Mem_Write>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e001      	b.n	8003bbe <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003bba:	f06f 0307 	mvn.w	r3, #7
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	24000f5c 	.word	0x24000f5c

08003bcc <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af04      	add	r7, sp, #16
 8003bd2:	607b      	str	r3, [r7, #4]
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	81fb      	strh	r3, [r7, #14]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	81bb      	strh	r3, [r7, #12]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003be0:	8978      	ldrh	r0, [r7, #10]
 8003be2:	89ba      	ldrh	r2, [r7, #12]
 8003be4:	89f9      	ldrh	r1, [r7, #14]
 8003be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bea:	9302      	str	r3, [sp, #8]
 8003bec:	8b3b      	ldrh	r3, [r7, #24]
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	4807      	ldr	r0, [pc, #28]	; (8003c14 <I2C4_ReadReg+0x48>)
 8003bf8:	f005 fcdc 	bl	80095b4 <HAL_I2C_Mem_Read>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e001      	b.n	8003c0a <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003c06:	f06f 0307 	mvn.w	r3, #7
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	24000f5c 	.word	0x24000f5c

08003c18 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003c2e:	f06f 0301 	mvn.w	r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	e02d      	b.n	8003c92 <BSP_CAMERA_Init+0x7a>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    HAL_DCMI_MspInit(&hdcmi);
 8003c36:	4819      	ldr	r0, [pc, #100]	; (8003c9c <BSP_CAMERA_Init+0x84>)
 8003c38:	f7fc fd0e 	bl	8000658 <HAL_DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    MX_DCMI_Init();
 8003c3c:	f7fc fcd8 	bl	80005f0 <MX_DCMI_Init>

    if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 8003c40:	2000      	movs	r0, #0
 8003c42:	f000 f887 	bl	8003d54 <BSP_CAMERA_HwReset>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <BSP_CAMERA_Init+0x3c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003c4c:	f06f 0307 	mvn.w	r3, #7
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	e01e      	b.n	8003c92 <BSP_CAMERA_Init+0x7a>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	68b8      	ldr	r0, [r7, #8]
 8003c58:	f000 f93e 	bl	8003ed8 <OV5640_Probe>
 8003c5c:	6178      	str	r0, [r7, #20]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <BSP_CAMERA_Init+0x54>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003c64:	f06f 0306 	mvn.w	r3, #6
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	e012      	b.n	8003c92 <BSP_CAMERA_Init+0x7a>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 8003c6c:	490c      	ldr	r1, [pc, #48]	; (8003ca0 <BSP_CAMERA_Init+0x88>)
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4613      	mov	r3, r2
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	4413      	add	r3, r2
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	440b      	add	r3, r1
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 8003c7e:	4908      	ldr	r1, [pc, #32]	; (8003ca0 <BSP_CAMERA_Init+0x88>)
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4613      	mov	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4413      	add	r3, r2
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	440b      	add	r3, r1
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 8003c92:	697b      	ldr	r3, [r7, #20]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	24000314 	.word	0x24000314
 8003ca0:	24000fb4 	.word	0x24000fb4

08003ca4 <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 8003ca4:	b590      	push	{r4, r7, lr}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003cb6:	f06f 0301 	mvn.w	r3, #1
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	e022      	b.n	8003d04 <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hdcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 8003cbe:	68bc      	ldr	r4, [r7, #8]
 8003cc0:	4913      	ldr	r1, [pc, #76]	; (8003d10 <BSP_CAMERA_Start+0x6c>)
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4413      	add	r3, r2
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	440b      	add	r3, r1
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	490f      	ldr	r1, [pc, #60]	; (8003d10 <BSP_CAMERA_Start+0x6c>)
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	4413      	add	r3, r2
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	440b      	add	r3, r1
 8003cde:	3304      	adds	r3, #4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	f000 f8a6 	bl	8003e34 <GetSize>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	4622      	mov	r2, r4
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	4809      	ldr	r0, [pc, #36]	; (8003d14 <BSP_CAMERA_Start+0x70>)
 8003cf0:	f000 fdca 	bl	8004888 <HAL_DCMI_Start_DMA>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8003cfa:	f06f 0303 	mvn.w	r3, #3
 8003cfe:	e002      	b.n	8003d06 <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8003d04:	697b      	ldr	r3, [r7, #20]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd90      	pop	{r4, r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	24000fb4 	.word	0x24000fb4
 8003d14:	24000314 	.word	0x24000314

08003d18 <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003d26:	f06f 0301 	mvn.w	r3, #1
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	e00b      	b.n	8003d46 <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hdcmi) != HAL_OK)
 8003d2e:	4808      	ldr	r0, [pc, #32]	; (8003d50 <BSP_CAMERA_Stop+0x38>)
 8003d30:	f000 fe6c 	bl	8004a0c <HAL_DCMI_Stop>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8003d3a:	f06f 0303 	mvn.w	r3, #3
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	e001      	b.n	8003d46 <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8003d46:	68fb      	ldr	r3, [r7, #12]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	24000314 	.word	0x24000314

08003d54 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <BSP_CAMERA_HwReset+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003d66:	f06f 0301 	mvn.w	r3, #1
 8003d6a:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <BSP_CAMERA_PwrDown+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003d8c:	f06f 0301 	mvn.w	r3, #1
 8003d90:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003d92:	68fb      	ldr	r3, [r7, #12]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8003de4:	2000      	movs	r0, #0
 8003de6:	f7ff ffdb 	bl	8003da0 <BSP_CAMERA_LineEventCallback>
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 {
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f7fd fca0 	bl	8001740 <BSP_CAMERA_FrameEventCallback>
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8003e10:	2000      	movs	r0, #0
 8003e12:	f7ff ffcf 	bl	8003db4 <BSP_CAMERA_VsyncEventCallback>
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 8003e26:	2000      	movs	r0, #0
 8003e28:	f7ff ffce 	bl	8003dc8 <BSP_CAMERA_ErrorCallback>
}
 8003e2c:	bf00      	nop
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d102      	bne.n	8003e4e <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 8003e48:	2303      	movs	r3, #3
 8003e4a:	60bb      	str	r3, [r7, #8]
 8003e4c:	e001      	b.n	8003e52 <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 8003e4e:	2302      	movs	r3, #2
 8003e50:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d834      	bhi.n	8003ec2 <GetSize+0x8e>
 8003e58:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <GetSize+0x2c>)
 8003e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5e:	bf00      	nop
 8003e60:	08003e75 	.word	0x08003e75
 8003e64:	08003e85 	.word	0x08003e85
 8003e68:	08003e95 	.word	0x08003e95
 8003e6c:	08003ea5 	.word	0x08003ea5
 8003e70:	08003eb5 	.word	0x08003eb5
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003e7a:	fb02 f303 	mul.w	r3, r2, r3
 8003e7e:	089b      	lsrs	r3, r3, #2
 8003e80:	60fb      	str	r3, [r7, #12]
    break;
 8003e82:	e01f      	b.n	8003ec4 <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	089b      	lsrs	r3, r3, #2
 8003e90:	60fb      	str	r3, [r7, #12]
    break;
 8003e92:	e017      	b.n	8003ec4 <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	4613      	mov	r3, r2
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	025b      	lsls	r3, r3, #9
 8003e9e:	089b      	lsrs	r3, r3, #2
 8003ea0:	60fb      	str	r3, [r7, #12]
    break;
 8003ea2:	e00f      	b.n	8003ec4 <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 8003eaa:	fb02 f303 	mul.w	r3, r2, r3
 8003eae:	089b      	lsrs	r3, r3, #2
 8003eb0:	60fb      	str	r3, [r7, #12]
    break;
 8003eb2:	e007      	b.n	8003ec4 <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4a07      	ldr	r2, [pc, #28]	; (8003ed4 <GetSize+0xa0>)
 8003eb8:	fb02 f303 	mul.w	r3, r2, r3
 8003ebc:	089b      	lsrs	r3, r3, #2
 8003ebe:	60fb      	str	r3, [r7, #12]
    break;
 8003ec0:	e000      	b.n	8003ec4 <GetSize+0x90>
  default:
    break;
 8003ec2:	bf00      	nop
  }

  return (int32_t)size;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	0005dc00 	.word	0x0005dc00

08003ed8 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	; 0x28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8003ee2:	2378      	movs	r3, #120	; 0x78
 8003ee4:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003ee6:	4b2c      	ldr	r3, [pc, #176]	; (8003f98 <OV5640_Probe+0xc0>)
 8003ee8:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003eea:	4b2c      	ldr	r3, [pc, #176]	; (8003f9c <OV5640_Probe+0xc4>)
 8003eec:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8003eee:	4b2c      	ldr	r3, [pc, #176]	; (8003fa0 <OV5640_Probe+0xc8>)
 8003ef0:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8003ef2:	4b2c      	ldr	r3, [pc, #176]	; (8003fa4 <OV5640_Probe+0xcc>)
 8003ef4:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003ef6:	4b2c      	ldr	r3, [pc, #176]	; (8003fa8 <OV5640_Probe+0xd0>)
 8003ef8:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8003efa:	f107 030c 	add.w	r3, r7, #12
 8003efe:	4619      	mov	r1, r3
 8003f00:	482a      	ldr	r0, [pc, #168]	; (8003fac <OV5640_Probe+0xd4>)
 8003f02:	f7fd fc33 	bl	800176c <OV5640_RegisterBusIO>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f0c:	f06f 0304 	mvn.w	r3, #4
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
 8003f12:	e03c      	b.n	8003f8e <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8003f14:	f107 0308 	add.w	r3, r7, #8
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4824      	ldr	r0, [pc, #144]	; (8003fac <OV5640_Probe+0xd4>)
 8003f1c:	f7fe f87a 	bl	8002014 <OV5640_ReadID>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f26:	f06f 0304 	mvn.w	r3, #4
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2c:	e02f      	b.n	8003f8e <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f245 6240 	movw	r2, #22080	; 0x5640
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d003      	beq.n	8003f40 <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003f38:	f06f 0306 	mvn.w	r3, #6
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3e:	e026      	b.n	8003f8e <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8003f40:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <OV5640_Probe+0xd8>)
 8003f42:	4a1c      	ldr	r2, [pc, #112]	; (8003fb4 <OV5640_Probe+0xdc>)
 8003f44:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 8003f46:	4b1c      	ldr	r3, [pc, #112]	; (8003fb8 <OV5640_Probe+0xe0>)
 8003f48:	4a18      	ldr	r2, [pc, #96]	; (8003fac <OV5640_Probe+0xd4>)
 8003f4a:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8003f4c:	4b18      	ldr	r3, [pc, #96]	; (8003fb0 <OV5640_Probe+0xd8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a19      	ldr	r2, [pc, #100]	; (8003fb8 <OV5640_Probe+0xe0>)
 8003f54:	6810      	ldr	r0, [r2, #0]
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	4798      	blx	r3
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f62:	f06f 0304 	mvn.w	r3, #4
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
 8003f68:	e011      	b.n	8003f8e <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 8003f6a:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <OV5640_Probe+0xd8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a11      	ldr	r2, [pc, #68]	; (8003fb8 <OV5640_Probe+0xe0>)
 8003f72:	6812      	ldr	r2, [r2, #0]
 8003f74:	4911      	ldr	r1, [pc, #68]	; (8003fbc <OV5640_Probe+0xe4>)
 8003f76:	6809      	ldr	r1, [r1, #0]
 8003f78:	4610      	mov	r0, r2
 8003f7a:	4798      	blx	r3
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003f82:	f06f 0304 	mvn.w	r3, #4
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
 8003f88:	e001      	b.n	8003f8e <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3728      	adds	r7, #40	; 0x28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	0800336d 	.word	0x0800336d
 8003f9c:	080033e1 	.word	0x080033e1
 8003fa0:	08003509 	.word	0x08003509
 8003fa4:	080034ad 	.word	0x080034ad
 8003fa8:	08003565 	.word	0x08003565
 8003fac:	24000fec 	.word	0x24000fec
 8003fb0:	24000fe4 	.word	0x24000fe4
 8003fb4:	24000240 	.word	0x24000240
 8003fb8:	24000fb0 	.word	0x24000fb0
 8003fbc:	24000fe8 	.word	0x24000fe8

08003fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <HAL_MspInit+0x30>)
 8003fc8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003fcc:	4a08      	ldr	r2, [pc, #32]	; (8003ff0 <HAL_MspInit+0x30>)
 8003fce:	f043 0302 	orr.w	r3, r3, #2
 8003fd2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_MspInit+0x30>)
 8003fd8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	607b      	str	r3, [r7, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	58024400 	.word	0x58024400

08003ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ff8:	e7fe      	b.n	8003ff8 <NMI_Handler+0x4>

08003ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ffe:	e7fe      	b.n	8003ffe <HardFault_Handler+0x4>

08004000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004004:	e7fe      	b.n	8004004 <MemManage_Handler+0x4>

08004006 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004006:	b480      	push	{r7}
 8004008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800400a:	e7fe      	b.n	800400a <BusFault_Handler+0x4>

0800400c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004010:	e7fe      	b.n	8004010 <UsageFault_Handler+0x4>

08004012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004012:	b480      	push	{r7}
 8004014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800402e:	b480      	push	{r7}
 8004030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004032:	bf00      	nop
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004040:	f000 fa54 	bl	80044ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004044:	bf00      	nop
 8004046:	bd80      	pop	{r7, pc}

08004048 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800404c:	4802      	ldr	r0, [pc, #8]	; (8004058 <USART1_IRQHandler+0x10>)
 800404e:	f009 fc6f 	bl	800d930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	24001018 	.word	0x24001018

0800405c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8004060:	4802      	ldr	r0, [pc, #8]	; (800406c <DMA2_Stream1_IRQHandler+0x10>)
 8004062:	f002 f9c3 	bl	80063ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004066:	bf00      	nop
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	24000364 	.word	0x24000364

08004070 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8004074:	4802      	ldr	r0, [pc, #8]	; (8004080 <DCMI_PSSI_IRQHandler+0x10>)
 8004076:	f000 fd29 	bl	8004acc <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	24000314 	.word	0x24000314

08004084 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004088:	4802      	ldr	r0, [pc, #8]	; (8004094 <LTDC_IRQHandler+0x10>)
 800408a:	f005 ffe7 	bl	800a05c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	2400047c 	.word	0x2400047c

08004098 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC Error global Interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800409c:	4802      	ldr	r0, [pc, #8]	; (80040a8 <LTDC_ER_IRQHandler+0x10>)
 800409e:	f005 ffdd 	bl	800a05c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 80040a2:	bf00      	nop
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	2400047c 	.word	0x2400047c

080040ac <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80040b0:	4802      	ldr	r0, [pc, #8]	; (80040bc <DMA2D_IRQHandler+0x10>)
 80040b2:	f003 fe95 	bl	8007de0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80040b6:	bf00      	nop
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	240003dc 	.word	0x240003dc

080040c0 <_lseek>:
//  (void)file;
//  return 1;
//}

int _lseek(int file, int ptr, int dir)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040e4:	4a14      	ldr	r2, [pc, #80]	; (8004138 <_sbrk+0x5c>)
 80040e6:	4b15      	ldr	r3, [pc, #84]	; (800413c <_sbrk+0x60>)
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040f0:	4b13      	ldr	r3, [pc, #76]	; (8004140 <_sbrk+0x64>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <_sbrk+0x64>)
 80040fa:	4a12      	ldr	r2, [pc, #72]	; (8004144 <_sbrk+0x68>)
 80040fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <_sbrk+0x64>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4413      	add	r3, r2
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	429a      	cmp	r2, r3
 800410a:	d207      	bcs.n	800411c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800410c:	f00b fad4 	bl	800f6b8 <__errno>
 8004110:	4603      	mov	r3, r0
 8004112:	220c      	movs	r2, #12
 8004114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004116:	f04f 33ff 	mov.w	r3, #4294967295
 800411a:	e009      	b.n	8004130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800411c:	4b08      	ldr	r3, [pc, #32]	; (8004140 <_sbrk+0x64>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004122:	4b07      	ldr	r3, [pc, #28]	; (8004140 <_sbrk+0x64>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	4a05      	ldr	r2, [pc, #20]	; (8004140 <_sbrk+0x64>)
 800412c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800412e:	68fb      	ldr	r3, [r7, #12]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	24100000 	.word	0x24100000
 800413c:	00000400 	.word	0x00000400
 8004140:	24001014 	.word	0x24001014
 8004144:	240010c0 	.word	0x240010c0

08004148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800414c:	4b32      	ldr	r3, [pc, #200]	; (8004218 <SystemInit+0xd0>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	4a31      	ldr	r2, [pc, #196]	; (8004218 <SystemInit+0xd0>)
 8004154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800415c:	4b2f      	ldr	r3, [pc, #188]	; (800421c <SystemInit+0xd4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 030f 	and.w	r3, r3, #15
 8004164:	2b02      	cmp	r3, #2
 8004166:	d807      	bhi.n	8004178 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004168:	4b2c      	ldr	r3, [pc, #176]	; (800421c <SystemInit+0xd4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f023 030f 	bic.w	r3, r3, #15
 8004170:	4a2a      	ldr	r2, [pc, #168]	; (800421c <SystemInit+0xd4>)
 8004172:	f043 0303 	orr.w	r3, r3, #3
 8004176:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004178:	4b29      	ldr	r3, [pc, #164]	; (8004220 <SystemInit+0xd8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a28      	ldr	r2, [pc, #160]	; (8004220 <SystemInit+0xd8>)
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004184:	4b26      	ldr	r3, [pc, #152]	; (8004220 <SystemInit+0xd8>)
 8004186:	2200      	movs	r2, #0
 8004188:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800418a:	4b25      	ldr	r3, [pc, #148]	; (8004220 <SystemInit+0xd8>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4924      	ldr	r1, [pc, #144]	; (8004220 <SystemInit+0xd8>)
 8004190:	4b24      	ldr	r3, [pc, #144]	; (8004224 <SystemInit+0xdc>)
 8004192:	4013      	ands	r3, r2
 8004194:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004196:	4b21      	ldr	r3, [pc, #132]	; (800421c <SystemInit+0xd4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d007      	beq.n	80041b2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80041a2:	4b1e      	ldr	r3, [pc, #120]	; (800421c <SystemInit+0xd4>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 030f 	bic.w	r3, r3, #15
 80041aa:	4a1c      	ldr	r2, [pc, #112]	; (800421c <SystemInit+0xd4>)
 80041ac:	f043 0303 	orr.w	r3, r3, #3
 80041b0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80041b2:	4b1b      	ldr	r3, [pc, #108]	; (8004220 <SystemInit+0xd8>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80041b8:	4b19      	ldr	r3, [pc, #100]	; (8004220 <SystemInit+0xd8>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80041be:	4b18      	ldr	r3, [pc, #96]	; (8004220 <SystemInit+0xd8>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80041c4:	4b16      	ldr	r3, [pc, #88]	; (8004220 <SystemInit+0xd8>)
 80041c6:	4a18      	ldr	r2, [pc, #96]	; (8004228 <SystemInit+0xe0>)
 80041c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <SystemInit+0xd8>)
 80041cc:	4a17      	ldr	r2, [pc, #92]	; (800422c <SystemInit+0xe4>)
 80041ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80041d0:	4b13      	ldr	r3, [pc, #76]	; (8004220 <SystemInit+0xd8>)
 80041d2:	4a17      	ldr	r2, [pc, #92]	; (8004230 <SystemInit+0xe8>)
 80041d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <SystemInit+0xd8>)
 80041d8:	2200      	movs	r2, #0
 80041da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80041dc:	4b10      	ldr	r3, [pc, #64]	; (8004220 <SystemInit+0xd8>)
 80041de:	4a14      	ldr	r2, [pc, #80]	; (8004230 <SystemInit+0xe8>)
 80041e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80041e2:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <SystemInit+0xd8>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80041e8:	4b0d      	ldr	r3, [pc, #52]	; (8004220 <SystemInit+0xd8>)
 80041ea:	4a11      	ldr	r2, [pc, #68]	; (8004230 <SystemInit+0xe8>)
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80041ee:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <SystemInit+0xd8>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80041f4:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <SystemInit+0xd8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a09      	ldr	r2, [pc, #36]	; (8004220 <SystemInit+0xd8>)
 80041fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004200:	4b07      	ldr	r3, [pc, #28]	; (8004220 <SystemInit+0xd8>)
 8004202:	2200      	movs	r2, #0
 8004204:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004206:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <SystemInit+0xec>)
 8004208:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800420c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800420e:	bf00      	nop
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	e000ed00 	.word	0xe000ed00
 800421c:	52002000 	.word	0x52002000
 8004220:	58024400 	.word	0x58024400
 8004224:	eaf6ed7f 	.word	0xeaf6ed7f
 8004228:	02020200 	.word	0x02020200
 800422c:	01ff0000 	.word	0x01ff0000
 8004230:	01010280 	.word	0x01010280
 8004234:	52004000 	.word	0x52004000

08004238 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800423c:	4b22      	ldr	r3, [pc, #136]	; (80042c8 <MX_USART1_UART_Init+0x90>)
 800423e:	4a23      	ldr	r2, [pc, #140]	; (80042cc <MX_USART1_UART_Init+0x94>)
 8004240:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004242:	4b21      	ldr	r3, [pc, #132]	; (80042c8 <MX_USART1_UART_Init+0x90>)
 8004244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004248:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800424a:	4b1f      	ldr	r3, [pc, #124]	; (80042c8 <MX_USART1_UART_Init+0x90>)
 800424c:	2200      	movs	r2, #0
 800424e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004250:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <MX_USART1_UART_Init+0x90>)
 8004252:	2200      	movs	r2, #0
 8004254:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004256:	4b1c      	ldr	r3, [pc, #112]	; (80042c8 <MX_USART1_UART_Init+0x90>)
 8004258:	2200      	movs	r2, #0
 800425a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800425c:	4b1a      	ldr	r3, [pc, #104]	; (80042c8 <MX_USART1_UART_Init+0x90>)
 800425e:	220c      	movs	r2, #12
 8004260:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004262:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <MX_USART1_UART_Init+0x90>)
 8004264:	2200      	movs	r2, #0
 8004266:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004268:	4b17      	ldr	r3, [pc, #92]	; (80042c8 <MX_USART1_UART_Init+0x90>)
 800426a:	2200      	movs	r2, #0
 800426c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800426e:	4b16      	ldr	r3, [pc, #88]	; (80042c8 <MX_USART1_UART_Init+0x90>)
 8004270:	2200      	movs	r2, #0
 8004272:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004274:	4b14      	ldr	r3, [pc, #80]	; (80042c8 <MX_USART1_UART_Init+0x90>)
 8004276:	2200      	movs	r2, #0
 8004278:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800427a:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <MX_USART1_UART_Init+0x90>)
 800427c:	2200      	movs	r2, #0
 800427e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004280:	4811      	ldr	r0, [pc, #68]	; (80042c8 <MX_USART1_UART_Init+0x90>)
 8004282:	f009 f9ae 	bl	800d5e2 <HAL_UART_Init>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800428c:	f7fd fa68 	bl	8001760 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004290:	2100      	movs	r1, #0
 8004292:	480d      	ldr	r0, [pc, #52]	; (80042c8 <MX_USART1_UART_Init+0x90>)
 8004294:	f00b f844 	bl	800f320 <HAL_UARTEx_SetTxFifoThreshold>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800429e:	f7fd fa5f 	bl	8001760 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042a2:	2100      	movs	r1, #0
 80042a4:	4808      	ldr	r0, [pc, #32]	; (80042c8 <MX_USART1_UART_Init+0x90>)
 80042a6:	f00b f879 	bl	800f39c <HAL_UARTEx_SetRxFifoThreshold>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80042b0:	f7fd fa56 	bl	8001760 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80042b4:	4804      	ldr	r0, [pc, #16]	; (80042c8 <MX_USART1_UART_Init+0x90>)
 80042b6:	f00a fffa 	bl	800f2ae <HAL_UARTEx_DisableFifoMode>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80042c0:	f7fd fa4e 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042c4:	bf00      	nop
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	24001018 	.word	0x24001018
 80042cc:	40011000 	.word	0x40011000

080042d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b0ba      	sub	sp, #232	; 0xe8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	605a      	str	r2, [r3, #4]
 80042e2:	609a      	str	r2, [r3, #8]
 80042e4:	60da      	str	r2, [r3, #12]
 80042e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042e8:	f107 0310 	add.w	r3, r7, #16
 80042ec:	22c0      	movs	r2, #192	; 0xc0
 80042ee:	2100      	movs	r1, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	f00b fa0b 	bl	800f70c <memset>
  if(uartHandle->Instance==USART1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a2b      	ldr	r2, [pc, #172]	; (80043a8 <HAL_UART_MspInit+0xd8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d14e      	bne.n	800439e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004300:	f04f 0201 	mov.w	r2, #1
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800430c:	2300      	movs	r3, #0
 800430e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004312:	f107 0310 	add.w	r3, r7, #16
 8004316:	4618      	mov	r0, r3
 8004318:	f007 f9cc 	bl	800b6b4 <HAL_RCCEx_PeriphCLKConfig>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004322:	f7fd fa1d 	bl	8001760 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004326:	4b21      	ldr	r3, [pc, #132]	; (80043ac <HAL_UART_MspInit+0xdc>)
 8004328:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800432c:	4a1f      	ldr	r2, [pc, #124]	; (80043ac <HAL_UART_MspInit+0xdc>)
 800432e:	f043 0310 	orr.w	r3, r3, #16
 8004332:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_UART_MspInit+0xdc>)
 8004338:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004344:	4b19      	ldr	r3, [pc, #100]	; (80043ac <HAL_UART_MspInit+0xdc>)
 8004346:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800434a:	4a18      	ldr	r2, [pc, #96]	; (80043ac <HAL_UART_MspInit+0xdc>)
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004354:	4b15      	ldr	r3, [pc, #84]	; (80043ac <HAL_UART_MspInit+0xdc>)
 8004356:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8004362:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004366:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436a:	2302      	movs	r3, #2
 800436c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004370:	2300      	movs	r3, #0
 8004372:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004376:	2300      	movs	r3, #0
 8004378:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800437c:	2307      	movs	r3, #7
 800437e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004382:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004386:	4619      	mov	r1, r3
 8004388:	4809      	ldr	r0, [pc, #36]	; (80043b0 <HAL_UART_MspInit+0xe0>)
 800438a:	f004 fc3d 	bl	8008c08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800438e:	2200      	movs	r2, #0
 8004390:	2100      	movs	r1, #0
 8004392:	2025      	movs	r0, #37	; 0x25
 8004394:	f000 f9c9 	bl	800472a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004398:	2025      	movs	r0, #37	; 0x25
 800439a:	f000 f9e0 	bl	800475e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800439e:	bf00      	nop
 80043a0:	37e8      	adds	r7, #232	; 0xe8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40011000 	.word	0x40011000
 80043ac:	58024400 	.word	0x58024400
 80043b0:	58020000 	.word	0x58020000

080043b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80043b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80043b8:	f7ff fec6 	bl	8004148 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043bc:	480c      	ldr	r0, [pc, #48]	; (80043f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80043be:	490d      	ldr	r1, [pc, #52]	; (80043f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80043c0:	4a0d      	ldr	r2, [pc, #52]	; (80043f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80043c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043c4:	e002      	b.n	80043cc <LoopCopyDataInit>

080043c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043ca:	3304      	adds	r3, #4

080043cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80043cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043d0:	d3f9      	bcc.n	80043c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043d2:	4a0a      	ldr	r2, [pc, #40]	; (80043fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80043d4:	4c0a      	ldr	r4, [pc, #40]	; (8004400 <LoopFillZerobss+0x22>)
  movs r3, #0
 80043d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043d8:	e001      	b.n	80043de <LoopFillZerobss>

080043da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043dc:	3204      	adds	r2, #4

080043de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043e0:	d3fb      	bcc.n	80043da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80043e2:	f00b f96f 	bl	800f6c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043e6:	f7fd f8c3 	bl	8001570 <main>
  bx  lr
 80043ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80043ec:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80043f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80043f4:	240002f8 	.word	0x240002f8
  ldr r2, =_sidata
 80043f8:	0801063c 	.word	0x0801063c
  ldr r2, =_sbss
 80043fc:	240002f8 	.word	0x240002f8
  ldr r4, =_ebss
 8004400:	240010c0 	.word	0x240010c0

08004404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004404:	e7fe      	b.n	8004404 <ADC_IRQHandler>
	...

08004408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800440e:	2003      	movs	r0, #3
 8004410:	f000 f980 	bl	8004714 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004414:	f006 ff78 	bl	800b308 <HAL_RCC_GetSysClockFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b15      	ldr	r3, [pc, #84]	; (8004470 <HAL_Init+0x68>)
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	0a1b      	lsrs	r3, r3, #8
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	4913      	ldr	r1, [pc, #76]	; (8004474 <HAL_Init+0x6c>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
 8004430:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004432:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <HAL_Init+0x68>)
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	4a0e      	ldr	r2, [pc, #56]	; (8004474 <HAL_Init+0x6c>)
 800443c:	5cd3      	ldrb	r3, [r2, r3]
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	fa22 f303 	lsr.w	r3, r2, r3
 8004448:	4a0b      	ldr	r2, [pc, #44]	; (8004478 <HAL_Init+0x70>)
 800444a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800444c:	4a0b      	ldr	r2, [pc, #44]	; (800447c <HAL_Init+0x74>)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004452:	2000      	movs	r0, #0
 8004454:	f000 f814 	bl	8004480 <HAL_InitTick>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e002      	b.n	8004468 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004462:	f7ff fdad 	bl	8003fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	58024400 	.word	0x58024400
 8004474:	08010588 	.word	0x08010588
 8004478:	24000288 	.word	0x24000288
 800447c:	24000284 	.word	0x24000284

08004480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004488:	4b15      	ldr	r3, [pc, #84]	; (80044e0 <HAL_InitTick+0x60>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e021      	b.n	80044d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004494:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <HAL_InitTick+0x64>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <HAL_InitTick+0x60>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	4619      	mov	r1, r3
 800449e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80044a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 f965 	bl	800477a <HAL_SYSTICK_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e00e      	b.n	80044d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b0f      	cmp	r3, #15
 80044be:	d80a      	bhi.n	80044d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044c0:	2200      	movs	r2, #0
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	f04f 30ff 	mov.w	r0, #4294967295
 80044c8:	f000 f92f 	bl	800472a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044cc:	4a06      	ldr	r2, [pc, #24]	; (80044e8 <HAL_InitTick+0x68>)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	e000      	b.n	80044d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	24000290 	.word	0x24000290
 80044e4:	24000284 	.word	0x24000284
 80044e8:	2400028c 	.word	0x2400028c

080044ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80044f0:	4b06      	ldr	r3, [pc, #24]	; (800450c <HAL_IncTick+0x20>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <HAL_IncTick+0x24>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4413      	add	r3, r2
 80044fc:	4a04      	ldr	r2, [pc, #16]	; (8004510 <HAL_IncTick+0x24>)
 80044fe:	6013      	str	r3, [r2, #0]
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	24000290 	.word	0x24000290
 8004510:	240010ac 	.word	0x240010ac

08004514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  return uwTick;
 8004518:	4b03      	ldr	r3, [pc, #12]	; (8004528 <HAL_GetTick+0x14>)
 800451a:	681b      	ldr	r3, [r3, #0]
}
 800451c:	4618      	mov	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	240010ac 	.word	0x240010ac

0800452c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004534:	f7ff ffee 	bl	8004514 <HAL_GetTick>
 8004538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d005      	beq.n	8004552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <HAL_Delay+0x44>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4413      	add	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004552:	bf00      	nop
 8004554:	f7ff ffde 	bl	8004514 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	429a      	cmp	r2, r3
 8004562:	d8f7      	bhi.n	8004554 <HAL_Delay+0x28>
  {
  }
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	24000290 	.word	0x24000290

08004574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <__NVIC_SetPriorityGrouping+0x40>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004590:	4013      	ands	r3, r2
 8004592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800459c:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <__NVIC_SetPriorityGrouping+0x44>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045a2:	4a04      	ldr	r2, [pc, #16]	; (80045b4 <__NVIC_SetPriorityGrouping+0x40>)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	60d3      	str	r3, [r2, #12]
}
 80045a8:	bf00      	nop
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	e000ed00 	.word	0xe000ed00
 80045b8:	05fa0000 	.word	0x05fa0000

080045bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045c0:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <__NVIC_GetPriorityGrouping+0x18>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	0a1b      	lsrs	r3, r3, #8
 80045c6:	f003 0307 	and.w	r3, r3, #7
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	e000ed00 	.word	0xe000ed00

080045d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80045e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	db0b      	blt.n	8004602 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ea:	88fb      	ldrh	r3, [r7, #6]
 80045ec:	f003 021f 	and.w	r2, r3, #31
 80045f0:	4907      	ldr	r1, [pc, #28]	; (8004610 <__NVIC_EnableIRQ+0x38>)
 80045f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	2001      	movs	r0, #1
 80045fa:	fa00 f202 	lsl.w	r2, r0, r2
 80045fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	e000e100 	.word	0xe000e100

08004614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	6039      	str	r1, [r7, #0]
 800461e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004624:	2b00      	cmp	r3, #0
 8004626:	db0a      	blt.n	800463e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	b2da      	uxtb	r2, r3
 800462c:	490c      	ldr	r1, [pc, #48]	; (8004660 <__NVIC_SetPriority+0x4c>)
 800462e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004632:	0112      	lsls	r2, r2, #4
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	440b      	add	r3, r1
 8004638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800463c:	e00a      	b.n	8004654 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	b2da      	uxtb	r2, r3
 8004642:	4908      	ldr	r1, [pc, #32]	; (8004664 <__NVIC_SetPriority+0x50>)
 8004644:	88fb      	ldrh	r3, [r7, #6]
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	3b04      	subs	r3, #4
 800464c:	0112      	lsls	r2, r2, #4
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	440b      	add	r3, r1
 8004652:	761a      	strb	r2, [r3, #24]
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	e000e100 	.word	0xe000e100
 8004664:	e000ed00 	.word	0xe000ed00

08004668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004668:	b480      	push	{r7}
 800466a:	b089      	sub	sp, #36	; 0x24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f1c3 0307 	rsb	r3, r3, #7
 8004682:	2b04      	cmp	r3, #4
 8004684:	bf28      	it	cs
 8004686:	2304      	movcs	r3, #4
 8004688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	3304      	adds	r3, #4
 800468e:	2b06      	cmp	r3, #6
 8004690:	d902      	bls.n	8004698 <NVIC_EncodePriority+0x30>
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	3b03      	subs	r3, #3
 8004696:	e000      	b.n	800469a <NVIC_EncodePriority+0x32>
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800469c:	f04f 32ff 	mov.w	r2, #4294967295
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43da      	mvns	r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	401a      	ands	r2, r3
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046b0:	f04f 31ff 	mov.w	r1, #4294967295
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ba:	43d9      	mvns	r1, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c0:	4313      	orrs	r3, r2
         );
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3724      	adds	r7, #36	; 0x24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
	...

080046d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3b01      	subs	r3, #1
 80046dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046e0:	d301      	bcc.n	80046e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046e2:	2301      	movs	r3, #1
 80046e4:	e00f      	b.n	8004706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046e6:	4a0a      	ldr	r2, [pc, #40]	; (8004710 <SysTick_Config+0x40>)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046ee:	210f      	movs	r1, #15
 80046f0:	f04f 30ff 	mov.w	r0, #4294967295
 80046f4:	f7ff ff8e 	bl	8004614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <SysTick_Config+0x40>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046fe:	4b04      	ldr	r3, [pc, #16]	; (8004710 <SysTick_Config+0x40>)
 8004700:	2207      	movs	r2, #7
 8004702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	e000e010 	.word	0xe000e010

08004714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7ff ff29 	bl	8004574 <__NVIC_SetPriorityGrouping>
}
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b086      	sub	sp, #24
 800472e:	af00      	add	r7, sp, #0
 8004730:	4603      	mov	r3, r0
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	607a      	str	r2, [r7, #4]
 8004736:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004738:	f7ff ff40 	bl	80045bc <__NVIC_GetPriorityGrouping>
 800473c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	68b9      	ldr	r1, [r7, #8]
 8004742:	6978      	ldr	r0, [r7, #20]
 8004744:	f7ff ff90 	bl	8004668 <NVIC_EncodePriority>
 8004748:	4602      	mov	r2, r0
 800474a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800474e:	4611      	mov	r1, r2
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff ff5f 	bl	8004614 <__NVIC_SetPriority>
}
 8004756:	bf00      	nop
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	4603      	mov	r3, r0
 8004766:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004768:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff ff33 	bl	80045d8 <__NVIC_EnableIRQ>
}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff ffa4 	bl	80046d0 <SysTick_Config>
 8004788:	4603      	mov	r3, r0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e069      	b.n	800487a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d102      	bne.n	80047b8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fb ff50 	bl	8000658 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6819      	ldr	r1, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b2a      	ldr	r3, [pc, #168]	; (8004884 <HAL_DCMI_Init+0xf0>)
 80047da:	400b      	ands	r3, r1
 80047dc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80047f2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80047fe:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800480a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004816:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004822:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b10      	cmp	r3, #16
 8004832:	d112      	bne.n	800485a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	7f1b      	ldrb	r3, [r3, #28]
 8004838:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	7f5b      	ldrb	r3, [r3, #29]
 800483e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004840:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	7f9b      	ldrb	r3, [r3, #30]
 8004846:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004848:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	7fdb      	ldrb	r3, [r3, #31]
 8004850:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004856:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004858:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68da      	ldr	r2, [r3, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 021e 	orr.w	r2, r2, #30
 8004868:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	ffe0f007 	.word	0xffe0f007

08004888 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af02      	add	r7, sp, #8
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_DCMI_Start_DMA+0x1c>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e0ab      	b.n	80049fc <HAL_DCMI_Start_DMA+0x174>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048c2:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0202 	bic.w	r2, r2, #2
 80048d2:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6819      	ldr	r1, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e8:	4a46      	ldr	r2, [pc, #280]	; (8004a04 <HAL_DCMI_Start_DMA+0x17c>)
 80048ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f0:	4a45      	ldr	r2, [pc, #276]	; (8004a08 <HAL_DCMI_Start_DMA+0x180>)
 80048f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f8:	2200      	movs	r2, #0
 80048fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800491a:	d219      	bcs.n	8004950 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3328      	adds	r3, #40	; 0x28
 8004926:	4619      	mov	r1, r3
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	f000 fd90 	bl	8005450 <HAL_DMA_Start_IT>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d055      	beq.n	80049e2 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2240      	movs	r2, #64	; 0x40
 800493a:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e055      	b.n	80049fc <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004954:	4a2b      	ldr	r2, [pc, #172]	; (8004a04 <HAL_DCMI_Start_DMA+0x17c>)
 8004956:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2201      	movs	r2, #1
 800495c:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800496a:	e009      	b.n	8004980 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004970:	085a      	lsrs	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	005a      	lsls	r2, r3, #1
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004988:	d2f0      	bcs.n	800496c <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498e:	1e9a      	subs	r2, r3, #2
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	4413      	add	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3328      	adds	r3, #40	; 0x28
 80049b2:	4619      	mov	r1, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	f003 fc73 	bl	80082a8 <HAL_DMAEx_MultiBufferStart_IT>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00c      	beq.n	80049e2 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2240      	movs	r2, #64	; 0x40
 80049cc:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e00c      	b.n	80049fc <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	08004bd1 	.word	0x08004bd1
 8004a08:	08004cf7 	.word	0x08004cf7

08004a0c <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8004a14:	4b2b      	ldr	r3, [pc, #172]	; (8004ac4 <HAL_DCMI_Stop+0xb8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a2b      	ldr	r2, [pc, #172]	; (8004ac8 <HAL_DCMI_Stop+0xbc>)
 8004a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1e:	0a5b      	lsrs	r3, r3, #9
 8004a20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a24:	fb02 f303 	mul.w	r3, r2, r3
 8004a28:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_DCMI_Stop+0x30>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e03f      	b.n	8004abc <HAL_DCMI_Stop+0xb0>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0201 	bic.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d108      	bne.n	8004a7a <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6c:	f043 0220 	orr.w	r2, r3, #32
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	72fb      	strb	r3, [r7, #11]
      break;
 8004a78:	e006      	b.n	8004a88 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e9      	bne.n	8004a5c <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a96:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 ff41 	bl	8005924 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8004aba:	7afb      	ldrb	r3, [r7, #11]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	24000284 	.word	0x24000284
 8004ac8:	10624dd3 	.word	0x10624dd3

08004acc <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d016      	beq.n	8004b14 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2204      	movs	r2, #4
 8004aec:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af2:	f043 0202 	orr.w	r2, r3, #2
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2204      	movs	r2, #4
 8004afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b06:	4a31      	ldr	r2, [pc, #196]	; (8004bcc <HAL_DCMI_IRQHandler+0x100>)
 8004b08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f001 fa26 	bl	8005f60 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d016      	beq.n	8004b4c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2202      	movs	r2, #2
 8004b24:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2a:	f043 0201 	orr.w	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2204      	movs	r2, #4
 8004b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b3e:	4a23      	ldr	r2, [pc, #140]	; (8004bcc <HAL_DCMI_IRQHandler+0x100>)
 8004b40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b46:	4618      	mov	r0, r3
 8004b48:	f001 fa0a 	bl	8005f60 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d006      	beq.n	8004b64 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2210      	movs	r2, #16
 8004b5c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff f93c 	bl	8003ddc <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d006      	beq.n	8004b7c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2208      	movs	r2, #8
 8004b74:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff f946 	bl	8003e08 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d01d      	beq.n	8004bc2 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d107      	bne.n	8004ba4 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 021e 	bic.w	r2, r2, #30
 8004ba2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff f918 	bl	8003df2 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	08004cf7 	.word	0x08004cf7

08004bd0 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d043      	beq.n	8004c6e <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bf2:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d118      	bne.n	8004c32 <DCMI_DMAXferCplt+0x62>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d015      	beq.n	8004c32 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c18:	00da      	lsls	r2, r3, #3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	2200      	movs	r2, #0
 8004c20:	4619      	mov	r1, r3
 8004c22:	f003 fe9f 	bl	8008964 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2a:	1e5a      	subs	r2, r3, #1
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	639a      	str	r2, [r3, #56]	; 0x38
 8004c30:	e044      	b.n	8004cbc <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d13c      	bne.n	8004cbc <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c54:	00da      	lsls	r2, r3, #3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4413      	add	r3, r2
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	f003 fe81 	bl	8008964 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	1e5a      	subs	r2, r3, #1
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	639a      	str	r2, [r3, #56]	; 0x38
 8004c6c:	e026      	b.n	8004cbc <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d006      	beq.n	8004c8c <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c88:	60da      	str	r2, [r3, #12]
 8004c8a:	e017      	b.n	8004cbc <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10f      	bne.n	8004cbc <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca0:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca6:	0099      	lsls	r1, r3, #2
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	440a      	add	r2, r1
 8004cb2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d112      	bne.n	8004cee <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d103      	bne.n	8004cee <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8004cee:	bf00      	nop
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d009      	beq.n	8004d22 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7ff f87b 	bl	8003e1e <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8004d28:	bf00      	nop
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004d38:	f7ff fbec 	bl	8004514 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e37f      	b.n	8005448 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a66      	ldr	r2, [pc, #408]	; (8004ee8 <HAL_DMA_Init+0x1b8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d04a      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a65      	ldr	r2, [pc, #404]	; (8004eec <HAL_DMA_Init+0x1bc>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d045      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a63      	ldr	r2, [pc, #396]	; (8004ef0 <HAL_DMA_Init+0x1c0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d040      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a62      	ldr	r2, [pc, #392]	; (8004ef4 <HAL_DMA_Init+0x1c4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d03b      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a60      	ldr	r2, [pc, #384]	; (8004ef8 <HAL_DMA_Init+0x1c8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d036      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a5f      	ldr	r2, [pc, #380]	; (8004efc <HAL_DMA_Init+0x1cc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d031      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a5d      	ldr	r2, [pc, #372]	; (8004f00 <HAL_DMA_Init+0x1d0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d02c      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a5c      	ldr	r2, [pc, #368]	; (8004f04 <HAL_DMA_Init+0x1d4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d027      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a5a      	ldr	r2, [pc, #360]	; (8004f08 <HAL_DMA_Init+0x1d8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d022      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a59      	ldr	r2, [pc, #356]	; (8004f0c <HAL_DMA_Init+0x1dc>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d01d      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a57      	ldr	r2, [pc, #348]	; (8004f10 <HAL_DMA_Init+0x1e0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d018      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a56      	ldr	r2, [pc, #344]	; (8004f14 <HAL_DMA_Init+0x1e4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d013      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a54      	ldr	r2, [pc, #336]	; (8004f18 <HAL_DMA_Init+0x1e8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00e      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a53      	ldr	r2, [pc, #332]	; (8004f1c <HAL_DMA_Init+0x1ec>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d009      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a51      	ldr	r2, [pc, #324]	; (8004f20 <HAL_DMA_Init+0x1f0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d004      	beq.n	8004de8 <HAL_DMA_Init+0xb8>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a50      	ldr	r2, [pc, #320]	; (8004f24 <HAL_DMA_Init+0x1f4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d101      	bne.n	8004dec <HAL_DMA_Init+0xbc>
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <HAL_DMA_Init+0xbe>
 8004dec:	2300      	movs	r3, #0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 813c 	beq.w	800506c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a37      	ldr	r2, [pc, #220]	; (8004ee8 <HAL_DMA_Init+0x1b8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d04a      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a36      	ldr	r2, [pc, #216]	; (8004eec <HAL_DMA_Init+0x1bc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d045      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a34      	ldr	r2, [pc, #208]	; (8004ef0 <HAL_DMA_Init+0x1c0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d040      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a33      	ldr	r2, [pc, #204]	; (8004ef4 <HAL_DMA_Init+0x1c4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d03b      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a31      	ldr	r2, [pc, #196]	; (8004ef8 <HAL_DMA_Init+0x1c8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d036      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a30      	ldr	r2, [pc, #192]	; (8004efc <HAL_DMA_Init+0x1cc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d031      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a2e      	ldr	r2, [pc, #184]	; (8004f00 <HAL_DMA_Init+0x1d0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d02c      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a2d      	ldr	r2, [pc, #180]	; (8004f04 <HAL_DMA_Init+0x1d4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d027      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a2b      	ldr	r2, [pc, #172]	; (8004f08 <HAL_DMA_Init+0x1d8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d022      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a2a      	ldr	r2, [pc, #168]	; (8004f0c <HAL_DMA_Init+0x1dc>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d01d      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a28      	ldr	r2, [pc, #160]	; (8004f10 <HAL_DMA_Init+0x1e0>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d018      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a27      	ldr	r2, [pc, #156]	; (8004f14 <HAL_DMA_Init+0x1e4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d013      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a25      	ldr	r2, [pc, #148]	; (8004f18 <HAL_DMA_Init+0x1e8>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00e      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a24      	ldr	r2, [pc, #144]	; (8004f1c <HAL_DMA_Init+0x1ec>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d009      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a22      	ldr	r2, [pc, #136]	; (8004f20 <HAL_DMA_Init+0x1f0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <HAL_DMA_Init+0x174>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a21      	ldr	r2, [pc, #132]	; (8004f24 <HAL_DMA_Init+0x1f4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d108      	bne.n	8004eb6 <HAL_DMA_Init+0x186>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0201 	bic.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e007      	b.n	8004ec6 <HAL_DMA_Init+0x196>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0201 	bic.w	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ec6:	e02f      	b.n	8004f28 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ec8:	f7ff fb24 	bl	8004514 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b05      	cmp	r3, #5
 8004ed4:	d928      	bls.n	8004f28 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2203      	movs	r2, #3
 8004ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e2af      	b.n	8005448 <HAL_DMA_Init+0x718>
 8004ee8:	40020010 	.word	0x40020010
 8004eec:	40020028 	.word	0x40020028
 8004ef0:	40020040 	.word	0x40020040
 8004ef4:	40020058 	.word	0x40020058
 8004ef8:	40020070 	.word	0x40020070
 8004efc:	40020088 	.word	0x40020088
 8004f00:	400200a0 	.word	0x400200a0
 8004f04:	400200b8 	.word	0x400200b8
 8004f08:	40020410 	.word	0x40020410
 8004f0c:	40020428 	.word	0x40020428
 8004f10:	40020440 	.word	0x40020440
 8004f14:	40020458 	.word	0x40020458
 8004f18:	40020470 	.word	0x40020470
 8004f1c:	40020488 	.word	0x40020488
 8004f20:	400204a0 	.word	0x400204a0
 8004f24:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1c8      	bne.n	8004ec8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4b73      	ldr	r3, [pc, #460]	; (8005110 <HAL_DMA_Init+0x3e0>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004f4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f66:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d107      	bne.n	8004f8c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	4313      	orrs	r3, r2
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b28      	cmp	r3, #40	; 0x28
 8004f92:	d903      	bls.n	8004f9c <HAL_DMA_Init+0x26c>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b2e      	cmp	r3, #46	; 0x2e
 8004f9a:	d91f      	bls.n	8004fdc <HAL_DMA_Init+0x2ac>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b3e      	cmp	r3, #62	; 0x3e
 8004fa2:	d903      	bls.n	8004fac <HAL_DMA_Init+0x27c>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b42      	cmp	r3, #66	; 0x42
 8004faa:	d917      	bls.n	8004fdc <HAL_DMA_Init+0x2ac>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b46      	cmp	r3, #70	; 0x46
 8004fb2:	d903      	bls.n	8004fbc <HAL_DMA_Init+0x28c>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b48      	cmp	r3, #72	; 0x48
 8004fba:	d90f      	bls.n	8004fdc <HAL_DMA_Init+0x2ac>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b4e      	cmp	r3, #78	; 0x4e
 8004fc2:	d903      	bls.n	8004fcc <HAL_DMA_Init+0x29c>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2b52      	cmp	r3, #82	; 0x52
 8004fca:	d907      	bls.n	8004fdc <HAL_DMA_Init+0x2ac>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b73      	cmp	r3, #115	; 0x73
 8004fd2:	d905      	bls.n	8004fe0 <HAL_DMA_Init+0x2b0>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b77      	cmp	r3, #119	; 0x77
 8004fda:	d801      	bhi.n	8004fe0 <HAL_DMA_Init+0x2b0>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <HAL_DMA_Init+0x2b2>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fec:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f023 0307 	bic.w	r3, r3, #7
 8005004:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	2b04      	cmp	r3, #4
 8005016:	d117      	bne.n	8005048 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00e      	beq.n	8005048 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f002 fbd6 	bl	80077dc <DMA_CheckFifoParam>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d008      	beq.n	8005048 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2240      	movs	r2, #64	; 0x40
 800503a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e1ff      	b.n	8005448 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f002 fb11 	bl	8007678 <DMA_CalcBaseAndBitshift>
 8005056:	4603      	mov	r3, r0
 8005058:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505e:	f003 031f 	and.w	r3, r3, #31
 8005062:	223f      	movs	r2, #63	; 0x3f
 8005064:	409a      	lsls	r2, r3
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	609a      	str	r2, [r3, #8]
 800506a:	e0fe      	b.n	800526a <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a28      	ldr	r2, [pc, #160]	; (8005114 <HAL_DMA_Init+0x3e4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d04a      	beq.n	800510c <HAL_DMA_Init+0x3dc>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a27      	ldr	r2, [pc, #156]	; (8005118 <HAL_DMA_Init+0x3e8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d045      	beq.n	800510c <HAL_DMA_Init+0x3dc>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a25      	ldr	r2, [pc, #148]	; (800511c <HAL_DMA_Init+0x3ec>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d040      	beq.n	800510c <HAL_DMA_Init+0x3dc>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a24      	ldr	r2, [pc, #144]	; (8005120 <HAL_DMA_Init+0x3f0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d03b      	beq.n	800510c <HAL_DMA_Init+0x3dc>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a22      	ldr	r2, [pc, #136]	; (8005124 <HAL_DMA_Init+0x3f4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d036      	beq.n	800510c <HAL_DMA_Init+0x3dc>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a21      	ldr	r2, [pc, #132]	; (8005128 <HAL_DMA_Init+0x3f8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d031      	beq.n	800510c <HAL_DMA_Init+0x3dc>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1f      	ldr	r2, [pc, #124]	; (800512c <HAL_DMA_Init+0x3fc>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d02c      	beq.n	800510c <HAL_DMA_Init+0x3dc>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1e      	ldr	r2, [pc, #120]	; (8005130 <HAL_DMA_Init+0x400>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d027      	beq.n	800510c <HAL_DMA_Init+0x3dc>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1c      	ldr	r2, [pc, #112]	; (8005134 <HAL_DMA_Init+0x404>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d022      	beq.n	800510c <HAL_DMA_Init+0x3dc>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a1b      	ldr	r2, [pc, #108]	; (8005138 <HAL_DMA_Init+0x408>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d01d      	beq.n	800510c <HAL_DMA_Init+0x3dc>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a19      	ldr	r2, [pc, #100]	; (800513c <HAL_DMA_Init+0x40c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d018      	beq.n	800510c <HAL_DMA_Init+0x3dc>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a18      	ldr	r2, [pc, #96]	; (8005140 <HAL_DMA_Init+0x410>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d013      	beq.n	800510c <HAL_DMA_Init+0x3dc>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a16      	ldr	r2, [pc, #88]	; (8005144 <HAL_DMA_Init+0x414>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00e      	beq.n	800510c <HAL_DMA_Init+0x3dc>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a15      	ldr	r2, [pc, #84]	; (8005148 <HAL_DMA_Init+0x418>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d009      	beq.n	800510c <HAL_DMA_Init+0x3dc>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a13      	ldr	r2, [pc, #76]	; (800514c <HAL_DMA_Init+0x41c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d004      	beq.n	800510c <HAL_DMA_Init+0x3dc>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a12      	ldr	r2, [pc, #72]	; (8005150 <HAL_DMA_Init+0x420>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d123      	bne.n	8005154 <HAL_DMA_Init+0x424>
 800510c:	2301      	movs	r3, #1
 800510e:	e022      	b.n	8005156 <HAL_DMA_Init+0x426>
 8005110:	fe10803f 	.word	0xfe10803f
 8005114:	48022c08 	.word	0x48022c08
 8005118:	48022c1c 	.word	0x48022c1c
 800511c:	48022c30 	.word	0x48022c30
 8005120:	48022c44 	.word	0x48022c44
 8005124:	48022c58 	.word	0x48022c58
 8005128:	48022c6c 	.word	0x48022c6c
 800512c:	48022c80 	.word	0x48022c80
 8005130:	48022c94 	.word	0x48022c94
 8005134:	58025408 	.word	0x58025408
 8005138:	5802541c 	.word	0x5802541c
 800513c:	58025430 	.word	0x58025430
 8005140:	58025444 	.word	0x58025444
 8005144:	58025458 	.word	0x58025458
 8005148:	5802546c 	.word	0x5802546c
 800514c:	58025480 	.word	0x58025480
 8005150:	58025494 	.word	0x58025494
 8005154:	2300      	movs	r3, #0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d07e      	beq.n	8005258 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a80      	ldr	r2, [pc, #512]	; (8005360 <HAL_DMA_Init+0x630>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d021      	beq.n	80051a8 <HAL_DMA_Init+0x478>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a7e      	ldr	r2, [pc, #504]	; (8005364 <HAL_DMA_Init+0x634>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d01c      	beq.n	80051a8 <HAL_DMA_Init+0x478>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a7d      	ldr	r2, [pc, #500]	; (8005368 <HAL_DMA_Init+0x638>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d017      	beq.n	80051a8 <HAL_DMA_Init+0x478>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a7b      	ldr	r2, [pc, #492]	; (800536c <HAL_DMA_Init+0x63c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d012      	beq.n	80051a8 <HAL_DMA_Init+0x478>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a7a      	ldr	r2, [pc, #488]	; (8005370 <HAL_DMA_Init+0x640>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00d      	beq.n	80051a8 <HAL_DMA_Init+0x478>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a78      	ldr	r2, [pc, #480]	; (8005374 <HAL_DMA_Init+0x644>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d008      	beq.n	80051a8 <HAL_DMA_Init+0x478>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a77      	ldr	r2, [pc, #476]	; (8005378 <HAL_DMA_Init+0x648>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d003      	beq.n	80051a8 <HAL_DMA_Init+0x478>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a75      	ldr	r2, [pc, #468]	; (800537c <HAL_DMA_Init+0x64c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2202      	movs	r2, #2
 80051ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4b6e      	ldr	r3, [pc, #440]	; (8005380 <HAL_DMA_Init+0x650>)
 80051c6:	4013      	ands	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	2b40      	cmp	r3, #64	; 0x40
 80051d0:	d008      	beq.n	80051e4 <HAL_DMA_Init+0x4b4>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b80      	cmp	r3, #128	; 0x80
 80051d8:	d102      	bne.n	80051e0 <HAL_DMA_Init+0x4b0>
 80051da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051de:	e002      	b.n	80051e6 <HAL_DMA_Init+0x4b6>
 80051e0:	2300      	movs	r3, #0
 80051e2:	e000      	b.n	80051e6 <HAL_DMA_Init+0x4b6>
 80051e4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	68d2      	ldr	r2, [r2, #12]
 80051ea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005204:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800520c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005214:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	461a      	mov	r2, r3
 800522a:	4b56      	ldr	r3, [pc, #344]	; (8005384 <HAL_DMA_Init+0x654>)
 800522c:	4413      	add	r3, r2
 800522e:	4a56      	ldr	r2, [pc, #344]	; (8005388 <HAL_DMA_Init+0x658>)
 8005230:	fba2 2303 	umull	r2, r3, r2, r3
 8005234:	091b      	lsrs	r3, r3, #4
 8005236:	009a      	lsls	r2, r3, #2
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f002 fa1b 	bl	8007678 <DMA_CalcBaseAndBitshift>
 8005242:	4603      	mov	r3, r0
 8005244:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524a:	f003 031f 	and.w	r3, r3, #31
 800524e:	2201      	movs	r2, #1
 8005250:	409a      	lsls	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	605a      	str	r2, [r3, #4]
 8005256:	e008      	b.n	800526a <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2240      	movs	r2, #64	; 0x40
 800525c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2203      	movs	r2, #3
 8005262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e0ee      	b.n	8005448 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a47      	ldr	r2, [pc, #284]	; (800538c <HAL_DMA_Init+0x65c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d072      	beq.n	800535a <HAL_DMA_Init+0x62a>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a45      	ldr	r2, [pc, #276]	; (8005390 <HAL_DMA_Init+0x660>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d06d      	beq.n	800535a <HAL_DMA_Init+0x62a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a44      	ldr	r2, [pc, #272]	; (8005394 <HAL_DMA_Init+0x664>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d068      	beq.n	800535a <HAL_DMA_Init+0x62a>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a42      	ldr	r2, [pc, #264]	; (8005398 <HAL_DMA_Init+0x668>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d063      	beq.n	800535a <HAL_DMA_Init+0x62a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a41      	ldr	r2, [pc, #260]	; (800539c <HAL_DMA_Init+0x66c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d05e      	beq.n	800535a <HAL_DMA_Init+0x62a>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a3f      	ldr	r2, [pc, #252]	; (80053a0 <HAL_DMA_Init+0x670>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d059      	beq.n	800535a <HAL_DMA_Init+0x62a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a3e      	ldr	r2, [pc, #248]	; (80053a4 <HAL_DMA_Init+0x674>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d054      	beq.n	800535a <HAL_DMA_Init+0x62a>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a3c      	ldr	r2, [pc, #240]	; (80053a8 <HAL_DMA_Init+0x678>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d04f      	beq.n	800535a <HAL_DMA_Init+0x62a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a3b      	ldr	r2, [pc, #236]	; (80053ac <HAL_DMA_Init+0x67c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d04a      	beq.n	800535a <HAL_DMA_Init+0x62a>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a39      	ldr	r2, [pc, #228]	; (80053b0 <HAL_DMA_Init+0x680>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d045      	beq.n	800535a <HAL_DMA_Init+0x62a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a38      	ldr	r2, [pc, #224]	; (80053b4 <HAL_DMA_Init+0x684>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d040      	beq.n	800535a <HAL_DMA_Init+0x62a>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a36      	ldr	r2, [pc, #216]	; (80053b8 <HAL_DMA_Init+0x688>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d03b      	beq.n	800535a <HAL_DMA_Init+0x62a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a35      	ldr	r2, [pc, #212]	; (80053bc <HAL_DMA_Init+0x68c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d036      	beq.n	800535a <HAL_DMA_Init+0x62a>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a33      	ldr	r2, [pc, #204]	; (80053c0 <HAL_DMA_Init+0x690>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d031      	beq.n	800535a <HAL_DMA_Init+0x62a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a32      	ldr	r2, [pc, #200]	; (80053c4 <HAL_DMA_Init+0x694>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d02c      	beq.n	800535a <HAL_DMA_Init+0x62a>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a30      	ldr	r2, [pc, #192]	; (80053c8 <HAL_DMA_Init+0x698>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d027      	beq.n	800535a <HAL_DMA_Init+0x62a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a14      	ldr	r2, [pc, #80]	; (8005360 <HAL_DMA_Init+0x630>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d022      	beq.n	800535a <HAL_DMA_Init+0x62a>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a12      	ldr	r2, [pc, #72]	; (8005364 <HAL_DMA_Init+0x634>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d01d      	beq.n	800535a <HAL_DMA_Init+0x62a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a11      	ldr	r2, [pc, #68]	; (8005368 <HAL_DMA_Init+0x638>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d018      	beq.n	800535a <HAL_DMA_Init+0x62a>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a0f      	ldr	r2, [pc, #60]	; (800536c <HAL_DMA_Init+0x63c>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d013      	beq.n	800535a <HAL_DMA_Init+0x62a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a0e      	ldr	r2, [pc, #56]	; (8005370 <HAL_DMA_Init+0x640>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00e      	beq.n	800535a <HAL_DMA_Init+0x62a>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a0c      	ldr	r2, [pc, #48]	; (8005374 <HAL_DMA_Init+0x644>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d009      	beq.n	800535a <HAL_DMA_Init+0x62a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a0b      	ldr	r2, [pc, #44]	; (8005378 <HAL_DMA_Init+0x648>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d004      	beq.n	800535a <HAL_DMA_Init+0x62a>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a09      	ldr	r2, [pc, #36]	; (800537c <HAL_DMA_Init+0x64c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d138      	bne.n	80053cc <HAL_DMA_Init+0x69c>
 800535a:	2301      	movs	r3, #1
 800535c:	e037      	b.n	80053ce <HAL_DMA_Init+0x69e>
 800535e:	bf00      	nop
 8005360:	58025408 	.word	0x58025408
 8005364:	5802541c 	.word	0x5802541c
 8005368:	58025430 	.word	0x58025430
 800536c:	58025444 	.word	0x58025444
 8005370:	58025458 	.word	0x58025458
 8005374:	5802546c 	.word	0x5802546c
 8005378:	58025480 	.word	0x58025480
 800537c:	58025494 	.word	0x58025494
 8005380:	fffe000f 	.word	0xfffe000f
 8005384:	a7fdabf8 	.word	0xa7fdabf8
 8005388:	cccccccd 	.word	0xcccccccd
 800538c:	40020010 	.word	0x40020010
 8005390:	40020028 	.word	0x40020028
 8005394:	40020040 	.word	0x40020040
 8005398:	40020058 	.word	0x40020058
 800539c:	40020070 	.word	0x40020070
 80053a0:	40020088 	.word	0x40020088
 80053a4:	400200a0 	.word	0x400200a0
 80053a8:	400200b8 	.word	0x400200b8
 80053ac:	40020410 	.word	0x40020410
 80053b0:	40020428 	.word	0x40020428
 80053b4:	40020440 	.word	0x40020440
 80053b8:	40020458 	.word	0x40020458
 80053bc:	40020470 	.word	0x40020470
 80053c0:	40020488 	.word	0x40020488
 80053c4:	400204a0 	.word	0x400204a0
 80053c8:	400204b8 	.word	0x400204b8
 80053cc:	2300      	movs	r3, #0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d032      	beq.n	8005438 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f002 fa7e 	bl	80078d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2b80      	cmp	r3, #128	; 0x80
 80053de:	d102      	bne.n	80053e6 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80053fa:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d010      	beq.n	8005426 <HAL_DMA_Init+0x6f6>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b08      	cmp	r3, #8
 800540a:	d80c      	bhi.n	8005426 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f002 fafb 	bl	8007a08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005422:	605a      	str	r2, [r3, #4]
 8005424:	e008      	b.n	8005438 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e226      	b.n	80058ba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005472:	2b01      	cmp	r3, #1
 8005474:	d101      	bne.n	800547a <HAL_DMA_Start_IT+0x2a>
 8005476:	2302      	movs	r3, #2
 8005478:	e21f      	b.n	80058ba <HAL_DMA_Start_IT+0x46a>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b01      	cmp	r3, #1
 800548c:	f040 820a 	bne.w	80058a4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a68      	ldr	r2, [pc, #416]	; (8005644 <HAL_DMA_Start_IT+0x1f4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d04a      	beq.n	800553e <HAL_DMA_Start_IT+0xee>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a66      	ldr	r2, [pc, #408]	; (8005648 <HAL_DMA_Start_IT+0x1f8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d045      	beq.n	800553e <HAL_DMA_Start_IT+0xee>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a65      	ldr	r2, [pc, #404]	; (800564c <HAL_DMA_Start_IT+0x1fc>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d040      	beq.n	800553e <HAL_DMA_Start_IT+0xee>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a63      	ldr	r2, [pc, #396]	; (8005650 <HAL_DMA_Start_IT+0x200>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d03b      	beq.n	800553e <HAL_DMA_Start_IT+0xee>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a62      	ldr	r2, [pc, #392]	; (8005654 <HAL_DMA_Start_IT+0x204>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d036      	beq.n	800553e <HAL_DMA_Start_IT+0xee>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a60      	ldr	r2, [pc, #384]	; (8005658 <HAL_DMA_Start_IT+0x208>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d031      	beq.n	800553e <HAL_DMA_Start_IT+0xee>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a5f      	ldr	r2, [pc, #380]	; (800565c <HAL_DMA_Start_IT+0x20c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d02c      	beq.n	800553e <HAL_DMA_Start_IT+0xee>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a5d      	ldr	r2, [pc, #372]	; (8005660 <HAL_DMA_Start_IT+0x210>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d027      	beq.n	800553e <HAL_DMA_Start_IT+0xee>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a5c      	ldr	r2, [pc, #368]	; (8005664 <HAL_DMA_Start_IT+0x214>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d022      	beq.n	800553e <HAL_DMA_Start_IT+0xee>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a5a      	ldr	r2, [pc, #360]	; (8005668 <HAL_DMA_Start_IT+0x218>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d01d      	beq.n	800553e <HAL_DMA_Start_IT+0xee>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a59      	ldr	r2, [pc, #356]	; (800566c <HAL_DMA_Start_IT+0x21c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d018      	beq.n	800553e <HAL_DMA_Start_IT+0xee>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a57      	ldr	r2, [pc, #348]	; (8005670 <HAL_DMA_Start_IT+0x220>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d013      	beq.n	800553e <HAL_DMA_Start_IT+0xee>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a56      	ldr	r2, [pc, #344]	; (8005674 <HAL_DMA_Start_IT+0x224>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00e      	beq.n	800553e <HAL_DMA_Start_IT+0xee>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a54      	ldr	r2, [pc, #336]	; (8005678 <HAL_DMA_Start_IT+0x228>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d009      	beq.n	800553e <HAL_DMA_Start_IT+0xee>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a53      	ldr	r2, [pc, #332]	; (800567c <HAL_DMA_Start_IT+0x22c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d004      	beq.n	800553e <HAL_DMA_Start_IT+0xee>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a51      	ldr	r2, [pc, #324]	; (8005680 <HAL_DMA_Start_IT+0x230>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d108      	bne.n	8005550 <HAL_DMA_Start_IT+0x100>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0201 	bic.w	r2, r2, #1
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	e007      	b.n	8005560 <HAL_DMA_Start_IT+0x110>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0201 	bic.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	68b9      	ldr	r1, [r7, #8]
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f001 fea2 	bl	80072b0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a34      	ldr	r2, [pc, #208]	; (8005644 <HAL_DMA_Start_IT+0x1f4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d04a      	beq.n	800560c <HAL_DMA_Start_IT+0x1bc>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a33      	ldr	r2, [pc, #204]	; (8005648 <HAL_DMA_Start_IT+0x1f8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d045      	beq.n	800560c <HAL_DMA_Start_IT+0x1bc>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a31      	ldr	r2, [pc, #196]	; (800564c <HAL_DMA_Start_IT+0x1fc>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d040      	beq.n	800560c <HAL_DMA_Start_IT+0x1bc>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a30      	ldr	r2, [pc, #192]	; (8005650 <HAL_DMA_Start_IT+0x200>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d03b      	beq.n	800560c <HAL_DMA_Start_IT+0x1bc>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a2e      	ldr	r2, [pc, #184]	; (8005654 <HAL_DMA_Start_IT+0x204>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d036      	beq.n	800560c <HAL_DMA_Start_IT+0x1bc>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a2d      	ldr	r2, [pc, #180]	; (8005658 <HAL_DMA_Start_IT+0x208>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d031      	beq.n	800560c <HAL_DMA_Start_IT+0x1bc>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a2b      	ldr	r2, [pc, #172]	; (800565c <HAL_DMA_Start_IT+0x20c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d02c      	beq.n	800560c <HAL_DMA_Start_IT+0x1bc>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a2a      	ldr	r2, [pc, #168]	; (8005660 <HAL_DMA_Start_IT+0x210>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d027      	beq.n	800560c <HAL_DMA_Start_IT+0x1bc>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a28      	ldr	r2, [pc, #160]	; (8005664 <HAL_DMA_Start_IT+0x214>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d022      	beq.n	800560c <HAL_DMA_Start_IT+0x1bc>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a27      	ldr	r2, [pc, #156]	; (8005668 <HAL_DMA_Start_IT+0x218>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d01d      	beq.n	800560c <HAL_DMA_Start_IT+0x1bc>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a25      	ldr	r2, [pc, #148]	; (800566c <HAL_DMA_Start_IT+0x21c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d018      	beq.n	800560c <HAL_DMA_Start_IT+0x1bc>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a24      	ldr	r2, [pc, #144]	; (8005670 <HAL_DMA_Start_IT+0x220>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <HAL_DMA_Start_IT+0x1bc>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a22      	ldr	r2, [pc, #136]	; (8005674 <HAL_DMA_Start_IT+0x224>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00e      	beq.n	800560c <HAL_DMA_Start_IT+0x1bc>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a21      	ldr	r2, [pc, #132]	; (8005678 <HAL_DMA_Start_IT+0x228>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d009      	beq.n	800560c <HAL_DMA_Start_IT+0x1bc>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a1f      	ldr	r2, [pc, #124]	; (800567c <HAL_DMA_Start_IT+0x22c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d004      	beq.n	800560c <HAL_DMA_Start_IT+0x1bc>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a1e      	ldr	r2, [pc, #120]	; (8005680 <HAL_DMA_Start_IT+0x230>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d101      	bne.n	8005610 <HAL_DMA_Start_IT+0x1c0>
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <HAL_DMA_Start_IT+0x1c2>
 8005610:	2300      	movs	r3, #0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d036      	beq.n	8005684 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f023 021e 	bic.w	r2, r3, #30
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0216 	orr.w	r2, r2, #22
 8005628:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d03e      	beq.n	80056b0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 0208 	orr.w	r2, r2, #8
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	e035      	b.n	80056b0 <HAL_DMA_Start_IT+0x260>
 8005644:	40020010 	.word	0x40020010
 8005648:	40020028 	.word	0x40020028
 800564c:	40020040 	.word	0x40020040
 8005650:	40020058 	.word	0x40020058
 8005654:	40020070 	.word	0x40020070
 8005658:	40020088 	.word	0x40020088
 800565c:	400200a0 	.word	0x400200a0
 8005660:	400200b8 	.word	0x400200b8
 8005664:	40020410 	.word	0x40020410
 8005668:	40020428 	.word	0x40020428
 800566c:	40020440 	.word	0x40020440
 8005670:	40020458 	.word	0x40020458
 8005674:	40020470 	.word	0x40020470
 8005678:	40020488 	.word	0x40020488
 800567c:	400204a0 	.word	0x400204a0
 8005680:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f023 020e 	bic.w	r2, r3, #14
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 020a 	orr.w	r2, r2, #10
 8005696:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d007      	beq.n	80056b0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0204 	orr.w	r2, r2, #4
 80056ae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a83      	ldr	r2, [pc, #524]	; (80058c4 <HAL_DMA_Start_IT+0x474>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d072      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a82      	ldr	r2, [pc, #520]	; (80058c8 <HAL_DMA_Start_IT+0x478>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d06d      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a80      	ldr	r2, [pc, #512]	; (80058cc <HAL_DMA_Start_IT+0x47c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d068      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a7f      	ldr	r2, [pc, #508]	; (80058d0 <HAL_DMA_Start_IT+0x480>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d063      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a7d      	ldr	r2, [pc, #500]	; (80058d4 <HAL_DMA_Start_IT+0x484>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d05e      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a7c      	ldr	r2, [pc, #496]	; (80058d8 <HAL_DMA_Start_IT+0x488>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d059      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a7a      	ldr	r2, [pc, #488]	; (80058dc <HAL_DMA_Start_IT+0x48c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d054      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a79      	ldr	r2, [pc, #484]	; (80058e0 <HAL_DMA_Start_IT+0x490>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d04f      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a77      	ldr	r2, [pc, #476]	; (80058e4 <HAL_DMA_Start_IT+0x494>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d04a      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a76      	ldr	r2, [pc, #472]	; (80058e8 <HAL_DMA_Start_IT+0x498>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d045      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a74      	ldr	r2, [pc, #464]	; (80058ec <HAL_DMA_Start_IT+0x49c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d040      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a73      	ldr	r2, [pc, #460]	; (80058f0 <HAL_DMA_Start_IT+0x4a0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d03b      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a71      	ldr	r2, [pc, #452]	; (80058f4 <HAL_DMA_Start_IT+0x4a4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d036      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a70      	ldr	r2, [pc, #448]	; (80058f8 <HAL_DMA_Start_IT+0x4a8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d031      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a6e      	ldr	r2, [pc, #440]	; (80058fc <HAL_DMA_Start_IT+0x4ac>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d02c      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a6d      	ldr	r2, [pc, #436]	; (8005900 <HAL_DMA_Start_IT+0x4b0>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d027      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a6b      	ldr	r2, [pc, #428]	; (8005904 <HAL_DMA_Start_IT+0x4b4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d022      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a6a      	ldr	r2, [pc, #424]	; (8005908 <HAL_DMA_Start_IT+0x4b8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d01d      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a68      	ldr	r2, [pc, #416]	; (800590c <HAL_DMA_Start_IT+0x4bc>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d018      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a67      	ldr	r2, [pc, #412]	; (8005910 <HAL_DMA_Start_IT+0x4c0>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d013      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a65      	ldr	r2, [pc, #404]	; (8005914 <HAL_DMA_Start_IT+0x4c4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00e      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a64      	ldr	r2, [pc, #400]	; (8005918 <HAL_DMA_Start_IT+0x4c8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d009      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a62      	ldr	r2, [pc, #392]	; (800591c <HAL_DMA_Start_IT+0x4cc>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d004      	beq.n	80057a0 <HAL_DMA_Start_IT+0x350>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a61      	ldr	r2, [pc, #388]	; (8005920 <HAL_DMA_Start_IT+0x4d0>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d101      	bne.n	80057a4 <HAL_DMA_Start_IT+0x354>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <HAL_DMA_Start_IT+0x356>
 80057a4:	2300      	movs	r3, #0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d01a      	beq.n	80057e0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d007      	beq.n	80057c8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057c6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d007      	beq.n	80057e0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057de:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a37      	ldr	r2, [pc, #220]	; (80058c4 <HAL_DMA_Start_IT+0x474>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d04a      	beq.n	8005880 <HAL_DMA_Start_IT+0x430>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a36      	ldr	r2, [pc, #216]	; (80058c8 <HAL_DMA_Start_IT+0x478>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d045      	beq.n	8005880 <HAL_DMA_Start_IT+0x430>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a34      	ldr	r2, [pc, #208]	; (80058cc <HAL_DMA_Start_IT+0x47c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d040      	beq.n	8005880 <HAL_DMA_Start_IT+0x430>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a33      	ldr	r2, [pc, #204]	; (80058d0 <HAL_DMA_Start_IT+0x480>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d03b      	beq.n	8005880 <HAL_DMA_Start_IT+0x430>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a31      	ldr	r2, [pc, #196]	; (80058d4 <HAL_DMA_Start_IT+0x484>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d036      	beq.n	8005880 <HAL_DMA_Start_IT+0x430>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a30      	ldr	r2, [pc, #192]	; (80058d8 <HAL_DMA_Start_IT+0x488>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d031      	beq.n	8005880 <HAL_DMA_Start_IT+0x430>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a2e      	ldr	r2, [pc, #184]	; (80058dc <HAL_DMA_Start_IT+0x48c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d02c      	beq.n	8005880 <HAL_DMA_Start_IT+0x430>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a2d      	ldr	r2, [pc, #180]	; (80058e0 <HAL_DMA_Start_IT+0x490>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d027      	beq.n	8005880 <HAL_DMA_Start_IT+0x430>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a2b      	ldr	r2, [pc, #172]	; (80058e4 <HAL_DMA_Start_IT+0x494>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d022      	beq.n	8005880 <HAL_DMA_Start_IT+0x430>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a2a      	ldr	r2, [pc, #168]	; (80058e8 <HAL_DMA_Start_IT+0x498>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d01d      	beq.n	8005880 <HAL_DMA_Start_IT+0x430>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a28      	ldr	r2, [pc, #160]	; (80058ec <HAL_DMA_Start_IT+0x49c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d018      	beq.n	8005880 <HAL_DMA_Start_IT+0x430>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a27      	ldr	r2, [pc, #156]	; (80058f0 <HAL_DMA_Start_IT+0x4a0>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d013      	beq.n	8005880 <HAL_DMA_Start_IT+0x430>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a25      	ldr	r2, [pc, #148]	; (80058f4 <HAL_DMA_Start_IT+0x4a4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00e      	beq.n	8005880 <HAL_DMA_Start_IT+0x430>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a24      	ldr	r2, [pc, #144]	; (80058f8 <HAL_DMA_Start_IT+0x4a8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d009      	beq.n	8005880 <HAL_DMA_Start_IT+0x430>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a22      	ldr	r2, [pc, #136]	; (80058fc <HAL_DMA_Start_IT+0x4ac>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <HAL_DMA_Start_IT+0x430>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a21      	ldr	r2, [pc, #132]	; (8005900 <HAL_DMA_Start_IT+0x4b0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d108      	bne.n	8005892 <HAL_DMA_Start_IT+0x442>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f042 0201 	orr.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	e012      	b.n	80058b8 <HAL_DMA_Start_IT+0x468>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f042 0201 	orr.w	r2, r2, #1
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	e009      	b.n	80058b8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80058b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	40020010 	.word	0x40020010
 80058c8:	40020028 	.word	0x40020028
 80058cc:	40020040 	.word	0x40020040
 80058d0:	40020058 	.word	0x40020058
 80058d4:	40020070 	.word	0x40020070
 80058d8:	40020088 	.word	0x40020088
 80058dc:	400200a0 	.word	0x400200a0
 80058e0:	400200b8 	.word	0x400200b8
 80058e4:	40020410 	.word	0x40020410
 80058e8:	40020428 	.word	0x40020428
 80058ec:	40020440 	.word	0x40020440
 80058f0:	40020458 	.word	0x40020458
 80058f4:	40020470 	.word	0x40020470
 80058f8:	40020488 	.word	0x40020488
 80058fc:	400204a0 	.word	0x400204a0
 8005900:	400204b8 	.word	0x400204b8
 8005904:	58025408 	.word	0x58025408
 8005908:	5802541c 	.word	0x5802541c
 800590c:	58025430 	.word	0x58025430
 8005910:	58025444 	.word	0x58025444
 8005914:	58025458 	.word	0x58025458
 8005918:	5802546c 	.word	0x5802546c
 800591c:	58025480 	.word	0x58025480
 8005920:	58025494 	.word	0x58025494

08005924 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800592c:	f7fe fdf2 	bl	8004514 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e2dc      	b.n	8005ef6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d008      	beq.n	800595a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2280      	movs	r2, #128	; 0x80
 800594c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e2cd      	b.n	8005ef6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a76      	ldr	r2, [pc, #472]	; (8005b38 <HAL_DMA_Abort+0x214>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d04a      	beq.n	80059fa <HAL_DMA_Abort+0xd6>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a74      	ldr	r2, [pc, #464]	; (8005b3c <HAL_DMA_Abort+0x218>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d045      	beq.n	80059fa <HAL_DMA_Abort+0xd6>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a73      	ldr	r2, [pc, #460]	; (8005b40 <HAL_DMA_Abort+0x21c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d040      	beq.n	80059fa <HAL_DMA_Abort+0xd6>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a71      	ldr	r2, [pc, #452]	; (8005b44 <HAL_DMA_Abort+0x220>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d03b      	beq.n	80059fa <HAL_DMA_Abort+0xd6>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a70      	ldr	r2, [pc, #448]	; (8005b48 <HAL_DMA_Abort+0x224>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d036      	beq.n	80059fa <HAL_DMA_Abort+0xd6>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a6e      	ldr	r2, [pc, #440]	; (8005b4c <HAL_DMA_Abort+0x228>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d031      	beq.n	80059fa <HAL_DMA_Abort+0xd6>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a6d      	ldr	r2, [pc, #436]	; (8005b50 <HAL_DMA_Abort+0x22c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d02c      	beq.n	80059fa <HAL_DMA_Abort+0xd6>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a6b      	ldr	r2, [pc, #428]	; (8005b54 <HAL_DMA_Abort+0x230>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d027      	beq.n	80059fa <HAL_DMA_Abort+0xd6>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a6a      	ldr	r2, [pc, #424]	; (8005b58 <HAL_DMA_Abort+0x234>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d022      	beq.n	80059fa <HAL_DMA_Abort+0xd6>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a68      	ldr	r2, [pc, #416]	; (8005b5c <HAL_DMA_Abort+0x238>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d01d      	beq.n	80059fa <HAL_DMA_Abort+0xd6>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a67      	ldr	r2, [pc, #412]	; (8005b60 <HAL_DMA_Abort+0x23c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d018      	beq.n	80059fa <HAL_DMA_Abort+0xd6>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a65      	ldr	r2, [pc, #404]	; (8005b64 <HAL_DMA_Abort+0x240>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d013      	beq.n	80059fa <HAL_DMA_Abort+0xd6>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a64      	ldr	r2, [pc, #400]	; (8005b68 <HAL_DMA_Abort+0x244>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00e      	beq.n	80059fa <HAL_DMA_Abort+0xd6>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a62      	ldr	r2, [pc, #392]	; (8005b6c <HAL_DMA_Abort+0x248>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d009      	beq.n	80059fa <HAL_DMA_Abort+0xd6>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a61      	ldr	r2, [pc, #388]	; (8005b70 <HAL_DMA_Abort+0x24c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d004      	beq.n	80059fa <HAL_DMA_Abort+0xd6>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a5f      	ldr	r2, [pc, #380]	; (8005b74 <HAL_DMA_Abort+0x250>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d101      	bne.n	80059fe <HAL_DMA_Abort+0xda>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <HAL_DMA_Abort+0xdc>
 80059fe:	2300      	movs	r3, #0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d013      	beq.n	8005a2c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 021e 	bic.w	r2, r2, #30
 8005a12:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695a      	ldr	r2, [r3, #20]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a22:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	617b      	str	r3, [r7, #20]
 8005a2a:	e00a      	b.n	8005a42 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 020e 	bic.w	r2, r2, #14
 8005a3a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a3c      	ldr	r2, [pc, #240]	; (8005b38 <HAL_DMA_Abort+0x214>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d072      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a3a      	ldr	r2, [pc, #232]	; (8005b3c <HAL_DMA_Abort+0x218>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d06d      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a39      	ldr	r2, [pc, #228]	; (8005b40 <HAL_DMA_Abort+0x21c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d068      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a37      	ldr	r2, [pc, #220]	; (8005b44 <HAL_DMA_Abort+0x220>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d063      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a36      	ldr	r2, [pc, #216]	; (8005b48 <HAL_DMA_Abort+0x224>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d05e      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a34      	ldr	r2, [pc, #208]	; (8005b4c <HAL_DMA_Abort+0x228>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d059      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a33      	ldr	r2, [pc, #204]	; (8005b50 <HAL_DMA_Abort+0x22c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d054      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a31      	ldr	r2, [pc, #196]	; (8005b54 <HAL_DMA_Abort+0x230>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d04f      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a30      	ldr	r2, [pc, #192]	; (8005b58 <HAL_DMA_Abort+0x234>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d04a      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a2e      	ldr	r2, [pc, #184]	; (8005b5c <HAL_DMA_Abort+0x238>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d045      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a2d      	ldr	r2, [pc, #180]	; (8005b60 <HAL_DMA_Abort+0x23c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d040      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a2b      	ldr	r2, [pc, #172]	; (8005b64 <HAL_DMA_Abort+0x240>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d03b      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a2a      	ldr	r2, [pc, #168]	; (8005b68 <HAL_DMA_Abort+0x244>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d036      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a28      	ldr	r2, [pc, #160]	; (8005b6c <HAL_DMA_Abort+0x248>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d031      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a27      	ldr	r2, [pc, #156]	; (8005b70 <HAL_DMA_Abort+0x24c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d02c      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a25      	ldr	r2, [pc, #148]	; (8005b74 <HAL_DMA_Abort+0x250>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d027      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a24      	ldr	r2, [pc, #144]	; (8005b78 <HAL_DMA_Abort+0x254>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d022      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a22      	ldr	r2, [pc, #136]	; (8005b7c <HAL_DMA_Abort+0x258>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d01d      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a21      	ldr	r2, [pc, #132]	; (8005b80 <HAL_DMA_Abort+0x25c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d018      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a1f      	ldr	r2, [pc, #124]	; (8005b84 <HAL_DMA_Abort+0x260>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d013      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a1e      	ldr	r2, [pc, #120]	; (8005b88 <HAL_DMA_Abort+0x264>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00e      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a1c      	ldr	r2, [pc, #112]	; (8005b8c <HAL_DMA_Abort+0x268>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d009      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a1b      	ldr	r2, [pc, #108]	; (8005b90 <HAL_DMA_Abort+0x26c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d004      	beq.n	8005b32 <HAL_DMA_Abort+0x20e>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a19      	ldr	r2, [pc, #100]	; (8005b94 <HAL_DMA_Abort+0x270>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d132      	bne.n	8005b98 <HAL_DMA_Abort+0x274>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e031      	b.n	8005b9a <HAL_DMA_Abort+0x276>
 8005b36:	bf00      	nop
 8005b38:	40020010 	.word	0x40020010
 8005b3c:	40020028 	.word	0x40020028
 8005b40:	40020040 	.word	0x40020040
 8005b44:	40020058 	.word	0x40020058
 8005b48:	40020070 	.word	0x40020070
 8005b4c:	40020088 	.word	0x40020088
 8005b50:	400200a0 	.word	0x400200a0
 8005b54:	400200b8 	.word	0x400200b8
 8005b58:	40020410 	.word	0x40020410
 8005b5c:	40020428 	.word	0x40020428
 8005b60:	40020440 	.word	0x40020440
 8005b64:	40020458 	.word	0x40020458
 8005b68:	40020470 	.word	0x40020470
 8005b6c:	40020488 	.word	0x40020488
 8005b70:	400204a0 	.word	0x400204a0
 8005b74:	400204b8 	.word	0x400204b8
 8005b78:	58025408 	.word	0x58025408
 8005b7c:	5802541c 	.word	0x5802541c
 8005b80:	58025430 	.word	0x58025430
 8005b84:	58025444 	.word	0x58025444
 8005b88:	58025458 	.word	0x58025458
 8005b8c:	5802546c 	.word	0x5802546c
 8005b90:	58025480 	.word	0x58025480
 8005b94:	58025494 	.word	0x58025494
 8005b98:	2300      	movs	r3, #0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a6d      	ldr	r2, [pc, #436]	; (8005d68 <HAL_DMA_Abort+0x444>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d04a      	beq.n	8005c4e <HAL_DMA_Abort+0x32a>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a6b      	ldr	r2, [pc, #428]	; (8005d6c <HAL_DMA_Abort+0x448>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d045      	beq.n	8005c4e <HAL_DMA_Abort+0x32a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a6a      	ldr	r2, [pc, #424]	; (8005d70 <HAL_DMA_Abort+0x44c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d040      	beq.n	8005c4e <HAL_DMA_Abort+0x32a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a68      	ldr	r2, [pc, #416]	; (8005d74 <HAL_DMA_Abort+0x450>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d03b      	beq.n	8005c4e <HAL_DMA_Abort+0x32a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a67      	ldr	r2, [pc, #412]	; (8005d78 <HAL_DMA_Abort+0x454>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d036      	beq.n	8005c4e <HAL_DMA_Abort+0x32a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a65      	ldr	r2, [pc, #404]	; (8005d7c <HAL_DMA_Abort+0x458>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d031      	beq.n	8005c4e <HAL_DMA_Abort+0x32a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a64      	ldr	r2, [pc, #400]	; (8005d80 <HAL_DMA_Abort+0x45c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d02c      	beq.n	8005c4e <HAL_DMA_Abort+0x32a>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a62      	ldr	r2, [pc, #392]	; (8005d84 <HAL_DMA_Abort+0x460>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d027      	beq.n	8005c4e <HAL_DMA_Abort+0x32a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a61      	ldr	r2, [pc, #388]	; (8005d88 <HAL_DMA_Abort+0x464>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d022      	beq.n	8005c4e <HAL_DMA_Abort+0x32a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a5f      	ldr	r2, [pc, #380]	; (8005d8c <HAL_DMA_Abort+0x468>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d01d      	beq.n	8005c4e <HAL_DMA_Abort+0x32a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a5e      	ldr	r2, [pc, #376]	; (8005d90 <HAL_DMA_Abort+0x46c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d018      	beq.n	8005c4e <HAL_DMA_Abort+0x32a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a5c      	ldr	r2, [pc, #368]	; (8005d94 <HAL_DMA_Abort+0x470>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d013      	beq.n	8005c4e <HAL_DMA_Abort+0x32a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a5b      	ldr	r2, [pc, #364]	; (8005d98 <HAL_DMA_Abort+0x474>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00e      	beq.n	8005c4e <HAL_DMA_Abort+0x32a>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a59      	ldr	r2, [pc, #356]	; (8005d9c <HAL_DMA_Abort+0x478>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d009      	beq.n	8005c4e <HAL_DMA_Abort+0x32a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a58      	ldr	r2, [pc, #352]	; (8005da0 <HAL_DMA_Abort+0x47c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d004      	beq.n	8005c4e <HAL_DMA_Abort+0x32a>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a56      	ldr	r2, [pc, #344]	; (8005da4 <HAL_DMA_Abort+0x480>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d108      	bne.n	8005c60 <HAL_DMA_Abort+0x33c>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0201 	bic.w	r2, r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	e007      	b.n	8005c70 <HAL_DMA_Abort+0x34c>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0201 	bic.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c70:	e013      	b.n	8005c9a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c72:	f7fe fc4f 	bl	8004514 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b05      	cmp	r3, #5
 8005c7e:	d90c      	bls.n	8005c9a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2220      	movs	r2, #32
 8005c84:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2203      	movs	r2, #3
 8005c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e12d      	b.n	8005ef6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e5      	bne.n	8005c72 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a2f      	ldr	r2, [pc, #188]	; (8005d68 <HAL_DMA_Abort+0x444>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d04a      	beq.n	8005d46 <HAL_DMA_Abort+0x422>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a2d      	ldr	r2, [pc, #180]	; (8005d6c <HAL_DMA_Abort+0x448>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d045      	beq.n	8005d46 <HAL_DMA_Abort+0x422>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a2c      	ldr	r2, [pc, #176]	; (8005d70 <HAL_DMA_Abort+0x44c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d040      	beq.n	8005d46 <HAL_DMA_Abort+0x422>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a2a      	ldr	r2, [pc, #168]	; (8005d74 <HAL_DMA_Abort+0x450>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d03b      	beq.n	8005d46 <HAL_DMA_Abort+0x422>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a29      	ldr	r2, [pc, #164]	; (8005d78 <HAL_DMA_Abort+0x454>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d036      	beq.n	8005d46 <HAL_DMA_Abort+0x422>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a27      	ldr	r2, [pc, #156]	; (8005d7c <HAL_DMA_Abort+0x458>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d031      	beq.n	8005d46 <HAL_DMA_Abort+0x422>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a26      	ldr	r2, [pc, #152]	; (8005d80 <HAL_DMA_Abort+0x45c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d02c      	beq.n	8005d46 <HAL_DMA_Abort+0x422>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a24      	ldr	r2, [pc, #144]	; (8005d84 <HAL_DMA_Abort+0x460>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d027      	beq.n	8005d46 <HAL_DMA_Abort+0x422>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a23      	ldr	r2, [pc, #140]	; (8005d88 <HAL_DMA_Abort+0x464>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d022      	beq.n	8005d46 <HAL_DMA_Abort+0x422>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a21      	ldr	r2, [pc, #132]	; (8005d8c <HAL_DMA_Abort+0x468>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d01d      	beq.n	8005d46 <HAL_DMA_Abort+0x422>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a20      	ldr	r2, [pc, #128]	; (8005d90 <HAL_DMA_Abort+0x46c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d018      	beq.n	8005d46 <HAL_DMA_Abort+0x422>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a1e      	ldr	r2, [pc, #120]	; (8005d94 <HAL_DMA_Abort+0x470>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d013      	beq.n	8005d46 <HAL_DMA_Abort+0x422>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a1d      	ldr	r2, [pc, #116]	; (8005d98 <HAL_DMA_Abort+0x474>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00e      	beq.n	8005d46 <HAL_DMA_Abort+0x422>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a1b      	ldr	r2, [pc, #108]	; (8005d9c <HAL_DMA_Abort+0x478>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d009      	beq.n	8005d46 <HAL_DMA_Abort+0x422>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a1a      	ldr	r2, [pc, #104]	; (8005da0 <HAL_DMA_Abort+0x47c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d004      	beq.n	8005d46 <HAL_DMA_Abort+0x422>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a18      	ldr	r2, [pc, #96]	; (8005da4 <HAL_DMA_Abort+0x480>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d101      	bne.n	8005d4a <HAL_DMA_Abort+0x426>
 8005d46:	2301      	movs	r3, #1
 8005d48:	e000      	b.n	8005d4c <HAL_DMA_Abort+0x428>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d02b      	beq.n	8005da8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d54:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5a:	f003 031f 	and.w	r3, r3, #31
 8005d5e:	223f      	movs	r2, #63	; 0x3f
 8005d60:	409a      	lsls	r2, r3
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	609a      	str	r2, [r3, #8]
 8005d66:	e02a      	b.n	8005dbe <HAL_DMA_Abort+0x49a>
 8005d68:	40020010 	.word	0x40020010
 8005d6c:	40020028 	.word	0x40020028
 8005d70:	40020040 	.word	0x40020040
 8005d74:	40020058 	.word	0x40020058
 8005d78:	40020070 	.word	0x40020070
 8005d7c:	40020088 	.word	0x40020088
 8005d80:	400200a0 	.word	0x400200a0
 8005d84:	400200b8 	.word	0x400200b8
 8005d88:	40020410 	.word	0x40020410
 8005d8c:	40020428 	.word	0x40020428
 8005d90:	40020440 	.word	0x40020440
 8005d94:	40020458 	.word	0x40020458
 8005d98:	40020470 	.word	0x40020470
 8005d9c:	40020488 	.word	0x40020488
 8005da0:	400204a0 	.word	0x400204a0
 8005da4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db2:	f003 031f 	and.w	r3, r3, #31
 8005db6:	2201      	movs	r2, #1
 8005db8:	409a      	lsls	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a4f      	ldr	r2, [pc, #316]	; (8005f00 <HAL_DMA_Abort+0x5dc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d072      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a4d      	ldr	r2, [pc, #308]	; (8005f04 <HAL_DMA_Abort+0x5e0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d06d      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a4c      	ldr	r2, [pc, #304]	; (8005f08 <HAL_DMA_Abort+0x5e4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d068      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a4a      	ldr	r2, [pc, #296]	; (8005f0c <HAL_DMA_Abort+0x5e8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d063      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a49      	ldr	r2, [pc, #292]	; (8005f10 <HAL_DMA_Abort+0x5ec>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d05e      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a47      	ldr	r2, [pc, #284]	; (8005f14 <HAL_DMA_Abort+0x5f0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d059      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a46      	ldr	r2, [pc, #280]	; (8005f18 <HAL_DMA_Abort+0x5f4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d054      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a44      	ldr	r2, [pc, #272]	; (8005f1c <HAL_DMA_Abort+0x5f8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d04f      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a43      	ldr	r2, [pc, #268]	; (8005f20 <HAL_DMA_Abort+0x5fc>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d04a      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a41      	ldr	r2, [pc, #260]	; (8005f24 <HAL_DMA_Abort+0x600>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d045      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a40      	ldr	r2, [pc, #256]	; (8005f28 <HAL_DMA_Abort+0x604>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d040      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a3e      	ldr	r2, [pc, #248]	; (8005f2c <HAL_DMA_Abort+0x608>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d03b      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a3d      	ldr	r2, [pc, #244]	; (8005f30 <HAL_DMA_Abort+0x60c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d036      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a3b      	ldr	r2, [pc, #236]	; (8005f34 <HAL_DMA_Abort+0x610>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d031      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a3a      	ldr	r2, [pc, #232]	; (8005f38 <HAL_DMA_Abort+0x614>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d02c      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a38      	ldr	r2, [pc, #224]	; (8005f3c <HAL_DMA_Abort+0x618>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d027      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a37      	ldr	r2, [pc, #220]	; (8005f40 <HAL_DMA_Abort+0x61c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d022      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a35      	ldr	r2, [pc, #212]	; (8005f44 <HAL_DMA_Abort+0x620>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d01d      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a34      	ldr	r2, [pc, #208]	; (8005f48 <HAL_DMA_Abort+0x624>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d018      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a32      	ldr	r2, [pc, #200]	; (8005f4c <HAL_DMA_Abort+0x628>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d013      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a31      	ldr	r2, [pc, #196]	; (8005f50 <HAL_DMA_Abort+0x62c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00e      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a2f      	ldr	r2, [pc, #188]	; (8005f54 <HAL_DMA_Abort+0x630>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d009      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a2e      	ldr	r2, [pc, #184]	; (8005f58 <HAL_DMA_Abort+0x634>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d004      	beq.n	8005eae <HAL_DMA_Abort+0x58a>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a2c      	ldr	r2, [pc, #176]	; (8005f5c <HAL_DMA_Abort+0x638>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d101      	bne.n	8005eb2 <HAL_DMA_Abort+0x58e>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e000      	b.n	8005eb4 <HAL_DMA_Abort+0x590>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d015      	beq.n	8005ee4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ec0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00c      	beq.n	8005ee4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ed8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ee2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40020010 	.word	0x40020010
 8005f04:	40020028 	.word	0x40020028
 8005f08:	40020040 	.word	0x40020040
 8005f0c:	40020058 	.word	0x40020058
 8005f10:	40020070 	.word	0x40020070
 8005f14:	40020088 	.word	0x40020088
 8005f18:	400200a0 	.word	0x400200a0
 8005f1c:	400200b8 	.word	0x400200b8
 8005f20:	40020410 	.word	0x40020410
 8005f24:	40020428 	.word	0x40020428
 8005f28:	40020440 	.word	0x40020440
 8005f2c:	40020458 	.word	0x40020458
 8005f30:	40020470 	.word	0x40020470
 8005f34:	40020488 	.word	0x40020488
 8005f38:	400204a0 	.word	0x400204a0
 8005f3c:	400204b8 	.word	0x400204b8
 8005f40:	58025408 	.word	0x58025408
 8005f44:	5802541c 	.word	0x5802541c
 8005f48:	58025430 	.word	0x58025430
 8005f4c:	58025444 	.word	0x58025444
 8005f50:	58025458 	.word	0x58025458
 8005f54:	5802546c 	.word	0x5802546c
 8005f58:	58025480 	.word	0x58025480
 8005f5c:	58025494 	.word	0x58025494

08005f60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e237      	b.n	80063e2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d004      	beq.n	8005f88 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2280      	movs	r2, #128	; 0x80
 8005f82:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e22c      	b.n	80063e2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a5c      	ldr	r2, [pc, #368]	; (8006100 <HAL_DMA_Abort_IT+0x1a0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d04a      	beq.n	8006028 <HAL_DMA_Abort_IT+0xc8>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a5b      	ldr	r2, [pc, #364]	; (8006104 <HAL_DMA_Abort_IT+0x1a4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d045      	beq.n	8006028 <HAL_DMA_Abort_IT+0xc8>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a59      	ldr	r2, [pc, #356]	; (8006108 <HAL_DMA_Abort_IT+0x1a8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d040      	beq.n	8006028 <HAL_DMA_Abort_IT+0xc8>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a58      	ldr	r2, [pc, #352]	; (800610c <HAL_DMA_Abort_IT+0x1ac>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d03b      	beq.n	8006028 <HAL_DMA_Abort_IT+0xc8>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a56      	ldr	r2, [pc, #344]	; (8006110 <HAL_DMA_Abort_IT+0x1b0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d036      	beq.n	8006028 <HAL_DMA_Abort_IT+0xc8>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a55      	ldr	r2, [pc, #340]	; (8006114 <HAL_DMA_Abort_IT+0x1b4>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d031      	beq.n	8006028 <HAL_DMA_Abort_IT+0xc8>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a53      	ldr	r2, [pc, #332]	; (8006118 <HAL_DMA_Abort_IT+0x1b8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d02c      	beq.n	8006028 <HAL_DMA_Abort_IT+0xc8>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a52      	ldr	r2, [pc, #328]	; (800611c <HAL_DMA_Abort_IT+0x1bc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d027      	beq.n	8006028 <HAL_DMA_Abort_IT+0xc8>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a50      	ldr	r2, [pc, #320]	; (8006120 <HAL_DMA_Abort_IT+0x1c0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d022      	beq.n	8006028 <HAL_DMA_Abort_IT+0xc8>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a4f      	ldr	r2, [pc, #316]	; (8006124 <HAL_DMA_Abort_IT+0x1c4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d01d      	beq.n	8006028 <HAL_DMA_Abort_IT+0xc8>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a4d      	ldr	r2, [pc, #308]	; (8006128 <HAL_DMA_Abort_IT+0x1c8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d018      	beq.n	8006028 <HAL_DMA_Abort_IT+0xc8>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a4c      	ldr	r2, [pc, #304]	; (800612c <HAL_DMA_Abort_IT+0x1cc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d013      	beq.n	8006028 <HAL_DMA_Abort_IT+0xc8>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a4a      	ldr	r2, [pc, #296]	; (8006130 <HAL_DMA_Abort_IT+0x1d0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00e      	beq.n	8006028 <HAL_DMA_Abort_IT+0xc8>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a49      	ldr	r2, [pc, #292]	; (8006134 <HAL_DMA_Abort_IT+0x1d4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d009      	beq.n	8006028 <HAL_DMA_Abort_IT+0xc8>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a47      	ldr	r2, [pc, #284]	; (8006138 <HAL_DMA_Abort_IT+0x1d8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d004      	beq.n	8006028 <HAL_DMA_Abort_IT+0xc8>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a46      	ldr	r2, [pc, #280]	; (800613c <HAL_DMA_Abort_IT+0x1dc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d101      	bne.n	800602c <HAL_DMA_Abort_IT+0xcc>
 8006028:	2301      	movs	r3, #1
 800602a:	e000      	b.n	800602e <HAL_DMA_Abort_IT+0xce>
 800602c:	2300      	movs	r3, #0
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 8086 	beq.w	8006140 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2204      	movs	r2, #4
 8006038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a2f      	ldr	r2, [pc, #188]	; (8006100 <HAL_DMA_Abort_IT+0x1a0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d04a      	beq.n	80060dc <HAL_DMA_Abort_IT+0x17c>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a2e      	ldr	r2, [pc, #184]	; (8006104 <HAL_DMA_Abort_IT+0x1a4>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d045      	beq.n	80060dc <HAL_DMA_Abort_IT+0x17c>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a2c      	ldr	r2, [pc, #176]	; (8006108 <HAL_DMA_Abort_IT+0x1a8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d040      	beq.n	80060dc <HAL_DMA_Abort_IT+0x17c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a2b      	ldr	r2, [pc, #172]	; (800610c <HAL_DMA_Abort_IT+0x1ac>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d03b      	beq.n	80060dc <HAL_DMA_Abort_IT+0x17c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a29      	ldr	r2, [pc, #164]	; (8006110 <HAL_DMA_Abort_IT+0x1b0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d036      	beq.n	80060dc <HAL_DMA_Abort_IT+0x17c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a28      	ldr	r2, [pc, #160]	; (8006114 <HAL_DMA_Abort_IT+0x1b4>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d031      	beq.n	80060dc <HAL_DMA_Abort_IT+0x17c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a26      	ldr	r2, [pc, #152]	; (8006118 <HAL_DMA_Abort_IT+0x1b8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d02c      	beq.n	80060dc <HAL_DMA_Abort_IT+0x17c>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a25      	ldr	r2, [pc, #148]	; (800611c <HAL_DMA_Abort_IT+0x1bc>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d027      	beq.n	80060dc <HAL_DMA_Abort_IT+0x17c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a23      	ldr	r2, [pc, #140]	; (8006120 <HAL_DMA_Abort_IT+0x1c0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d022      	beq.n	80060dc <HAL_DMA_Abort_IT+0x17c>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a22      	ldr	r2, [pc, #136]	; (8006124 <HAL_DMA_Abort_IT+0x1c4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d01d      	beq.n	80060dc <HAL_DMA_Abort_IT+0x17c>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a20      	ldr	r2, [pc, #128]	; (8006128 <HAL_DMA_Abort_IT+0x1c8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d018      	beq.n	80060dc <HAL_DMA_Abort_IT+0x17c>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1f      	ldr	r2, [pc, #124]	; (800612c <HAL_DMA_Abort_IT+0x1cc>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d013      	beq.n	80060dc <HAL_DMA_Abort_IT+0x17c>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a1d      	ldr	r2, [pc, #116]	; (8006130 <HAL_DMA_Abort_IT+0x1d0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d00e      	beq.n	80060dc <HAL_DMA_Abort_IT+0x17c>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a1c      	ldr	r2, [pc, #112]	; (8006134 <HAL_DMA_Abort_IT+0x1d4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d009      	beq.n	80060dc <HAL_DMA_Abort_IT+0x17c>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a1a      	ldr	r2, [pc, #104]	; (8006138 <HAL_DMA_Abort_IT+0x1d8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d004      	beq.n	80060dc <HAL_DMA_Abort_IT+0x17c>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a19      	ldr	r2, [pc, #100]	; (800613c <HAL_DMA_Abort_IT+0x1dc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d108      	bne.n	80060ee <HAL_DMA_Abort_IT+0x18e>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0201 	bic.w	r2, r2, #1
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	e178      	b.n	80063e0 <HAL_DMA_Abort_IT+0x480>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0201 	bic.w	r2, r2, #1
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	e16f      	b.n	80063e0 <HAL_DMA_Abort_IT+0x480>
 8006100:	40020010 	.word	0x40020010
 8006104:	40020028 	.word	0x40020028
 8006108:	40020040 	.word	0x40020040
 800610c:	40020058 	.word	0x40020058
 8006110:	40020070 	.word	0x40020070
 8006114:	40020088 	.word	0x40020088
 8006118:	400200a0 	.word	0x400200a0
 800611c:	400200b8 	.word	0x400200b8
 8006120:	40020410 	.word	0x40020410
 8006124:	40020428 	.word	0x40020428
 8006128:	40020440 	.word	0x40020440
 800612c:	40020458 	.word	0x40020458
 8006130:	40020470 	.word	0x40020470
 8006134:	40020488 	.word	0x40020488
 8006138:	400204a0 	.word	0x400204a0
 800613c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 020e 	bic.w	r2, r2, #14
 800614e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a6c      	ldr	r2, [pc, #432]	; (8006308 <HAL_DMA_Abort_IT+0x3a8>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d04a      	beq.n	80061f0 <HAL_DMA_Abort_IT+0x290>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a6b      	ldr	r2, [pc, #428]	; (800630c <HAL_DMA_Abort_IT+0x3ac>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d045      	beq.n	80061f0 <HAL_DMA_Abort_IT+0x290>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a69      	ldr	r2, [pc, #420]	; (8006310 <HAL_DMA_Abort_IT+0x3b0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d040      	beq.n	80061f0 <HAL_DMA_Abort_IT+0x290>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a68      	ldr	r2, [pc, #416]	; (8006314 <HAL_DMA_Abort_IT+0x3b4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d03b      	beq.n	80061f0 <HAL_DMA_Abort_IT+0x290>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a66      	ldr	r2, [pc, #408]	; (8006318 <HAL_DMA_Abort_IT+0x3b8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d036      	beq.n	80061f0 <HAL_DMA_Abort_IT+0x290>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a65      	ldr	r2, [pc, #404]	; (800631c <HAL_DMA_Abort_IT+0x3bc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d031      	beq.n	80061f0 <HAL_DMA_Abort_IT+0x290>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a63      	ldr	r2, [pc, #396]	; (8006320 <HAL_DMA_Abort_IT+0x3c0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d02c      	beq.n	80061f0 <HAL_DMA_Abort_IT+0x290>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a62      	ldr	r2, [pc, #392]	; (8006324 <HAL_DMA_Abort_IT+0x3c4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d027      	beq.n	80061f0 <HAL_DMA_Abort_IT+0x290>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a60      	ldr	r2, [pc, #384]	; (8006328 <HAL_DMA_Abort_IT+0x3c8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d022      	beq.n	80061f0 <HAL_DMA_Abort_IT+0x290>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a5f      	ldr	r2, [pc, #380]	; (800632c <HAL_DMA_Abort_IT+0x3cc>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d01d      	beq.n	80061f0 <HAL_DMA_Abort_IT+0x290>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a5d      	ldr	r2, [pc, #372]	; (8006330 <HAL_DMA_Abort_IT+0x3d0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d018      	beq.n	80061f0 <HAL_DMA_Abort_IT+0x290>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a5c      	ldr	r2, [pc, #368]	; (8006334 <HAL_DMA_Abort_IT+0x3d4>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d013      	beq.n	80061f0 <HAL_DMA_Abort_IT+0x290>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a5a      	ldr	r2, [pc, #360]	; (8006338 <HAL_DMA_Abort_IT+0x3d8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00e      	beq.n	80061f0 <HAL_DMA_Abort_IT+0x290>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a59      	ldr	r2, [pc, #356]	; (800633c <HAL_DMA_Abort_IT+0x3dc>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d009      	beq.n	80061f0 <HAL_DMA_Abort_IT+0x290>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a57      	ldr	r2, [pc, #348]	; (8006340 <HAL_DMA_Abort_IT+0x3e0>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d004      	beq.n	80061f0 <HAL_DMA_Abort_IT+0x290>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a56      	ldr	r2, [pc, #344]	; (8006344 <HAL_DMA_Abort_IT+0x3e4>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d108      	bne.n	8006202 <HAL_DMA_Abort_IT+0x2a2>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0201 	bic.w	r2, r2, #1
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	e007      	b.n	8006212 <HAL_DMA_Abort_IT+0x2b2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0201 	bic.w	r2, r2, #1
 8006210:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a3c      	ldr	r2, [pc, #240]	; (8006308 <HAL_DMA_Abort_IT+0x3a8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d072      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a3a      	ldr	r2, [pc, #232]	; (800630c <HAL_DMA_Abort_IT+0x3ac>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d06d      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a39      	ldr	r2, [pc, #228]	; (8006310 <HAL_DMA_Abort_IT+0x3b0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d068      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a37      	ldr	r2, [pc, #220]	; (8006314 <HAL_DMA_Abort_IT+0x3b4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d063      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a36      	ldr	r2, [pc, #216]	; (8006318 <HAL_DMA_Abort_IT+0x3b8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d05e      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a34      	ldr	r2, [pc, #208]	; (800631c <HAL_DMA_Abort_IT+0x3bc>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d059      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a33      	ldr	r2, [pc, #204]	; (8006320 <HAL_DMA_Abort_IT+0x3c0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d054      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a31      	ldr	r2, [pc, #196]	; (8006324 <HAL_DMA_Abort_IT+0x3c4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d04f      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a30      	ldr	r2, [pc, #192]	; (8006328 <HAL_DMA_Abort_IT+0x3c8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d04a      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a2e      	ldr	r2, [pc, #184]	; (800632c <HAL_DMA_Abort_IT+0x3cc>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d045      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a2d      	ldr	r2, [pc, #180]	; (8006330 <HAL_DMA_Abort_IT+0x3d0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d040      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a2b      	ldr	r2, [pc, #172]	; (8006334 <HAL_DMA_Abort_IT+0x3d4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d03b      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a2a      	ldr	r2, [pc, #168]	; (8006338 <HAL_DMA_Abort_IT+0x3d8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d036      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a28      	ldr	r2, [pc, #160]	; (800633c <HAL_DMA_Abort_IT+0x3dc>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d031      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a27      	ldr	r2, [pc, #156]	; (8006340 <HAL_DMA_Abort_IT+0x3e0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d02c      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a25      	ldr	r2, [pc, #148]	; (8006344 <HAL_DMA_Abort_IT+0x3e4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d027      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a24      	ldr	r2, [pc, #144]	; (8006348 <HAL_DMA_Abort_IT+0x3e8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d022      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a22      	ldr	r2, [pc, #136]	; (800634c <HAL_DMA_Abort_IT+0x3ec>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01d      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a21      	ldr	r2, [pc, #132]	; (8006350 <HAL_DMA_Abort_IT+0x3f0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d018      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a1f      	ldr	r2, [pc, #124]	; (8006354 <HAL_DMA_Abort_IT+0x3f4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d013      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a1e      	ldr	r2, [pc, #120]	; (8006358 <HAL_DMA_Abort_IT+0x3f8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00e      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a1c      	ldr	r2, [pc, #112]	; (800635c <HAL_DMA_Abort_IT+0x3fc>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d009      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a1b      	ldr	r2, [pc, #108]	; (8006360 <HAL_DMA_Abort_IT+0x400>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d004      	beq.n	8006302 <HAL_DMA_Abort_IT+0x3a2>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a19      	ldr	r2, [pc, #100]	; (8006364 <HAL_DMA_Abort_IT+0x404>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d132      	bne.n	8006368 <HAL_DMA_Abort_IT+0x408>
 8006302:	2301      	movs	r3, #1
 8006304:	e031      	b.n	800636a <HAL_DMA_Abort_IT+0x40a>
 8006306:	bf00      	nop
 8006308:	40020010 	.word	0x40020010
 800630c:	40020028 	.word	0x40020028
 8006310:	40020040 	.word	0x40020040
 8006314:	40020058 	.word	0x40020058
 8006318:	40020070 	.word	0x40020070
 800631c:	40020088 	.word	0x40020088
 8006320:	400200a0 	.word	0x400200a0
 8006324:	400200b8 	.word	0x400200b8
 8006328:	40020410 	.word	0x40020410
 800632c:	40020428 	.word	0x40020428
 8006330:	40020440 	.word	0x40020440
 8006334:	40020458 	.word	0x40020458
 8006338:	40020470 	.word	0x40020470
 800633c:	40020488 	.word	0x40020488
 8006340:	400204a0 	.word	0x400204a0
 8006344:	400204b8 	.word	0x400204b8
 8006348:	58025408 	.word	0x58025408
 800634c:	5802541c 	.word	0x5802541c
 8006350:	58025430 	.word	0x58025430
 8006354:	58025444 	.word	0x58025444
 8006358:	58025458 	.word	0x58025458
 800635c:	5802546c 	.word	0x5802546c
 8006360:	58025480 	.word	0x58025480
 8006364:	58025494 	.word	0x58025494
 8006368:	2300      	movs	r3, #0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d028      	beq.n	80063c0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006378:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800637c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006382:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006388:	f003 031f 	and.w	r3, r3, #31
 800638c:	2201      	movs	r2, #1
 800638e:	409a      	lsls	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800639c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00c      	beq.n	80063c0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80063be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop

080063ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08a      	sub	sp, #40	; 0x28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063f8:	4b67      	ldr	r3, [pc, #412]	; (8006598 <HAL_DMA_IRQHandler+0x1ac>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a67      	ldr	r2, [pc, #412]	; (800659c <HAL_DMA_IRQHandler+0x1b0>)
 80063fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006402:	0a9b      	lsrs	r3, r3, #10
 8006404:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006410:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a5f      	ldr	r2, [pc, #380]	; (80065a0 <HAL_DMA_IRQHandler+0x1b4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d04a      	beq.n	80064be <HAL_DMA_IRQHandler+0xd2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a5d      	ldr	r2, [pc, #372]	; (80065a4 <HAL_DMA_IRQHandler+0x1b8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d045      	beq.n	80064be <HAL_DMA_IRQHandler+0xd2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a5c      	ldr	r2, [pc, #368]	; (80065a8 <HAL_DMA_IRQHandler+0x1bc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d040      	beq.n	80064be <HAL_DMA_IRQHandler+0xd2>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a5a      	ldr	r2, [pc, #360]	; (80065ac <HAL_DMA_IRQHandler+0x1c0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d03b      	beq.n	80064be <HAL_DMA_IRQHandler+0xd2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a59      	ldr	r2, [pc, #356]	; (80065b0 <HAL_DMA_IRQHandler+0x1c4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d036      	beq.n	80064be <HAL_DMA_IRQHandler+0xd2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a57      	ldr	r2, [pc, #348]	; (80065b4 <HAL_DMA_IRQHandler+0x1c8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d031      	beq.n	80064be <HAL_DMA_IRQHandler+0xd2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a56      	ldr	r2, [pc, #344]	; (80065b8 <HAL_DMA_IRQHandler+0x1cc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d02c      	beq.n	80064be <HAL_DMA_IRQHandler+0xd2>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a54      	ldr	r2, [pc, #336]	; (80065bc <HAL_DMA_IRQHandler+0x1d0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d027      	beq.n	80064be <HAL_DMA_IRQHandler+0xd2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a53      	ldr	r2, [pc, #332]	; (80065c0 <HAL_DMA_IRQHandler+0x1d4>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d022      	beq.n	80064be <HAL_DMA_IRQHandler+0xd2>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a51      	ldr	r2, [pc, #324]	; (80065c4 <HAL_DMA_IRQHandler+0x1d8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d01d      	beq.n	80064be <HAL_DMA_IRQHandler+0xd2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a50      	ldr	r2, [pc, #320]	; (80065c8 <HAL_DMA_IRQHandler+0x1dc>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d018      	beq.n	80064be <HAL_DMA_IRQHandler+0xd2>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a4e      	ldr	r2, [pc, #312]	; (80065cc <HAL_DMA_IRQHandler+0x1e0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d013      	beq.n	80064be <HAL_DMA_IRQHandler+0xd2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a4d      	ldr	r2, [pc, #308]	; (80065d0 <HAL_DMA_IRQHandler+0x1e4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00e      	beq.n	80064be <HAL_DMA_IRQHandler+0xd2>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a4b      	ldr	r2, [pc, #300]	; (80065d4 <HAL_DMA_IRQHandler+0x1e8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d009      	beq.n	80064be <HAL_DMA_IRQHandler+0xd2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a4a      	ldr	r2, [pc, #296]	; (80065d8 <HAL_DMA_IRQHandler+0x1ec>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d004      	beq.n	80064be <HAL_DMA_IRQHandler+0xd2>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a48      	ldr	r2, [pc, #288]	; (80065dc <HAL_DMA_IRQHandler+0x1f0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d101      	bne.n	80064c2 <HAL_DMA_IRQHandler+0xd6>
 80064be:	2301      	movs	r3, #1
 80064c0:	e000      	b.n	80064c4 <HAL_DMA_IRQHandler+0xd8>
 80064c2:	2300      	movs	r3, #0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 842b 	beq.w	8006d20 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ce:	f003 031f 	and.w	r3, r3, #31
 80064d2:	2208      	movs	r2, #8
 80064d4:	409a      	lsls	r2, r3
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	4013      	ands	r3, r2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 80a2 	beq.w	8006624 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a2e      	ldr	r2, [pc, #184]	; (80065a0 <HAL_DMA_IRQHandler+0x1b4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d04a      	beq.n	8006580 <HAL_DMA_IRQHandler+0x194>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a2d      	ldr	r2, [pc, #180]	; (80065a4 <HAL_DMA_IRQHandler+0x1b8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d045      	beq.n	8006580 <HAL_DMA_IRQHandler+0x194>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a2b      	ldr	r2, [pc, #172]	; (80065a8 <HAL_DMA_IRQHandler+0x1bc>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d040      	beq.n	8006580 <HAL_DMA_IRQHandler+0x194>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a2a      	ldr	r2, [pc, #168]	; (80065ac <HAL_DMA_IRQHandler+0x1c0>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d03b      	beq.n	8006580 <HAL_DMA_IRQHandler+0x194>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a28      	ldr	r2, [pc, #160]	; (80065b0 <HAL_DMA_IRQHandler+0x1c4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d036      	beq.n	8006580 <HAL_DMA_IRQHandler+0x194>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a27      	ldr	r2, [pc, #156]	; (80065b4 <HAL_DMA_IRQHandler+0x1c8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d031      	beq.n	8006580 <HAL_DMA_IRQHandler+0x194>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a25      	ldr	r2, [pc, #148]	; (80065b8 <HAL_DMA_IRQHandler+0x1cc>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d02c      	beq.n	8006580 <HAL_DMA_IRQHandler+0x194>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a24      	ldr	r2, [pc, #144]	; (80065bc <HAL_DMA_IRQHandler+0x1d0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d027      	beq.n	8006580 <HAL_DMA_IRQHandler+0x194>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a22      	ldr	r2, [pc, #136]	; (80065c0 <HAL_DMA_IRQHandler+0x1d4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d022      	beq.n	8006580 <HAL_DMA_IRQHandler+0x194>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a21      	ldr	r2, [pc, #132]	; (80065c4 <HAL_DMA_IRQHandler+0x1d8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d01d      	beq.n	8006580 <HAL_DMA_IRQHandler+0x194>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a1f      	ldr	r2, [pc, #124]	; (80065c8 <HAL_DMA_IRQHandler+0x1dc>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d018      	beq.n	8006580 <HAL_DMA_IRQHandler+0x194>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a1e      	ldr	r2, [pc, #120]	; (80065cc <HAL_DMA_IRQHandler+0x1e0>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d013      	beq.n	8006580 <HAL_DMA_IRQHandler+0x194>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a1c      	ldr	r2, [pc, #112]	; (80065d0 <HAL_DMA_IRQHandler+0x1e4>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00e      	beq.n	8006580 <HAL_DMA_IRQHandler+0x194>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a1b      	ldr	r2, [pc, #108]	; (80065d4 <HAL_DMA_IRQHandler+0x1e8>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d009      	beq.n	8006580 <HAL_DMA_IRQHandler+0x194>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a19      	ldr	r2, [pc, #100]	; (80065d8 <HAL_DMA_IRQHandler+0x1ec>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d004      	beq.n	8006580 <HAL_DMA_IRQHandler+0x194>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a18      	ldr	r2, [pc, #96]	; (80065dc <HAL_DMA_IRQHandler+0x1f0>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d12f      	bne.n	80065e0 <HAL_DMA_IRQHandler+0x1f4>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0304 	and.w	r3, r3, #4
 800658a:	2b00      	cmp	r3, #0
 800658c:	bf14      	ite	ne
 800658e:	2301      	movne	r3, #1
 8006590:	2300      	moveq	r3, #0
 8006592:	b2db      	uxtb	r3, r3
 8006594:	e02e      	b.n	80065f4 <HAL_DMA_IRQHandler+0x208>
 8006596:	bf00      	nop
 8006598:	24000284 	.word	0x24000284
 800659c:	1b4e81b5 	.word	0x1b4e81b5
 80065a0:	40020010 	.word	0x40020010
 80065a4:	40020028 	.word	0x40020028
 80065a8:	40020040 	.word	0x40020040
 80065ac:	40020058 	.word	0x40020058
 80065b0:	40020070 	.word	0x40020070
 80065b4:	40020088 	.word	0x40020088
 80065b8:	400200a0 	.word	0x400200a0
 80065bc:	400200b8 	.word	0x400200b8
 80065c0:	40020410 	.word	0x40020410
 80065c4:	40020428 	.word	0x40020428
 80065c8:	40020440 	.word	0x40020440
 80065cc:	40020458 	.word	0x40020458
 80065d0:	40020470 	.word	0x40020470
 80065d4:	40020488 	.word	0x40020488
 80065d8:	400204a0 	.word	0x400204a0
 80065dc:	400204b8 	.word	0x400204b8
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0308 	and.w	r3, r3, #8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	bf14      	ite	ne
 80065ee:	2301      	movne	r3, #1
 80065f0:	2300      	moveq	r3, #0
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d015      	beq.n	8006624 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0204 	bic.w	r2, r2, #4
 8006606:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800660c:	f003 031f 	and.w	r3, r3, #31
 8006610:	2208      	movs	r2, #8
 8006612:	409a      	lsls	r2, r3
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661c:	f043 0201 	orr.w	r2, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006628:	f003 031f 	and.w	r3, r3, #31
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	fa22 f303 	lsr.w	r3, r2, r3
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d06e      	beq.n	8006718 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a69      	ldr	r2, [pc, #420]	; (80067e4 <HAL_DMA_IRQHandler+0x3f8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d04a      	beq.n	80066da <HAL_DMA_IRQHandler+0x2ee>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a67      	ldr	r2, [pc, #412]	; (80067e8 <HAL_DMA_IRQHandler+0x3fc>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d045      	beq.n	80066da <HAL_DMA_IRQHandler+0x2ee>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a66      	ldr	r2, [pc, #408]	; (80067ec <HAL_DMA_IRQHandler+0x400>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d040      	beq.n	80066da <HAL_DMA_IRQHandler+0x2ee>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a64      	ldr	r2, [pc, #400]	; (80067f0 <HAL_DMA_IRQHandler+0x404>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d03b      	beq.n	80066da <HAL_DMA_IRQHandler+0x2ee>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a63      	ldr	r2, [pc, #396]	; (80067f4 <HAL_DMA_IRQHandler+0x408>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d036      	beq.n	80066da <HAL_DMA_IRQHandler+0x2ee>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a61      	ldr	r2, [pc, #388]	; (80067f8 <HAL_DMA_IRQHandler+0x40c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d031      	beq.n	80066da <HAL_DMA_IRQHandler+0x2ee>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a60      	ldr	r2, [pc, #384]	; (80067fc <HAL_DMA_IRQHandler+0x410>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d02c      	beq.n	80066da <HAL_DMA_IRQHandler+0x2ee>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a5e      	ldr	r2, [pc, #376]	; (8006800 <HAL_DMA_IRQHandler+0x414>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d027      	beq.n	80066da <HAL_DMA_IRQHandler+0x2ee>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a5d      	ldr	r2, [pc, #372]	; (8006804 <HAL_DMA_IRQHandler+0x418>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d022      	beq.n	80066da <HAL_DMA_IRQHandler+0x2ee>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a5b      	ldr	r2, [pc, #364]	; (8006808 <HAL_DMA_IRQHandler+0x41c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01d      	beq.n	80066da <HAL_DMA_IRQHandler+0x2ee>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a5a      	ldr	r2, [pc, #360]	; (800680c <HAL_DMA_IRQHandler+0x420>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d018      	beq.n	80066da <HAL_DMA_IRQHandler+0x2ee>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a58      	ldr	r2, [pc, #352]	; (8006810 <HAL_DMA_IRQHandler+0x424>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d013      	beq.n	80066da <HAL_DMA_IRQHandler+0x2ee>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a57      	ldr	r2, [pc, #348]	; (8006814 <HAL_DMA_IRQHandler+0x428>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00e      	beq.n	80066da <HAL_DMA_IRQHandler+0x2ee>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a55      	ldr	r2, [pc, #340]	; (8006818 <HAL_DMA_IRQHandler+0x42c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d009      	beq.n	80066da <HAL_DMA_IRQHandler+0x2ee>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a54      	ldr	r2, [pc, #336]	; (800681c <HAL_DMA_IRQHandler+0x430>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d004      	beq.n	80066da <HAL_DMA_IRQHandler+0x2ee>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a52      	ldr	r2, [pc, #328]	; (8006820 <HAL_DMA_IRQHandler+0x434>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d10a      	bne.n	80066f0 <HAL_DMA_IRQHandler+0x304>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	bf14      	ite	ne
 80066e8:	2301      	movne	r3, #1
 80066ea:	2300      	moveq	r3, #0
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	e003      	b.n	80066f8 <HAL_DMA_IRQHandler+0x30c>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2300      	movs	r3, #0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00d      	beq.n	8006718 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006700:	f003 031f 	and.w	r3, r3, #31
 8006704:	2201      	movs	r2, #1
 8006706:	409a      	lsls	r2, r3
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006710:	f043 0202 	orr.w	r2, r3, #2
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671c:	f003 031f 	and.w	r3, r3, #31
 8006720:	2204      	movs	r2, #4
 8006722:	409a      	lsls	r2, r3
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	4013      	ands	r3, r2
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 808f 	beq.w	800684c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a2c      	ldr	r2, [pc, #176]	; (80067e4 <HAL_DMA_IRQHandler+0x3f8>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d04a      	beq.n	80067ce <HAL_DMA_IRQHandler+0x3e2>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a2a      	ldr	r2, [pc, #168]	; (80067e8 <HAL_DMA_IRQHandler+0x3fc>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d045      	beq.n	80067ce <HAL_DMA_IRQHandler+0x3e2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a29      	ldr	r2, [pc, #164]	; (80067ec <HAL_DMA_IRQHandler+0x400>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d040      	beq.n	80067ce <HAL_DMA_IRQHandler+0x3e2>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a27      	ldr	r2, [pc, #156]	; (80067f0 <HAL_DMA_IRQHandler+0x404>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d03b      	beq.n	80067ce <HAL_DMA_IRQHandler+0x3e2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a26      	ldr	r2, [pc, #152]	; (80067f4 <HAL_DMA_IRQHandler+0x408>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d036      	beq.n	80067ce <HAL_DMA_IRQHandler+0x3e2>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a24      	ldr	r2, [pc, #144]	; (80067f8 <HAL_DMA_IRQHandler+0x40c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d031      	beq.n	80067ce <HAL_DMA_IRQHandler+0x3e2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a23      	ldr	r2, [pc, #140]	; (80067fc <HAL_DMA_IRQHandler+0x410>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d02c      	beq.n	80067ce <HAL_DMA_IRQHandler+0x3e2>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a21      	ldr	r2, [pc, #132]	; (8006800 <HAL_DMA_IRQHandler+0x414>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d027      	beq.n	80067ce <HAL_DMA_IRQHandler+0x3e2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a20      	ldr	r2, [pc, #128]	; (8006804 <HAL_DMA_IRQHandler+0x418>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d022      	beq.n	80067ce <HAL_DMA_IRQHandler+0x3e2>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a1e      	ldr	r2, [pc, #120]	; (8006808 <HAL_DMA_IRQHandler+0x41c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d01d      	beq.n	80067ce <HAL_DMA_IRQHandler+0x3e2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a1d      	ldr	r2, [pc, #116]	; (800680c <HAL_DMA_IRQHandler+0x420>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d018      	beq.n	80067ce <HAL_DMA_IRQHandler+0x3e2>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a1b      	ldr	r2, [pc, #108]	; (8006810 <HAL_DMA_IRQHandler+0x424>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d013      	beq.n	80067ce <HAL_DMA_IRQHandler+0x3e2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1a      	ldr	r2, [pc, #104]	; (8006814 <HAL_DMA_IRQHandler+0x428>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d00e      	beq.n	80067ce <HAL_DMA_IRQHandler+0x3e2>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a18      	ldr	r2, [pc, #96]	; (8006818 <HAL_DMA_IRQHandler+0x42c>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d009      	beq.n	80067ce <HAL_DMA_IRQHandler+0x3e2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a17      	ldr	r2, [pc, #92]	; (800681c <HAL_DMA_IRQHandler+0x430>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d004      	beq.n	80067ce <HAL_DMA_IRQHandler+0x3e2>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a15      	ldr	r2, [pc, #84]	; (8006820 <HAL_DMA_IRQHandler+0x434>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d12a      	bne.n	8006824 <HAL_DMA_IRQHandler+0x438>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	bf14      	ite	ne
 80067dc:	2301      	movne	r3, #1
 80067de:	2300      	moveq	r3, #0
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	e023      	b.n	800682c <HAL_DMA_IRQHandler+0x440>
 80067e4:	40020010 	.word	0x40020010
 80067e8:	40020028 	.word	0x40020028
 80067ec:	40020040 	.word	0x40020040
 80067f0:	40020058 	.word	0x40020058
 80067f4:	40020070 	.word	0x40020070
 80067f8:	40020088 	.word	0x40020088
 80067fc:	400200a0 	.word	0x400200a0
 8006800:	400200b8 	.word	0x400200b8
 8006804:	40020410 	.word	0x40020410
 8006808:	40020428 	.word	0x40020428
 800680c:	40020440 	.word	0x40020440
 8006810:	40020458 	.word	0x40020458
 8006814:	40020470 	.word	0x40020470
 8006818:	40020488 	.word	0x40020488
 800681c:	400204a0 	.word	0x400204a0
 8006820:	400204b8 	.word	0x400204b8
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2300      	movs	r3, #0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00d      	beq.n	800684c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006834:	f003 031f 	and.w	r3, r3, #31
 8006838:	2204      	movs	r2, #4
 800683a:	409a      	lsls	r2, r3
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006844:	f043 0204 	orr.w	r2, r3, #4
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006850:	f003 031f 	and.w	r3, r3, #31
 8006854:	2210      	movs	r2, #16
 8006856:	409a      	lsls	r2, r3
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	4013      	ands	r3, r2
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 80a6 	beq.w	80069ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a85      	ldr	r2, [pc, #532]	; (8006a7c <HAL_DMA_IRQHandler+0x690>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d04a      	beq.n	8006902 <HAL_DMA_IRQHandler+0x516>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a83      	ldr	r2, [pc, #524]	; (8006a80 <HAL_DMA_IRQHandler+0x694>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d045      	beq.n	8006902 <HAL_DMA_IRQHandler+0x516>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a82      	ldr	r2, [pc, #520]	; (8006a84 <HAL_DMA_IRQHandler+0x698>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d040      	beq.n	8006902 <HAL_DMA_IRQHandler+0x516>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a80      	ldr	r2, [pc, #512]	; (8006a88 <HAL_DMA_IRQHandler+0x69c>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d03b      	beq.n	8006902 <HAL_DMA_IRQHandler+0x516>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a7f      	ldr	r2, [pc, #508]	; (8006a8c <HAL_DMA_IRQHandler+0x6a0>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d036      	beq.n	8006902 <HAL_DMA_IRQHandler+0x516>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a7d      	ldr	r2, [pc, #500]	; (8006a90 <HAL_DMA_IRQHandler+0x6a4>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d031      	beq.n	8006902 <HAL_DMA_IRQHandler+0x516>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a7c      	ldr	r2, [pc, #496]	; (8006a94 <HAL_DMA_IRQHandler+0x6a8>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d02c      	beq.n	8006902 <HAL_DMA_IRQHandler+0x516>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a7a      	ldr	r2, [pc, #488]	; (8006a98 <HAL_DMA_IRQHandler+0x6ac>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d027      	beq.n	8006902 <HAL_DMA_IRQHandler+0x516>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a79      	ldr	r2, [pc, #484]	; (8006a9c <HAL_DMA_IRQHandler+0x6b0>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d022      	beq.n	8006902 <HAL_DMA_IRQHandler+0x516>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a77      	ldr	r2, [pc, #476]	; (8006aa0 <HAL_DMA_IRQHandler+0x6b4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d01d      	beq.n	8006902 <HAL_DMA_IRQHandler+0x516>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a76      	ldr	r2, [pc, #472]	; (8006aa4 <HAL_DMA_IRQHandler+0x6b8>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d018      	beq.n	8006902 <HAL_DMA_IRQHandler+0x516>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a74      	ldr	r2, [pc, #464]	; (8006aa8 <HAL_DMA_IRQHandler+0x6bc>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d013      	beq.n	8006902 <HAL_DMA_IRQHandler+0x516>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a73      	ldr	r2, [pc, #460]	; (8006aac <HAL_DMA_IRQHandler+0x6c0>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00e      	beq.n	8006902 <HAL_DMA_IRQHandler+0x516>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a71      	ldr	r2, [pc, #452]	; (8006ab0 <HAL_DMA_IRQHandler+0x6c4>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d009      	beq.n	8006902 <HAL_DMA_IRQHandler+0x516>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a70      	ldr	r2, [pc, #448]	; (8006ab4 <HAL_DMA_IRQHandler+0x6c8>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d004      	beq.n	8006902 <HAL_DMA_IRQHandler+0x516>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a6e      	ldr	r2, [pc, #440]	; (8006ab8 <HAL_DMA_IRQHandler+0x6cc>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d10a      	bne.n	8006918 <HAL_DMA_IRQHandler+0x52c>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0308 	and.w	r3, r3, #8
 800690c:	2b00      	cmp	r3, #0
 800690e:	bf14      	ite	ne
 8006910:	2301      	movne	r3, #1
 8006912:	2300      	moveq	r3, #0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	e009      	b.n	800692c <HAL_DMA_IRQHandler+0x540>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0304 	and.w	r3, r3, #4
 8006922:	2b00      	cmp	r3, #0
 8006924:	bf14      	ite	ne
 8006926:	2301      	movne	r3, #1
 8006928:	2300      	moveq	r3, #0
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d03e      	beq.n	80069ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006934:	f003 031f 	and.w	r3, r3, #31
 8006938:	2210      	movs	r2, #16
 800693a:	409a      	lsls	r2, r3
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d018      	beq.n	8006980 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d108      	bne.n	800696e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	2b00      	cmp	r3, #0
 8006962:	d024      	beq.n	80069ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	4798      	blx	r3
 800696c:	e01f      	b.n	80069ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006972:	2b00      	cmp	r3, #0
 8006974:	d01b      	beq.n	80069ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	4798      	blx	r3
 800697e:	e016      	b.n	80069ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800698a:	2b00      	cmp	r3, #0
 800698c:	d107      	bne.n	800699e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0208 	bic.w	r2, r2, #8
 800699c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b2:	f003 031f 	and.w	r3, r3, #31
 80069b6:	2220      	movs	r2, #32
 80069b8:	409a      	lsls	r2, r3
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	4013      	ands	r3, r2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 8110 	beq.w	8006be4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a2c      	ldr	r2, [pc, #176]	; (8006a7c <HAL_DMA_IRQHandler+0x690>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d04a      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x678>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a2b      	ldr	r2, [pc, #172]	; (8006a80 <HAL_DMA_IRQHandler+0x694>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d045      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x678>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a29      	ldr	r2, [pc, #164]	; (8006a84 <HAL_DMA_IRQHandler+0x698>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d040      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x678>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a28      	ldr	r2, [pc, #160]	; (8006a88 <HAL_DMA_IRQHandler+0x69c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d03b      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x678>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a26      	ldr	r2, [pc, #152]	; (8006a8c <HAL_DMA_IRQHandler+0x6a0>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d036      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x678>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a25      	ldr	r2, [pc, #148]	; (8006a90 <HAL_DMA_IRQHandler+0x6a4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d031      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x678>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a23      	ldr	r2, [pc, #140]	; (8006a94 <HAL_DMA_IRQHandler+0x6a8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d02c      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x678>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a22      	ldr	r2, [pc, #136]	; (8006a98 <HAL_DMA_IRQHandler+0x6ac>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d027      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x678>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a20      	ldr	r2, [pc, #128]	; (8006a9c <HAL_DMA_IRQHandler+0x6b0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d022      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x678>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a1f      	ldr	r2, [pc, #124]	; (8006aa0 <HAL_DMA_IRQHandler+0x6b4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d01d      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x678>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a1d      	ldr	r2, [pc, #116]	; (8006aa4 <HAL_DMA_IRQHandler+0x6b8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d018      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x678>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a1c      	ldr	r2, [pc, #112]	; (8006aa8 <HAL_DMA_IRQHandler+0x6bc>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d013      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x678>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a1a      	ldr	r2, [pc, #104]	; (8006aac <HAL_DMA_IRQHandler+0x6c0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00e      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x678>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a19      	ldr	r2, [pc, #100]	; (8006ab0 <HAL_DMA_IRQHandler+0x6c4>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d009      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x678>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a17      	ldr	r2, [pc, #92]	; (8006ab4 <HAL_DMA_IRQHandler+0x6c8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d004      	beq.n	8006a64 <HAL_DMA_IRQHandler+0x678>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a16      	ldr	r2, [pc, #88]	; (8006ab8 <HAL_DMA_IRQHandler+0x6cc>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d12b      	bne.n	8006abc <HAL_DMA_IRQHandler+0x6d0>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0310 	and.w	r3, r3, #16
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	bf14      	ite	ne
 8006a72:	2301      	movne	r3, #1
 8006a74:	2300      	moveq	r3, #0
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	e02a      	b.n	8006ad0 <HAL_DMA_IRQHandler+0x6e4>
 8006a7a:	bf00      	nop
 8006a7c:	40020010 	.word	0x40020010
 8006a80:	40020028 	.word	0x40020028
 8006a84:	40020040 	.word	0x40020040
 8006a88:	40020058 	.word	0x40020058
 8006a8c:	40020070 	.word	0x40020070
 8006a90:	40020088 	.word	0x40020088
 8006a94:	400200a0 	.word	0x400200a0
 8006a98:	400200b8 	.word	0x400200b8
 8006a9c:	40020410 	.word	0x40020410
 8006aa0:	40020428 	.word	0x40020428
 8006aa4:	40020440 	.word	0x40020440
 8006aa8:	40020458 	.word	0x40020458
 8006aac:	40020470 	.word	0x40020470
 8006ab0:	40020488 	.word	0x40020488
 8006ab4:	400204a0 	.word	0x400204a0
 8006ab8:	400204b8 	.word	0x400204b8
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	bf14      	ite	ne
 8006aca:	2301      	movne	r3, #1
 8006acc:	2300      	moveq	r3, #0
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 8087 	beq.w	8006be4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ada:	f003 031f 	and.w	r3, r3, #31
 8006ade:	2220      	movs	r2, #32
 8006ae0:	409a      	lsls	r2, r3
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d139      	bne.n	8006b66 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0216 	bic.w	r2, r2, #22
 8006b00:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	695a      	ldr	r2, [r3, #20]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b10:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d103      	bne.n	8006b22 <HAL_DMA_IRQHandler+0x736>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d007      	beq.n	8006b32 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0208 	bic.w	r2, r2, #8
 8006b30:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b36:	f003 031f 	and.w	r3, r3, #31
 8006b3a:	223f      	movs	r2, #63	; 0x3f
 8006b3c:	409a      	lsls	r2, r3
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 8382 	beq.w	8007260 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	4798      	blx	r3
          }
          return;
 8006b64:	e37c      	b.n	8007260 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d018      	beq.n	8006ba6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d108      	bne.n	8006b94 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d02c      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	4798      	blx	r3
 8006b92:	e027      	b.n	8006be4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d023      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	4798      	blx	r3
 8006ba4:	e01e      	b.n	8006be4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10f      	bne.n	8006bd4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 0210 	bic.w	r2, r2, #16
 8006bc2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 833e 	beq.w	800726a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 8088 	beq.w	8006d0c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2204      	movs	r2, #4
 8006c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a89      	ldr	r2, [pc, #548]	; (8006e30 <HAL_DMA_IRQHandler+0xa44>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d04a      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x8b8>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a88      	ldr	r2, [pc, #544]	; (8006e34 <HAL_DMA_IRQHandler+0xa48>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d045      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x8b8>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a86      	ldr	r2, [pc, #536]	; (8006e38 <HAL_DMA_IRQHandler+0xa4c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d040      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x8b8>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a85      	ldr	r2, [pc, #532]	; (8006e3c <HAL_DMA_IRQHandler+0xa50>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d03b      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x8b8>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a83      	ldr	r2, [pc, #524]	; (8006e40 <HAL_DMA_IRQHandler+0xa54>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d036      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x8b8>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a82      	ldr	r2, [pc, #520]	; (8006e44 <HAL_DMA_IRQHandler+0xa58>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d031      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x8b8>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a80      	ldr	r2, [pc, #512]	; (8006e48 <HAL_DMA_IRQHandler+0xa5c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d02c      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x8b8>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a7f      	ldr	r2, [pc, #508]	; (8006e4c <HAL_DMA_IRQHandler+0xa60>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d027      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x8b8>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a7d      	ldr	r2, [pc, #500]	; (8006e50 <HAL_DMA_IRQHandler+0xa64>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d022      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x8b8>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a7c      	ldr	r2, [pc, #496]	; (8006e54 <HAL_DMA_IRQHandler+0xa68>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d01d      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x8b8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a7a      	ldr	r2, [pc, #488]	; (8006e58 <HAL_DMA_IRQHandler+0xa6c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d018      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x8b8>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a79      	ldr	r2, [pc, #484]	; (8006e5c <HAL_DMA_IRQHandler+0xa70>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d013      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x8b8>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a77      	ldr	r2, [pc, #476]	; (8006e60 <HAL_DMA_IRQHandler+0xa74>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d00e      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x8b8>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a76      	ldr	r2, [pc, #472]	; (8006e64 <HAL_DMA_IRQHandler+0xa78>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d009      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x8b8>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a74      	ldr	r2, [pc, #464]	; (8006e68 <HAL_DMA_IRQHandler+0xa7c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d004      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x8b8>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a73      	ldr	r2, [pc, #460]	; (8006e6c <HAL_DMA_IRQHandler+0xa80>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d108      	bne.n	8006cb6 <HAL_DMA_IRQHandler+0x8ca>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	e007      	b.n	8006cc6 <HAL_DMA_IRQHandler+0x8da>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0201 	bic.w	r2, r2, #1
 8006cc4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d307      	bcc.n	8006ce2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1f2      	bne.n	8006cc6 <HAL_DMA_IRQHandler+0x8da>
 8006ce0:	e000      	b.n	8006ce4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006ce2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d004      	beq.n	8006cfc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2203      	movs	r2, #3
 8006cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006cfa:	e003      	b.n	8006d04 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 82aa 	beq.w	800726a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	4798      	blx	r3
 8006d1e:	e2a4      	b.n	800726a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a52      	ldr	r2, [pc, #328]	; (8006e70 <HAL_DMA_IRQHandler+0xa84>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d04a      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x9d4>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a51      	ldr	r2, [pc, #324]	; (8006e74 <HAL_DMA_IRQHandler+0xa88>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d045      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x9d4>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a4f      	ldr	r2, [pc, #316]	; (8006e78 <HAL_DMA_IRQHandler+0xa8c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d040      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x9d4>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a4e      	ldr	r2, [pc, #312]	; (8006e7c <HAL_DMA_IRQHandler+0xa90>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d03b      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x9d4>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a4c      	ldr	r2, [pc, #304]	; (8006e80 <HAL_DMA_IRQHandler+0xa94>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d036      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x9d4>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a4b      	ldr	r2, [pc, #300]	; (8006e84 <HAL_DMA_IRQHandler+0xa98>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d031      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x9d4>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a49      	ldr	r2, [pc, #292]	; (8006e88 <HAL_DMA_IRQHandler+0xa9c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d02c      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x9d4>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a48      	ldr	r2, [pc, #288]	; (8006e8c <HAL_DMA_IRQHandler+0xaa0>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d027      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x9d4>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a46      	ldr	r2, [pc, #280]	; (8006e90 <HAL_DMA_IRQHandler+0xaa4>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d022      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x9d4>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a45      	ldr	r2, [pc, #276]	; (8006e94 <HAL_DMA_IRQHandler+0xaa8>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d01d      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x9d4>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a43      	ldr	r2, [pc, #268]	; (8006e98 <HAL_DMA_IRQHandler+0xaac>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d018      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x9d4>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a42      	ldr	r2, [pc, #264]	; (8006e9c <HAL_DMA_IRQHandler+0xab0>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d013      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x9d4>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a40      	ldr	r2, [pc, #256]	; (8006ea0 <HAL_DMA_IRQHandler+0xab4>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d00e      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x9d4>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a3f      	ldr	r2, [pc, #252]	; (8006ea4 <HAL_DMA_IRQHandler+0xab8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d009      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x9d4>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a3d      	ldr	r2, [pc, #244]	; (8006ea8 <HAL_DMA_IRQHandler+0xabc>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d004      	beq.n	8006dc0 <HAL_DMA_IRQHandler+0x9d4>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a3c      	ldr	r2, [pc, #240]	; (8006eac <HAL_DMA_IRQHandler+0xac0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d101      	bne.n	8006dc4 <HAL_DMA_IRQHandler+0x9d8>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e000      	b.n	8006dc6 <HAL_DMA_IRQHandler+0x9da>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 824f 	beq.w	800726a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd8:	f003 031f 	and.w	r3, r3, #31
 8006ddc:	2204      	movs	r2, #4
 8006dde:	409a      	lsls	r2, r3
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	4013      	ands	r3, r2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 80dd 	beq.w	8006fa4 <HAL_DMA_IRQHandler+0xbb8>
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 80d7 	beq.w	8006fa4 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfa:	f003 031f 	and.w	r3, r3, #31
 8006dfe:	2204      	movs	r2, #4
 8006e00:	409a      	lsls	r2, r3
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d059      	beq.n	8006ec4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d14a      	bne.n	8006eb0 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 8220 	beq.w	8007264 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e2c:	e21a      	b.n	8007264 <HAL_DMA_IRQHandler+0xe78>
 8006e2e:	bf00      	nop
 8006e30:	40020010 	.word	0x40020010
 8006e34:	40020028 	.word	0x40020028
 8006e38:	40020040 	.word	0x40020040
 8006e3c:	40020058 	.word	0x40020058
 8006e40:	40020070 	.word	0x40020070
 8006e44:	40020088 	.word	0x40020088
 8006e48:	400200a0 	.word	0x400200a0
 8006e4c:	400200b8 	.word	0x400200b8
 8006e50:	40020410 	.word	0x40020410
 8006e54:	40020428 	.word	0x40020428
 8006e58:	40020440 	.word	0x40020440
 8006e5c:	40020458 	.word	0x40020458
 8006e60:	40020470 	.word	0x40020470
 8006e64:	40020488 	.word	0x40020488
 8006e68:	400204a0 	.word	0x400204a0
 8006e6c:	400204b8 	.word	0x400204b8
 8006e70:	48022c08 	.word	0x48022c08
 8006e74:	48022c1c 	.word	0x48022c1c
 8006e78:	48022c30 	.word	0x48022c30
 8006e7c:	48022c44 	.word	0x48022c44
 8006e80:	48022c58 	.word	0x48022c58
 8006e84:	48022c6c 	.word	0x48022c6c
 8006e88:	48022c80 	.word	0x48022c80
 8006e8c:	48022c94 	.word	0x48022c94
 8006e90:	58025408 	.word	0x58025408
 8006e94:	5802541c 	.word	0x5802541c
 8006e98:	58025430 	.word	0x58025430
 8006e9c:	58025444 	.word	0x58025444
 8006ea0:	58025458 	.word	0x58025458
 8006ea4:	5802546c 	.word	0x5802546c
 8006ea8:	58025480 	.word	0x58025480
 8006eac:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 81d5 	beq.w	8007264 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ec2:	e1cf      	b.n	8007264 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	f003 0320 	and.w	r3, r3, #32
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d160      	bne.n	8006f90 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a7f      	ldr	r2, [pc, #508]	; (80070d0 <HAL_DMA_IRQHandler+0xce4>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d04a      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xb82>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a7d      	ldr	r2, [pc, #500]	; (80070d4 <HAL_DMA_IRQHandler+0xce8>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d045      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xb82>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a7c      	ldr	r2, [pc, #496]	; (80070d8 <HAL_DMA_IRQHandler+0xcec>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d040      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xb82>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a7a      	ldr	r2, [pc, #488]	; (80070dc <HAL_DMA_IRQHandler+0xcf0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d03b      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xb82>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a79      	ldr	r2, [pc, #484]	; (80070e0 <HAL_DMA_IRQHandler+0xcf4>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d036      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xb82>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a77      	ldr	r2, [pc, #476]	; (80070e4 <HAL_DMA_IRQHandler+0xcf8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d031      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xb82>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a76      	ldr	r2, [pc, #472]	; (80070e8 <HAL_DMA_IRQHandler+0xcfc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d02c      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xb82>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a74      	ldr	r2, [pc, #464]	; (80070ec <HAL_DMA_IRQHandler+0xd00>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d027      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xb82>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a73      	ldr	r2, [pc, #460]	; (80070f0 <HAL_DMA_IRQHandler+0xd04>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d022      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xb82>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a71      	ldr	r2, [pc, #452]	; (80070f4 <HAL_DMA_IRQHandler+0xd08>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d01d      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xb82>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a70      	ldr	r2, [pc, #448]	; (80070f8 <HAL_DMA_IRQHandler+0xd0c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d018      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xb82>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a6e      	ldr	r2, [pc, #440]	; (80070fc <HAL_DMA_IRQHandler+0xd10>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d013      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xb82>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a6d      	ldr	r2, [pc, #436]	; (8007100 <HAL_DMA_IRQHandler+0xd14>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00e      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xb82>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a6b      	ldr	r2, [pc, #428]	; (8007104 <HAL_DMA_IRQHandler+0xd18>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d009      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xb82>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a6a      	ldr	r2, [pc, #424]	; (8007108 <HAL_DMA_IRQHandler+0xd1c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d004      	beq.n	8006f6e <HAL_DMA_IRQHandler+0xb82>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a68      	ldr	r2, [pc, #416]	; (800710c <HAL_DMA_IRQHandler+0xd20>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d108      	bne.n	8006f80 <HAL_DMA_IRQHandler+0xb94>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f022 0208 	bic.w	r2, r2, #8
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	e007      	b.n	8006f90 <HAL_DMA_IRQHandler+0xba4>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0204 	bic.w	r2, r2, #4
 8006f8e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 8165 	beq.w	8007264 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fa2:	e15f      	b.n	8007264 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa8:	f003 031f 	and.w	r3, r3, #31
 8006fac:	2202      	movs	r2, #2
 8006fae:	409a      	lsls	r2, r3
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 80c5 	beq.w	8007144 <HAL_DMA_IRQHandler+0xd58>
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f003 0302 	and.w	r3, r3, #2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 80bf 	beq.w	8007144 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fca:	f003 031f 	and.w	r3, r3, #31
 8006fce:	2202      	movs	r2, #2
 8006fd0:	409a      	lsls	r2, r3
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d018      	beq.n	8007012 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d109      	bne.n	8006ffe <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 813a 	beq.w	8007268 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ffc:	e134      	b.n	8007268 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 8130 	beq.w	8007268 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007010:	e12a      	b.n	8007268 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f003 0320 	and.w	r3, r3, #32
 8007018:	2b00      	cmp	r3, #0
 800701a:	f040 8089 	bne.w	8007130 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a2b      	ldr	r2, [pc, #172]	; (80070d0 <HAL_DMA_IRQHandler+0xce4>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d04a      	beq.n	80070be <HAL_DMA_IRQHandler+0xcd2>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a29      	ldr	r2, [pc, #164]	; (80070d4 <HAL_DMA_IRQHandler+0xce8>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d045      	beq.n	80070be <HAL_DMA_IRQHandler+0xcd2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a28      	ldr	r2, [pc, #160]	; (80070d8 <HAL_DMA_IRQHandler+0xcec>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d040      	beq.n	80070be <HAL_DMA_IRQHandler+0xcd2>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a26      	ldr	r2, [pc, #152]	; (80070dc <HAL_DMA_IRQHandler+0xcf0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d03b      	beq.n	80070be <HAL_DMA_IRQHandler+0xcd2>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a25      	ldr	r2, [pc, #148]	; (80070e0 <HAL_DMA_IRQHandler+0xcf4>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d036      	beq.n	80070be <HAL_DMA_IRQHandler+0xcd2>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a23      	ldr	r2, [pc, #140]	; (80070e4 <HAL_DMA_IRQHandler+0xcf8>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d031      	beq.n	80070be <HAL_DMA_IRQHandler+0xcd2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a22      	ldr	r2, [pc, #136]	; (80070e8 <HAL_DMA_IRQHandler+0xcfc>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d02c      	beq.n	80070be <HAL_DMA_IRQHandler+0xcd2>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a20      	ldr	r2, [pc, #128]	; (80070ec <HAL_DMA_IRQHandler+0xd00>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d027      	beq.n	80070be <HAL_DMA_IRQHandler+0xcd2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a1f      	ldr	r2, [pc, #124]	; (80070f0 <HAL_DMA_IRQHandler+0xd04>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d022      	beq.n	80070be <HAL_DMA_IRQHandler+0xcd2>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a1d      	ldr	r2, [pc, #116]	; (80070f4 <HAL_DMA_IRQHandler+0xd08>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d01d      	beq.n	80070be <HAL_DMA_IRQHandler+0xcd2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a1c      	ldr	r2, [pc, #112]	; (80070f8 <HAL_DMA_IRQHandler+0xd0c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d018      	beq.n	80070be <HAL_DMA_IRQHandler+0xcd2>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a1a      	ldr	r2, [pc, #104]	; (80070fc <HAL_DMA_IRQHandler+0xd10>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d013      	beq.n	80070be <HAL_DMA_IRQHandler+0xcd2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a19      	ldr	r2, [pc, #100]	; (8007100 <HAL_DMA_IRQHandler+0xd14>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d00e      	beq.n	80070be <HAL_DMA_IRQHandler+0xcd2>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a17      	ldr	r2, [pc, #92]	; (8007104 <HAL_DMA_IRQHandler+0xd18>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d009      	beq.n	80070be <HAL_DMA_IRQHandler+0xcd2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a16      	ldr	r2, [pc, #88]	; (8007108 <HAL_DMA_IRQHandler+0xd1c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d004      	beq.n	80070be <HAL_DMA_IRQHandler+0xcd2>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a14      	ldr	r2, [pc, #80]	; (800710c <HAL_DMA_IRQHandler+0xd20>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d128      	bne.n	8007110 <HAL_DMA_IRQHandler+0xd24>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f022 0214 	bic.w	r2, r2, #20
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	e027      	b.n	8007120 <HAL_DMA_IRQHandler+0xd34>
 80070d0:	40020010 	.word	0x40020010
 80070d4:	40020028 	.word	0x40020028
 80070d8:	40020040 	.word	0x40020040
 80070dc:	40020058 	.word	0x40020058
 80070e0:	40020070 	.word	0x40020070
 80070e4:	40020088 	.word	0x40020088
 80070e8:	400200a0 	.word	0x400200a0
 80070ec:	400200b8 	.word	0x400200b8
 80070f0:	40020410 	.word	0x40020410
 80070f4:	40020428 	.word	0x40020428
 80070f8:	40020440 	.word	0x40020440
 80070fc:	40020458 	.word	0x40020458
 8007100:	40020470 	.word	0x40020470
 8007104:	40020488 	.word	0x40020488
 8007108:	400204a0 	.word	0x400204a0
 800710c:	400204b8 	.word	0x400204b8
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f022 020a 	bic.w	r2, r2, #10
 800711e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 8097 	beq.w	8007268 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007142:	e091      	b.n	8007268 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007148:	f003 031f 	and.w	r3, r3, #31
 800714c:	2208      	movs	r2, #8
 800714e:	409a      	lsls	r2, r3
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	4013      	ands	r3, r2
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 8088 	beq.w	800726a <HAL_DMA_IRQHandler+0xe7e>
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f003 0308 	and.w	r3, r3, #8
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 8082 	beq.w	800726a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a41      	ldr	r2, [pc, #260]	; (8007270 <HAL_DMA_IRQHandler+0xe84>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d04a      	beq.n	8007206 <HAL_DMA_IRQHandler+0xe1a>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a3f      	ldr	r2, [pc, #252]	; (8007274 <HAL_DMA_IRQHandler+0xe88>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d045      	beq.n	8007206 <HAL_DMA_IRQHandler+0xe1a>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a3e      	ldr	r2, [pc, #248]	; (8007278 <HAL_DMA_IRQHandler+0xe8c>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d040      	beq.n	8007206 <HAL_DMA_IRQHandler+0xe1a>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a3c      	ldr	r2, [pc, #240]	; (800727c <HAL_DMA_IRQHandler+0xe90>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d03b      	beq.n	8007206 <HAL_DMA_IRQHandler+0xe1a>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a3b      	ldr	r2, [pc, #236]	; (8007280 <HAL_DMA_IRQHandler+0xe94>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d036      	beq.n	8007206 <HAL_DMA_IRQHandler+0xe1a>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a39      	ldr	r2, [pc, #228]	; (8007284 <HAL_DMA_IRQHandler+0xe98>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d031      	beq.n	8007206 <HAL_DMA_IRQHandler+0xe1a>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a38      	ldr	r2, [pc, #224]	; (8007288 <HAL_DMA_IRQHandler+0xe9c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d02c      	beq.n	8007206 <HAL_DMA_IRQHandler+0xe1a>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a36      	ldr	r2, [pc, #216]	; (800728c <HAL_DMA_IRQHandler+0xea0>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d027      	beq.n	8007206 <HAL_DMA_IRQHandler+0xe1a>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a35      	ldr	r2, [pc, #212]	; (8007290 <HAL_DMA_IRQHandler+0xea4>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d022      	beq.n	8007206 <HAL_DMA_IRQHandler+0xe1a>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a33      	ldr	r2, [pc, #204]	; (8007294 <HAL_DMA_IRQHandler+0xea8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d01d      	beq.n	8007206 <HAL_DMA_IRQHandler+0xe1a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a32      	ldr	r2, [pc, #200]	; (8007298 <HAL_DMA_IRQHandler+0xeac>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d018      	beq.n	8007206 <HAL_DMA_IRQHandler+0xe1a>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a30      	ldr	r2, [pc, #192]	; (800729c <HAL_DMA_IRQHandler+0xeb0>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d013      	beq.n	8007206 <HAL_DMA_IRQHandler+0xe1a>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a2f      	ldr	r2, [pc, #188]	; (80072a0 <HAL_DMA_IRQHandler+0xeb4>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d00e      	beq.n	8007206 <HAL_DMA_IRQHandler+0xe1a>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a2d      	ldr	r2, [pc, #180]	; (80072a4 <HAL_DMA_IRQHandler+0xeb8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d009      	beq.n	8007206 <HAL_DMA_IRQHandler+0xe1a>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a2c      	ldr	r2, [pc, #176]	; (80072a8 <HAL_DMA_IRQHandler+0xebc>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d004      	beq.n	8007206 <HAL_DMA_IRQHandler+0xe1a>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a2a      	ldr	r2, [pc, #168]	; (80072ac <HAL_DMA_IRQHandler+0xec0>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d108      	bne.n	8007218 <HAL_DMA_IRQHandler+0xe2c>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 021c 	bic.w	r2, r2, #28
 8007214:	601a      	str	r2, [r3, #0]
 8007216:	e007      	b.n	8007228 <HAL_DMA_IRQHandler+0xe3c>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 020e 	bic.w	r2, r2, #14
 8007226:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800722c:	f003 031f 	and.w	r3, r3, #31
 8007230:	2201      	movs	r2, #1
 8007232:	409a      	lsls	r2, r3
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007252:	2b00      	cmp	r3, #0
 8007254:	d009      	beq.n	800726a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	4798      	blx	r3
 800725e:	e004      	b.n	800726a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8007260:	bf00      	nop
 8007262:	e002      	b.n	800726a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007264:	bf00      	nop
 8007266:	e000      	b.n	800726a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007268:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800726a:	3728      	adds	r7, #40	; 0x28
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	40020010 	.word	0x40020010
 8007274:	40020028 	.word	0x40020028
 8007278:	40020040 	.word	0x40020040
 800727c:	40020058 	.word	0x40020058
 8007280:	40020070 	.word	0x40020070
 8007284:	40020088 	.word	0x40020088
 8007288:	400200a0 	.word	0x400200a0
 800728c:	400200b8 	.word	0x400200b8
 8007290:	40020410 	.word	0x40020410
 8007294:	40020428 	.word	0x40020428
 8007298:	40020440 	.word	0x40020440
 800729c:	40020458 	.word	0x40020458
 80072a0:	40020470 	.word	0x40020470
 80072a4:	40020488 	.word	0x40020488
 80072a8:	400204a0 	.word	0x400204a0
 80072ac:	400204b8 	.word	0x400204b8

080072b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a7f      	ldr	r2, [pc, #508]	; (80074cc <DMA_SetConfig+0x21c>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d072      	beq.n	80073ba <DMA_SetConfig+0x10a>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a7d      	ldr	r2, [pc, #500]	; (80074d0 <DMA_SetConfig+0x220>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d06d      	beq.n	80073ba <DMA_SetConfig+0x10a>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a7c      	ldr	r2, [pc, #496]	; (80074d4 <DMA_SetConfig+0x224>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d068      	beq.n	80073ba <DMA_SetConfig+0x10a>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a7a      	ldr	r2, [pc, #488]	; (80074d8 <DMA_SetConfig+0x228>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d063      	beq.n	80073ba <DMA_SetConfig+0x10a>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a79      	ldr	r2, [pc, #484]	; (80074dc <DMA_SetConfig+0x22c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d05e      	beq.n	80073ba <DMA_SetConfig+0x10a>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a77      	ldr	r2, [pc, #476]	; (80074e0 <DMA_SetConfig+0x230>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d059      	beq.n	80073ba <DMA_SetConfig+0x10a>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a76      	ldr	r2, [pc, #472]	; (80074e4 <DMA_SetConfig+0x234>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d054      	beq.n	80073ba <DMA_SetConfig+0x10a>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a74      	ldr	r2, [pc, #464]	; (80074e8 <DMA_SetConfig+0x238>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d04f      	beq.n	80073ba <DMA_SetConfig+0x10a>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a73      	ldr	r2, [pc, #460]	; (80074ec <DMA_SetConfig+0x23c>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d04a      	beq.n	80073ba <DMA_SetConfig+0x10a>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a71      	ldr	r2, [pc, #452]	; (80074f0 <DMA_SetConfig+0x240>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d045      	beq.n	80073ba <DMA_SetConfig+0x10a>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a70      	ldr	r2, [pc, #448]	; (80074f4 <DMA_SetConfig+0x244>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d040      	beq.n	80073ba <DMA_SetConfig+0x10a>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a6e      	ldr	r2, [pc, #440]	; (80074f8 <DMA_SetConfig+0x248>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d03b      	beq.n	80073ba <DMA_SetConfig+0x10a>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a6d      	ldr	r2, [pc, #436]	; (80074fc <DMA_SetConfig+0x24c>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d036      	beq.n	80073ba <DMA_SetConfig+0x10a>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a6b      	ldr	r2, [pc, #428]	; (8007500 <DMA_SetConfig+0x250>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d031      	beq.n	80073ba <DMA_SetConfig+0x10a>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a6a      	ldr	r2, [pc, #424]	; (8007504 <DMA_SetConfig+0x254>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d02c      	beq.n	80073ba <DMA_SetConfig+0x10a>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a68      	ldr	r2, [pc, #416]	; (8007508 <DMA_SetConfig+0x258>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d027      	beq.n	80073ba <DMA_SetConfig+0x10a>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a67      	ldr	r2, [pc, #412]	; (800750c <DMA_SetConfig+0x25c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d022      	beq.n	80073ba <DMA_SetConfig+0x10a>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a65      	ldr	r2, [pc, #404]	; (8007510 <DMA_SetConfig+0x260>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d01d      	beq.n	80073ba <DMA_SetConfig+0x10a>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a64      	ldr	r2, [pc, #400]	; (8007514 <DMA_SetConfig+0x264>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d018      	beq.n	80073ba <DMA_SetConfig+0x10a>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a62      	ldr	r2, [pc, #392]	; (8007518 <DMA_SetConfig+0x268>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d013      	beq.n	80073ba <DMA_SetConfig+0x10a>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a61      	ldr	r2, [pc, #388]	; (800751c <DMA_SetConfig+0x26c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d00e      	beq.n	80073ba <DMA_SetConfig+0x10a>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a5f      	ldr	r2, [pc, #380]	; (8007520 <DMA_SetConfig+0x270>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d009      	beq.n	80073ba <DMA_SetConfig+0x10a>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a5e      	ldr	r2, [pc, #376]	; (8007524 <DMA_SetConfig+0x274>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d004      	beq.n	80073ba <DMA_SetConfig+0x10a>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a5c      	ldr	r2, [pc, #368]	; (8007528 <DMA_SetConfig+0x278>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d101      	bne.n	80073be <DMA_SetConfig+0x10e>
 80073ba:	2301      	movs	r3, #1
 80073bc:	e000      	b.n	80073c0 <DMA_SetConfig+0x110>
 80073be:	2300      	movs	r3, #0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00d      	beq.n	80073e0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073cc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073de:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a39      	ldr	r2, [pc, #228]	; (80074cc <DMA_SetConfig+0x21c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d04a      	beq.n	8007480 <DMA_SetConfig+0x1d0>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a38      	ldr	r2, [pc, #224]	; (80074d0 <DMA_SetConfig+0x220>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d045      	beq.n	8007480 <DMA_SetConfig+0x1d0>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a36      	ldr	r2, [pc, #216]	; (80074d4 <DMA_SetConfig+0x224>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d040      	beq.n	8007480 <DMA_SetConfig+0x1d0>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a35      	ldr	r2, [pc, #212]	; (80074d8 <DMA_SetConfig+0x228>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d03b      	beq.n	8007480 <DMA_SetConfig+0x1d0>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a33      	ldr	r2, [pc, #204]	; (80074dc <DMA_SetConfig+0x22c>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d036      	beq.n	8007480 <DMA_SetConfig+0x1d0>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a32      	ldr	r2, [pc, #200]	; (80074e0 <DMA_SetConfig+0x230>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d031      	beq.n	8007480 <DMA_SetConfig+0x1d0>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a30      	ldr	r2, [pc, #192]	; (80074e4 <DMA_SetConfig+0x234>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d02c      	beq.n	8007480 <DMA_SetConfig+0x1d0>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a2f      	ldr	r2, [pc, #188]	; (80074e8 <DMA_SetConfig+0x238>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d027      	beq.n	8007480 <DMA_SetConfig+0x1d0>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a2d      	ldr	r2, [pc, #180]	; (80074ec <DMA_SetConfig+0x23c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d022      	beq.n	8007480 <DMA_SetConfig+0x1d0>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a2c      	ldr	r2, [pc, #176]	; (80074f0 <DMA_SetConfig+0x240>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d01d      	beq.n	8007480 <DMA_SetConfig+0x1d0>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a2a      	ldr	r2, [pc, #168]	; (80074f4 <DMA_SetConfig+0x244>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d018      	beq.n	8007480 <DMA_SetConfig+0x1d0>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a29      	ldr	r2, [pc, #164]	; (80074f8 <DMA_SetConfig+0x248>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d013      	beq.n	8007480 <DMA_SetConfig+0x1d0>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a27      	ldr	r2, [pc, #156]	; (80074fc <DMA_SetConfig+0x24c>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d00e      	beq.n	8007480 <DMA_SetConfig+0x1d0>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a26      	ldr	r2, [pc, #152]	; (8007500 <DMA_SetConfig+0x250>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d009      	beq.n	8007480 <DMA_SetConfig+0x1d0>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a24      	ldr	r2, [pc, #144]	; (8007504 <DMA_SetConfig+0x254>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d004      	beq.n	8007480 <DMA_SetConfig+0x1d0>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a23      	ldr	r2, [pc, #140]	; (8007508 <DMA_SetConfig+0x258>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d101      	bne.n	8007484 <DMA_SetConfig+0x1d4>
 8007480:	2301      	movs	r3, #1
 8007482:	e000      	b.n	8007486 <DMA_SetConfig+0x1d6>
 8007484:	2300      	movs	r3, #0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d059      	beq.n	800753e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800748e:	f003 031f 	and.w	r3, r3, #31
 8007492:	223f      	movs	r2, #63	; 0x3f
 8007494:	409a      	lsls	r2, r3
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80074a8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	2b40      	cmp	r3, #64	; 0x40
 80074b8:	d138      	bne.n	800752c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80074ca:	e0ae      	b.n	800762a <DMA_SetConfig+0x37a>
 80074cc:	40020010 	.word	0x40020010
 80074d0:	40020028 	.word	0x40020028
 80074d4:	40020040 	.word	0x40020040
 80074d8:	40020058 	.word	0x40020058
 80074dc:	40020070 	.word	0x40020070
 80074e0:	40020088 	.word	0x40020088
 80074e4:	400200a0 	.word	0x400200a0
 80074e8:	400200b8 	.word	0x400200b8
 80074ec:	40020410 	.word	0x40020410
 80074f0:	40020428 	.word	0x40020428
 80074f4:	40020440 	.word	0x40020440
 80074f8:	40020458 	.word	0x40020458
 80074fc:	40020470 	.word	0x40020470
 8007500:	40020488 	.word	0x40020488
 8007504:	400204a0 	.word	0x400204a0
 8007508:	400204b8 	.word	0x400204b8
 800750c:	58025408 	.word	0x58025408
 8007510:	5802541c 	.word	0x5802541c
 8007514:	58025430 	.word	0x58025430
 8007518:	58025444 	.word	0x58025444
 800751c:	58025458 	.word	0x58025458
 8007520:	5802546c 	.word	0x5802546c
 8007524:	58025480 	.word	0x58025480
 8007528:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	60da      	str	r2, [r3, #12]
}
 800753c:	e075      	b.n	800762a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a3d      	ldr	r2, [pc, #244]	; (8007638 <DMA_SetConfig+0x388>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d04a      	beq.n	80075de <DMA_SetConfig+0x32e>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a3b      	ldr	r2, [pc, #236]	; (800763c <DMA_SetConfig+0x38c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d045      	beq.n	80075de <DMA_SetConfig+0x32e>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a3a      	ldr	r2, [pc, #232]	; (8007640 <DMA_SetConfig+0x390>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d040      	beq.n	80075de <DMA_SetConfig+0x32e>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a38      	ldr	r2, [pc, #224]	; (8007644 <DMA_SetConfig+0x394>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d03b      	beq.n	80075de <DMA_SetConfig+0x32e>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a37      	ldr	r2, [pc, #220]	; (8007648 <DMA_SetConfig+0x398>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d036      	beq.n	80075de <DMA_SetConfig+0x32e>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a35      	ldr	r2, [pc, #212]	; (800764c <DMA_SetConfig+0x39c>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d031      	beq.n	80075de <DMA_SetConfig+0x32e>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a34      	ldr	r2, [pc, #208]	; (8007650 <DMA_SetConfig+0x3a0>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d02c      	beq.n	80075de <DMA_SetConfig+0x32e>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a32      	ldr	r2, [pc, #200]	; (8007654 <DMA_SetConfig+0x3a4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d027      	beq.n	80075de <DMA_SetConfig+0x32e>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a31      	ldr	r2, [pc, #196]	; (8007658 <DMA_SetConfig+0x3a8>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d022      	beq.n	80075de <DMA_SetConfig+0x32e>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a2f      	ldr	r2, [pc, #188]	; (800765c <DMA_SetConfig+0x3ac>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d01d      	beq.n	80075de <DMA_SetConfig+0x32e>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a2e      	ldr	r2, [pc, #184]	; (8007660 <DMA_SetConfig+0x3b0>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d018      	beq.n	80075de <DMA_SetConfig+0x32e>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a2c      	ldr	r2, [pc, #176]	; (8007664 <DMA_SetConfig+0x3b4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d013      	beq.n	80075de <DMA_SetConfig+0x32e>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a2b      	ldr	r2, [pc, #172]	; (8007668 <DMA_SetConfig+0x3b8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00e      	beq.n	80075de <DMA_SetConfig+0x32e>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a29      	ldr	r2, [pc, #164]	; (800766c <DMA_SetConfig+0x3bc>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d009      	beq.n	80075de <DMA_SetConfig+0x32e>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a28      	ldr	r2, [pc, #160]	; (8007670 <DMA_SetConfig+0x3c0>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d004      	beq.n	80075de <DMA_SetConfig+0x32e>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a26      	ldr	r2, [pc, #152]	; (8007674 <DMA_SetConfig+0x3c4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d101      	bne.n	80075e2 <DMA_SetConfig+0x332>
 80075de:	2301      	movs	r3, #1
 80075e0:	e000      	b.n	80075e4 <DMA_SetConfig+0x334>
 80075e2:	2300      	movs	r3, #0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d020      	beq.n	800762a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ec:	f003 031f 	and.w	r3, r3, #31
 80075f0:	2201      	movs	r2, #1
 80075f2:	409a      	lsls	r2, r3
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	2b40      	cmp	r3, #64	; 0x40
 8007606:	d108      	bne.n	800761a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	60da      	str	r2, [r3, #12]
}
 8007618:	e007      	b.n	800762a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	60da      	str	r2, [r3, #12]
}
 800762a:	bf00      	nop
 800762c:	371c      	adds	r7, #28
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	48022c08 	.word	0x48022c08
 800763c:	48022c1c 	.word	0x48022c1c
 8007640:	48022c30 	.word	0x48022c30
 8007644:	48022c44 	.word	0x48022c44
 8007648:	48022c58 	.word	0x48022c58
 800764c:	48022c6c 	.word	0x48022c6c
 8007650:	48022c80 	.word	0x48022c80
 8007654:	48022c94 	.word	0x48022c94
 8007658:	58025408 	.word	0x58025408
 800765c:	5802541c 	.word	0x5802541c
 8007660:	58025430 	.word	0x58025430
 8007664:	58025444 	.word	0x58025444
 8007668:	58025458 	.word	0x58025458
 800766c:	5802546c 	.word	0x5802546c
 8007670:	58025480 	.word	0x58025480
 8007674:	58025494 	.word	0x58025494

08007678 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a42      	ldr	r2, [pc, #264]	; (8007790 <DMA_CalcBaseAndBitshift+0x118>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d04a      	beq.n	8007720 <DMA_CalcBaseAndBitshift+0xa8>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a41      	ldr	r2, [pc, #260]	; (8007794 <DMA_CalcBaseAndBitshift+0x11c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d045      	beq.n	8007720 <DMA_CalcBaseAndBitshift+0xa8>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a3f      	ldr	r2, [pc, #252]	; (8007798 <DMA_CalcBaseAndBitshift+0x120>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d040      	beq.n	8007720 <DMA_CalcBaseAndBitshift+0xa8>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a3e      	ldr	r2, [pc, #248]	; (800779c <DMA_CalcBaseAndBitshift+0x124>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d03b      	beq.n	8007720 <DMA_CalcBaseAndBitshift+0xa8>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a3c      	ldr	r2, [pc, #240]	; (80077a0 <DMA_CalcBaseAndBitshift+0x128>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d036      	beq.n	8007720 <DMA_CalcBaseAndBitshift+0xa8>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a3b      	ldr	r2, [pc, #236]	; (80077a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d031      	beq.n	8007720 <DMA_CalcBaseAndBitshift+0xa8>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a39      	ldr	r2, [pc, #228]	; (80077a8 <DMA_CalcBaseAndBitshift+0x130>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d02c      	beq.n	8007720 <DMA_CalcBaseAndBitshift+0xa8>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a38      	ldr	r2, [pc, #224]	; (80077ac <DMA_CalcBaseAndBitshift+0x134>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d027      	beq.n	8007720 <DMA_CalcBaseAndBitshift+0xa8>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a36      	ldr	r2, [pc, #216]	; (80077b0 <DMA_CalcBaseAndBitshift+0x138>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d022      	beq.n	8007720 <DMA_CalcBaseAndBitshift+0xa8>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a35      	ldr	r2, [pc, #212]	; (80077b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d01d      	beq.n	8007720 <DMA_CalcBaseAndBitshift+0xa8>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a33      	ldr	r2, [pc, #204]	; (80077b8 <DMA_CalcBaseAndBitshift+0x140>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d018      	beq.n	8007720 <DMA_CalcBaseAndBitshift+0xa8>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a32      	ldr	r2, [pc, #200]	; (80077bc <DMA_CalcBaseAndBitshift+0x144>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d013      	beq.n	8007720 <DMA_CalcBaseAndBitshift+0xa8>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a30      	ldr	r2, [pc, #192]	; (80077c0 <DMA_CalcBaseAndBitshift+0x148>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d00e      	beq.n	8007720 <DMA_CalcBaseAndBitshift+0xa8>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a2f      	ldr	r2, [pc, #188]	; (80077c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d009      	beq.n	8007720 <DMA_CalcBaseAndBitshift+0xa8>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a2d      	ldr	r2, [pc, #180]	; (80077c8 <DMA_CalcBaseAndBitshift+0x150>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d004      	beq.n	8007720 <DMA_CalcBaseAndBitshift+0xa8>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a2c      	ldr	r2, [pc, #176]	; (80077cc <DMA_CalcBaseAndBitshift+0x154>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d101      	bne.n	8007724 <DMA_CalcBaseAndBitshift+0xac>
 8007720:	2301      	movs	r3, #1
 8007722:	e000      	b.n	8007726 <DMA_CalcBaseAndBitshift+0xae>
 8007724:	2300      	movs	r3, #0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d024      	beq.n	8007774 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	b2db      	uxtb	r3, r3
 8007730:	3b10      	subs	r3, #16
 8007732:	4a27      	ldr	r2, [pc, #156]	; (80077d0 <DMA_CalcBaseAndBitshift+0x158>)
 8007734:	fba2 2303 	umull	r2, r3, r2, r3
 8007738:	091b      	lsrs	r3, r3, #4
 800773a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f003 0307 	and.w	r3, r3, #7
 8007742:	4a24      	ldr	r2, [pc, #144]	; (80077d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007744:	5cd3      	ldrb	r3, [r2, r3]
 8007746:	461a      	mov	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2b03      	cmp	r3, #3
 8007750:	d908      	bls.n	8007764 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	4b1f      	ldr	r3, [pc, #124]	; (80077d8 <DMA_CalcBaseAndBitshift+0x160>)
 800775a:	4013      	ands	r3, r2
 800775c:	1d1a      	adds	r2, r3, #4
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	659a      	str	r2, [r3, #88]	; 0x58
 8007762:	e00d      	b.n	8007780 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	461a      	mov	r2, r3
 800776a:	4b1b      	ldr	r3, [pc, #108]	; (80077d8 <DMA_CalcBaseAndBitshift+0x160>)
 800776c:	4013      	ands	r3, r2
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6593      	str	r3, [r2, #88]	; 0x58
 8007772:	e005      	b.n	8007780 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	40020010 	.word	0x40020010
 8007794:	40020028 	.word	0x40020028
 8007798:	40020040 	.word	0x40020040
 800779c:	40020058 	.word	0x40020058
 80077a0:	40020070 	.word	0x40020070
 80077a4:	40020088 	.word	0x40020088
 80077a8:	400200a0 	.word	0x400200a0
 80077ac:	400200b8 	.word	0x400200b8
 80077b0:	40020410 	.word	0x40020410
 80077b4:	40020428 	.word	0x40020428
 80077b8:	40020440 	.word	0x40020440
 80077bc:	40020458 	.word	0x40020458
 80077c0:	40020470 	.word	0x40020470
 80077c4:	40020488 	.word	0x40020488
 80077c8:	400204a0 	.word	0x400204a0
 80077cc:	400204b8 	.word	0x400204b8
 80077d0:	aaaaaaab 	.word	0xaaaaaaab
 80077d4:	08010598 	.word	0x08010598
 80077d8:	fffffc00 	.word	0xfffffc00

080077dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d120      	bne.n	8007832 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d858      	bhi.n	80078aa <DMA_CheckFifoParam+0xce>
 80077f8:	a201      	add	r2, pc, #4	; (adr r2, 8007800 <DMA_CheckFifoParam+0x24>)
 80077fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fe:	bf00      	nop
 8007800:	08007811 	.word	0x08007811
 8007804:	08007823 	.word	0x08007823
 8007808:	08007811 	.word	0x08007811
 800780c:	080078ab 	.word	0x080078ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d048      	beq.n	80078ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007820:	e045      	b.n	80078ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007826:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800782a:	d142      	bne.n	80078b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007830:	e03f      	b.n	80078b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800783a:	d123      	bne.n	8007884 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007840:	2b03      	cmp	r3, #3
 8007842:	d838      	bhi.n	80078b6 <DMA_CheckFifoParam+0xda>
 8007844:	a201      	add	r2, pc, #4	; (adr r2, 800784c <DMA_CheckFifoParam+0x70>)
 8007846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784a:	bf00      	nop
 800784c:	0800785d 	.word	0x0800785d
 8007850:	08007863 	.word	0x08007863
 8007854:	0800785d 	.word	0x0800785d
 8007858:	08007875 	.word	0x08007875
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	73fb      	strb	r3, [r7, #15]
        break;
 8007860:	e030      	b.n	80078c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007866:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d025      	beq.n	80078ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007872:	e022      	b.n	80078ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007878:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800787c:	d11f      	bne.n	80078be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007882:	e01c      	b.n	80078be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007888:	2b02      	cmp	r3, #2
 800788a:	d902      	bls.n	8007892 <DMA_CheckFifoParam+0xb6>
 800788c:	2b03      	cmp	r3, #3
 800788e:	d003      	beq.n	8007898 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007890:	e018      	b.n	80078c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	73fb      	strb	r3, [r7, #15]
        break;
 8007896:	e015      	b.n	80078c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00e      	beq.n	80078c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	73fb      	strb	r3, [r7, #15]
    break;
 80078a8:	e00b      	b.n	80078c2 <DMA_CheckFifoParam+0xe6>
        break;
 80078aa:	bf00      	nop
 80078ac:	e00a      	b.n	80078c4 <DMA_CheckFifoParam+0xe8>
        break;
 80078ae:	bf00      	nop
 80078b0:	e008      	b.n	80078c4 <DMA_CheckFifoParam+0xe8>
        break;
 80078b2:	bf00      	nop
 80078b4:	e006      	b.n	80078c4 <DMA_CheckFifoParam+0xe8>
        break;
 80078b6:	bf00      	nop
 80078b8:	e004      	b.n	80078c4 <DMA_CheckFifoParam+0xe8>
        break;
 80078ba:	bf00      	nop
 80078bc:	e002      	b.n	80078c4 <DMA_CheckFifoParam+0xe8>
        break;
 80078be:	bf00      	nop
 80078c0:	e000      	b.n	80078c4 <DMA_CheckFifoParam+0xe8>
    break;
 80078c2:	bf00      	nop
    }
  }

  return status;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop

080078d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a38      	ldr	r2, [pc, #224]	; (80079c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d022      	beq.n	8007932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a36      	ldr	r2, [pc, #216]	; (80079cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d01d      	beq.n	8007932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a35      	ldr	r2, [pc, #212]	; (80079d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d018      	beq.n	8007932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a33      	ldr	r2, [pc, #204]	; (80079d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d013      	beq.n	8007932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a32      	ldr	r2, [pc, #200]	; (80079d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d00e      	beq.n	8007932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a30      	ldr	r2, [pc, #192]	; (80079dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d009      	beq.n	8007932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a2f      	ldr	r2, [pc, #188]	; (80079e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d004      	beq.n	8007932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a2d      	ldr	r2, [pc, #180]	; (80079e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d101      	bne.n	8007936 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007932:	2301      	movs	r3, #1
 8007934:	e000      	b.n	8007938 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007936:	2300      	movs	r3, #0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d01a      	beq.n	8007972 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	b2db      	uxtb	r3, r3
 8007942:	3b08      	subs	r3, #8
 8007944:	4a28      	ldr	r2, [pc, #160]	; (80079e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007946:	fba2 2303 	umull	r2, r3, r2, r3
 800794a:	091b      	lsrs	r3, r3, #4
 800794c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	4b26      	ldr	r3, [pc, #152]	; (80079ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007952:	4413      	add	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a24      	ldr	r2, [pc, #144]	; (80079f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007960:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f003 031f 	and.w	r3, r3, #31
 8007968:	2201      	movs	r2, #1
 800796a:	409a      	lsls	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007970:	e024      	b.n	80079bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	b2db      	uxtb	r3, r3
 8007978:	3b10      	subs	r3, #16
 800797a:	4a1e      	ldr	r2, [pc, #120]	; (80079f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800797c:	fba2 2303 	umull	r2, r3, r2, r3
 8007980:	091b      	lsrs	r3, r3, #4
 8007982:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	4a1c      	ldr	r2, [pc, #112]	; (80079f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d806      	bhi.n	800799a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	4a1b      	ldr	r2, [pc, #108]	; (80079fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d902      	bls.n	800799a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3308      	adds	r3, #8
 8007998:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	4b18      	ldr	r3, [pc, #96]	; (8007a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800799e:	4413      	add	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	461a      	mov	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a16      	ldr	r2, [pc, #88]	; (8007a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80079ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f003 031f 	and.w	r3, r3, #31
 80079b4:	2201      	movs	r2, #1
 80079b6:	409a      	lsls	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80079bc:	bf00      	nop
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	58025408 	.word	0x58025408
 80079cc:	5802541c 	.word	0x5802541c
 80079d0:	58025430 	.word	0x58025430
 80079d4:	58025444 	.word	0x58025444
 80079d8:	58025458 	.word	0x58025458
 80079dc:	5802546c 	.word	0x5802546c
 80079e0:	58025480 	.word	0x58025480
 80079e4:	58025494 	.word	0x58025494
 80079e8:	cccccccd 	.word	0xcccccccd
 80079ec:	16009600 	.word	0x16009600
 80079f0:	58025880 	.word	0x58025880
 80079f4:	aaaaaaab 	.word	0xaaaaaaab
 80079f8:	400204b8 	.word	0x400204b8
 80079fc:	4002040f 	.word	0x4002040f
 8007a00:	10008200 	.word	0x10008200
 8007a04:	40020880 	.word	0x40020880

08007a08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d04a      	beq.n	8007ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2b08      	cmp	r3, #8
 8007a22:	d847      	bhi.n	8007ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a25      	ldr	r2, [pc, #148]	; (8007ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d022      	beq.n	8007a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a24      	ldr	r2, [pc, #144]	; (8007ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d01d      	beq.n	8007a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a22      	ldr	r2, [pc, #136]	; (8007ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d018      	beq.n	8007a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a21      	ldr	r2, [pc, #132]	; (8007acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d013      	beq.n	8007a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a1f      	ldr	r2, [pc, #124]	; (8007ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d00e      	beq.n	8007a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a1e      	ldr	r2, [pc, #120]	; (8007ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d009      	beq.n	8007a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a1c      	ldr	r2, [pc, #112]	; (8007ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d004      	beq.n	8007a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a1b      	ldr	r2, [pc, #108]	; (8007adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d101      	bne.n	8007a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007a74:	2301      	movs	r3, #1
 8007a76:	e000      	b.n	8007a7a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4b17      	ldr	r3, [pc, #92]	; (8007ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007a82:	4413      	add	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	461a      	mov	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a15      	ldr	r2, [pc, #84]	; (8007ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007a90:	671a      	str	r2, [r3, #112]	; 0x70
 8007a92:	e009      	b.n	8007aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	4b14      	ldr	r3, [pc, #80]	; (8007ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007a98:	4413      	add	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a11      	ldr	r2, [pc, #68]	; (8007aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007aa6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	2201      	movs	r2, #1
 8007aae:	409a      	lsls	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007ab4:	bf00      	nop
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	58025408 	.word	0x58025408
 8007ac4:	5802541c 	.word	0x5802541c
 8007ac8:	58025430 	.word	0x58025430
 8007acc:	58025444 	.word	0x58025444
 8007ad0:	58025458 	.word	0x58025458
 8007ad4:	5802546c 	.word	0x5802546c
 8007ad8:	58025480 	.word	0x58025480
 8007adc:	58025494 	.word	0x58025494
 8007ae0:	1600963f 	.word	0x1600963f
 8007ae4:	58025940 	.word	0x58025940
 8007ae8:	1000823f 	.word	0x1000823f
 8007aec:	40020940 	.word	0x40020940

08007af0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e04f      	b.n	8007ba2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7f8 ff08 	bl	800092c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	4b20      	ldr	r3, [pc, #128]	; (8007bac <HAL_DMA2D_Init+0xbc>)
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	6851      	ldr	r1, [r2, #4]
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	69d2      	ldr	r2, [r2, #28]
 8007b36:	4311      	orrs	r1, r2
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	6812      	ldr	r2, [r2, #0]
 8007b3c:	430b      	orrs	r3, r1
 8007b3e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b46:	4b1a      	ldr	r3, [pc, #104]	; (8007bb0 <HAL_DMA2D_Init+0xc0>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	6891      	ldr	r1, [r2, #8]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	6992      	ldr	r2, [r2, #24]
 8007b52:	4311      	orrs	r1, r2
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	6812      	ldr	r2, [r2, #0]
 8007b58:	430b      	orrs	r3, r1
 8007b5a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b62:	4b14      	ldr	r3, [pc, #80]	; (8007bb4 <HAL_DMA2D_Init+0xc4>)
 8007b64:	4013      	ands	r3, r2
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	68d1      	ldr	r1, [r2, #12]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	6812      	ldr	r2, [r2, #0]
 8007b6e:	430b      	orrs	r3, r1
 8007b70:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b78:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	051a      	lsls	r2, r3, #20
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	055b      	lsls	r3, r3, #21
 8007b88:	431a      	orrs	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	fff8ffbf 	.word	0xfff8ffbf
 8007bb0:	fffffef8 	.word	0xfffffef8
 8007bb4:	ffff0000 	.word	0xffff0000

08007bb8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af02      	add	r7, sp, #8
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d101      	bne.n	8007bd4 <HAL_DMA2D_Start+0x1c>
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	e018      	b.n	8007c06 <HAL_DMA2D_Start+0x4e>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2202      	movs	r2, #2
 8007be0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	68b9      	ldr	r1, [r7, #8]
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 fab4 	bl	800815c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0201 	orr.w	r2, r2, #1
 8007c02:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b086      	sub	sp, #24
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d056      	beq.n	8007cd8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c2a:	f7fc fc73 	bl	8004514 <HAL_GetTick>
 8007c2e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007c30:	e04b      	b.n	8007cca <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d023      	beq.n	8007c8c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d005      	beq.n	8007c5a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c52:	f043 0202 	orr.w	r2, r3, #2
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d005      	beq.n	8007c70 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c68:	f043 0201 	orr.w	r2, r3, #1
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2221      	movs	r2, #33	; 0x21
 8007c76:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2204      	movs	r2, #4
 8007c7c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e0a5      	b.n	8007dd8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c92:	d01a      	beq.n	8007cca <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c94:	f7fc fc3e 	bl	8004514 <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d302      	bcc.n	8007caa <HAL_DMA2D_PollForTransfer+0x9c>
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10f      	bne.n	8007cca <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cae:	f043 0220 	orr.w	r2, r3, #32
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2203      	movs	r2, #3
 8007cba:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e086      	b.n	8007dd8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	f003 0302 	and.w	r3, r3, #2
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d0ac      	beq.n	8007c32 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	f003 0320 	and.w	r3, r3, #32
 8007ce2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cea:	f003 0320 	and.w	r3, r3, #32
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d061      	beq.n	8007dbe <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007cfa:	f7fc fc0b 	bl	8004514 <HAL_GetTick>
 8007cfe:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007d00:	e056      	b.n	8007db0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d02e      	beq.n	8007d72 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f003 0308 	and.w	r3, r3, #8
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d005      	beq.n	8007d2a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d22:	f043 0204 	orr.w	r2, r3, #4
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f003 0320 	and.w	r3, r3, #32
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d005      	beq.n	8007d40 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d38:	f043 0202 	orr.w	r2, r3, #2
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d005      	beq.n	8007d56 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d4e:	f043 0201 	orr.w	r2, r3, #1
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2229      	movs	r2, #41	; 0x29
 8007d5c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2204      	movs	r2, #4
 8007d62:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e032      	b.n	8007dd8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d78:	d01a      	beq.n	8007db0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d7a:	f7fc fbcb 	bl	8004514 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d302      	bcc.n	8007d90 <HAL_DMA2D_PollForTransfer+0x182>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10f      	bne.n	8007db0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d94:	f043 0220 	orr.w	r2, r3, #32
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2203      	movs	r2, #3
 8007da0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e013      	b.n	8007dd8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f003 0310 	and.w	r3, r3, #16
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0a1      	beq.n	8007d02 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2212      	movs	r2, #18
 8007dc4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d026      	beq.n	8007e50 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d021      	beq.n	8007e50 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e1a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e20:	f043 0201 	orr.w	r2, r3, #1
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2204      	movs	r2, #4
 8007e34:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d003      	beq.n	8007e50 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f003 0320 	and.w	r3, r3, #32
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d026      	beq.n	8007ea8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d021      	beq.n	8007ea8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e72:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e80:	f043 0202 	orr.w	r2, r3, #2
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2204      	movs	r2, #4
 8007e8c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d003      	beq.n	8007ea8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f003 0308 	and.w	r3, r3, #8
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d026      	beq.n	8007f00 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d021      	beq.n	8007f00 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007eca:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2208      	movs	r2, #8
 8007ed2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ed8:	f043 0204 	orr.w	r2, r3, #4
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2204      	movs	r2, #4
 8007ee4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d003      	beq.n	8007f00 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f003 0304 	and.w	r3, r3, #4
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d013      	beq.n	8007f32 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00e      	beq.n	8007f32 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f22:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2204      	movs	r2, #4
 8007f2a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f853 	bl	8007fd8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d024      	beq.n	8007f86 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d01f      	beq.n	8007f86 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007f54:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f003 0310 	and.w	r3, r3, #16
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d01f      	beq.n	8007fd0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d01a      	beq.n	8007fd0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007fa8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2210      	movs	r2, #16
 8007fb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f80e 	bl	8007fec <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007fd0:	bf00      	nop
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008000:	b480      	push	{r7}
 8008002:	b087      	sub	sp, #28
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800801c:	2b01      	cmp	r3, #1
 800801e:	d101      	bne.n	8008024 <HAL_DMA2D_ConfigLayer+0x24>
 8008020:	2302      	movs	r3, #2
 8008022:	e092      	b.n	800814a <HAL_DMA2D_ConfigLayer+0x14a>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2202      	movs	r2, #2
 8008030:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	4613      	mov	r3, r2
 8008038:	00db      	lsls	r3, r3, #3
 800803a:	1a9b      	subs	r3, r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	3328      	adds	r3, #40	; 0x28
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	4413      	add	r3, r2
 8008044:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	041b      	lsls	r3, r3, #16
 8008050:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008058:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8008060:	4313      	orrs	r3, r2
 8008062:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8008064:	4b3c      	ldr	r3, [pc, #240]	; (8008158 <HAL_DMA2D_ConfigLayer+0x158>)
 8008066:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	2b0a      	cmp	r3, #10
 800806e:	d003      	beq.n	8008078 <HAL_DMA2D_ConfigLayer+0x78>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	2b09      	cmp	r3, #9
 8008076:	d107      	bne.n	8008088 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	4313      	orrs	r3, r2
 8008084:	613b      	str	r3, [r7, #16]
 8008086:	e005      	b.n	8008094 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	061b      	lsls	r3, r3, #24
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	4313      	orrs	r3, r2
 8008092:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d120      	bne.n	80080dc <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	43db      	mvns	r3, r3
 80080a4:	ea02 0103 	and.w	r1, r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	693a      	ldr	r2, [r7, #16]
 80080ae:	430a      	orrs	r2, r1
 80080b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	6812      	ldr	r2, [r2, #0]
 80080ba:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	2b0a      	cmp	r3, #10
 80080c2:	d003      	beq.n	80080cc <HAL_DMA2D_ConfigLayer+0xcc>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	2b09      	cmp	r3, #9
 80080ca:	d135      	bne.n	8008138 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	68da      	ldr	r2, [r3, #12]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80080d8:	629a      	str	r2, [r3, #40]	; 0x28
 80080da:	e02d      	b.n	8008138 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	2b0b      	cmp	r3, #11
 80080e2:	d109      	bne.n	80080f8 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	049b      	lsls	r3, r3, #18
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 80080f6:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	69da      	ldr	r2, [r3, #28]
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	43db      	mvns	r3, r3
 8008102:	ea02 0103 	and.w	r1, r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	430a      	orrs	r2, r1
 800810e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	6812      	ldr	r2, [r2, #0]
 8008118:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	2b0a      	cmp	r3, #10
 8008120:	d003      	beq.n	800812a <HAL_DMA2D_ConfigLayer+0x12a>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	2b09      	cmp	r3, #9
 8008128:	d106      	bne.n	8008138 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	68da      	ldr	r2, [r3, #12]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008136:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	371c      	adds	r7, #28
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	ff33000f 	.word	0xff33000f

0800815c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800815c:	b480      	push	{r7}
 800815e:	b08b      	sub	sp, #44	; 0x2c
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008170:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	041a      	lsls	r2, r3, #16
 8008178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817a:	431a      	orrs	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	430a      	orrs	r2, r1
 8008182:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008194:	d174      	bne.n	8008280 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800819c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081a4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80081ac:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d108      	bne.n	80081ce <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	431a      	orrs	r2, r3
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	627b      	str	r3, [r7, #36]	; 0x24
 80081cc:	e053      	b.n	8008276 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d106      	bne.n	80081e4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80081d6:	69ba      	ldr	r2, [r7, #24]
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	4313      	orrs	r3, r2
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	4313      	orrs	r3, r2
 80081e0:	627b      	str	r3, [r7, #36]	; 0x24
 80081e2:	e048      	b.n	8008276 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d111      	bne.n	8008210 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	0cdb      	lsrs	r3, r3, #19
 80081f0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	0a9b      	lsrs	r3, r3, #10
 80081f6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	08db      	lsrs	r3, r3, #3
 80081fc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	015a      	lsls	r2, r3, #5
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	02db      	lsls	r3, r3, #11
 8008206:	4313      	orrs	r3, r2
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	4313      	orrs	r3, r2
 800820c:	627b      	str	r3, [r7, #36]	; 0x24
 800820e:	e032      	b.n	8008276 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	2b03      	cmp	r3, #3
 8008216:	d117      	bne.n	8008248 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8008218:	6a3b      	ldr	r3, [r7, #32]
 800821a:	0fdb      	lsrs	r3, r3, #31
 800821c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	0cdb      	lsrs	r3, r3, #19
 8008222:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	0adb      	lsrs	r3, r3, #11
 8008228:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	08db      	lsrs	r3, r3, #3
 800822e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	029b      	lsls	r3, r3, #10
 8008238:	431a      	orrs	r2, r3
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	03db      	lsls	r3, r3, #15
 800823e:	4313      	orrs	r3, r2
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	4313      	orrs	r3, r2
 8008244:	627b      	str	r3, [r7, #36]	; 0x24
 8008246:	e016      	b.n	8008276 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	0f1b      	lsrs	r3, r3, #28
 800824c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	0d1b      	lsrs	r3, r3, #20
 8008252:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	0b1b      	lsrs	r3, r3, #12
 8008258:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	091b      	lsrs	r3, r3, #4
 800825e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	011a      	lsls	r2, r3, #4
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	021b      	lsls	r3, r3, #8
 8008268:	431a      	orrs	r2, r3
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	031b      	lsls	r3, r3, #12
 800826e:	4313      	orrs	r3, r2
 8008270:	697a      	ldr	r2, [r7, #20]
 8008272:	4313      	orrs	r3, r2
 8008274:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800827c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800827e:	e00d      	b.n	800829c <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008288:	d104      	bne.n	8008294 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	615a      	str	r2, [r3, #20]
}
 8008292:	e003      	b.n	800829c <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	60da      	str	r2, [r3, #12]
}
 800829c:	bf00      	nop
 800829e:	372c      	adds	r7, #44	; 0x2c
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	2b80      	cmp	r3, #128	; 0x80
 80082c0:	d105      	bne.n	80082ce <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e315      	b.n	80088fa <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d101      	bne.n	80082dc <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80082d8:	2302      	movs	r3, #2
 80082da:	e30e      	b.n	80088fa <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	f040 82fd 	bne.w	80088ec <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2202      	movs	r2, #2
 80082f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a82      	ldr	r2, [pc, #520]	; (8008510 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d04a      	beq.n	80083a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a81      	ldr	r2, [pc, #516]	; (8008514 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d045      	beq.n	80083a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a7f      	ldr	r2, [pc, #508]	; (8008518 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d040      	beq.n	80083a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a7e      	ldr	r2, [pc, #504]	; (800851c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d03b      	beq.n	80083a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a7c      	ldr	r2, [pc, #496]	; (8008520 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d036      	beq.n	80083a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a7b      	ldr	r2, [pc, #492]	; (8008524 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d031      	beq.n	80083a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a79      	ldr	r2, [pc, #484]	; (8008528 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d02c      	beq.n	80083a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a78      	ldr	r2, [pc, #480]	; (800852c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d027      	beq.n	80083a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a76      	ldr	r2, [pc, #472]	; (8008530 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d022      	beq.n	80083a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a75      	ldr	r2, [pc, #468]	; (8008534 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d01d      	beq.n	80083a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a73      	ldr	r2, [pc, #460]	; (8008538 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d018      	beq.n	80083a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a72      	ldr	r2, [pc, #456]	; (800853c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d013      	beq.n	80083a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a70      	ldr	r2, [pc, #448]	; (8008540 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d00e      	beq.n	80083a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a6f      	ldr	r2, [pc, #444]	; (8008544 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d009      	beq.n	80083a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a6d      	ldr	r2, [pc, #436]	; (8008548 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d004      	beq.n	80083a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a6c      	ldr	r2, [pc, #432]	; (800854c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d101      	bne.n	80083a4 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 80083a0:	2301      	movs	r3, #1
 80083a2:	e000      	b.n	80083a6 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 80083a4:	2300      	movs	r3, #0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d018      	beq.n	80083dc <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80083b8:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c6:	3308      	adds	r3, #8
 80083c8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ce:	f003 031f 	and.w	r3, r3, #31
 80083d2:	223f      	movs	r2, #63	; 0x3f
 80083d4:	409a      	lsls	r2, r3
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	601a      	str	r2, [r3, #0]
 80083da:	e018      	b.n	800840e <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6819      	ldr	r1, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	f248 0320 	movw	r3, #32800	; 0x8020
 80083ea:	430b      	orrs	r3, r1
 80083ec:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083fa:	3304      	adds	r3, #4
 80083fc:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008402:	f003 031f 	and.w	r3, r3, #31
 8008406:	2201      	movs	r2, #1
 8008408:	409a      	lsls	r2, r3
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800840e:	6a3b      	ldr	r3, [r7, #32]
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	68b9      	ldr	r1, [r7, #8]
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 fb41 	bl	8008a9c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a3c      	ldr	r2, [pc, #240]	; (8008510 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d072      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a3a      	ldr	r2, [pc, #232]	; (8008514 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d06d      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a39      	ldr	r2, [pc, #228]	; (8008518 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d068      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a37      	ldr	r2, [pc, #220]	; (800851c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d063      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a36      	ldr	r2, [pc, #216]	; (8008520 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d05e      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a34      	ldr	r2, [pc, #208]	; (8008524 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d059      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a33      	ldr	r2, [pc, #204]	; (8008528 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d054      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a31      	ldr	r2, [pc, #196]	; (800852c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d04f      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a30      	ldr	r2, [pc, #192]	; (8008530 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d04a      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a2e      	ldr	r2, [pc, #184]	; (8008534 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d045      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a2d      	ldr	r2, [pc, #180]	; (8008538 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d040      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a2b      	ldr	r2, [pc, #172]	; (800853c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d03b      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a2a      	ldr	r2, [pc, #168]	; (8008540 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d036      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a28      	ldr	r2, [pc, #160]	; (8008544 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d031      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a27      	ldr	r2, [pc, #156]	; (8008548 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d02c      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a25      	ldr	r2, [pc, #148]	; (800854c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d027      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a24      	ldr	r2, [pc, #144]	; (8008550 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d022      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a22      	ldr	r2, [pc, #136]	; (8008554 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d01d      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a21      	ldr	r2, [pc, #132]	; (8008558 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d018      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a1f      	ldr	r2, [pc, #124]	; (800855c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d013      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a1e      	ldr	r2, [pc, #120]	; (8008560 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d00e      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a1c      	ldr	r2, [pc, #112]	; (8008564 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d009      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a1b      	ldr	r2, [pc, #108]	; (8008568 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d004      	beq.n	800850a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a19      	ldr	r2, [pc, #100]	; (800856c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d132      	bne.n	8008570 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 800850a:	2301      	movs	r3, #1
 800850c:	e031      	b.n	8008572 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 800850e:	bf00      	nop
 8008510:	40020010 	.word	0x40020010
 8008514:	40020028 	.word	0x40020028
 8008518:	40020040 	.word	0x40020040
 800851c:	40020058 	.word	0x40020058
 8008520:	40020070 	.word	0x40020070
 8008524:	40020088 	.word	0x40020088
 8008528:	400200a0 	.word	0x400200a0
 800852c:	400200b8 	.word	0x400200b8
 8008530:	40020410 	.word	0x40020410
 8008534:	40020428 	.word	0x40020428
 8008538:	40020440 	.word	0x40020440
 800853c:	40020458 	.word	0x40020458
 8008540:	40020470 	.word	0x40020470
 8008544:	40020488 	.word	0x40020488
 8008548:	400204a0 	.word	0x400204a0
 800854c:	400204b8 	.word	0x400204b8
 8008550:	58025408 	.word	0x58025408
 8008554:	5802541c 	.word	0x5802541c
 8008558:	58025430 	.word	0x58025430
 800855c:	58025444 	.word	0x58025444
 8008560:	58025458 	.word	0x58025458
 8008564:	5802546c 	.word	0x5802546c
 8008568:	58025480 	.word	0x58025480
 800856c:	58025494 	.word	0x58025494
 8008570:	2300      	movs	r3, #0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00d      	beq.n	8008592 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800857e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008584:	2b00      	cmp	r3, #0
 8008586:	d004      	beq.n	8008592 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008590:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a3b      	ldr	r2, [pc, #236]	; (8008684 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d04a      	beq.n	8008632 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a39      	ldr	r2, [pc, #228]	; (8008688 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d045      	beq.n	8008632 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a38      	ldr	r2, [pc, #224]	; (800868c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d040      	beq.n	8008632 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a36      	ldr	r2, [pc, #216]	; (8008690 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d03b      	beq.n	8008632 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a35      	ldr	r2, [pc, #212]	; (8008694 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d036      	beq.n	8008632 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a33      	ldr	r2, [pc, #204]	; (8008698 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d031      	beq.n	8008632 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a32      	ldr	r2, [pc, #200]	; (800869c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d02c      	beq.n	8008632 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a30      	ldr	r2, [pc, #192]	; (80086a0 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d027      	beq.n	8008632 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a2f      	ldr	r2, [pc, #188]	; (80086a4 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d022      	beq.n	8008632 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a2d      	ldr	r2, [pc, #180]	; (80086a8 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d01d      	beq.n	8008632 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a2c      	ldr	r2, [pc, #176]	; (80086ac <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d018      	beq.n	8008632 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a2a      	ldr	r2, [pc, #168]	; (80086b0 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d013      	beq.n	8008632 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a29      	ldr	r2, [pc, #164]	; (80086b4 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d00e      	beq.n	8008632 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a27      	ldr	r2, [pc, #156]	; (80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d009      	beq.n	8008632 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a26      	ldr	r2, [pc, #152]	; (80086bc <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d004      	beq.n	8008632 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a24      	ldr	r2, [pc, #144]	; (80086c0 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d101      	bne.n	8008636 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8008632:	2301      	movs	r3, #1
 8008634:	e000      	b.n	8008638 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8008636:	2300      	movs	r3, #0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d043      	beq.n	80086c4 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f023 021e 	bic.w	r2, r3, #30
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f042 0216 	orr.w	r2, r2, #22
 800864e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	695a      	ldr	r2, [r3, #20]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800865e:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	d103      	bne.n	8008670 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800866c:	2b00      	cmp	r3, #0
 800866e:	d043      	beq.n	80086f8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f042 0208 	orr.w	r2, r2, #8
 800867e:	601a      	str	r2, [r3, #0]
 8008680:	e03a      	b.n	80086f8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8008682:	bf00      	nop
 8008684:	40020010 	.word	0x40020010
 8008688:	40020028 	.word	0x40020028
 800868c:	40020040 	.word	0x40020040
 8008690:	40020058 	.word	0x40020058
 8008694:	40020070 	.word	0x40020070
 8008698:	40020088 	.word	0x40020088
 800869c:	400200a0 	.word	0x400200a0
 80086a0:	400200b8 	.word	0x400200b8
 80086a4:	40020410 	.word	0x40020410
 80086a8:	40020428 	.word	0x40020428
 80086ac:	40020440 	.word	0x40020440
 80086b0:	40020458 	.word	0x40020458
 80086b4:	40020470 	.word	0x40020470
 80086b8:	40020488 	.word	0x40020488
 80086bc:	400204a0 	.word	0x400204a0
 80086c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f023 020e 	bic.w	r2, r3, #14
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f042 020a 	orr.w	r2, r2, #10
 80086d6:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d103      	bne.n	80086e8 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d007      	beq.n	80086f8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f042 0204 	orr.w	r2, r2, #4
 80086f6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a81      	ldr	r2, [pc, #516]	; (8008904 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d072      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a80      	ldr	r2, [pc, #512]	; (8008908 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d06d      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a7e      	ldr	r2, [pc, #504]	; (800890c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d068      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a7d      	ldr	r2, [pc, #500]	; (8008910 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d063      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a7b      	ldr	r2, [pc, #492]	; (8008914 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d05e      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a7a      	ldr	r2, [pc, #488]	; (8008918 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d059      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a78      	ldr	r2, [pc, #480]	; (800891c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d054      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a77      	ldr	r2, [pc, #476]	; (8008920 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d04f      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a75      	ldr	r2, [pc, #468]	; (8008924 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d04a      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a74      	ldr	r2, [pc, #464]	; (8008928 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d045      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a72      	ldr	r2, [pc, #456]	; (800892c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d040      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a71      	ldr	r2, [pc, #452]	; (8008930 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d03b      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a6f      	ldr	r2, [pc, #444]	; (8008934 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d036      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a6e      	ldr	r2, [pc, #440]	; (8008938 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d031      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a6c      	ldr	r2, [pc, #432]	; (800893c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d02c      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a6b      	ldr	r2, [pc, #428]	; (8008940 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d027      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a69      	ldr	r2, [pc, #420]	; (8008944 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d022      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a68      	ldr	r2, [pc, #416]	; (8008948 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d01d      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a66      	ldr	r2, [pc, #408]	; (800894c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d018      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a65      	ldr	r2, [pc, #404]	; (8008950 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d013      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a63      	ldr	r2, [pc, #396]	; (8008954 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d00e      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a62      	ldr	r2, [pc, #392]	; (8008958 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d009      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a60      	ldr	r2, [pc, #384]	; (800895c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d004      	beq.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a5f      	ldr	r2, [pc, #380]	; (8008960 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d101      	bne.n	80087ec <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80087e8:	2301      	movs	r3, #1
 80087ea:	e000      	b.n	80087ee <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80087ec:	2300      	movs	r3, #0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d01a      	beq.n	8008828 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d007      	beq.n	8008810 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800880a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800880e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008814:	2b00      	cmp	r3, #0
 8008816:	d007      	beq.n	8008828 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008826:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a35      	ldr	r2, [pc, #212]	; (8008904 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d04a      	beq.n	80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a34      	ldr	r2, [pc, #208]	; (8008908 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d045      	beq.n	80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a32      	ldr	r2, [pc, #200]	; (800890c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d040      	beq.n	80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a31      	ldr	r2, [pc, #196]	; (8008910 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d03b      	beq.n	80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a2f      	ldr	r2, [pc, #188]	; (8008914 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d036      	beq.n	80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a2e      	ldr	r2, [pc, #184]	; (8008918 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d031      	beq.n	80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a2c      	ldr	r2, [pc, #176]	; (800891c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d02c      	beq.n	80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a2b      	ldr	r2, [pc, #172]	; (8008920 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d027      	beq.n	80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a29      	ldr	r2, [pc, #164]	; (8008924 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d022      	beq.n	80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a28      	ldr	r2, [pc, #160]	; (8008928 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d01d      	beq.n	80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a26      	ldr	r2, [pc, #152]	; (800892c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d018      	beq.n	80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a25      	ldr	r2, [pc, #148]	; (8008930 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d013      	beq.n	80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a23      	ldr	r2, [pc, #140]	; (8008934 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d00e      	beq.n	80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a22      	ldr	r2, [pc, #136]	; (8008938 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d009      	beq.n	80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a20      	ldr	r2, [pc, #128]	; (800893c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d004      	beq.n	80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a1f      	ldr	r2, [pc, #124]	; (8008940 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d108      	bne.n	80088da <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f042 0201 	orr.w	r2, r2, #1
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	e00e      	b.n	80088f8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f042 0201 	orr.w	r2, r2, #1
 80088e8:	601a      	str	r2, [r3, #0]
 80088ea:	e005      	b.n	80088f8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80088f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	40020010 	.word	0x40020010
 8008908:	40020028 	.word	0x40020028
 800890c:	40020040 	.word	0x40020040
 8008910:	40020058 	.word	0x40020058
 8008914:	40020070 	.word	0x40020070
 8008918:	40020088 	.word	0x40020088
 800891c:	400200a0 	.word	0x400200a0
 8008920:	400200b8 	.word	0x400200b8
 8008924:	40020410 	.word	0x40020410
 8008928:	40020428 	.word	0x40020428
 800892c:	40020440 	.word	0x40020440
 8008930:	40020458 	.word	0x40020458
 8008934:	40020470 	.word	0x40020470
 8008938:	40020488 	.word	0x40020488
 800893c:	400204a0 	.word	0x400204a0
 8008940:	400204b8 	.word	0x400204b8
 8008944:	58025408 	.word	0x58025408
 8008948:	5802541c 	.word	0x5802541c
 800894c:	58025430 	.word	0x58025430
 8008950:	58025444 	.word	0x58025444
 8008954:	58025458 	.word	0x58025458
 8008958:	5802546c 	.word	0x5802546c
 800895c:	58025480 	.word	0x58025480
 8008960:	58025494 	.word	0x58025494

08008964 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	4613      	mov	r3, r2
 8008970:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a39      	ldr	r2, [pc, #228]	; (8008a5c <HAL_DMAEx_ChangeMemory+0xf8>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d04a      	beq.n	8008a12 <HAL_DMAEx_ChangeMemory+0xae>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a37      	ldr	r2, [pc, #220]	; (8008a60 <HAL_DMAEx_ChangeMemory+0xfc>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d045      	beq.n	8008a12 <HAL_DMAEx_ChangeMemory+0xae>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a36      	ldr	r2, [pc, #216]	; (8008a64 <HAL_DMAEx_ChangeMemory+0x100>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d040      	beq.n	8008a12 <HAL_DMAEx_ChangeMemory+0xae>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a34      	ldr	r2, [pc, #208]	; (8008a68 <HAL_DMAEx_ChangeMemory+0x104>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d03b      	beq.n	8008a12 <HAL_DMAEx_ChangeMemory+0xae>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a33      	ldr	r2, [pc, #204]	; (8008a6c <HAL_DMAEx_ChangeMemory+0x108>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d036      	beq.n	8008a12 <HAL_DMAEx_ChangeMemory+0xae>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a31      	ldr	r2, [pc, #196]	; (8008a70 <HAL_DMAEx_ChangeMemory+0x10c>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d031      	beq.n	8008a12 <HAL_DMAEx_ChangeMemory+0xae>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a30      	ldr	r2, [pc, #192]	; (8008a74 <HAL_DMAEx_ChangeMemory+0x110>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d02c      	beq.n	8008a12 <HAL_DMAEx_ChangeMemory+0xae>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a2e      	ldr	r2, [pc, #184]	; (8008a78 <HAL_DMAEx_ChangeMemory+0x114>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d027      	beq.n	8008a12 <HAL_DMAEx_ChangeMemory+0xae>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a2d      	ldr	r2, [pc, #180]	; (8008a7c <HAL_DMAEx_ChangeMemory+0x118>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d022      	beq.n	8008a12 <HAL_DMAEx_ChangeMemory+0xae>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a2b      	ldr	r2, [pc, #172]	; (8008a80 <HAL_DMAEx_ChangeMemory+0x11c>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d01d      	beq.n	8008a12 <HAL_DMAEx_ChangeMemory+0xae>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a2a      	ldr	r2, [pc, #168]	; (8008a84 <HAL_DMAEx_ChangeMemory+0x120>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d018      	beq.n	8008a12 <HAL_DMAEx_ChangeMemory+0xae>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a28      	ldr	r2, [pc, #160]	; (8008a88 <HAL_DMAEx_ChangeMemory+0x124>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d013      	beq.n	8008a12 <HAL_DMAEx_ChangeMemory+0xae>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a27      	ldr	r2, [pc, #156]	; (8008a8c <HAL_DMAEx_ChangeMemory+0x128>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d00e      	beq.n	8008a12 <HAL_DMAEx_ChangeMemory+0xae>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a25      	ldr	r2, [pc, #148]	; (8008a90 <HAL_DMAEx_ChangeMemory+0x12c>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d009      	beq.n	8008a12 <HAL_DMAEx_ChangeMemory+0xae>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a24      	ldr	r2, [pc, #144]	; (8008a94 <HAL_DMAEx_ChangeMemory+0x130>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d004      	beq.n	8008a12 <HAL_DMAEx_ChangeMemory+0xae>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a22      	ldr	r2, [pc, #136]	; (8008a98 <HAL_DMAEx_ChangeMemory+0x134>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d101      	bne.n	8008a16 <HAL_DMAEx_ChangeMemory+0xb2>
 8008a12:	2301      	movs	r3, #1
 8008a14:	e000      	b.n	8008a18 <HAL_DMAEx_ChangeMemory+0xb4>
 8008a16:	2300      	movs	r3, #0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00c      	beq.n	8008a36 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8008a1c:	79fb      	ldrb	r3, [r7, #7]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d104      	bne.n	8008a2c <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	60da      	str	r2, [r3, #12]
 8008a2a:	e010      	b.n	8008a4e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	611a      	str	r2, [r3, #16]
 8008a34:	e00b      	b.n	8008a4e <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d104      	bne.n	8008a46 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	60da      	str	r2, [r3, #12]
 8008a44:	e003      	b.n	8008a4e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr
 8008a5c:	40020010 	.word	0x40020010
 8008a60:	40020028 	.word	0x40020028
 8008a64:	40020040 	.word	0x40020040
 8008a68:	40020058 	.word	0x40020058
 8008a6c:	40020070 	.word	0x40020070
 8008a70:	40020088 	.word	0x40020088
 8008a74:	400200a0 	.word	0x400200a0
 8008a78:	400200b8 	.word	0x400200b8
 8008a7c:	40020410 	.word	0x40020410
 8008a80:	40020428 	.word	0x40020428
 8008a84:	40020440 	.word	0x40020440
 8008a88:	40020458 	.word	0x40020458
 8008a8c:	40020470 	.word	0x40020470
 8008a90:	40020488 	.word	0x40020488
 8008a94:	400204a0 	.word	0x400204a0
 8008a98:	400204b8 	.word	0x400204b8

08008a9c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
 8008aa8:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a46      	ldr	r2, [pc, #280]	; (8008bc8 <DMA_MultiBufferSetConfig+0x12c>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d04a      	beq.n	8008b4a <DMA_MultiBufferSetConfig+0xae>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a44      	ldr	r2, [pc, #272]	; (8008bcc <DMA_MultiBufferSetConfig+0x130>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d045      	beq.n	8008b4a <DMA_MultiBufferSetConfig+0xae>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a43      	ldr	r2, [pc, #268]	; (8008bd0 <DMA_MultiBufferSetConfig+0x134>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d040      	beq.n	8008b4a <DMA_MultiBufferSetConfig+0xae>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a41      	ldr	r2, [pc, #260]	; (8008bd4 <DMA_MultiBufferSetConfig+0x138>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d03b      	beq.n	8008b4a <DMA_MultiBufferSetConfig+0xae>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a40      	ldr	r2, [pc, #256]	; (8008bd8 <DMA_MultiBufferSetConfig+0x13c>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d036      	beq.n	8008b4a <DMA_MultiBufferSetConfig+0xae>
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a3e      	ldr	r2, [pc, #248]	; (8008bdc <DMA_MultiBufferSetConfig+0x140>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d031      	beq.n	8008b4a <DMA_MultiBufferSetConfig+0xae>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a3d      	ldr	r2, [pc, #244]	; (8008be0 <DMA_MultiBufferSetConfig+0x144>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d02c      	beq.n	8008b4a <DMA_MultiBufferSetConfig+0xae>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a3b      	ldr	r2, [pc, #236]	; (8008be4 <DMA_MultiBufferSetConfig+0x148>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d027      	beq.n	8008b4a <DMA_MultiBufferSetConfig+0xae>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a3a      	ldr	r2, [pc, #232]	; (8008be8 <DMA_MultiBufferSetConfig+0x14c>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d022      	beq.n	8008b4a <DMA_MultiBufferSetConfig+0xae>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a38      	ldr	r2, [pc, #224]	; (8008bec <DMA_MultiBufferSetConfig+0x150>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d01d      	beq.n	8008b4a <DMA_MultiBufferSetConfig+0xae>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a37      	ldr	r2, [pc, #220]	; (8008bf0 <DMA_MultiBufferSetConfig+0x154>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d018      	beq.n	8008b4a <DMA_MultiBufferSetConfig+0xae>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a35      	ldr	r2, [pc, #212]	; (8008bf4 <DMA_MultiBufferSetConfig+0x158>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d013      	beq.n	8008b4a <DMA_MultiBufferSetConfig+0xae>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a34      	ldr	r2, [pc, #208]	; (8008bf8 <DMA_MultiBufferSetConfig+0x15c>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d00e      	beq.n	8008b4a <DMA_MultiBufferSetConfig+0xae>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a32      	ldr	r2, [pc, #200]	; (8008bfc <DMA_MultiBufferSetConfig+0x160>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d009      	beq.n	8008b4a <DMA_MultiBufferSetConfig+0xae>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a31      	ldr	r2, [pc, #196]	; (8008c00 <DMA_MultiBufferSetConfig+0x164>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d004      	beq.n	8008b4a <DMA_MultiBufferSetConfig+0xae>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a2f      	ldr	r2, [pc, #188]	; (8008c04 <DMA_MultiBufferSetConfig+0x168>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d101      	bne.n	8008b4e <DMA_MultiBufferSetConfig+0xb2>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e000      	b.n	8008b50 <DMA_MultiBufferSetConfig+0xb4>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d019      	beq.n	8008b88 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	683a      	ldr	r2, [r7, #0]
 8008b5a:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	2b40      	cmp	r3, #64	; 0x40
 8008b62:	d108      	bne.n	8008b76 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8008b74:	e021      	b.n	8008bba <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	60da      	str	r2, [r3, #12]
}
 8008b86:	e018      	b.n	8008bba <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	2b40      	cmp	r3, #64	; 0x40
 8008b96:	d108      	bne.n	8008baa <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	60da      	str	r2, [r3, #12]
}
 8008ba8:	e007      	b.n	8008bba <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	60da      	str	r2, [r3, #12]
}
 8008bba:	bf00      	nop
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	40020010 	.word	0x40020010
 8008bcc:	40020028 	.word	0x40020028
 8008bd0:	40020040 	.word	0x40020040
 8008bd4:	40020058 	.word	0x40020058
 8008bd8:	40020070 	.word	0x40020070
 8008bdc:	40020088 	.word	0x40020088
 8008be0:	400200a0 	.word	0x400200a0
 8008be4:	400200b8 	.word	0x400200b8
 8008be8:	40020410 	.word	0x40020410
 8008bec:	40020428 	.word	0x40020428
 8008bf0:	40020440 	.word	0x40020440
 8008bf4:	40020458 	.word	0x40020458
 8008bf8:	40020470 	.word	0x40020470
 8008bfc:	40020488 	.word	0x40020488
 8008c00:	400204a0 	.word	0x400204a0
 8008c04:	400204b8 	.word	0x400204b8

08008c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b089      	sub	sp, #36	; 0x24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c12:	2300      	movs	r3, #0
 8008c14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008c16:	4b89      	ldr	r3, [pc, #548]	; (8008e3c <HAL_GPIO_Init+0x234>)
 8008c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c1a:	e194      	b.n	8008f46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	2101      	movs	r1, #1
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	fa01 f303 	lsl.w	r3, r1, r3
 8008c28:	4013      	ands	r3, r2
 8008c2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f000 8186 	beq.w	8008f40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f003 0303 	and.w	r3, r3, #3
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d005      	beq.n	8008c4c <HAL_GPIO_Init+0x44>
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	f003 0303 	and.w	r3, r3, #3
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d130      	bne.n	8008cae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	005b      	lsls	r3, r3, #1
 8008c56:	2203      	movs	r2, #3
 8008c58:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5c:	43db      	mvns	r3, r3
 8008c5e:	69ba      	ldr	r2, [r7, #24]
 8008c60:	4013      	ands	r3, r2
 8008c62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	68da      	ldr	r2, [r3, #12]
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c82:	2201      	movs	r2, #1
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8a:	43db      	mvns	r3, r3
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	4013      	ands	r3, r2
 8008c90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	091b      	lsrs	r3, r3, #4
 8008c98:	f003 0201 	and.w	r2, r3, #1
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	f003 0303 	and.w	r3, r3, #3
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	d017      	beq.n	8008cea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	005b      	lsls	r3, r3, #1
 8008cc4:	2203      	movs	r2, #3
 8008cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cca:	43db      	mvns	r3, r3
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	4013      	ands	r3, r2
 8008cd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	689a      	ldr	r2, [r3, #8]
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	fa02 f303 	lsl.w	r3, r2, r3
 8008cde:	69ba      	ldr	r2, [r7, #24]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f003 0303 	and.w	r3, r3, #3
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d123      	bne.n	8008d3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	08da      	lsrs	r2, r3, #3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	3208      	adds	r2, #8
 8008cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	220f      	movs	r2, #15
 8008d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d12:	43db      	mvns	r3, r3
 8008d14:	69ba      	ldr	r2, [r7, #24]
 8008d16:	4013      	ands	r3, r2
 8008d18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	691a      	ldr	r2, [r3, #16]
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	f003 0307 	and.w	r3, r3, #7
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2a:	69ba      	ldr	r2, [r7, #24]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	08da      	lsrs	r2, r3, #3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	3208      	adds	r2, #8
 8008d38:	69b9      	ldr	r1, [r7, #24]
 8008d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	005b      	lsls	r3, r3, #1
 8008d48:	2203      	movs	r2, #3
 8008d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4e:	43db      	mvns	r3, r3
 8008d50:	69ba      	ldr	r2, [r7, #24]
 8008d52:	4013      	ands	r3, r2
 8008d54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f003 0203 	and.w	r2, r3, #3
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	fa02 f303 	lsl.w	r3, r2, r3
 8008d66:	69ba      	ldr	r2, [r7, #24]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	69ba      	ldr	r2, [r7, #24]
 8008d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f000 80e0 	beq.w	8008f40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d80:	4b2f      	ldr	r3, [pc, #188]	; (8008e40 <HAL_GPIO_Init+0x238>)
 8008d82:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008d86:	4a2e      	ldr	r2, [pc, #184]	; (8008e40 <HAL_GPIO_Init+0x238>)
 8008d88:	f043 0302 	orr.w	r3, r3, #2
 8008d8c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8008d90:	4b2b      	ldr	r3, [pc, #172]	; (8008e40 <HAL_GPIO_Init+0x238>)
 8008d92:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	60fb      	str	r3, [r7, #12]
 8008d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d9e:	4a29      	ldr	r2, [pc, #164]	; (8008e44 <HAL_GPIO_Init+0x23c>)
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	089b      	lsrs	r3, r3, #2
 8008da4:	3302      	adds	r3, #2
 8008da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	f003 0303 	and.w	r3, r3, #3
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	220f      	movs	r2, #15
 8008db6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dba:	43db      	mvns	r3, r3
 8008dbc:	69ba      	ldr	r2, [r7, #24]
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a20      	ldr	r2, [pc, #128]	; (8008e48 <HAL_GPIO_Init+0x240>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d052      	beq.n	8008e70 <HAL_GPIO_Init+0x268>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a1f      	ldr	r2, [pc, #124]	; (8008e4c <HAL_GPIO_Init+0x244>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d031      	beq.n	8008e36 <HAL_GPIO_Init+0x22e>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a1e      	ldr	r2, [pc, #120]	; (8008e50 <HAL_GPIO_Init+0x248>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d02b      	beq.n	8008e32 <HAL_GPIO_Init+0x22a>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a1d      	ldr	r2, [pc, #116]	; (8008e54 <HAL_GPIO_Init+0x24c>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d025      	beq.n	8008e2e <HAL_GPIO_Init+0x226>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a1c      	ldr	r2, [pc, #112]	; (8008e58 <HAL_GPIO_Init+0x250>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d01f      	beq.n	8008e2a <HAL_GPIO_Init+0x222>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a1b      	ldr	r2, [pc, #108]	; (8008e5c <HAL_GPIO_Init+0x254>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d019      	beq.n	8008e26 <HAL_GPIO_Init+0x21e>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a1a      	ldr	r2, [pc, #104]	; (8008e60 <HAL_GPIO_Init+0x258>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d013      	beq.n	8008e22 <HAL_GPIO_Init+0x21a>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a19      	ldr	r2, [pc, #100]	; (8008e64 <HAL_GPIO_Init+0x25c>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d00d      	beq.n	8008e1e <HAL_GPIO_Init+0x216>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a18      	ldr	r2, [pc, #96]	; (8008e68 <HAL_GPIO_Init+0x260>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d007      	beq.n	8008e1a <HAL_GPIO_Init+0x212>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a17      	ldr	r2, [pc, #92]	; (8008e6c <HAL_GPIO_Init+0x264>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d101      	bne.n	8008e16 <HAL_GPIO_Init+0x20e>
 8008e12:	2309      	movs	r3, #9
 8008e14:	e02d      	b.n	8008e72 <HAL_GPIO_Init+0x26a>
 8008e16:	230a      	movs	r3, #10
 8008e18:	e02b      	b.n	8008e72 <HAL_GPIO_Init+0x26a>
 8008e1a:	2308      	movs	r3, #8
 8008e1c:	e029      	b.n	8008e72 <HAL_GPIO_Init+0x26a>
 8008e1e:	2307      	movs	r3, #7
 8008e20:	e027      	b.n	8008e72 <HAL_GPIO_Init+0x26a>
 8008e22:	2306      	movs	r3, #6
 8008e24:	e025      	b.n	8008e72 <HAL_GPIO_Init+0x26a>
 8008e26:	2305      	movs	r3, #5
 8008e28:	e023      	b.n	8008e72 <HAL_GPIO_Init+0x26a>
 8008e2a:	2304      	movs	r3, #4
 8008e2c:	e021      	b.n	8008e72 <HAL_GPIO_Init+0x26a>
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e01f      	b.n	8008e72 <HAL_GPIO_Init+0x26a>
 8008e32:	2302      	movs	r3, #2
 8008e34:	e01d      	b.n	8008e72 <HAL_GPIO_Init+0x26a>
 8008e36:	2301      	movs	r3, #1
 8008e38:	e01b      	b.n	8008e72 <HAL_GPIO_Init+0x26a>
 8008e3a:	bf00      	nop
 8008e3c:	58000080 	.word	0x58000080
 8008e40:	58024400 	.word	0x58024400
 8008e44:	58000400 	.word	0x58000400
 8008e48:	58020000 	.word	0x58020000
 8008e4c:	58020400 	.word	0x58020400
 8008e50:	58020800 	.word	0x58020800
 8008e54:	58020c00 	.word	0x58020c00
 8008e58:	58021000 	.word	0x58021000
 8008e5c:	58021400 	.word	0x58021400
 8008e60:	58021800 	.word	0x58021800
 8008e64:	58021c00 	.word	0x58021c00
 8008e68:	58022000 	.word	0x58022000
 8008e6c:	58022400 	.word	0x58022400
 8008e70:	2300      	movs	r3, #0
 8008e72:	69fa      	ldr	r2, [r7, #28]
 8008e74:	f002 0203 	and.w	r2, r2, #3
 8008e78:	0092      	lsls	r2, r2, #2
 8008e7a:	4093      	lsls	r3, r2
 8008e7c:	69ba      	ldr	r2, [r7, #24]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e82:	4938      	ldr	r1, [pc, #224]	; (8008f64 <HAL_GPIO_Init+0x35c>)
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	089b      	lsrs	r3, r3, #2
 8008e88:	3302      	adds	r3, #2
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	43db      	mvns	r3, r3
 8008e9c:	69ba      	ldr	r2, [r7, #24]
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008eae:	69ba      	ldr	r2, [r7, #24]
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	43db      	mvns	r3, r3
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	4013      	ands	r3, r2
 8008ece:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d003      	beq.n	8008ee4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008ee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	43db      	mvns	r3, r3
 8008ef6:	69ba      	ldr	r2, [r7, #24]
 8008ef8:	4013      	ands	r3, r2
 8008efa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d003      	beq.n	8008f10 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008f08:	69ba      	ldr	r2, [r7, #24]
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	69ba      	ldr	r2, [r7, #24]
 8008f14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	43db      	mvns	r3, r3
 8008f20:	69ba      	ldr	r2, [r7, #24]
 8008f22:	4013      	ands	r3, r2
 8008f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d003      	beq.n	8008f3a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	69ba      	ldr	r2, [r7, #24]
 8008f3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	3301      	adds	r3, #1
 8008f44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f47f ae63 	bne.w	8008c1c <HAL_GPIO_Init+0x14>
  }
}
 8008f56:	bf00      	nop
 8008f58:	bf00      	nop
 8008f5a:	3724      	adds	r7, #36	; 0x24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	58000400 	.word	0x58000400

08008f68 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008f72:	2300      	movs	r3, #0
 8008f74:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008f76:	4b75      	ldr	r3, [pc, #468]	; (800914c <HAL_GPIO_DeInit+0x1e4>)
 8008f78:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008f7a:	e0d9      	b.n	8009130 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	fa02 f303 	lsl.w	r3, r2, r3
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	4013      	ands	r3, r2
 8008f88:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 80cc 	beq.w	800912a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008f92:	4a6f      	ldr	r2, [pc, #444]	; (8009150 <HAL_GPIO_DeInit+0x1e8>)
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	089b      	lsrs	r3, r3, #2
 8008f98:	3302      	adds	r3, #2
 8008f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f9e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	f003 0303 	and.w	r3, r3, #3
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	220f      	movs	r2, #15
 8008faa:	fa02 f303 	lsl.w	r3, r2, r3
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a67      	ldr	r2, [pc, #412]	; (8009154 <HAL_GPIO_DeInit+0x1ec>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d037      	beq.n	800902c <HAL_GPIO_DeInit+0xc4>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a66      	ldr	r2, [pc, #408]	; (8009158 <HAL_GPIO_DeInit+0x1f0>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d031      	beq.n	8009028 <HAL_GPIO_DeInit+0xc0>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a65      	ldr	r2, [pc, #404]	; (800915c <HAL_GPIO_DeInit+0x1f4>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d02b      	beq.n	8009024 <HAL_GPIO_DeInit+0xbc>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a64      	ldr	r2, [pc, #400]	; (8009160 <HAL_GPIO_DeInit+0x1f8>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d025      	beq.n	8009020 <HAL_GPIO_DeInit+0xb8>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a63      	ldr	r2, [pc, #396]	; (8009164 <HAL_GPIO_DeInit+0x1fc>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d01f      	beq.n	800901c <HAL_GPIO_DeInit+0xb4>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a62      	ldr	r2, [pc, #392]	; (8009168 <HAL_GPIO_DeInit+0x200>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d019      	beq.n	8009018 <HAL_GPIO_DeInit+0xb0>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a61      	ldr	r2, [pc, #388]	; (800916c <HAL_GPIO_DeInit+0x204>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d013      	beq.n	8009014 <HAL_GPIO_DeInit+0xac>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a60      	ldr	r2, [pc, #384]	; (8009170 <HAL_GPIO_DeInit+0x208>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d00d      	beq.n	8009010 <HAL_GPIO_DeInit+0xa8>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a5f      	ldr	r2, [pc, #380]	; (8009174 <HAL_GPIO_DeInit+0x20c>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d007      	beq.n	800900c <HAL_GPIO_DeInit+0xa4>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a5e      	ldr	r2, [pc, #376]	; (8009178 <HAL_GPIO_DeInit+0x210>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d101      	bne.n	8009008 <HAL_GPIO_DeInit+0xa0>
 8009004:	2309      	movs	r3, #9
 8009006:	e012      	b.n	800902e <HAL_GPIO_DeInit+0xc6>
 8009008:	230a      	movs	r3, #10
 800900a:	e010      	b.n	800902e <HAL_GPIO_DeInit+0xc6>
 800900c:	2308      	movs	r3, #8
 800900e:	e00e      	b.n	800902e <HAL_GPIO_DeInit+0xc6>
 8009010:	2307      	movs	r3, #7
 8009012:	e00c      	b.n	800902e <HAL_GPIO_DeInit+0xc6>
 8009014:	2306      	movs	r3, #6
 8009016:	e00a      	b.n	800902e <HAL_GPIO_DeInit+0xc6>
 8009018:	2305      	movs	r3, #5
 800901a:	e008      	b.n	800902e <HAL_GPIO_DeInit+0xc6>
 800901c:	2304      	movs	r3, #4
 800901e:	e006      	b.n	800902e <HAL_GPIO_DeInit+0xc6>
 8009020:	2303      	movs	r3, #3
 8009022:	e004      	b.n	800902e <HAL_GPIO_DeInit+0xc6>
 8009024:	2302      	movs	r3, #2
 8009026:	e002      	b.n	800902e <HAL_GPIO_DeInit+0xc6>
 8009028:	2301      	movs	r3, #1
 800902a:	e000      	b.n	800902e <HAL_GPIO_DeInit+0xc6>
 800902c:	2300      	movs	r3, #0
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	f002 0203 	and.w	r2, r2, #3
 8009034:	0092      	lsls	r2, r2, #2
 8009036:	4093      	lsls	r3, r2
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	429a      	cmp	r2, r3
 800903c:	d136      	bne.n	80090ac <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	43db      	mvns	r3, r3
 8009046:	401a      	ands	r2, r3
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	685a      	ldr	r2, [r3, #4]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	43db      	mvns	r3, r3
 8009054:	401a      	ands	r2, r3
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800905a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	43db      	mvns	r3, r3
 8009064:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009068:	4013      	ands	r3, r2
 800906a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800906c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	43db      	mvns	r3, r3
 8009076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800907a:	4013      	ands	r3, r2
 800907c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f003 0303 	and.w	r3, r3, #3
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	220f      	movs	r2, #15
 8009088:	fa02 f303 	lsl.w	r3, r2, r3
 800908c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800908e:	4a30      	ldr	r2, [pc, #192]	; (8009150 <HAL_GPIO_DeInit+0x1e8>)
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	089b      	lsrs	r3, r3, #2
 8009094:	3302      	adds	r3, #2
 8009096:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	43da      	mvns	r2, r3
 800909e:	482c      	ldr	r0, [pc, #176]	; (8009150 <HAL_GPIO_DeInit+0x1e8>)
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	089b      	lsrs	r3, r3, #2
 80090a4:	400a      	ands	r2, r1
 80090a6:	3302      	adds	r3, #2
 80090a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	005b      	lsls	r3, r3, #1
 80090b4:	2103      	movs	r1, #3
 80090b6:	fa01 f303 	lsl.w	r3, r1, r3
 80090ba:	431a      	orrs	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	08da      	lsrs	r2, r3, #3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	3208      	adds	r2, #8
 80090c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	f003 0307 	and.w	r3, r3, #7
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	220f      	movs	r2, #15
 80090d6:	fa02 f303 	lsl.w	r3, r2, r3
 80090da:	43db      	mvns	r3, r3
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	08d2      	lsrs	r2, r2, #3
 80090e0:	4019      	ands	r1, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	3208      	adds	r2, #8
 80090e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68da      	ldr	r2, [r3, #12]
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	005b      	lsls	r3, r3, #1
 80090f2:	2103      	movs	r1, #3
 80090f4:	fa01 f303 	lsl.w	r3, r1, r3
 80090f8:	43db      	mvns	r3, r3
 80090fa:	401a      	ands	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685a      	ldr	r2, [r3, #4]
 8009104:	2101      	movs	r1, #1
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	fa01 f303 	lsl.w	r3, r1, r3
 800910c:	43db      	mvns	r3, r3
 800910e:	401a      	ands	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	689a      	ldr	r2, [r3, #8]
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	005b      	lsls	r3, r3, #1
 800911c:	2103      	movs	r1, #3
 800911e:	fa01 f303 	lsl.w	r3, r1, r3
 8009122:	43db      	mvns	r3, r3
 8009124:	401a      	ands	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	609a      	str	r2, [r3, #8]
    }

    position++;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	3301      	adds	r3, #1
 800912e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8009130:	683a      	ldr	r2, [r7, #0]
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	fa22 f303 	lsr.w	r3, r2, r3
 8009138:	2b00      	cmp	r3, #0
 800913a:	f47f af1f 	bne.w	8008f7c <HAL_GPIO_DeInit+0x14>
  }
}
 800913e:	bf00      	nop
 8009140:	bf00      	nop
 8009142:	371c      	adds	r7, #28
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	58000080 	.word	0x58000080
 8009150:	58000400 	.word	0x58000400
 8009154:	58020000 	.word	0x58020000
 8009158:	58020400 	.word	0x58020400
 800915c:	58020800 	.word	0x58020800
 8009160:	58020c00 	.word	0x58020c00
 8009164:	58021000 	.word	0x58021000
 8009168:	58021400 	.word	0x58021400
 800916c:	58021800 	.word	0x58021800
 8009170:	58021c00 	.word	0x58021c00
 8009174:	58022000 	.word	0x58022000
 8009178:	58022400 	.word	0x58022400

0800917c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	460b      	mov	r3, r1
 8009186:	807b      	strh	r3, [r7, #2]
 8009188:	4613      	mov	r3, r2
 800918a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800918c:	787b      	ldrb	r3, [r7, #1]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d003      	beq.n	800919a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009192:	887a      	ldrh	r2, [r7, #2]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009198:	e003      	b.n	80091a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800919a:	887b      	ldrh	r3, [r7, #2]
 800919c:	041a      	lsls	r2, r3, #16
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	619a      	str	r2, [r3, #24]
}
 80091a2:	bf00      	nop
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b085      	sub	sp, #20
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	460b      	mov	r3, r1
 80091b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	695b      	ldr	r3, [r3, #20]
 80091be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80091c0:	887a      	ldrh	r2, [r7, #2]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	4013      	ands	r3, r2
 80091c6:	041a      	lsls	r2, r3, #16
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	43d9      	mvns	r1, r3
 80091cc:	887b      	ldrh	r3, [r7, #2]
 80091ce:	400b      	ands	r3, r1
 80091d0:	431a      	orrs	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	619a      	str	r2, [r3, #24]
}
 80091d6:	bf00      	nop
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
	...

080091e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e07f      	b.n	80092f6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d106      	bne.n	8009210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f8a9 	bl	8009362 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2224      	movs	r2, #36	; 0x24
 8009214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f022 0201 	bic.w	r2, r2, #1
 8009226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009234:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	689a      	ldr	r2, [r3, #8]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009244:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d107      	bne.n	800925e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	689a      	ldr	r2, [r3, #8]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800925a:	609a      	str	r2, [r3, #8]
 800925c:	e006      	b.n	800926c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	689a      	ldr	r2, [r3, #8]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800926a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	2b02      	cmp	r3, #2
 8009272:	d104      	bne.n	800927e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800927c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	6859      	ldr	r1, [r3, #4]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	4b1d      	ldr	r3, [pc, #116]	; (8009300 <HAL_I2C_Init+0x11c>)
 800928a:	430b      	orrs	r3, r1
 800928c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68da      	ldr	r2, [r3, #12]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800929c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	691a      	ldr	r2, [r3, #16]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	695b      	ldr	r3, [r3, #20]
 80092a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	69d9      	ldr	r1, [r3, #28]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a1a      	ldr	r2, [r3, #32]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	430a      	orrs	r2, r1
 80092c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f042 0201 	orr.w	r2, r2, #1
 80092d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2220      	movs	r2, #32
 80092e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	02008000 	.word	0x02008000

08009304 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	e021      	b.n	800935a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2224      	movs	r2, #36	; 0x24
 800931a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f022 0201 	bic.w	r2, r2, #1
 800932c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f821 	bl	8009376 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3708      	adds	r7, #8
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009362:	b480      	push	{r7}
 8009364:	b083      	sub	sp, #12
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800936a:	bf00      	nop
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800937e:	bf00      	nop
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
	...

0800938c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b088      	sub	sp, #32
 8009390:	af02      	add	r7, sp, #8
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	4608      	mov	r0, r1
 8009396:	4611      	mov	r1, r2
 8009398:	461a      	mov	r2, r3
 800939a:	4603      	mov	r3, r0
 800939c:	817b      	strh	r3, [r7, #10]
 800939e:	460b      	mov	r3, r1
 80093a0:	813b      	strh	r3, [r7, #8]
 80093a2:	4613      	mov	r3, r2
 80093a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	2b20      	cmp	r3, #32
 80093b0:	f040 80f9 	bne.w	80095a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80093b4:	6a3b      	ldr	r3, [r7, #32]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d002      	beq.n	80093c0 <HAL_I2C_Mem_Write+0x34>
 80093ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d105      	bne.n	80093cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e0ed      	b.n	80095a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d101      	bne.n	80093da <HAL_I2C_Mem_Write+0x4e>
 80093d6:	2302      	movs	r3, #2
 80093d8:	e0e6      	b.n	80095a8 <HAL_I2C_Mem_Write+0x21c>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80093e2:	f7fb f897 	bl	8004514 <HAL_GetTick>
 80093e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	2319      	movs	r3, #25
 80093ee:	2201      	movs	r2, #1
 80093f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 fadd 	bl	80099b4 <I2C_WaitOnFlagUntilTimeout>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e0d1      	b.n	80095a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2221      	movs	r2, #33	; 0x21
 8009408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2240      	movs	r2, #64	; 0x40
 8009410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6a3a      	ldr	r2, [r7, #32]
 800941e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009424:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800942c:	88f8      	ldrh	r0, [r7, #6]
 800942e:	893a      	ldrh	r2, [r7, #8]
 8009430:	8979      	ldrh	r1, [r7, #10]
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	9301      	str	r3, [sp, #4]
 8009436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	4603      	mov	r3, r0
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f000 f9ed 	bl	800981c <I2C_RequestMemoryWrite>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d005      	beq.n	8009454 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e0a9      	b.n	80095a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009458:	b29b      	uxth	r3, r3
 800945a:	2bff      	cmp	r3, #255	; 0xff
 800945c:	d90e      	bls.n	800947c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	22ff      	movs	r2, #255	; 0xff
 8009462:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009468:	b2da      	uxtb	r2, r3
 800946a:	8979      	ldrh	r1, [r7, #10]
 800946c:	2300      	movs	r3, #0
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 fc57 	bl	8009d28 <I2C_TransferConfig>
 800947a:	e00f      	b.n	800949c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009480:	b29a      	uxth	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800948a:	b2da      	uxtb	r2, r3
 800948c:	8979      	ldrh	r1, [r7, #10]
 800948e:	2300      	movs	r3, #0
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f000 fc46 	bl	8009d28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800949c:	697a      	ldr	r2, [r7, #20]
 800949e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 fad6 	bl	8009a52 <I2C_WaitOnTXISFlagUntilTimeout>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d001      	beq.n	80094b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e07b      	b.n	80095a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b4:	781a      	ldrb	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	1c5a      	adds	r2, r3, #1
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	3b01      	subs	r3, #1
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094d8:	3b01      	subs	r3, #1
 80094da:	b29a      	uxth	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d034      	beq.n	8009554 <HAL_I2C_Mem_Write+0x1c8>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d130      	bne.n	8009554 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f8:	2200      	movs	r2, #0
 80094fa:	2180      	movs	r1, #128	; 0x80
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f000 fa59 	bl	80099b4 <I2C_WaitOnFlagUntilTimeout>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e04d      	b.n	80095a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009510:	b29b      	uxth	r3, r3
 8009512:	2bff      	cmp	r3, #255	; 0xff
 8009514:	d90e      	bls.n	8009534 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	22ff      	movs	r2, #255	; 0xff
 800951a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009520:	b2da      	uxtb	r2, r3
 8009522:	8979      	ldrh	r1, [r7, #10]
 8009524:	2300      	movs	r3, #0
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 fbfb 	bl	8009d28 <I2C_TransferConfig>
 8009532:	e00f      	b.n	8009554 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009538:	b29a      	uxth	r2, r3
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009542:	b2da      	uxtb	r2, r3
 8009544:	8979      	ldrh	r1, [r7, #10]
 8009546:	2300      	movs	r3, #0
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f000 fbea 	bl	8009d28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009558:	b29b      	uxth	r3, r3
 800955a:	2b00      	cmp	r3, #0
 800955c:	d19e      	bne.n	800949c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f000 fabc 	bl	8009ae0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e01a      	b.n	80095a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2220      	movs	r2, #32
 8009578:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	6859      	ldr	r1, [r3, #4]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	4b0a      	ldr	r3, [pc, #40]	; (80095b0 <HAL_I2C_Mem_Write+0x224>)
 8009586:	400b      	ands	r3, r1
 8009588:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2220      	movs	r2, #32
 800958e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	e000      	b.n	80095a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80095a6:	2302      	movs	r3, #2
  }
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	fe00e800 	.word	0xfe00e800

080095b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b088      	sub	sp, #32
 80095b8:	af02      	add	r7, sp, #8
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	4608      	mov	r0, r1
 80095be:	4611      	mov	r1, r2
 80095c0:	461a      	mov	r2, r3
 80095c2:	4603      	mov	r3, r0
 80095c4:	817b      	strh	r3, [r7, #10]
 80095c6:	460b      	mov	r3, r1
 80095c8:	813b      	strh	r3, [r7, #8]
 80095ca:	4613      	mov	r3, r2
 80095cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b20      	cmp	r3, #32
 80095d8:	f040 80fd 	bne.w	80097d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80095dc:	6a3b      	ldr	r3, [r7, #32]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d002      	beq.n	80095e8 <HAL_I2C_Mem_Read+0x34>
 80095e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d105      	bne.n	80095f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e0f1      	b.n	80097d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d101      	bne.n	8009602 <HAL_I2C_Mem_Read+0x4e>
 80095fe:	2302      	movs	r3, #2
 8009600:	e0ea      	b.n	80097d8 <HAL_I2C_Mem_Read+0x224>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800960a:	f7fa ff83 	bl	8004514 <HAL_GetTick>
 800960e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	2319      	movs	r3, #25
 8009616:	2201      	movs	r2, #1
 8009618:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 f9c9 	bl	80099b4 <I2C_WaitOnFlagUntilTimeout>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e0d5      	b.n	80097d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2222      	movs	r2, #34	; 0x22
 8009630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2240      	movs	r2, #64	; 0x40
 8009638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6a3a      	ldr	r2, [r7, #32]
 8009646:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800964c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009654:	88f8      	ldrh	r0, [r7, #6]
 8009656:	893a      	ldrh	r2, [r7, #8]
 8009658:	8979      	ldrh	r1, [r7, #10]
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	9301      	str	r3, [sp, #4]
 800965e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	4603      	mov	r3, r0
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f000 f92d 	bl	80098c4 <I2C_RequestMemoryRead>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d005      	beq.n	800967c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e0ad      	b.n	80097d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009680:	b29b      	uxth	r3, r3
 8009682:	2bff      	cmp	r3, #255	; 0xff
 8009684:	d90e      	bls.n	80096a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	22ff      	movs	r2, #255	; 0xff
 800968a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009690:	b2da      	uxtb	r2, r3
 8009692:	8979      	ldrh	r1, [r7, #10]
 8009694:	4b52      	ldr	r3, [pc, #328]	; (80097e0 <HAL_I2C_Mem_Read+0x22c>)
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f000 fb43 	bl	8009d28 <I2C_TransferConfig>
 80096a2:	e00f      	b.n	80096c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	8979      	ldrh	r1, [r7, #10]
 80096b6:	4b4a      	ldr	r3, [pc, #296]	; (80097e0 <HAL_I2C_Mem_Read+0x22c>)
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f000 fb32 	bl	8009d28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	2200      	movs	r2, #0
 80096cc:	2104      	movs	r1, #4
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f000 f970 	bl	80099b4 <I2C_WaitOnFlagUntilTimeout>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d001      	beq.n	80096de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	e07c      	b.n	80097d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e8:	b2d2      	uxtb	r2, r2
 80096ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096fa:	3b01      	subs	r3, #1
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009706:	b29b      	uxth	r3, r3
 8009708:	3b01      	subs	r3, #1
 800970a:	b29a      	uxth	r2, r3
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009714:	b29b      	uxth	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d034      	beq.n	8009784 <HAL_I2C_Mem_Read+0x1d0>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800971e:	2b00      	cmp	r3, #0
 8009720:	d130      	bne.n	8009784 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009728:	2200      	movs	r2, #0
 800972a:	2180      	movs	r1, #128	; 0x80
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 f941 	bl	80099b4 <I2C_WaitOnFlagUntilTimeout>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e04d      	b.n	80097d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009740:	b29b      	uxth	r3, r3
 8009742:	2bff      	cmp	r3, #255	; 0xff
 8009744:	d90e      	bls.n	8009764 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	22ff      	movs	r2, #255	; 0xff
 800974a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009750:	b2da      	uxtb	r2, r3
 8009752:	8979      	ldrh	r1, [r7, #10]
 8009754:	2300      	movs	r3, #0
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f000 fae3 	bl	8009d28 <I2C_TransferConfig>
 8009762:	e00f      	b.n	8009784 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009768:	b29a      	uxth	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009772:	b2da      	uxtb	r2, r3
 8009774:	8979      	ldrh	r1, [r7, #10]
 8009776:	2300      	movs	r3, #0
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f000 fad2 	bl	8009d28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009788:	b29b      	uxth	r3, r3
 800978a:	2b00      	cmp	r3, #0
 800978c:	d19a      	bne.n	80096c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f000 f9a4 	bl	8009ae0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	e01a      	b.n	80097d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2220      	movs	r2, #32
 80097a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	6859      	ldr	r1, [r3, #4]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	4b0b      	ldr	r3, [pc, #44]	; (80097e4 <HAL_I2C_Mem_Read+0x230>)
 80097b6:	400b      	ands	r3, r1
 80097b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2220      	movs	r2, #32
 80097be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	e000      	b.n	80097d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80097d6:	2302      	movs	r3, #2
  }
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3718      	adds	r7, #24
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	80002400 	.word	0x80002400
 80097e4:	fe00e800 	.word	0xfe00e800

080097e8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097f6:	b2db      	uxtb	r3, r3
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8009810:	4618      	mov	r0, r3
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af02      	add	r7, sp, #8
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	4608      	mov	r0, r1
 8009826:	4611      	mov	r1, r2
 8009828:	461a      	mov	r2, r3
 800982a:	4603      	mov	r3, r0
 800982c:	817b      	strh	r3, [r7, #10]
 800982e:	460b      	mov	r3, r1
 8009830:	813b      	strh	r3, [r7, #8]
 8009832:	4613      	mov	r3, r2
 8009834:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009836:	88fb      	ldrh	r3, [r7, #6]
 8009838:	b2da      	uxtb	r2, r3
 800983a:	8979      	ldrh	r1, [r7, #10]
 800983c:	4b20      	ldr	r3, [pc, #128]	; (80098c0 <I2C_RequestMemoryWrite+0xa4>)
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 fa6f 	bl	8009d28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800984a:	69fa      	ldr	r2, [r7, #28]
 800984c:	69b9      	ldr	r1, [r7, #24]
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f000 f8ff 	bl	8009a52 <I2C_WaitOnTXISFlagUntilTimeout>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e02c      	b.n	80098b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800985e:	88fb      	ldrh	r3, [r7, #6]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d105      	bne.n	8009870 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009864:	893b      	ldrh	r3, [r7, #8]
 8009866:	b2da      	uxtb	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	629a      	str	r2, [r3, #40]	; 0x28
 800986e:	e015      	b.n	800989c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009870:	893b      	ldrh	r3, [r7, #8]
 8009872:	0a1b      	lsrs	r3, r3, #8
 8009874:	b29b      	uxth	r3, r3
 8009876:	b2da      	uxtb	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800987e:	69fa      	ldr	r2, [r7, #28]
 8009880:	69b9      	ldr	r1, [r7, #24]
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	f000 f8e5 	bl	8009a52 <I2C_WaitOnTXISFlagUntilTimeout>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e012      	b.n	80098b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009892:	893b      	ldrh	r3, [r7, #8]
 8009894:	b2da      	uxtb	r2, r3
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	2200      	movs	r2, #0
 80098a4:	2180      	movs	r1, #128	; 0x80
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f000 f884 	bl	80099b4 <I2C_WaitOnFlagUntilTimeout>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e000      	b.n	80098b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3710      	adds	r7, #16
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	80002000 	.word	0x80002000

080098c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af02      	add	r7, sp, #8
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	4608      	mov	r0, r1
 80098ce:	4611      	mov	r1, r2
 80098d0:	461a      	mov	r2, r3
 80098d2:	4603      	mov	r3, r0
 80098d4:	817b      	strh	r3, [r7, #10]
 80098d6:	460b      	mov	r3, r1
 80098d8:	813b      	strh	r3, [r7, #8]
 80098da:	4613      	mov	r3, r2
 80098dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80098de:	88fb      	ldrh	r3, [r7, #6]
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	8979      	ldrh	r1, [r7, #10]
 80098e4:	4b20      	ldr	r3, [pc, #128]	; (8009968 <I2C_RequestMemoryRead+0xa4>)
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	2300      	movs	r3, #0
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 fa1c 	bl	8009d28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098f0:	69fa      	ldr	r2, [r7, #28]
 80098f2:	69b9      	ldr	r1, [r7, #24]
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f000 f8ac 	bl	8009a52 <I2C_WaitOnTXISFlagUntilTimeout>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d001      	beq.n	8009904 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	e02c      	b.n	800995e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009904:	88fb      	ldrh	r3, [r7, #6]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d105      	bne.n	8009916 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800990a:	893b      	ldrh	r3, [r7, #8]
 800990c:	b2da      	uxtb	r2, r3
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	629a      	str	r2, [r3, #40]	; 0x28
 8009914:	e015      	b.n	8009942 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009916:	893b      	ldrh	r3, [r7, #8]
 8009918:	0a1b      	lsrs	r3, r3, #8
 800991a:	b29b      	uxth	r3, r3
 800991c:	b2da      	uxtb	r2, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009924:	69fa      	ldr	r2, [r7, #28]
 8009926:	69b9      	ldr	r1, [r7, #24]
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f000 f892 	bl	8009a52 <I2C_WaitOnTXISFlagUntilTimeout>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	e012      	b.n	800995e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009938:	893b      	ldrh	r3, [r7, #8]
 800993a:	b2da      	uxtb	r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	2200      	movs	r2, #0
 800994a:	2140      	movs	r1, #64	; 0x40
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f000 f831 	bl	80099b4 <I2C_WaitOnFlagUntilTimeout>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	e000      	b.n	800995e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	80002000 	.word	0x80002000

0800996c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	f003 0302 	and.w	r3, r3, #2
 800997e:	2b02      	cmp	r3, #2
 8009980:	d103      	bne.n	800998a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2200      	movs	r2, #0
 8009988:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	f003 0301 	and.w	r3, r3, #1
 8009994:	2b01      	cmp	r3, #1
 8009996:	d007      	beq.n	80099a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	699a      	ldr	r2, [r3, #24]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f042 0201 	orr.w	r2, r2, #1
 80099a6:	619a      	str	r2, [r3, #24]
  }
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	603b      	str	r3, [r7, #0]
 80099c0:	4613      	mov	r3, r2
 80099c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099c4:	e031      	b.n	8009a2a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099cc:	d02d      	beq.n	8009a2a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099ce:	f7fa fda1 	bl	8004514 <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d302      	bcc.n	80099e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d122      	bne.n	8009a2a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	699a      	ldr	r2, [r3, #24]
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	4013      	ands	r3, r2
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	bf0c      	ite	eq
 80099f4:	2301      	moveq	r3, #1
 80099f6:	2300      	movne	r3, #0
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	461a      	mov	r2, r3
 80099fc:	79fb      	ldrb	r3, [r7, #7]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d113      	bne.n	8009a2a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a06:	f043 0220 	orr.w	r2, r3, #32
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2220      	movs	r2, #32
 8009a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e00f      	b.n	8009a4a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	699a      	ldr	r2, [r3, #24]
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	4013      	ands	r3, r2
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	bf0c      	ite	eq
 8009a3a:	2301      	moveq	r3, #1
 8009a3c:	2300      	movne	r3, #0
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	461a      	mov	r2, r3
 8009a42:	79fb      	ldrb	r3, [r7, #7]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d0be      	beq.n	80099c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b084      	sub	sp, #16
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	60f8      	str	r0, [r7, #12]
 8009a5a:	60b9      	str	r1, [r7, #8]
 8009a5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a5e:	e033      	b.n	8009ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	68b9      	ldr	r1, [r7, #8]
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f000 f87f 	bl	8009b68 <I2C_IsErrorOccurred>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	e031      	b.n	8009ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a7a:	d025      	beq.n	8009ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a7c:	f7fa fd4a 	bl	8004514 <HAL_GetTick>
 8009a80:	4602      	mov	r2, r0
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d302      	bcc.n	8009a92 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d11a      	bne.n	8009ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	f003 0302 	and.w	r3, r3, #2
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d013      	beq.n	8009ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aa4:	f043 0220 	orr.w	r2, r3, #32
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2220      	movs	r2, #32
 8009ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e007      	b.n	8009ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	f003 0302 	and.w	r3, r3, #2
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d1c4      	bne.n	8009a60 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009aec:	e02f      	b.n	8009b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	68b9      	ldr	r1, [r7, #8]
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f000 f838 	bl	8009b68 <I2C_IsErrorOccurred>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d001      	beq.n	8009b02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e02d      	b.n	8009b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b02:	f7fa fd07 	bl	8004514 <HAL_GetTick>
 8009b06:	4602      	mov	r2, r0
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	1ad3      	subs	r3, r2, r3
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d302      	bcc.n	8009b18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d11a      	bne.n	8009b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	f003 0320 	and.w	r3, r3, #32
 8009b22:	2b20      	cmp	r3, #32
 8009b24:	d013      	beq.n	8009b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b2a:	f043 0220 	orr.w	r2, r3, #32
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2220      	movs	r2, #32
 8009b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e007      	b.n	8009b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	f003 0320 	and.w	r3, r3, #32
 8009b58:	2b20      	cmp	r3, #32
 8009b5a:	d1c8      	bne.n	8009aee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
	...

08009b68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08a      	sub	sp, #40	; 0x28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	f003 0310 	and.w	r3, r3, #16
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d068      	beq.n	8009c66 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2210      	movs	r2, #16
 8009b9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b9c:	e049      	b.n	8009c32 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba4:	d045      	beq.n	8009c32 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009ba6:	f7fa fcb5 	bl	8004514 <HAL_GetTick>
 8009baa:	4602      	mov	r2, r0
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d302      	bcc.n	8009bbc <I2C_IsErrorOccurred+0x54>
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d13a      	bne.n	8009c32 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009bce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	699b      	ldr	r3, [r3, #24]
 8009bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bde:	d121      	bne.n	8009c24 <I2C_IsErrorOccurred+0xbc>
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009be6:	d01d      	beq.n	8009c24 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009be8:	7cfb      	ldrb	r3, [r7, #19]
 8009bea:	2b20      	cmp	r3, #32
 8009bec:	d01a      	beq.n	8009c24 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	685a      	ldr	r2, [r3, #4]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bfc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009bfe:	f7fa fc89 	bl	8004514 <HAL_GetTick>
 8009c02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c04:	e00e      	b.n	8009c24 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009c06:	f7fa fc85 	bl	8004514 <HAL_GetTick>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	2b19      	cmp	r3, #25
 8009c12:	d907      	bls.n	8009c24 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	f043 0320 	orr.w	r3, r3, #32
 8009c1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009c22:	e006      	b.n	8009c32 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	f003 0320 	and.w	r3, r3, #32
 8009c2e:	2b20      	cmp	r3, #32
 8009c30:	d1e9      	bne.n	8009c06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	699b      	ldr	r3, [r3, #24]
 8009c38:	f003 0320 	and.w	r3, r3, #32
 8009c3c:	2b20      	cmp	r3, #32
 8009c3e:	d003      	beq.n	8009c48 <I2C_IsErrorOccurred+0xe0>
 8009c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d0aa      	beq.n	8009b9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d103      	bne.n	8009c58 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2220      	movs	r2, #32
 8009c56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009c58:	6a3b      	ldr	r3, [r7, #32]
 8009c5a:	f043 0304 	orr.w	r3, r3, #4
 8009c5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00b      	beq.n	8009c90 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009c78:	6a3b      	ldr	r3, [r7, #32]
 8009c7a:	f043 0301 	orr.w	r3, r3, #1
 8009c7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00b      	beq.n	8009cb2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009c9a:	6a3b      	ldr	r3, [r7, #32]
 8009c9c:	f043 0308 	orr.w	r3, r3, #8
 8009ca0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009caa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00b      	beq.n	8009cd4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009cbc:	6a3b      	ldr	r3, [r7, #32]
 8009cbe:	f043 0302 	orr.w	r3, r3, #2
 8009cc2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ccc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d01c      	beq.n	8009d16 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f7ff fe45 	bl	800996c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6859      	ldr	r1, [r3, #4]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	4b0d      	ldr	r3, [pc, #52]	; (8009d24 <I2C_IsErrorOccurred+0x1bc>)
 8009cee:	400b      	ands	r3, r1
 8009cf0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cf6:	6a3b      	ldr	r3, [r7, #32]
 8009cf8:	431a      	orrs	r2, r3
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2220      	movs	r2, #32
 8009d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3728      	adds	r7, #40	; 0x28
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	fe00e800 	.word	0xfe00e800

08009d28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	607b      	str	r3, [r7, #4]
 8009d32:	460b      	mov	r3, r1
 8009d34:	817b      	strh	r3, [r7, #10]
 8009d36:	4613      	mov	r3, r2
 8009d38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d3a:	897b      	ldrh	r3, [r7, #10]
 8009d3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d40:	7a7b      	ldrb	r3, [r7, #9]
 8009d42:	041b      	lsls	r3, r3, #16
 8009d44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d48:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d4e:	6a3b      	ldr	r3, [r7, #32]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d56:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	685a      	ldr	r2, [r3, #4]
 8009d5e:	6a3b      	ldr	r3, [r7, #32]
 8009d60:	0d5b      	lsrs	r3, r3, #21
 8009d62:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009d66:	4b08      	ldr	r3, [pc, #32]	; (8009d88 <I2C_TransferConfig+0x60>)
 8009d68:	430b      	orrs	r3, r1
 8009d6a:	43db      	mvns	r3, r3
 8009d6c:	ea02 0103 	and.w	r1, r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	697a      	ldr	r2, [r7, #20]
 8009d76:	430a      	orrs	r2, r1
 8009d78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009d7a:	bf00      	nop
 8009d7c:	371c      	adds	r7, #28
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	03ff63ff 	.word	0x03ff63ff

08009d8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b20      	cmp	r3, #32
 8009da0:	d138      	bne.n	8009e14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d101      	bne.n	8009db0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009dac:	2302      	movs	r3, #2
 8009dae:	e032      	b.n	8009e16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2224      	movs	r2, #36	; 0x24
 8009dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f022 0201 	bic.w	r2, r2, #1
 8009dce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009dde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6819      	ldr	r1, [r3, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	683a      	ldr	r2, [r7, #0]
 8009dec:	430a      	orrs	r2, r1
 8009dee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f042 0201 	orr.w	r2, r2, #1
 8009dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2220      	movs	r2, #32
 8009e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e10:	2300      	movs	r3, #0
 8009e12:	e000      	b.n	8009e16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009e14:	2302      	movs	r3, #2
  }
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b085      	sub	sp, #20
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	2b20      	cmp	r3, #32
 8009e36:	d139      	bne.n	8009eac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d101      	bne.n	8009e46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009e42:	2302      	movs	r3, #2
 8009e44:	e033      	b.n	8009eae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2224      	movs	r2, #36	; 0x24
 8009e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f022 0201 	bic.w	r2, r2, #1
 8009e64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009e74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	021b      	lsls	r3, r3, #8
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f042 0201 	orr.w	r2, r2, #1
 8009e96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2220      	movs	r2, #32
 8009e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	e000      	b.n	8009eae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009eac:	2302      	movs	r3, #2
  }
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
	...

08009ebc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d101      	bne.n	8009ece <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e0bf      	b.n	800a04e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d106      	bne.n	8009ee8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7f7 fa2a 	bl	800133c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2202      	movs	r2, #2
 8009eec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	699a      	ldr	r2, [r3, #24]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009efe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	6999      	ldr	r1, [r3, #24]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685a      	ldr	r2, [r3, #4]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009f14:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	430a      	orrs	r2, r1
 8009f22:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	6899      	ldr	r1, [r3, #8]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	4b4a      	ldr	r3, [pc, #296]	; (800a058 <HAL_LTDC_Init+0x19c>)
 8009f30:	400b      	ands	r3, r1
 8009f32:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	695b      	ldr	r3, [r3, #20]
 8009f38:	041b      	lsls	r3, r3, #16
 8009f3a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6899      	ldr	r1, [r3, #8]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	699a      	ldr	r2, [r3, #24]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	431a      	orrs	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68d9      	ldr	r1, [r3, #12]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	4b3e      	ldr	r3, [pc, #248]	; (800a058 <HAL_LTDC_Init+0x19c>)
 8009f5e:	400b      	ands	r3, r1
 8009f60:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	69db      	ldr	r3, [r3, #28]
 8009f66:	041b      	lsls	r3, r3, #16
 8009f68:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	68d9      	ldr	r1, [r3, #12]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a1a      	ldr	r2, [r3, #32]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	431a      	orrs	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6919      	ldr	r1, [r3, #16]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	4b33      	ldr	r3, [pc, #204]	; (800a058 <HAL_LTDC_Init+0x19c>)
 8009f8c:	400b      	ands	r3, r1
 8009f8e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f94:	041b      	lsls	r3, r3, #16
 8009f96:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	6919      	ldr	r1, [r3, #16]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	431a      	orrs	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	430a      	orrs	r2, r1
 8009fac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	6959      	ldr	r1, [r3, #20]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	4b27      	ldr	r3, [pc, #156]	; (800a058 <HAL_LTDC_Init+0x19c>)
 8009fba:	400b      	ands	r3, r1
 8009fbc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc2:	041b      	lsls	r3, r3, #16
 8009fc4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	6959      	ldr	r1, [r3, #20]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	431a      	orrs	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	430a      	orrs	r2, r1
 8009fda:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009fe2:	021b      	lsls	r3, r3, #8
 8009fe4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009fec:	041b      	lsls	r3, r3, #16
 8009fee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a006:	68ba      	ldr	r2, [r7, #8]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800a012:	431a      	orrs	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	430a      	orrs	r2, r1
 800a01a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f042 0206 	orr.w	r2, r2, #6
 800a02a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	699a      	ldr	r2, [r3, #24]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f042 0201 	orr.w	r2, r2, #1
 800a03a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	f000f800 	.word	0xf000f800

0800a05c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a06a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a072:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f003 0304 	and.w	r3, r3, #4
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d023      	beq.n	800a0c6 <HAL_LTDC_IRQHandler+0x6a>
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f003 0304 	and.w	r3, r3, #4
 800a084:	2b00      	cmp	r3, #0
 800a086:	d01e      	beq.n	800a0c6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f022 0204 	bic.w	r2, r2, #4
 800a096:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2204      	movs	r2, #4
 800a09e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a0a6:	f043 0201 	orr.w	r2, r3, #1
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2204      	movs	r2, #4
 800a0b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f86f 	bl	800a1a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f003 0302 	and.w	r3, r3, #2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d023      	beq.n	800a118 <HAL_LTDC_IRQHandler+0xbc>
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	f003 0302 	and.w	r3, r3, #2
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d01e      	beq.n	800a118 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f022 0202 	bic.w	r2, r2, #2
 800a0e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a0f8:	f043 0202 	orr.w	r2, r3, #2
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2204      	movs	r2, #4
 800a106:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f846 	bl	800a1a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f003 0301 	and.w	r3, r3, #1
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d01b      	beq.n	800a15a <HAL_LTDC_IRQHandler+0xfe>
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	f003 0301 	and.w	r3, r3, #1
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d016      	beq.n	800a15a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f022 0201 	bic.w	r2, r2, #1
 800a13a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2201      	movs	r2, #1
 800a142:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f82f 	bl	800a1b8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f003 0308 	and.w	r3, r3, #8
 800a160:	2b00      	cmp	r3, #0
 800a162:	d01b      	beq.n	800a19c <HAL_LTDC_IRQHandler+0x140>
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	f003 0308 	and.w	r3, r3, #8
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d016      	beq.n	800a19c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f022 0208 	bic.w	r2, r2, #8
 800a17c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2208      	movs	r2, #8
 800a184:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2201      	movs	r2, #1
 800a18a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f818 	bl	800a1cc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a19c:	bf00      	nop
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a1e0:	b5b0      	push	{r4, r5, r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d101      	bne.n	800a1fa <HAL_LTDC_ConfigLayer+0x1a>
 800a1f6:	2302      	movs	r3, #2
 800a1f8:	e02c      	b.n	800a254 <HAL_LTDC_ConfigLayer+0x74>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2202      	movs	r2, #2
 800a206:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2134      	movs	r1, #52	; 0x34
 800a210:	fb01 f303 	mul.w	r3, r1, r3
 800a214:	4413      	add	r3, r2
 800a216:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	4614      	mov	r4, r2
 800a21e:	461d      	mov	r5, r3
 800a220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a22a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a22c:	682b      	ldr	r3, [r5, #0]
 800a22e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	68b9      	ldr	r1, [r7, #8]
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 f811 	bl	800a25c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2201      	movs	r2, #1
 800a240:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bdb0      	pop	{r4, r5, r7, pc}

0800a25c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b089      	sub	sp, #36	; 0x24
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	0c1b      	lsrs	r3, r3, #16
 800a274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a278:	4413      	add	r3, r2
 800a27a:	041b      	lsls	r3, r3, #16
 800a27c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	461a      	mov	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	01db      	lsls	r3, r3, #7
 800a288:	4413      	add	r3, r2
 800a28a:	3384      	adds	r3, #132	; 0x84
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	6812      	ldr	r2, [r2, #0]
 800a292:	4611      	mov	r1, r2
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	01d2      	lsls	r2, r2, #7
 800a298:	440a      	add	r2, r1
 800a29a:	3284      	adds	r2, #132	; 0x84
 800a29c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a2a0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	0c1b      	lsrs	r3, r3, #16
 800a2ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a2b2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a2b4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	01db      	lsls	r3, r3, #7
 800a2c0:	440b      	add	r3, r1
 800a2c2:	3384      	adds	r3, #132	; 0x84
 800a2c4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a2ca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	68da      	ldr	r2, [r3, #12]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2da:	4413      	add	r3, r2
 800a2dc:	041b      	lsls	r3, r3, #16
 800a2de:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	01db      	lsls	r3, r3, #7
 800a2ea:	4413      	add	r3, r2
 800a2ec:	3384      	adds	r3, #132	; 0x84
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	6812      	ldr	r2, [r2, #0]
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	01d2      	lsls	r2, r2, #7
 800a2fa:	440a      	add	r2, r1
 800a2fc:	3284      	adds	r2, #132	; 0x84
 800a2fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a302:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	689a      	ldr	r2, [r3, #8]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a312:	4413      	add	r3, r2
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4619      	mov	r1, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	01db      	lsls	r3, r3, #7
 800a320:	440b      	add	r3, r1
 800a322:	3384      	adds	r3, #132	; 0x84
 800a324:	4619      	mov	r1, r3
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	4313      	orrs	r3, r2
 800a32a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	461a      	mov	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	01db      	lsls	r3, r3, #7
 800a336:	4413      	add	r3, r2
 800a338:	3384      	adds	r3, #132	; 0x84
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	6812      	ldr	r2, [r2, #0]
 800a340:	4611      	mov	r1, r2
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	01d2      	lsls	r2, r2, #7
 800a346:	440a      	add	r2, r1
 800a348:	3284      	adds	r2, #132	; 0x84
 800a34a:	f023 0307 	bic.w	r3, r3, #7
 800a34e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	461a      	mov	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	01db      	lsls	r3, r3, #7
 800a35a:	4413      	add	r3, r2
 800a35c:	3384      	adds	r3, #132	; 0x84
 800a35e:	461a      	mov	r2, r3
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a36c:	021b      	lsls	r3, r3, #8
 800a36e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a376:	041b      	lsls	r3, r3, #16
 800a378:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	061b      	lsls	r3, r3, #24
 800a380:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	461a      	mov	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	01db      	lsls	r3, r3, #7
 800a38c:	4413      	add	r3, r2
 800a38e:	3384      	adds	r3, #132	; 0x84
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	01db      	lsls	r3, r3, #7
 800a39c:	4413      	add	r3, r2
 800a39e:	3384      	adds	r3, #132	; 0x84
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	431a      	orrs	r2, r3
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	431a      	orrs	r2, r3
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	01db      	lsls	r3, r3, #7
 800a3c0:	440b      	add	r3, r1
 800a3c2:	3384      	adds	r3, #132	; 0x84
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	01db      	lsls	r3, r3, #7
 800a3d6:	4413      	add	r3, r2
 800a3d8:	3384      	adds	r3, #132	; 0x84
 800a3da:	695b      	ldr	r3, [r3, #20]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	6812      	ldr	r2, [r2, #0]
 800a3e0:	4611      	mov	r1, r2
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	01d2      	lsls	r2, r2, #7
 800a3e6:	440a      	add	r2, r1
 800a3e8:	3284      	adds	r2, #132	; 0x84
 800a3ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a3ee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	01db      	lsls	r3, r3, #7
 800a3fa:	4413      	add	r3, r2
 800a3fc:	3384      	adds	r3, #132	; 0x84
 800a3fe:	461a      	mov	r2, r3
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	695b      	ldr	r3, [r3, #20]
 800a404:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	461a      	mov	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	01db      	lsls	r3, r3, #7
 800a410:	4413      	add	r3, r2
 800a412:	3384      	adds	r3, #132	; 0x84
 800a414:	69da      	ldr	r2, [r3, #28]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4619      	mov	r1, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	01db      	lsls	r3, r3, #7
 800a420:	440b      	add	r3, r1
 800a422:	3384      	adds	r3, #132	; 0x84
 800a424:	4619      	mov	r1, r3
 800a426:	4b58      	ldr	r3, [pc, #352]	; (800a588 <LTDC_SetConfig+0x32c>)
 800a428:	4013      	ands	r3, r2
 800a42a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	69da      	ldr	r2, [r3, #28]
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	68f9      	ldr	r1, [r7, #12]
 800a436:	6809      	ldr	r1, [r1, #0]
 800a438:	4608      	mov	r0, r1
 800a43a:	6879      	ldr	r1, [r7, #4]
 800a43c:	01c9      	lsls	r1, r1, #7
 800a43e:	4401      	add	r1, r0
 800a440:	3184      	adds	r1, #132	; 0x84
 800a442:	4313      	orrs	r3, r2
 800a444:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	461a      	mov	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	01db      	lsls	r3, r3, #7
 800a450:	4413      	add	r3, r2
 800a452:	3384      	adds	r3, #132	; 0x84
 800a454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	461a      	mov	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	01db      	lsls	r3, r3, #7
 800a460:	4413      	add	r3, r2
 800a462:	3384      	adds	r3, #132	; 0x84
 800a464:	461a      	mov	r2, r3
 800a466:	2300      	movs	r3, #0
 800a468:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	461a      	mov	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	01db      	lsls	r3, r3, #7
 800a474:	4413      	add	r3, r2
 800a476:	3384      	adds	r3, #132	; 0x84
 800a478:	461a      	mov	r2, r3
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d102      	bne.n	800a48e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a488:	2304      	movs	r3, #4
 800a48a:	61fb      	str	r3, [r7, #28]
 800a48c:	e01b      	b.n	800a4c6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	2b01      	cmp	r3, #1
 800a494:	d102      	bne.n	800a49c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a496:	2303      	movs	r3, #3
 800a498:	61fb      	str	r3, [r7, #28]
 800a49a:	e014      	b.n	800a4c6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	2b04      	cmp	r3, #4
 800a4a2:	d00b      	beq.n	800a4bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d007      	beq.n	800a4bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d003      	beq.n	800a4bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a4b8:	2b07      	cmp	r3, #7
 800a4ba:	d102      	bne.n	800a4c2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a4bc:	2302      	movs	r3, #2
 800a4be:	61fb      	str	r3, [r7, #28]
 800a4c0:	e001      	b.n	800a4c6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	01db      	lsls	r3, r3, #7
 800a4d0:	4413      	add	r3, r2
 800a4d2:	3384      	adds	r3, #132	; 0x84
 800a4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	6812      	ldr	r2, [r2, #0]
 800a4da:	4611      	mov	r1, r2
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	01d2      	lsls	r2, r2, #7
 800a4e0:	440a      	add	r2, r1
 800a4e2:	3284      	adds	r2, #132	; 0x84
 800a4e4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a4e8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ee:	69fa      	ldr	r2, [r7, #28]
 800a4f0:	fb02 f303 	mul.w	r3, r2, r3
 800a4f4:	041a      	lsls	r2, r3, #16
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	6859      	ldr	r1, [r3, #4]
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	1acb      	subs	r3, r1, r3
 800a500:	69f9      	ldr	r1, [r7, #28]
 800a502:	fb01 f303 	mul.w	r3, r1, r3
 800a506:	3307      	adds	r3, #7
 800a508:	68f9      	ldr	r1, [r7, #12]
 800a50a:	6809      	ldr	r1, [r1, #0]
 800a50c:	4608      	mov	r0, r1
 800a50e:	6879      	ldr	r1, [r7, #4]
 800a510:	01c9      	lsls	r1, r1, #7
 800a512:	4401      	add	r1, r0
 800a514:	3184      	adds	r1, #132	; 0x84
 800a516:	4313      	orrs	r3, r2
 800a518:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	461a      	mov	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	01db      	lsls	r3, r3, #7
 800a524:	4413      	add	r3, r2
 800a526:	3384      	adds	r3, #132	; 0x84
 800a528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4619      	mov	r1, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	01db      	lsls	r3, r3, #7
 800a534:	440b      	add	r3, r1
 800a536:	3384      	adds	r3, #132	; 0x84
 800a538:	4619      	mov	r1, r3
 800a53a:	4b14      	ldr	r3, [pc, #80]	; (800a58c <LTDC_SetConfig+0x330>)
 800a53c:	4013      	ands	r3, r2
 800a53e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	461a      	mov	r2, r3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	01db      	lsls	r3, r3, #7
 800a54a:	4413      	add	r3, r2
 800a54c:	3384      	adds	r3, #132	; 0x84
 800a54e:	461a      	mov	r2, r3
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a554:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	01db      	lsls	r3, r3, #7
 800a560:	4413      	add	r3, r2
 800a562:	3384      	adds	r3, #132	; 0x84
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	6812      	ldr	r2, [r2, #0]
 800a56a:	4611      	mov	r1, r2
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	01d2      	lsls	r2, r2, #7
 800a570:	440a      	add	r2, r1
 800a572:	3284      	adds	r2, #132	; 0x84
 800a574:	f043 0301 	orr.w	r3, r3, #1
 800a578:	6013      	str	r3, [r2, #0]
}
 800a57a:	bf00      	nop
 800a57c:	3724      	adds	r7, #36	; 0x24
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	fffff8f8 	.word	0xfffff8f8
 800a58c:	fffff800 	.word	0xfffff800

0800a590 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800a590:	b480      	push	{r7}
 800a592:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800a594:	4b05      	ldr	r3, [pc, #20]	; (800a5ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a04      	ldr	r2, [pc, #16]	; (800a5ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a59a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a59e:	6013      	str	r3, [r2, #0]
}
 800a5a0:	bf00      	nop
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	58024800 	.word	0x58024800

0800a5b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a5b8:	4b29      	ldr	r3, [pc, #164]	; (800a660 <HAL_PWREx_ConfigSupply+0xb0>)
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	f003 0307 	and.w	r3, r3, #7
 800a5c0:	2b06      	cmp	r3, #6
 800a5c2:	d00a      	beq.n	800a5da <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a5c4:	4b26      	ldr	r3, [pc, #152]	; (800a660 <HAL_PWREx_ConfigSupply+0xb0>)
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d001      	beq.n	800a5d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e040      	b.n	800a658 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	e03e      	b.n	800a658 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a5da:	4b21      	ldr	r3, [pc, #132]	; (800a660 <HAL_PWREx_ConfigSupply+0xb0>)
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800a5e2:	491f      	ldr	r1, [pc, #124]	; (800a660 <HAL_PWREx_ConfigSupply+0xb0>)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a5ea:	f7f9 ff93 	bl	8004514 <HAL_GetTick>
 800a5ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a5f0:	e009      	b.n	800a606 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a5f2:	f7f9 ff8f 	bl	8004514 <HAL_GetTick>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	1ad3      	subs	r3, r2, r3
 800a5fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a600:	d901      	bls.n	800a606 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	e028      	b.n	800a658 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a606:	4b16      	ldr	r3, [pc, #88]	; (800a660 <HAL_PWREx_ConfigSupply+0xb0>)
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a60e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a612:	d1ee      	bne.n	800a5f2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b1e      	cmp	r3, #30
 800a618:	d008      	beq.n	800a62c <HAL_PWREx_ConfigSupply+0x7c>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2b2e      	cmp	r3, #46	; 0x2e
 800a61e:	d005      	beq.n	800a62c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2b1d      	cmp	r3, #29
 800a624:	d002      	beq.n	800a62c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b2d      	cmp	r3, #45	; 0x2d
 800a62a:	d114      	bne.n	800a656 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a62c:	f7f9 ff72 	bl	8004514 <HAL_GetTick>
 800a630:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a632:	e009      	b.n	800a648 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a634:	f7f9 ff6e 	bl	8004514 <HAL_GetTick>
 800a638:	4602      	mov	r2, r0
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a642:	d901      	bls.n	800a648 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e007      	b.n	800a658 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a648:	4b05      	ldr	r3, [pc, #20]	; (800a660 <HAL_PWREx_ConfigSupply+0xb0>)
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a654:	d1ee      	bne.n	800a634 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	58024800 	.word	0x58024800

0800a664 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08c      	sub	sp, #48	; 0x30
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d102      	bne.n	800a678 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	f000 bc1f 	b.w	800aeb6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0301 	and.w	r3, r3, #1
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 80b3 	beq.w	800a7ec <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a686:	4b95      	ldr	r3, [pc, #596]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a68e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a690:	4b92      	ldr	r3, [pc, #584]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a694:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a698:	2b10      	cmp	r3, #16
 800a69a:	d007      	beq.n	800a6ac <HAL_RCC_OscConfig+0x48>
 800a69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69e:	2b18      	cmp	r3, #24
 800a6a0:	d112      	bne.n	800a6c8 <HAL_RCC_OscConfig+0x64>
 800a6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a4:	f003 0303 	and.w	r3, r3, #3
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d10d      	bne.n	800a6c8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6ac:	4b8b      	ldr	r3, [pc, #556]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f000 8098 	beq.w	800a7ea <HAL_RCC_OscConfig+0x186>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f040 8093 	bne.w	800a7ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e3f6      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6d0:	d106      	bne.n	800a6e0 <HAL_RCC_OscConfig+0x7c>
 800a6d2:	4b82      	ldr	r3, [pc, #520]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a81      	ldr	r2, [pc, #516]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a6d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6dc:	6013      	str	r3, [r2, #0]
 800a6de:	e058      	b.n	800a792 <HAL_RCC_OscConfig+0x12e>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d112      	bne.n	800a70e <HAL_RCC_OscConfig+0xaa>
 800a6e8:	4b7c      	ldr	r3, [pc, #496]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a7b      	ldr	r2, [pc, #492]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a6ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6f2:	6013      	str	r3, [r2, #0]
 800a6f4:	4b79      	ldr	r3, [pc, #484]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a78      	ldr	r2, [pc, #480]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a6fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a6fe:	6013      	str	r3, [r2, #0]
 800a700:	4b76      	ldr	r3, [pc, #472]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a75      	ldr	r2, [pc, #468]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a70a:	6013      	str	r3, [r2, #0]
 800a70c:	e041      	b.n	800a792 <HAL_RCC_OscConfig+0x12e>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a716:	d112      	bne.n	800a73e <HAL_RCC_OscConfig+0xda>
 800a718:	4b70      	ldr	r3, [pc, #448]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a6f      	ldr	r2, [pc, #444]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a71e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a722:	6013      	str	r3, [r2, #0]
 800a724:	4b6d      	ldr	r3, [pc, #436]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a6c      	ldr	r2, [pc, #432]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a72a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a72e:	6013      	str	r3, [r2, #0]
 800a730:	4b6a      	ldr	r3, [pc, #424]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a69      	ldr	r2, [pc, #420]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a73a:	6013      	str	r3, [r2, #0]
 800a73c:	e029      	b.n	800a792 <HAL_RCC_OscConfig+0x12e>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a746:	d112      	bne.n	800a76e <HAL_RCC_OscConfig+0x10a>
 800a748:	4b64      	ldr	r3, [pc, #400]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a63      	ldr	r2, [pc, #396]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a74e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a752:	6013      	str	r3, [r2, #0]
 800a754:	4b61      	ldr	r3, [pc, #388]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a60      	ldr	r2, [pc, #384]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a75a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a75e:	6013      	str	r3, [r2, #0]
 800a760:	4b5e      	ldr	r3, [pc, #376]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a5d      	ldr	r2, [pc, #372]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a76a:	6013      	str	r3, [r2, #0]
 800a76c:	e011      	b.n	800a792 <HAL_RCC_OscConfig+0x12e>
 800a76e:	4b5b      	ldr	r3, [pc, #364]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a5a      	ldr	r2, [pc, #360]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a778:	6013      	str	r3, [r2, #0]
 800a77a:	4b58      	ldr	r3, [pc, #352]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a57      	ldr	r2, [pc, #348]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a784:	6013      	str	r3, [r2, #0]
 800a786:	4b55      	ldr	r3, [pc, #340]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a54      	ldr	r2, [pc, #336]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a78c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a790:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d013      	beq.n	800a7c2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a79a:	f7f9 febb 	bl	8004514 <HAL_GetTick>
 800a79e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7a0:	e008      	b.n	800a7b4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7a2:	f7f9 feb7 	bl	8004514 <HAL_GetTick>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7aa:	1ad3      	subs	r3, r2, r3
 800a7ac:	2b64      	cmp	r3, #100	; 0x64
 800a7ae:	d901      	bls.n	800a7b4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	e380      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7b4:	4b49      	ldr	r3, [pc, #292]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d0f0      	beq.n	800a7a2 <HAL_RCC_OscConfig+0x13e>
 800a7c0:	e014      	b.n	800a7ec <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7c2:	f7f9 fea7 	bl	8004514 <HAL_GetTick>
 800a7c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a7c8:	e008      	b.n	800a7dc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7ca:	f7f9 fea3 	bl	8004514 <HAL_GetTick>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	2b64      	cmp	r3, #100	; 0x64
 800a7d6:	d901      	bls.n	800a7dc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a7d8:	2303      	movs	r3, #3
 800a7da:	e36c      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a7dc:	4b3f      	ldr	r3, [pc, #252]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d1f0      	bne.n	800a7ca <HAL_RCC_OscConfig+0x166>
 800a7e8:	e000      	b.n	800a7ec <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 0302 	and.w	r3, r3, #2
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 808c 	beq.w	800a912 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7fa:	4b38      	ldr	r3, [pc, #224]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a802:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a804:	4b35      	ldr	r3, [pc, #212]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a808:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a80a:	6a3b      	ldr	r3, [r7, #32]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d007      	beq.n	800a820 <HAL_RCC_OscConfig+0x1bc>
 800a810:	6a3b      	ldr	r3, [r7, #32]
 800a812:	2b18      	cmp	r3, #24
 800a814:	d137      	bne.n	800a886 <HAL_RCC_OscConfig+0x222>
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	f003 0303 	and.w	r3, r3, #3
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d132      	bne.n	800a886 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a820:	4b2e      	ldr	r3, [pc, #184]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 0304 	and.w	r3, r3, #4
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d005      	beq.n	800a838 <HAL_RCC_OscConfig+0x1d4>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e33e      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a838:	4b28      	ldr	r3, [pc, #160]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f023 0219 	bic.w	r2, r3, #25
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	4925      	ldr	r1, [pc, #148]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a846:	4313      	orrs	r3, r2
 800a848:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a84a:	f7f9 fe63 	bl	8004514 <HAL_GetTick>
 800a84e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a850:	e008      	b.n	800a864 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a852:	f7f9 fe5f 	bl	8004514 <HAL_GetTick>
 800a856:	4602      	mov	r2, r0
 800a858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85a:	1ad3      	subs	r3, r2, r3
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d901      	bls.n	800a864 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a860:	2303      	movs	r3, #3
 800a862:	e328      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a864:	4b1d      	ldr	r3, [pc, #116]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 0304 	and.w	r3, r3, #4
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d0f0      	beq.n	800a852 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a870:	4b1a      	ldr	r3, [pc, #104]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	691b      	ldr	r3, [r3, #16]
 800a87c:	061b      	lsls	r3, r3, #24
 800a87e:	4917      	ldr	r1, [pc, #92]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a880:	4313      	orrs	r3, r2
 800a882:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a884:	e045      	b.n	800a912 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d028      	beq.n	800a8e0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a88e:	4b13      	ldr	r3, [pc, #76]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f023 0219 	bic.w	r2, r3, #25
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	4910      	ldr	r1, [pc, #64]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a89c:	4313      	orrs	r3, r2
 800a89e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8a0:	f7f9 fe38 	bl	8004514 <HAL_GetTick>
 800a8a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8a6:	e008      	b.n	800a8ba <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8a8:	f7f9 fe34 	bl	8004514 <HAL_GetTick>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d901      	bls.n	800a8ba <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	e2fd      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8ba:	4b08      	ldr	r3, [pc, #32]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 0304 	and.w	r3, r3, #4
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d0f0      	beq.n	800a8a8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8c6:	4b05      	ldr	r3, [pc, #20]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	061b      	lsls	r3, r3, #24
 800a8d4:	4901      	ldr	r1, [pc, #4]	; (800a8dc <HAL_RCC_OscConfig+0x278>)
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	604b      	str	r3, [r1, #4]
 800a8da:	e01a      	b.n	800a912 <HAL_RCC_OscConfig+0x2ae>
 800a8dc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8e0:	4b97      	ldr	r3, [pc, #604]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a96      	ldr	r2, [pc, #600]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800a8e6:	f023 0301 	bic.w	r3, r3, #1
 800a8ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8ec:	f7f9 fe12 	bl	8004514 <HAL_GetTick>
 800a8f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a8f2:	e008      	b.n	800a906 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8f4:	f7f9 fe0e 	bl	8004514 <HAL_GetTick>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d901      	bls.n	800a906 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a902:	2303      	movs	r3, #3
 800a904:	e2d7      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a906:	4b8e      	ldr	r3, [pc, #568]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f003 0304 	and.w	r3, r3, #4
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1f0      	bne.n	800a8f4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 0310 	and.w	r3, r3, #16
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d06a      	beq.n	800a9f4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a91e:	4b88      	ldr	r3, [pc, #544]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a926:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a928:	4b85      	ldr	r3, [pc, #532]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800a92a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a92c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	2b08      	cmp	r3, #8
 800a932:	d007      	beq.n	800a944 <HAL_RCC_OscConfig+0x2e0>
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	2b18      	cmp	r3, #24
 800a938:	d11b      	bne.n	800a972 <HAL_RCC_OscConfig+0x30e>
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	f003 0303 	and.w	r3, r3, #3
 800a940:	2b01      	cmp	r3, #1
 800a942:	d116      	bne.n	800a972 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a944:	4b7e      	ldr	r3, [pc, #504]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d005      	beq.n	800a95c <HAL_RCC_OscConfig+0x2f8>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	69db      	ldr	r3, [r3, #28]
 800a954:	2b80      	cmp	r3, #128	; 0x80
 800a956:	d001      	beq.n	800a95c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	e2ac      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a95c:	4b78      	ldr	r3, [pc, #480]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a1b      	ldr	r3, [r3, #32]
 800a968:	061b      	lsls	r3, r3, #24
 800a96a:	4975      	ldr	r1, [pc, #468]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800a96c:	4313      	orrs	r3, r2
 800a96e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a970:	e040      	b.n	800a9f4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	69db      	ldr	r3, [r3, #28]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d023      	beq.n	800a9c2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a97a:	4b71      	ldr	r3, [pc, #452]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a70      	ldr	r2, [pc, #448]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800a980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a986:	f7f9 fdc5 	bl	8004514 <HAL_GetTick>
 800a98a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a98c:	e008      	b.n	800a9a0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a98e:	f7f9 fdc1 	bl	8004514 <HAL_GetTick>
 800a992:	4602      	mov	r2, r0
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a996:	1ad3      	subs	r3, r2, r3
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d901      	bls.n	800a9a0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a99c:	2303      	movs	r3, #3
 800a99e:	e28a      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9a0:	4b67      	ldr	r3, [pc, #412]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d0f0      	beq.n	800a98e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a9ac:	4b64      	ldr	r3, [pc, #400]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a1b      	ldr	r3, [r3, #32]
 800a9b8:	061b      	lsls	r3, r3, #24
 800a9ba:	4961      	ldr	r1, [pc, #388]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	60cb      	str	r3, [r1, #12]
 800a9c0:	e018      	b.n	800a9f4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a9c2:	4b5f      	ldr	r3, [pc, #380]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a5e      	ldr	r2, [pc, #376]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800a9c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9ce:	f7f9 fda1 	bl	8004514 <HAL_GetTick>
 800a9d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a9d4:	e008      	b.n	800a9e8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a9d6:	f7f9 fd9d 	bl	8004514 <HAL_GetTick>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d901      	bls.n	800a9e8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	e266      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a9e8:	4b55      	ldr	r3, [pc, #340]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d1f0      	bne.n	800a9d6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f003 0308 	and.w	r3, r3, #8
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d036      	beq.n	800aa6e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	695b      	ldr	r3, [r3, #20]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d019      	beq.n	800aa3c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa08:	4b4d      	ldr	r3, [pc, #308]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800aa0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa0c:	4a4c      	ldr	r2, [pc, #304]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800aa0e:	f043 0301 	orr.w	r3, r3, #1
 800aa12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa14:	f7f9 fd7e 	bl	8004514 <HAL_GetTick>
 800aa18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa1a:	e008      	b.n	800aa2e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa1c:	f7f9 fd7a 	bl	8004514 <HAL_GetTick>
 800aa20:	4602      	mov	r2, r0
 800aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d901      	bls.n	800aa2e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e243      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa2e:	4b44      	ldr	r3, [pc, #272]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800aa30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa32:	f003 0302 	and.w	r3, r3, #2
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d0f0      	beq.n	800aa1c <HAL_RCC_OscConfig+0x3b8>
 800aa3a:	e018      	b.n	800aa6e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa3c:	4b40      	ldr	r3, [pc, #256]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800aa3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa40:	4a3f      	ldr	r2, [pc, #252]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800aa42:	f023 0301 	bic.w	r3, r3, #1
 800aa46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa48:	f7f9 fd64 	bl	8004514 <HAL_GetTick>
 800aa4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aa4e:	e008      	b.n	800aa62 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa50:	f7f9 fd60 	bl	8004514 <HAL_GetTick>
 800aa54:	4602      	mov	r2, r0
 800aa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d901      	bls.n	800aa62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800aa5e:	2303      	movs	r3, #3
 800aa60:	e229      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aa62:	4b37      	ldr	r3, [pc, #220]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800aa64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa66:	f003 0302 	and.w	r3, r3, #2
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1f0      	bne.n	800aa50 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 0320 	and.w	r3, r3, #32
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d036      	beq.n	800aae8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	699b      	ldr	r3, [r3, #24]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d019      	beq.n	800aab6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aa82:	4b2f      	ldr	r3, [pc, #188]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a2e      	ldr	r2, [pc, #184]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800aa88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aa8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aa8e:	f7f9 fd41 	bl	8004514 <HAL_GetTick>
 800aa92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aa94:	e008      	b.n	800aaa8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aa96:	f7f9 fd3d 	bl	8004514 <HAL_GetTick>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d901      	bls.n	800aaa8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	e206      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aaa8:	4b25      	ldr	r3, [pc, #148]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d0f0      	beq.n	800aa96 <HAL_RCC_OscConfig+0x432>
 800aab4:	e018      	b.n	800aae8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aab6:	4b22      	ldr	r3, [pc, #136]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a21      	ldr	r2, [pc, #132]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800aabc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aac0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aac2:	f7f9 fd27 	bl	8004514 <HAL_GetTick>
 800aac6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aac8:	e008      	b.n	800aadc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aaca:	f7f9 fd23 	bl	8004514 <HAL_GetTick>
 800aace:	4602      	mov	r2, r0
 800aad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad2:	1ad3      	subs	r3, r2, r3
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	d901      	bls.n	800aadc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800aad8:	2303      	movs	r3, #3
 800aada:	e1ec      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aadc:	4b18      	ldr	r3, [pc, #96]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1f0      	bne.n	800aaca <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f003 0304 	and.w	r3, r3, #4
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f000 80af 	beq.w	800ac54 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aaf6:	4b13      	ldr	r3, [pc, #76]	; (800ab44 <HAL_RCC_OscConfig+0x4e0>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a12      	ldr	r2, [pc, #72]	; (800ab44 <HAL_RCC_OscConfig+0x4e0>)
 800aafc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab02:	f7f9 fd07 	bl	8004514 <HAL_GetTick>
 800ab06:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab08:	e008      	b.n	800ab1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab0a:	f7f9 fd03 	bl	8004514 <HAL_GetTick>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	2b64      	cmp	r3, #100	; 0x64
 800ab16:	d901      	bls.n	800ab1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800ab18:	2303      	movs	r3, #3
 800ab1a:	e1cc      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab1c:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <HAL_RCC_OscConfig+0x4e0>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d0f0      	beq.n	800ab0a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d10b      	bne.n	800ab48 <HAL_RCC_OscConfig+0x4e4>
 800ab30:	4b03      	ldr	r3, [pc, #12]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800ab32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab34:	4a02      	ldr	r2, [pc, #8]	; (800ab40 <HAL_RCC_OscConfig+0x4dc>)
 800ab36:	f043 0301 	orr.w	r3, r3, #1
 800ab3a:	6713      	str	r3, [r2, #112]	; 0x70
 800ab3c:	e05b      	b.n	800abf6 <HAL_RCC_OscConfig+0x592>
 800ab3e:	bf00      	nop
 800ab40:	58024400 	.word	0x58024400
 800ab44:	58024800 	.word	0x58024800
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d112      	bne.n	800ab76 <HAL_RCC_OscConfig+0x512>
 800ab50:	4b9d      	ldr	r3, [pc, #628]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ab52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab54:	4a9c      	ldr	r2, [pc, #624]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ab56:	f023 0301 	bic.w	r3, r3, #1
 800ab5a:	6713      	str	r3, [r2, #112]	; 0x70
 800ab5c:	4b9a      	ldr	r3, [pc, #616]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ab5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab60:	4a99      	ldr	r2, [pc, #612]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ab62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab66:	6713      	str	r3, [r2, #112]	; 0x70
 800ab68:	4b97      	ldr	r3, [pc, #604]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ab6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab6c:	4a96      	ldr	r2, [pc, #600]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ab6e:	f023 0304 	bic.w	r3, r3, #4
 800ab72:	6713      	str	r3, [r2, #112]	; 0x70
 800ab74:	e03f      	b.n	800abf6 <HAL_RCC_OscConfig+0x592>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	2b05      	cmp	r3, #5
 800ab7c:	d112      	bne.n	800aba4 <HAL_RCC_OscConfig+0x540>
 800ab7e:	4b92      	ldr	r3, [pc, #584]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ab80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab82:	4a91      	ldr	r2, [pc, #580]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ab84:	f043 0304 	orr.w	r3, r3, #4
 800ab88:	6713      	str	r3, [r2, #112]	; 0x70
 800ab8a:	4b8f      	ldr	r3, [pc, #572]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ab8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab8e:	4a8e      	ldr	r2, [pc, #568]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ab90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab94:	6713      	str	r3, [r2, #112]	; 0x70
 800ab96:	4b8c      	ldr	r3, [pc, #560]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ab98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab9a:	4a8b      	ldr	r2, [pc, #556]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ab9c:	f043 0301 	orr.w	r3, r3, #1
 800aba0:	6713      	str	r3, [r2, #112]	; 0x70
 800aba2:	e028      	b.n	800abf6 <HAL_RCC_OscConfig+0x592>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	2b85      	cmp	r3, #133	; 0x85
 800abaa:	d112      	bne.n	800abd2 <HAL_RCC_OscConfig+0x56e>
 800abac:	4b86      	ldr	r3, [pc, #536]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800abae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abb0:	4a85      	ldr	r2, [pc, #532]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800abb2:	f043 0304 	orr.w	r3, r3, #4
 800abb6:	6713      	str	r3, [r2, #112]	; 0x70
 800abb8:	4b83      	ldr	r3, [pc, #524]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800abba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abbc:	4a82      	ldr	r2, [pc, #520]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800abbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abc2:	6713      	str	r3, [r2, #112]	; 0x70
 800abc4:	4b80      	ldr	r3, [pc, #512]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800abc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abc8:	4a7f      	ldr	r2, [pc, #508]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800abca:	f043 0301 	orr.w	r3, r3, #1
 800abce:	6713      	str	r3, [r2, #112]	; 0x70
 800abd0:	e011      	b.n	800abf6 <HAL_RCC_OscConfig+0x592>
 800abd2:	4b7d      	ldr	r3, [pc, #500]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800abd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abd6:	4a7c      	ldr	r2, [pc, #496]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800abd8:	f023 0301 	bic.w	r3, r3, #1
 800abdc:	6713      	str	r3, [r2, #112]	; 0x70
 800abde:	4b7a      	ldr	r3, [pc, #488]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800abe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe2:	4a79      	ldr	r2, [pc, #484]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800abe4:	f023 0304 	bic.w	r3, r3, #4
 800abe8:	6713      	str	r3, [r2, #112]	; 0x70
 800abea:	4b77      	ldr	r3, [pc, #476]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800abec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abee:	4a76      	ldr	r2, [pc, #472]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800abf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d015      	beq.n	800ac2a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abfe:	f7f9 fc89 	bl	8004514 <HAL_GetTick>
 800ac02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac04:	e00a      	b.n	800ac1c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac06:	f7f9 fc85 	bl	8004514 <HAL_GetTick>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	1ad3      	subs	r3, r2, r3
 800ac10:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d901      	bls.n	800ac1c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	e14c      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac1c:	4b6a      	ldr	r3, [pc, #424]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ac1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac20:	f003 0302 	and.w	r3, r3, #2
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d0ee      	beq.n	800ac06 <HAL_RCC_OscConfig+0x5a2>
 800ac28:	e014      	b.n	800ac54 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac2a:	f7f9 fc73 	bl	8004514 <HAL_GetTick>
 800ac2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac30:	e00a      	b.n	800ac48 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac32:	f7f9 fc6f 	bl	8004514 <HAL_GetTick>
 800ac36:	4602      	mov	r2, r0
 800ac38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d901      	bls.n	800ac48 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800ac44:	2303      	movs	r3, #3
 800ac46:	e136      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac48:	4b5f      	ldr	r3, [pc, #380]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ac4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac4c:	f003 0302 	and.w	r3, r3, #2
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1ee      	bne.n	800ac32 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f000 812b 	beq.w	800aeb4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ac5e:	4b5a      	ldr	r3, [pc, #360]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac66:	2b18      	cmp	r3, #24
 800ac68:	f000 80bb 	beq.w	800ade2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac70:	2b02      	cmp	r3, #2
 800ac72:	f040 8095 	bne.w	800ada0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac76:	4b54      	ldr	r3, [pc, #336]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a53      	ldr	r2, [pc, #332]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ac7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac82:	f7f9 fc47 	bl	8004514 <HAL_GetTick>
 800ac86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac88:	e008      	b.n	800ac9c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac8a:	f7f9 fc43 	bl	8004514 <HAL_GetTick>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	1ad3      	subs	r3, r2, r3
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	d901      	bls.n	800ac9c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800ac98:	2303      	movs	r3, #3
 800ac9a:	e10c      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac9c:	4b4a      	ldr	r3, [pc, #296]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1f0      	bne.n	800ac8a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aca8:	4b47      	ldr	r3, [pc, #284]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800acaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acac:	4b47      	ldr	r3, [pc, #284]	; (800adcc <HAL_RCC_OscConfig+0x768>)
 800acae:	4013      	ands	r3, r2
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800acb8:	0112      	lsls	r2, r2, #4
 800acba:	430a      	orrs	r2, r1
 800acbc:	4942      	ldr	r1, [pc, #264]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800acbe:	4313      	orrs	r3, r2
 800acc0:	628b      	str	r3, [r1, #40]	; 0x28
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc6:	3b01      	subs	r3, #1
 800acc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acd0:	3b01      	subs	r3, #1
 800acd2:	025b      	lsls	r3, r3, #9
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	431a      	orrs	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acdc:	3b01      	subs	r3, #1
 800acde:	041b      	lsls	r3, r3, #16
 800ace0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ace4:	431a      	orrs	r2, r3
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acea:	3b01      	subs	r3, #1
 800acec:	061b      	lsls	r3, r3, #24
 800acee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800acf2:	4935      	ldr	r1, [pc, #212]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800acf4:	4313      	orrs	r3, r2
 800acf6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800acf8:	4b33      	ldr	r3, [pc, #204]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800acfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfc:	4a32      	ldr	r2, [pc, #200]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800acfe:	f023 0301 	bic.w	r3, r3, #1
 800ad02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ad04:	4b30      	ldr	r3, [pc, #192]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ad06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad08:	4b31      	ldr	r3, [pc, #196]	; (800add0 <HAL_RCC_OscConfig+0x76c>)
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ad10:	00d2      	lsls	r2, r2, #3
 800ad12:	492d      	ldr	r1, [pc, #180]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ad14:	4313      	orrs	r3, r2
 800ad16:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ad18:	4b2b      	ldr	r3, [pc, #172]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ad1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1c:	f023 020c 	bic.w	r2, r3, #12
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad24:	4928      	ldr	r1, [pc, #160]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ad26:	4313      	orrs	r3, r2
 800ad28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ad2a:	4b27      	ldr	r3, [pc, #156]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ad2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2e:	f023 0202 	bic.w	r2, r3, #2
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad36:	4924      	ldr	r1, [pc, #144]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ad3c:	4b22      	ldr	r3, [pc, #136]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ad3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad40:	4a21      	ldr	r2, [pc, #132]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ad42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad48:	4b1f      	ldr	r3, [pc, #124]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ad4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad4c:	4a1e      	ldr	r2, [pc, #120]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ad4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ad54:	4b1c      	ldr	r3, [pc, #112]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ad56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad58:	4a1b      	ldr	r2, [pc, #108]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ad5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ad60:	4b19      	ldr	r3, [pc, #100]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ad62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad64:	4a18      	ldr	r2, [pc, #96]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ad66:	f043 0301 	orr.w	r3, r3, #1
 800ad6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad6c:	4b16      	ldr	r3, [pc, #88]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a15      	ldr	r2, [pc, #84]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ad72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad78:	f7f9 fbcc 	bl	8004514 <HAL_GetTick>
 800ad7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad7e:	e008      	b.n	800ad92 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad80:	f7f9 fbc8 	bl	8004514 <HAL_GetTick>
 800ad84:	4602      	mov	r2, r0
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d901      	bls.n	800ad92 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	e091      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad92:	4b0d      	ldr	r3, [pc, #52]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d0f0      	beq.n	800ad80 <HAL_RCC_OscConfig+0x71c>
 800ad9e:	e089      	b.n	800aeb4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ada0:	4b09      	ldr	r3, [pc, #36]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a08      	ldr	r2, [pc, #32]	; (800adc8 <HAL_RCC_OscConfig+0x764>)
 800ada6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800adaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adac:	f7f9 fbb2 	bl	8004514 <HAL_GetTick>
 800adb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800adb2:	e00f      	b.n	800add4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adb4:	f7f9 fbae 	bl	8004514 <HAL_GetTick>
 800adb8:	4602      	mov	r2, r0
 800adba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbc:	1ad3      	subs	r3, r2, r3
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d908      	bls.n	800add4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800adc2:	2303      	movs	r3, #3
 800adc4:	e077      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
 800adc6:	bf00      	nop
 800adc8:	58024400 	.word	0x58024400
 800adcc:	fffffc0c 	.word	0xfffffc0c
 800add0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800add4:	4b3a      	ldr	r3, [pc, #232]	; (800aec0 <HAL_RCC_OscConfig+0x85c>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800addc:	2b00      	cmp	r3, #0
 800adde:	d1e9      	bne.n	800adb4 <HAL_RCC_OscConfig+0x750>
 800ade0:	e068      	b.n	800aeb4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ade2:	4b37      	ldr	r3, [pc, #220]	; (800aec0 <HAL_RCC_OscConfig+0x85c>)
 800ade4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ade8:	4b35      	ldr	r3, [pc, #212]	; (800aec0 <HAL_RCC_OscConfig+0x85c>)
 800adea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adec:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d031      	beq.n	800ae5a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	f003 0203 	and.w	r2, r3, #3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d12a      	bne.n	800ae5a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	091b      	lsrs	r3, r3, #4
 800ae08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d122      	bne.n	800ae5a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d11a      	bne.n	800ae5a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	0a5b      	lsrs	r3, r3, #9
 800ae28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae30:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d111      	bne.n	800ae5a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	0c1b      	lsrs	r3, r3, #16
 800ae3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae42:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d108      	bne.n	800ae5a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	0e1b      	lsrs	r3, r3, #24
 800ae4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae54:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d001      	beq.n	800ae5e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e02b      	b.n	800aeb6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ae5e:	4b18      	ldr	r3, [pc, #96]	; (800aec0 <HAL_RCC_OscConfig+0x85c>)
 800ae60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae62:	08db      	lsrs	r3, r3, #3
 800ae64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae68:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae6e:	693a      	ldr	r2, [r7, #16]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d01f      	beq.n	800aeb4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ae74:	4b12      	ldr	r3, [pc, #72]	; (800aec0 <HAL_RCC_OscConfig+0x85c>)
 800ae76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae78:	4a11      	ldr	r2, [pc, #68]	; (800aec0 <HAL_RCC_OscConfig+0x85c>)
 800ae7a:	f023 0301 	bic.w	r3, r3, #1
 800ae7e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ae80:	f7f9 fb48 	bl	8004514 <HAL_GetTick>
 800ae84:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ae86:	bf00      	nop
 800ae88:	f7f9 fb44 	bl	8004514 <HAL_GetTick>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d0f9      	beq.n	800ae88 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ae94:	4b0a      	ldr	r3, [pc, #40]	; (800aec0 <HAL_RCC_OscConfig+0x85c>)
 800ae96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae98:	4b0a      	ldr	r3, [pc, #40]	; (800aec4 <HAL_RCC_OscConfig+0x860>)
 800ae9a:	4013      	ands	r3, r2
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aea0:	00d2      	lsls	r2, r2, #3
 800aea2:	4907      	ldr	r1, [pc, #28]	; (800aec0 <HAL_RCC_OscConfig+0x85c>)
 800aea4:	4313      	orrs	r3, r2
 800aea6:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800aea8:	4b05      	ldr	r3, [pc, #20]	; (800aec0 <HAL_RCC_OscConfig+0x85c>)
 800aeaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeac:	4a04      	ldr	r2, [pc, #16]	; (800aec0 <HAL_RCC_OscConfig+0x85c>)
 800aeae:	f043 0301 	orr.w	r3, r3, #1
 800aeb2:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3730      	adds	r7, #48	; 0x30
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	58024400 	.word	0x58024400
 800aec4:	ffff0007 	.word	0xffff0007

0800aec8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d101      	bne.n	800aedc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	e19c      	b.n	800b216 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aedc:	4b8a      	ldr	r3, [pc, #552]	; (800b108 <HAL_RCC_ClockConfig+0x240>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 030f 	and.w	r3, r3, #15
 800aee4:	683a      	ldr	r2, [r7, #0]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d910      	bls.n	800af0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aeea:	4b87      	ldr	r3, [pc, #540]	; (800b108 <HAL_RCC_ClockConfig+0x240>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f023 020f 	bic.w	r2, r3, #15
 800aef2:	4985      	ldr	r1, [pc, #532]	; (800b108 <HAL_RCC_ClockConfig+0x240>)
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	4313      	orrs	r3, r2
 800aef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aefa:	4b83      	ldr	r3, [pc, #524]	; (800b108 <HAL_RCC_ClockConfig+0x240>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f003 030f 	and.w	r3, r3, #15
 800af02:	683a      	ldr	r2, [r7, #0]
 800af04:	429a      	cmp	r2, r3
 800af06:	d001      	beq.n	800af0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800af08:	2301      	movs	r3, #1
 800af0a:	e184      	b.n	800b216 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 0304 	and.w	r3, r3, #4
 800af14:	2b00      	cmp	r3, #0
 800af16:	d010      	beq.n	800af3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	691a      	ldr	r2, [r3, #16]
 800af1c:	4b7b      	ldr	r3, [pc, #492]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800af1e:	699b      	ldr	r3, [r3, #24]
 800af20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af24:	429a      	cmp	r2, r3
 800af26:	d908      	bls.n	800af3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800af28:	4b78      	ldr	r3, [pc, #480]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800af2a:	699b      	ldr	r3, [r3, #24]
 800af2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	691b      	ldr	r3, [r3, #16]
 800af34:	4975      	ldr	r1, [pc, #468]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800af36:	4313      	orrs	r3, r2
 800af38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f003 0308 	and.w	r3, r3, #8
 800af42:	2b00      	cmp	r3, #0
 800af44:	d010      	beq.n	800af68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	695a      	ldr	r2, [r3, #20]
 800af4a:	4b70      	ldr	r3, [pc, #448]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800af4c:	69db      	ldr	r3, [r3, #28]
 800af4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af52:	429a      	cmp	r2, r3
 800af54:	d908      	bls.n	800af68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800af56:	4b6d      	ldr	r3, [pc, #436]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800af58:	69db      	ldr	r3, [r3, #28]
 800af5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	695b      	ldr	r3, [r3, #20]
 800af62:	496a      	ldr	r1, [pc, #424]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800af64:	4313      	orrs	r3, r2
 800af66:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f003 0310 	and.w	r3, r3, #16
 800af70:	2b00      	cmp	r3, #0
 800af72:	d010      	beq.n	800af96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	699a      	ldr	r2, [r3, #24]
 800af78:	4b64      	ldr	r3, [pc, #400]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800af7a:	69db      	ldr	r3, [r3, #28]
 800af7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af80:	429a      	cmp	r2, r3
 800af82:	d908      	bls.n	800af96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af84:	4b61      	ldr	r3, [pc, #388]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800af86:	69db      	ldr	r3, [r3, #28]
 800af88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	495e      	ldr	r1, [pc, #376]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800af92:	4313      	orrs	r3, r2
 800af94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f003 0320 	and.w	r3, r3, #32
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d010      	beq.n	800afc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	69da      	ldr	r2, [r3, #28]
 800afa6:	4b59      	ldr	r3, [pc, #356]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800afae:	429a      	cmp	r2, r3
 800afb0:	d908      	bls.n	800afc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800afb2:	4b56      	ldr	r3, [pc, #344]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800afb4:	6a1b      	ldr	r3, [r3, #32]
 800afb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	69db      	ldr	r3, [r3, #28]
 800afbe:	4953      	ldr	r1, [pc, #332]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800afc0:	4313      	orrs	r3, r2
 800afc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 0302 	and.w	r3, r3, #2
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d010      	beq.n	800aff2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	68da      	ldr	r2, [r3, #12]
 800afd4:	4b4d      	ldr	r3, [pc, #308]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800afd6:	699b      	ldr	r3, [r3, #24]
 800afd8:	f003 030f 	and.w	r3, r3, #15
 800afdc:	429a      	cmp	r2, r3
 800afde:	d908      	bls.n	800aff2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800afe0:	4b4a      	ldr	r3, [pc, #296]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800afe2:	699b      	ldr	r3, [r3, #24]
 800afe4:	f023 020f 	bic.w	r2, r3, #15
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	4947      	ldr	r1, [pc, #284]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800afee:	4313      	orrs	r3, r2
 800aff0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	2b00      	cmp	r3, #0
 800affc:	d055      	beq.n	800b0aa <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800affe:	4b43      	ldr	r3, [pc, #268]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	4940      	ldr	r1, [pc, #256]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b00c:	4313      	orrs	r3, r2
 800b00e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	2b02      	cmp	r3, #2
 800b016:	d107      	bne.n	800b028 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b018:	4b3c      	ldr	r3, [pc, #240]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b020:	2b00      	cmp	r3, #0
 800b022:	d121      	bne.n	800b068 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	e0f6      	b.n	800b216 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	2b03      	cmp	r3, #3
 800b02e:	d107      	bne.n	800b040 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b030:	4b36      	ldr	r3, [pc, #216]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d115      	bne.n	800b068 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e0ea      	b.n	800b216 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d107      	bne.n	800b058 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b048:	4b30      	ldr	r3, [pc, #192]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b050:	2b00      	cmp	r3, #0
 800b052:	d109      	bne.n	800b068 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	e0de      	b.n	800b216 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b058:	4b2c      	ldr	r3, [pc, #176]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f003 0304 	and.w	r3, r3, #4
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b064:	2301      	movs	r3, #1
 800b066:	e0d6      	b.n	800b216 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b068:	4b28      	ldr	r3, [pc, #160]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b06a:	691b      	ldr	r3, [r3, #16]
 800b06c:	f023 0207 	bic.w	r2, r3, #7
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	4925      	ldr	r1, [pc, #148]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b076:	4313      	orrs	r3, r2
 800b078:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b07a:	f7f9 fa4b 	bl	8004514 <HAL_GetTick>
 800b07e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b080:	e00a      	b.n	800b098 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b082:	f7f9 fa47 	bl	8004514 <HAL_GetTick>
 800b086:	4602      	mov	r2, r0
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b090:	4293      	cmp	r3, r2
 800b092:	d901      	bls.n	800b098 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b094:	2303      	movs	r3, #3
 800b096:	e0be      	b.n	800b216 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b098:	4b1c      	ldr	r3, [pc, #112]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	00db      	lsls	r3, r3, #3
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d1eb      	bne.n	800b082 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 0302 	and.w	r3, r3, #2
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d010      	beq.n	800b0d8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	68da      	ldr	r2, [r3, #12]
 800b0ba:	4b14      	ldr	r3, [pc, #80]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b0bc:	699b      	ldr	r3, [r3, #24]
 800b0be:	f003 030f 	and.w	r3, r3, #15
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d208      	bcs.n	800b0d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0c6:	4b11      	ldr	r3, [pc, #68]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b0c8:	699b      	ldr	r3, [r3, #24]
 800b0ca:	f023 020f 	bic.w	r2, r3, #15
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	490e      	ldr	r1, [pc, #56]	; (800b10c <HAL_RCC_ClockConfig+0x244>)
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b0d8:	4b0b      	ldr	r3, [pc, #44]	; (800b108 <HAL_RCC_ClockConfig+0x240>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f003 030f 	and.w	r3, r3, #15
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d214      	bcs.n	800b110 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0e6:	4b08      	ldr	r3, [pc, #32]	; (800b108 <HAL_RCC_ClockConfig+0x240>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f023 020f 	bic.w	r2, r3, #15
 800b0ee:	4906      	ldr	r1, [pc, #24]	; (800b108 <HAL_RCC_ClockConfig+0x240>)
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0f6:	4b04      	ldr	r3, [pc, #16]	; (800b108 <HAL_RCC_ClockConfig+0x240>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f003 030f 	and.w	r3, r3, #15
 800b0fe:	683a      	ldr	r2, [r7, #0]
 800b100:	429a      	cmp	r2, r3
 800b102:	d005      	beq.n	800b110 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	e086      	b.n	800b216 <HAL_RCC_ClockConfig+0x34e>
 800b108:	52002000 	.word	0x52002000
 800b10c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 0304 	and.w	r3, r3, #4
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d010      	beq.n	800b13e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	691a      	ldr	r2, [r3, #16]
 800b120:	4b3f      	ldr	r3, [pc, #252]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b122:	699b      	ldr	r3, [r3, #24]
 800b124:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b128:	429a      	cmp	r2, r3
 800b12a:	d208      	bcs.n	800b13e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b12c:	4b3c      	ldr	r3, [pc, #240]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	691b      	ldr	r3, [r3, #16]
 800b138:	4939      	ldr	r1, [pc, #228]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b13a:	4313      	orrs	r3, r2
 800b13c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f003 0308 	and.w	r3, r3, #8
 800b146:	2b00      	cmp	r3, #0
 800b148:	d010      	beq.n	800b16c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	695a      	ldr	r2, [r3, #20]
 800b14e:	4b34      	ldr	r3, [pc, #208]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b150:	69db      	ldr	r3, [r3, #28]
 800b152:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b156:	429a      	cmp	r2, r3
 800b158:	d208      	bcs.n	800b16c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b15a:	4b31      	ldr	r3, [pc, #196]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b15c:	69db      	ldr	r3, [r3, #28]
 800b15e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	492e      	ldr	r1, [pc, #184]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b168:	4313      	orrs	r3, r2
 800b16a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f003 0310 	and.w	r3, r3, #16
 800b174:	2b00      	cmp	r3, #0
 800b176:	d010      	beq.n	800b19a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	699a      	ldr	r2, [r3, #24]
 800b17c:	4b28      	ldr	r3, [pc, #160]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b17e:	69db      	ldr	r3, [r3, #28]
 800b180:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b184:	429a      	cmp	r2, r3
 800b186:	d208      	bcs.n	800b19a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b188:	4b25      	ldr	r3, [pc, #148]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b18a:	69db      	ldr	r3, [r3, #28]
 800b18c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	699b      	ldr	r3, [r3, #24]
 800b194:	4922      	ldr	r1, [pc, #136]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b196:	4313      	orrs	r3, r2
 800b198:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f003 0320 	and.w	r3, r3, #32
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d010      	beq.n	800b1c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	69da      	ldr	r2, [r3, #28]
 800b1aa:	4b1d      	ldr	r3, [pc, #116]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b1ac:	6a1b      	ldr	r3, [r3, #32]
 800b1ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d208      	bcs.n	800b1c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b1b6:	4b1a      	ldr	r3, [pc, #104]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b1b8:	6a1b      	ldr	r3, [r3, #32]
 800b1ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	69db      	ldr	r3, [r3, #28]
 800b1c2:	4917      	ldr	r1, [pc, #92]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b1c8:	f000 f89e 	bl	800b308 <HAL_RCC_GetSysClockFreq>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	4b14      	ldr	r3, [pc, #80]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b1d0:	699b      	ldr	r3, [r3, #24]
 800b1d2:	0a1b      	lsrs	r3, r3, #8
 800b1d4:	f003 030f 	and.w	r3, r3, #15
 800b1d8:	4912      	ldr	r1, [pc, #72]	; (800b224 <HAL_RCC_ClockConfig+0x35c>)
 800b1da:	5ccb      	ldrb	r3, [r1, r3]
 800b1dc:	f003 031f 	and.w	r3, r3, #31
 800b1e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b1e4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b1e6:	4b0e      	ldr	r3, [pc, #56]	; (800b220 <HAL_RCC_ClockConfig+0x358>)
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	f003 030f 	and.w	r3, r3, #15
 800b1ee:	4a0d      	ldr	r2, [pc, #52]	; (800b224 <HAL_RCC_ClockConfig+0x35c>)
 800b1f0:	5cd3      	ldrb	r3, [r2, r3]
 800b1f2:	f003 031f 	and.w	r3, r3, #31
 800b1f6:	693a      	ldr	r2, [r7, #16]
 800b1f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b1fc:	4a0a      	ldr	r2, [pc, #40]	; (800b228 <HAL_RCC_ClockConfig+0x360>)
 800b1fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b200:	4a0a      	ldr	r2, [pc, #40]	; (800b22c <HAL_RCC_ClockConfig+0x364>)
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b206:	4b0a      	ldr	r3, [pc, #40]	; (800b230 <HAL_RCC_ClockConfig+0x368>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7f9 f938 	bl	8004480 <HAL_InitTick>
 800b210:	4603      	mov	r3, r0
 800b212:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b214:	7bfb      	ldrb	r3, [r7, #15]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	58024400 	.word	0x58024400
 800b224:	08010588 	.word	0x08010588
 800b228:	24000288 	.word	0x24000288
 800b22c:	24000284 	.word	0x24000284
 800b230:	2400028c 	.word	0x2400028c

0800b234 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b08c      	sub	sp, #48	; 0x30
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d12a      	bne.n	800b29c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b246:	4b2d      	ldr	r3, [pc, #180]	; (800b2fc <HAL_RCC_MCOConfig+0xc8>)
 800b248:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b24c:	4a2b      	ldr	r2, [pc, #172]	; (800b2fc <HAL_RCC_MCOConfig+0xc8>)
 800b24e:	f043 0301 	orr.w	r3, r3, #1
 800b252:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b256:	4b29      	ldr	r3, [pc, #164]	; (800b2fc <HAL_RCC_MCOConfig+0xc8>)
 800b258:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b25c:	f003 0301 	and.w	r3, r3, #1
 800b260:	61bb      	str	r3, [r7, #24]
 800b262:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b264:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b26a:	2302      	movs	r3, #2
 800b26c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b26e:	2303      	movs	r3, #3
 800b270:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b272:	2300      	movs	r3, #0
 800b274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b276:	2300      	movs	r3, #0
 800b278:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b27a:	f107 031c 	add.w	r3, r7, #28
 800b27e:	4619      	mov	r1, r3
 800b280:	481f      	ldr	r0, [pc, #124]	; (800b300 <HAL_RCC_MCOConfig+0xcc>)
 800b282:	f7fd fcc1 	bl	8008c08 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b286:	4b1d      	ldr	r3, [pc, #116]	; (800b2fc <HAL_RCC_MCOConfig+0xc8>)
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b28e:	68b9      	ldr	r1, [r7, #8]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	430b      	orrs	r3, r1
 800b294:	4919      	ldr	r1, [pc, #100]	; (800b2fc <HAL_RCC_MCOConfig+0xc8>)
 800b296:	4313      	orrs	r3, r2
 800b298:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b29a:	e02a      	b.n	800b2f2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b29c:	4b17      	ldr	r3, [pc, #92]	; (800b2fc <HAL_RCC_MCOConfig+0xc8>)
 800b29e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b2a2:	4a16      	ldr	r2, [pc, #88]	; (800b2fc <HAL_RCC_MCOConfig+0xc8>)
 800b2a4:	f043 0304 	orr.w	r3, r3, #4
 800b2a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b2ac:	4b13      	ldr	r3, [pc, #76]	; (800b2fc <HAL_RCC_MCOConfig+0xc8>)
 800b2ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b2b2:	f003 0304 	and.w	r3, r3, #4
 800b2b6:	617b      	str	r3, [r7, #20]
 800b2b8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b2ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b2d0:	f107 031c 	add.w	r3, r7, #28
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	480b      	ldr	r0, [pc, #44]	; (800b304 <HAL_RCC_MCOConfig+0xd0>)
 800b2d8:	f7fd fc96 	bl	8008c08 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b2dc:	4b07      	ldr	r3, [pc, #28]	; (800b2fc <HAL_RCC_MCOConfig+0xc8>)
 800b2de:	691b      	ldr	r3, [r3, #16]
 800b2e0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	01d9      	lsls	r1, r3, #7
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	430b      	orrs	r3, r1
 800b2ec:	4903      	ldr	r1, [pc, #12]	; (800b2fc <HAL_RCC_MCOConfig+0xc8>)
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	610b      	str	r3, [r1, #16]
}
 800b2f2:	bf00      	nop
 800b2f4:	3730      	adds	r7, #48	; 0x30
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	58024400 	.word	0x58024400
 800b300:	58020000 	.word	0x58020000
 800b304:	58020800 	.word	0x58020800

0800b308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b308:	b480      	push	{r7}
 800b30a:	b089      	sub	sp, #36	; 0x24
 800b30c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b30e:	4bb3      	ldr	r3, [pc, #716]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b316:	2b18      	cmp	r3, #24
 800b318:	f200 8155 	bhi.w	800b5c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800b31c:	a201      	add	r2, pc, #4	; (adr r2, 800b324 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b322:	bf00      	nop
 800b324:	0800b389 	.word	0x0800b389
 800b328:	0800b5c7 	.word	0x0800b5c7
 800b32c:	0800b5c7 	.word	0x0800b5c7
 800b330:	0800b5c7 	.word	0x0800b5c7
 800b334:	0800b5c7 	.word	0x0800b5c7
 800b338:	0800b5c7 	.word	0x0800b5c7
 800b33c:	0800b5c7 	.word	0x0800b5c7
 800b340:	0800b5c7 	.word	0x0800b5c7
 800b344:	0800b3af 	.word	0x0800b3af
 800b348:	0800b5c7 	.word	0x0800b5c7
 800b34c:	0800b5c7 	.word	0x0800b5c7
 800b350:	0800b5c7 	.word	0x0800b5c7
 800b354:	0800b5c7 	.word	0x0800b5c7
 800b358:	0800b5c7 	.word	0x0800b5c7
 800b35c:	0800b5c7 	.word	0x0800b5c7
 800b360:	0800b5c7 	.word	0x0800b5c7
 800b364:	0800b3b5 	.word	0x0800b3b5
 800b368:	0800b5c7 	.word	0x0800b5c7
 800b36c:	0800b5c7 	.word	0x0800b5c7
 800b370:	0800b5c7 	.word	0x0800b5c7
 800b374:	0800b5c7 	.word	0x0800b5c7
 800b378:	0800b5c7 	.word	0x0800b5c7
 800b37c:	0800b5c7 	.word	0x0800b5c7
 800b380:	0800b5c7 	.word	0x0800b5c7
 800b384:	0800b3bb 	.word	0x0800b3bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b388:	4b94      	ldr	r3, [pc, #592]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f003 0320 	and.w	r3, r3, #32
 800b390:	2b00      	cmp	r3, #0
 800b392:	d009      	beq.n	800b3a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b394:	4b91      	ldr	r3, [pc, #580]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	08db      	lsrs	r3, r3, #3
 800b39a:	f003 0303 	and.w	r3, r3, #3
 800b39e:	4a90      	ldr	r2, [pc, #576]	; (800b5e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b3a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b3a6:	e111      	b.n	800b5cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b3a8:	4b8d      	ldr	r3, [pc, #564]	; (800b5e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b3aa:	61bb      	str	r3, [r7, #24]
      break;
 800b3ac:	e10e      	b.n	800b5cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b3ae:	4b8d      	ldr	r3, [pc, #564]	; (800b5e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b3b0:	61bb      	str	r3, [r7, #24]
      break;
 800b3b2:	e10b      	b.n	800b5cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b3b4:	4b8c      	ldr	r3, [pc, #560]	; (800b5e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b3b6:	61bb      	str	r3, [r7, #24]
      break;
 800b3b8:	e108      	b.n	800b5cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b3ba:	4b88      	ldr	r3, [pc, #544]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3be:	f003 0303 	and.w	r3, r3, #3
 800b3c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b3c4:	4b85      	ldr	r3, [pc, #532]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c8:	091b      	lsrs	r3, r3, #4
 800b3ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b3d0:	4b82      	ldr	r3, [pc, #520]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d4:	f003 0301 	and.w	r3, r3, #1
 800b3d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b3da:	4b80      	ldr	r3, [pc, #512]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3de:	08db      	lsrs	r3, r3, #3
 800b3e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	fb02 f303 	mul.w	r3, r2, r3
 800b3ea:	ee07 3a90 	vmov	s15, r3
 800b3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f000 80e1 	beq.w	800b5c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	2b02      	cmp	r3, #2
 800b402:	f000 8083 	beq.w	800b50c <HAL_RCC_GetSysClockFreq+0x204>
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	2b02      	cmp	r3, #2
 800b40a:	f200 80a1 	bhi.w	800b550 <HAL_RCC_GetSysClockFreq+0x248>
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d003      	beq.n	800b41c <HAL_RCC_GetSysClockFreq+0x114>
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d056      	beq.n	800b4c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b41a:	e099      	b.n	800b550 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b41c:	4b6f      	ldr	r3, [pc, #444]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f003 0320 	and.w	r3, r3, #32
 800b424:	2b00      	cmp	r3, #0
 800b426:	d02d      	beq.n	800b484 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b428:	4b6c      	ldr	r3, [pc, #432]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	08db      	lsrs	r3, r3, #3
 800b42e:	f003 0303 	and.w	r3, r3, #3
 800b432:	4a6b      	ldr	r2, [pc, #428]	; (800b5e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b434:	fa22 f303 	lsr.w	r3, r2, r3
 800b438:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	ee07 3a90 	vmov	s15, r3
 800b440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	ee07 3a90 	vmov	s15, r3
 800b44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b44e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b452:	4b62      	ldr	r3, [pc, #392]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b45a:	ee07 3a90 	vmov	s15, r3
 800b45e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b462:	ed97 6a02 	vldr	s12, [r7, #8]
 800b466:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b5ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800b46a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b46e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b47a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b47e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b482:	e087      	b.n	800b594 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	ee07 3a90 	vmov	s15, r3
 800b48a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b48e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b5f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b496:	4b51      	ldr	r3, [pc, #324]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b49a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b49e:	ee07 3a90 	vmov	s15, r3
 800b4a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b5ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b4c6:	e065      	b.n	800b594 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	ee07 3a90 	vmov	s15, r3
 800b4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b5f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b4d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4da:	4b40      	ldr	r3, [pc, #256]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4e2:	ee07 3a90 	vmov	s15, r3
 800b4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b5ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b502:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b506:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b50a:	e043      	b.n	800b594 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	ee07 3a90 	vmov	s15, r3
 800b512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b516:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b5f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b51a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b51e:	4b2f      	ldr	r3, [pc, #188]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b526:	ee07 3a90 	vmov	s15, r3
 800b52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b52e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b532:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b5ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800b536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b53e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b54a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b54e:	e021      	b.n	800b594 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	ee07 3a90 	vmov	s15, r3
 800b556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b5f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b55e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b562:	4b1e      	ldr	r3, [pc, #120]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56a:	ee07 3a90 	vmov	s15, r3
 800b56e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b572:	ed97 6a02 	vldr	s12, [r7, #8]
 800b576:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b5ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800b57a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b57e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b58a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b58e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b592:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b594:	4b11      	ldr	r3, [pc, #68]	; (800b5dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b598:	0a5b      	lsrs	r3, r3, #9
 800b59a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b59e:	3301      	adds	r3, #1
 800b5a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	ee07 3a90 	vmov	s15, r3
 800b5a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b5ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5b8:	ee17 3a90 	vmov	r3, s15
 800b5bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b5be:	e005      	b.n	800b5cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	61bb      	str	r3, [r7, #24]
      break;
 800b5c4:	e002      	b.n	800b5cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b5c6:	4b07      	ldr	r3, [pc, #28]	; (800b5e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b5c8:	61bb      	str	r3, [r7, #24]
      break;
 800b5ca:	bf00      	nop
  }

  return sysclockfreq;
 800b5cc:	69bb      	ldr	r3, [r7, #24]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3724      	adds	r7, #36	; 0x24
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	58024400 	.word	0x58024400
 800b5e0:	03d09000 	.word	0x03d09000
 800b5e4:	003d0900 	.word	0x003d0900
 800b5e8:	016e3600 	.word	0x016e3600
 800b5ec:	46000000 	.word	0x46000000
 800b5f0:	4c742400 	.word	0x4c742400
 800b5f4:	4a742400 	.word	0x4a742400
 800b5f8:	4bb71b00 	.word	0x4bb71b00

0800b5fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b602:	f7ff fe81 	bl	800b308 <HAL_RCC_GetSysClockFreq>
 800b606:	4602      	mov	r2, r0
 800b608:	4b10      	ldr	r3, [pc, #64]	; (800b64c <HAL_RCC_GetHCLKFreq+0x50>)
 800b60a:	699b      	ldr	r3, [r3, #24]
 800b60c:	0a1b      	lsrs	r3, r3, #8
 800b60e:	f003 030f 	and.w	r3, r3, #15
 800b612:	490f      	ldr	r1, [pc, #60]	; (800b650 <HAL_RCC_GetHCLKFreq+0x54>)
 800b614:	5ccb      	ldrb	r3, [r1, r3]
 800b616:	f003 031f 	and.w	r3, r3, #31
 800b61a:	fa22 f303 	lsr.w	r3, r2, r3
 800b61e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b620:	4b0a      	ldr	r3, [pc, #40]	; (800b64c <HAL_RCC_GetHCLKFreq+0x50>)
 800b622:	699b      	ldr	r3, [r3, #24]
 800b624:	f003 030f 	and.w	r3, r3, #15
 800b628:	4a09      	ldr	r2, [pc, #36]	; (800b650 <HAL_RCC_GetHCLKFreq+0x54>)
 800b62a:	5cd3      	ldrb	r3, [r2, r3]
 800b62c:	f003 031f 	and.w	r3, r3, #31
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	fa22 f303 	lsr.w	r3, r2, r3
 800b636:	4a07      	ldr	r2, [pc, #28]	; (800b654 <HAL_RCC_GetHCLKFreq+0x58>)
 800b638:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b63a:	4a07      	ldr	r2, [pc, #28]	; (800b658 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b640:	4b04      	ldr	r3, [pc, #16]	; (800b654 <HAL_RCC_GetHCLKFreq+0x58>)
 800b642:	681b      	ldr	r3, [r3, #0]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	58024400 	.word	0x58024400
 800b650:	08010588 	.word	0x08010588
 800b654:	24000288 	.word	0x24000288
 800b658:	24000284 	.word	0x24000284

0800b65c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b660:	f7ff ffcc 	bl	800b5fc <HAL_RCC_GetHCLKFreq>
 800b664:	4602      	mov	r2, r0
 800b666:	4b06      	ldr	r3, [pc, #24]	; (800b680 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b668:	69db      	ldr	r3, [r3, #28]
 800b66a:	091b      	lsrs	r3, r3, #4
 800b66c:	f003 0307 	and.w	r3, r3, #7
 800b670:	4904      	ldr	r1, [pc, #16]	; (800b684 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b672:	5ccb      	ldrb	r3, [r1, r3]
 800b674:	f003 031f 	and.w	r3, r3, #31
 800b678:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	58024400 	.word	0x58024400
 800b684:	08010588 	.word	0x08010588

0800b688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b68c:	f7ff ffb6 	bl	800b5fc <HAL_RCC_GetHCLKFreq>
 800b690:	4602      	mov	r2, r0
 800b692:	4b06      	ldr	r3, [pc, #24]	; (800b6ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800b694:	69db      	ldr	r3, [r3, #28]
 800b696:	0a1b      	lsrs	r3, r3, #8
 800b698:	f003 0307 	and.w	r3, r3, #7
 800b69c:	4904      	ldr	r1, [pc, #16]	; (800b6b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b69e:	5ccb      	ldrb	r3, [r1, r3]
 800b6a0:	f003 031f 	and.w	r3, r3, #31
 800b6a4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	58024400 	.word	0x58024400
 800b6b0:	08010588 	.word	0x08010588

0800b6b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b6b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6b8:	b0c8      	sub	sp, #288	; 0x120
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b6cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b6d8:	2500      	movs	r5, #0
 800b6da:	ea54 0305 	orrs.w	r3, r4, r5
 800b6de:	d049      	beq.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b6e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b6ea:	d02f      	beq.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b6ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b6f0:	d828      	bhi.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b6f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6f6:	d01a      	beq.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b6f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6fc:	d822      	bhi.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d003      	beq.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b706:	d007      	beq.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b708:	e01c      	b.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b70a:	4ba7      	ldr	r3, [pc, #668]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b70e:	4aa6      	ldr	r2, [pc, #664]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b714:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b716:	e01a      	b.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b71c:	3308      	adds	r3, #8
 800b71e:	2102      	movs	r1, #2
 800b720:	4618      	mov	r0, r3
 800b722:	f001 fc43 	bl	800cfac <RCCEx_PLL2_Config>
 800b726:	4603      	mov	r3, r0
 800b728:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b72c:	e00f      	b.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b72e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b732:	3328      	adds	r3, #40	; 0x28
 800b734:	2102      	movs	r1, #2
 800b736:	4618      	mov	r0, r3
 800b738:	f001 fcea 	bl	800d110 <RCCEx_PLL3_Config>
 800b73c:	4603      	mov	r3, r0
 800b73e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b742:	e004      	b.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b744:	2301      	movs	r3, #1
 800b746:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b74a:	e000      	b.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b74c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b74e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b752:	2b00      	cmp	r3, #0
 800b754:	d10a      	bne.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b756:	4b94      	ldr	r3, [pc, #592]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b75a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b75e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b764:	4a90      	ldr	r2, [pc, #576]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b766:	430b      	orrs	r3, r1
 800b768:	6513      	str	r3, [r2, #80]	; 0x50
 800b76a:	e003      	b.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b76c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b770:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b780:	f04f 0900 	mov.w	r9, #0
 800b784:	ea58 0309 	orrs.w	r3, r8, r9
 800b788:	d047      	beq.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b78a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b78e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b790:	2b04      	cmp	r3, #4
 800b792:	d82a      	bhi.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b794:	a201      	add	r2, pc, #4	; (adr r2, 800b79c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b79a:	bf00      	nop
 800b79c:	0800b7b1 	.word	0x0800b7b1
 800b7a0:	0800b7bf 	.word	0x0800b7bf
 800b7a4:	0800b7d5 	.word	0x0800b7d5
 800b7a8:	0800b7f3 	.word	0x0800b7f3
 800b7ac:	0800b7f3 	.word	0x0800b7f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7b0:	4b7d      	ldr	r3, [pc, #500]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b4:	4a7c      	ldr	r2, [pc, #496]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7bc:	e01a      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7c2:	3308      	adds	r3, #8
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f001 fbf0 	bl	800cfac <RCCEx_PLL2_Config>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7d2:	e00f      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7d8:	3328      	adds	r3, #40	; 0x28
 800b7da:	2100      	movs	r1, #0
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f001 fc97 	bl	800d110 <RCCEx_PLL3_Config>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7e8:	e004      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b7f0:	e000      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b7f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d10a      	bne.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b7fc:	4b6a      	ldr	r3, [pc, #424]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b800:	f023 0107 	bic.w	r1, r3, #7
 800b804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b80a:	4a67      	ldr	r2, [pc, #412]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b80c:	430b      	orrs	r3, r1
 800b80e:	6513      	str	r3, [r2, #80]	; 0x50
 800b810:	e003      	b.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b812:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b816:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b81a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b822:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b826:	f04f 0b00 	mov.w	fp, #0
 800b82a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b82e:	d054      	beq.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b836:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b83a:	d036      	beq.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b83c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b840:	d82f      	bhi.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b846:	d032      	beq.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b84c:	d829      	bhi.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b84e:	2bc0      	cmp	r3, #192	; 0xc0
 800b850:	d02f      	beq.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b852:	2bc0      	cmp	r3, #192	; 0xc0
 800b854:	d825      	bhi.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b856:	2b80      	cmp	r3, #128	; 0x80
 800b858:	d018      	beq.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b85a:	2b80      	cmp	r3, #128	; 0x80
 800b85c:	d821      	bhi.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d002      	beq.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b862:	2b40      	cmp	r3, #64	; 0x40
 800b864:	d007      	beq.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b866:	e01c      	b.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b868:	4b4f      	ldr	r3, [pc, #316]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86c:	4a4e      	ldr	r2, [pc, #312]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b86e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b874:	e01e      	b.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b87a:	3308      	adds	r3, #8
 800b87c:	2100      	movs	r1, #0
 800b87e:	4618      	mov	r0, r3
 800b880:	f001 fb94 	bl	800cfac <RCCEx_PLL2_Config>
 800b884:	4603      	mov	r3, r0
 800b886:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b88a:	e013      	b.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b88c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b890:	3328      	adds	r3, #40	; 0x28
 800b892:	2100      	movs	r1, #0
 800b894:	4618      	mov	r0, r3
 800b896:	f001 fc3b 	bl	800d110 <RCCEx_PLL3_Config>
 800b89a:	4603      	mov	r3, r0
 800b89c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b8a0:	e008      	b.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b8a8:	e004      	b.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b8aa:	bf00      	nop
 800b8ac:	e002      	b.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b8ae:	bf00      	nop
 800b8b0:	e000      	b.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b8b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d10a      	bne.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b8bc:	4b3a      	ldr	r3, [pc, #232]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8c0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b8c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8ca:	4a37      	ldr	r2, [pc, #220]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8cc:	430b      	orrs	r3, r1
 800b8ce:	6513      	str	r3, [r2, #80]	; 0x50
 800b8d0:	e003      	b.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b8da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b8e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b8f0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	d05c      	beq.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b8fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b900:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b904:	d03b      	beq.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b906:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b90a:	d834      	bhi.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b90c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b910:	d037      	beq.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b916:	d82e      	bhi.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b918:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b91c:	d033      	beq.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b91e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b922:	d828      	bhi.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b928:	d01a      	beq.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b92a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b92e:	d822      	bhi.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b930:	2b00      	cmp	r3, #0
 800b932:	d003      	beq.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b938:	d007      	beq.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b93a:	e01c      	b.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b93c:	4b1a      	ldr	r3, [pc, #104]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b940:	4a19      	ldr	r2, [pc, #100]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b946:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b948:	e01e      	b.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b94a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b94e:	3308      	adds	r3, #8
 800b950:	2100      	movs	r1, #0
 800b952:	4618      	mov	r0, r3
 800b954:	f001 fb2a 	bl	800cfac <RCCEx_PLL2_Config>
 800b958:	4603      	mov	r3, r0
 800b95a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b95e:	e013      	b.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b964:	3328      	adds	r3, #40	; 0x28
 800b966:	2100      	movs	r1, #0
 800b968:	4618      	mov	r0, r3
 800b96a:	f001 fbd1 	bl	800d110 <RCCEx_PLL3_Config>
 800b96e:	4603      	mov	r3, r0
 800b970:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b974:	e008      	b.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b976:	2301      	movs	r3, #1
 800b978:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b97c:	e004      	b.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b97e:	bf00      	nop
 800b980:	e002      	b.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b982:	bf00      	nop
 800b984:	e000      	b.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b986:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b988:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10d      	bne.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b990:	4b05      	ldr	r3, [pc, #20]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b994:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800b998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b99c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b99e:	4a02      	ldr	r2, [pc, #8]	; (800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9a0:	430b      	orrs	r3, r1
 800b9a2:	6513      	str	r3, [r2, #80]	; 0x50
 800b9a4:	e006      	b.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b9a6:	bf00      	nop
 800b9a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b9b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b9b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9bc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b9c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b9ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	d03a      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b9d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9da:	2b30      	cmp	r3, #48	; 0x30
 800b9dc:	d01f      	beq.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b9de:	2b30      	cmp	r3, #48	; 0x30
 800b9e0:	d819      	bhi.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b9e2:	2b20      	cmp	r3, #32
 800b9e4:	d00c      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b9e6:	2b20      	cmp	r3, #32
 800b9e8:	d815      	bhi.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d019      	beq.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b9ee:	2b10      	cmp	r3, #16
 800b9f0:	d111      	bne.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9f2:	4bae      	ldr	r3, [pc, #696]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f6:	4aad      	ldr	r2, [pc, #692]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b9fe:	e011      	b.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba04:	3308      	adds	r3, #8
 800ba06:	2102      	movs	r1, #2
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f001 facf 	bl	800cfac <RCCEx_PLL2_Config>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ba14:	e006      	b.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ba1c:	e002      	b.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800ba1e:	bf00      	nop
 800ba20:	e000      	b.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800ba22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d10a      	bne.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ba2c:	4b9f      	ldr	r3, [pc, #636]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba30:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ba34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba3a:	4a9c      	ldr	r2, [pc, #624]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba3c:	430b      	orrs	r3, r1
 800ba3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba40:	e003      	b.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ba4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba52:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ba56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ba60:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ba64:	460b      	mov	r3, r1
 800ba66:	4313      	orrs	r3, r2
 800ba68:	d051      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ba6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba74:	d035      	beq.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800ba76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba7a:	d82e      	bhi.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ba7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba80:	d031      	beq.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800ba82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba86:	d828      	bhi.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ba88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba8c:	d01a      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800ba8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba92:	d822      	bhi.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d003      	beq.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800ba98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba9c:	d007      	beq.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800ba9e:	e01c      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baa0:	4b82      	ldr	r3, [pc, #520]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800baa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa4:	4a81      	ldr	r2, [pc, #516]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800baa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800baaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800baac:	e01c      	b.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800baae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bab2:	3308      	adds	r3, #8
 800bab4:	2100      	movs	r1, #0
 800bab6:	4618      	mov	r0, r3
 800bab8:	f001 fa78 	bl	800cfac <RCCEx_PLL2_Config>
 800babc:	4603      	mov	r3, r0
 800babe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bac2:	e011      	b.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bac8:	3328      	adds	r3, #40	; 0x28
 800baca:	2100      	movs	r1, #0
 800bacc:	4618      	mov	r0, r3
 800bace:	f001 fb1f 	bl	800d110 <RCCEx_PLL3_Config>
 800bad2:	4603      	mov	r3, r0
 800bad4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bad8:	e006      	b.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bae0:	e002      	b.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bae2:	bf00      	nop
 800bae4:	e000      	b.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bae8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10a      	bne.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800baf0:	4b6e      	ldr	r3, [pc, #440]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800baf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baf4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800baf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bafc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bafe:	4a6b      	ldr	r2, [pc, #428]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb00:	430b      	orrs	r3, r1
 800bb02:	6513      	str	r3, [r2, #80]	; 0x50
 800bb04:	e003      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb0a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bb0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb16:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800bb1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bb1e:	2300      	movs	r3, #0
 800bb20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bb24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800bb28:	460b      	mov	r3, r1
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	d053      	beq.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bb2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb38:	d033      	beq.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800bb3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb3e:	d82c      	bhi.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb44:	d02f      	beq.n	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800bb46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb4a:	d826      	bhi.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb50:	d02b      	beq.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bb52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb56:	d820      	bhi.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb5c:	d012      	beq.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bb5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb62:	d81a      	bhi.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d022      	beq.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800bb68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb6c:	d115      	bne.n	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb72:	3308      	adds	r3, #8
 800bb74:	2101      	movs	r1, #1
 800bb76:	4618      	mov	r0, r3
 800bb78:	f001 fa18 	bl	800cfac <RCCEx_PLL2_Config>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bb82:	e015      	b.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb88:	3328      	adds	r3, #40	; 0x28
 800bb8a:	2101      	movs	r1, #1
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f001 fabf 	bl	800d110 <RCCEx_PLL3_Config>
 800bb92:	4603      	mov	r3, r0
 800bb94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bb98:	e00a      	b.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bba0:	e006      	b.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bba2:	bf00      	nop
 800bba4:	e004      	b.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bba6:	bf00      	nop
 800bba8:	e002      	b.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bbaa:	bf00      	nop
 800bbac:	e000      	b.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bbae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10a      	bne.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bbb8:	4b3c      	ldr	r3, [pc, #240]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbbc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800bbc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbc6:	4a39      	ldr	r2, [pc, #228]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbc8:	430b      	orrs	r3, r1
 800bbca:	6513      	str	r3, [r2, #80]	; 0x50
 800bbcc:	e003      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbd2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bbd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbde:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800bbe2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bbec:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	d060      	beq.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bbf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bbfe:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800bc02:	d039      	beq.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800bc04:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800bc08:	d832      	bhi.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc0e:	d035      	beq.n	800bc7c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bc10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc14:	d82c      	bhi.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc1a:	d031      	beq.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bc1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc20:	d826      	bhi.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc26:	d02d      	beq.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bc28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc2c:	d820      	bhi.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc32:	d012      	beq.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bc34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc38:	d81a      	bhi.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d024      	beq.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bc3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc42:	d115      	bne.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc48:	3308      	adds	r3, #8
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f001 f9ad 	bl	800cfac <RCCEx_PLL2_Config>
 800bc52:	4603      	mov	r3, r0
 800bc54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bc58:	e017      	b.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc5e:	3328      	adds	r3, #40	; 0x28
 800bc60:	2101      	movs	r1, #1
 800bc62:	4618      	mov	r0, r3
 800bc64:	f001 fa54 	bl	800d110 <RCCEx_PLL3_Config>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bc6e:	e00c      	b.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bc70:	2301      	movs	r3, #1
 800bc72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bc76:	e008      	b.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc78:	bf00      	nop
 800bc7a:	e006      	b.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc7c:	bf00      	nop
 800bc7e:	e004      	b.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc80:	bf00      	nop
 800bc82:	e002      	b.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc84:	bf00      	nop
 800bc86:	e000      	b.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d10e      	bne.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bc92:	4b06      	ldr	r3, [pc, #24]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc96:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bc9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bca2:	4a02      	ldr	r2, [pc, #8]	; (800bcac <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bca4:	430b      	orrs	r3, r1
 800bca6:	6593      	str	r3, [r2, #88]	; 0x58
 800bca8:	e006      	b.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bcaa:	bf00      	nop
 800bcac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bcb4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bcb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bcc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bcc8:	2300      	movs	r3, #0
 800bcca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bcce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	d037      	beq.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bcd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bce2:	d00e      	beq.n	800bd02 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bce8:	d816      	bhi.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d018      	beq.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bcee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcf2:	d111      	bne.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcf4:	4bc4      	ldr	r3, [pc, #784]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf8:	4ac3      	ldr	r2, [pc, #780]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bd00:	e00f      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd06:	3308      	adds	r3, #8
 800bd08:	2101      	movs	r1, #1
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f001 f94e 	bl	800cfac <RCCEx_PLL2_Config>
 800bd10:	4603      	mov	r3, r0
 800bd12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bd16:	e004      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bd1e:	e000      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bd20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10a      	bne.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bd2a:	4bb7      	ldr	r3, [pc, #732]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd2e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bd32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd38:	4ab3      	ldr	r2, [pc, #716]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd3a:	430b      	orrs	r3, r1
 800bd3c:	6513      	str	r3, [r2, #80]	; 0x50
 800bd3e:	e003      	b.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bd48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd50:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bd54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd58:	2300      	movs	r3, #0
 800bd5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bd5e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bd62:	460b      	mov	r3, r1
 800bd64:	4313      	orrs	r3, r2
 800bd66:	d039      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bd68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd6e:	2b03      	cmp	r3, #3
 800bd70:	d81c      	bhi.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bd72:	a201      	add	r2, pc, #4	; (adr r2, 800bd78 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd78:	0800bdb5 	.word	0x0800bdb5
 800bd7c:	0800bd89 	.word	0x0800bd89
 800bd80:	0800bd97 	.word	0x0800bd97
 800bd84:	0800bdb5 	.word	0x0800bdb5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd88:	4b9f      	ldr	r3, [pc, #636]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd8c:	4a9e      	ldr	r2, [pc, #632]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bd94:	e00f      	b.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd9a:	3308      	adds	r3, #8
 800bd9c:	2102      	movs	r1, #2
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f001 f904 	bl	800cfac <RCCEx_PLL2_Config>
 800bda4:	4603      	mov	r3, r0
 800bda6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bdaa:	e004      	b.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bdac:	2301      	movs	r3, #1
 800bdae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bdb2:	e000      	b.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bdb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10a      	bne.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bdbe:	4b92      	ldr	r3, [pc, #584]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdc2:	f023 0103 	bic.w	r1, r3, #3
 800bdc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdcc:	4a8e      	ldr	r2, [pc, #568]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdce:	430b      	orrs	r3, r1
 800bdd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bdd2:	e003      	b.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bdd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bde8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bdec:	2300      	movs	r3, #0
 800bdee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bdf2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	f000 8099 	beq.w	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bdfe:	4b83      	ldr	r3, [pc, #524]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a82      	ldr	r2, [pc, #520]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800be04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800be0a:	f7f8 fb83 	bl	8004514 <HAL_GetTick>
 800be0e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be12:	e00b      	b.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be14:	f7f8 fb7e 	bl	8004514 <HAL_GetTick>
 800be18:	4602      	mov	r2, r0
 800be1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800be1e:	1ad3      	subs	r3, r2, r3
 800be20:	2b64      	cmp	r3, #100	; 0x64
 800be22:	d903      	bls.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800be24:	2303      	movs	r3, #3
 800be26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800be2a:	e005      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be2c:	4b77      	ldr	r3, [pc, #476]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be34:	2b00      	cmp	r3, #0
 800be36:	d0ed      	beq.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800be38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d173      	bne.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800be40:	4b71      	ldr	r3, [pc, #452]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800be4c:	4053      	eors	r3, r2
 800be4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be52:	2b00      	cmp	r3, #0
 800be54:	d015      	beq.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800be56:	4b6c      	ldr	r3, [pc, #432]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be5e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800be62:	4b69      	ldr	r3, [pc, #420]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be66:	4a68      	ldr	r2, [pc, #416]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be6c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800be6e:	4b66      	ldr	r3, [pc, #408]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be72:	4a65      	ldr	r2, [pc, #404]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be78:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800be7a:	4a63      	ldr	r2, [pc, #396]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be80:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800be82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800be8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be8e:	d118      	bne.n	800bec2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be90:	f7f8 fb40 	bl	8004514 <HAL_GetTick>
 800be94:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be98:	e00d      	b.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be9a:	f7f8 fb3b 	bl	8004514 <HAL_GetTick>
 800be9e:	4602      	mov	r2, r0
 800bea0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bea4:	1ad2      	subs	r2, r2, r3
 800bea6:	f241 3388 	movw	r3, #5000	; 0x1388
 800beaa:	429a      	cmp	r2, r3
 800beac:	d903      	bls.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800beae:	2303      	movs	r3, #3
 800beb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800beb4:	e005      	b.n	800bec2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800beb6:	4b54      	ldr	r3, [pc, #336]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800beb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beba:	f003 0302 	and.w	r3, r3, #2
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d0eb      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bec2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d129      	bne.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800beca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bece:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800beda:	d10e      	bne.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bedc:	4b4a      	ldr	r3, [pc, #296]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bede:	691b      	ldr	r3, [r3, #16]
 800bee0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bee8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800beec:	091a      	lsrs	r2, r3, #4
 800beee:	4b48      	ldr	r3, [pc, #288]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bef0:	4013      	ands	r3, r2
 800bef2:	4a45      	ldr	r2, [pc, #276]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bef4:	430b      	orrs	r3, r1
 800bef6:	6113      	str	r3, [r2, #16]
 800bef8:	e005      	b.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800befa:	4b43      	ldr	r3, [pc, #268]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800befc:	691b      	ldr	r3, [r3, #16]
 800befe:	4a42      	ldr	r2, [pc, #264]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bf04:	6113      	str	r3, [r2, #16]
 800bf06:	4b40      	ldr	r3, [pc, #256]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf08:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bf0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bf12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf16:	4a3c      	ldr	r2, [pc, #240]	; (800c008 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf18:	430b      	orrs	r3, r1
 800bf1a:	6713      	str	r3, [r2, #112]	; 0x70
 800bf1c:	e008      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bf1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf22:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800bf26:	e003      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bf30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf38:	f002 0301 	and.w	r3, r2, #1
 800bf3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf40:	2300      	movs	r3, #0
 800bf42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	f000 8090 	beq.w	800c072 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bf52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf5a:	2b28      	cmp	r3, #40	; 0x28
 800bf5c:	d870      	bhi.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bf5e:	a201      	add	r2, pc, #4	; (adr r2, 800bf64 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bf60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf64:	0800c049 	.word	0x0800c049
 800bf68:	0800c041 	.word	0x0800c041
 800bf6c:	0800c041 	.word	0x0800c041
 800bf70:	0800c041 	.word	0x0800c041
 800bf74:	0800c041 	.word	0x0800c041
 800bf78:	0800c041 	.word	0x0800c041
 800bf7c:	0800c041 	.word	0x0800c041
 800bf80:	0800c041 	.word	0x0800c041
 800bf84:	0800c015 	.word	0x0800c015
 800bf88:	0800c041 	.word	0x0800c041
 800bf8c:	0800c041 	.word	0x0800c041
 800bf90:	0800c041 	.word	0x0800c041
 800bf94:	0800c041 	.word	0x0800c041
 800bf98:	0800c041 	.word	0x0800c041
 800bf9c:	0800c041 	.word	0x0800c041
 800bfa0:	0800c041 	.word	0x0800c041
 800bfa4:	0800c02b 	.word	0x0800c02b
 800bfa8:	0800c041 	.word	0x0800c041
 800bfac:	0800c041 	.word	0x0800c041
 800bfb0:	0800c041 	.word	0x0800c041
 800bfb4:	0800c041 	.word	0x0800c041
 800bfb8:	0800c041 	.word	0x0800c041
 800bfbc:	0800c041 	.word	0x0800c041
 800bfc0:	0800c041 	.word	0x0800c041
 800bfc4:	0800c049 	.word	0x0800c049
 800bfc8:	0800c041 	.word	0x0800c041
 800bfcc:	0800c041 	.word	0x0800c041
 800bfd0:	0800c041 	.word	0x0800c041
 800bfd4:	0800c041 	.word	0x0800c041
 800bfd8:	0800c041 	.word	0x0800c041
 800bfdc:	0800c041 	.word	0x0800c041
 800bfe0:	0800c041 	.word	0x0800c041
 800bfe4:	0800c049 	.word	0x0800c049
 800bfe8:	0800c041 	.word	0x0800c041
 800bfec:	0800c041 	.word	0x0800c041
 800bff0:	0800c041 	.word	0x0800c041
 800bff4:	0800c041 	.word	0x0800c041
 800bff8:	0800c041 	.word	0x0800c041
 800bffc:	0800c041 	.word	0x0800c041
 800c000:	0800c041 	.word	0x0800c041
 800c004:	0800c049 	.word	0x0800c049
 800c008:	58024400 	.word	0x58024400
 800c00c:	58024800 	.word	0x58024800
 800c010:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c014:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c018:	3308      	adds	r3, #8
 800c01a:	2101      	movs	r1, #1
 800c01c:	4618      	mov	r0, r3
 800c01e:	f000 ffc5 	bl	800cfac <RCCEx_PLL2_Config>
 800c022:	4603      	mov	r3, r0
 800c024:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c028:	e00f      	b.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c02a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c02e:	3328      	adds	r3, #40	; 0x28
 800c030:	2101      	movs	r1, #1
 800c032:	4618      	mov	r0, r3
 800c034:	f001 f86c 	bl	800d110 <RCCEx_PLL3_Config>
 800c038:	4603      	mov	r3, r0
 800c03a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c03e:	e004      	b.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c040:	2301      	movs	r3, #1
 800c042:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c046:	e000      	b.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c04a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d10b      	bne.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c052:	4bc0      	ldr	r3, [pc, #768]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c056:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c05a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c05e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c062:	4abc      	ldr	r2, [pc, #752]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c064:	430b      	orrs	r3, r1
 800c066:	6553      	str	r3, [r2, #84]	; 0x54
 800c068:	e003      	b.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c06a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c06e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07a:	f002 0302 	and.w	r3, r2, #2
 800c07e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c082:	2300      	movs	r3, #0
 800c084:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c088:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800c08c:	460b      	mov	r3, r1
 800c08e:	4313      	orrs	r3, r2
 800c090:	d043      	beq.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c09a:	2b05      	cmp	r3, #5
 800c09c:	d824      	bhi.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800c09e:	a201      	add	r2, pc, #4	; (adr r2, 800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800c0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a4:	0800c0f1 	.word	0x0800c0f1
 800c0a8:	0800c0bd 	.word	0x0800c0bd
 800c0ac:	0800c0d3 	.word	0x0800c0d3
 800c0b0:	0800c0f1 	.word	0x0800c0f1
 800c0b4:	0800c0f1 	.word	0x0800c0f1
 800c0b8:	0800c0f1 	.word	0x0800c0f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0c0:	3308      	adds	r3, #8
 800c0c2:	2101      	movs	r1, #1
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f000 ff71 	bl	800cfac <RCCEx_PLL2_Config>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c0d0:	e00f      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0d6:	3328      	adds	r3, #40	; 0x28
 800c0d8:	2101      	movs	r1, #1
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f001 f818 	bl	800d110 <RCCEx_PLL3_Config>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c0e6:	e004      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c0ee:	e000      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800c0f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10b      	bne.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c0fa:	4b96      	ldr	r3, [pc, #600]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0fe:	f023 0107 	bic.w	r1, r3, #7
 800c102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c10a:	4a92      	ldr	r2, [pc, #584]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c10c:	430b      	orrs	r3, r1
 800c10e:	6553      	str	r3, [r2, #84]	; 0x54
 800c110:	e003      	b.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c112:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c116:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c11a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c122:	f002 0304 	and.w	r3, r2, #4
 800c126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c12a:	2300      	movs	r3, #0
 800c12c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c130:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c134:	460b      	mov	r3, r1
 800c136:	4313      	orrs	r3, r2
 800c138:	d043      	beq.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c13a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c13e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c142:	2b05      	cmp	r3, #5
 800c144:	d824      	bhi.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800c146:	a201      	add	r2, pc, #4	; (adr r2, 800c14c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800c148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c14c:	0800c199 	.word	0x0800c199
 800c150:	0800c165 	.word	0x0800c165
 800c154:	0800c17b 	.word	0x0800c17b
 800c158:	0800c199 	.word	0x0800c199
 800c15c:	0800c199 	.word	0x0800c199
 800c160:	0800c199 	.word	0x0800c199
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c164:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c168:	3308      	adds	r3, #8
 800c16a:	2101      	movs	r1, #1
 800c16c:	4618      	mov	r0, r3
 800c16e:	f000 ff1d 	bl	800cfac <RCCEx_PLL2_Config>
 800c172:	4603      	mov	r3, r0
 800c174:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c178:	e00f      	b.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c17a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c17e:	3328      	adds	r3, #40	; 0x28
 800c180:	2101      	movs	r1, #1
 800c182:	4618      	mov	r0, r3
 800c184:	f000 ffc4 	bl	800d110 <RCCEx_PLL3_Config>
 800c188:	4603      	mov	r3, r0
 800c18a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c18e:	e004      	b.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c190:	2301      	movs	r3, #1
 800c192:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c196:	e000      	b.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800c198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c19a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d10b      	bne.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c1a2:	4b6c      	ldr	r3, [pc, #432]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1a6:	f023 0107 	bic.w	r1, r3, #7
 800c1aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c1b2:	4a68      	ldr	r2, [pc, #416]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1b4:	430b      	orrs	r3, r1
 800c1b6:	6593      	str	r3, [r2, #88]	; 0x58
 800c1b8:	e003      	b.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c1be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c1c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ca:	f002 0320 	and.w	r3, r2, #32
 800c1ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c1d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c1dc:	460b      	mov	r3, r1
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	d055      	beq.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c1e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c1ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1ee:	d033      	beq.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c1f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1f4:	d82c      	bhi.n	800c250 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c1f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1fa:	d02f      	beq.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c1fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c200:	d826      	bhi.n	800c250 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c202:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c206:	d02b      	beq.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c208:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c20c:	d820      	bhi.n	800c250 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c20e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c212:	d012      	beq.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c218:	d81a      	bhi.n	800c250 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d022      	beq.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c21e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c222:	d115      	bne.n	800c250 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c224:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c228:	3308      	adds	r3, #8
 800c22a:	2100      	movs	r1, #0
 800c22c:	4618      	mov	r0, r3
 800c22e:	f000 febd 	bl	800cfac <RCCEx_PLL2_Config>
 800c232:	4603      	mov	r3, r0
 800c234:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c238:	e015      	b.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c23a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c23e:	3328      	adds	r3, #40	; 0x28
 800c240:	2102      	movs	r1, #2
 800c242:	4618      	mov	r0, r3
 800c244:	f000 ff64 	bl	800d110 <RCCEx_PLL3_Config>
 800c248:	4603      	mov	r3, r0
 800c24a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c24e:	e00a      	b.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c250:	2301      	movs	r3, #1
 800c252:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c256:	e006      	b.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c258:	bf00      	nop
 800c25a:	e004      	b.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c25c:	bf00      	nop
 800c25e:	e002      	b.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c260:	bf00      	nop
 800c262:	e000      	b.n	800c266 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c264:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c266:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d10b      	bne.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c26e:	4b39      	ldr	r3, [pc, #228]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c272:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c27a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c27e:	4a35      	ldr	r2, [pc, #212]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c280:	430b      	orrs	r3, r1
 800c282:	6553      	str	r3, [r2, #84]	; 0x54
 800c284:	e003      	b.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c286:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c28a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c28e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c296:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c29a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c29e:	2300      	movs	r3, #0
 800c2a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c2a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	d058      	beq.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c2ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c2b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c2ba:	d033      	beq.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c2bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c2c0:	d82c      	bhi.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c2c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2c6:	d02f      	beq.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c2c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2cc:	d826      	bhi.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c2ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c2d2:	d02b      	beq.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c2d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c2d8:	d820      	bhi.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c2da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2de:	d012      	beq.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c2e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2e4:	d81a      	bhi.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d022      	beq.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c2ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2ee:	d115      	bne.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2f4:	3308      	adds	r3, #8
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f000 fe57 	bl	800cfac <RCCEx_PLL2_Config>
 800c2fe:	4603      	mov	r3, r0
 800c300:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c304:	e015      	b.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c30a:	3328      	adds	r3, #40	; 0x28
 800c30c:	2102      	movs	r1, #2
 800c30e:	4618      	mov	r0, r3
 800c310:	f000 fefe 	bl	800d110 <RCCEx_PLL3_Config>
 800c314:	4603      	mov	r3, r0
 800c316:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c31a:	e00a      	b.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c31c:	2301      	movs	r3, #1
 800c31e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c322:	e006      	b.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c324:	bf00      	nop
 800c326:	e004      	b.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c328:	bf00      	nop
 800c32a:	e002      	b.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c32c:	bf00      	nop
 800c32e:	e000      	b.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c330:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c332:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c336:	2b00      	cmp	r3, #0
 800c338:	d10e      	bne.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c33a:	4b06      	ldr	r3, [pc, #24]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c33c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c33e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c346:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c34a:	4a02      	ldr	r2, [pc, #8]	; (800c354 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c34c:	430b      	orrs	r3, r1
 800c34e:	6593      	str	r3, [r2, #88]	; 0x58
 800c350:	e006      	b.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c352:	bf00      	nop
 800c354:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c358:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c35c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c368:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c36c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c370:	2300      	movs	r3, #0
 800c372:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c376:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c37a:	460b      	mov	r3, r1
 800c37c:	4313      	orrs	r3, r2
 800c37e:	d055      	beq.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c380:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c384:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c388:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c38c:	d033      	beq.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c38e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c392:	d82c      	bhi.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c398:	d02f      	beq.n	800c3fa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c39a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c39e:	d826      	bhi.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c3a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c3a4:	d02b      	beq.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c3a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c3aa:	d820      	bhi.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c3ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3b0:	d012      	beq.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c3b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3b6:	d81a      	bhi.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d022      	beq.n	800c402 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c3bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3c0:	d115      	bne.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3c6:	3308      	adds	r3, #8
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f000 fdee 	bl	800cfac <RCCEx_PLL2_Config>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c3d6:	e015      	b.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3dc:	3328      	adds	r3, #40	; 0x28
 800c3de:	2102      	movs	r1, #2
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f000 fe95 	bl	800d110 <RCCEx_PLL3_Config>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c3ec:	e00a      	b.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c3f4:	e006      	b.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c3f6:	bf00      	nop
 800c3f8:	e004      	b.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c3fa:	bf00      	nop
 800c3fc:	e002      	b.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c3fe:	bf00      	nop
 800c400:	e000      	b.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c402:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c404:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d10b      	bne.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c40c:	4ba1      	ldr	r3, [pc, #644]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c40e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c410:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c418:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c41c:	4a9d      	ldr	r2, [pc, #628]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c41e:	430b      	orrs	r3, r1
 800c420:	6593      	str	r3, [r2, #88]	; 0x58
 800c422:	e003      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c424:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c428:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c42c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c434:	f002 0308 	and.w	r3, r2, #8
 800c438:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c43c:	2300      	movs	r3, #0
 800c43e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c442:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c446:	460b      	mov	r3, r1
 800c448:	4313      	orrs	r3, r2
 800c44a:	d01e      	beq.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c44c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c458:	d10c      	bne.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c45a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c45e:	3328      	adds	r3, #40	; 0x28
 800c460:	2102      	movs	r1, #2
 800c462:	4618      	mov	r0, r3
 800c464:	f000 fe54 	bl	800d110 <RCCEx_PLL3_Config>
 800c468:	4603      	mov	r3, r0
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d002      	beq.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c46e:	2301      	movs	r3, #1
 800c470:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c474:	4b87      	ldr	r3, [pc, #540]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c478:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c47c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c484:	4a83      	ldr	r2, [pc, #524]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c486:	430b      	orrs	r3, r1
 800c488:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c48a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c492:	f002 0310 	and.w	r3, r2, #16
 800c496:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c49a:	2300      	movs	r3, #0
 800c49c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c4a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	d01e      	beq.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c4aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c4b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4b6:	d10c      	bne.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c4b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4bc:	3328      	adds	r3, #40	; 0x28
 800c4be:	2102      	movs	r1, #2
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f000 fe25 	bl	800d110 <RCCEx_PLL3_Config>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c4d2:	4b70      	ldr	r3, [pc, #448]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c4da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c4e2:	4a6c      	ldr	r2, [pc, #432]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4e4:	430b      	orrs	r3, r1
 800c4e6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c4e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c4f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c4fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c502:	460b      	mov	r3, r1
 800c504:	4313      	orrs	r3, r2
 800c506:	d03e      	beq.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c50c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c514:	d022      	beq.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c516:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c51a:	d81b      	bhi.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d003      	beq.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c524:	d00b      	beq.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c526:	e015      	b.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c528:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c52c:	3308      	adds	r3, #8
 800c52e:	2100      	movs	r1, #0
 800c530:	4618      	mov	r0, r3
 800c532:	f000 fd3b 	bl	800cfac <RCCEx_PLL2_Config>
 800c536:	4603      	mov	r3, r0
 800c538:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c53c:	e00f      	b.n	800c55e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c53e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c542:	3328      	adds	r3, #40	; 0x28
 800c544:	2102      	movs	r1, #2
 800c546:	4618      	mov	r0, r3
 800c548:	f000 fde2 	bl	800d110 <RCCEx_PLL3_Config>
 800c54c:	4603      	mov	r3, r0
 800c54e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c552:	e004      	b.n	800c55e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c554:	2301      	movs	r3, #1
 800c556:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c55a:	e000      	b.n	800c55e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c55c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c55e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c562:	2b00      	cmp	r3, #0
 800c564:	d10b      	bne.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c566:	4b4b      	ldr	r3, [pc, #300]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c56a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c56e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c572:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c576:	4a47      	ldr	r2, [pc, #284]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c578:	430b      	orrs	r3, r1
 800c57a:	6593      	str	r3, [r2, #88]	; 0x58
 800c57c:	e003      	b.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c57e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c582:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c586:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c592:	67bb      	str	r3, [r7, #120]	; 0x78
 800c594:	2300      	movs	r3, #0
 800c596:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c598:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c59c:	460b      	mov	r3, r1
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	d03b      	beq.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c5a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c5ae:	d01f      	beq.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c5b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c5b4:	d818      	bhi.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c5b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5ba:	d003      	beq.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c5bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c5c0:	d007      	beq.n	800c5d2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c5c2:	e011      	b.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5c4:	4b33      	ldr	r3, [pc, #204]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c8:	4a32      	ldr	r2, [pc, #200]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c5d0:	e00f      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c5d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5d6:	3328      	adds	r3, #40	; 0x28
 800c5d8:	2101      	movs	r1, #1
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f000 fd98 	bl	800d110 <RCCEx_PLL3_Config>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c5e6:	e004      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c5ee:	e000      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c5f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d10b      	bne.n	800c612 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c5fa:	4b26      	ldr	r3, [pc, #152]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c60a:	4a22      	ldr	r2, [pc, #136]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c60c:	430b      	orrs	r3, r1
 800c60e:	6553      	str	r3, [r2, #84]	; 0x54
 800c610:	e003      	b.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c612:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c616:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c61a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c622:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c626:	673b      	str	r3, [r7, #112]	; 0x70
 800c628:	2300      	movs	r3, #0
 800c62a:	677b      	str	r3, [r7, #116]	; 0x74
 800c62c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c630:	460b      	mov	r3, r1
 800c632:	4313      	orrs	r3, r2
 800c634:	d034      	beq.n	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c63a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d003      	beq.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c644:	d007      	beq.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c646:	e011      	b.n	800c66c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c648:	4b12      	ldr	r3, [pc, #72]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64c:	4a11      	ldr	r2, [pc, #68]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c64e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c652:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c654:	e00e      	b.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c65a:	3308      	adds	r3, #8
 800c65c:	2102      	movs	r1, #2
 800c65e:	4618      	mov	r0, r3
 800c660:	f000 fca4 	bl	800cfac <RCCEx_PLL2_Config>
 800c664:	4603      	mov	r3, r0
 800c666:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c66a:	e003      	b.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c66c:	2301      	movs	r3, #1
 800c66e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c672:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c674:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d10d      	bne.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c67c:	4b05      	ldr	r3, [pc, #20]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c67e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c680:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c68a:	4a02      	ldr	r2, [pc, #8]	; (800c694 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c68c:	430b      	orrs	r3, r1
 800c68e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c690:	e006      	b.n	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c692:	bf00      	nop
 800c694:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c698:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c69c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c6a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c6ac:	66bb      	str	r3, [r7, #104]	; 0x68
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c6b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	d00c      	beq.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c6bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6c0:	3328      	adds	r3, #40	; 0x28
 800c6c2:	2102      	movs	r1, #2
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f000 fd23 	bl	800d110 <RCCEx_PLL3_Config>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d002      	beq.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c6d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6de:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c6e2:	663b      	str	r3, [r7, #96]	; 0x60
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	667b      	str	r3, [r7, #100]	; 0x64
 800c6e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	d038      	beq.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c6f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6fe:	d018      	beq.n	800c732 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c700:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c704:	d811      	bhi.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c70a:	d014      	beq.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c70c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c710:	d80b      	bhi.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c712:	2b00      	cmp	r3, #0
 800c714:	d011      	beq.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c71a:	d106      	bne.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c71c:	4bc3      	ldr	r3, [pc, #780]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c720:	4ac2      	ldr	r2, [pc, #776]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c726:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c728:	e008      	b.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c72a:	2301      	movs	r3, #1
 800c72c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c730:	e004      	b.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c732:	bf00      	nop
 800c734:	e002      	b.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c736:	bf00      	nop
 800c738:	e000      	b.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c73a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c73c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c740:	2b00      	cmp	r3, #0
 800c742:	d10b      	bne.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c744:	4bb9      	ldr	r3, [pc, #740]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c748:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c74c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c754:	4ab5      	ldr	r2, [pc, #724]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c756:	430b      	orrs	r3, r1
 800c758:	6553      	str	r3, [r2, #84]	; 0x54
 800c75a:	e003      	b.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c75c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c760:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c770:	65bb      	str	r3, [r7, #88]	; 0x58
 800c772:	2300      	movs	r3, #0
 800c774:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c776:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c77a:	460b      	mov	r3, r1
 800c77c:	4313      	orrs	r3, r2
 800c77e:	d009      	beq.n	800c794 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c780:	4baa      	ldr	r3, [pc, #680]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c784:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c78c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c78e:	4aa7      	ldr	r2, [pc, #668]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c790:	430b      	orrs	r3, r1
 800c792:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c7a0:	653b      	str	r3, [r7, #80]	; 0x50
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	657b      	str	r3, [r7, #84]	; 0x54
 800c7a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	d009      	beq.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c7b0:	4b9e      	ldr	r3, [pc, #632]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7b4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c7b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7be:	4a9b      	ldr	r2, [pc, #620]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7c0:	430b      	orrs	r3, r1
 800c7c2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c7c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7cc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c7d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c7d6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c7da:	460b      	mov	r3, r1
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	d009      	beq.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c7e0:	4b92      	ldr	r3, [pc, #584]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7e4:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800c7e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7ee:	4a8f      	ldr	r2, [pc, #572]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7f0:	430b      	orrs	r3, r1
 800c7f2:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c7f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c800:	643b      	str	r3, [r7, #64]	; 0x40
 800c802:	2300      	movs	r3, #0
 800c804:	647b      	str	r3, [r7, #68]	; 0x44
 800c806:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c80a:	460b      	mov	r3, r1
 800c80c:	4313      	orrs	r3, r2
 800c80e:	d00e      	beq.n	800c82e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c810:	4b86      	ldr	r3, [pc, #536]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	4a85      	ldr	r2, [pc, #532]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c816:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c81a:	6113      	str	r3, [r2, #16]
 800c81c:	4b83      	ldr	r3, [pc, #524]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c81e:	6919      	ldr	r1, [r3, #16]
 800c820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c824:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c828:	4a80      	ldr	r2, [pc, #512]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c82a:	430b      	orrs	r3, r1
 800c82c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c82e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c836:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c83a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c83c:	2300      	movs	r3, #0
 800c83e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c840:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c844:	460b      	mov	r3, r1
 800c846:	4313      	orrs	r3, r2
 800c848:	d009      	beq.n	800c85e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c84a:	4b78      	ldr	r3, [pc, #480]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c84c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c84e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c858:	4a74      	ldr	r2, [pc, #464]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c85a:	430b      	orrs	r3, r1
 800c85c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c85e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c866:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c86a:	633b      	str	r3, [r7, #48]	; 0x30
 800c86c:	2300      	movs	r3, #0
 800c86e:	637b      	str	r3, [r7, #52]	; 0x34
 800c870:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c874:	460b      	mov	r3, r1
 800c876:	4313      	orrs	r3, r2
 800c878:	d00a      	beq.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c87a:	4b6c      	ldr	r3, [pc, #432]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c87c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c87e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c882:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c88a:	4a68      	ldr	r2, [pc, #416]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c88c:	430b      	orrs	r3, r1
 800c88e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c898:	2100      	movs	r1, #0
 800c89a:	62b9      	str	r1, [r7, #40]	; 0x28
 800c89c:	f003 0301 	and.w	r3, r3, #1
 800c8a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8a2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	d011      	beq.n	800c8d0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c8ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8b0:	3308      	adds	r3, #8
 800c8b2:	2100      	movs	r1, #0
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f000 fb79 	bl	800cfac <RCCEx_PLL2_Config>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c8c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d003      	beq.n	800c8d0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c8d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d8:	2100      	movs	r1, #0
 800c8da:	6239      	str	r1, [r7, #32]
 800c8dc:	f003 0302 	and.w	r3, r3, #2
 800c8e0:	627b      	str	r3, [r7, #36]	; 0x24
 800c8e2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	d011      	beq.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c8ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8f0:	3308      	adds	r3, #8
 800c8f2:	2101      	movs	r1, #1
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f000 fb59 	bl	800cfac <RCCEx_PLL2_Config>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c900:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c904:	2b00      	cmp	r3, #0
 800c906:	d003      	beq.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c908:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c90c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c918:	2100      	movs	r1, #0
 800c91a:	61b9      	str	r1, [r7, #24]
 800c91c:	f003 0304 	and.w	r3, r3, #4
 800c920:	61fb      	str	r3, [r7, #28]
 800c922:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c926:	460b      	mov	r3, r1
 800c928:	4313      	orrs	r3, r2
 800c92a:	d011      	beq.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c92c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c930:	3308      	adds	r3, #8
 800c932:	2102      	movs	r1, #2
 800c934:	4618      	mov	r0, r3
 800c936:	f000 fb39 	bl	800cfac <RCCEx_PLL2_Config>
 800c93a:	4603      	mov	r3, r0
 800c93c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c940:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c944:	2b00      	cmp	r3, #0
 800c946:	d003      	beq.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c948:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c94c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c958:	2100      	movs	r1, #0
 800c95a:	6139      	str	r1, [r7, #16]
 800c95c:	f003 0308 	and.w	r3, r3, #8
 800c960:	617b      	str	r3, [r7, #20]
 800c962:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c966:	460b      	mov	r3, r1
 800c968:	4313      	orrs	r3, r2
 800c96a:	d011      	beq.n	800c990 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c96c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c970:	3328      	adds	r3, #40	; 0x28
 800c972:	2100      	movs	r1, #0
 800c974:	4618      	mov	r0, r3
 800c976:	f000 fbcb 	bl	800d110 <RCCEx_PLL3_Config>
 800c97a:	4603      	mov	r3, r0
 800c97c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800c980:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c984:	2b00      	cmp	r3, #0
 800c986:	d003      	beq.n	800c990 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c988:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c98c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c998:	2100      	movs	r1, #0
 800c99a:	60b9      	str	r1, [r7, #8]
 800c99c:	f003 0310 	and.w	r3, r3, #16
 800c9a0:	60fb      	str	r3, [r7, #12]
 800c9a2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	d011      	beq.n	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c9ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9b0:	3328      	adds	r3, #40	; 0x28
 800c9b2:	2101      	movs	r1, #1
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f000 fbab 	bl	800d110 <RCCEx_PLL3_Config>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c9c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d003      	beq.n	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c9cc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c9d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d8:	2100      	movs	r1, #0
 800c9da:	6039      	str	r1, [r7, #0]
 800c9dc:	f003 0320 	and.w	r3, r3, #32
 800c9e0:	607b      	str	r3, [r7, #4]
 800c9e2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	d011      	beq.n	800ca10 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c9ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c9f0:	3328      	adds	r3, #40	; 0x28
 800c9f2:	2102      	movs	r1, #2
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f000 fb8b 	bl	800d110 <RCCEx_PLL3_Config>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800ca00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d003      	beq.n	800ca10 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ca0c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800ca10:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d101      	bne.n	800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	e000      	b.n	800ca1e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800ca1c:	2301      	movs	r3, #1
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800ca24:	46bd      	mov	sp, r7
 800ca26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca2a:	bf00      	nop
 800ca2c:	58024400 	.word	0x58024400

0800ca30 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800ca34:	f7fe fde2 	bl	800b5fc <HAL_RCC_GetHCLKFreq>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	4b06      	ldr	r3, [pc, #24]	; (800ca54 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ca3c:	6a1b      	ldr	r3, [r3, #32]
 800ca3e:	091b      	lsrs	r3, r3, #4
 800ca40:	f003 0307 	and.w	r3, r3, #7
 800ca44:	4904      	ldr	r1, [pc, #16]	; (800ca58 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ca46:	5ccb      	ldrb	r3, [r1, r3]
 800ca48:	f003 031f 	and.w	r3, r3, #31
 800ca4c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	58024400 	.word	0x58024400
 800ca58:	08010588 	.word	0x08010588

0800ca5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b089      	sub	sp, #36	; 0x24
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca64:	4ba1      	ldr	r3, [pc, #644]	; (800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca68:	f003 0303 	and.w	r3, r3, #3
 800ca6c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ca6e:	4b9f      	ldr	r3, [pc, #636]	; (800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca72:	0b1b      	lsrs	r3, r3, #12
 800ca74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca78:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ca7a:	4b9c      	ldr	r3, [pc, #624]	; (800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca7e:	091b      	lsrs	r3, r3, #4
 800ca80:	f003 0301 	and.w	r3, r3, #1
 800ca84:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ca86:	4b99      	ldr	r3, [pc, #612]	; (800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca8a:	08db      	lsrs	r3, r3, #3
 800ca8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca90:	693a      	ldr	r2, [r7, #16]
 800ca92:	fb02 f303 	mul.w	r3, r2, r3
 800ca96:	ee07 3a90 	vmov	s15, r3
 800ca9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	f000 8111 	beq.w	800cccc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	2b02      	cmp	r3, #2
 800caae:	f000 8083 	beq.w	800cbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	f200 80a1 	bhi.w	800cbfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d003      	beq.n	800cac8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d056      	beq.n	800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cac6:	e099      	b.n	800cbfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cac8:	4b88      	ldr	r3, [pc, #544]	; (800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f003 0320 	and.w	r3, r3, #32
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d02d      	beq.n	800cb30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cad4:	4b85      	ldr	r3, [pc, #532]	; (800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	08db      	lsrs	r3, r3, #3
 800cada:	f003 0303 	and.w	r3, r3, #3
 800cade:	4a84      	ldr	r2, [pc, #528]	; (800ccf0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cae0:	fa22 f303 	lsr.w	r3, r2, r3
 800cae4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	ee07 3a90 	vmov	s15, r3
 800caec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	ee07 3a90 	vmov	s15, r3
 800caf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cafa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cafe:	4b7b      	ldr	r3, [pc, #492]	; (800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb06:	ee07 3a90 	vmov	s15, r3
 800cb0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb12:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ccf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb2e:	e087      	b.n	800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	ee07 3a90 	vmov	s15, r3
 800cb36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ccf8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cb3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb42:	4b6a      	ldr	r3, [pc, #424]	; (800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb4a:	ee07 3a90 	vmov	s15, r3
 800cb4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb52:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb56:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ccf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb72:	e065      	b.n	800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	ee07 3a90 	vmov	s15, r3
 800cb7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ccfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb86:	4b59      	ldr	r3, [pc, #356]	; (800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb8e:	ee07 3a90 	vmov	s15, r3
 800cb92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb96:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ccf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbb6:	e043      	b.n	800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	ee07 3a90 	vmov	s15, r3
 800cbbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbc2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cd00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cbc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbca:	4b48      	ldr	r3, [pc, #288]	; (800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbd2:	ee07 3a90 	vmov	s15, r3
 800cbd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbda:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbde:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ccf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cbe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbfa:	e021      	b.n	800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	ee07 3a90 	vmov	s15, r3
 800cc02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ccfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cc0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc0e:	4b37      	ldr	r3, [pc, #220]	; (800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc16:	ee07 3a90 	vmov	s15, r3
 800cc1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc22:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ccf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cc40:	4b2a      	ldr	r3, [pc, #168]	; (800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc44:	0a5b      	lsrs	r3, r3, #9
 800cc46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc4a:	ee07 3a90 	vmov	s15, r3
 800cc4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc66:	ee17 2a90 	vmov	r2, s15
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cc6e:	4b1f      	ldr	r3, [pc, #124]	; (800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc72:	0c1b      	lsrs	r3, r3, #16
 800cc74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc78:	ee07 3a90 	vmov	s15, r3
 800cc7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc84:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc88:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc94:	ee17 2a90 	vmov	r2, s15
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cc9c:	4b13      	ldr	r3, [pc, #76]	; (800ccec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca0:	0e1b      	lsrs	r3, r3, #24
 800cca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cca6:	ee07 3a90 	vmov	s15, r3
 800ccaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccc2:	ee17 2a90 	vmov	r2, s15
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ccca:	e008      	b.n	800ccde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	609a      	str	r2, [r3, #8]
}
 800ccde:	bf00      	nop
 800cce0:	3724      	adds	r7, #36	; 0x24
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr
 800ccea:	bf00      	nop
 800ccec:	58024400 	.word	0x58024400
 800ccf0:	03d09000 	.word	0x03d09000
 800ccf4:	46000000 	.word	0x46000000
 800ccf8:	4c742400 	.word	0x4c742400
 800ccfc:	4a742400 	.word	0x4a742400
 800cd00:	4bb71b00 	.word	0x4bb71b00

0800cd04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b089      	sub	sp, #36	; 0x24
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd0c:	4ba1      	ldr	r3, [pc, #644]	; (800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd10:	f003 0303 	and.w	r3, r3, #3
 800cd14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cd16:	4b9f      	ldr	r3, [pc, #636]	; (800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd1a:	0d1b      	lsrs	r3, r3, #20
 800cd1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cd22:	4b9c      	ldr	r3, [pc, #624]	; (800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd26:	0a1b      	lsrs	r3, r3, #8
 800cd28:	f003 0301 	and.w	r3, r3, #1
 800cd2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cd2e:	4b99      	ldr	r3, [pc, #612]	; (800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd32:	08db      	lsrs	r3, r3, #3
 800cd34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd38:	693a      	ldr	r2, [r7, #16]
 800cd3a:	fb02 f303 	mul.w	r3, r2, r3
 800cd3e:	ee07 3a90 	vmov	s15, r3
 800cd42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	f000 8111 	beq.w	800cf74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	2b02      	cmp	r3, #2
 800cd56:	f000 8083 	beq.w	800ce60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	2b02      	cmp	r3, #2
 800cd5e:	f200 80a1 	bhi.w	800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d003      	beq.n	800cd70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cd68:	69bb      	ldr	r3, [r7, #24]
 800cd6a:	2b01      	cmp	r3, #1
 800cd6c:	d056      	beq.n	800ce1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cd6e:	e099      	b.n	800cea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd70:	4b88      	ldr	r3, [pc, #544]	; (800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f003 0320 	and.w	r3, r3, #32
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d02d      	beq.n	800cdd8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd7c:	4b85      	ldr	r3, [pc, #532]	; (800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	08db      	lsrs	r3, r3, #3
 800cd82:	f003 0303 	and.w	r3, r3, #3
 800cd86:	4a84      	ldr	r2, [pc, #528]	; (800cf98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cd88:	fa22 f303 	lsr.w	r3, r2, r3
 800cd8c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	ee07 3a90 	vmov	s15, r3
 800cd94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	ee07 3a90 	vmov	s15, r3
 800cd9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cda2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cda6:	4b7b      	ldr	r3, [pc, #492]	; (800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cda8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdae:	ee07 3a90 	vmov	s15, r3
 800cdb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cf9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cdd6:	e087      	b.n	800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	ee07 3a90 	vmov	s15, r3
 800cdde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cde2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cde6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdea:	4b6a      	ldr	r3, [pc, #424]	; (800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdf2:	ee07 3a90 	vmov	s15, r3
 800cdf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdfe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cf9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce1a:	e065      	b.n	800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	ee07 3a90 	vmov	s15, r3
 800ce22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ce2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce2e:	4b59      	ldr	r3, [pc, #356]	; (800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce36:	ee07 3a90 	vmov	s15, r3
 800ce3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce42:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cf9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce5e:	e043      	b.n	800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	ee07 3a90 	vmov	s15, r3
 800ce66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cfa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ce6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce72:	4b48      	ldr	r3, [pc, #288]	; (800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce7a:	ee07 3a90 	vmov	s15, r3
 800ce7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce86:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cf9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cea2:	e021      	b.n	800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	ee07 3a90 	vmov	s15, r3
 800ceaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ceb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceb6:	4b37      	ldr	r3, [pc, #220]	; (800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ceb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cebe:	ee07 3a90 	vmov	s15, r3
 800cec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cec6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ceca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cf9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ced2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ced6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ceda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cede:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cee6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cee8:	4b2a      	ldr	r3, [pc, #168]	; (800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ceea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceec:	0a5b      	lsrs	r3, r3, #9
 800ceee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cef2:	ee07 3a90 	vmov	s15, r3
 800cef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cefa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cefe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf02:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf0e:	ee17 2a90 	vmov	r2, s15
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cf16:	4b1f      	ldr	r3, [pc, #124]	; (800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf1a:	0c1b      	lsrs	r3, r3, #16
 800cf1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf20:	ee07 3a90 	vmov	s15, r3
 800cf24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf30:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf3c:	ee17 2a90 	vmov	r2, s15
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cf44:	4b13      	ldr	r3, [pc, #76]	; (800cf94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf48:	0e1b      	lsrs	r3, r3, #24
 800cf4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf4e:	ee07 3a90 	vmov	s15, r3
 800cf52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf6a:	ee17 2a90 	vmov	r2, s15
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cf72:	e008      	b.n	800cf86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2200      	movs	r2, #0
 800cf78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	609a      	str	r2, [r3, #8]
}
 800cf86:	bf00      	nop
 800cf88:	3724      	adds	r7, #36	; 0x24
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop
 800cf94:	58024400 	.word	0x58024400
 800cf98:	03d09000 	.word	0x03d09000
 800cf9c:	46000000 	.word	0x46000000
 800cfa0:	4c742400 	.word	0x4c742400
 800cfa4:	4a742400 	.word	0x4a742400
 800cfa8:	4bb71b00 	.word	0x4bb71b00

0800cfac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cfba:	4b53      	ldr	r3, [pc, #332]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800cfbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfbe:	f003 0303 	and.w	r3, r3, #3
 800cfc2:	2b03      	cmp	r3, #3
 800cfc4:	d101      	bne.n	800cfca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	e099      	b.n	800d0fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cfca:	4b4f      	ldr	r3, [pc, #316]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4a4e      	ldr	r2, [pc, #312]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800cfd0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cfd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfd6:	f7f7 fa9d 	bl	8004514 <HAL_GetTick>
 800cfda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cfdc:	e008      	b.n	800cff0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cfde:	f7f7 fa99 	bl	8004514 <HAL_GetTick>
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	1ad3      	subs	r3, r2, r3
 800cfe8:	2b02      	cmp	r3, #2
 800cfea:	d901      	bls.n	800cff0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cfec:	2303      	movs	r3, #3
 800cfee:	e086      	b.n	800d0fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cff0:	4b45      	ldr	r3, [pc, #276]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d1f0      	bne.n	800cfde <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cffc:	4b42      	ldr	r3, [pc, #264]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800cffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d000:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	031b      	lsls	r3, r3, #12
 800d00a:	493f      	ldr	r1, [pc, #252]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d00c:	4313      	orrs	r3, r2
 800d00e:	628b      	str	r3, [r1, #40]	; 0x28
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	685b      	ldr	r3, [r3, #4]
 800d014:	3b01      	subs	r3, #1
 800d016:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	689b      	ldr	r3, [r3, #8]
 800d01e:	3b01      	subs	r3, #1
 800d020:	025b      	lsls	r3, r3, #9
 800d022:	b29b      	uxth	r3, r3
 800d024:	431a      	orrs	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	3b01      	subs	r3, #1
 800d02c:	041b      	lsls	r3, r3, #16
 800d02e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d032:	431a      	orrs	r2, r3
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	691b      	ldr	r3, [r3, #16]
 800d038:	3b01      	subs	r3, #1
 800d03a:	061b      	lsls	r3, r3, #24
 800d03c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d040:	4931      	ldr	r1, [pc, #196]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d042:	4313      	orrs	r3, r2
 800d044:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d046:	4b30      	ldr	r3, [pc, #192]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d04a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	695b      	ldr	r3, [r3, #20]
 800d052:	492d      	ldr	r1, [pc, #180]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d054:	4313      	orrs	r3, r2
 800d056:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d058:	4b2b      	ldr	r3, [pc, #172]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d05c:	f023 0220 	bic.w	r2, r3, #32
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	699b      	ldr	r3, [r3, #24]
 800d064:	4928      	ldr	r1, [pc, #160]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d066:	4313      	orrs	r3, r2
 800d068:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d06a:	4b27      	ldr	r3, [pc, #156]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d06e:	4a26      	ldr	r2, [pc, #152]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d070:	f023 0310 	bic.w	r3, r3, #16
 800d074:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d076:	4b24      	ldr	r3, [pc, #144]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d07a:	4b24      	ldr	r3, [pc, #144]	; (800d10c <RCCEx_PLL2_Config+0x160>)
 800d07c:	4013      	ands	r3, r2
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	69d2      	ldr	r2, [r2, #28]
 800d082:	00d2      	lsls	r2, r2, #3
 800d084:	4920      	ldr	r1, [pc, #128]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d086:	4313      	orrs	r3, r2
 800d088:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d08a:	4b1f      	ldr	r3, [pc, #124]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08e:	4a1e      	ldr	r2, [pc, #120]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d090:	f043 0310 	orr.w	r3, r3, #16
 800d094:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d106      	bne.n	800d0aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d09c:	4b1a      	ldr	r3, [pc, #104]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a0:	4a19      	ldr	r2, [pc, #100]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d0a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d0a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0a8:	e00f      	b.n	800d0ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d106      	bne.n	800d0be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d0b0:	4b15      	ldr	r3, [pc, #84]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b4:	4a14      	ldr	r2, [pc, #80]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d0b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0bc:	e005      	b.n	800d0ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d0be:	4b12      	ldr	r3, [pc, #72]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c2:	4a11      	ldr	r2, [pc, #68]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d0c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d0c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d0ca:	4b0f      	ldr	r3, [pc, #60]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4a0e      	ldr	r2, [pc, #56]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d0d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d0d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0d6:	f7f7 fa1d 	bl	8004514 <HAL_GetTick>
 800d0da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d0dc:	e008      	b.n	800d0f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d0de:	f7f7 fa19 	bl	8004514 <HAL_GetTick>
 800d0e2:	4602      	mov	r2, r0
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	1ad3      	subs	r3, r2, r3
 800d0e8:	2b02      	cmp	r3, #2
 800d0ea:	d901      	bls.n	800d0f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d0ec:	2303      	movs	r3, #3
 800d0ee:	e006      	b.n	800d0fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d0f0:	4b05      	ldr	r3, [pc, #20]	; (800d108 <RCCEx_PLL2_Config+0x15c>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d0f0      	beq.n	800d0de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3710      	adds	r7, #16
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	58024400 	.word	0x58024400
 800d10c:	ffff0007 	.word	0xffff0007

0800d110 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d11a:	2300      	movs	r3, #0
 800d11c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d11e:	4b53      	ldr	r3, [pc, #332]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d122:	f003 0303 	and.w	r3, r3, #3
 800d126:	2b03      	cmp	r3, #3
 800d128:	d101      	bne.n	800d12e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d12a:	2301      	movs	r3, #1
 800d12c:	e099      	b.n	800d262 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d12e:	4b4f      	ldr	r3, [pc, #316]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4a4e      	ldr	r2, [pc, #312]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d13a:	f7f7 f9eb 	bl	8004514 <HAL_GetTick>
 800d13e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d140:	e008      	b.n	800d154 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d142:	f7f7 f9e7 	bl	8004514 <HAL_GetTick>
 800d146:	4602      	mov	r2, r0
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	1ad3      	subs	r3, r2, r3
 800d14c:	2b02      	cmp	r3, #2
 800d14e:	d901      	bls.n	800d154 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d150:	2303      	movs	r3, #3
 800d152:	e086      	b.n	800d262 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d154:	4b45      	ldr	r3, [pc, #276]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d1f0      	bne.n	800d142 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d160:	4b42      	ldr	r3, [pc, #264]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d164:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	051b      	lsls	r3, r3, #20
 800d16e:	493f      	ldr	r1, [pc, #252]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d170:	4313      	orrs	r3, r2
 800d172:	628b      	str	r3, [r1, #40]	; 0x28
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	3b01      	subs	r3, #1
 800d17a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	3b01      	subs	r3, #1
 800d184:	025b      	lsls	r3, r3, #9
 800d186:	b29b      	uxth	r3, r3
 800d188:	431a      	orrs	r2, r3
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	68db      	ldr	r3, [r3, #12]
 800d18e:	3b01      	subs	r3, #1
 800d190:	041b      	lsls	r3, r3, #16
 800d192:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d196:	431a      	orrs	r2, r3
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	691b      	ldr	r3, [r3, #16]
 800d19c:	3b01      	subs	r3, #1
 800d19e:	061b      	lsls	r3, r3, #24
 800d1a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d1a4:	4931      	ldr	r1, [pc, #196]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d1aa:	4b30      	ldr	r3, [pc, #192]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	695b      	ldr	r3, [r3, #20]
 800d1b6:	492d      	ldr	r1, [pc, #180]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d1bc:	4b2b      	ldr	r3, [pc, #172]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	699b      	ldr	r3, [r3, #24]
 800d1c8:	4928      	ldr	r1, [pc, #160]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d1ca:	4313      	orrs	r3, r2
 800d1cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d1ce:	4b27      	ldr	r3, [pc, #156]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d2:	4a26      	ldr	r2, [pc, #152]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d1d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d1da:	4b24      	ldr	r3, [pc, #144]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d1dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1de:	4b24      	ldr	r3, [pc, #144]	; (800d270 <RCCEx_PLL3_Config+0x160>)
 800d1e0:	4013      	ands	r3, r2
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	69d2      	ldr	r2, [r2, #28]
 800d1e6:	00d2      	lsls	r2, r2, #3
 800d1e8:	4920      	ldr	r1, [pc, #128]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d1ee:	4b1f      	ldr	r3, [pc, #124]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f2:	4a1e      	ldr	r2, [pc, #120]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d1f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d106      	bne.n	800d20e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d200:	4b1a      	ldr	r3, [pc, #104]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d204:	4a19      	ldr	r2, [pc, #100]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d206:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d20a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d20c:	e00f      	b.n	800d22e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	2b01      	cmp	r3, #1
 800d212:	d106      	bne.n	800d222 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d214:	4b15      	ldr	r3, [pc, #84]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d218:	4a14      	ldr	r2, [pc, #80]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d21a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d21e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d220:	e005      	b.n	800d22e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d222:	4b12      	ldr	r3, [pc, #72]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d226:	4a11      	ldr	r2, [pc, #68]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d22c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d22e:	4b0f      	ldr	r3, [pc, #60]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	4a0e      	ldr	r2, [pc, #56]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d23a:	f7f7 f96b 	bl	8004514 <HAL_GetTick>
 800d23e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d240:	e008      	b.n	800d254 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d242:	f7f7 f967 	bl	8004514 <HAL_GetTick>
 800d246:	4602      	mov	r2, r0
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	1ad3      	subs	r3, r2, r3
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	d901      	bls.n	800d254 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d250:	2303      	movs	r3, #3
 800d252:	e006      	b.n	800d262 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d254:	4b05      	ldr	r3, [pc, #20]	; (800d26c <RCCEx_PLL3_Config+0x15c>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d0f0      	beq.n	800d242 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d260:	7bfb      	ldrb	r3, [r7, #15]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3710      	adds	r7, #16
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	58024400 	.word	0x58024400
 800d270:	ffff0007 	.word	0xffff0007

0800d274 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d27c:	2301      	movs	r3, #1
 800d27e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d074      	beq.n	800d370 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d106      	bne.n	800d2a0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2200      	movs	r2, #0
 800d296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f7f6 f834 	bl	8003308 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2202      	movs	r2, #2
 800d2a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	68db      	ldr	r3, [r3, #12]
 800d2ae:	f003 0310 	and.w	r3, r3, #16
 800d2b2:	2b10      	cmp	r3, #16
 800d2b4:	d053      	beq.n	800d35e <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	22ca      	movs	r2, #202	; 0xca
 800d2bc:	625a      	str	r2, [r3, #36]	; 0x24
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2253      	movs	r2, #83	; 0x53
 800d2c4:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f000 f87e 	bl	800d3c8 <RTC_EnterInitMode>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d2d0:	7bfb      	ldrb	r3, [r7, #15]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d124      	bne.n	800d320 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	6999      	ldr	r1, [r3, #24]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681a      	ldr	r2, [r3, #0]
 800d2e0:	4b26      	ldr	r3, [pc, #152]	; (800d37c <HAL_RTC_Init+0x108>)
 800d2e2:	400b      	ands	r3, r1
 800d2e4:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	6999      	ldr	r1, [r3, #24]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	685a      	ldr	r2, [r3, #4]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	691b      	ldr	r3, [r3, #16]
 800d2f4:	431a      	orrs	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	699b      	ldr	r3, [r3, #24]
 800d2fa:	431a      	orrs	r2, r3
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	430a      	orrs	r2, r1
 800d302:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	0419      	lsls	r1, r3, #16
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	68da      	ldr	r2, [r3, #12]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	430a      	orrs	r2, r1
 800d314:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 f88c 	bl	800d434 <RTC_ExitInitMode>
 800d31c:	4603      	mov	r3, r0
 800d31e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d320:	7bfb      	ldrb	r3, [r7, #15]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d116      	bne.n	800d354 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	699a      	ldr	r2, [r3, #24]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800d334:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	6999      	ldr	r1, [r3, #24]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6a1a      	ldr	r2, [r3, #32]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	69db      	ldr	r3, [r3, #28]
 800d344:	431a      	orrs	r2, r3
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	695b      	ldr	r3, [r3, #20]
 800d34a:	431a      	orrs	r2, r3
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	430a      	orrs	r2, r1
 800d352:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	22ff      	movs	r2, #255	; 0xff
 800d35a:	625a      	str	r2, [r3, #36]	; 0x24
 800d35c:	e001      	b.n	800d362 <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d35e:	2300      	movs	r3, #0
 800d360:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d362:	7bfb      	ldrb	r3, [r7, #15]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d103      	bne.n	800d370 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2201      	movs	r2, #1
 800d36c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800d370:	7bfb      	ldrb	r3, [r7, #15]
}
 800d372:	4618      	mov	r0, r3
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	fb8fffbf 	.word	0xfb8fffbf

0800d380 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4a0d      	ldr	r2, [pc, #52]	; (800d3c4 <HAL_RTC_WaitForSynchro+0x44>)
 800d38e:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d390:	f7f7 f8c0 	bl	8004514 <HAL_GetTick>
 800d394:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d396:	e009      	b.n	800d3ac <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d398:	f7f7 f8bc 	bl	8004514 <HAL_GetTick>
 800d39c:	4602      	mov	r2, r0
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	1ad3      	subs	r3, r2, r3
 800d3a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3a6:	d901      	bls.n	800d3ac <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d3a8:	2303      	movs	r3, #3
 800d3aa:	e007      	b.n	800d3bc <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	f003 0320 	and.w	r3, r3, #32
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d0ee      	beq.n	800d398 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d3ba:	2300      	movs	r3, #0
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3710      	adds	r7, #16
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	0001005f 	.word	0x0001005f

0800d3c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d123      	bne.n	800d42a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	68da      	ldr	r2, [r3, #12]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d3f0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d3f2:	f7f7 f88f 	bl	8004514 <HAL_GetTick>
 800d3f6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d3f8:	e00d      	b.n	800d416 <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d3fa:	f7f7 f88b 	bl	8004514 <HAL_GetTick>
 800d3fe:	4602      	mov	r2, r0
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	1ad3      	subs	r3, r2, r3
 800d404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d408:	d905      	bls.n	800d416 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800d40a:	2303      	movs	r3, #3
 800d40c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2203      	movs	r2, #3
 800d412:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	68db      	ldr	r3, [r3, #12]
 800d41c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d420:	2b00      	cmp	r3, #0
 800d422:	d102      	bne.n	800d42a <RTC_EnterInitMode+0x62>
 800d424:	7bfb      	ldrb	r3, [r7, #15]
 800d426:	2b03      	cmp	r3, #3
 800d428:	d1e7      	bne.n	800d3fa <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800d42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d43c:	2300      	movs	r3, #0
 800d43e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d440:	4b1a      	ldr	r3, [pc, #104]	; (800d4ac <RTC_ExitInitMode+0x78>)
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	4a19      	ldr	r2, [pc, #100]	; (800d4ac <RTC_ExitInitMode+0x78>)
 800d446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d44a:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d44c:	4b17      	ldr	r3, [pc, #92]	; (800d4ac <RTC_ExitInitMode+0x78>)
 800d44e:	699b      	ldr	r3, [r3, #24]
 800d450:	f003 0320 	and.w	r3, r3, #32
 800d454:	2b00      	cmp	r3, #0
 800d456:	d10c      	bne.n	800d472 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f7ff ff91 	bl	800d380 <HAL_RTC_WaitForSynchro>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d01e      	beq.n	800d4a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2203      	movs	r2, #3
 800d468:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d46c:	2303      	movs	r3, #3
 800d46e:	73fb      	strb	r3, [r7, #15]
 800d470:	e017      	b.n	800d4a2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d472:	4b0e      	ldr	r3, [pc, #56]	; (800d4ac <RTC_ExitInitMode+0x78>)
 800d474:	699b      	ldr	r3, [r3, #24]
 800d476:	4a0d      	ldr	r2, [pc, #52]	; (800d4ac <RTC_ExitInitMode+0x78>)
 800d478:	f023 0320 	bic.w	r3, r3, #32
 800d47c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f7ff ff7e 	bl	800d380 <HAL_RTC_WaitForSynchro>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	d005      	beq.n	800d496 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2203      	movs	r2, #3
 800d48e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d492:	2303      	movs	r3, #3
 800d494:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d496:	4b05      	ldr	r3, [pc, #20]	; (800d4ac <RTC_ExitInitMode+0x78>)
 800d498:	699b      	ldr	r3, [r3, #24]
 800d49a:	4a04      	ldr	r2, [pc, #16]	; (800d4ac <RTC_ExitInitMode+0x78>)
 800d49c:	f043 0320 	orr.w	r3, r3, #32
 800d4a0:	6193      	str	r3, [r2, #24]
  }

  return status;
 800d4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}
 800d4ac:	58004000 	.word	0x58004000

0800d4b0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d101      	bne.n	800d4c4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e02b      	b.n	800d51c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d4ca:	b2db      	uxtb	r3, r3
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d106      	bne.n	800d4de <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f7f3 fc75 	bl	8000dc8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2202      	movs	r2, #2
 800d4e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	3304      	adds	r3, #4
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	4610      	mov	r0, r2
 800d4f2:	f001 ffdf 	bl	800f4b4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6818      	ldr	r0, [r3, #0]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	461a      	mov	r2, r3
 800d500:	6839      	ldr	r1, [r7, #0]
 800d502:	f002 f833 	bl	800f56c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d506:	4b07      	ldr	r3, [pc, #28]	; (800d524 <HAL_SDRAM_Init+0x74>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	4a06      	ldr	r2, [pc, #24]	; (800d524 <HAL_SDRAM_Init+0x74>)
 800d50c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d510:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2201      	movs	r2, #1
 800d516:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d51a:	2300      	movs	r3, #0
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}
 800d524:	52004000 	.word	0x52004000

0800d528 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b086      	sub	sp, #24
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	60f8      	str	r0, [r7, #12]
 800d530:	60b9      	str	r1, [r7, #8]
 800d532:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d53a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d53c:	7dfb      	ldrb	r3, [r7, #23]
 800d53e:	2b02      	cmp	r3, #2
 800d540:	d101      	bne.n	800d546 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d542:	2302      	movs	r3, #2
 800d544:	e021      	b.n	800d58a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d546:	7dfb      	ldrb	r3, [r7, #23]
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d002      	beq.n	800d552 <HAL_SDRAM_SendCommand+0x2a>
 800d54c:	7dfb      	ldrb	r3, [r7, #23]
 800d54e:	2b05      	cmp	r3, #5
 800d550:	d118      	bne.n	800d584 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2202      	movs	r2, #2
 800d556:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	68b9      	ldr	r1, [r7, #8]
 800d562:	4618      	mov	r0, r3
 800d564:	f002 f86c 	bl	800f640 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2b02      	cmp	r3, #2
 800d56e:	d104      	bne.n	800d57a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2205      	movs	r2, #5
 800d574:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d578:	e006      	b.n	800d588 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2201      	movs	r2, #1
 800d57e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d582:	e001      	b.n	800d588 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d584:	2301      	movs	r3, #1
 800d586:	e000      	b.n	800d58a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d588:	2300      	movs	r3, #0
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3718      	adds	r7, #24
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d592:	b580      	push	{r7, lr}
 800d594:	b082      	sub	sp, #8
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
 800d59a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	d101      	bne.n	800d5ac <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d5a8:	2302      	movs	r3, #2
 800d5aa:	e016      	b.n	800d5da <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d10f      	bne.n	800d5d8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2202      	movs	r2, #2
 800d5bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	6839      	ldr	r1, [r7, #0]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f002 f85e 	bl	800f688 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2201      	movs	r2, #1
 800d5d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	e000      	b.n	800d5da <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800d5d8:	2301      	movs	r3, #1
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3708      	adds	r7, #8
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}

0800d5e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d5e2:	b580      	push	{r7, lr}
 800d5e4:	b082      	sub	sp, #8
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d101      	bne.n	800d5f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e042      	b.n	800d67a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d106      	bne.n	800d60c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2200      	movs	r2, #0
 800d602:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f7f6 fe62 	bl	80042d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2224      	movs	r2, #36	; 0x24
 800d610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f022 0201 	bic.w	r2, r2, #1
 800d622:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f000 fd5d 	bl	800e0e4 <UART_SetConfig>
 800d62a:	4603      	mov	r3, r0
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d101      	bne.n	800d634 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d630:	2301      	movs	r3, #1
 800d632:	e022      	b.n	800d67a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d002      	beq.n	800d642 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f001 fbbd 	bl	800edbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	685a      	ldr	r2, [r3, #4]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d650:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	689a      	ldr	r2, [r3, #8]
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d660:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	681a      	ldr	r2, [r3, #0]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f042 0201 	orr.w	r2, r2, #1
 800d670:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f001 fc44 	bl	800ef00 <UART_CheckIdleState>
 800d678:	4603      	mov	r3, r0
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d682:	b580      	push	{r7, lr}
 800d684:	b08a      	sub	sp, #40	; 0x28
 800d686:	af02      	add	r7, sp, #8
 800d688:	60f8      	str	r0, [r7, #12]
 800d68a:	60b9      	str	r1, [r7, #8]
 800d68c:	603b      	str	r3, [r7, #0]
 800d68e:	4613      	mov	r3, r2
 800d690:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d698:	2b20      	cmp	r3, #32
 800d69a:	d17b      	bne.n	800d794 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d002      	beq.n	800d6a8 <HAL_UART_Transmit+0x26>
 800d6a2:	88fb      	ldrh	r3, [r7, #6]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d101      	bne.n	800d6ac <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	e074      	b.n	800d796 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2221      	movs	r2, #33	; 0x21
 800d6b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d6bc:	f7f6 ff2a 	bl	8004514 <HAL_GetTick>
 800d6c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	88fa      	ldrh	r2, [r7, #6]
 800d6c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	88fa      	ldrh	r2, [r7, #6]
 800d6ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	689b      	ldr	r3, [r3, #8]
 800d6d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6da:	d108      	bne.n	800d6ee <HAL_UART_Transmit+0x6c>
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	691b      	ldr	r3, [r3, #16]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d104      	bne.n	800d6ee <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	61bb      	str	r3, [r7, #24]
 800d6ec:	e003      	b.n	800d6f6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d6f6:	e030      	b.n	800d75a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	2200      	movs	r2, #0
 800d700:	2180      	movs	r1, #128	; 0x80
 800d702:	68f8      	ldr	r0, [r7, #12]
 800d704:	f001 fca6 	bl	800f054 <UART_WaitOnFlagUntilTimeout>
 800d708:	4603      	mov	r3, r0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d005      	beq.n	800d71a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2220      	movs	r2, #32
 800d712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d716:	2303      	movs	r3, #3
 800d718:	e03d      	b.n	800d796 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d10b      	bne.n	800d738 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d720:	69bb      	ldr	r3, [r7, #24]
 800d722:	881b      	ldrh	r3, [r3, #0]
 800d724:	461a      	mov	r2, r3
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d72e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	3302      	adds	r3, #2
 800d734:	61bb      	str	r3, [r7, #24]
 800d736:	e007      	b.n	800d748 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d738:	69fb      	ldr	r3, [r7, #28]
 800d73a:	781a      	ldrb	r2, [r3, #0]
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	3301      	adds	r3, #1
 800d746:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d74e:	b29b      	uxth	r3, r3
 800d750:	3b01      	subs	r3, #1
 800d752:	b29a      	uxth	r2, r3
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d760:	b29b      	uxth	r3, r3
 800d762:	2b00      	cmp	r3, #0
 800d764:	d1c8      	bne.n	800d6f8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	9300      	str	r3, [sp, #0]
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	2200      	movs	r2, #0
 800d76e:	2140      	movs	r1, #64	; 0x40
 800d770:	68f8      	ldr	r0, [r7, #12]
 800d772:	f001 fc6f 	bl	800f054 <UART_WaitOnFlagUntilTimeout>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d005      	beq.n	800d788 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2220      	movs	r2, #32
 800d780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d784:	2303      	movs	r3, #3
 800d786:	e006      	b.n	800d796 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2220      	movs	r2, #32
 800d78c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d790:	2300      	movs	r3, #0
 800d792:	e000      	b.n	800d796 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d794:	2302      	movs	r3, #2
  }
}
 800d796:	4618      	mov	r0, r3
 800d798:	3720      	adds	r7, #32
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}

0800d79e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d79e:	b580      	push	{r7, lr}
 800d7a0:	b08a      	sub	sp, #40	; 0x28
 800d7a2:	af02      	add	r7, sp, #8
 800d7a4:	60f8      	str	r0, [r7, #12]
 800d7a6:	60b9      	str	r1, [r7, #8]
 800d7a8:	603b      	str	r3, [r7, #0]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7b4:	2b20      	cmp	r3, #32
 800d7b6:	f040 80b5 	bne.w	800d924 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d002      	beq.n	800d7c6 <HAL_UART_Receive+0x28>
 800d7c0:	88fb      	ldrh	r3, [r7, #6]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d101      	bne.n	800d7ca <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	e0ad      	b.n	800d926 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2222      	movs	r2, #34	; 0x22
 800d7d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d7e0:	f7f6 fe98 	bl	8004514 <HAL_GetTick>
 800d7e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	88fa      	ldrh	r2, [r7, #6]
 800d7ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	88fa      	ldrh	r2, [r7, #6]
 800d7f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7fe:	d10e      	bne.n	800d81e <HAL_UART_Receive+0x80>
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	691b      	ldr	r3, [r3, #16]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d105      	bne.n	800d814 <HAL_UART_Receive+0x76>
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d80e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d812:	e02d      	b.n	800d870 <HAL_UART_Receive+0xd2>
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	22ff      	movs	r2, #255	; 0xff
 800d818:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d81c:	e028      	b.n	800d870 <HAL_UART_Receive+0xd2>
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	689b      	ldr	r3, [r3, #8]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d10d      	bne.n	800d842 <HAL_UART_Receive+0xa4>
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	691b      	ldr	r3, [r3, #16]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d104      	bne.n	800d838 <HAL_UART_Receive+0x9a>
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	22ff      	movs	r2, #255	; 0xff
 800d832:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d836:	e01b      	b.n	800d870 <HAL_UART_Receive+0xd2>
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	227f      	movs	r2, #127	; 0x7f
 800d83c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d840:	e016      	b.n	800d870 <HAL_UART_Receive+0xd2>
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d84a:	d10d      	bne.n	800d868 <HAL_UART_Receive+0xca>
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	691b      	ldr	r3, [r3, #16]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d104      	bne.n	800d85e <HAL_UART_Receive+0xc0>
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	227f      	movs	r2, #127	; 0x7f
 800d858:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d85c:	e008      	b.n	800d870 <HAL_UART_Receive+0xd2>
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	223f      	movs	r2, #63	; 0x3f
 800d862:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d866:	e003      	b.n	800d870 <HAL_UART_Receive+0xd2>
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2200      	movs	r2, #0
 800d86c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d876:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d880:	d108      	bne.n	800d894 <HAL_UART_Receive+0xf6>
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	691b      	ldr	r3, [r3, #16]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d104      	bne.n	800d894 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800d88a:	2300      	movs	r3, #0
 800d88c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	61bb      	str	r3, [r7, #24]
 800d892:	e003      	b.n	800d89c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d898:	2300      	movs	r3, #0
 800d89a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d89c:	e036      	b.n	800d90c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	9300      	str	r3, [sp, #0]
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	2120      	movs	r1, #32
 800d8a8:	68f8      	ldr	r0, [r7, #12]
 800d8aa:	f001 fbd3 	bl	800f054 <UART_WaitOnFlagUntilTimeout>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d005      	beq.n	800d8c0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	2220      	movs	r2, #32
 800d8b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800d8bc:	2303      	movs	r3, #3
 800d8be:	e032      	b.n	800d926 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d10c      	bne.n	800d8e0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8cc:	b29a      	uxth	r2, r3
 800d8ce:	8a7b      	ldrh	r3, [r7, #18]
 800d8d0:	4013      	ands	r3, r2
 800d8d2:	b29a      	uxth	r2, r3
 800d8d4:	69bb      	ldr	r3, [r7, #24]
 800d8d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d8d8:	69bb      	ldr	r3, [r7, #24]
 800d8da:	3302      	adds	r3, #2
 800d8dc:	61bb      	str	r3, [r7, #24]
 800d8de:	e00c      	b.n	800d8fa <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e6:	b2da      	uxtb	r2, r3
 800d8e8:	8a7b      	ldrh	r3, [r7, #18]
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	4013      	ands	r3, r2
 800d8ee:	b2da      	uxtb	r2, r3
 800d8f0:	69fb      	ldr	r3, [r7, #28]
 800d8f2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d8f4:	69fb      	ldr	r3, [r7, #28]
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d900:	b29b      	uxth	r3, r3
 800d902:	3b01      	subs	r3, #1
 800d904:	b29a      	uxth	r2, r3
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d912:	b29b      	uxth	r3, r3
 800d914:	2b00      	cmp	r3, #0
 800d916:	d1c2      	bne.n	800d89e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2220      	movs	r2, #32
 800d91c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800d920:	2300      	movs	r3, #0
 800d922:	e000      	b.n	800d926 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800d924:	2302      	movs	r3, #2
  }
}
 800d926:	4618      	mov	r0, r3
 800d928:	3720      	adds	r7, #32
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
	...

0800d930 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b0ba      	sub	sp, #232	; 0xe8
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	69db      	ldr	r3, [r3, #28]
 800d93e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	689b      	ldr	r3, [r3, #8]
 800d952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d956:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d95a:	f640 030f 	movw	r3, #2063	; 0x80f
 800d95e:	4013      	ands	r3, r2
 800d960:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d11b      	bne.n	800d9a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d96c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d970:	f003 0320 	and.w	r3, r3, #32
 800d974:	2b00      	cmp	r3, #0
 800d976:	d015      	beq.n	800d9a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d97c:	f003 0320 	and.w	r3, r3, #32
 800d980:	2b00      	cmp	r3, #0
 800d982:	d105      	bne.n	800d990 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d009      	beq.n	800d9a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d994:	2b00      	cmp	r3, #0
 800d996:	f000 8377 	beq.w	800e088 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	4798      	blx	r3
      }
      return;
 800d9a2:	e371      	b.n	800e088 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d9a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	f000 8123 	beq.w	800dbf4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d9ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d9b2:	4b8d      	ldr	r3, [pc, #564]	; (800dbe8 <HAL_UART_IRQHandler+0x2b8>)
 800d9b4:	4013      	ands	r3, r2
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d106      	bne.n	800d9c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d9ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d9be:	4b8b      	ldr	r3, [pc, #556]	; (800dbec <HAL_UART_IRQHandler+0x2bc>)
 800d9c0:	4013      	ands	r3, r2
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	f000 8116 	beq.w	800dbf4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d9c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9cc:	f003 0301 	and.w	r3, r3, #1
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d011      	beq.n	800d9f8 <HAL_UART_IRQHandler+0xc8>
 800d9d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00b      	beq.n	800d9f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9ee:	f043 0201 	orr.w	r2, r3, #1
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9fc:	f003 0302 	and.w	r3, r3, #2
 800da00:	2b00      	cmp	r3, #0
 800da02:	d011      	beq.n	800da28 <HAL_UART_IRQHandler+0xf8>
 800da04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da08:	f003 0301 	and.w	r3, r3, #1
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d00b      	beq.n	800da28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2202      	movs	r2, #2
 800da16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da1e:	f043 0204 	orr.w	r2, r3, #4
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da2c:	f003 0304 	and.w	r3, r3, #4
 800da30:	2b00      	cmp	r3, #0
 800da32:	d011      	beq.n	800da58 <HAL_UART_IRQHandler+0x128>
 800da34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da38:	f003 0301 	and.w	r3, r3, #1
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d00b      	beq.n	800da58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2204      	movs	r2, #4
 800da46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da4e:	f043 0202 	orr.w	r2, r3, #2
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800da58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da5c:	f003 0308 	and.w	r3, r3, #8
 800da60:	2b00      	cmp	r3, #0
 800da62:	d017      	beq.n	800da94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800da64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da68:	f003 0320 	and.w	r3, r3, #32
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d105      	bne.n	800da7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800da70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800da74:	4b5c      	ldr	r3, [pc, #368]	; (800dbe8 <HAL_UART_IRQHandler+0x2b8>)
 800da76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d00b      	beq.n	800da94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2208      	movs	r2, #8
 800da82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da8a:	f043 0208 	orr.w	r2, r3, #8
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800da94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d012      	beq.n	800dac6 <HAL_UART_IRQHandler+0x196>
 800daa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800daa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d00c      	beq.n	800dac6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dab4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dabc:	f043 0220 	orr.w	r2, r3, #32
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dacc:	2b00      	cmp	r3, #0
 800dace:	f000 82dd 	beq.w	800e08c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dad6:	f003 0320 	and.w	r3, r3, #32
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d013      	beq.n	800db06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dae2:	f003 0320 	and.w	r3, r3, #32
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d105      	bne.n	800daf6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800daea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800daee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d007      	beq.n	800db06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d003      	beq.n	800db06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	689b      	ldr	r3, [r3, #8]
 800db16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db1a:	2b40      	cmp	r3, #64	; 0x40
 800db1c:	d005      	beq.n	800db2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800db1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800db22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800db26:	2b00      	cmp	r3, #0
 800db28:	d054      	beq.n	800dbd4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f001 fafa 	bl	800f124 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	689b      	ldr	r3, [r3, #8]
 800db36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db3a:	2b40      	cmp	r3, #64	; 0x40
 800db3c:	d146      	bne.n	800dbcc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	3308      	adds	r3, #8
 800db44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800db4c:	e853 3f00 	ldrex	r3, [r3]
 800db50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800db54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800db58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	3308      	adds	r3, #8
 800db66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800db6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800db6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800db76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800db7a:	e841 2300 	strex	r3, r2, [r1]
 800db7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800db82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d1d9      	bne.n	800db3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db90:	2b00      	cmp	r3, #0
 800db92:	d017      	beq.n	800dbc4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db9a:	4a15      	ldr	r2, [pc, #84]	; (800dbf0 <HAL_UART_IRQHandler+0x2c0>)
 800db9c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7f8 f9db 	bl	8005f60 <HAL_DMA_Abort_IT>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d019      	beq.n	800dbe4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800dbbe:	4610      	mov	r0, r2
 800dbc0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbc2:	e00f      	b.n	800dbe4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f000 fa77 	bl	800e0b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbca:	e00b      	b.n	800dbe4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f000 fa73 	bl	800e0b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbd2:	e007      	b.n	800dbe4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f000 fa6f 	bl	800e0b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800dbe2:	e253      	b.n	800e08c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbe4:	bf00      	nop
    return;
 800dbe6:	e251      	b.n	800e08c <HAL_UART_IRQHandler+0x75c>
 800dbe8:	10000001 	.word	0x10000001
 800dbec:	04000120 	.word	0x04000120
 800dbf0:	0800f1f1 	.word	0x0800f1f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	f040 81e7 	bne.w	800dfcc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dbfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc02:	f003 0310 	and.w	r3, r3, #16
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	f000 81e0 	beq.w	800dfcc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dc0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc10:	f003 0310 	and.w	r3, r3, #16
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	f000 81d9 	beq.w	800dfcc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	2210      	movs	r2, #16
 800dc20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc2c:	2b40      	cmp	r3, #64	; 0x40
 800dc2e:	f040 8151 	bne.w	800ded4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	4a96      	ldr	r2, [pc, #600]	; (800de94 <HAL_UART_IRQHandler+0x564>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d068      	beq.n	800dd12 <HAL_UART_IRQHandler+0x3e2>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4a93      	ldr	r2, [pc, #588]	; (800de98 <HAL_UART_IRQHandler+0x568>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d061      	beq.n	800dd12 <HAL_UART_IRQHandler+0x3e2>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4a91      	ldr	r2, [pc, #580]	; (800de9c <HAL_UART_IRQHandler+0x56c>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d05a      	beq.n	800dd12 <HAL_UART_IRQHandler+0x3e2>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4a8e      	ldr	r2, [pc, #568]	; (800dea0 <HAL_UART_IRQHandler+0x570>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d053      	beq.n	800dd12 <HAL_UART_IRQHandler+0x3e2>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	4a8c      	ldr	r2, [pc, #560]	; (800dea4 <HAL_UART_IRQHandler+0x574>)
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d04c      	beq.n	800dd12 <HAL_UART_IRQHandler+0x3e2>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a89      	ldr	r2, [pc, #548]	; (800dea8 <HAL_UART_IRQHandler+0x578>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d045      	beq.n	800dd12 <HAL_UART_IRQHandler+0x3e2>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4a87      	ldr	r2, [pc, #540]	; (800deac <HAL_UART_IRQHandler+0x57c>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d03e      	beq.n	800dd12 <HAL_UART_IRQHandler+0x3e2>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4a84      	ldr	r2, [pc, #528]	; (800deb0 <HAL_UART_IRQHandler+0x580>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d037      	beq.n	800dd12 <HAL_UART_IRQHandler+0x3e2>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a82      	ldr	r2, [pc, #520]	; (800deb4 <HAL_UART_IRQHandler+0x584>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d030      	beq.n	800dd12 <HAL_UART_IRQHandler+0x3e2>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4a7f      	ldr	r2, [pc, #508]	; (800deb8 <HAL_UART_IRQHandler+0x588>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d029      	beq.n	800dd12 <HAL_UART_IRQHandler+0x3e2>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	4a7d      	ldr	r2, [pc, #500]	; (800debc <HAL_UART_IRQHandler+0x58c>)
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d022      	beq.n	800dd12 <HAL_UART_IRQHandler+0x3e2>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4a7a      	ldr	r2, [pc, #488]	; (800dec0 <HAL_UART_IRQHandler+0x590>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d01b      	beq.n	800dd12 <HAL_UART_IRQHandler+0x3e2>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	4a78      	ldr	r2, [pc, #480]	; (800dec4 <HAL_UART_IRQHandler+0x594>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d014      	beq.n	800dd12 <HAL_UART_IRQHandler+0x3e2>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a75      	ldr	r2, [pc, #468]	; (800dec8 <HAL_UART_IRQHandler+0x598>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d00d      	beq.n	800dd12 <HAL_UART_IRQHandler+0x3e2>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	4a73      	ldr	r2, [pc, #460]	; (800decc <HAL_UART_IRQHandler+0x59c>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d006      	beq.n	800dd12 <HAL_UART_IRQHandler+0x3e2>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	4a70      	ldr	r2, [pc, #448]	; (800ded0 <HAL_UART_IRQHandler+0x5a0>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d106      	bne.n	800dd20 <HAL_UART_IRQHandler+0x3f0>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	e005      	b.n	800dd2c <HAL_UART_IRQHandler+0x3fc>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dd30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	f000 81ab 	beq.w	800e090 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dd40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd44:	429a      	cmp	r2, r3
 800dd46:	f080 81a3 	bcs.w	800e090 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dd50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd5a:	69db      	ldr	r3, [r3, #28]
 800dd5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd60:	f000 8087 	beq.w	800de72 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd70:	e853 3f00 	ldrex	r3, [r3]
 800dd74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dd78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	461a      	mov	r2, r3
 800dd8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dd8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dd92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dd9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dd9e:	e841 2300 	strex	r3, r2, [r1]
 800dda2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dda6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d1da      	bne.n	800dd64 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	3308      	adds	r3, #8
 800ddb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ddb8:	e853 3f00 	ldrex	r3, [r3]
 800ddbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ddbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ddc0:	f023 0301 	bic.w	r3, r3, #1
 800ddc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	3308      	adds	r3, #8
 800ddce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ddd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ddd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ddda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ddde:	e841 2300 	strex	r3, r2, [r1]
 800dde2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dde4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d1e1      	bne.n	800ddae <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	3308      	adds	r3, #8
 800ddf0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddf4:	e853 3f00 	ldrex	r3, [r3]
 800ddf8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ddfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	3308      	adds	r3, #8
 800de0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800de0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800de10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800de14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800de16:	e841 2300 	strex	r3, r2, [r1]
 800de1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800de1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d1e3      	bne.n	800ddea <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2220      	movs	r2, #32
 800de26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2200      	movs	r2, #0
 800de2e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de38:	e853 3f00 	ldrex	r3, [r3]
 800de3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800de3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de40:	f023 0310 	bic.w	r3, r3, #16
 800de44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	461a      	mov	r2, r3
 800de4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800de52:	65bb      	str	r3, [r7, #88]	; 0x58
 800de54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800de58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800de5a:	e841 2300 	strex	r3, r2, [r1]
 800de5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800de60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de62:	2b00      	cmp	r3, #0
 800de64:	d1e4      	bne.n	800de30 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7f7 fd59 	bl	8005924 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2202      	movs	r2, #2
 800de76:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de84:	b29b      	uxth	r3, r3
 800de86:	1ad3      	subs	r3, r2, r3
 800de88:	b29b      	uxth	r3, r3
 800de8a:	4619      	mov	r1, r3
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f000 f91d 	bl	800e0cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800de92:	e0fd      	b.n	800e090 <HAL_UART_IRQHandler+0x760>
 800de94:	40020010 	.word	0x40020010
 800de98:	40020028 	.word	0x40020028
 800de9c:	40020040 	.word	0x40020040
 800dea0:	40020058 	.word	0x40020058
 800dea4:	40020070 	.word	0x40020070
 800dea8:	40020088 	.word	0x40020088
 800deac:	400200a0 	.word	0x400200a0
 800deb0:	400200b8 	.word	0x400200b8
 800deb4:	40020410 	.word	0x40020410
 800deb8:	40020428 	.word	0x40020428
 800debc:	40020440 	.word	0x40020440
 800dec0:	40020458 	.word	0x40020458
 800dec4:	40020470 	.word	0x40020470
 800dec8:	40020488 	.word	0x40020488
 800decc:	400204a0 	.word	0x400204a0
 800ded0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	1ad3      	subs	r3, r2, r3
 800dee4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800deee:	b29b      	uxth	r3, r3
 800def0:	2b00      	cmp	r3, #0
 800def2:	f000 80cf 	beq.w	800e094 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800def6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800defa:	2b00      	cmp	r3, #0
 800defc:	f000 80ca 	beq.w	800e094 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df08:	e853 3f00 	ldrex	r3, [r3]
 800df0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800df0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800df14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	461a      	mov	r2, r3
 800df1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800df22:	647b      	str	r3, [r7, #68]	; 0x44
 800df24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800df28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df2a:	e841 2300 	strex	r3, r2, [r1]
 800df2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800df30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df32:	2b00      	cmp	r3, #0
 800df34:	d1e4      	bne.n	800df00 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	3308      	adds	r3, #8
 800df3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df40:	e853 3f00 	ldrex	r3, [r3]
 800df44:	623b      	str	r3, [r7, #32]
   return(result);
 800df46:	6a3a      	ldr	r2, [r7, #32]
 800df48:	4b55      	ldr	r3, [pc, #340]	; (800e0a0 <HAL_UART_IRQHandler+0x770>)
 800df4a:	4013      	ands	r3, r2
 800df4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	3308      	adds	r3, #8
 800df56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800df5a:	633a      	str	r2, [r7, #48]	; 0x30
 800df5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df62:	e841 2300 	strex	r3, r2, [r1]
 800df66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800df68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d1e3      	bne.n	800df36 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2220      	movs	r2, #32
 800df72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2200      	movs	r2, #0
 800df7a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2200      	movs	r2, #0
 800df80:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	e853 3f00 	ldrex	r3, [r3]
 800df8e:	60fb      	str	r3, [r7, #12]
   return(result);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f023 0310 	bic.w	r3, r3, #16
 800df96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	461a      	mov	r2, r3
 800dfa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800dfa4:	61fb      	str	r3, [r7, #28]
 800dfa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfa8:	69b9      	ldr	r1, [r7, #24]
 800dfaa:	69fa      	ldr	r2, [r7, #28]
 800dfac:	e841 2300 	strex	r3, r2, [r1]
 800dfb0:	617b      	str	r3, [r7, #20]
   return(result);
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d1e4      	bne.n	800df82 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2202      	movs	r2, #2
 800dfbc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dfbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f000 f881 	bl	800e0cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dfca:	e063      	b.n	800e094 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dfcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dfd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d00e      	beq.n	800dff6 <HAL_UART_IRQHandler+0x6c6>
 800dfd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dfdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d008      	beq.n	800dff6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dfec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f001 f93f 	bl	800f272 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dff4:	e051      	b.n	800e09a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d014      	beq.n	800e02c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d105      	bne.n	800e01a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e00e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e016:	2b00      	cmp	r3, #0
 800e018:	d008      	beq.n	800e02c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d03a      	beq.n	800e098 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	4798      	blx	r3
    }
    return;
 800e02a:	e035      	b.n	800e098 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e02c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e034:	2b00      	cmp	r3, #0
 800e036:	d009      	beq.n	800e04c <HAL_UART_IRQHandler+0x71c>
 800e038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e040:	2b00      	cmp	r3, #0
 800e042:	d003      	beq.n	800e04c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f001 f8e9 	bl	800f21c <UART_EndTransmit_IT>
    return;
 800e04a:	e026      	b.n	800e09a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e054:	2b00      	cmp	r3, #0
 800e056:	d009      	beq.n	800e06c <HAL_UART_IRQHandler+0x73c>
 800e058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e05c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e060:	2b00      	cmp	r3, #0
 800e062:	d003      	beq.n	800e06c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f001 f918 	bl	800f29a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e06a:	e016      	b.n	800e09a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e06c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e074:	2b00      	cmp	r3, #0
 800e076:	d010      	beq.n	800e09a <HAL_UART_IRQHandler+0x76a>
 800e078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	da0c      	bge.n	800e09a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f001 f900 	bl	800f286 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e086:	e008      	b.n	800e09a <HAL_UART_IRQHandler+0x76a>
      return;
 800e088:	bf00      	nop
 800e08a:	e006      	b.n	800e09a <HAL_UART_IRQHandler+0x76a>
    return;
 800e08c:	bf00      	nop
 800e08e:	e004      	b.n	800e09a <HAL_UART_IRQHandler+0x76a>
      return;
 800e090:	bf00      	nop
 800e092:	e002      	b.n	800e09a <HAL_UART_IRQHandler+0x76a>
      return;
 800e094:	bf00      	nop
 800e096:	e000      	b.n	800e09a <HAL_UART_IRQHandler+0x76a>
    return;
 800e098:	bf00      	nop
  }
}
 800e09a:	37e8      	adds	r7, #232	; 0xe8
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	effffffe 	.word	0xeffffffe

0800e0a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b083      	sub	sp, #12
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e0ac:	bf00      	nop
 800e0ae:	370c      	adds	r7, #12
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr

0800e0b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b083      	sub	sp, #12
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e0c0:	bf00      	nop
 800e0c2:	370c      	adds	r7, #12
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr

0800e0cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e0d8:	bf00      	nop
 800e0da:	370c      	adds	r7, #12
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr

0800e0e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e0e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e0e8:	b092      	sub	sp, #72	; 0x48
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	689a      	ldr	r2, [r3, #8]
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	691b      	ldr	r3, [r3, #16]
 800e0fc:	431a      	orrs	r2, r3
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	695b      	ldr	r3, [r3, #20]
 800e102:	431a      	orrs	r2, r3
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	69db      	ldr	r3, [r3, #28]
 800e108:	4313      	orrs	r3, r2
 800e10a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	681a      	ldr	r2, [r3, #0]
 800e112:	4bbe      	ldr	r3, [pc, #760]	; (800e40c <UART_SetConfig+0x328>)
 800e114:	4013      	ands	r3, r2
 800e116:	697a      	ldr	r2, [r7, #20]
 800e118:	6812      	ldr	r2, [r2, #0]
 800e11a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e11c:	430b      	orrs	r3, r1
 800e11e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	685b      	ldr	r3, [r3, #4]
 800e126:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	68da      	ldr	r2, [r3, #12]
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	430a      	orrs	r2, r1
 800e134:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	699b      	ldr	r3, [r3, #24]
 800e13a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	4ab3      	ldr	r2, [pc, #716]	; (800e410 <UART_SetConfig+0x32c>)
 800e142:	4293      	cmp	r3, r2
 800e144:	d004      	beq.n	800e150 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	6a1b      	ldr	r3, [r3, #32]
 800e14a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e14c:	4313      	orrs	r3, r2
 800e14e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	689a      	ldr	r2, [r3, #8]
 800e156:	4baf      	ldr	r3, [pc, #700]	; (800e414 <UART_SetConfig+0x330>)
 800e158:	4013      	ands	r3, r2
 800e15a:	697a      	ldr	r2, [r7, #20]
 800e15c:	6812      	ldr	r2, [r2, #0]
 800e15e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e160:	430b      	orrs	r3, r1
 800e162:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e16a:	f023 010f 	bic.w	r1, r3, #15
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	430a      	orrs	r2, r1
 800e178:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	4aa6      	ldr	r2, [pc, #664]	; (800e418 <UART_SetConfig+0x334>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d177      	bne.n	800e274 <UART_SetConfig+0x190>
 800e184:	4ba5      	ldr	r3, [pc, #660]	; (800e41c <UART_SetConfig+0x338>)
 800e186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e188:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e18c:	2b28      	cmp	r3, #40	; 0x28
 800e18e:	d86d      	bhi.n	800e26c <UART_SetConfig+0x188>
 800e190:	a201      	add	r2, pc, #4	; (adr r2, 800e198 <UART_SetConfig+0xb4>)
 800e192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e196:	bf00      	nop
 800e198:	0800e23d 	.word	0x0800e23d
 800e19c:	0800e26d 	.word	0x0800e26d
 800e1a0:	0800e26d 	.word	0x0800e26d
 800e1a4:	0800e26d 	.word	0x0800e26d
 800e1a8:	0800e26d 	.word	0x0800e26d
 800e1ac:	0800e26d 	.word	0x0800e26d
 800e1b0:	0800e26d 	.word	0x0800e26d
 800e1b4:	0800e26d 	.word	0x0800e26d
 800e1b8:	0800e245 	.word	0x0800e245
 800e1bc:	0800e26d 	.word	0x0800e26d
 800e1c0:	0800e26d 	.word	0x0800e26d
 800e1c4:	0800e26d 	.word	0x0800e26d
 800e1c8:	0800e26d 	.word	0x0800e26d
 800e1cc:	0800e26d 	.word	0x0800e26d
 800e1d0:	0800e26d 	.word	0x0800e26d
 800e1d4:	0800e26d 	.word	0x0800e26d
 800e1d8:	0800e24d 	.word	0x0800e24d
 800e1dc:	0800e26d 	.word	0x0800e26d
 800e1e0:	0800e26d 	.word	0x0800e26d
 800e1e4:	0800e26d 	.word	0x0800e26d
 800e1e8:	0800e26d 	.word	0x0800e26d
 800e1ec:	0800e26d 	.word	0x0800e26d
 800e1f0:	0800e26d 	.word	0x0800e26d
 800e1f4:	0800e26d 	.word	0x0800e26d
 800e1f8:	0800e255 	.word	0x0800e255
 800e1fc:	0800e26d 	.word	0x0800e26d
 800e200:	0800e26d 	.word	0x0800e26d
 800e204:	0800e26d 	.word	0x0800e26d
 800e208:	0800e26d 	.word	0x0800e26d
 800e20c:	0800e26d 	.word	0x0800e26d
 800e210:	0800e26d 	.word	0x0800e26d
 800e214:	0800e26d 	.word	0x0800e26d
 800e218:	0800e25d 	.word	0x0800e25d
 800e21c:	0800e26d 	.word	0x0800e26d
 800e220:	0800e26d 	.word	0x0800e26d
 800e224:	0800e26d 	.word	0x0800e26d
 800e228:	0800e26d 	.word	0x0800e26d
 800e22c:	0800e26d 	.word	0x0800e26d
 800e230:	0800e26d 	.word	0x0800e26d
 800e234:	0800e26d 	.word	0x0800e26d
 800e238:	0800e265 	.word	0x0800e265
 800e23c:	2301      	movs	r3, #1
 800e23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e242:	e326      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e244:	2304      	movs	r3, #4
 800e246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e24a:	e322      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e24c:	2308      	movs	r3, #8
 800e24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e252:	e31e      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e254:	2310      	movs	r3, #16
 800e256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25a:	e31a      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e25c:	2320      	movs	r3, #32
 800e25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e262:	e316      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e264:	2340      	movs	r3, #64	; 0x40
 800e266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26a:	e312      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e26c:	2380      	movs	r3, #128	; 0x80
 800e26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e272:	e30e      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	4a69      	ldr	r2, [pc, #420]	; (800e420 <UART_SetConfig+0x33c>)
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d130      	bne.n	800e2e0 <UART_SetConfig+0x1fc>
 800e27e:	4b67      	ldr	r3, [pc, #412]	; (800e41c <UART_SetConfig+0x338>)
 800e280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e282:	f003 0307 	and.w	r3, r3, #7
 800e286:	2b05      	cmp	r3, #5
 800e288:	d826      	bhi.n	800e2d8 <UART_SetConfig+0x1f4>
 800e28a:	a201      	add	r2, pc, #4	; (adr r2, 800e290 <UART_SetConfig+0x1ac>)
 800e28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e290:	0800e2a9 	.word	0x0800e2a9
 800e294:	0800e2b1 	.word	0x0800e2b1
 800e298:	0800e2b9 	.word	0x0800e2b9
 800e29c:	0800e2c1 	.word	0x0800e2c1
 800e2a0:	0800e2c9 	.word	0x0800e2c9
 800e2a4:	0800e2d1 	.word	0x0800e2d1
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ae:	e2f0      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e2b0:	2304      	movs	r3, #4
 800e2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2b6:	e2ec      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e2b8:	2308      	movs	r3, #8
 800e2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2be:	e2e8      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e2c0:	2310      	movs	r3, #16
 800e2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2c6:	e2e4      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e2c8:	2320      	movs	r3, #32
 800e2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ce:	e2e0      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e2d0:	2340      	movs	r3, #64	; 0x40
 800e2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2d6:	e2dc      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e2d8:	2380      	movs	r3, #128	; 0x80
 800e2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2de:	e2d8      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4a4f      	ldr	r2, [pc, #316]	; (800e424 <UART_SetConfig+0x340>)
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d130      	bne.n	800e34c <UART_SetConfig+0x268>
 800e2ea:	4b4c      	ldr	r3, [pc, #304]	; (800e41c <UART_SetConfig+0x338>)
 800e2ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2ee:	f003 0307 	and.w	r3, r3, #7
 800e2f2:	2b05      	cmp	r3, #5
 800e2f4:	d826      	bhi.n	800e344 <UART_SetConfig+0x260>
 800e2f6:	a201      	add	r2, pc, #4	; (adr r2, 800e2fc <UART_SetConfig+0x218>)
 800e2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2fc:	0800e315 	.word	0x0800e315
 800e300:	0800e31d 	.word	0x0800e31d
 800e304:	0800e325 	.word	0x0800e325
 800e308:	0800e32d 	.word	0x0800e32d
 800e30c:	0800e335 	.word	0x0800e335
 800e310:	0800e33d 	.word	0x0800e33d
 800e314:	2300      	movs	r3, #0
 800e316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e31a:	e2ba      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e31c:	2304      	movs	r3, #4
 800e31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e322:	e2b6      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e324:	2308      	movs	r3, #8
 800e326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e32a:	e2b2      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e32c:	2310      	movs	r3, #16
 800e32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e332:	e2ae      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e334:	2320      	movs	r3, #32
 800e336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e33a:	e2aa      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e33c:	2340      	movs	r3, #64	; 0x40
 800e33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e342:	e2a6      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e344:	2380      	movs	r3, #128	; 0x80
 800e346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34a:	e2a2      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4a35      	ldr	r2, [pc, #212]	; (800e428 <UART_SetConfig+0x344>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d130      	bne.n	800e3b8 <UART_SetConfig+0x2d4>
 800e356:	4b31      	ldr	r3, [pc, #196]	; (800e41c <UART_SetConfig+0x338>)
 800e358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e35a:	f003 0307 	and.w	r3, r3, #7
 800e35e:	2b05      	cmp	r3, #5
 800e360:	d826      	bhi.n	800e3b0 <UART_SetConfig+0x2cc>
 800e362:	a201      	add	r2, pc, #4	; (adr r2, 800e368 <UART_SetConfig+0x284>)
 800e364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e368:	0800e381 	.word	0x0800e381
 800e36c:	0800e389 	.word	0x0800e389
 800e370:	0800e391 	.word	0x0800e391
 800e374:	0800e399 	.word	0x0800e399
 800e378:	0800e3a1 	.word	0x0800e3a1
 800e37c:	0800e3a9 	.word	0x0800e3a9
 800e380:	2300      	movs	r3, #0
 800e382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e386:	e284      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e388:	2304      	movs	r3, #4
 800e38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e38e:	e280      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e390:	2308      	movs	r3, #8
 800e392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e396:	e27c      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e398:	2310      	movs	r3, #16
 800e39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e39e:	e278      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e3a0:	2320      	movs	r3, #32
 800e3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3a6:	e274      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e3a8:	2340      	movs	r3, #64	; 0x40
 800e3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ae:	e270      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e3b0:	2380      	movs	r3, #128	; 0x80
 800e3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3b6:	e26c      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	4a1b      	ldr	r2, [pc, #108]	; (800e42c <UART_SetConfig+0x348>)
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d142      	bne.n	800e448 <UART_SetConfig+0x364>
 800e3c2:	4b16      	ldr	r3, [pc, #88]	; (800e41c <UART_SetConfig+0x338>)
 800e3c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3c6:	f003 0307 	and.w	r3, r3, #7
 800e3ca:	2b05      	cmp	r3, #5
 800e3cc:	d838      	bhi.n	800e440 <UART_SetConfig+0x35c>
 800e3ce:	a201      	add	r2, pc, #4	; (adr r2, 800e3d4 <UART_SetConfig+0x2f0>)
 800e3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3d4:	0800e3ed 	.word	0x0800e3ed
 800e3d8:	0800e3f5 	.word	0x0800e3f5
 800e3dc:	0800e3fd 	.word	0x0800e3fd
 800e3e0:	0800e405 	.word	0x0800e405
 800e3e4:	0800e431 	.word	0x0800e431
 800e3e8:	0800e439 	.word	0x0800e439
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f2:	e24e      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e3f4:	2304      	movs	r3, #4
 800e3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fa:	e24a      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e3fc:	2308      	movs	r3, #8
 800e3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e402:	e246      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e404:	2310      	movs	r3, #16
 800e406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e40a:	e242      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e40c:	cfff69f3 	.word	0xcfff69f3
 800e410:	58000c00 	.word	0x58000c00
 800e414:	11fff4ff 	.word	0x11fff4ff
 800e418:	40011000 	.word	0x40011000
 800e41c:	58024400 	.word	0x58024400
 800e420:	40004400 	.word	0x40004400
 800e424:	40004800 	.word	0x40004800
 800e428:	40004c00 	.word	0x40004c00
 800e42c:	40005000 	.word	0x40005000
 800e430:	2320      	movs	r3, #32
 800e432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e436:	e22c      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e438:	2340      	movs	r3, #64	; 0x40
 800e43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43e:	e228      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e440:	2380      	movs	r3, #128	; 0x80
 800e442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e446:	e224      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4ab1      	ldr	r2, [pc, #708]	; (800e714 <UART_SetConfig+0x630>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d176      	bne.n	800e540 <UART_SetConfig+0x45c>
 800e452:	4bb1      	ldr	r3, [pc, #708]	; (800e718 <UART_SetConfig+0x634>)
 800e454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e45a:	2b28      	cmp	r3, #40	; 0x28
 800e45c:	d86c      	bhi.n	800e538 <UART_SetConfig+0x454>
 800e45e:	a201      	add	r2, pc, #4	; (adr r2, 800e464 <UART_SetConfig+0x380>)
 800e460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e464:	0800e509 	.word	0x0800e509
 800e468:	0800e539 	.word	0x0800e539
 800e46c:	0800e539 	.word	0x0800e539
 800e470:	0800e539 	.word	0x0800e539
 800e474:	0800e539 	.word	0x0800e539
 800e478:	0800e539 	.word	0x0800e539
 800e47c:	0800e539 	.word	0x0800e539
 800e480:	0800e539 	.word	0x0800e539
 800e484:	0800e511 	.word	0x0800e511
 800e488:	0800e539 	.word	0x0800e539
 800e48c:	0800e539 	.word	0x0800e539
 800e490:	0800e539 	.word	0x0800e539
 800e494:	0800e539 	.word	0x0800e539
 800e498:	0800e539 	.word	0x0800e539
 800e49c:	0800e539 	.word	0x0800e539
 800e4a0:	0800e539 	.word	0x0800e539
 800e4a4:	0800e519 	.word	0x0800e519
 800e4a8:	0800e539 	.word	0x0800e539
 800e4ac:	0800e539 	.word	0x0800e539
 800e4b0:	0800e539 	.word	0x0800e539
 800e4b4:	0800e539 	.word	0x0800e539
 800e4b8:	0800e539 	.word	0x0800e539
 800e4bc:	0800e539 	.word	0x0800e539
 800e4c0:	0800e539 	.word	0x0800e539
 800e4c4:	0800e521 	.word	0x0800e521
 800e4c8:	0800e539 	.word	0x0800e539
 800e4cc:	0800e539 	.word	0x0800e539
 800e4d0:	0800e539 	.word	0x0800e539
 800e4d4:	0800e539 	.word	0x0800e539
 800e4d8:	0800e539 	.word	0x0800e539
 800e4dc:	0800e539 	.word	0x0800e539
 800e4e0:	0800e539 	.word	0x0800e539
 800e4e4:	0800e529 	.word	0x0800e529
 800e4e8:	0800e539 	.word	0x0800e539
 800e4ec:	0800e539 	.word	0x0800e539
 800e4f0:	0800e539 	.word	0x0800e539
 800e4f4:	0800e539 	.word	0x0800e539
 800e4f8:	0800e539 	.word	0x0800e539
 800e4fc:	0800e539 	.word	0x0800e539
 800e500:	0800e539 	.word	0x0800e539
 800e504:	0800e531 	.word	0x0800e531
 800e508:	2301      	movs	r3, #1
 800e50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e50e:	e1c0      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e510:	2304      	movs	r3, #4
 800e512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e516:	e1bc      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e518:	2308      	movs	r3, #8
 800e51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e51e:	e1b8      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e520:	2310      	movs	r3, #16
 800e522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e526:	e1b4      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e528:	2320      	movs	r3, #32
 800e52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e52e:	e1b0      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e530:	2340      	movs	r3, #64	; 0x40
 800e532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e536:	e1ac      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e538:	2380      	movs	r3, #128	; 0x80
 800e53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e53e:	e1a8      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	4a75      	ldr	r2, [pc, #468]	; (800e71c <UART_SetConfig+0x638>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d130      	bne.n	800e5ac <UART_SetConfig+0x4c8>
 800e54a:	4b73      	ldr	r3, [pc, #460]	; (800e718 <UART_SetConfig+0x634>)
 800e54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e54e:	f003 0307 	and.w	r3, r3, #7
 800e552:	2b05      	cmp	r3, #5
 800e554:	d826      	bhi.n	800e5a4 <UART_SetConfig+0x4c0>
 800e556:	a201      	add	r2, pc, #4	; (adr r2, 800e55c <UART_SetConfig+0x478>)
 800e558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e55c:	0800e575 	.word	0x0800e575
 800e560:	0800e57d 	.word	0x0800e57d
 800e564:	0800e585 	.word	0x0800e585
 800e568:	0800e58d 	.word	0x0800e58d
 800e56c:	0800e595 	.word	0x0800e595
 800e570:	0800e59d 	.word	0x0800e59d
 800e574:	2300      	movs	r3, #0
 800e576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e57a:	e18a      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e57c:	2304      	movs	r3, #4
 800e57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e582:	e186      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e584:	2308      	movs	r3, #8
 800e586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e58a:	e182      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e58c:	2310      	movs	r3, #16
 800e58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e592:	e17e      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e594:	2320      	movs	r3, #32
 800e596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e59a:	e17a      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e59c:	2340      	movs	r3, #64	; 0x40
 800e59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5a2:	e176      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e5a4:	2380      	movs	r3, #128	; 0x80
 800e5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5aa:	e172      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4a5b      	ldr	r2, [pc, #364]	; (800e720 <UART_SetConfig+0x63c>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d130      	bne.n	800e618 <UART_SetConfig+0x534>
 800e5b6:	4b58      	ldr	r3, [pc, #352]	; (800e718 <UART_SetConfig+0x634>)
 800e5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5ba:	f003 0307 	and.w	r3, r3, #7
 800e5be:	2b05      	cmp	r3, #5
 800e5c0:	d826      	bhi.n	800e610 <UART_SetConfig+0x52c>
 800e5c2:	a201      	add	r2, pc, #4	; (adr r2, 800e5c8 <UART_SetConfig+0x4e4>)
 800e5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c8:	0800e5e1 	.word	0x0800e5e1
 800e5cc:	0800e5e9 	.word	0x0800e5e9
 800e5d0:	0800e5f1 	.word	0x0800e5f1
 800e5d4:	0800e5f9 	.word	0x0800e5f9
 800e5d8:	0800e601 	.word	0x0800e601
 800e5dc:	0800e609 	.word	0x0800e609
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5e6:	e154      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e5e8:	2304      	movs	r3, #4
 800e5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ee:	e150      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e5f0:	2308      	movs	r3, #8
 800e5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5f6:	e14c      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e5f8:	2310      	movs	r3, #16
 800e5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5fe:	e148      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e600:	2320      	movs	r3, #32
 800e602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e606:	e144      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e608:	2340      	movs	r3, #64	; 0x40
 800e60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e60e:	e140      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e610:	2380      	movs	r3, #128	; 0x80
 800e612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e616:	e13c      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a41      	ldr	r2, [pc, #260]	; (800e724 <UART_SetConfig+0x640>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	f040 8082 	bne.w	800e728 <UART_SetConfig+0x644>
 800e624:	4b3c      	ldr	r3, [pc, #240]	; (800e718 <UART_SetConfig+0x634>)
 800e626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e628:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e62c:	2b28      	cmp	r3, #40	; 0x28
 800e62e:	d86d      	bhi.n	800e70c <UART_SetConfig+0x628>
 800e630:	a201      	add	r2, pc, #4	; (adr r2, 800e638 <UART_SetConfig+0x554>)
 800e632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e636:	bf00      	nop
 800e638:	0800e6dd 	.word	0x0800e6dd
 800e63c:	0800e70d 	.word	0x0800e70d
 800e640:	0800e70d 	.word	0x0800e70d
 800e644:	0800e70d 	.word	0x0800e70d
 800e648:	0800e70d 	.word	0x0800e70d
 800e64c:	0800e70d 	.word	0x0800e70d
 800e650:	0800e70d 	.word	0x0800e70d
 800e654:	0800e70d 	.word	0x0800e70d
 800e658:	0800e6e5 	.word	0x0800e6e5
 800e65c:	0800e70d 	.word	0x0800e70d
 800e660:	0800e70d 	.word	0x0800e70d
 800e664:	0800e70d 	.word	0x0800e70d
 800e668:	0800e70d 	.word	0x0800e70d
 800e66c:	0800e70d 	.word	0x0800e70d
 800e670:	0800e70d 	.word	0x0800e70d
 800e674:	0800e70d 	.word	0x0800e70d
 800e678:	0800e6ed 	.word	0x0800e6ed
 800e67c:	0800e70d 	.word	0x0800e70d
 800e680:	0800e70d 	.word	0x0800e70d
 800e684:	0800e70d 	.word	0x0800e70d
 800e688:	0800e70d 	.word	0x0800e70d
 800e68c:	0800e70d 	.word	0x0800e70d
 800e690:	0800e70d 	.word	0x0800e70d
 800e694:	0800e70d 	.word	0x0800e70d
 800e698:	0800e6f5 	.word	0x0800e6f5
 800e69c:	0800e70d 	.word	0x0800e70d
 800e6a0:	0800e70d 	.word	0x0800e70d
 800e6a4:	0800e70d 	.word	0x0800e70d
 800e6a8:	0800e70d 	.word	0x0800e70d
 800e6ac:	0800e70d 	.word	0x0800e70d
 800e6b0:	0800e70d 	.word	0x0800e70d
 800e6b4:	0800e70d 	.word	0x0800e70d
 800e6b8:	0800e6fd 	.word	0x0800e6fd
 800e6bc:	0800e70d 	.word	0x0800e70d
 800e6c0:	0800e70d 	.word	0x0800e70d
 800e6c4:	0800e70d 	.word	0x0800e70d
 800e6c8:	0800e70d 	.word	0x0800e70d
 800e6cc:	0800e70d 	.word	0x0800e70d
 800e6d0:	0800e70d 	.word	0x0800e70d
 800e6d4:	0800e70d 	.word	0x0800e70d
 800e6d8:	0800e705 	.word	0x0800e705
 800e6dc:	2301      	movs	r3, #1
 800e6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6e2:	e0d6      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e6e4:	2304      	movs	r3, #4
 800e6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ea:	e0d2      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e6ec:	2308      	movs	r3, #8
 800e6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6f2:	e0ce      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e6f4:	2310      	movs	r3, #16
 800e6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6fa:	e0ca      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e6fc:	2320      	movs	r3, #32
 800e6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e702:	e0c6      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e704:	2340      	movs	r3, #64	; 0x40
 800e706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e70a:	e0c2      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e70c:	2380      	movs	r3, #128	; 0x80
 800e70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e712:	e0be      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e714:	40011400 	.word	0x40011400
 800e718:	58024400 	.word	0x58024400
 800e71c:	40007800 	.word	0x40007800
 800e720:	40007c00 	.word	0x40007c00
 800e724:	40011800 	.word	0x40011800
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	4aad      	ldr	r2, [pc, #692]	; (800e9e4 <UART_SetConfig+0x900>)
 800e72e:	4293      	cmp	r3, r2
 800e730:	d176      	bne.n	800e820 <UART_SetConfig+0x73c>
 800e732:	4bad      	ldr	r3, [pc, #692]	; (800e9e8 <UART_SetConfig+0x904>)
 800e734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e73a:	2b28      	cmp	r3, #40	; 0x28
 800e73c:	d86c      	bhi.n	800e818 <UART_SetConfig+0x734>
 800e73e:	a201      	add	r2, pc, #4	; (adr r2, 800e744 <UART_SetConfig+0x660>)
 800e740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e744:	0800e7e9 	.word	0x0800e7e9
 800e748:	0800e819 	.word	0x0800e819
 800e74c:	0800e819 	.word	0x0800e819
 800e750:	0800e819 	.word	0x0800e819
 800e754:	0800e819 	.word	0x0800e819
 800e758:	0800e819 	.word	0x0800e819
 800e75c:	0800e819 	.word	0x0800e819
 800e760:	0800e819 	.word	0x0800e819
 800e764:	0800e7f1 	.word	0x0800e7f1
 800e768:	0800e819 	.word	0x0800e819
 800e76c:	0800e819 	.word	0x0800e819
 800e770:	0800e819 	.word	0x0800e819
 800e774:	0800e819 	.word	0x0800e819
 800e778:	0800e819 	.word	0x0800e819
 800e77c:	0800e819 	.word	0x0800e819
 800e780:	0800e819 	.word	0x0800e819
 800e784:	0800e7f9 	.word	0x0800e7f9
 800e788:	0800e819 	.word	0x0800e819
 800e78c:	0800e819 	.word	0x0800e819
 800e790:	0800e819 	.word	0x0800e819
 800e794:	0800e819 	.word	0x0800e819
 800e798:	0800e819 	.word	0x0800e819
 800e79c:	0800e819 	.word	0x0800e819
 800e7a0:	0800e819 	.word	0x0800e819
 800e7a4:	0800e801 	.word	0x0800e801
 800e7a8:	0800e819 	.word	0x0800e819
 800e7ac:	0800e819 	.word	0x0800e819
 800e7b0:	0800e819 	.word	0x0800e819
 800e7b4:	0800e819 	.word	0x0800e819
 800e7b8:	0800e819 	.word	0x0800e819
 800e7bc:	0800e819 	.word	0x0800e819
 800e7c0:	0800e819 	.word	0x0800e819
 800e7c4:	0800e809 	.word	0x0800e809
 800e7c8:	0800e819 	.word	0x0800e819
 800e7cc:	0800e819 	.word	0x0800e819
 800e7d0:	0800e819 	.word	0x0800e819
 800e7d4:	0800e819 	.word	0x0800e819
 800e7d8:	0800e819 	.word	0x0800e819
 800e7dc:	0800e819 	.word	0x0800e819
 800e7e0:	0800e819 	.word	0x0800e819
 800e7e4:	0800e811 	.word	0x0800e811
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ee:	e050      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e7f0:	2304      	movs	r3, #4
 800e7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7f6:	e04c      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e7f8:	2308      	movs	r3, #8
 800e7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7fe:	e048      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e800:	2310      	movs	r3, #16
 800e802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e806:	e044      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e808:	2320      	movs	r3, #32
 800e80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e80e:	e040      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e810:	2340      	movs	r3, #64	; 0x40
 800e812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e816:	e03c      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e818:	2380      	movs	r3, #128	; 0x80
 800e81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e81e:	e038      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4a71      	ldr	r2, [pc, #452]	; (800e9ec <UART_SetConfig+0x908>)
 800e826:	4293      	cmp	r3, r2
 800e828:	d130      	bne.n	800e88c <UART_SetConfig+0x7a8>
 800e82a:	4b6f      	ldr	r3, [pc, #444]	; (800e9e8 <UART_SetConfig+0x904>)
 800e82c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e82e:	f003 0307 	and.w	r3, r3, #7
 800e832:	2b05      	cmp	r3, #5
 800e834:	d826      	bhi.n	800e884 <UART_SetConfig+0x7a0>
 800e836:	a201      	add	r2, pc, #4	; (adr r2, 800e83c <UART_SetConfig+0x758>)
 800e838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e83c:	0800e855 	.word	0x0800e855
 800e840:	0800e85d 	.word	0x0800e85d
 800e844:	0800e865 	.word	0x0800e865
 800e848:	0800e86d 	.word	0x0800e86d
 800e84c:	0800e875 	.word	0x0800e875
 800e850:	0800e87d 	.word	0x0800e87d
 800e854:	2302      	movs	r3, #2
 800e856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e85a:	e01a      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e85c:	2304      	movs	r3, #4
 800e85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e862:	e016      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e864:	2308      	movs	r3, #8
 800e866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e86a:	e012      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e86c:	2310      	movs	r3, #16
 800e86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e872:	e00e      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e874:	2320      	movs	r3, #32
 800e876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e87a:	e00a      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e87c:	2340      	movs	r3, #64	; 0x40
 800e87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e882:	e006      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e884:	2380      	movs	r3, #128	; 0x80
 800e886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e88a:	e002      	b.n	800e892 <UART_SetConfig+0x7ae>
 800e88c:	2380      	movs	r3, #128	; 0x80
 800e88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	4a55      	ldr	r2, [pc, #340]	; (800e9ec <UART_SetConfig+0x908>)
 800e898:	4293      	cmp	r3, r2
 800e89a:	f040 80f8 	bne.w	800ea8e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e89e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e8a2:	2b20      	cmp	r3, #32
 800e8a4:	dc46      	bgt.n	800e934 <UART_SetConfig+0x850>
 800e8a6:	2b02      	cmp	r3, #2
 800e8a8:	db75      	blt.n	800e996 <UART_SetConfig+0x8b2>
 800e8aa:	3b02      	subs	r3, #2
 800e8ac:	2b1e      	cmp	r3, #30
 800e8ae:	d872      	bhi.n	800e996 <UART_SetConfig+0x8b2>
 800e8b0:	a201      	add	r2, pc, #4	; (adr r2, 800e8b8 <UART_SetConfig+0x7d4>)
 800e8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8b6:	bf00      	nop
 800e8b8:	0800e93b 	.word	0x0800e93b
 800e8bc:	0800e997 	.word	0x0800e997
 800e8c0:	0800e943 	.word	0x0800e943
 800e8c4:	0800e997 	.word	0x0800e997
 800e8c8:	0800e997 	.word	0x0800e997
 800e8cc:	0800e997 	.word	0x0800e997
 800e8d0:	0800e953 	.word	0x0800e953
 800e8d4:	0800e997 	.word	0x0800e997
 800e8d8:	0800e997 	.word	0x0800e997
 800e8dc:	0800e997 	.word	0x0800e997
 800e8e0:	0800e997 	.word	0x0800e997
 800e8e4:	0800e997 	.word	0x0800e997
 800e8e8:	0800e997 	.word	0x0800e997
 800e8ec:	0800e997 	.word	0x0800e997
 800e8f0:	0800e963 	.word	0x0800e963
 800e8f4:	0800e997 	.word	0x0800e997
 800e8f8:	0800e997 	.word	0x0800e997
 800e8fc:	0800e997 	.word	0x0800e997
 800e900:	0800e997 	.word	0x0800e997
 800e904:	0800e997 	.word	0x0800e997
 800e908:	0800e997 	.word	0x0800e997
 800e90c:	0800e997 	.word	0x0800e997
 800e910:	0800e997 	.word	0x0800e997
 800e914:	0800e997 	.word	0x0800e997
 800e918:	0800e997 	.word	0x0800e997
 800e91c:	0800e997 	.word	0x0800e997
 800e920:	0800e997 	.word	0x0800e997
 800e924:	0800e997 	.word	0x0800e997
 800e928:	0800e997 	.word	0x0800e997
 800e92c:	0800e997 	.word	0x0800e997
 800e930:	0800e989 	.word	0x0800e989
 800e934:	2b40      	cmp	r3, #64	; 0x40
 800e936:	d02a      	beq.n	800e98e <UART_SetConfig+0x8aa>
 800e938:	e02d      	b.n	800e996 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e93a:	f7fe f879 	bl	800ca30 <HAL_RCCEx_GetD3PCLK1Freq>
 800e93e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e940:	e02f      	b.n	800e9a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e946:	4618      	mov	r0, r3
 800e948:	f7fe f888 	bl	800ca5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e950:	e027      	b.n	800e9a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e952:	f107 0318 	add.w	r3, r7, #24
 800e956:	4618      	mov	r0, r3
 800e958:	f7fe f9d4 	bl	800cd04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e960:	e01f      	b.n	800e9a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e962:	4b21      	ldr	r3, [pc, #132]	; (800e9e8 <UART_SetConfig+0x904>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f003 0320 	and.w	r3, r3, #32
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d009      	beq.n	800e982 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e96e:	4b1e      	ldr	r3, [pc, #120]	; (800e9e8 <UART_SetConfig+0x904>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	08db      	lsrs	r3, r3, #3
 800e974:	f003 0303 	and.w	r3, r3, #3
 800e978:	4a1d      	ldr	r2, [pc, #116]	; (800e9f0 <UART_SetConfig+0x90c>)
 800e97a:	fa22 f303 	lsr.w	r3, r2, r3
 800e97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e980:	e00f      	b.n	800e9a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e982:	4b1b      	ldr	r3, [pc, #108]	; (800e9f0 <UART_SetConfig+0x90c>)
 800e984:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e986:	e00c      	b.n	800e9a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e988:	4b1a      	ldr	r3, [pc, #104]	; (800e9f4 <UART_SetConfig+0x910>)
 800e98a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e98c:	e009      	b.n	800e9a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e98e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e994:	e005      	b.n	800e9a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e996:	2300      	movs	r3, #0
 800e998:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e99a:	2301      	movs	r3, #1
 800e99c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e9a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e9a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	f000 81ee 	beq.w	800ed86 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ae:	4a12      	ldr	r2, [pc, #72]	; (800e9f8 <UART_SetConfig+0x914>)
 800e9b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9bc:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	685a      	ldr	r2, [r3, #4]
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	005b      	lsls	r3, r3, #1
 800e9c6:	4413      	add	r3, r2
 800e9c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d305      	bcc.n	800e9da <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e9d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d910      	bls.n	800e9fc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e9da:	2301      	movs	r3, #1
 800e9dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e9e0:	e1d1      	b.n	800ed86 <UART_SetConfig+0xca2>
 800e9e2:	bf00      	nop
 800e9e4:	40011c00 	.word	0x40011c00
 800e9e8:	58024400 	.word	0x58024400
 800e9ec:	58000c00 	.word	0x58000c00
 800e9f0:	03d09000 	.word	0x03d09000
 800e9f4:	003d0900 	.word	0x003d0900
 800e9f8:	080105a0 	.word	0x080105a0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e9fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9fe:	2200      	movs	r2, #0
 800ea00:	60bb      	str	r3, [r7, #8]
 800ea02:	60fa      	str	r2, [r7, #12]
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea08:	4ac0      	ldr	r2, [pc, #768]	; (800ed0c <UART_SetConfig+0xc28>)
 800ea0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea0e:	b29b      	uxth	r3, r3
 800ea10:	2200      	movs	r2, #0
 800ea12:	603b      	str	r3, [r7, #0]
 800ea14:	607a      	str	r2, [r7, #4]
 800ea16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ea1e:	f7f1 fc65 	bl	80002ec <__aeabi_uldivmod>
 800ea22:	4602      	mov	r2, r0
 800ea24:	460b      	mov	r3, r1
 800ea26:	4610      	mov	r0, r2
 800ea28:	4619      	mov	r1, r3
 800ea2a:	f04f 0200 	mov.w	r2, #0
 800ea2e:	f04f 0300 	mov.w	r3, #0
 800ea32:	020b      	lsls	r3, r1, #8
 800ea34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ea38:	0202      	lsls	r2, r0, #8
 800ea3a:	6979      	ldr	r1, [r7, #20]
 800ea3c:	6849      	ldr	r1, [r1, #4]
 800ea3e:	0849      	lsrs	r1, r1, #1
 800ea40:	2000      	movs	r0, #0
 800ea42:	460c      	mov	r4, r1
 800ea44:	4605      	mov	r5, r0
 800ea46:	eb12 0804 	adds.w	r8, r2, r4
 800ea4a:	eb43 0905 	adc.w	r9, r3, r5
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	2200      	movs	r2, #0
 800ea54:	469a      	mov	sl, r3
 800ea56:	4693      	mov	fp, r2
 800ea58:	4652      	mov	r2, sl
 800ea5a:	465b      	mov	r3, fp
 800ea5c:	4640      	mov	r0, r8
 800ea5e:	4649      	mov	r1, r9
 800ea60:	f7f1 fc44 	bl	80002ec <__aeabi_uldivmod>
 800ea64:	4602      	mov	r2, r0
 800ea66:	460b      	mov	r3, r1
 800ea68:	4613      	mov	r3, r2
 800ea6a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ea6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ea72:	d308      	bcc.n	800ea86 <UART_SetConfig+0x9a2>
 800ea74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea7a:	d204      	bcs.n	800ea86 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea82:	60da      	str	r2, [r3, #12]
 800ea84:	e17f      	b.n	800ed86 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ea86:	2301      	movs	r3, #1
 800ea88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ea8c:	e17b      	b.n	800ed86 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	69db      	ldr	r3, [r3, #28]
 800ea92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea96:	f040 80bd 	bne.w	800ec14 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ea9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ea9e:	2b20      	cmp	r3, #32
 800eaa0:	dc48      	bgt.n	800eb34 <UART_SetConfig+0xa50>
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	db7b      	blt.n	800eb9e <UART_SetConfig+0xaba>
 800eaa6:	2b20      	cmp	r3, #32
 800eaa8:	d879      	bhi.n	800eb9e <UART_SetConfig+0xaba>
 800eaaa:	a201      	add	r2, pc, #4	; (adr r2, 800eab0 <UART_SetConfig+0x9cc>)
 800eaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab0:	0800eb3b 	.word	0x0800eb3b
 800eab4:	0800eb43 	.word	0x0800eb43
 800eab8:	0800eb9f 	.word	0x0800eb9f
 800eabc:	0800eb9f 	.word	0x0800eb9f
 800eac0:	0800eb4b 	.word	0x0800eb4b
 800eac4:	0800eb9f 	.word	0x0800eb9f
 800eac8:	0800eb9f 	.word	0x0800eb9f
 800eacc:	0800eb9f 	.word	0x0800eb9f
 800ead0:	0800eb5b 	.word	0x0800eb5b
 800ead4:	0800eb9f 	.word	0x0800eb9f
 800ead8:	0800eb9f 	.word	0x0800eb9f
 800eadc:	0800eb9f 	.word	0x0800eb9f
 800eae0:	0800eb9f 	.word	0x0800eb9f
 800eae4:	0800eb9f 	.word	0x0800eb9f
 800eae8:	0800eb9f 	.word	0x0800eb9f
 800eaec:	0800eb9f 	.word	0x0800eb9f
 800eaf0:	0800eb6b 	.word	0x0800eb6b
 800eaf4:	0800eb9f 	.word	0x0800eb9f
 800eaf8:	0800eb9f 	.word	0x0800eb9f
 800eafc:	0800eb9f 	.word	0x0800eb9f
 800eb00:	0800eb9f 	.word	0x0800eb9f
 800eb04:	0800eb9f 	.word	0x0800eb9f
 800eb08:	0800eb9f 	.word	0x0800eb9f
 800eb0c:	0800eb9f 	.word	0x0800eb9f
 800eb10:	0800eb9f 	.word	0x0800eb9f
 800eb14:	0800eb9f 	.word	0x0800eb9f
 800eb18:	0800eb9f 	.word	0x0800eb9f
 800eb1c:	0800eb9f 	.word	0x0800eb9f
 800eb20:	0800eb9f 	.word	0x0800eb9f
 800eb24:	0800eb9f 	.word	0x0800eb9f
 800eb28:	0800eb9f 	.word	0x0800eb9f
 800eb2c:	0800eb9f 	.word	0x0800eb9f
 800eb30:	0800eb91 	.word	0x0800eb91
 800eb34:	2b40      	cmp	r3, #64	; 0x40
 800eb36:	d02e      	beq.n	800eb96 <UART_SetConfig+0xab2>
 800eb38:	e031      	b.n	800eb9e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb3a:	f7fc fd8f 	bl	800b65c <HAL_RCC_GetPCLK1Freq>
 800eb3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb40:	e033      	b.n	800ebaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eb42:	f7fc fda1 	bl	800b688 <HAL_RCC_GetPCLK2Freq>
 800eb46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb48:	e02f      	b.n	800ebaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7fd ff84 	bl	800ca5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb58:	e027      	b.n	800ebaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb5a:	f107 0318 	add.w	r3, r7, #24
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f7fe f8d0 	bl	800cd04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb68:	e01f      	b.n	800ebaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb6a:	4b69      	ldr	r3, [pc, #420]	; (800ed10 <UART_SetConfig+0xc2c>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f003 0320 	and.w	r3, r3, #32
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d009      	beq.n	800eb8a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eb76:	4b66      	ldr	r3, [pc, #408]	; (800ed10 <UART_SetConfig+0xc2c>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	08db      	lsrs	r3, r3, #3
 800eb7c:	f003 0303 	and.w	r3, r3, #3
 800eb80:	4a64      	ldr	r2, [pc, #400]	; (800ed14 <UART_SetConfig+0xc30>)
 800eb82:	fa22 f303 	lsr.w	r3, r2, r3
 800eb86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eb88:	e00f      	b.n	800ebaa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800eb8a:	4b62      	ldr	r3, [pc, #392]	; (800ed14 <UART_SetConfig+0xc30>)
 800eb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb8e:	e00c      	b.n	800ebaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eb90:	4b61      	ldr	r3, [pc, #388]	; (800ed18 <UART_SetConfig+0xc34>)
 800eb92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb94:	e009      	b.n	800ebaa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eb96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb9c:	e005      	b.n	800ebaa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eba2:	2301      	movs	r3, #1
 800eba4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ebaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	f000 80ea 	beq.w	800ed86 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebb6:	4a55      	ldr	r2, [pc, #340]	; (800ed0c <UART_SetConfig+0xc28>)
 800ebb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ebc4:	005a      	lsls	r2, r3, #1
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	685b      	ldr	r3, [r3, #4]
 800ebca:	085b      	lsrs	r3, r3, #1
 800ebcc:	441a      	add	r2, r3
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	685b      	ldr	r3, [r3, #4]
 800ebd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebd6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ebd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebda:	2b0f      	cmp	r3, #15
 800ebdc:	d916      	bls.n	800ec0c <UART_SetConfig+0xb28>
 800ebde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebe4:	d212      	bcs.n	800ec0c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ebe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	f023 030f 	bic.w	r3, r3, #15
 800ebee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ebf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf2:	085b      	lsrs	r3, r3, #1
 800ebf4:	b29b      	uxth	r3, r3
 800ebf6:	f003 0307 	and.w	r3, r3, #7
 800ebfa:	b29a      	uxth	r2, r3
 800ebfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ebfe:	4313      	orrs	r3, r2
 800ec00:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ec08:	60da      	str	r2, [r3, #12]
 800ec0a:	e0bc      	b.n	800ed86 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ec12:	e0b8      	b.n	800ed86 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ec14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ec18:	2b20      	cmp	r3, #32
 800ec1a:	dc4b      	bgt.n	800ecb4 <UART_SetConfig+0xbd0>
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f2c0 8087 	blt.w	800ed30 <UART_SetConfig+0xc4c>
 800ec22:	2b20      	cmp	r3, #32
 800ec24:	f200 8084 	bhi.w	800ed30 <UART_SetConfig+0xc4c>
 800ec28:	a201      	add	r2, pc, #4	; (adr r2, 800ec30 <UART_SetConfig+0xb4c>)
 800ec2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec2e:	bf00      	nop
 800ec30:	0800ecbb 	.word	0x0800ecbb
 800ec34:	0800ecc3 	.word	0x0800ecc3
 800ec38:	0800ed31 	.word	0x0800ed31
 800ec3c:	0800ed31 	.word	0x0800ed31
 800ec40:	0800eccb 	.word	0x0800eccb
 800ec44:	0800ed31 	.word	0x0800ed31
 800ec48:	0800ed31 	.word	0x0800ed31
 800ec4c:	0800ed31 	.word	0x0800ed31
 800ec50:	0800ecdb 	.word	0x0800ecdb
 800ec54:	0800ed31 	.word	0x0800ed31
 800ec58:	0800ed31 	.word	0x0800ed31
 800ec5c:	0800ed31 	.word	0x0800ed31
 800ec60:	0800ed31 	.word	0x0800ed31
 800ec64:	0800ed31 	.word	0x0800ed31
 800ec68:	0800ed31 	.word	0x0800ed31
 800ec6c:	0800ed31 	.word	0x0800ed31
 800ec70:	0800eceb 	.word	0x0800eceb
 800ec74:	0800ed31 	.word	0x0800ed31
 800ec78:	0800ed31 	.word	0x0800ed31
 800ec7c:	0800ed31 	.word	0x0800ed31
 800ec80:	0800ed31 	.word	0x0800ed31
 800ec84:	0800ed31 	.word	0x0800ed31
 800ec88:	0800ed31 	.word	0x0800ed31
 800ec8c:	0800ed31 	.word	0x0800ed31
 800ec90:	0800ed31 	.word	0x0800ed31
 800ec94:	0800ed31 	.word	0x0800ed31
 800ec98:	0800ed31 	.word	0x0800ed31
 800ec9c:	0800ed31 	.word	0x0800ed31
 800eca0:	0800ed31 	.word	0x0800ed31
 800eca4:	0800ed31 	.word	0x0800ed31
 800eca8:	0800ed31 	.word	0x0800ed31
 800ecac:	0800ed31 	.word	0x0800ed31
 800ecb0:	0800ed23 	.word	0x0800ed23
 800ecb4:	2b40      	cmp	r3, #64	; 0x40
 800ecb6:	d037      	beq.n	800ed28 <UART_SetConfig+0xc44>
 800ecb8:	e03a      	b.n	800ed30 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ecba:	f7fc fccf 	bl	800b65c <HAL_RCC_GetPCLK1Freq>
 800ecbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ecc0:	e03c      	b.n	800ed3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ecc2:	f7fc fce1 	bl	800b688 <HAL_RCC_GetPCLK2Freq>
 800ecc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ecc8:	e038      	b.n	800ed3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7fd fec4 	bl	800ca5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ecd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecd8:	e030      	b.n	800ed3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ecda:	f107 0318 	add.w	r3, r7, #24
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fe f810 	bl	800cd04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ece4:	69fb      	ldr	r3, [r7, #28]
 800ece6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ece8:	e028      	b.n	800ed3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ecea:	4b09      	ldr	r3, [pc, #36]	; (800ed10 <UART_SetConfig+0xc2c>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	f003 0320 	and.w	r3, r3, #32
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d012      	beq.n	800ed1c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ecf6:	4b06      	ldr	r3, [pc, #24]	; (800ed10 <UART_SetConfig+0xc2c>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	08db      	lsrs	r3, r3, #3
 800ecfc:	f003 0303 	and.w	r3, r3, #3
 800ed00:	4a04      	ldr	r2, [pc, #16]	; (800ed14 <UART_SetConfig+0xc30>)
 800ed02:	fa22 f303 	lsr.w	r3, r2, r3
 800ed06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ed08:	e018      	b.n	800ed3c <UART_SetConfig+0xc58>
 800ed0a:	bf00      	nop
 800ed0c:	080105a0 	.word	0x080105a0
 800ed10:	58024400 	.word	0x58024400
 800ed14:	03d09000 	.word	0x03d09000
 800ed18:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ed1c:	4b24      	ldr	r3, [pc, #144]	; (800edb0 <UART_SetConfig+0xccc>)
 800ed1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed20:	e00c      	b.n	800ed3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ed22:	4b24      	ldr	r3, [pc, #144]	; (800edb4 <UART_SetConfig+0xcd0>)
 800ed24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed26:	e009      	b.n	800ed3c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed2e:	e005      	b.n	800ed3c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ed30:	2300      	movs	r3, #0
 800ed32:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ed34:	2301      	movs	r3, #1
 800ed36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ed3a:	bf00      	nop
    }

    if (pclk != 0U)
 800ed3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d021      	beq.n	800ed86 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed46:	4a1c      	ldr	r2, [pc, #112]	; (800edb8 <UART_SetConfig+0xcd4>)
 800ed48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed50:	fbb3 f2f2 	udiv	r2, r3, r2
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	685b      	ldr	r3, [r3, #4]
 800ed58:	085b      	lsrs	r3, r3, #1
 800ed5a:	441a      	add	r2, r3
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed64:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ed66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed68:	2b0f      	cmp	r3, #15
 800ed6a:	d909      	bls.n	800ed80 <UART_SetConfig+0xc9c>
 800ed6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed72:	d205      	bcs.n	800ed80 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ed74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed76:	b29a      	uxth	r2, r3
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	60da      	str	r2, [r3, #12]
 800ed7e:	e002      	b.n	800ed86 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ed80:	2301      	movs	r3, #1
 800ed82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	2201      	movs	r2, #1
 800ed8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	2201      	movs	r2, #1
 800ed92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800eda2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3748      	adds	r7, #72	; 0x48
 800edaa:	46bd      	mov	sp, r7
 800edac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800edb0:	03d09000 	.word	0x03d09000
 800edb4:	003d0900 	.word	0x003d0900
 800edb8:	080105a0 	.word	0x080105a0

0800edbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edc8:	f003 0301 	and.w	r3, r3, #1
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d00a      	beq.n	800ede6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	430a      	orrs	r2, r1
 800ede4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edea:	f003 0302 	and.w	r3, r3, #2
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d00a      	beq.n	800ee08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	430a      	orrs	r2, r1
 800ee06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee0c:	f003 0304 	and.w	r3, r3, #4
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d00a      	beq.n	800ee2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	430a      	orrs	r2, r1
 800ee28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee2e:	f003 0308 	and.w	r3, r3, #8
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d00a      	beq.n	800ee4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	430a      	orrs	r2, r1
 800ee4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee50:	f003 0310 	and.w	r3, r3, #16
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d00a      	beq.n	800ee6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	689b      	ldr	r3, [r3, #8]
 800ee5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	430a      	orrs	r2, r1
 800ee6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee72:	f003 0320 	and.w	r3, r3, #32
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d00a      	beq.n	800ee90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	689b      	ldr	r3, [r3, #8]
 800ee80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	430a      	orrs	r2, r1
 800ee8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d01a      	beq.n	800eed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	685b      	ldr	r3, [r3, #4]
 800eea2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	430a      	orrs	r2, r1
 800eeb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eeb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eeba:	d10a      	bne.n	800eed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	430a      	orrs	r2, r1
 800eed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d00a      	beq.n	800eef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	430a      	orrs	r2, r1
 800eef2:	605a      	str	r2, [r3, #4]
  }
}
 800eef4:	bf00      	nop
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b098      	sub	sp, #96	; 0x60
 800ef04:	af02      	add	r7, sp, #8
 800ef06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ef10:	f7f5 fb00 	bl	8004514 <HAL_GetTick>
 800ef14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	f003 0308 	and.w	r3, r3, #8
 800ef20:	2b08      	cmp	r3, #8
 800ef22:	d12f      	bne.n	800ef84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f000 f88e 	bl	800f054 <UART_WaitOnFlagUntilTimeout>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d022      	beq.n	800ef84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef46:	e853 3f00 	ldrex	r3, [r3]
 800ef4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ef4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef52:	653b      	str	r3, [r7, #80]	; 0x50
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	461a      	mov	r2, r3
 800ef5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef5c:	647b      	str	r3, [r7, #68]	; 0x44
 800ef5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ef62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef64:	e841 2300 	strex	r3, r2, [r1]
 800ef68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ef6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d1e6      	bne.n	800ef3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2220      	movs	r2, #32
 800ef74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef80:	2303      	movs	r3, #3
 800ef82:	e063      	b.n	800f04c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f003 0304 	and.w	r3, r3, #4
 800ef8e:	2b04      	cmp	r3, #4
 800ef90:	d149      	bne.n	800f026 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ef96:	9300      	str	r3, [sp, #0]
 800ef98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f000 f857 	bl	800f054 <UART_WaitOnFlagUntilTimeout>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d03c      	beq.n	800f026 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb4:	e853 3f00 	ldrex	r3, [r3]
 800efb8:	623b      	str	r3, [r7, #32]
   return(result);
 800efba:	6a3b      	ldr	r3, [r7, #32]
 800efbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800efc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	461a      	mov	r2, r3
 800efc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efca:	633b      	str	r3, [r7, #48]	; 0x30
 800efcc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800efd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efd2:	e841 2300 	strex	r3, r2, [r1]
 800efd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800efd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d1e6      	bne.n	800efac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	3308      	adds	r3, #8
 800efe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	e853 3f00 	ldrex	r3, [r3]
 800efec:	60fb      	str	r3, [r7, #12]
   return(result);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	f023 0301 	bic.w	r3, r3, #1
 800eff4:	64bb      	str	r3, [r7, #72]	; 0x48
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	3308      	adds	r3, #8
 800effc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800effe:	61fa      	str	r2, [r7, #28]
 800f000:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f002:	69b9      	ldr	r1, [r7, #24]
 800f004:	69fa      	ldr	r2, [r7, #28]
 800f006:	e841 2300 	strex	r3, r2, [r1]
 800f00a:	617b      	str	r3, [r7, #20]
   return(result);
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d1e5      	bne.n	800efde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2220      	movs	r2, #32
 800f016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2200      	movs	r2, #0
 800f01e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f022:	2303      	movs	r3, #3
 800f024:	e012      	b.n	800f04c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2220      	movs	r2, #32
 800f02a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2220      	movs	r2, #32
 800f032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2200      	movs	r2, #0
 800f03a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2200      	movs	r2, #0
 800f040:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2200      	movs	r2, #0
 800f046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f04a:	2300      	movs	r3, #0
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3758      	adds	r7, #88	; 0x58
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b084      	sub	sp, #16
 800f058:	af00      	add	r7, sp, #0
 800f05a:	60f8      	str	r0, [r7, #12]
 800f05c:	60b9      	str	r1, [r7, #8]
 800f05e:	603b      	str	r3, [r7, #0]
 800f060:	4613      	mov	r3, r2
 800f062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f064:	e049      	b.n	800f0fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f066:	69bb      	ldr	r3, [r7, #24]
 800f068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f06c:	d045      	beq.n	800f0fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f06e:	f7f5 fa51 	bl	8004514 <HAL_GetTick>
 800f072:	4602      	mov	r2, r0
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	1ad3      	subs	r3, r2, r3
 800f078:	69ba      	ldr	r2, [r7, #24]
 800f07a:	429a      	cmp	r2, r3
 800f07c:	d302      	bcc.n	800f084 <UART_WaitOnFlagUntilTimeout+0x30>
 800f07e:	69bb      	ldr	r3, [r7, #24]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d101      	bne.n	800f088 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f084:	2303      	movs	r3, #3
 800f086:	e048      	b.n	800f11a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f003 0304 	and.w	r3, r3, #4
 800f092:	2b00      	cmp	r3, #0
 800f094:	d031      	beq.n	800f0fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	69db      	ldr	r3, [r3, #28]
 800f09c:	f003 0308 	and.w	r3, r3, #8
 800f0a0:	2b08      	cmp	r3, #8
 800f0a2:	d110      	bne.n	800f0c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	2208      	movs	r2, #8
 800f0aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f0ac:	68f8      	ldr	r0, [r7, #12]
 800f0ae:	f000 f839 	bl	800f124 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	2208      	movs	r2, #8
 800f0b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	e029      	b.n	800f11a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	69db      	ldr	r3, [r3, #28]
 800f0cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f0d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f0d4:	d111      	bne.n	800f0fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f0de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f0e0:	68f8      	ldr	r0, [r7, #12]
 800f0e2:	f000 f81f 	bl	800f124 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2220      	movs	r2, #32
 800f0ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f0f6:	2303      	movs	r3, #3
 800f0f8:	e00f      	b.n	800f11a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	69da      	ldr	r2, [r3, #28]
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	4013      	ands	r3, r2
 800f104:	68ba      	ldr	r2, [r7, #8]
 800f106:	429a      	cmp	r2, r3
 800f108:	bf0c      	ite	eq
 800f10a:	2301      	moveq	r3, #1
 800f10c:	2300      	movne	r3, #0
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	461a      	mov	r2, r3
 800f112:	79fb      	ldrb	r3, [r7, #7]
 800f114:	429a      	cmp	r2, r3
 800f116:	d0a6      	beq.n	800f066 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f118:	2300      	movs	r3, #0
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3710      	adds	r7, #16
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}
	...

0800f124 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f124:	b480      	push	{r7}
 800f126:	b095      	sub	sp, #84	; 0x54
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f134:	e853 3f00 	ldrex	r3, [r3]
 800f138:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f140:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	461a      	mov	r2, r3
 800f148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f14a:	643b      	str	r3, [r7, #64]	; 0x40
 800f14c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f14e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f150:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f152:	e841 2300 	strex	r3, r2, [r1]
 800f156:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d1e6      	bne.n	800f12c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	3308      	adds	r3, #8
 800f164:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f166:	6a3b      	ldr	r3, [r7, #32]
 800f168:	e853 3f00 	ldrex	r3, [r3]
 800f16c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f16e:	69fa      	ldr	r2, [r7, #28]
 800f170:	4b1e      	ldr	r3, [pc, #120]	; (800f1ec <UART_EndRxTransfer+0xc8>)
 800f172:	4013      	ands	r3, r2
 800f174:	64bb      	str	r3, [r7, #72]	; 0x48
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	3308      	adds	r3, #8
 800f17c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f17e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f180:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f182:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f186:	e841 2300 	strex	r3, r2, [r1]
 800f18a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d1e5      	bne.n	800f15e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f196:	2b01      	cmp	r3, #1
 800f198:	d118      	bne.n	800f1cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	e853 3f00 	ldrex	r3, [r3]
 800f1a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	f023 0310 	bic.w	r3, r3, #16
 800f1ae:	647b      	str	r3, [r7, #68]	; 0x44
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1b8:	61bb      	str	r3, [r7, #24]
 800f1ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1bc:	6979      	ldr	r1, [r7, #20]
 800f1be:	69ba      	ldr	r2, [r7, #24]
 800f1c0:	e841 2300 	strex	r3, r2, [r1]
 800f1c4:	613b      	str	r3, [r7, #16]
   return(result);
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d1e6      	bne.n	800f19a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2220      	movs	r2, #32
 800f1d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f1e0:	bf00      	nop
 800f1e2:	3754      	adds	r7, #84	; 0x54
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr
 800f1ec:	effffffe 	.word	0xeffffffe

0800f1f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b084      	sub	sp, #16
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	2200      	movs	r2, #0
 800f202:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	2200      	movs	r2, #0
 800f20a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f20e:	68f8      	ldr	r0, [r7, #12]
 800f210:	f7fe ff52 	bl	800e0b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f214:	bf00      	nop
 800f216:	3710      	adds	r7, #16
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}

0800f21c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b088      	sub	sp, #32
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	e853 3f00 	ldrex	r3, [r3]
 800f230:	60bb      	str	r3, [r7, #8]
   return(result);
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f238:	61fb      	str	r3, [r7, #28]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	461a      	mov	r2, r3
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	61bb      	str	r3, [r7, #24]
 800f244:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f246:	6979      	ldr	r1, [r7, #20]
 800f248:	69ba      	ldr	r2, [r7, #24]
 800f24a:	e841 2300 	strex	r3, r2, [r1]
 800f24e:	613b      	str	r3, [r7, #16]
   return(result);
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d1e6      	bne.n	800f224 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2220      	movs	r2, #32
 800f25a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2200      	movs	r2, #0
 800f262:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7fe ff1d 	bl	800e0a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f26a:	bf00      	nop
 800f26c:	3720      	adds	r7, #32
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}

0800f272 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f272:	b480      	push	{r7}
 800f274:	b083      	sub	sp, #12
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f27a:	bf00      	nop
 800f27c:	370c      	adds	r7, #12
 800f27e:	46bd      	mov	sp, r7
 800f280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f284:	4770      	bx	lr

0800f286 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f286:	b480      	push	{r7}
 800f288:	b083      	sub	sp, #12
 800f28a:	af00      	add	r7, sp, #0
 800f28c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f28e:	bf00      	nop
 800f290:	370c      	adds	r7, #12
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr

0800f29a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f29a:	b480      	push	{r7}
 800f29c:	b083      	sub	sp, #12
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f2a2:	bf00      	nop
 800f2a4:	370c      	adds	r7, #12
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr

0800f2ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f2ae:	b480      	push	{r7}
 800f2b0:	b085      	sub	sp, #20
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d101      	bne.n	800f2c4 <HAL_UARTEx_DisableFifoMode+0x16>
 800f2c0:	2302      	movs	r3, #2
 800f2c2:	e027      	b.n	800f314 <HAL_UARTEx_DisableFifoMode+0x66>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2224      	movs	r2, #36	; 0x24
 800f2d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	681a      	ldr	r2, [r3, #0]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f022 0201 	bic.w	r2, r2, #1
 800f2ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f2f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	68fa      	ldr	r2, [r7, #12]
 800f300:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2220      	movs	r2, #32
 800f306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2200      	movs	r2, #0
 800f30e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f312:	2300      	movs	r3, #0
}
 800f314:	4618      	mov	r0, r3
 800f316:	3714      	adds	r7, #20
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr

0800f320 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f330:	2b01      	cmp	r3, #1
 800f332:	d101      	bne.n	800f338 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f334:	2302      	movs	r3, #2
 800f336:	e02d      	b.n	800f394 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2201      	movs	r2, #1
 800f33c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2224      	movs	r2, #36	; 0x24
 800f344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	681a      	ldr	r2, [r3, #0]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f022 0201 	bic.w	r2, r2, #1
 800f35e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	689b      	ldr	r3, [r3, #8]
 800f366:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	683a      	ldr	r2, [r7, #0]
 800f370:	430a      	orrs	r2, r1
 800f372:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f000 f84f 	bl	800f418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	68fa      	ldr	r2, [r7, #12]
 800f380:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2220      	movs	r2, #32
 800f386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2200      	movs	r2, #0
 800f38e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f392:	2300      	movs	r3, #0
}
 800f394:	4618      	mov	r0, r3
 800f396:	3710      	adds	r7, #16
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f3ac:	2b01      	cmp	r3, #1
 800f3ae:	d101      	bne.n	800f3b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f3b0:	2302      	movs	r3, #2
 800f3b2:	e02d      	b.n	800f410 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2224      	movs	r2, #36	; 0x24
 800f3c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	681a      	ldr	r2, [r3, #0]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f022 0201 	bic.w	r2, r2, #1
 800f3da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	689b      	ldr	r3, [r3, #8]
 800f3e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	683a      	ldr	r2, [r7, #0]
 800f3ec:	430a      	orrs	r2, r1
 800f3ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f000 f811 	bl	800f418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	68fa      	ldr	r2, [r7, #12]
 800f3fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2220      	movs	r2, #32
 800f402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2200      	movs	r2, #0
 800f40a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f40e:	2300      	movs	r3, #0
}
 800f410:	4618      	mov	r0, r3
 800f412:	3710      	adds	r7, #16
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}

0800f418 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f418:	b480      	push	{r7}
 800f41a:	b085      	sub	sp, #20
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f424:	2b00      	cmp	r3, #0
 800f426:	d108      	bne.n	800f43a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2201      	movs	r2, #1
 800f42c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2201      	movs	r2, #1
 800f434:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f438:	e031      	b.n	800f49e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f43a:	2310      	movs	r3, #16
 800f43c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f43e:	2310      	movs	r3, #16
 800f440:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	689b      	ldr	r3, [r3, #8]
 800f448:	0e5b      	lsrs	r3, r3, #25
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	f003 0307 	and.w	r3, r3, #7
 800f450:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	689b      	ldr	r3, [r3, #8]
 800f458:	0f5b      	lsrs	r3, r3, #29
 800f45a:	b2db      	uxtb	r3, r3
 800f45c:	f003 0307 	and.w	r3, r3, #7
 800f460:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f462:	7bbb      	ldrb	r3, [r7, #14]
 800f464:	7b3a      	ldrb	r2, [r7, #12]
 800f466:	4911      	ldr	r1, [pc, #68]	; (800f4ac <UARTEx_SetNbDataToProcess+0x94>)
 800f468:	5c8a      	ldrb	r2, [r1, r2]
 800f46a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f46e:	7b3a      	ldrb	r2, [r7, #12]
 800f470:	490f      	ldr	r1, [pc, #60]	; (800f4b0 <UARTEx_SetNbDataToProcess+0x98>)
 800f472:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f474:	fb93 f3f2 	sdiv	r3, r3, r2
 800f478:	b29a      	uxth	r2, r3
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f480:	7bfb      	ldrb	r3, [r7, #15]
 800f482:	7b7a      	ldrb	r2, [r7, #13]
 800f484:	4909      	ldr	r1, [pc, #36]	; (800f4ac <UARTEx_SetNbDataToProcess+0x94>)
 800f486:	5c8a      	ldrb	r2, [r1, r2]
 800f488:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f48c:	7b7a      	ldrb	r2, [r7, #13]
 800f48e:	4908      	ldr	r1, [pc, #32]	; (800f4b0 <UARTEx_SetNbDataToProcess+0x98>)
 800f490:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f492:	fb93 f3f2 	sdiv	r3, r3, r2
 800f496:	b29a      	uxth	r2, r3
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f49e:	bf00      	nop
 800f4a0:	3714      	adds	r7, #20
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a8:	4770      	bx	lr
 800f4aa:	bf00      	nop
 800f4ac:	080105b8 	.word	0x080105b8
 800f4b0:	080105c0 	.word	0x080105c0

0800f4b4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b083      	sub	sp, #12
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d121      	bne.n	800f50a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	4b27      	ldr	r3, [pc, #156]	; (800f568 <FMC_SDRAM_Init+0xb4>)
 800f4cc:	4013      	ands	r3, r2
 800f4ce:	683a      	ldr	r2, [r7, #0]
 800f4d0:	6851      	ldr	r1, [r2, #4]
 800f4d2:	683a      	ldr	r2, [r7, #0]
 800f4d4:	6892      	ldr	r2, [r2, #8]
 800f4d6:	4311      	orrs	r1, r2
 800f4d8:	683a      	ldr	r2, [r7, #0]
 800f4da:	68d2      	ldr	r2, [r2, #12]
 800f4dc:	4311      	orrs	r1, r2
 800f4de:	683a      	ldr	r2, [r7, #0]
 800f4e0:	6912      	ldr	r2, [r2, #16]
 800f4e2:	4311      	orrs	r1, r2
 800f4e4:	683a      	ldr	r2, [r7, #0]
 800f4e6:	6952      	ldr	r2, [r2, #20]
 800f4e8:	4311      	orrs	r1, r2
 800f4ea:	683a      	ldr	r2, [r7, #0]
 800f4ec:	6992      	ldr	r2, [r2, #24]
 800f4ee:	4311      	orrs	r1, r2
 800f4f0:	683a      	ldr	r2, [r7, #0]
 800f4f2:	69d2      	ldr	r2, [r2, #28]
 800f4f4:	4311      	orrs	r1, r2
 800f4f6:	683a      	ldr	r2, [r7, #0]
 800f4f8:	6a12      	ldr	r2, [r2, #32]
 800f4fa:	4311      	orrs	r1, r2
 800f4fc:	683a      	ldr	r2, [r7, #0]
 800f4fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f500:	430a      	orrs	r2, r1
 800f502:	431a      	orrs	r2, r3
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	601a      	str	r2, [r3, #0]
 800f508:	e026      	b.n	800f558 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	69d9      	ldr	r1, [r3, #28]
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	6a1b      	ldr	r3, [r3, #32]
 800f51a:	4319      	orrs	r1, r3
 800f51c:	683b      	ldr	r3, [r7, #0]
 800f51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f520:	430b      	orrs	r3, r1
 800f522:	431a      	orrs	r2, r3
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	685a      	ldr	r2, [r3, #4]
 800f52c:	4b0e      	ldr	r3, [pc, #56]	; (800f568 <FMC_SDRAM_Init+0xb4>)
 800f52e:	4013      	ands	r3, r2
 800f530:	683a      	ldr	r2, [r7, #0]
 800f532:	6851      	ldr	r1, [r2, #4]
 800f534:	683a      	ldr	r2, [r7, #0]
 800f536:	6892      	ldr	r2, [r2, #8]
 800f538:	4311      	orrs	r1, r2
 800f53a:	683a      	ldr	r2, [r7, #0]
 800f53c:	68d2      	ldr	r2, [r2, #12]
 800f53e:	4311      	orrs	r1, r2
 800f540:	683a      	ldr	r2, [r7, #0]
 800f542:	6912      	ldr	r2, [r2, #16]
 800f544:	4311      	orrs	r1, r2
 800f546:	683a      	ldr	r2, [r7, #0]
 800f548:	6952      	ldr	r2, [r2, #20]
 800f54a:	4311      	orrs	r1, r2
 800f54c:	683a      	ldr	r2, [r7, #0]
 800f54e:	6992      	ldr	r2, [r2, #24]
 800f550:	430a      	orrs	r2, r1
 800f552:	431a      	orrs	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f558:	2300      	movs	r3, #0
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	370c      	adds	r7, #12
 800f55e:	46bd      	mov	sp, r7
 800f560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f564:	4770      	bx	lr
 800f566:	bf00      	nop
 800f568:	ffff8000 	.word	0xffff8000

0800f56c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b085      	sub	sp, #20
 800f570:	af00      	add	r7, sp, #0
 800f572:	60f8      	str	r0, [r7, #12]
 800f574:	60b9      	str	r1, [r7, #8]
 800f576:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d128      	bne.n	800f5d0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	689b      	ldr	r3, [r3, #8]
 800f582:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	1e59      	subs	r1, r3, #1
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	685b      	ldr	r3, [r3, #4]
 800f590:	3b01      	subs	r3, #1
 800f592:	011b      	lsls	r3, r3, #4
 800f594:	4319      	orrs	r1, r3
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	689b      	ldr	r3, [r3, #8]
 800f59a:	3b01      	subs	r3, #1
 800f59c:	021b      	lsls	r3, r3, #8
 800f59e:	4319      	orrs	r1, r3
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	68db      	ldr	r3, [r3, #12]
 800f5a4:	3b01      	subs	r3, #1
 800f5a6:	031b      	lsls	r3, r3, #12
 800f5a8:	4319      	orrs	r1, r3
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	691b      	ldr	r3, [r3, #16]
 800f5ae:	3b01      	subs	r3, #1
 800f5b0:	041b      	lsls	r3, r3, #16
 800f5b2:	4319      	orrs	r1, r3
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	695b      	ldr	r3, [r3, #20]
 800f5b8:	3b01      	subs	r3, #1
 800f5ba:	051b      	lsls	r3, r3, #20
 800f5bc:	4319      	orrs	r1, r3
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	699b      	ldr	r3, [r3, #24]
 800f5c2:	3b01      	subs	r3, #1
 800f5c4:	061b      	lsls	r3, r3, #24
 800f5c6:	430b      	orrs	r3, r1
 800f5c8:	431a      	orrs	r2, r3
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	609a      	str	r2, [r3, #8]
 800f5ce:	e02d      	b.n	800f62c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	689a      	ldr	r2, [r3, #8]
 800f5d4:	4b19      	ldr	r3, [pc, #100]	; (800f63c <FMC_SDRAM_Timing_Init+0xd0>)
 800f5d6:	4013      	ands	r3, r2
 800f5d8:	68ba      	ldr	r2, [r7, #8]
 800f5da:	68d2      	ldr	r2, [r2, #12]
 800f5dc:	3a01      	subs	r2, #1
 800f5de:	0311      	lsls	r1, r2, #12
 800f5e0:	68ba      	ldr	r2, [r7, #8]
 800f5e2:	6952      	ldr	r2, [r2, #20]
 800f5e4:	3a01      	subs	r2, #1
 800f5e6:	0512      	lsls	r2, r2, #20
 800f5e8:	430a      	orrs	r2, r1
 800f5ea:	431a      	orrs	r2, r3
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	68db      	ldr	r3, [r3, #12]
 800f5f4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	1e59      	subs	r1, r3, #1
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	3b01      	subs	r3, #1
 800f604:	011b      	lsls	r3, r3, #4
 800f606:	4319      	orrs	r1, r3
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	689b      	ldr	r3, [r3, #8]
 800f60c:	3b01      	subs	r3, #1
 800f60e:	021b      	lsls	r3, r3, #8
 800f610:	4319      	orrs	r1, r3
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	691b      	ldr	r3, [r3, #16]
 800f616:	3b01      	subs	r3, #1
 800f618:	041b      	lsls	r3, r3, #16
 800f61a:	4319      	orrs	r1, r3
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	699b      	ldr	r3, [r3, #24]
 800f620:	3b01      	subs	r3, #1
 800f622:	061b      	lsls	r3, r3, #24
 800f624:	430b      	orrs	r3, r1
 800f626:	431a      	orrs	r2, r3
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800f62c:	2300      	movs	r3, #0
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3714      	adds	r7, #20
 800f632:	46bd      	mov	sp, r7
 800f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f638:	4770      	bx	lr
 800f63a:	bf00      	nop
 800f63c:	ff0f0fff 	.word	0xff0f0fff

0800f640 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f640:	b480      	push	{r7}
 800f642:	b085      	sub	sp, #20
 800f644:	af00      	add	r7, sp, #0
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	691a      	ldr	r2, [r3, #16]
 800f650:	4b0c      	ldr	r3, [pc, #48]	; (800f684 <FMC_SDRAM_SendCommand+0x44>)
 800f652:	4013      	ands	r3, r2
 800f654:	68ba      	ldr	r2, [r7, #8]
 800f656:	6811      	ldr	r1, [r2, #0]
 800f658:	68ba      	ldr	r2, [r7, #8]
 800f65a:	6852      	ldr	r2, [r2, #4]
 800f65c:	4311      	orrs	r1, r2
 800f65e:	68ba      	ldr	r2, [r7, #8]
 800f660:	6892      	ldr	r2, [r2, #8]
 800f662:	3a01      	subs	r2, #1
 800f664:	0152      	lsls	r2, r2, #5
 800f666:	4311      	orrs	r1, r2
 800f668:	68ba      	ldr	r2, [r7, #8]
 800f66a:	68d2      	ldr	r2, [r2, #12]
 800f66c:	0252      	lsls	r2, r2, #9
 800f66e:	430a      	orrs	r2, r1
 800f670:	431a      	orrs	r2, r3
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800f676:	2300      	movs	r3, #0
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3714      	adds	r7, #20
 800f67c:	46bd      	mov	sp, r7
 800f67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f682:	4770      	bx	lr
 800f684:	ffc00000 	.word	0xffc00000

0800f688 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800f688:	b480      	push	{r7}
 800f68a:	b083      	sub	sp, #12
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	695a      	ldr	r2, [r3, #20]
 800f696:	4b07      	ldr	r3, [pc, #28]	; (800f6b4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800f698:	4013      	ands	r3, r2
 800f69a:	683a      	ldr	r2, [r7, #0]
 800f69c:	0052      	lsls	r2, r2, #1
 800f69e:	431a      	orrs	r2, r3
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800f6a4:	2300      	movs	r3, #0
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	370c      	adds	r7, #12
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b0:	4770      	bx	lr
 800f6b2:	bf00      	nop
 800f6b4:	ffffc001 	.word	0xffffc001

0800f6b8 <__errno>:
 800f6b8:	4b01      	ldr	r3, [pc, #4]	; (800f6c0 <__errno+0x8>)
 800f6ba:	6818      	ldr	r0, [r3, #0]
 800f6bc:	4770      	bx	lr
 800f6be:	bf00      	nop
 800f6c0:	24000294 	.word	0x24000294

0800f6c4 <__libc_init_array>:
 800f6c4:	b570      	push	{r4, r5, r6, lr}
 800f6c6:	4d0d      	ldr	r5, [pc, #52]	; (800f6fc <__libc_init_array+0x38>)
 800f6c8:	4c0d      	ldr	r4, [pc, #52]	; (800f700 <__libc_init_array+0x3c>)
 800f6ca:	1b64      	subs	r4, r4, r5
 800f6cc:	10a4      	asrs	r4, r4, #2
 800f6ce:	2600      	movs	r6, #0
 800f6d0:	42a6      	cmp	r6, r4
 800f6d2:	d109      	bne.n	800f6e8 <__libc_init_array+0x24>
 800f6d4:	4d0b      	ldr	r5, [pc, #44]	; (800f704 <__libc_init_array+0x40>)
 800f6d6:	4c0c      	ldr	r4, [pc, #48]	; (800f708 <__libc_init_array+0x44>)
 800f6d8:	f000 fc66 	bl	800ffa8 <_init>
 800f6dc:	1b64      	subs	r4, r4, r5
 800f6de:	10a4      	asrs	r4, r4, #2
 800f6e0:	2600      	movs	r6, #0
 800f6e2:	42a6      	cmp	r6, r4
 800f6e4:	d105      	bne.n	800f6f2 <__libc_init_array+0x2e>
 800f6e6:	bd70      	pop	{r4, r5, r6, pc}
 800f6e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6ec:	4798      	blx	r3
 800f6ee:	3601      	adds	r6, #1
 800f6f0:	e7ee      	b.n	800f6d0 <__libc_init_array+0xc>
 800f6f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6f6:	4798      	blx	r3
 800f6f8:	3601      	adds	r6, #1
 800f6fa:	e7f2      	b.n	800f6e2 <__libc_init_array+0x1e>
 800f6fc:	08010634 	.word	0x08010634
 800f700:	08010634 	.word	0x08010634
 800f704:	08010634 	.word	0x08010634
 800f708:	08010638 	.word	0x08010638

0800f70c <memset>:
 800f70c:	4402      	add	r2, r0
 800f70e:	4603      	mov	r3, r0
 800f710:	4293      	cmp	r3, r2
 800f712:	d100      	bne.n	800f716 <memset+0xa>
 800f714:	4770      	bx	lr
 800f716:	f803 1b01 	strb.w	r1, [r3], #1
 800f71a:	e7f9      	b.n	800f710 <memset+0x4>

0800f71c <setvbuf>:
 800f71c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f720:	461d      	mov	r5, r3
 800f722:	4b5d      	ldr	r3, [pc, #372]	; (800f898 <setvbuf+0x17c>)
 800f724:	681f      	ldr	r7, [r3, #0]
 800f726:	4604      	mov	r4, r0
 800f728:	460e      	mov	r6, r1
 800f72a:	4690      	mov	r8, r2
 800f72c:	b127      	cbz	r7, 800f738 <setvbuf+0x1c>
 800f72e:	69bb      	ldr	r3, [r7, #24]
 800f730:	b913      	cbnz	r3, 800f738 <setvbuf+0x1c>
 800f732:	4638      	mov	r0, r7
 800f734:	f000 f9d2 	bl	800fadc <__sinit>
 800f738:	4b58      	ldr	r3, [pc, #352]	; (800f89c <setvbuf+0x180>)
 800f73a:	429c      	cmp	r4, r3
 800f73c:	d167      	bne.n	800f80e <setvbuf+0xf2>
 800f73e:	687c      	ldr	r4, [r7, #4]
 800f740:	f1b8 0f02 	cmp.w	r8, #2
 800f744:	d006      	beq.n	800f754 <setvbuf+0x38>
 800f746:	f1b8 0f01 	cmp.w	r8, #1
 800f74a:	f200 809f 	bhi.w	800f88c <setvbuf+0x170>
 800f74e:	2d00      	cmp	r5, #0
 800f750:	f2c0 809c 	blt.w	800f88c <setvbuf+0x170>
 800f754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f756:	07db      	lsls	r3, r3, #31
 800f758:	d405      	bmi.n	800f766 <setvbuf+0x4a>
 800f75a:	89a3      	ldrh	r3, [r4, #12]
 800f75c:	0598      	lsls	r0, r3, #22
 800f75e:	d402      	bmi.n	800f766 <setvbuf+0x4a>
 800f760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f762:	f000 fa59 	bl	800fc18 <__retarget_lock_acquire_recursive>
 800f766:	4621      	mov	r1, r4
 800f768:	4638      	mov	r0, r7
 800f76a:	f000 f923 	bl	800f9b4 <_fflush_r>
 800f76e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f770:	b141      	cbz	r1, 800f784 <setvbuf+0x68>
 800f772:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f776:	4299      	cmp	r1, r3
 800f778:	d002      	beq.n	800f780 <setvbuf+0x64>
 800f77a:	4638      	mov	r0, r7
 800f77c:	f000 fa7c 	bl	800fc78 <_free_r>
 800f780:	2300      	movs	r3, #0
 800f782:	6363      	str	r3, [r4, #52]	; 0x34
 800f784:	2300      	movs	r3, #0
 800f786:	61a3      	str	r3, [r4, #24]
 800f788:	6063      	str	r3, [r4, #4]
 800f78a:	89a3      	ldrh	r3, [r4, #12]
 800f78c:	0619      	lsls	r1, r3, #24
 800f78e:	d503      	bpl.n	800f798 <setvbuf+0x7c>
 800f790:	6921      	ldr	r1, [r4, #16]
 800f792:	4638      	mov	r0, r7
 800f794:	f000 fa70 	bl	800fc78 <_free_r>
 800f798:	89a3      	ldrh	r3, [r4, #12]
 800f79a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800f79e:	f023 0303 	bic.w	r3, r3, #3
 800f7a2:	f1b8 0f02 	cmp.w	r8, #2
 800f7a6:	81a3      	strh	r3, [r4, #12]
 800f7a8:	d06c      	beq.n	800f884 <setvbuf+0x168>
 800f7aa:	ab01      	add	r3, sp, #4
 800f7ac:	466a      	mov	r2, sp
 800f7ae:	4621      	mov	r1, r4
 800f7b0:	4638      	mov	r0, r7
 800f7b2:	f000 fa33 	bl	800fc1c <__swhatbuf_r>
 800f7b6:	89a3      	ldrh	r3, [r4, #12]
 800f7b8:	4318      	orrs	r0, r3
 800f7ba:	81a0      	strh	r0, [r4, #12]
 800f7bc:	2d00      	cmp	r5, #0
 800f7be:	d130      	bne.n	800f822 <setvbuf+0x106>
 800f7c0:	9d00      	ldr	r5, [sp, #0]
 800f7c2:	4628      	mov	r0, r5
 800f7c4:	f000 fa50 	bl	800fc68 <malloc>
 800f7c8:	4606      	mov	r6, r0
 800f7ca:	2800      	cmp	r0, #0
 800f7cc:	d155      	bne.n	800f87a <setvbuf+0x15e>
 800f7ce:	f8dd 9000 	ldr.w	r9, [sp]
 800f7d2:	45a9      	cmp	r9, r5
 800f7d4:	d14a      	bne.n	800f86c <setvbuf+0x150>
 800f7d6:	f04f 35ff 	mov.w	r5, #4294967295
 800f7da:	2200      	movs	r2, #0
 800f7dc:	60a2      	str	r2, [r4, #8]
 800f7de:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800f7e2:	6022      	str	r2, [r4, #0]
 800f7e4:	6122      	str	r2, [r4, #16]
 800f7e6:	2201      	movs	r2, #1
 800f7e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7ec:	6162      	str	r2, [r4, #20]
 800f7ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f7f0:	f043 0302 	orr.w	r3, r3, #2
 800f7f4:	07d2      	lsls	r2, r2, #31
 800f7f6:	81a3      	strh	r3, [r4, #12]
 800f7f8:	d405      	bmi.n	800f806 <setvbuf+0xea>
 800f7fa:	f413 7f00 	tst.w	r3, #512	; 0x200
 800f7fe:	d102      	bne.n	800f806 <setvbuf+0xea>
 800f800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f802:	f000 fa0a 	bl	800fc1a <__retarget_lock_release_recursive>
 800f806:	4628      	mov	r0, r5
 800f808:	b003      	add	sp, #12
 800f80a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f80e:	4b24      	ldr	r3, [pc, #144]	; (800f8a0 <setvbuf+0x184>)
 800f810:	429c      	cmp	r4, r3
 800f812:	d101      	bne.n	800f818 <setvbuf+0xfc>
 800f814:	68bc      	ldr	r4, [r7, #8]
 800f816:	e793      	b.n	800f740 <setvbuf+0x24>
 800f818:	4b22      	ldr	r3, [pc, #136]	; (800f8a4 <setvbuf+0x188>)
 800f81a:	429c      	cmp	r4, r3
 800f81c:	bf08      	it	eq
 800f81e:	68fc      	ldreq	r4, [r7, #12]
 800f820:	e78e      	b.n	800f740 <setvbuf+0x24>
 800f822:	2e00      	cmp	r6, #0
 800f824:	d0cd      	beq.n	800f7c2 <setvbuf+0xa6>
 800f826:	69bb      	ldr	r3, [r7, #24]
 800f828:	b913      	cbnz	r3, 800f830 <setvbuf+0x114>
 800f82a:	4638      	mov	r0, r7
 800f82c:	f000 f956 	bl	800fadc <__sinit>
 800f830:	f1b8 0f01 	cmp.w	r8, #1
 800f834:	bf08      	it	eq
 800f836:	89a3      	ldrheq	r3, [r4, #12]
 800f838:	6026      	str	r6, [r4, #0]
 800f83a:	bf04      	itt	eq
 800f83c:	f043 0301 	orreq.w	r3, r3, #1
 800f840:	81a3      	strheq	r3, [r4, #12]
 800f842:	89a2      	ldrh	r2, [r4, #12]
 800f844:	f012 0308 	ands.w	r3, r2, #8
 800f848:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f84c:	d01c      	beq.n	800f888 <setvbuf+0x16c>
 800f84e:	07d3      	lsls	r3, r2, #31
 800f850:	bf41      	itttt	mi
 800f852:	2300      	movmi	r3, #0
 800f854:	426d      	negmi	r5, r5
 800f856:	60a3      	strmi	r3, [r4, #8]
 800f858:	61a5      	strmi	r5, [r4, #24]
 800f85a:	bf58      	it	pl
 800f85c:	60a5      	strpl	r5, [r4, #8]
 800f85e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800f860:	f015 0501 	ands.w	r5, r5, #1
 800f864:	d115      	bne.n	800f892 <setvbuf+0x176>
 800f866:	f412 7f00 	tst.w	r2, #512	; 0x200
 800f86a:	e7c8      	b.n	800f7fe <setvbuf+0xe2>
 800f86c:	4648      	mov	r0, r9
 800f86e:	f000 f9fb 	bl	800fc68 <malloc>
 800f872:	4606      	mov	r6, r0
 800f874:	2800      	cmp	r0, #0
 800f876:	d0ae      	beq.n	800f7d6 <setvbuf+0xba>
 800f878:	464d      	mov	r5, r9
 800f87a:	89a3      	ldrh	r3, [r4, #12]
 800f87c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f880:	81a3      	strh	r3, [r4, #12]
 800f882:	e7d0      	b.n	800f826 <setvbuf+0x10a>
 800f884:	2500      	movs	r5, #0
 800f886:	e7a8      	b.n	800f7da <setvbuf+0xbe>
 800f888:	60a3      	str	r3, [r4, #8]
 800f88a:	e7e8      	b.n	800f85e <setvbuf+0x142>
 800f88c:	f04f 35ff 	mov.w	r5, #4294967295
 800f890:	e7b9      	b.n	800f806 <setvbuf+0xea>
 800f892:	2500      	movs	r5, #0
 800f894:	e7b7      	b.n	800f806 <setvbuf+0xea>
 800f896:	bf00      	nop
 800f898:	24000294 	.word	0x24000294
 800f89c:	080105ec 	.word	0x080105ec
 800f8a0:	0801060c 	.word	0x0801060c
 800f8a4:	080105cc 	.word	0x080105cc

0800f8a8 <__sflush_r>:
 800f8a8:	898a      	ldrh	r2, [r1, #12]
 800f8aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ae:	4605      	mov	r5, r0
 800f8b0:	0710      	lsls	r0, r2, #28
 800f8b2:	460c      	mov	r4, r1
 800f8b4:	d458      	bmi.n	800f968 <__sflush_r+0xc0>
 800f8b6:	684b      	ldr	r3, [r1, #4]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	dc05      	bgt.n	800f8c8 <__sflush_r+0x20>
 800f8bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	dc02      	bgt.n	800f8c8 <__sflush_r+0x20>
 800f8c2:	2000      	movs	r0, #0
 800f8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8ca:	2e00      	cmp	r6, #0
 800f8cc:	d0f9      	beq.n	800f8c2 <__sflush_r+0x1a>
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f8d4:	682f      	ldr	r7, [r5, #0]
 800f8d6:	602b      	str	r3, [r5, #0]
 800f8d8:	d032      	beq.n	800f940 <__sflush_r+0x98>
 800f8da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f8dc:	89a3      	ldrh	r3, [r4, #12]
 800f8de:	075a      	lsls	r2, r3, #29
 800f8e0:	d505      	bpl.n	800f8ee <__sflush_r+0x46>
 800f8e2:	6863      	ldr	r3, [r4, #4]
 800f8e4:	1ac0      	subs	r0, r0, r3
 800f8e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8e8:	b10b      	cbz	r3, 800f8ee <__sflush_r+0x46>
 800f8ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f8ec:	1ac0      	subs	r0, r0, r3
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	4602      	mov	r2, r0
 800f8f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8f4:	6a21      	ldr	r1, [r4, #32]
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	47b0      	blx	r6
 800f8fa:	1c43      	adds	r3, r0, #1
 800f8fc:	89a3      	ldrh	r3, [r4, #12]
 800f8fe:	d106      	bne.n	800f90e <__sflush_r+0x66>
 800f900:	6829      	ldr	r1, [r5, #0]
 800f902:	291d      	cmp	r1, #29
 800f904:	d82c      	bhi.n	800f960 <__sflush_r+0xb8>
 800f906:	4a2a      	ldr	r2, [pc, #168]	; (800f9b0 <__sflush_r+0x108>)
 800f908:	40ca      	lsrs	r2, r1
 800f90a:	07d6      	lsls	r6, r2, #31
 800f90c:	d528      	bpl.n	800f960 <__sflush_r+0xb8>
 800f90e:	2200      	movs	r2, #0
 800f910:	6062      	str	r2, [r4, #4]
 800f912:	04d9      	lsls	r1, r3, #19
 800f914:	6922      	ldr	r2, [r4, #16]
 800f916:	6022      	str	r2, [r4, #0]
 800f918:	d504      	bpl.n	800f924 <__sflush_r+0x7c>
 800f91a:	1c42      	adds	r2, r0, #1
 800f91c:	d101      	bne.n	800f922 <__sflush_r+0x7a>
 800f91e:	682b      	ldr	r3, [r5, #0]
 800f920:	b903      	cbnz	r3, 800f924 <__sflush_r+0x7c>
 800f922:	6560      	str	r0, [r4, #84]	; 0x54
 800f924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f926:	602f      	str	r7, [r5, #0]
 800f928:	2900      	cmp	r1, #0
 800f92a:	d0ca      	beq.n	800f8c2 <__sflush_r+0x1a>
 800f92c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f930:	4299      	cmp	r1, r3
 800f932:	d002      	beq.n	800f93a <__sflush_r+0x92>
 800f934:	4628      	mov	r0, r5
 800f936:	f000 f99f 	bl	800fc78 <_free_r>
 800f93a:	2000      	movs	r0, #0
 800f93c:	6360      	str	r0, [r4, #52]	; 0x34
 800f93e:	e7c1      	b.n	800f8c4 <__sflush_r+0x1c>
 800f940:	6a21      	ldr	r1, [r4, #32]
 800f942:	2301      	movs	r3, #1
 800f944:	4628      	mov	r0, r5
 800f946:	47b0      	blx	r6
 800f948:	1c41      	adds	r1, r0, #1
 800f94a:	d1c7      	bne.n	800f8dc <__sflush_r+0x34>
 800f94c:	682b      	ldr	r3, [r5, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d0c4      	beq.n	800f8dc <__sflush_r+0x34>
 800f952:	2b1d      	cmp	r3, #29
 800f954:	d001      	beq.n	800f95a <__sflush_r+0xb2>
 800f956:	2b16      	cmp	r3, #22
 800f958:	d101      	bne.n	800f95e <__sflush_r+0xb6>
 800f95a:	602f      	str	r7, [r5, #0]
 800f95c:	e7b1      	b.n	800f8c2 <__sflush_r+0x1a>
 800f95e:	89a3      	ldrh	r3, [r4, #12]
 800f960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f964:	81a3      	strh	r3, [r4, #12]
 800f966:	e7ad      	b.n	800f8c4 <__sflush_r+0x1c>
 800f968:	690f      	ldr	r7, [r1, #16]
 800f96a:	2f00      	cmp	r7, #0
 800f96c:	d0a9      	beq.n	800f8c2 <__sflush_r+0x1a>
 800f96e:	0793      	lsls	r3, r2, #30
 800f970:	680e      	ldr	r6, [r1, #0]
 800f972:	bf08      	it	eq
 800f974:	694b      	ldreq	r3, [r1, #20]
 800f976:	600f      	str	r7, [r1, #0]
 800f978:	bf18      	it	ne
 800f97a:	2300      	movne	r3, #0
 800f97c:	eba6 0807 	sub.w	r8, r6, r7
 800f980:	608b      	str	r3, [r1, #8]
 800f982:	f1b8 0f00 	cmp.w	r8, #0
 800f986:	dd9c      	ble.n	800f8c2 <__sflush_r+0x1a>
 800f988:	6a21      	ldr	r1, [r4, #32]
 800f98a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f98c:	4643      	mov	r3, r8
 800f98e:	463a      	mov	r2, r7
 800f990:	4628      	mov	r0, r5
 800f992:	47b0      	blx	r6
 800f994:	2800      	cmp	r0, #0
 800f996:	dc06      	bgt.n	800f9a6 <__sflush_r+0xfe>
 800f998:	89a3      	ldrh	r3, [r4, #12]
 800f99a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f99e:	81a3      	strh	r3, [r4, #12]
 800f9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9a4:	e78e      	b.n	800f8c4 <__sflush_r+0x1c>
 800f9a6:	4407      	add	r7, r0
 800f9a8:	eba8 0800 	sub.w	r8, r8, r0
 800f9ac:	e7e9      	b.n	800f982 <__sflush_r+0xda>
 800f9ae:	bf00      	nop
 800f9b0:	20400001 	.word	0x20400001

0800f9b4 <_fflush_r>:
 800f9b4:	b538      	push	{r3, r4, r5, lr}
 800f9b6:	690b      	ldr	r3, [r1, #16]
 800f9b8:	4605      	mov	r5, r0
 800f9ba:	460c      	mov	r4, r1
 800f9bc:	b913      	cbnz	r3, 800f9c4 <_fflush_r+0x10>
 800f9be:	2500      	movs	r5, #0
 800f9c0:	4628      	mov	r0, r5
 800f9c2:	bd38      	pop	{r3, r4, r5, pc}
 800f9c4:	b118      	cbz	r0, 800f9ce <_fflush_r+0x1a>
 800f9c6:	6983      	ldr	r3, [r0, #24]
 800f9c8:	b90b      	cbnz	r3, 800f9ce <_fflush_r+0x1a>
 800f9ca:	f000 f887 	bl	800fadc <__sinit>
 800f9ce:	4b14      	ldr	r3, [pc, #80]	; (800fa20 <_fflush_r+0x6c>)
 800f9d0:	429c      	cmp	r4, r3
 800f9d2:	d11b      	bne.n	800fa0c <_fflush_r+0x58>
 800f9d4:	686c      	ldr	r4, [r5, #4]
 800f9d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d0ef      	beq.n	800f9be <_fflush_r+0xa>
 800f9de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f9e0:	07d0      	lsls	r0, r2, #31
 800f9e2:	d404      	bmi.n	800f9ee <_fflush_r+0x3a>
 800f9e4:	0599      	lsls	r1, r3, #22
 800f9e6:	d402      	bmi.n	800f9ee <_fflush_r+0x3a>
 800f9e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9ea:	f000 f915 	bl	800fc18 <__retarget_lock_acquire_recursive>
 800f9ee:	4628      	mov	r0, r5
 800f9f0:	4621      	mov	r1, r4
 800f9f2:	f7ff ff59 	bl	800f8a8 <__sflush_r>
 800f9f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9f8:	07da      	lsls	r2, r3, #31
 800f9fa:	4605      	mov	r5, r0
 800f9fc:	d4e0      	bmi.n	800f9c0 <_fflush_r+0xc>
 800f9fe:	89a3      	ldrh	r3, [r4, #12]
 800fa00:	059b      	lsls	r3, r3, #22
 800fa02:	d4dd      	bmi.n	800f9c0 <_fflush_r+0xc>
 800fa04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa06:	f000 f908 	bl	800fc1a <__retarget_lock_release_recursive>
 800fa0a:	e7d9      	b.n	800f9c0 <_fflush_r+0xc>
 800fa0c:	4b05      	ldr	r3, [pc, #20]	; (800fa24 <_fflush_r+0x70>)
 800fa0e:	429c      	cmp	r4, r3
 800fa10:	d101      	bne.n	800fa16 <_fflush_r+0x62>
 800fa12:	68ac      	ldr	r4, [r5, #8]
 800fa14:	e7df      	b.n	800f9d6 <_fflush_r+0x22>
 800fa16:	4b04      	ldr	r3, [pc, #16]	; (800fa28 <_fflush_r+0x74>)
 800fa18:	429c      	cmp	r4, r3
 800fa1a:	bf08      	it	eq
 800fa1c:	68ec      	ldreq	r4, [r5, #12]
 800fa1e:	e7da      	b.n	800f9d6 <_fflush_r+0x22>
 800fa20:	080105ec 	.word	0x080105ec
 800fa24:	0801060c 	.word	0x0801060c
 800fa28:	080105cc 	.word	0x080105cc

0800fa2c <std>:
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	b510      	push	{r4, lr}
 800fa30:	4604      	mov	r4, r0
 800fa32:	e9c0 3300 	strd	r3, r3, [r0]
 800fa36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa3a:	6083      	str	r3, [r0, #8]
 800fa3c:	8181      	strh	r1, [r0, #12]
 800fa3e:	6643      	str	r3, [r0, #100]	; 0x64
 800fa40:	81c2      	strh	r2, [r0, #14]
 800fa42:	6183      	str	r3, [r0, #24]
 800fa44:	4619      	mov	r1, r3
 800fa46:	2208      	movs	r2, #8
 800fa48:	305c      	adds	r0, #92	; 0x5c
 800fa4a:	f7ff fe5f 	bl	800f70c <memset>
 800fa4e:	4b05      	ldr	r3, [pc, #20]	; (800fa64 <std+0x38>)
 800fa50:	6263      	str	r3, [r4, #36]	; 0x24
 800fa52:	4b05      	ldr	r3, [pc, #20]	; (800fa68 <std+0x3c>)
 800fa54:	62a3      	str	r3, [r4, #40]	; 0x28
 800fa56:	4b05      	ldr	r3, [pc, #20]	; (800fa6c <std+0x40>)
 800fa58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fa5a:	4b05      	ldr	r3, [pc, #20]	; (800fa70 <std+0x44>)
 800fa5c:	6224      	str	r4, [r4, #32]
 800fa5e:	6323      	str	r3, [r4, #48]	; 0x30
 800fa60:	bd10      	pop	{r4, pc}
 800fa62:	bf00      	nop
 800fa64:	0800fe59 	.word	0x0800fe59
 800fa68:	0800fe7b 	.word	0x0800fe7b
 800fa6c:	0800feb3 	.word	0x0800feb3
 800fa70:	0800fed7 	.word	0x0800fed7

0800fa74 <_cleanup_r>:
 800fa74:	4901      	ldr	r1, [pc, #4]	; (800fa7c <_cleanup_r+0x8>)
 800fa76:	f000 b8af 	b.w	800fbd8 <_fwalk_reent>
 800fa7a:	bf00      	nop
 800fa7c:	0800f9b5 	.word	0x0800f9b5

0800fa80 <__sfmoreglue>:
 800fa80:	b570      	push	{r4, r5, r6, lr}
 800fa82:	2268      	movs	r2, #104	; 0x68
 800fa84:	1e4d      	subs	r5, r1, #1
 800fa86:	4355      	muls	r5, r2
 800fa88:	460e      	mov	r6, r1
 800fa8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fa8e:	f000 f95f 	bl	800fd50 <_malloc_r>
 800fa92:	4604      	mov	r4, r0
 800fa94:	b140      	cbz	r0, 800faa8 <__sfmoreglue+0x28>
 800fa96:	2100      	movs	r1, #0
 800fa98:	e9c0 1600 	strd	r1, r6, [r0]
 800fa9c:	300c      	adds	r0, #12
 800fa9e:	60a0      	str	r0, [r4, #8]
 800faa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800faa4:	f7ff fe32 	bl	800f70c <memset>
 800faa8:	4620      	mov	r0, r4
 800faaa:	bd70      	pop	{r4, r5, r6, pc}

0800faac <__sfp_lock_acquire>:
 800faac:	4801      	ldr	r0, [pc, #4]	; (800fab4 <__sfp_lock_acquire+0x8>)
 800faae:	f000 b8b3 	b.w	800fc18 <__retarget_lock_acquire_recursive>
 800fab2:	bf00      	nop
 800fab4:	240010b1 	.word	0x240010b1

0800fab8 <__sfp_lock_release>:
 800fab8:	4801      	ldr	r0, [pc, #4]	; (800fac0 <__sfp_lock_release+0x8>)
 800faba:	f000 b8ae 	b.w	800fc1a <__retarget_lock_release_recursive>
 800fabe:	bf00      	nop
 800fac0:	240010b1 	.word	0x240010b1

0800fac4 <__sinit_lock_acquire>:
 800fac4:	4801      	ldr	r0, [pc, #4]	; (800facc <__sinit_lock_acquire+0x8>)
 800fac6:	f000 b8a7 	b.w	800fc18 <__retarget_lock_acquire_recursive>
 800faca:	bf00      	nop
 800facc:	240010b2 	.word	0x240010b2

0800fad0 <__sinit_lock_release>:
 800fad0:	4801      	ldr	r0, [pc, #4]	; (800fad8 <__sinit_lock_release+0x8>)
 800fad2:	f000 b8a2 	b.w	800fc1a <__retarget_lock_release_recursive>
 800fad6:	bf00      	nop
 800fad8:	240010b2 	.word	0x240010b2

0800fadc <__sinit>:
 800fadc:	b510      	push	{r4, lr}
 800fade:	4604      	mov	r4, r0
 800fae0:	f7ff fff0 	bl	800fac4 <__sinit_lock_acquire>
 800fae4:	69a3      	ldr	r3, [r4, #24]
 800fae6:	b11b      	cbz	r3, 800faf0 <__sinit+0x14>
 800fae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800faec:	f7ff bff0 	b.w	800fad0 <__sinit_lock_release>
 800faf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800faf4:	6523      	str	r3, [r4, #80]	; 0x50
 800faf6:	4b13      	ldr	r3, [pc, #76]	; (800fb44 <__sinit+0x68>)
 800faf8:	4a13      	ldr	r2, [pc, #76]	; (800fb48 <__sinit+0x6c>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	62a2      	str	r2, [r4, #40]	; 0x28
 800fafe:	42a3      	cmp	r3, r4
 800fb00:	bf04      	itt	eq
 800fb02:	2301      	moveq	r3, #1
 800fb04:	61a3      	streq	r3, [r4, #24]
 800fb06:	4620      	mov	r0, r4
 800fb08:	f000 f820 	bl	800fb4c <__sfp>
 800fb0c:	6060      	str	r0, [r4, #4]
 800fb0e:	4620      	mov	r0, r4
 800fb10:	f000 f81c 	bl	800fb4c <__sfp>
 800fb14:	60a0      	str	r0, [r4, #8]
 800fb16:	4620      	mov	r0, r4
 800fb18:	f000 f818 	bl	800fb4c <__sfp>
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	60e0      	str	r0, [r4, #12]
 800fb20:	2104      	movs	r1, #4
 800fb22:	6860      	ldr	r0, [r4, #4]
 800fb24:	f7ff ff82 	bl	800fa2c <std>
 800fb28:	68a0      	ldr	r0, [r4, #8]
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	2109      	movs	r1, #9
 800fb2e:	f7ff ff7d 	bl	800fa2c <std>
 800fb32:	68e0      	ldr	r0, [r4, #12]
 800fb34:	2202      	movs	r2, #2
 800fb36:	2112      	movs	r1, #18
 800fb38:	f7ff ff78 	bl	800fa2c <std>
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	61a3      	str	r3, [r4, #24]
 800fb40:	e7d2      	b.n	800fae8 <__sinit+0xc>
 800fb42:	bf00      	nop
 800fb44:	080105c8 	.word	0x080105c8
 800fb48:	0800fa75 	.word	0x0800fa75

0800fb4c <__sfp>:
 800fb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb4e:	4607      	mov	r7, r0
 800fb50:	f7ff ffac 	bl	800faac <__sfp_lock_acquire>
 800fb54:	4b1e      	ldr	r3, [pc, #120]	; (800fbd0 <__sfp+0x84>)
 800fb56:	681e      	ldr	r6, [r3, #0]
 800fb58:	69b3      	ldr	r3, [r6, #24]
 800fb5a:	b913      	cbnz	r3, 800fb62 <__sfp+0x16>
 800fb5c:	4630      	mov	r0, r6
 800fb5e:	f7ff ffbd 	bl	800fadc <__sinit>
 800fb62:	3648      	adds	r6, #72	; 0x48
 800fb64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fb68:	3b01      	subs	r3, #1
 800fb6a:	d503      	bpl.n	800fb74 <__sfp+0x28>
 800fb6c:	6833      	ldr	r3, [r6, #0]
 800fb6e:	b30b      	cbz	r3, 800fbb4 <__sfp+0x68>
 800fb70:	6836      	ldr	r6, [r6, #0]
 800fb72:	e7f7      	b.n	800fb64 <__sfp+0x18>
 800fb74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fb78:	b9d5      	cbnz	r5, 800fbb0 <__sfp+0x64>
 800fb7a:	4b16      	ldr	r3, [pc, #88]	; (800fbd4 <__sfp+0x88>)
 800fb7c:	60e3      	str	r3, [r4, #12]
 800fb7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fb82:	6665      	str	r5, [r4, #100]	; 0x64
 800fb84:	f000 f847 	bl	800fc16 <__retarget_lock_init_recursive>
 800fb88:	f7ff ff96 	bl	800fab8 <__sfp_lock_release>
 800fb8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fb90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fb94:	6025      	str	r5, [r4, #0]
 800fb96:	61a5      	str	r5, [r4, #24]
 800fb98:	2208      	movs	r2, #8
 800fb9a:	4629      	mov	r1, r5
 800fb9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fba0:	f7ff fdb4 	bl	800f70c <memset>
 800fba4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fba8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fbac:	4620      	mov	r0, r4
 800fbae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbb0:	3468      	adds	r4, #104	; 0x68
 800fbb2:	e7d9      	b.n	800fb68 <__sfp+0x1c>
 800fbb4:	2104      	movs	r1, #4
 800fbb6:	4638      	mov	r0, r7
 800fbb8:	f7ff ff62 	bl	800fa80 <__sfmoreglue>
 800fbbc:	4604      	mov	r4, r0
 800fbbe:	6030      	str	r0, [r6, #0]
 800fbc0:	2800      	cmp	r0, #0
 800fbc2:	d1d5      	bne.n	800fb70 <__sfp+0x24>
 800fbc4:	f7ff ff78 	bl	800fab8 <__sfp_lock_release>
 800fbc8:	230c      	movs	r3, #12
 800fbca:	603b      	str	r3, [r7, #0]
 800fbcc:	e7ee      	b.n	800fbac <__sfp+0x60>
 800fbce:	bf00      	nop
 800fbd0:	080105c8 	.word	0x080105c8
 800fbd4:	ffff0001 	.word	0xffff0001

0800fbd8 <_fwalk_reent>:
 800fbd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbdc:	4606      	mov	r6, r0
 800fbde:	4688      	mov	r8, r1
 800fbe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fbe4:	2700      	movs	r7, #0
 800fbe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fbea:	f1b9 0901 	subs.w	r9, r9, #1
 800fbee:	d505      	bpl.n	800fbfc <_fwalk_reent+0x24>
 800fbf0:	6824      	ldr	r4, [r4, #0]
 800fbf2:	2c00      	cmp	r4, #0
 800fbf4:	d1f7      	bne.n	800fbe6 <_fwalk_reent+0xe>
 800fbf6:	4638      	mov	r0, r7
 800fbf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbfc:	89ab      	ldrh	r3, [r5, #12]
 800fbfe:	2b01      	cmp	r3, #1
 800fc00:	d907      	bls.n	800fc12 <_fwalk_reent+0x3a>
 800fc02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fc06:	3301      	adds	r3, #1
 800fc08:	d003      	beq.n	800fc12 <_fwalk_reent+0x3a>
 800fc0a:	4629      	mov	r1, r5
 800fc0c:	4630      	mov	r0, r6
 800fc0e:	47c0      	blx	r8
 800fc10:	4307      	orrs	r7, r0
 800fc12:	3568      	adds	r5, #104	; 0x68
 800fc14:	e7e9      	b.n	800fbea <_fwalk_reent+0x12>

0800fc16 <__retarget_lock_init_recursive>:
 800fc16:	4770      	bx	lr

0800fc18 <__retarget_lock_acquire_recursive>:
 800fc18:	4770      	bx	lr

0800fc1a <__retarget_lock_release_recursive>:
 800fc1a:	4770      	bx	lr

0800fc1c <__swhatbuf_r>:
 800fc1c:	b570      	push	{r4, r5, r6, lr}
 800fc1e:	460e      	mov	r6, r1
 800fc20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc24:	2900      	cmp	r1, #0
 800fc26:	b096      	sub	sp, #88	; 0x58
 800fc28:	4614      	mov	r4, r2
 800fc2a:	461d      	mov	r5, r3
 800fc2c:	da08      	bge.n	800fc40 <__swhatbuf_r+0x24>
 800fc2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fc32:	2200      	movs	r2, #0
 800fc34:	602a      	str	r2, [r5, #0]
 800fc36:	061a      	lsls	r2, r3, #24
 800fc38:	d410      	bmi.n	800fc5c <__swhatbuf_r+0x40>
 800fc3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc3e:	e00e      	b.n	800fc5e <__swhatbuf_r+0x42>
 800fc40:	466a      	mov	r2, sp
 800fc42:	f000 f96f 	bl	800ff24 <_fstat_r>
 800fc46:	2800      	cmp	r0, #0
 800fc48:	dbf1      	blt.n	800fc2e <__swhatbuf_r+0x12>
 800fc4a:	9a01      	ldr	r2, [sp, #4]
 800fc4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fc50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fc54:	425a      	negs	r2, r3
 800fc56:	415a      	adcs	r2, r3
 800fc58:	602a      	str	r2, [r5, #0]
 800fc5a:	e7ee      	b.n	800fc3a <__swhatbuf_r+0x1e>
 800fc5c:	2340      	movs	r3, #64	; 0x40
 800fc5e:	2000      	movs	r0, #0
 800fc60:	6023      	str	r3, [r4, #0]
 800fc62:	b016      	add	sp, #88	; 0x58
 800fc64:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fc68 <malloc>:
 800fc68:	4b02      	ldr	r3, [pc, #8]	; (800fc74 <malloc+0xc>)
 800fc6a:	4601      	mov	r1, r0
 800fc6c:	6818      	ldr	r0, [r3, #0]
 800fc6e:	f000 b86f 	b.w	800fd50 <_malloc_r>
 800fc72:	bf00      	nop
 800fc74:	24000294 	.word	0x24000294

0800fc78 <_free_r>:
 800fc78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc7a:	2900      	cmp	r1, #0
 800fc7c:	d044      	beq.n	800fd08 <_free_r+0x90>
 800fc7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc82:	9001      	str	r0, [sp, #4]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	f1a1 0404 	sub.w	r4, r1, #4
 800fc8a:	bfb8      	it	lt
 800fc8c:	18e4      	addlt	r4, r4, r3
 800fc8e:	f000 f96d 	bl	800ff6c <__malloc_lock>
 800fc92:	4a1e      	ldr	r2, [pc, #120]	; (800fd0c <_free_r+0x94>)
 800fc94:	9801      	ldr	r0, [sp, #4]
 800fc96:	6813      	ldr	r3, [r2, #0]
 800fc98:	b933      	cbnz	r3, 800fca8 <_free_r+0x30>
 800fc9a:	6063      	str	r3, [r4, #4]
 800fc9c:	6014      	str	r4, [r2, #0]
 800fc9e:	b003      	add	sp, #12
 800fca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fca4:	f000 b968 	b.w	800ff78 <__malloc_unlock>
 800fca8:	42a3      	cmp	r3, r4
 800fcaa:	d908      	bls.n	800fcbe <_free_r+0x46>
 800fcac:	6825      	ldr	r5, [r4, #0]
 800fcae:	1961      	adds	r1, r4, r5
 800fcb0:	428b      	cmp	r3, r1
 800fcb2:	bf01      	itttt	eq
 800fcb4:	6819      	ldreq	r1, [r3, #0]
 800fcb6:	685b      	ldreq	r3, [r3, #4]
 800fcb8:	1949      	addeq	r1, r1, r5
 800fcba:	6021      	streq	r1, [r4, #0]
 800fcbc:	e7ed      	b.n	800fc9a <_free_r+0x22>
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	685b      	ldr	r3, [r3, #4]
 800fcc2:	b10b      	cbz	r3, 800fcc8 <_free_r+0x50>
 800fcc4:	42a3      	cmp	r3, r4
 800fcc6:	d9fa      	bls.n	800fcbe <_free_r+0x46>
 800fcc8:	6811      	ldr	r1, [r2, #0]
 800fcca:	1855      	adds	r5, r2, r1
 800fccc:	42a5      	cmp	r5, r4
 800fcce:	d10b      	bne.n	800fce8 <_free_r+0x70>
 800fcd0:	6824      	ldr	r4, [r4, #0]
 800fcd2:	4421      	add	r1, r4
 800fcd4:	1854      	adds	r4, r2, r1
 800fcd6:	42a3      	cmp	r3, r4
 800fcd8:	6011      	str	r1, [r2, #0]
 800fcda:	d1e0      	bne.n	800fc9e <_free_r+0x26>
 800fcdc:	681c      	ldr	r4, [r3, #0]
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	6053      	str	r3, [r2, #4]
 800fce2:	4421      	add	r1, r4
 800fce4:	6011      	str	r1, [r2, #0]
 800fce6:	e7da      	b.n	800fc9e <_free_r+0x26>
 800fce8:	d902      	bls.n	800fcf0 <_free_r+0x78>
 800fcea:	230c      	movs	r3, #12
 800fcec:	6003      	str	r3, [r0, #0]
 800fcee:	e7d6      	b.n	800fc9e <_free_r+0x26>
 800fcf0:	6825      	ldr	r5, [r4, #0]
 800fcf2:	1961      	adds	r1, r4, r5
 800fcf4:	428b      	cmp	r3, r1
 800fcf6:	bf04      	itt	eq
 800fcf8:	6819      	ldreq	r1, [r3, #0]
 800fcfa:	685b      	ldreq	r3, [r3, #4]
 800fcfc:	6063      	str	r3, [r4, #4]
 800fcfe:	bf04      	itt	eq
 800fd00:	1949      	addeq	r1, r1, r5
 800fd02:	6021      	streq	r1, [r4, #0]
 800fd04:	6054      	str	r4, [r2, #4]
 800fd06:	e7ca      	b.n	800fc9e <_free_r+0x26>
 800fd08:	b003      	add	sp, #12
 800fd0a:	bd30      	pop	{r4, r5, pc}
 800fd0c:	240010b4 	.word	0x240010b4

0800fd10 <sbrk_aligned>:
 800fd10:	b570      	push	{r4, r5, r6, lr}
 800fd12:	4e0e      	ldr	r6, [pc, #56]	; (800fd4c <sbrk_aligned+0x3c>)
 800fd14:	460c      	mov	r4, r1
 800fd16:	6831      	ldr	r1, [r6, #0]
 800fd18:	4605      	mov	r5, r0
 800fd1a:	b911      	cbnz	r1, 800fd22 <sbrk_aligned+0x12>
 800fd1c:	f000 f88c 	bl	800fe38 <_sbrk_r>
 800fd20:	6030      	str	r0, [r6, #0]
 800fd22:	4621      	mov	r1, r4
 800fd24:	4628      	mov	r0, r5
 800fd26:	f000 f887 	bl	800fe38 <_sbrk_r>
 800fd2a:	1c43      	adds	r3, r0, #1
 800fd2c:	d00a      	beq.n	800fd44 <sbrk_aligned+0x34>
 800fd2e:	1cc4      	adds	r4, r0, #3
 800fd30:	f024 0403 	bic.w	r4, r4, #3
 800fd34:	42a0      	cmp	r0, r4
 800fd36:	d007      	beq.n	800fd48 <sbrk_aligned+0x38>
 800fd38:	1a21      	subs	r1, r4, r0
 800fd3a:	4628      	mov	r0, r5
 800fd3c:	f000 f87c 	bl	800fe38 <_sbrk_r>
 800fd40:	3001      	adds	r0, #1
 800fd42:	d101      	bne.n	800fd48 <sbrk_aligned+0x38>
 800fd44:	f04f 34ff 	mov.w	r4, #4294967295
 800fd48:	4620      	mov	r0, r4
 800fd4a:	bd70      	pop	{r4, r5, r6, pc}
 800fd4c:	240010b8 	.word	0x240010b8

0800fd50 <_malloc_r>:
 800fd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd54:	1ccd      	adds	r5, r1, #3
 800fd56:	f025 0503 	bic.w	r5, r5, #3
 800fd5a:	3508      	adds	r5, #8
 800fd5c:	2d0c      	cmp	r5, #12
 800fd5e:	bf38      	it	cc
 800fd60:	250c      	movcc	r5, #12
 800fd62:	2d00      	cmp	r5, #0
 800fd64:	4607      	mov	r7, r0
 800fd66:	db01      	blt.n	800fd6c <_malloc_r+0x1c>
 800fd68:	42a9      	cmp	r1, r5
 800fd6a:	d905      	bls.n	800fd78 <_malloc_r+0x28>
 800fd6c:	230c      	movs	r3, #12
 800fd6e:	603b      	str	r3, [r7, #0]
 800fd70:	2600      	movs	r6, #0
 800fd72:	4630      	mov	r0, r6
 800fd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd78:	4e2e      	ldr	r6, [pc, #184]	; (800fe34 <_malloc_r+0xe4>)
 800fd7a:	f000 f8f7 	bl	800ff6c <__malloc_lock>
 800fd7e:	6833      	ldr	r3, [r6, #0]
 800fd80:	461c      	mov	r4, r3
 800fd82:	bb34      	cbnz	r4, 800fdd2 <_malloc_r+0x82>
 800fd84:	4629      	mov	r1, r5
 800fd86:	4638      	mov	r0, r7
 800fd88:	f7ff ffc2 	bl	800fd10 <sbrk_aligned>
 800fd8c:	1c43      	adds	r3, r0, #1
 800fd8e:	4604      	mov	r4, r0
 800fd90:	d14d      	bne.n	800fe2e <_malloc_r+0xde>
 800fd92:	6834      	ldr	r4, [r6, #0]
 800fd94:	4626      	mov	r6, r4
 800fd96:	2e00      	cmp	r6, #0
 800fd98:	d140      	bne.n	800fe1c <_malloc_r+0xcc>
 800fd9a:	6823      	ldr	r3, [r4, #0]
 800fd9c:	4631      	mov	r1, r6
 800fd9e:	4638      	mov	r0, r7
 800fda0:	eb04 0803 	add.w	r8, r4, r3
 800fda4:	f000 f848 	bl	800fe38 <_sbrk_r>
 800fda8:	4580      	cmp	r8, r0
 800fdaa:	d13a      	bne.n	800fe22 <_malloc_r+0xd2>
 800fdac:	6821      	ldr	r1, [r4, #0]
 800fdae:	3503      	adds	r5, #3
 800fdb0:	1a6d      	subs	r5, r5, r1
 800fdb2:	f025 0503 	bic.w	r5, r5, #3
 800fdb6:	3508      	adds	r5, #8
 800fdb8:	2d0c      	cmp	r5, #12
 800fdba:	bf38      	it	cc
 800fdbc:	250c      	movcc	r5, #12
 800fdbe:	4629      	mov	r1, r5
 800fdc0:	4638      	mov	r0, r7
 800fdc2:	f7ff ffa5 	bl	800fd10 <sbrk_aligned>
 800fdc6:	3001      	adds	r0, #1
 800fdc8:	d02b      	beq.n	800fe22 <_malloc_r+0xd2>
 800fdca:	6823      	ldr	r3, [r4, #0]
 800fdcc:	442b      	add	r3, r5
 800fdce:	6023      	str	r3, [r4, #0]
 800fdd0:	e00e      	b.n	800fdf0 <_malloc_r+0xa0>
 800fdd2:	6822      	ldr	r2, [r4, #0]
 800fdd4:	1b52      	subs	r2, r2, r5
 800fdd6:	d41e      	bmi.n	800fe16 <_malloc_r+0xc6>
 800fdd8:	2a0b      	cmp	r2, #11
 800fdda:	d916      	bls.n	800fe0a <_malloc_r+0xba>
 800fddc:	1961      	adds	r1, r4, r5
 800fdde:	42a3      	cmp	r3, r4
 800fde0:	6025      	str	r5, [r4, #0]
 800fde2:	bf18      	it	ne
 800fde4:	6059      	strne	r1, [r3, #4]
 800fde6:	6863      	ldr	r3, [r4, #4]
 800fde8:	bf08      	it	eq
 800fdea:	6031      	streq	r1, [r6, #0]
 800fdec:	5162      	str	r2, [r4, r5]
 800fdee:	604b      	str	r3, [r1, #4]
 800fdf0:	4638      	mov	r0, r7
 800fdf2:	f104 060b 	add.w	r6, r4, #11
 800fdf6:	f000 f8bf 	bl	800ff78 <__malloc_unlock>
 800fdfa:	f026 0607 	bic.w	r6, r6, #7
 800fdfe:	1d23      	adds	r3, r4, #4
 800fe00:	1af2      	subs	r2, r6, r3
 800fe02:	d0b6      	beq.n	800fd72 <_malloc_r+0x22>
 800fe04:	1b9b      	subs	r3, r3, r6
 800fe06:	50a3      	str	r3, [r4, r2]
 800fe08:	e7b3      	b.n	800fd72 <_malloc_r+0x22>
 800fe0a:	6862      	ldr	r2, [r4, #4]
 800fe0c:	42a3      	cmp	r3, r4
 800fe0e:	bf0c      	ite	eq
 800fe10:	6032      	streq	r2, [r6, #0]
 800fe12:	605a      	strne	r2, [r3, #4]
 800fe14:	e7ec      	b.n	800fdf0 <_malloc_r+0xa0>
 800fe16:	4623      	mov	r3, r4
 800fe18:	6864      	ldr	r4, [r4, #4]
 800fe1a:	e7b2      	b.n	800fd82 <_malloc_r+0x32>
 800fe1c:	4634      	mov	r4, r6
 800fe1e:	6876      	ldr	r6, [r6, #4]
 800fe20:	e7b9      	b.n	800fd96 <_malloc_r+0x46>
 800fe22:	230c      	movs	r3, #12
 800fe24:	603b      	str	r3, [r7, #0]
 800fe26:	4638      	mov	r0, r7
 800fe28:	f000 f8a6 	bl	800ff78 <__malloc_unlock>
 800fe2c:	e7a1      	b.n	800fd72 <_malloc_r+0x22>
 800fe2e:	6025      	str	r5, [r4, #0]
 800fe30:	e7de      	b.n	800fdf0 <_malloc_r+0xa0>
 800fe32:	bf00      	nop
 800fe34:	240010b4 	.word	0x240010b4

0800fe38 <_sbrk_r>:
 800fe38:	b538      	push	{r3, r4, r5, lr}
 800fe3a:	4d06      	ldr	r5, [pc, #24]	; (800fe54 <_sbrk_r+0x1c>)
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	4604      	mov	r4, r0
 800fe40:	4608      	mov	r0, r1
 800fe42:	602b      	str	r3, [r5, #0]
 800fe44:	f7f4 f94a 	bl	80040dc <_sbrk>
 800fe48:	1c43      	adds	r3, r0, #1
 800fe4a:	d102      	bne.n	800fe52 <_sbrk_r+0x1a>
 800fe4c:	682b      	ldr	r3, [r5, #0]
 800fe4e:	b103      	cbz	r3, 800fe52 <_sbrk_r+0x1a>
 800fe50:	6023      	str	r3, [r4, #0]
 800fe52:	bd38      	pop	{r3, r4, r5, pc}
 800fe54:	240010bc 	.word	0x240010bc

0800fe58 <__sread>:
 800fe58:	b510      	push	{r4, lr}
 800fe5a:	460c      	mov	r4, r1
 800fe5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe60:	f000 f890 	bl	800ff84 <_read_r>
 800fe64:	2800      	cmp	r0, #0
 800fe66:	bfab      	itete	ge
 800fe68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fe6a:	89a3      	ldrhlt	r3, [r4, #12]
 800fe6c:	181b      	addge	r3, r3, r0
 800fe6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fe72:	bfac      	ite	ge
 800fe74:	6563      	strge	r3, [r4, #84]	; 0x54
 800fe76:	81a3      	strhlt	r3, [r4, #12]
 800fe78:	bd10      	pop	{r4, pc}

0800fe7a <__swrite>:
 800fe7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe7e:	461f      	mov	r7, r3
 800fe80:	898b      	ldrh	r3, [r1, #12]
 800fe82:	05db      	lsls	r3, r3, #23
 800fe84:	4605      	mov	r5, r0
 800fe86:	460c      	mov	r4, r1
 800fe88:	4616      	mov	r6, r2
 800fe8a:	d505      	bpl.n	800fe98 <__swrite+0x1e>
 800fe8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe90:	2302      	movs	r3, #2
 800fe92:	2200      	movs	r2, #0
 800fe94:	f000 f858 	bl	800ff48 <_lseek_r>
 800fe98:	89a3      	ldrh	r3, [r4, #12]
 800fe9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fea2:	81a3      	strh	r3, [r4, #12]
 800fea4:	4632      	mov	r2, r6
 800fea6:	463b      	mov	r3, r7
 800fea8:	4628      	mov	r0, r5
 800feaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800feae:	f000 b817 	b.w	800fee0 <_write_r>

0800feb2 <__sseek>:
 800feb2:	b510      	push	{r4, lr}
 800feb4:	460c      	mov	r4, r1
 800feb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feba:	f000 f845 	bl	800ff48 <_lseek_r>
 800febe:	1c43      	adds	r3, r0, #1
 800fec0:	89a3      	ldrh	r3, [r4, #12]
 800fec2:	bf15      	itete	ne
 800fec4:	6560      	strne	r0, [r4, #84]	; 0x54
 800fec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800feca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fece:	81a3      	strheq	r3, [r4, #12]
 800fed0:	bf18      	it	ne
 800fed2:	81a3      	strhne	r3, [r4, #12]
 800fed4:	bd10      	pop	{r4, pc}

0800fed6 <__sclose>:
 800fed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feda:	f000 b813 	b.w	800ff04 <_close_r>
	...

0800fee0 <_write_r>:
 800fee0:	b538      	push	{r3, r4, r5, lr}
 800fee2:	4d07      	ldr	r5, [pc, #28]	; (800ff00 <_write_r+0x20>)
 800fee4:	4604      	mov	r4, r0
 800fee6:	4608      	mov	r0, r1
 800fee8:	4611      	mov	r1, r2
 800feea:	2200      	movs	r2, #0
 800feec:	602a      	str	r2, [r5, #0]
 800feee:	461a      	mov	r2, r3
 800fef0:	f7f3 f958 	bl	80031a4 <_write>
 800fef4:	1c43      	adds	r3, r0, #1
 800fef6:	d102      	bne.n	800fefe <_write_r+0x1e>
 800fef8:	682b      	ldr	r3, [r5, #0]
 800fefa:	b103      	cbz	r3, 800fefe <_write_r+0x1e>
 800fefc:	6023      	str	r3, [r4, #0]
 800fefe:	bd38      	pop	{r3, r4, r5, pc}
 800ff00:	240010bc 	.word	0x240010bc

0800ff04 <_close_r>:
 800ff04:	b538      	push	{r3, r4, r5, lr}
 800ff06:	4d06      	ldr	r5, [pc, #24]	; (800ff20 <_close_r+0x1c>)
 800ff08:	2300      	movs	r3, #0
 800ff0a:	4604      	mov	r4, r0
 800ff0c:	4608      	mov	r0, r1
 800ff0e:	602b      	str	r3, [r5, #0]
 800ff10:	f7f3 f974 	bl	80031fc <_close>
 800ff14:	1c43      	adds	r3, r0, #1
 800ff16:	d102      	bne.n	800ff1e <_close_r+0x1a>
 800ff18:	682b      	ldr	r3, [r5, #0]
 800ff1a:	b103      	cbz	r3, 800ff1e <_close_r+0x1a>
 800ff1c:	6023      	str	r3, [r4, #0]
 800ff1e:	bd38      	pop	{r3, r4, r5, pc}
 800ff20:	240010bc 	.word	0x240010bc

0800ff24 <_fstat_r>:
 800ff24:	b538      	push	{r3, r4, r5, lr}
 800ff26:	4d07      	ldr	r5, [pc, #28]	; (800ff44 <_fstat_r+0x20>)
 800ff28:	2300      	movs	r3, #0
 800ff2a:	4604      	mov	r4, r0
 800ff2c:	4608      	mov	r0, r1
 800ff2e:	4611      	mov	r1, r2
 800ff30:	602b      	str	r3, [r5, #0]
 800ff32:	f7f3 f9a3 	bl	800327c <_fstat>
 800ff36:	1c43      	adds	r3, r0, #1
 800ff38:	d102      	bne.n	800ff40 <_fstat_r+0x1c>
 800ff3a:	682b      	ldr	r3, [r5, #0]
 800ff3c:	b103      	cbz	r3, 800ff40 <_fstat_r+0x1c>
 800ff3e:	6023      	str	r3, [r4, #0]
 800ff40:	bd38      	pop	{r3, r4, r5, pc}
 800ff42:	bf00      	nop
 800ff44:	240010bc 	.word	0x240010bc

0800ff48 <_lseek_r>:
 800ff48:	b538      	push	{r3, r4, r5, lr}
 800ff4a:	4d07      	ldr	r5, [pc, #28]	; (800ff68 <_lseek_r+0x20>)
 800ff4c:	4604      	mov	r4, r0
 800ff4e:	4608      	mov	r0, r1
 800ff50:	4611      	mov	r1, r2
 800ff52:	2200      	movs	r2, #0
 800ff54:	602a      	str	r2, [r5, #0]
 800ff56:	461a      	mov	r2, r3
 800ff58:	f7f4 f8b2 	bl	80040c0 <_lseek>
 800ff5c:	1c43      	adds	r3, r0, #1
 800ff5e:	d102      	bne.n	800ff66 <_lseek_r+0x1e>
 800ff60:	682b      	ldr	r3, [r5, #0]
 800ff62:	b103      	cbz	r3, 800ff66 <_lseek_r+0x1e>
 800ff64:	6023      	str	r3, [r4, #0]
 800ff66:	bd38      	pop	{r3, r4, r5, pc}
 800ff68:	240010bc 	.word	0x240010bc

0800ff6c <__malloc_lock>:
 800ff6c:	4801      	ldr	r0, [pc, #4]	; (800ff74 <__malloc_lock+0x8>)
 800ff6e:	f7ff be53 	b.w	800fc18 <__retarget_lock_acquire_recursive>
 800ff72:	bf00      	nop
 800ff74:	240010b0 	.word	0x240010b0

0800ff78 <__malloc_unlock>:
 800ff78:	4801      	ldr	r0, [pc, #4]	; (800ff80 <__malloc_unlock+0x8>)
 800ff7a:	f7ff be4e 	b.w	800fc1a <__retarget_lock_release_recursive>
 800ff7e:	bf00      	nop
 800ff80:	240010b0 	.word	0x240010b0

0800ff84 <_read_r>:
 800ff84:	b538      	push	{r3, r4, r5, lr}
 800ff86:	4d07      	ldr	r5, [pc, #28]	; (800ffa4 <_read_r+0x20>)
 800ff88:	4604      	mov	r4, r0
 800ff8a:	4608      	mov	r0, r1
 800ff8c:	4611      	mov	r1, r2
 800ff8e:	2200      	movs	r2, #0
 800ff90:	602a      	str	r2, [r5, #0]
 800ff92:	461a      	mov	r2, r3
 800ff94:	f7f3 f94a 	bl	800322c <_read>
 800ff98:	1c43      	adds	r3, r0, #1
 800ff9a:	d102      	bne.n	800ffa2 <_read_r+0x1e>
 800ff9c:	682b      	ldr	r3, [r5, #0]
 800ff9e:	b103      	cbz	r3, 800ffa2 <_read_r+0x1e>
 800ffa0:	6023      	str	r3, [r4, #0]
 800ffa2:	bd38      	pop	{r3, r4, r5, pc}
 800ffa4:	240010bc 	.word	0x240010bc

0800ffa8 <_init>:
 800ffa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffaa:	bf00      	nop
 800ffac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffae:	bc08      	pop	{r3}
 800ffb0:	469e      	mov	lr, r3
 800ffb2:	4770      	bx	lr

0800ffb4 <_fini>:
 800ffb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffb6:	bf00      	nop
 800ffb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffba:	bc08      	pop	{r3}
 800ffbc:	469e      	mov	lr, r3
 800ffbe:	4770      	bx	lr
