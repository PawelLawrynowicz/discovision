
camera_bsp_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001046c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  0801071c  0801071c  0002071c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010e08  08010e08  00020e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010e10  08010e10  00020e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010e14  08010e14  00020e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  24000000  08010e18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000dffc8  240000b8  08010ed0  000300b8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240e0080  08010ed0  00040080  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000278e5  00000000  00000000  000300e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f4c  00000000  00000000  000579cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019f8  00000000  00000000  0005c918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000017f0  00000000  00000000  0005e310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038ded  00000000  00000000  0005fb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002769b  00000000  00000000  000988ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00152a28  00000000  00000000  000bff88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002129b0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000072d0  00000000  00000000  00212a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000b8 	.word	0x240000b8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08010704 	.word	0x08010704

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000bc 	.word	0x240000bc
 80002ec:	08010704 	.word	0x08010704

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */
//
  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_DCMI_Init+0x60>)
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <MX_DCMI_Init+0x64>)
 800069c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006a6:	2220      	movs	r2, #32
 80006a8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006b2:	2240      	movs	r2, #64	; 0x40
 80006b4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006dc:	2200      	movs	r2, #0
 80006de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006e2:	f003 ffe1 	bl	80046a8 <HAL_DCMI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80006ec:	f001 f80e 	bl	800170c <Error_Handler>
//  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
//  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
//  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
  /* USER CODE END DCMI_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	240000d4 	.word	0x240000d4
 80006f8:	48020000 	.word	0x48020000

080006fc <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a76      	ldr	r2, [pc, #472]	; (80008f4 <HAL_DCMI_MspInit+0x1f8>)
 800071a:	4293      	cmp	r3, r2
 800071c:	f040 80e5 	bne.w	80008ea <HAL_DCMI_MspInit+0x1ee>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */
//
  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000720:	4b75      	ldr	r3, [pc, #468]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000722:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000726:	4a74      	ldr	r2, [pc, #464]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8000730:	4b71      	ldr	r3, [pc, #452]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000732:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b6e      	ldr	r3, [pc, #440]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000740:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000744:	4a6c      	ldr	r2, [pc, #432]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800074e:	4b6a      	ldr	r3, [pc, #424]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000750:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000754:	f003 0302 	and.w	r3, r3, #2
 8000758:	61fb      	str	r3, [r7, #28]
 800075a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800075c:	4b66      	ldr	r3, [pc, #408]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800075e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000762:	4a65      	ldr	r2, [pc, #404]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000768:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800076c:	4b62      	ldr	r3, [pc, #392]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800076e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	4b5f      	ldr	r3, [pc, #380]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800077c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000780:	4a5d      	ldr	r2, [pc, #372]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000782:	f043 0308 	orr.w	r3, r3, #8
 8000786:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800078a:	4b5b      	ldr	r3, [pc, #364]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800078c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000790:	f003 0308 	and.w	r3, r3, #8
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000798:	4b57      	ldr	r3, [pc, #348]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800079a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800079e:	4a56      	ldr	r2, [pc, #344]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007a8:	4b53      	ldr	r3, [pc, #332]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b50      	ldr	r3, [pc, #320]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007bc:	4a4e      	ldr	r2, [pc, #312]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007c6:	4b4c      	ldr	r3, [pc, #304]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7;
 80007d4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007e6:	230d      	movs	r3, #13
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4842      	ldr	r0, [pc, #264]	; (80008fc <HAL_DCMI_MspInit+0x200>)
 80007f2:	f008 f993 	bl	8008b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000808:	230d      	movs	r3, #13
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800080c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000810:	4619      	mov	r1, r3
 8000812:	483b      	ldr	r0, [pc, #236]	; (8000900 <HAL_DCMI_MspInit+0x204>)
 8000814:	f008 f982 	bl	8008b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000818:	2308      	movs	r3, #8
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000828:	230d      	movs	r3, #13
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	4619      	mov	r1, r3
 8000832:	4834      	ldr	r0, [pc, #208]	; (8000904 <HAL_DCMI_MspInit+0x208>)
 8000834:	f008 f972 	bl	8008b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6;
 8000838:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800084a:	230d      	movs	r3, #13
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	482c      	ldr	r0, [pc, #176]	; (8000908 <HAL_DCMI_MspInit+0x20c>)
 8000856:	f008 f961 	bl	8008b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800085a:	2350      	movs	r3, #80	; 0x50
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800086a:	230d      	movs	r3, #13
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000872:	4619      	mov	r1, r3
 8000874:	4825      	ldr	r0, [pc, #148]	; (800090c <HAL_DCMI_MspInit+0x210>)
 8000876:	f008 f951 	bl	8008b1c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800087c:	4a25      	ldr	r2, [pc, #148]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 800087e:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 8000882:	224b      	movs	r2, #75	; 0x4b
 8000884:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000886:	4b22      	ldr	r3, [pc, #136]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800088c:	4b20      	ldr	r3, [pc, #128]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 8000894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000898:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800089a:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800089c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008a0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008a8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008b6:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80008be:	4814      	ldr	r0, [pc, #80]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008c0:	f004 f9c0 	bl	8004c44 <HAL_DMA_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_DCMI_MspInit+0x1d2>
    {
      Error_Handler();
 80008ca:	f000 ff1f 	bl	800170c <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008d2:	649a      	str	r2, [r3, #72]	; 0x48
 80008d4:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	204e      	movs	r0, #78	; 0x4e
 80008e0:	f003 fead 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 80008e4:	204e      	movs	r0, #78	; 0x4e
 80008e6:	f003 fec4 	bl	8004672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */
//
  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80008ea:	bf00      	nop
 80008ec:	3738      	adds	r7, #56	; 0x38
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	48020000 	.word	0x48020000
 80008f8:	58024400 	.word	0x58024400
 80008fc:	58020400 	.word	0x58020400
 8000900:	58021800 	.word	0x58021800
 8000904:	58020c00 	.word	0x58020c00
 8000908:	58020800 	.word	0x58020800
 800090c:	58020000 	.word	0x58020000
 8000910:	24000124 	.word	0x24000124
 8000914:	40020428 	.word	0x40020428

08000918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MX_DMA_Init+0x3c>)
 8000920:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000924:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <MX_DMA_Init+0x3c>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_DMA_Init+0x3c>)
 8000930:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2039      	movs	r0, #57	; 0x39
 8000942:	f003 fe7c 	bl	800463e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000946:	2039      	movs	r0, #57	; 0x39
 8000948:	f003 fe93 	bl	8004672 <HAL_NVIC_EnableIRQ>

}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	58024400 	.word	0x58024400

08000958 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800095e:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <MX_DMA2D_Init+0x74>)
 8000960:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_PFC;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000964:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000968:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800096c:	2201      	movs	r2, #1
 800096e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000978:	2200      	movs	r2, #0
 800097a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800097e:	2201      	movs	r2, #1
 8000980:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000984:	2200      	movs	r2, #0
 8000986:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800098a:	2200      	movs	r2, #0
 800098c:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000990:	2200      	movs	r2, #0
 8000992:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000996:	2200      	movs	r2, #0
 8000998:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800099c:	2200      	movs	r2, #0
 800099e:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <MX_DMA2D_Init+0x70>)
 80009a2:	f007 f82f 	bl	8007a04 <HAL_DMA2D_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_DMA2D_Init+0x58>
  {
    Error_Handler();
 80009ac:	f000 feae 	bl	800170c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009b0:	2101      	movs	r1, #1
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_DMA2D_Init+0x70>)
 80009b4:	f007 faae 	bl	8007f14 <HAL_DMA2D_ConfigLayer>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_DMA2D_Init+0x6a>
  {
    Error_Handler();
 80009be:	f000 fea5 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2400019c 	.word	0x2400019c
 80009cc:	52001000 	.word	0x52001000

080009d0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <HAL_DMA2D_MspInit+0x48>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d116      	bne.n	8000a10 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_DMA2D_MspInit+0x4c>)
 80009e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80009e8:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <HAL_DMA2D_MspInit+0x4c>)
 80009ea:	f043 0310 	orr.w	r3, r3, #16
 80009ee:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_DMA2D_MspInit+0x4c>)
 80009f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80009f8:	f003 0310 	and.w	r3, r3, #16
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	205a      	movs	r0, #90	; 0x5a
 8000a06:	f003 fe1a 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a0a:	205a      	movs	r0, #90	; 0x5a
 8000a0c:	f003 fe31 	bl	8004672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	52001000 	.word	0x52001000
 8000a1c:	58024400 	.word	0x58024400

08000a20 <DMA2D_Convert>:
  }
}

/* USER CODE BEGIN 1 */
void DMA2D_Convert(uint8_t* source, uint32_t* destination)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  status = HAL_DMA2D_Start(&hdma2d, (uint32_t)source,
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <DMA2D_Convert+0x4c>)
 8000a3a:	f007 f847 	bl	8007acc <HAL_DMA2D_Start>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	73fb      	strb	r3, [r7, #15]
                        (uint32_t)destination, 480, 272);
  if (status != HAL_OK) {
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <DMA2D_Convert+0x2c>
    Error_Handler();
 8000a48:	f000 fe60 	bl	800170c <Error_Handler>
  }

  status = HAL_DMA2D_PollForTransfer(&hdma2d, 1000);
 8000a4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <DMA2D_Convert+0x4c>)
 8000a52:	f007 f866 	bl	8007b22 <HAL_DMA2D_PollForTransfer>
 8000a56:	4603      	mov	r3, r0
 8000a58:	73fb      	strb	r3, [r7, #15]
  if (status != HAL_OK) {
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <DMA2D_Convert+0x44>
    Error_Handler();
 8000a60:	f000 fe54 	bl	800170c <Error_Handler>
  }
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	2400019c 	.word	0x2400019c

08000a70 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	; 0x30
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]
 8000a86:	615a      	str	r2, [r3, #20]
 8000a88:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000a8a:	4b3c      	ldr	r3, [pc, #240]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000a8c:	4a3c      	ldr	r2, [pc, #240]	; (8000b80 <MX_FMC_Init+0x110>)
 8000a8e:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8000a90:	4b3a      	ldr	r3, [pc, #232]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000a96:	4b39      	ldr	r3, [pc, #228]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000aa2:	4b36      	ldr	r3, [pc, #216]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000aa4:	2210      	movs	r2, #16
 8000aa6:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000aaa:	2240      	movs	r2, #64	; 0x40
 8000aac:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000aae:	4b33      	ldr	r3, [pc, #204]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000ab0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab4:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ab6:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000abc:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000abe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ac2:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000ac6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aca:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000acc:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000ace:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 5;
 8000adc:	2305      	movs	r3, #5
 8000ade:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 6;
 8000ae0:	2306      	movs	r3, #6
 8000ae2:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4821      	ldr	r0, [pc, #132]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000af8:	f00c fc64 	bl	800d3c4 <HAL_SDRAM_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 8000b02:	f000 fe03 	bl	800170c <Error_Handler>

  /* USER CODE BEGIN FMC_Init 2 */
  FMC_SDRAM_CommandTypeDef Command;
  /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
  /* Step 3: Configure a clock configuration enable command */
	Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000b06:	2301      	movs	r3, #1
 8000b08:	607b      	str	r3, [r7, #4]
	Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2; /* configure the Target Bank bits */
 8000b0a:	2308      	movs	r3, #8
 8000b0c:	60bb      	str	r3, [r7, #8]
	Command.AutoRefreshNumber      = 1;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
	Command.ModeRegisterDefinition = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4817      	ldr	r0, [pc, #92]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000b20:	f00c fc8c 	bl	800d43c <HAL_SDRAM_SendCommand>
	HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 8000b24:	2001      	movs	r0, #1
 8000b26:	f003 fc8b 	bl	8004440 <HAL_Delay>
	/* Step 5: Configure a PALL (precharge all) command */
	Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	607b      	str	r3, [r7, #4]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b34:	4619      	mov	r1, r3
 8000b36:	4811      	ldr	r0, [pc, #68]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000b38:	f00c fc80 	bl	800d43c <HAL_SDRAM_SendCommand>
	/* Step 6: Configure an Auto Refresh command */
	Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	607b      	str	r3, [r7, #4]
	Command.AutoRefreshNumber      = 2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000b4e:	f00c fc75 	bl	800d43c <HAL_SDRAM_SendCommand>
	/* Step 7: Program the external memory mode register */
	Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000b52:	2304      	movs	r3, #4
 8000b54:	607b      	str	r3, [r7, #4]
	Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000b56:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000b5a:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000b66:	f00c fc69 	bl	800d43c <HAL_SDRAM_SendCommand>
	/* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
	/* Set the device refresh rate
	* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
					= [(64ms/4096) * 200MHz] - 20 ~= 3115 */
	HAL_SDRAM_ProgramRefreshRate(&hsdram2, 3115);
 8000b6a:	f640 412b 	movw	r1, #3115	; 0xc2b
 8000b6e:	4803      	ldr	r0, [pc, #12]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000b70:	f00c fc99 	bl	800d4a6 <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8000b74:	bf00      	nop
 8000b76:	3730      	adds	r7, #48	; 0x30
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	24000204 	.word	0x24000204
 8000b80:	52004140 	.word	0x52004140

08000b84 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b0b8      	sub	sp, #224	; 0xe0
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000b9a:	4b58      	ldr	r3, [pc, #352]	; (8000cfc <HAL_FMC_MspInit+0x178>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 80a7 	bne.w	8000cf2 <HAL_FMC_MspInit+0x16e>
    return;
  }
  FMC_Initialized = 1;
 8000ba4:	4b55      	ldr	r3, [pc, #340]	; (8000cfc <HAL_FMC_MspInit+0x178>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	22c0      	movs	r2, #192	; 0xc0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f00e fd42 	bl	800f63c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000bb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000bbc:	f04f 0300 	mov.w	r3, #0
 8000bc0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 8000bc4:	2318      	movs	r3, #24
 8000bc6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 8000bc8:	23c8      	movs	r3, #200	; 0xc8
 8000bca:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	4618      	mov	r0, r3
 8000bea:	f00a fced 	bl	800b5c8 <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_FMC_MspInit+0x74>
    {
      Error_Handler();
 8000bf4:	f000 fd8a 	bl	800170c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000bf8:	4b41      	ldr	r3, [pc, #260]	; (8000d00 <HAL_FMC_MspInit+0x17c>)
 8000bfa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000bfe:	4a40      	ldr	r2, [pc, #256]	; (8000d00 <HAL_FMC_MspInit+0x17c>)
 8000c00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c04:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000c08:	4b3d      	ldr	r3, [pc, #244]	; (8000d00 <HAL_FMC_MspInit+0x17c>)
 8000c0a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000c16:	f248 1333 	movw	r3, #33075	; 0x8133
 8000c1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c30:	230c      	movs	r3, #12
 8000c32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c36:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4831      	ldr	r0, [pc, #196]	; (8000d04 <HAL_FMC_MspInit+0x180>)
 8000c3e:	f007 ff6d 	bl	8008b1c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000c42:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000c46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c62:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c66:	4619      	mov	r1, r3
 8000c68:	4827      	ldr	r0, [pc, #156]	; (8000d08 <HAL_FMC_MspInit+0x184>)
 8000c6a:	f007 ff57 	bl	8008b1c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000c6e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000c72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c88:	230c      	movs	r3, #12
 8000c8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c8e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c92:	4619      	mov	r1, r3
 8000c94:	481d      	ldr	r0, [pc, #116]	; (8000d0c <HAL_FMC_MspInit+0x188>)
 8000c96:	f007 ff41 	bl	8008b1c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000c9a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000c9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cb4:	230c      	movs	r3, #12
 8000cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4813      	ldr	r0, [pc, #76]	; (8000d10 <HAL_FMC_MspInit+0x18c>)
 8000cc2:	f007 ff2b 	bl	8008b1c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000cc6:	23e0      	movs	r3, #224	; 0xe0
 8000cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cde:	230c      	movs	r3, #12
 8000ce0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ce4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480a      	ldr	r0, [pc, #40]	; (8000d14 <HAL_FMC_MspInit+0x190>)
 8000cec:	f007 ff16 	bl	8008b1c <HAL_GPIO_Init>
 8000cf0:	e000      	b.n	8000cf4 <HAL_FMC_MspInit+0x170>
    return;
 8000cf2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000cf4:	37e0      	adds	r7, #224	; 0xe0
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	24000238 	.word	0x24000238
 8000d00:	58024400 	.word	0x58024400
 8000d04:	58021800 	.word	0x58021800
 8000d08:	58020c00 	.word	0x58020c00
 8000d0c:	58021000 	.word	0x58021000
 8000d10:	58021400 	.word	0x58021400
 8000d14:	58021c00 	.word	0x58021c00

08000d18 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000d20:	f7ff ff30 	bl	8000b84 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <MX_GPIO_Init>:
     PA0   ------> I2S6_WS
     PA3   ------> I2S6_MCK
     PB2   ------> OCTOSPIM_P1_CLK
*/
void MX_GPIO_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b090      	sub	sp, #64	; 0x40
 8000d30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d42:	4bc0      	ldr	r3, [pc, #768]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d48:	4abe      	ldr	r2, [pc, #760]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d52:	4bbc      	ldr	r3, [pc, #752]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d60:	4bb8      	ldr	r3, [pc, #736]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d66:	4ab7      	ldr	r2, [pc, #732]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d70:	4bb4      	ldr	r3, [pc, #720]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d7e:	4bb1      	ldr	r3, [pc, #708]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d84:	4aaf      	ldr	r2, [pc, #700]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d8e:	4bad      	ldr	r3, [pc, #692]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d98:	623b      	str	r3, [r7, #32]
 8000d9a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d9c:	4ba9      	ldr	r3, [pc, #676]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000da2:	4aa8      	ldr	r2, [pc, #672]	; (8001044 <MX_GPIO_Init+0x318>)
 8000da4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dac:	4ba5      	ldr	r3, [pc, #660]	; (8001044 <MX_GPIO_Init+0x318>)
 8000dae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dba:	4ba2      	ldr	r3, [pc, #648]	; (8001044 <MX_GPIO_Init+0x318>)
 8000dbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dc0:	4aa0      	ldr	r2, [pc, #640]	; (8001044 <MX_GPIO_Init+0x318>)
 8000dc2:	f043 0308 	orr.w	r3, r3, #8
 8000dc6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dca:	4b9e      	ldr	r3, [pc, #632]	; (8001044 <MX_GPIO_Init+0x318>)
 8000dcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd8:	4b9a      	ldr	r3, [pc, #616]	; (8001044 <MX_GPIO_Init+0x318>)
 8000dda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dde:	4a99      	ldr	r2, [pc, #612]	; (8001044 <MX_GPIO_Init+0x318>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000de8:	4b96      	ldr	r3, [pc, #600]	; (8001044 <MX_GPIO_Init+0x318>)
 8000dea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df6:	4b93      	ldr	r3, [pc, #588]	; (8001044 <MX_GPIO_Init+0x318>)
 8000df8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dfc:	4a91      	ldr	r2, [pc, #580]	; (8001044 <MX_GPIO_Init+0x318>)
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e06:	4b8f      	ldr	r3, [pc, #572]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e0c:	f003 0310 	and.w	r3, r3, #16
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e14:	4b8b      	ldr	r3, [pc, #556]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e1a:	4a8a      	ldr	r2, [pc, #552]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e24:	4b87      	ldr	r3, [pc, #540]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b84      	ldr	r3, [pc, #528]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e38:	4a82      	ldr	r2, [pc, #520]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e42:	4b80      	ldr	r3, [pc, #512]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e50:	4b7c      	ldr	r3, [pc, #496]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e56:	4a7b      	ldr	r2, [pc, #492]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e58:	f043 0320 	orr.w	r3, r3, #32
 8000e5c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e60:	4b78      	ldr	r3, [pc, #480]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e66:	f003 0320 	and.w	r3, r3, #32
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6e:	4b75      	ldr	r3, [pc, #468]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e74:	4a73      	ldr	r2, [pc, #460]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e7a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e7e:	4b71      	ldr	r3, [pc, #452]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	210e      	movs	r1, #14
 8000e90:	486d      	ldr	r0, [pc, #436]	; (8001048 <MX_GPIO_Init+0x31c>)
 8000e92:	f008 f8fd 	bl	8009090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f640 0104 	movw	r1, #2052	; 0x804
 8000e9c:	486b      	ldr	r0, [pc, #428]	; (800104c <MX_GPIO_Init+0x320>)
 8000e9e:	f008 f8f7 	bl	8009090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea8:	4869      	ldr	r0, [pc, #420]	; (8001050 <MX_GPIO_Init+0x324>)
 8000eaa:	f008 f8f1 	bl	8009090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2108      	movs	r1, #8
 8000eb2:	4866      	ldr	r0, [pc, #408]	; (800104c <MX_GPIO_Init+0x320>)
 8000eb4:	f008 f8ec 	bl	8009090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2106      	movs	r1, #6
 8000ebc:	4864      	ldr	r0, [pc, #400]	; (8001050 <MX_GPIO_Init+0x324>)
 8000ebe:	f008 f8e7 	bl	8009090 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8000ec2:	2330      	movs	r3, #48	; 0x30
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	485c      	ldr	r0, [pc, #368]	; (8001048 <MX_GPIO_Init+0x31c>)
 8000ed8:	f007 fe20 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8000edc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000eee:	2305      	movs	r3, #5
 8000ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4854      	ldr	r0, [pc, #336]	; (800104c <MX_GPIO_Init+0x320>)
 8000efa:	f007 fe0f 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8000efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000f10:	2309      	movs	r3, #9
 8000f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f18:	4619      	mov	r1, r3
 8000f1a:	484c      	ldr	r0, [pc, #304]	; (800104c <MX_GPIO_Init+0x320>)
 8000f1c:	f007 fdfe 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000f30:	230a      	movs	r3, #10
 8000f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4846      	ldr	r0, [pc, #280]	; (8001054 <MX_GPIO_Init+0x328>)
 8000f3c:	f007 fdee 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 8000f40:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f52:	230c      	movs	r3, #12
 8000f54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	483e      	ldr	r0, [pc, #248]	; (8001058 <MX_GPIO_Init+0x32c>)
 8000f5e:	f007 fddd 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8000f62:	230e      	movs	r3, #14
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f76:	4619      	mov	r1, r3
 8000f78:	4833      	ldr	r0, [pc, #204]	; (8001048 <MX_GPIO_Init+0x31c>)
 8000f7a:	f007 fdcf 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8000f7e:	f640 030c 	movw	r3, #2060	; 0x80c
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f94:	4619      	mov	r1, r3
 8000f96:	482d      	ldr	r0, [pc, #180]	; (800104c <MX_GPIO_Init+0x320>)
 8000f98:	f007 fdc0 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000fac:	230c      	movs	r3, #12
 8000fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4827      	ldr	r0, [pc, #156]	; (8001054 <MX_GPIO_Init+0x328>)
 8000fb8:	f007 fdb0 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	481d      	ldr	r0, [pc, #116]	; (8001048 <MX_GPIO_Init+0x31c>)
 8000fd4:	f007 fda2 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8000fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fea:	2305      	movs	r3, #5
 8000fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4816      	ldr	r0, [pc, #88]	; (8001050 <MX_GPIO_Init+0x324>)
 8000ff6:	f007 fd91 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8000ffa:	f640 0306 	movw	r3, #2054	; 0x806
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001010:	4619      	mov	r1, r3
 8001012:	480f      	ldr	r0, [pc, #60]	; (8001050 <MX_GPIO_Init+0x324>)
 8001014:	f007 fd82 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8001018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800101e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102c:	4619      	mov	r1, r3
 800102e:	480a      	ldr	r0, [pc, #40]	; (8001058 <MX_GPIO_Init+0x32c>)
 8001030:	f007 fd74 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8001034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	e00c      	b.n	800105c <MX_GPIO_Init+0x330>
 8001042:	bf00      	nop
 8001044:	58024400 	.word	0x58024400
 8001048:	58022000 	.word	0x58022000
 800104c:	58021800 	.word	0x58021800
 8001050:	58020000 	.word	0x58020000
 8001054:	58020c00 	.word	0x58020c00
 8001058:	58020800 	.word	0x58020800
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001062:	2300      	movs	r3, #0
 8001064:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106a:	4619      	mov	r1, r3
 800106c:	4842      	ldr	r0, [pc, #264]	; (8001178 <MX_GPIO_Init+0x44c>)
 800106e:	f007 fd55 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8001072:	2340      	movs	r3, #64	; 0x40
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001082:	230a      	movs	r3, #10
 8001084:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108a:	4619      	mov	r1, r3
 800108c:	483b      	ldr	r0, [pc, #236]	; (800117c <MX_GPIO_Init+0x450>)
 800108e:	f007 fd45 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8001092:	230c      	movs	r3, #12
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010a2:	2305      	movs	r3, #5
 80010a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010aa:	4619      	mov	r1, r3
 80010ac:	4834      	ldr	r0, [pc, #208]	; (8001180 <MX_GPIO_Init+0x454>)
 80010ae:	f007 fd35 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 80010b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b8:	2312      	movs	r3, #18
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010bc:	2301      	movs	r3, #1
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80010c4:	2304      	movs	r3, #4
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010cc:	4619      	mov	r1, r3
 80010ce:	482d      	ldr	r0, [pc, #180]	; (8001184 <MX_GPIO_Init+0x458>)
 80010d0:	f007 fd24 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 80010d4:	2322      	movs	r3, #34	; 0x22
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80010e4:	230a      	movs	r3, #10
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ec:	4619      	mov	r1, r3
 80010ee:	4824      	ldr	r0, [pc, #144]	; (8001180 <MX_GPIO_Init+0x454>)
 80010f0:	f007 fd14 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80010f4:	2304      	movs	r3, #4
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001106:	4619      	mov	r1, r3
 8001108:	481f      	ldr	r0, [pc, #124]	; (8001188 <MX_GPIO_Init+0x45c>)
 800110a:	f007 fd07 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 800110e:	2308      	movs	r3, #8
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800111e:	2309      	movs	r3, #9
 8001120:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001126:	4619      	mov	r1, r3
 8001128:	4817      	ldr	r0, [pc, #92]	; (8001188 <MX_GPIO_Init+0x45c>)
 800112a:	f007 fcf7 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 800112e:	2309      	movs	r3, #9
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800113e:	2305      	movs	r3, #5
 8001140:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001146:	4619      	mov	r1, r3
 8001148:	480b      	ldr	r0, [pc, #44]	; (8001178 <MX_GPIO_Init+0x44c>)
 800114a:	f007 fce7 	bl	8008b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 800114e:	2304      	movs	r3, #4
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800115e:	2309      	movs	r3, #9
 8001160:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001166:	4619      	mov	r1, r3
 8001168:	4808      	ldr	r0, [pc, #32]	; (800118c <MX_GPIO_Init+0x460>)
 800116a:	f007 fcd7 	bl	8008b1c <HAL_GPIO_Init>

}
 800116e:	bf00      	nop
 8001170:	3740      	adds	r7, #64	; 0x40
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	58020000 	.word	0x58020000
 800117c:	58021800 	.word	0x58021800
 8001180:	58020800 	.word	0x58020800
 8001184:	58020c00 	.word	0x58020c00
 8001188:	58021c00 	.word	0x58021c00
 800118c:	58020400 	.word	0x58020400

08001190 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08e      	sub	sp, #56	; 0x38
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2234      	movs	r2, #52	; 0x34
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f00e fa4d 	bl	800f63c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80011a2:	4b38      	ldr	r3, [pc, #224]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011a4:	4a38      	ldr	r2, [pc, #224]	; (8001288 <MX_LTDC_Init+0xf8>)
 80011a6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80011a8:	4b36      	ldr	r3, [pc, #216]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80011ae:	4b35      	ldr	r3, [pc, #212]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 80011b4:	4b33      	ldr	r3, [pc, #204]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011b6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80011ba:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80011bc:	4b31      	ldr	r3, [pc, #196]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80011c2:	4b30      	ldr	r3, [pc, #192]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80011c8:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011ca:	2203      	movs	r2, #3
 80011cc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011d0:	220e      	movs	r2, #14
 80011d2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80011d4:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011d6:	2205      	movs	r2, #5
 80011d8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011dc:	f240 228e 	movw	r2, #654	; 0x28e
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80011e2:	4b28      	ldr	r3, [pc, #160]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011e4:	f240 12e5 	movw	r2, #485	; 0x1e5
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011ec:	f44f 7225 	mov.w	r2, #660	; 0x294
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80011f2:	4b24      	ldr	r3, [pc, #144]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011f4:	f240 12e7 	movw	r2, #487	; 0x1e7
 80011f8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80011fa:	4b22      	ldr	r3, [pc, #136]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <MX_LTDC_Init+0xf4>)
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800120a:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <MX_LTDC_Init+0xf4>)
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001212:	481c      	ldr	r0, [pc, #112]	; (8001284 <MX_LTDC_Init+0xf4>)
 8001214:	f008 fddc 	bl	8009dd0 <HAL_LTDC_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 800121e:	f000 fa75 	bl	800170c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001232:	2302      	movs	r3, #2
 8001234:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800123e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001242:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001244:	2305      	movs	r3, #5
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2200      	movs	r2, #0
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_LTDC_Init+0xf4>)
 800126e:	f008 ff41 	bl	800a0f4 <HAL_LTDC_ConfigLayer>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8001278:	f000 fa48 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	3738      	adds	r7, #56	; 0x38
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2400023c 	.word	0x2400023c
 8001288:	50001000 	.word	0x50001000

0800128c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0bc      	sub	sp, #240	; 0xf0
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a4:	f107 0318 	add.w	r3, r7, #24
 80012a8:	22c0      	movs	r2, #192	; 0xc0
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00e f9c5 	bl	800f63c <memset>
  if(ltdcHandle->Instance==LTDC)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a5b      	ldr	r2, [pc, #364]	; (8001424 <HAL_LTDC_MspInit+0x198>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	f040 80ae 	bne.w	800141a <HAL_LTDC_MspInit+0x18e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 80012ca:	2318      	movs	r3, #24
 80012cc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 80012ce:	23c0      	movs	r3, #192	; 0xc0
 80012d0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 80012d2:	2311      	movs	r3, #17
 80012d4:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80012d6:	2302      	movs	r3, #2
 80012d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80012da:	2302      	movs	r3, #2
 80012dc:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80012de:	2300      	movs	r3, #0
 80012e0:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462.0;
 80012e6:	f241 5356 	movw	r3, #5462	; 0x1556
 80012ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ec:	f107 0318 	add.w	r3, r7, #24
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00a f969 	bl	800b5c8 <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 80012fc:	f000 fa06 	bl	800170c <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001300:	4b49      	ldr	r3, [pc, #292]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 8001302:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001306:	4a48      	ldr	r2, [pc, #288]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8001310:	4b45      	ldr	r3, [pc, #276]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 8001312:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800131e:	4b42      	ldr	r3, [pc, #264]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 8001320:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001324:	4a40      	ldr	r2, [pc, #256]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 8001326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800132a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800132e:	4b3e      	ldr	r3, [pc, #248]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 8001330:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800133c:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 800133e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001342:	4a39      	ldr	r2, [pc, #228]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 8001344:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001348:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800134c:	4b36      	ldr	r3, [pc, #216]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 800134e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800135a:	4b33      	ldr	r3, [pc, #204]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 800135c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001360:	4a31      	ldr	r2, [pc, #196]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 8001362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001366:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800136a:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 800136c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 8001378:	23ff      	movs	r3, #255	; 0xff
 800137a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001390:	230e      	movs	r3, #14
 8001392:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001396:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800139a:	4619      	mov	r1, r3
 800139c:	4823      	ldr	r0, [pc, #140]	; (800142c <HAL_LTDC_MspInit+0x1a0>)
 800139e:	f007 fbbd 	bl	8008b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 80013a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013bc:	230e      	movs	r3, #14
 80013be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80013c2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013c6:	4619      	mov	r1, r3
 80013c8:	4819      	ldr	r0, [pc, #100]	; (8001430 <HAL_LTDC_MspInit+0x1a4>)
 80013ca:	f007 fba7 	bl	8008b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 80013ce:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80013d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013e8:	230e      	movs	r3, #14
 80013ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013f2:	4619      	mov	r1, r3
 80013f4:	480f      	ldr	r0, [pc, #60]	; (8001434 <HAL_LTDC_MspInit+0x1a8>)
 80013f6:	f007 fb91 	bl	8008b1c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2058      	movs	r0, #88	; 0x58
 8001400:	f003 f91d 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001404:	2058      	movs	r0, #88	; 0x58
 8001406:	f003 f934 	bl	8004672 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2059      	movs	r0, #89	; 0x59
 8001410:	f003 f915 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001414:	2059      	movs	r0, #89	; 0x59
 8001416:	f003 f92c 	bl	8004672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800141a:	bf00      	nop
 800141c:	37f0      	adds	r7, #240	; 0xf0
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	50001000 	.word	0x50001000
 8001428:	58024400 	.word	0x58024400
 800142c:	58022800 	.word	0x58022800
 8001430:	58022400 	.word	0x58022400
 8001434:	58022000 	.word	0x58022000

08001438 <LTDC_Init_from_buffer>:
  /* USER CODE END LTDC_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTDC_Init_from_buffer(uint32_t* buffer){
 8001438:	b580      	push	{r7, lr}
 800143a:	b090      	sub	sp, #64	; 0x40
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2234      	movs	r2, #52	; 0x34
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f00e f8f7 	bl	800f63c <memset>
	pLayerCfg.WindowX0 = 28;
 800144e:	231c      	movs	r3, #28
 8001450:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = 508;
 8001452:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8001456:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 6;
 8001458:	2306      	movs	r3, #6
 800145a:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = 278;
 800145c:	f44f 738b 	mov.w	r3, #278	; 0x116
 8001460:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001462:	2302      	movs	r3, #2
 8001464:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001466:	23ff      	movs	r3, #255	; 0xff
 8001468:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800146e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001474:	2305      	movs	r3, #5
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.FBStartAdress = (uint32_t)buffer;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.ImageWidth = 480;
 800147c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = 272;
 8001482:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001486:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	2200      	movs	r2, #0
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <LTDC_Init_from_buffer+0x84>)
 80014a4:	f008 fe26 	bl	800a0f4 <HAL_LTDC_ConfigLayer>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <LTDC_Init_from_buffer+0x7a>
	{
	Error_Handler();
 80014ae:	f000 f92d 	bl	800170c <Error_Handler>
	}
}
 80014b2:	bf00      	nop
 80014b4:	3740      	adds	r7, #64	; 0x40
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2400023c 	.word	0x2400023c

080014c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c6:	f002 ff29 	bl	800431c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ca:	f000 f883 	bl	80015d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ce:	f7ff fc2d 	bl	8000d2c <MX_GPIO_Init>
  MX_DMA_Init();
 80014d2:	f7ff fa21 	bl	8000918 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80014d6:	f002 fe39 	bl	800414c <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 80014da:	f7ff fa3d 	bl	8000958 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80014de:	f7ff fe57 	bl	8001190 <MX_LTDC_Init>
  MX_DCMI_Init();
 80014e2:	f7ff f8d7 	bl	8000694 <MX_DCMI_Init>
  MX_RTC_Init();
 80014e6:	f001 fe6f 	bl	80031c8 <MX_RTC_Init>
  MX_FMC_Init();
 80014ea:	f7ff fac1 	bl	8000a70 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 80014ee:	4831      	ldr	r0, [pc, #196]	; (80015b4 <main+0xf4>)
 80014f0:	f001 fdb4 	bl	800305c <RetargetInit>

  printf("BUFFER RANDOM VALUE BEFORE CAPTURE: %d\n", buffer[5640]);
 80014f4:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <main+0xf8>)
 80014f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014fa:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 80014fe:	4619      	mov	r1, r3
 8001500:	482e      	ldr	r0, [pc, #184]	; (80015bc <main+0xfc>)
 8001502:	f00e f8a3 	bl	800f64c <iprintf>
  //camera init
  BSP_CAMERA_PwrDown(0);
 8001506:	2000      	movs	r0, #0
 8001508:	f002 fbc1 	bl	8003c8e <BSP_CAMERA_PwrDown>

  if(BSP_CAMERA_Init(0, CAMERA_R480x272, CAMERA_PF_RGB565) != BSP_ERROR_NONE){
 800150c:	2200      	movs	r2, #0
 800150e:	2102      	movs	r1, #2
 8001510:	2000      	movs	r0, #0
 8001512:	f002 fb0b 	bl	8003b2c <BSP_CAMERA_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <main+0x60>
	  Error_Handler();
 800151c:	f000 f8f6 	bl	800170c <Error_Handler>
  }

  HAL_Delay(1000);
 8001520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001524:	f002 ff8c 	bl	8004440 <HAL_Delay>
//  buffer[5460] = 255;
  LTDC_Init_from_buffer(buffer2d);
 8001528:	4825      	ldr	r0, [pc, #148]	; (80015c0 <main+0x100>)
 800152a:	f7ff ff85 	bl	8001438 <LTDC_Init_from_buffer>

	#define SDRAM_ADD 0xD0000000

	uint8_t wdata[] = {0x1, 0x2, 0x3, 0x4, 0x5};
 800152e:	4a25      	ldr	r2, [pc, #148]	; (80015c4 <main+0x104>)
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001538:	6018      	str	r0, [r3, #0]
 800153a:	3304      	adds	r3, #4
 800153c:	7019      	strb	r1, [r3, #0]
	uint8_t rdata[10] = {0};
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	809a      	strh	r2, [r3, #4]

	memcpy((uint32_t *) SDRAM_ADD, wdata, 5);
 800154c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001550:	f107 0210 	add.w	r2, r7, #16
 8001554:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001558:	6018      	str	r0, [r3, #0]
 800155a:	3304      	adds	r3, #4
 800155c:	7019      	strb	r1, [r3, #0]

	memcpy(rdata, (uint32_t *) SDRAM_ADD, 5);
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2205      	movs	r2, #5
 8001562:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001566:	4618      	mov	r0, r3
 8001568:	f00e f85a 	bl	800f620 <memcpy>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Printing photo 1");
 800156c:	4816      	ldr	r0, [pc, #88]	; (80015c8 <main+0x108>)
 800156e:	f00e f86d 	bl	800f64c <iprintf>
  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, GPIO_PIN_SET);
 8001572:	2201      	movs	r2, #1
 8001574:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001578:	4814      	ldr	r0, [pc, #80]	; (80015cc <main+0x10c>)
 800157a:	f007 fd89 	bl	8009090 <HAL_GPIO_WritePin>
  BSP_CAMERA_Start(0, (uint8_t*)buffer, CAMERA_MODE_SNAPSHOT);
 800157e:	2202      	movs	r2, #2
 8001580:	490d      	ldr	r1, [pc, #52]	; (80015b8 <main+0xf8>)
 8001582:	2000      	movs	r0, #0
 8001584:	f002 fb18 	bl	8003bb8 <BSP_CAMERA_Start>
  BSP_CAMERA_Stop(0);
 8001588:	2000      	movs	r0, #0
 800158a:	f002 fb4f 	bl	8003c2c <BSP_CAMERA_Stop>
  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <main+0x10c>)
 8001596:	f007 fd7b 	bl	8009090 <HAL_GPIO_WritePin>

  while (1)
  {
	HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 800159a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800159e:	480b      	ldr	r0, [pc, #44]	; (80015cc <main+0x10c>)
 80015a0:	f007 fd8f 	bl	80090c2 <HAL_GPIO_TogglePin>
	printf("siema");
 80015a4:	480a      	ldr	r0, [pc, #40]	; (80015d0 <main+0x110>)
 80015a6:	f00e f851 	bl	800f64c <iprintf>
	HAL_Delay(1000);
 80015aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ae:	f002 ff47 	bl	8004440 <HAL_Delay>
	HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 80015b2:	e7f2      	b.n	800159a <main+0xda>
 80015b4:	240dffd8 	.word	0x240dffd8
 80015b8:	240002e8 	.word	0x240002e8
 80015bc:	0801071c 	.word	0x0801071c
 80015c0:	2405fce8 	.word	0x2405fce8
 80015c4:	08010760 	.word	0x08010760
 80015c8:	08010744 	.word	0x08010744
 80015cc:	58021800 	.word	0x58021800
 80015d0:	08010758 	.word	0x08010758

080015d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b09c      	sub	sp, #112	; 0x70
 80015d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	224c      	movs	r2, #76	; 0x4c
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f00e f82a 	bl	800f63c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2220      	movs	r2, #32
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f00e f824 	bl	800f63c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80015f4:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <SystemClock_Config+0x104>)
 80015f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80015fe:	2004      	movs	r0, #4
 8001600:	f008 ff60 	bl	800a4c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001604:	2300      	movs	r3, #0
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	4b34      	ldr	r3, [pc, #208]	; (80016dc <SystemClock_Config+0x108>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a33      	ldr	r2, [pc, #204]	; (80016dc <SystemClock_Config+0x108>)
 800160e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b31      	ldr	r3, [pc, #196]	; (80016dc <SystemClock_Config+0x108>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001620:	bf00      	nop
 8001622:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <SystemClock_Config+0x108>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800162a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800162e:	d1f8      	bne.n	8001622 <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001630:	f008 ff38 	bl	800a4a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <SystemClock_Config+0x104>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	4a27      	ldr	r2, [pc, #156]	; (80016d8 <SystemClock_Config+0x104>)
 800163a:	f023 0318 	bic.w	r3, r3, #24
 800163e:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001640:	2305      	movs	r3, #5
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800164a:	2301      	movs	r3, #1
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164e:	2302      	movs	r3, #2
 8001650:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001652:	2302      	movs	r3, #2
 8001654:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001656:	2303      	movs	r3, #3
 8001658:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 69;
 800165a:	2345      	movs	r3, #69	; 0x45
 800165c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800165e:	2302      	movs	r3, #2
 8001660:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001662:	230c      	movs	r3, #12
 8001664:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 16;
 8001666:	2310      	movs	r3, #16
 8001668:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800166a:	230c      	movs	r3, #12
 800166c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800166e:	2300      	movs	r3, #0
 8001670:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 5462;
 8001672:	f241 5356 	movw	r3, #5462	; 0x1556
 8001676:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	4618      	mov	r0, r3
 800167e:	f008 ff7b 	bl	800a578 <HAL_RCC_OscConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001688:	f000 f840 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800168c:	233f      	movs	r3, #63	; 0x3f
 800168e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001690:	2303      	movs	r3, #3
 8001692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800169c:	2340      	movs	r3, #64	; 0x40
 800169e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016a0:	2340      	movs	r3, #64	; 0x40
 80016a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016aa:	2340      	movs	r3, #64	; 0x40
 80016ac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2107      	movs	r1, #7
 80016b2:	4618      	mov	r0, r3
 80016b4:	f009 fb92 	bl	800addc <HAL_RCC_ClockConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80016be:	f000 f825 	bl	800170c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80016c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016c6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80016ca:	2000      	movs	r0, #0
 80016cc:	f009 fd3c 	bl	800b148 <HAL_RCC_MCOConfig>
}
 80016d0:	bf00      	nop
 80016d2:	3770      	adds	r7, #112	; 0x70
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	58024400 	.word	0x58024400
 80016dc:	58024800 	.word	0x58024800

080016e0 <BSP_CAMERA_FrameEventCallback>:

/* USER CODE BEGIN 4 */

void BSP_CAMERA_FrameEventCallback(uint32_t Instance){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	camera_frame_ready = 1;
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <BSP_CAMERA_FrameEventCallback+0x20>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
	DMA2D_Convert(buffer, buffer2d);
 80016ee:	4905      	ldr	r1, [pc, #20]	; (8001704 <BSP_CAMERA_FrameEventCallback+0x24>)
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <BSP_CAMERA_FrameEventCallback+0x28>)
 80016f2:	f7ff f995 	bl	8000a20 <DMA2D_Convert>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	240002e4 	.word	0x240002e4
 8001704:	2405fce8 	.word	0x2405fce8
 8001708:	240002e8 	.word	0x240002e8

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	e7fe      	b.n	8001714 <Error_Handler+0x8>
	...

08001718 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d103      	bne.n	8001730 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8001728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	e02c      	b.n	800178a <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	891a      	ldrh	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	695a      	ldr	r2, [r3, #20]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a0c      	ldr	r2, [pc, #48]	; (8001794 <OV5640_RegisterBusIO+0x7c>)
 8001764:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <OV5640_RegisterBusIO+0x80>)
 800176a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d004      	beq.n	8001784 <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4798      	blx	r3
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	e002      	b.n	800178a <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 8001784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001788:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	08002f9b 	.word	0x08002f9b
 8001798:	08002fcd 	.word	0x08002fcd

0800179c <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d165      	bne.n	8001882 <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d80e      	bhi.n	80017da <OV5640_Init+0x3e>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00f      	beq.n	80017e2 <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d00c      	beq.n	80017e2 <OV5640_Init+0x46>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d009      	beq.n	80017e2 <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b07      	cmp	r3, #7
 80017d2:	d006      	beq.n	80017e2 <OV5640_Init+0x46>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d003      	beq.n	80017e2 <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017de:	61bb      	str	r3, [r7, #24]
 80017e0:	e04f      	b.n	8001882 <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	e01f      	b.n	8001828 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017ee:	d018      	beq.n	8001822 <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 80017f0:	4a26      	ldr	r2, [pc, #152]	; (800188c <OV5640_Init+0xf0>)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	885b      	ldrh	r3, [r3, #2]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f103 0018 	add.w	r0, r3, #24
 8001804:	4a21      	ldr	r2, [pc, #132]	; (800188c <OV5640_Init+0xf0>)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800180c:	f107 0217 	add.w	r2, r7, #23
 8001810:	2301      	movs	r3, #1
 8001812:	f001 fc0b 	bl	800302c <ov5640_write_reg>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d002      	beq.n	8001822 <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 800181c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001820:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3301      	adds	r3, #1
 8001826:	61fb      	str	r3, [r7, #28]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	2bfd      	cmp	r3, #253	; 0xfd
 800182c:	d9dc      	bls.n	80017e8 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d126      	bne.n	8001882 <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 f9e0 	bl	8001bfc <OV5640_SetResolution>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001846:	61bb      	str	r3, [r7, #24]
 8001848:	e01b      	b.n	8001882 <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f000 f833 	bl	80018b8 <OV5640_SetPixelFormat>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8001858:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	e010      	b.n	8001882 <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8001860:	2300      	movs	r3, #0
 8001862:	2201      	movs	r2, #1
 8001864:	2101      	movs	r1, #1
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fb64 	bl	8001f34 <OV5640_SetPolarities>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	e003      	b.n	8001882 <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8001882:	69bb      	ldr	r3, [r7, #24]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	080107b0 	.word	0x080107b0

08001890 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d103      	bne.n	80018aa <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00f      	beq.n	80018ec <OV5640_SetPixelFormat+0x34>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d00c      	beq.n	80018ec <OV5640_SetPixelFormat+0x34>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d009      	beq.n	80018ec <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	2b07      	cmp	r3, #7
 80018dc:	d006      	beq.n	80018ec <OV5640_SetPixelFormat+0x34>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d003      	beq.n	80018ec <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	e16a      	b.n	8001bc2 <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	2b07      	cmp	r3, #7
 80018f2:	f200 80c3 	bhi.w	8001a7c <OV5640_SetPixelFormat+0x1c4>
 80018f6:	a201      	add	r2, pc, #4	; (adr r2, 80018fc <OV5640_SetPixelFormat+0x44>)
 80018f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fc:	08001975 	.word	0x08001975
 8001900:	0800191d 	.word	0x0800191d
 8001904:	08001a7d 	.word	0x08001a7d
 8001908:	08001a7d 	.word	0x08001a7d
 800190c:	08001a7d 	.word	0x08001a7d
 8001910:	08001a7d 	.word	0x08001a7d
 8001914:	080019cd 	.word	0x080019cd
 8001918:	08001a25 	.word	0x08001a25
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	e024      	b.n	800196c <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001928:	d01d      	beq.n	8001966 <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 800192a:	4aa8      	ldr	r2, [pc, #672]	; (8001bcc <OV5640_SetPixelFormat+0x314>)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	885b      	ldrh	r3, [r3, #2]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f103 0018 	add.w	r0, r3, #24
 800193e:	4aa3      	ldr	r2, [pc, #652]	; (8001bcc <OV5640_SetPixelFormat+0x314>)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001946:	f107 020f 	add.w	r2, r7, #15
 800194a:	2301      	movs	r3, #1
 800194c:	f001 fb6e 	bl	800302c <ov5640_write_reg>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e003      	b.n	8001966 <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800195e:	2101      	movs	r1, #1
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f001 fb00 	bl	8002f66 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	3301      	adds	r3, #1
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d9d7      	bls.n	8001922 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8001972:	e0af      	b.n	8001ad4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001974:	2300      	movs	r3, #0
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	e024      	b.n	80019c4 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001980:	d01d      	beq.n	80019be <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8001982:	4a93      	ldr	r2, [pc, #588]	; (8001bd0 <OV5640_SetPixelFormat+0x318>)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	885b      	ldrh	r3, [r3, #2]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f103 0018 	add.w	r0, r3, #24
 8001996:	4a8e      	ldr	r2, [pc, #568]	; (8001bd0 <OV5640_SetPixelFormat+0x318>)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800199e:	f107 020f 	add.w	r2, r7, #15
 80019a2:	2301      	movs	r3, #1
 80019a4:	f001 fb42 	bl	800302c <ov5640_write_reg>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	e003      	b.n	80019be <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80019b6:	2101      	movs	r1, #1
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f001 fad4 	bl	8002f66 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	3301      	adds	r3, #1
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d9d7      	bls.n	800197a <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 80019ca:	e083      	b.n	8001ad4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	e024      	b.n	8001a1c <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019d8:	d01d      	beq.n	8001a16 <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80019da:	4a7e      	ldr	r2, [pc, #504]	; (8001bd4 <OV5640_SetPixelFormat+0x31c>)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	885b      	ldrh	r3, [r3, #2]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f103 0018 	add.w	r0, r3, #24
 80019ee:	4a79      	ldr	r2, [pc, #484]	; (8001bd4 <OV5640_SetPixelFormat+0x31c>)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80019f6:	f107 020f 	add.w	r2, r7, #15
 80019fa:	2301      	movs	r3, #1
 80019fc:	f001 fb16 	bl	800302c <ov5640_write_reg>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e003      	b.n	8001a16 <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001a0e:	2101      	movs	r1, #1
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f001 faa8 	bl	8002f66 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d9d7      	bls.n	80019d2 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 8001a22:	e057      	b.n	8001ad4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	e024      	b.n	8001a74 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a30:	d01d      	beq.n	8001a6e <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8001a32:	4a69      	ldr	r2, [pc, #420]	; (8001bd8 <OV5640_SetPixelFormat+0x320>)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	885b      	ldrh	r3, [r3, #2]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f103 0018 	add.w	r0, r3, #24
 8001a46:	4a64      	ldr	r2, [pc, #400]	; (8001bd8 <OV5640_SetPixelFormat+0x320>)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001a4e:	f107 020f 	add.w	r2, r7, #15
 8001a52:	2301      	movs	r3, #1
 8001a54:	f001 faea 	bl	800302c <ov5640_write_reg>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e003      	b.n	8001a6e <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001a66:	2101      	movs	r1, #1
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f001 fa7c 	bl	8002f66 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	3301      	adds	r3, #1
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d9d7      	bls.n	8001a2a <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8001a7a:	e02b      	b.n	8001ad4 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	e024      	b.n	8001acc <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a88:	d01d      	beq.n	8001ac6 <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8001a8a:	4a54      	ldr	r2, [pc, #336]	; (8001bdc <OV5640_SetPixelFormat+0x324>)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	885b      	ldrh	r3, [r3, #2]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f103 0018 	add.w	r0, r3, #24
 8001a9e:	4a4f      	ldr	r2, [pc, #316]	; (8001bdc <OV5640_SetPixelFormat+0x324>)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001aa6:	f107 020f 	add.w	r2, r7, #15
 8001aaa:	2301      	movs	r3, #1
 8001aac:	f001 fabe 	bl	800302c <ov5640_write_reg>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	e003      	b.n	8001ac6 <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001abe:	2101      	movs	r1, #1
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f001 fa50 	bl	8002f66 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d9d7      	bls.n	8001a82 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8001ad2:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d173      	bne.n	8001bc2 <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f103 0018 	add.w	r0, r3, #24
 8001ae0:	f107 020f 	add.w	r2, r7, #15
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	f643 0121 	movw	r1, #14369	; 0x3821
 8001aea:	f001 fa88 	bl	8002ffe <ov5640_read_reg>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	e062      	b.n	8001bc2 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	f043 0320 	orr.w	r3, r3, #32
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f103 0018 	add.w	r0, r3, #24
 8001b0c:	f107 020f 	add.w	r2, r7, #15
 8001b10:	2301      	movs	r3, #1
 8001b12:	f643 0121 	movw	r1, #14369	; 0x3821
 8001b16:	f001 fa89 	bl	800302c <ov5640_write_reg>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	e04c      	b.n	8001bc2 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f103 0018 	add.w	r0, r3, #24
 8001b2e:	f107 020f 	add.w	r2, r7, #15
 8001b32:	2301      	movs	r3, #1
 8001b34:	f243 0102 	movw	r1, #12290	; 0x3002
 8001b38:	f001 fa61 	bl	8002ffe <ov5640_read_reg>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	e03b      	b.n	8001bc2 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	f023 031c 	bic.w	r3, r3, #28
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f103 0018 	add.w	r0, r3, #24
 8001b5a:	f107 020f 	add.w	r2, r7, #15
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f243 0102 	movw	r1, #12290	; 0x3002
 8001b64:	f001 fa62 	bl	800302c <ov5640_write_reg>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	e025      	b.n	8001bc2 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f103 0018 	add.w	r0, r3, #24
 8001b7c:	f107 020f 	add.w	r2, r7, #15
 8001b80:	2301      	movs	r3, #1
 8001b82:	f243 0106 	movw	r1, #12294	; 0x3006
 8001b86:	f001 fa3a 	bl	8002ffe <ov5640_read_reg>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e014      	b.n	8001bc2 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f103 0018 	add.w	r0, r3, #24
 8001ba8:	f107 020f 	add.w	r2, r7, #15
 8001bac:	2301      	movs	r3, #1
 8001bae:	f243 0106 	movw	r1, #12294	; 0x3006
 8001bb2:	f001 fa3b 	bl	800302c <ov5640_write_reg>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bc0:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8001bc2:	697b      	ldr	r3, [r7, #20]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	08010ba8 	.word	0x08010ba8
 8001bd0:	08010bb0 	.word	0x08010bb0
 8001bd4:	08010bb8 	.word	0x08010bb8
 8001bd8:	08010bc0 	.word	0x08010bc0
 8001bdc:	08010bc8 	.word	0x08010bc8

08001be0 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d903      	bls.n	8001c18 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e0d8      	b.n	8001dca <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	f200 80d1 	bhi.w	8001dc2 <OV5640_SetResolution+0x1c6>
 8001c20:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <OV5640_SetResolution+0x2c>)
 8001c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c26:	bf00      	nop
 8001c28:	08001c3d 	.word	0x08001c3d
 8001c2c:	08001c8b 	.word	0x08001c8b
 8001c30:	08001cd9 	.word	0x08001cd9
 8001c34:	08001d27 	.word	0x08001d27
 8001c38:	08001d75 	.word	0x08001d75
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	e01f      	b.n	8001c82 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c48:	d018      	beq.n	8001c7c <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8001c4a:	4a62      	ldr	r2, [pc, #392]	; (8001dd4 <OV5640_SetResolution+0x1d8>)
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	885b      	ldrh	r3, [r3, #2]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f103 0018 	add.w	r0, r3, #24
 8001c5e:	4a5d      	ldr	r2, [pc, #372]	; (8001dd4 <OV5640_SetResolution+0x1d8>)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001c66:	f107 020f 	add.w	r2, r7, #15
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f001 f9de 	bl	800302c <ov5640_write_reg>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c7a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d9dc      	bls.n	8001c42 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001c88:	e09f      	b.n	8001dca <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	e01f      	b.n	8001cd0 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c96:	d018      	beq.n	8001cca <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8001c98:	4a4f      	ldr	r2, [pc, #316]	; (8001dd8 <OV5640_SetResolution+0x1dc>)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	885b      	ldrh	r3, [r3, #2]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f103 0018 	add.w	r0, r3, #24
 8001cac:	4a4a      	ldr	r2, [pc, #296]	; (8001dd8 <OV5640_SetResolution+0x1dc>)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001cb4:	f107 020f 	add.w	r2, r7, #15
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f001 f9b7 	bl	800302c <ov5640_write_reg>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cc8:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	d9dc      	bls.n	8001c90 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8001cd6:	e078      	b.n	8001dca <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	e01f      	b.n	8001d1e <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ce4:	d018      	beq.n	8001d18 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8001ce6:	4a3d      	ldr	r2, [pc, #244]	; (8001ddc <OV5640_SetResolution+0x1e0>)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	885b      	ldrh	r3, [r3, #2]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f103 0018 	add.w	r0, r3, #24
 8001cfa:	4a38      	ldr	r2, [pc, #224]	; (8001ddc <OV5640_SetResolution+0x1e0>)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001d02:	f107 020f 	add.w	r2, r7, #15
 8001d06:	2301      	movs	r3, #1
 8001d08:	f001 f990 	bl	800302c <ov5640_write_reg>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d16:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d9dc      	bls.n	8001cde <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8001d24:	e051      	b.n	8001dca <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	e01f      	b.n	8001d6c <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d32:	d018      	beq.n	8001d66 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8001d34:	4a2a      	ldr	r2, [pc, #168]	; (8001de0 <OV5640_SetResolution+0x1e4>)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	885b      	ldrh	r3, [r3, #2]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f103 0018 	add.w	r0, r3, #24
 8001d48:	4a25      	ldr	r2, [pc, #148]	; (8001de0 <OV5640_SetResolution+0x1e4>)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001d50:	f107 020f 	add.w	r2, r7, #15
 8001d54:	2301      	movs	r3, #1
 8001d56:	f001 f969 	bl	800302c <ov5640_write_reg>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d64:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d9dc      	bls.n	8001d2c <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8001d72:	e02a      	b.n	8001dca <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	e01f      	b.n	8001dba <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d80:	d018      	beq.n	8001db4 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8001d82:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <OV5640_SetResolution+0x1e8>)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	885b      	ldrh	r3, [r3, #2]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f103 0018 	add.w	r0, r3, #24
 8001d96:	4a13      	ldr	r2, [pc, #76]	; (8001de4 <OV5640_SetResolution+0x1e8>)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001d9e:	f107 020f 	add.w	r2, r7, #15
 8001da2:	2301      	movs	r3, #1
 8001da4:	f001 f942 	bl	800302c <ov5640_write_reg>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001db2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	3301      	adds	r3, #1
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d9dc      	bls.n	8001d7a <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8001dc0:	e003      	b.n	8001dca <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dc6:	617b      	str	r3, [r7, #20]
        break;
 8001dc8:	bf00      	nop
    }
  }

  return ret;
 8001dca:	697b      	ldr	r3, [r7, #20]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	08010bd0 	.word	0x08010bd0
 8001dd8:	08010be0 	.word	0x08010be0
 8001ddc:	08010bf0 	.word	0x08010bf0
 8001de0:	08010c00 	.word	0x08010c00
 8001de4:	08010c10 	.word	0x08010c10

08001de8 <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f103 0018 	add.w	r0, r3, #24
 8001df8:	f107 020f 	add.w	r2, r7, #15
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f643 0108 	movw	r1, #14344	; 0x3808
 8001e02:	f001 f8fc 	bl	8002ffe <ov5640_read_reg>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	e08a      	b.n	8001f2a <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f103 0018 	add.w	r0, r3, #24
 8001e22:	f107 020f 	add.w	r2, r7, #15
 8001e26:	2301      	movs	r3, #1
 8001e28:	f643 0109 	movw	r1, #14345	; 0x3809
 8001e2c:	f001 f8e7 	bl	8002ffe <ov5640_read_reg>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	e075      	b.n	8001f2a <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	8a7b      	ldrh	r3, [r7, #18]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f103 0018 	add.w	r0, r3, #24
 8001e4e:	f107 020f 	add.w	r2, r7, #15
 8001e52:	2301      	movs	r3, #1
 8001e54:	f643 010a 	movw	r1, #14346	; 0x380a
 8001e58:	f001 f8d1 	bl	8002ffe <ov5640_read_reg>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	e05f      	b.n	8001f2a <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f103 0018 	add.w	r0, r3, #24
 8001e78:	f107 020f 	add.w	r2, r7, #15
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	f643 010b 	movw	r1, #14347	; 0x380b
 8001e82:	f001 f8bc 	bl	8002ffe <ov5640_read_reg>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	e04a      	b.n	8001f2a <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	8a3b      	ldrh	r3, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 8001e9e:	8a7b      	ldrh	r3, [r7, #18]
 8001ea0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001ea4:	d109      	bne.n	8001eba <OV5640_GetResolution+0xd2>
 8001ea6:	8a3b      	ldrh	r3, [r7, #16]
 8001ea8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001eac:	d105      	bne.n	8001eba <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2204      	movs	r2, #4
 8001eb2:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	e037      	b.n	8001f2a <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 8001eba:	8a7b      	ldrh	r3, [r7, #18]
 8001ebc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001ec0:	d109      	bne.n	8001ed6 <OV5640_GetResolution+0xee>
 8001ec2:	8a3b      	ldrh	r3, [r7, #16]
 8001ec4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001ec8:	d105      	bne.n	8001ed6 <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2203      	movs	r2, #3
 8001ece:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e029      	b.n	8001f2a <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 8001ed6:	8a7b      	ldrh	r3, [r7, #18]
 8001ed8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001edc:	d109      	bne.n	8001ef2 <OV5640_GetResolution+0x10a>
 8001ede:	8a3b      	ldrh	r3, [r7, #16]
 8001ee0:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001ee4:	d105      	bne.n	8001ef2 <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	e01b      	b.n	8001f2a <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 8001ef2:	8a7b      	ldrh	r3, [r7, #18]
 8001ef4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ef8:	d108      	bne.n	8001f0c <OV5640_GetResolution+0x124>
 8001efa:	8a3b      	ldrh	r3, [r7, #16]
 8001efc:	2bf0      	cmp	r3, #240	; 0xf0
 8001efe:	d105      	bne.n	8001f0c <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	2201      	movs	r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	e00e      	b.n	8001f2a <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 8001f0c:	8a7b      	ldrh	r3, [r7, #18]
 8001f0e:	2ba0      	cmp	r3, #160	; 0xa0
 8001f10:	d108      	bne.n	8001f24 <OV5640_GetResolution+0x13c>
 8001f12:	8a3b      	ldrh	r3, [r7, #16]
 8001f14:	2b78      	cmp	r3, #120	; 0x78
 8001f16:	d105      	bne.n	8001f24 <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	e002      	b.n	8001f2a <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f28:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8001f2a:	697b      	ldr	r3, [r7, #20]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d011      	beq.n	8001f70 <OV5640_SetPolarities+0x3c>
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <OV5640_SetPolarities+0x24>
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d10b      	bne.n	8001f70 <OV5640_SetPolarities+0x3c>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d105      	bne.n	8001f70 <OV5640_SetPolarities+0x3c>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d006      	beq.n	8001f78 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	e01e      	b.n	8001fb6 <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	015b      	lsls	r3, r3, #5
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	4313      	orrs	r3, r2
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f103 0018 	add.w	r0, r3, #24
 8001f9c:	f107 0213 	add.w	r2, r7, #19
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f244 7140 	movw	r1, #18240	; 0x4740
 8001fa6:	f001 f841 	bl	800302c <ov5640_write_reg>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fb4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001fb6:	697b      	ldr	r3, [r7, #20]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f103 0018 	add.w	r0, r3, #24
 8001fda:	f107 020b 	add.w	r2, r7, #11
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f243 0108 	movw	r1, #12296	; 0x3008
 8001fe4:	f001 f822 	bl	800302c <ov5640_write_reg>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	e032      	b.n	800205c <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 8001ff6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 ffb3 	bl	8002f66 <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f103 0018 	add.w	r0, r3, #24
 8002006:	f107 020b 	add.w	r2, r7, #11
 800200a:	2301      	movs	r3, #1
 800200c:	f243 010a 	movw	r1, #12298	; 0x300a
 8002010:	f000 fff5 	bl	8002ffe <ov5640_read_reg>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	e01c      	b.n	800205c <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8002022:	7afb      	ldrb	r3, [r7, #11]
 8002024:	021a      	lsls	r2, r3, #8
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f103 0018 	add.w	r0, r3, #24
 8002030:	f107 020b 	add.w	r2, r7, #11
 8002034:	2301      	movs	r3, #1
 8002036:	f243 010b 	movw	r1, #12299	; 0x300b
 800203a:	f000 ffe0 	bl	8002ffe <ov5640_read_reg>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8002044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	e007      	b.n	800205c <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	7afa      	ldrb	r2, [r7, #11]
 8002052:	431a      	orrs	r2, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 800205c:	68fb      	ldr	r3, [r7, #12]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 8002066:	b480      	push	{r7}
 8002068:	b085      	sub	sp, #20
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d103      	bne.n	800207e <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	e01f      	b.n	80020be <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2201      	movs	r2, #1
 8002082:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2201      	movs	r2, #1
 8002088:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2201      	movs	r2, #1
 800208e:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2201      	movs	r2, #1
 8002094:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2201      	movs	r2, #1
 800209a:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	2201      	movs	r2, #1
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2201      	movs	r2, #1
 80020a6:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2201      	movs	r2, #1
 80020ac:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2201      	movs	r2, #1
 80020b2:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2201      	movs	r2, #1
 80020b8:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80020be:	68fb      	ldr	r3, [r7, #12]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 80020d6:	2300      	movs	r3, #0
 80020d8:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f103 0018 	add.w	r0, r3, #24
 80020e0:	f107 020f 	add.w	r2, r7, #15
 80020e4:	2301      	movs	r3, #1
 80020e6:	f243 4106 	movw	r1, #13318	; 0x3406
 80020ea:	f000 ff9f 	bl	800302c <ov5640_write_reg>
 80020ee:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 80020f6:	2346      	movs	r3, #70	; 0x46
 80020f8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f103 0018 	add.w	r0, r3, #24
 8002100:	f107 020f 	add.w	r2, r7, #15
 8002104:	2301      	movs	r3, #1
 8002106:	f245 1190 	movw	r1, #20880	; 0x5190
 800210a:	f000 ff8f 	bl	800302c <ov5640_write_reg>
 800210e:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10c      	bne.n	8002130 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 8002116:	23f8      	movs	r3, #248	; 0xf8
 8002118:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f103 0018 	add.w	r0, r3, #24
 8002120:	f107 020f 	add.w	r2, r7, #15
 8002124:	2301      	movs	r3, #1
 8002126:	f245 1191 	movw	r1, #20881	; 0x5191
 800212a:	f000 ff7f 	bl	800302c <ov5640_write_reg>
 800212e:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10c      	bne.n	8002150 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 8002136:	2304      	movs	r3, #4
 8002138:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f103 0018 	add.w	r0, r3, #24
 8002140:	f107 020f 	add.w	r2, r7, #15
 8002144:	2301      	movs	r3, #1
 8002146:	f245 1192 	movw	r1, #20882	; 0x5192
 800214a:	f000 ff6f 	bl	800302c <ov5640_write_reg>
 800214e:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 80db 	bne.w	800230e <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	3b01      	subs	r3, #1
 800215c:	2b07      	cmp	r3, #7
 800215e:	f200 80af 	bhi.w	80022c0 <OV5640_SetLightMode+0x1f4>
 8002162:	a201      	add	r2, pc, #4	; (adr r2, 8002168 <OV5640_SetLightMode+0x9c>)
 8002164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002168:	08002189 	.word	0x08002189
 800216c:	080021d7 	.word	0x080021d7
 8002170:	080022c1 	.word	0x080022c1
 8002174:	08002273 	.word	0x08002273
 8002178:	080022c1 	.word	0x080022c1
 800217c:	080022c1 	.word	0x080022c1
 8002180:	080022c1 	.word	0x080022c1
 8002184:	08002225 	.word	0x08002225
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	e01f      	b.n	80021ce <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002194:	d018      	beq.n	80021c8 <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8002196:	4a61      	ldr	r2, [pc, #388]	; (800231c <OV5640_SetLightMode+0x250>)
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	885b      	ldrh	r3, [r3, #2]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f103 0018 	add.w	r0, r3, #24
 80021aa:	4a5c      	ldr	r2, [pc, #368]	; (800231c <OV5640_SetLightMode+0x250>)
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80021b2:	f107 020f 	add.w	r2, r7, #15
 80021b6:	2301      	movs	r3, #1
 80021b8:	f000 ff38 	bl	800302c <ov5640_write_reg>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021c6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	3301      	adds	r3, #1
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b06      	cmp	r3, #6
 80021d2:	d9dc      	bls.n	800218e <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 80021d4:	e09c      	b.n	8002310 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	e01f      	b.n	800221c <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e2:	d018      	beq.n	8002216 <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80021e4:	4a4e      	ldr	r2, [pc, #312]	; (8002320 <OV5640_SetLightMode+0x254>)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	885b      	ldrh	r3, [r3, #2]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f103 0018 	add.w	r0, r3, #24
 80021f8:	4a49      	ldr	r2, [pc, #292]	; (8002320 <OV5640_SetLightMode+0x254>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002200:	f107 020f 	add.w	r2, r7, #15
 8002204:	2301      	movs	r3, #1
 8002206:	f000 ff11 	bl	800302c <ov5640_write_reg>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 8002210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002214:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	3301      	adds	r3, #1
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b06      	cmp	r3, #6
 8002220:	d9dc      	bls.n	80021dc <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 8002222:	e075      	b.n	8002310 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8002224:	2300      	movs	r3, #0
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	e01f      	b.n	800226a <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002230:	d018      	beq.n	8002264 <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8002232:	4a3c      	ldr	r2, [pc, #240]	; (8002324 <OV5640_SetLightMode+0x258>)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	885b      	ldrh	r3, [r3, #2]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f103 0018 	add.w	r0, r3, #24
 8002246:	4a37      	ldr	r2, [pc, #220]	; (8002324 <OV5640_SetLightMode+0x258>)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800224e:	f107 020f 	add.w	r2, r7, #15
 8002252:	2301      	movs	r3, #1
 8002254:	f000 feea 	bl	800302c <ov5640_write_reg>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 800225e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002262:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	3301      	adds	r3, #1
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	2b06      	cmp	r3, #6
 800226e:	d9dc      	bls.n	800222a <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 8002270:	e04e      	b.n	8002310 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	e01f      	b.n	80022b8 <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800227e:	d018      	beq.n	80022b2 <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8002280:	4a29      	ldr	r2, [pc, #164]	; (8002328 <OV5640_SetLightMode+0x25c>)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	885b      	ldrh	r3, [r3, #2]
 800228a:	b2db      	uxtb	r3, r3
 800228c:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f103 0018 	add.w	r0, r3, #24
 8002294:	4a24      	ldr	r2, [pc, #144]	; (8002328 <OV5640_SetLightMode+0x25c>)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800229c:	f107 020f 	add.w	r2, r7, #15
 80022a0:	2301      	movs	r3, #1
 80022a2:	f000 fec3 	bl	800302c <ov5640_write_reg>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 80022ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022b0:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	3301      	adds	r3, #1
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d9dc      	bls.n	8002278 <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 80022be:	e027      	b.n	8002310 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	e01f      	b.n	8002306 <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022cc:	d018      	beq.n	8002300 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <OV5640_SetLightMode+0x260>)
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	885b      	ldrh	r3, [r3, #2]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f103 0018 	add.w	r0, r3, #24
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <OV5640_SetLightMode+0x260>)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80022ea:	f107 020f 	add.w	r2, r7, #15
 80022ee:	2301      	movs	r3, #1
 80022f0:	f000 fe9c 	bl	800302c <ov5640_write_reg>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022fe:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	3301      	adds	r3, #1
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	2b06      	cmp	r3, #6
 800230a:	d9dc      	bls.n	80022c6 <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 800230c:	e000      	b.n	8002310 <OV5640_SetLightMode+0x244>
    }
  }
 800230e:	bf00      	nop
  return ret;
 8002310:	697b      	ldr	r3, [r7, #20]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	08010c20 	.word	0x08010c20
 8002320:	08010c3c 	.word	0x08010c3c
 8002324:	08010c58 	.word	0x08010c58
 8002328:	08010c74 	.word	0x08010c74
 800232c:	08010c90 	.word	0x08010c90

08002330 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	3b01      	subs	r3, #1
 800233e:	2b1f      	cmp	r3, #31
 8002340:	f200 81c0 	bhi.w	80026c4 <OV5640_SetColorEffect+0x394>
 8002344:	a201      	add	r2, pc, #4	; (adr r2, 800234c <OV5640_SetColorEffect+0x1c>)
 8002346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234a:	bf00      	nop
 800234c:	080023cd 	.word	0x080023cd
 8002350:	08002457 	.word	0x08002457
 8002354:	080026c5 	.word	0x080026c5
 8002358:	080024e1 	.word	0x080024e1
 800235c:	080026c5 	.word	0x080026c5
 8002360:	080026c5 	.word	0x080026c5
 8002364:	080026c5 	.word	0x080026c5
 8002368:	0800256b 	.word	0x0800256b
 800236c:	080026c5 	.word	0x080026c5
 8002370:	080026c5 	.word	0x080026c5
 8002374:	080026c5 	.word	0x080026c5
 8002378:	080026c5 	.word	0x080026c5
 800237c:	080026c5 	.word	0x080026c5
 8002380:	080026c5 	.word	0x080026c5
 8002384:	080026c5 	.word	0x080026c5
 8002388:	080025f5 	.word	0x080025f5
 800238c:	080026c5 	.word	0x080026c5
 8002390:	080026c5 	.word	0x080026c5
 8002394:	080026c5 	.word	0x080026c5
 8002398:	080026c5 	.word	0x080026c5
 800239c:	080026c5 	.word	0x080026c5
 80023a0:	080026c5 	.word	0x080026c5
 80023a4:	080026c5 	.word	0x080026c5
 80023a8:	080026c5 	.word	0x080026c5
 80023ac:	080026c5 	.word	0x080026c5
 80023b0:	080026c5 	.word	0x080026c5
 80023b4:	080026c5 	.word	0x080026c5
 80023b8:	080026c5 	.word	0x080026c5
 80023bc:	080026c5 	.word	0x080026c5
 80023c0:	080026c5 	.word	0x080026c5
 80023c4:	080026c5 	.word	0x080026c5
 80023c8:	0800267d 	.word	0x0800267d
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 80023cc:	23ff      	movs	r3, #255	; 0xff
 80023ce:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f103 0018 	add.w	r0, r3, #24
 80023d6:	f107 020b 	add.w	r2, r7, #11
 80023da:	2301      	movs	r3, #1
 80023dc:	f245 0101 	movw	r1, #20481	; 0x5001
 80023e0:	f000 fe24 	bl	800302c <ov5640_write_reg>
 80023e4:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10c      	bne.n	8002406 <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 80023ec:	2318      	movs	r3, #24
 80023ee:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f103 0018 	add.w	r0, r3, #24
 80023f6:	f107 020b 	add.w	r2, r7, #11
 80023fa:	2301      	movs	r3, #1
 80023fc:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002400:	f000 fe14 	bl	800302c <ov5640_write_reg>
 8002404:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10c      	bne.n	8002426 <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 800240c:	23a0      	movs	r3, #160	; 0xa0
 800240e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f103 0018 	add.w	r0, r3, #24
 8002416:	f107 020b 	add.w	r2, r7, #11
 800241a:	2301      	movs	r3, #1
 800241c:	f245 5183 	movw	r1, #21891	; 0x5583
 8002420:	f000 fe04 	bl	800302c <ov5640_write_reg>
 8002424:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10c      	bne.n	8002446 <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 800242c:	2340      	movs	r3, #64	; 0x40
 800242e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f103 0018 	add.w	r0, r3, #24
 8002436:	f107 020b 	add.w	r2, r7, #11
 800243a:	2301      	movs	r3, #1
 800243c:	f245 5184 	movw	r1, #21892	; 0x5584
 8002440:	f000 fdf4 	bl	800302c <ov5640_write_reg>
 8002444:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 815f 	beq.w	800270c <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002452:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002454:	e15a      	b.n	800270c <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 8002456:	23ff      	movs	r3, #255	; 0xff
 8002458:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f103 0018 	add.w	r0, r3, #24
 8002460:	f107 020b 	add.w	r2, r7, #11
 8002464:	2301      	movs	r3, #1
 8002466:	f245 0101 	movw	r1, #20481	; 0x5001
 800246a:	f000 fddf 	bl	800302c <ov5640_write_reg>
 800246e:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10c      	bne.n	8002490 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 8002476:	2318      	movs	r3, #24
 8002478:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f103 0018 	add.w	r0, r3, #24
 8002480:	f107 020b 	add.w	r2, r7, #11
 8002484:	2301      	movs	r3, #1
 8002486:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800248a:	f000 fdcf 	bl	800302c <ov5640_write_reg>
 800248e:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10c      	bne.n	80024b0 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f103 0018 	add.w	r0, r3, #24
 80024a0:	f107 020b 	add.w	r2, r7, #11
 80024a4:	2301      	movs	r3, #1
 80024a6:	f245 5183 	movw	r1, #21891	; 0x5583
 80024aa:	f000 fdbf 	bl	800302c <ov5640_write_reg>
 80024ae:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10c      	bne.n	80024d0 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 80024b6:	23c0      	movs	r3, #192	; 0xc0
 80024b8:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f103 0018 	add.w	r0, r3, #24
 80024c0:	f107 020b 	add.w	r2, r7, #11
 80024c4:	2301      	movs	r3, #1
 80024c6:	f245 5184 	movw	r1, #21892	; 0x5584
 80024ca:	f000 fdaf 	bl	800302c <ov5640_write_reg>
 80024ce:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 811c 	beq.w	8002710 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 80024d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024dc:	60fb      	str	r3, [r7, #12]
      }
      break;
 80024de:	e117      	b.n	8002710 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 80024e0:	23ff      	movs	r3, #255	; 0xff
 80024e2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f103 0018 	add.w	r0, r3, #24
 80024ea:	f107 020b 	add.w	r2, r7, #11
 80024ee:	2301      	movs	r3, #1
 80024f0:	f245 0101 	movw	r1, #20481	; 0x5001
 80024f4:	f000 fd9a 	bl	800302c <ov5640_write_reg>
 80024f8:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10c      	bne.n	800251a <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 8002500:	2318      	movs	r3, #24
 8002502:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f103 0018 	add.w	r0, r3, #24
 800250a:	f107 020b 	add.w	r2, r7, #11
 800250e:	2301      	movs	r3, #1
 8002510:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002514:	f000 fd8a 	bl	800302c <ov5640_write_reg>
 8002518:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10c      	bne.n	800253a <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 8002520:	2360      	movs	r3, #96	; 0x60
 8002522:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f103 0018 	add.w	r0, r3, #24
 800252a:	f107 020b 	add.w	r2, r7, #11
 800252e:	2301      	movs	r3, #1
 8002530:	f245 5183 	movw	r1, #21891	; 0x5583
 8002534:	f000 fd7a 	bl	800302c <ov5640_write_reg>
 8002538:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10c      	bne.n	800255a <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 8002540:	2360      	movs	r3, #96	; 0x60
 8002542:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f103 0018 	add.w	r0, r3, #24
 800254a:	f107 020b 	add.w	r2, r7, #11
 800254e:	2301      	movs	r3, #1
 8002550:	f245 5184 	movw	r1, #21892	; 0x5584
 8002554:	f000 fd6a 	bl	800302c <ov5640_write_reg>
 8002558:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 80d9 	beq.w	8002714 <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 8002562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002566:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002568:	e0d4      	b.n	8002714 <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 800256a:	23ff      	movs	r3, #255	; 0xff
 800256c:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f103 0018 	add.w	r0, r3, #24
 8002574:	f107 020b 	add.w	r2, r7, #11
 8002578:	2301      	movs	r3, #1
 800257a:	f245 0101 	movw	r1, #20481	; 0x5001
 800257e:	f000 fd55 	bl	800302c <ov5640_write_reg>
 8002582:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10c      	bne.n	80025a4 <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 800258a:	2318      	movs	r3, #24
 800258c:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f103 0018 	add.w	r0, r3, #24
 8002594:	f107 020b 	add.w	r2, r7, #11
 8002598:	2301      	movs	r3, #1
 800259a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800259e:	f000 fd45 	bl	800302c <ov5640_write_reg>
 80025a2:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10c      	bne.n	80025c4 <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f103 0018 	add.w	r0, r3, #24
 80025b4:	f107 020b 	add.w	r2, r7, #11
 80025b8:	2301      	movs	r3, #1
 80025ba:	f245 5183 	movw	r1, #21891	; 0x5583
 80025be:	f000 fd35 	bl	800302c <ov5640_write_reg>
 80025c2:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10c      	bne.n	80025e4 <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f103 0018 	add.w	r0, r3, #24
 80025d4:	f107 020b 	add.w	r2, r7, #11
 80025d8:	2301      	movs	r3, #1
 80025da:	f245 5184 	movw	r1, #21892	; 0x5584
 80025de:	f000 fd25 	bl	800302c <ov5640_write_reg>
 80025e2:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8096 	beq.w	8002718 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 80025ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025f0:	60fb      	str	r3, [r7, #12]
      }
      break;
 80025f2:	e091      	b.n	8002718 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 80025f4:	23ff      	movs	r3, #255	; 0xff
 80025f6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f103 0018 	add.w	r0, r3, #24
 80025fe:	f107 020b 	add.w	r2, r7, #11
 8002602:	2301      	movs	r3, #1
 8002604:	f245 0101 	movw	r1, #20481	; 0x5001
 8002608:	f000 fd10 	bl	800302c <ov5640_write_reg>
 800260c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10c      	bne.n	800262e <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 8002614:	2318      	movs	r3, #24
 8002616:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f103 0018 	add.w	r0, r3, #24
 800261e:	f107 020b 	add.w	r2, r7, #11
 8002622:	2301      	movs	r3, #1
 8002624:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002628:	f000 fd00 	bl	800302c <ov5640_write_reg>
 800262c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10c      	bne.n	800264e <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 8002634:	2340      	movs	r3, #64	; 0x40
 8002636:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f103 0018 	add.w	r0, r3, #24
 800263e:	f107 020b 	add.w	r2, r7, #11
 8002642:	2301      	movs	r3, #1
 8002644:	f245 5183 	movw	r1, #21891	; 0x5583
 8002648:	f000 fcf0 	bl	800302c <ov5640_write_reg>
 800264c:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10c      	bne.n	800266e <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 8002654:	23a0      	movs	r3, #160	; 0xa0
 8002656:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f103 0018 	add.w	r0, r3, #24
 800265e:	f107 020b 	add.w	r2, r7, #11
 8002662:	2301      	movs	r3, #1
 8002664:	f245 5184 	movw	r1, #21892	; 0x5584
 8002668:	f000 fce0 	bl	800302c <ov5640_write_reg>
 800266c:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d053      	beq.n	800271c <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 8002674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002678:	60fb      	str	r3, [r7, #12]
      }
      break;
 800267a:	e04f      	b.n	800271c <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 800267c:	23ff      	movs	r3, #255	; 0xff
 800267e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f103 0018 	add.w	r0, r3, #24
 8002686:	f107 020b 	add.w	r2, r7, #11
 800268a:	2301      	movs	r3, #1
 800268c:	f245 0101 	movw	r1, #20481	; 0x5001
 8002690:	f000 fccc 	bl	800302c <ov5640_write_reg>
 8002694:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10c      	bne.n	80026b6 <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 800269c:	2340      	movs	r3, #64	; 0x40
 800269e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f103 0018 	add.w	r0, r3, #24
 80026a6:	f107 020b 	add.w	r2, r7, #11
 80026aa:	2301      	movs	r3, #1
 80026ac:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80026b0:	f000 fcbc 	bl	800302c <ov5640_write_reg>
 80026b4:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d031      	beq.n	8002720 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 80026bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026c0:	60fb      	str	r3, [r7, #12]
      }
      break;
 80026c2:	e02d      	b.n	8002720 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 80026c4:	237f      	movs	r3, #127	; 0x7f
 80026c6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f103 0018 	add.w	r0, r3, #24
 80026ce:	f107 020b 	add.w	r2, r7, #11
 80026d2:	2301      	movs	r3, #1
 80026d4:	f245 0101 	movw	r1, #20481	; 0x5001
 80026d8:	f000 fca8 	bl	800302c <ov5640_write_reg>
 80026dc:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10c      	bne.n	80026fe <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 80026e4:	2300      	movs	r3, #0
 80026e6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f103 0018 	add.w	r0, r3, #24
 80026ee:	f107 020b 	add.w	r2, r7, #11
 80026f2:	2301      	movs	r3, #1
 80026f4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80026f8:	f000 fc98 	bl	800302c <ov5640_write_reg>
 80026fc:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00f      	beq.n	8002724 <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 8002704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002708:	60fb      	str	r3, [r7, #12]
      }

      break;
 800270a:	e00b      	b.n	8002724 <OV5640_SetColorEffect+0x3f4>
      break;
 800270c:	bf00      	nop
 800270e:	e00a      	b.n	8002726 <OV5640_SetColorEffect+0x3f6>
      break;
 8002710:	bf00      	nop
 8002712:	e008      	b.n	8002726 <OV5640_SetColorEffect+0x3f6>
      break;
 8002714:	bf00      	nop
 8002716:	e006      	b.n	8002726 <OV5640_SetColorEffect+0x3f6>
      break;
 8002718:	bf00      	nop
 800271a:	e004      	b.n	8002726 <OV5640_SetColorEffect+0x3f6>
      break;
 800271c:	bf00      	nop
 800271e:	e002      	b.n	8002726 <OV5640_SetColorEffect+0x3f6>
      break;
 8002720:	bf00      	nop
 8002722:	e000      	b.n	8002726 <OV5640_SetColorEffect+0x3f6>
      break;
 8002724:	bf00      	nop
  }

  return ret;
 8002726:	68fb      	ldr	r3, [r7, #12]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 800273a:	4a34      	ldr	r2, [pc, #208]	; (800280c <OV5640_SetBrightness+0xdc>)
 800273c:	f107 0310 	add.w	r3, r7, #16
 8002740:	ca07      	ldmia	r2, {r0, r1, r2}
 8002742:	c303      	stmia	r3!, {r0, r1}
 8002744:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002746:	23ff      	movs	r3, #255	; 0xff
 8002748:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f103 0018 	add.w	r0, r3, #24
 8002750:	f107 020f 	add.w	r2, r7, #15
 8002754:	2301      	movs	r3, #1
 8002756:	f245 0101 	movw	r1, #20481	; 0x5001
 800275a:	f000 fc67 	bl	800302c <ov5640_write_reg>
 800275e:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d111      	bne.n	800278a <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	3304      	adds	r3, #4
 800276a:	3320      	adds	r3, #32
 800276c:	443b      	add	r3, r7
 800276e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002772:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f103 0018 	add.w	r0, r3, #24
 800277a:	f107 020f 	add.w	r2, r7, #15
 800277e:	2301      	movs	r3, #1
 8002780:	f245 5187 	movw	r1, #21895	; 0x5587
 8002784:	f000 fc52 	bl	800302c <ov5640_write_reg>
 8002788:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10c      	bne.n	80027aa <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 8002790:	2304      	movs	r3, #4
 8002792:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f103 0018 	add.w	r0, r3, #24
 800279a:	f107 020f 	add.w	r2, r7, #15
 800279e:	2301      	movs	r3, #1
 80027a0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80027a4:	f000 fc42 	bl	800302c <ov5640_write_reg>
 80027a8:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d127      	bne.n	8002800 <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da12      	bge.n	80027dc <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f103 0018 	add.w	r0, r3, #24
 80027c0:	f107 020f 	add.w	r2, r7, #15
 80027c4:	2301      	movs	r3, #1
 80027c6:	f245 5188 	movw	r1, #21896	; 0x5588
 80027ca:	f000 fc2f 	bl	800302c <ov5640_write_reg>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d015      	beq.n	8002800 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 80027d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	e011      	b.n	8002800 <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 80027dc:	2309      	movs	r3, #9
 80027de:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f103 0018 	add.w	r0, r3, #24
 80027e6:	f107 020f 	add.w	r2, r7, #15
 80027ea:	2301      	movs	r3, #1
 80027ec:	f245 5188 	movw	r1, #21896	; 0x5588
 80027f0:	f000 fc1c 	bl	800302c <ov5640_write_reg>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027fe:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 8002800:	69fb      	ldr	r3, [r7, #28]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3720      	adds	r7, #32
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	08010768 	.word	0x08010768

08002810 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 800281a:	4a30      	ldr	r2, [pc, #192]	; (80028dc <OV5640_SetSaturation+0xcc>)
 800281c:	f107 0310 	add.w	r3, r7, #16
 8002820:	ca07      	ldmia	r2, {r0, r1, r2}
 8002822:	c303      	stmia	r3!, {r0, r1}
 8002824:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002826:	23ff      	movs	r3, #255	; 0xff
 8002828:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f103 0018 	add.w	r0, r3, #24
 8002830:	f107 020f 	add.w	r2, r7, #15
 8002834:	2301      	movs	r3, #1
 8002836:	f245 0101 	movw	r1, #20481	; 0x5001
 800283a:	f000 fbf7 	bl	800302c <ov5640_write_reg>
 800283e:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d111      	bne.n	800286a <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	3304      	adds	r3, #4
 800284a:	3320      	adds	r3, #32
 800284c:	443b      	add	r3, r7
 800284e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002852:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f103 0018 	add.w	r0, r3, #24
 800285a:	f107 020f 	add.w	r2, r7, #15
 800285e:	2301      	movs	r3, #1
 8002860:	f245 5183 	movw	r1, #21891	; 0x5583
 8002864:	f000 fbe2 	bl	800302c <ov5640_write_reg>
 8002868:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10a      	bne.n	8002886 <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f103 0018 	add.w	r0, r3, #24
 8002876:	f107 020f 	add.w	r2, r7, #15
 800287a:	2301      	movs	r3, #1
 800287c:	f245 5184 	movw	r1, #21892	; 0x5584
 8002880:	f000 fbd4 	bl	800302c <ov5640_write_reg>
 8002884:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10c      	bne.n	80028a6 <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 800288c:	2302      	movs	r3, #2
 800288e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f103 0018 	add.w	r0, r3, #24
 8002896:	f107 020f 	add.w	r2, r7, #15
 800289a:	2301      	movs	r3, #1
 800289c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80028a0:	f000 fbc4 	bl	800302c <ov5640_write_reg>
 80028a4:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10c      	bne.n	80028c6 <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 80028ac:	2341      	movs	r3, #65	; 0x41
 80028ae:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f103 0018 	add.w	r0, r3, #24
 80028b6:	f107 020f 	add.w	r2, r7, #15
 80028ba:	2301      	movs	r3, #1
 80028bc:	f245 5188 	movw	r1, #21896	; 0x5588
 80028c0:	f000 fbb4 	bl	800302c <ov5640_write_reg>
 80028c4:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 80028cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028d0:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80028d2:	69fb      	ldr	r3, [r7, #28]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3720      	adds	r7, #32
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	08010774 	.word	0x08010774

080028e0 <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 80028ea:	4a30      	ldr	r2, [pc, #192]	; (80029ac <OV5640_SetContrast+0xcc>)
 80028ec:	f107 0310 	add.w	r3, r7, #16
 80028f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80028f2:	c303      	stmia	r3!, {r0, r1}
 80028f4:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80028f6:	23ff      	movs	r3, #255	; 0xff
 80028f8:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f103 0018 	add.w	r0, r3, #24
 8002900:	f107 020f 	add.w	r2, r7, #15
 8002904:	2301      	movs	r3, #1
 8002906:	f245 0101 	movw	r1, #20481	; 0x5001
 800290a:	f000 fb8f 	bl	800302c <ov5640_write_reg>
 800290e:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10c      	bne.n	8002930 <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 8002916:	2304      	movs	r3, #4
 8002918:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f103 0018 	add.w	r0, r3, #24
 8002920:	f107 020f 	add.w	r2, r7, #15
 8002924:	2301      	movs	r3, #1
 8002926:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800292a:	f000 fb7f 	bl	800302c <ov5640_write_reg>
 800292e:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d111      	bne.n	800295a <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	3304      	adds	r3, #4
 800293a:	3320      	adds	r3, #32
 800293c:	443b      	add	r3, r7
 800293e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002942:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f103 0018 	add.w	r0, r3, #24
 800294a:	f107 020f 	add.w	r2, r7, #15
 800294e:	2301      	movs	r3, #1
 8002950:	f245 5186 	movw	r1, #21894	; 0x5586
 8002954:	f000 fb6a 	bl	800302c <ov5640_write_reg>
 8002958:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f103 0018 	add.w	r0, r3, #24
 8002966:	f107 020f 	add.w	r2, r7, #15
 800296a:	2301      	movs	r3, #1
 800296c:	f245 5185 	movw	r1, #21893	; 0x5585
 8002970:	f000 fb5c 	bl	800302c <ov5640_write_reg>
 8002974:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10c      	bne.n	8002996 <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 800297c:	2341      	movs	r3, #65	; 0x41
 800297e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f103 0018 	add.w	r0, r3, #24
 8002986:	f107 020f 	add.w	r2, r7, #15
 800298a:	2301      	movs	r3, #1
 800298c:	f245 5188 	movw	r1, #21896	; 0x5588
 8002990:	f000 fb4c 	bl	800302c <ov5640_write_reg>
 8002994:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 800299c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029a0:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80029a2:	69fb      	ldr	r3, [r7, #28]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3720      	adds	r7, #32
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	08010780 	.word	0x08010780

080029b0 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08e      	sub	sp, #56	; 0x38
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 80029ba:	4a3c      	ldr	r2, [pc, #240]	; (8002aac <OV5640_SetHueDegree+0xfc>)
 80029bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80029c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 80029c6:	4a3a      	ldr	r2, [pc, #232]	; (8002ab0 <OV5640_SetHueDegree+0x100>)
 80029c8:	f107 031c 	add.w	r3, r7, #28
 80029cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80029ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 80029d2:	4a38      	ldr	r2, [pc, #224]	; (8002ab4 <OV5640_SetHueDegree+0x104>)
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80029da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 80029de:	23ff      	movs	r3, #255	; 0xff
 80029e0:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f103 0018 	add.w	r0, r3, #24
 80029e8:	f107 020f 	add.w	r2, r7, #15
 80029ec:	2301      	movs	r3, #1
 80029ee:	f245 0101 	movw	r1, #20481	; 0x5001
 80029f2:	f000 fb1b 	bl	800302c <ov5640_write_reg>
 80029f6:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 80029f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10c      	bne.n	8002a18 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f103 0018 	add.w	r0, r3, #24
 8002a08:	f107 020f 	add.w	r2, r7, #15
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002a12:	f000 fb0b 	bl	800302c <ov5640_write_reg>
 8002a16:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d111      	bne.n	8002a42 <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	3306      	adds	r3, #6
 8002a22:	3338      	adds	r3, #56	; 0x38
 8002a24:	443b      	add	r3, r7
 8002a26:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002a2a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f103 0018 	add.w	r0, r3, #24
 8002a32:	f107 020f 	add.w	r2, r7, #15
 8002a36:	2301      	movs	r3, #1
 8002a38:	f245 5181 	movw	r1, #21889	; 0x5581
 8002a3c:	f000 faf6 	bl	800302c <ov5640_write_reg>
 8002a40:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d111      	bne.n	8002a6c <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	3306      	adds	r3, #6
 8002a4c:	3338      	adds	r3, #56	; 0x38
 8002a4e:	443b      	add	r3, r7
 8002a50:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8002a54:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f103 0018 	add.w	r0, r3, #24
 8002a5c:	f107 020f 	add.w	r2, r7, #15
 8002a60:	2301      	movs	r3, #1
 8002a62:	f245 5182 	movw	r1, #21890	; 0x5582
 8002a66:	f000 fae1 	bl	800302c <ov5640_write_reg>
 8002a6a:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d111      	bne.n	8002a96 <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	3306      	adds	r3, #6
 8002a76:	3338      	adds	r3, #56	; 0x38
 8002a78:	443b      	add	r3, r7
 8002a7a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a7e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f103 0018 	add.w	r0, r3, #24
 8002a86:	f107 020f 	add.w	r2, r7, #15
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	f245 5188 	movw	r1, #21896	; 0x5588
 8002a90:	f000 facc 	bl	800302c <ov5640_write_reg>
 8002a94:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 8002a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 8002a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 8002aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3738      	adds	r7, #56	; 0x38
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	0801078c 	.word	0x0801078c
 8002ab0:	08010798 	.word	0x08010798
 8002ab4:	080107a4 	.word	0x080107a4

08002ab8 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f103 0018 	add.w	r0, r3, #24
 8002acc:	f107 020b 	add.w	r2, r7, #11
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	f643 0120 	movw	r1, #14368	; 0x3820
 8002ad6:	f000 fa92 	bl	8002ffe <ov5640_read_reg>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8002ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	e0cb      	b.n	8002c80 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 8002ae8:	7afb      	ldrb	r3, [r7, #11]
 8002aea:	f023 0306 	bic.w	r3, r3, #6
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f103 0018 	add.w	r0, r3, #24
 8002af8:	f107 020a 	add.w	r2, r7, #10
 8002afc:	2301      	movs	r3, #1
 8002afe:	f643 0121 	movw	r1, #14369	; 0x3821
 8002b02:	f000 fa7c 	bl	8002ffe <ov5640_read_reg>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 8002b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	e0b5      	b.n	8002c80 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 8002b18:	7abb      	ldrb	r3, [r7, #10]
 8002b1a:	f023 0306 	bic.w	r3, r3, #6
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d056      	beq.n	8002bd6 <OV5640_MirrorFlipConfig+0x11e>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d87f      	bhi.n	8002c2e <OV5640_MirrorFlipConfig+0x176>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d029      	beq.n	8002b88 <OV5640_MirrorFlipConfig+0xd0>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d179      	bne.n	8002c2e <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f103 0018 	add.w	r0, r3, #24
 8002b40:	f107 020b 	add.w	r2, r7, #11
 8002b44:	2301      	movs	r3, #1
 8002b46:	f643 0120 	movw	r1, #14368	; 0x3820
 8002b4a:	f000 fa6f 	bl	800302c <ov5640_write_reg>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 8002b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b58:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002b5a:	e08a      	b.n	8002c72 <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8002b5c:	7abb      	ldrb	r3, [r7, #10]
 8002b5e:	f043 0306 	orr.w	r3, r3, #6
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f103 0018 	add.w	r0, r3, #24
 8002b6c:	f107 020a 	add.w	r2, r7, #10
 8002b70:	2301      	movs	r3, #1
 8002b72:	f643 0121 	movw	r1, #14369	; 0x3821
 8002b76:	f000 fa59 	bl	800302c <ov5640_write_reg>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d078      	beq.n	8002c72 <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8002b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b84:	60fb      	str	r3, [r7, #12]
          break;
 8002b86:	e074      	b.n	8002c72 <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8002b88:	7afb      	ldrb	r3, [r7, #11]
 8002b8a:	f043 0306 	orr.w	r3, r3, #6
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f103 0018 	add.w	r0, r3, #24
 8002b98:	f107 020b 	add.w	r2, r7, #11
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f643 0120 	movw	r1, #14368	; 0x3820
 8002ba2:	f000 fa43 	bl	800302c <ov5640_write_reg>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bb0:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002bb2:	e060      	b.n	8002c76 <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f103 0018 	add.w	r0, r3, #24
 8002bba:	f107 020a 	add.w	r2, r7, #10
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	f643 0121 	movw	r1, #14369	; 0x3821
 8002bc4:	f000 fa32 	bl	800302c <ov5640_write_reg>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d053      	beq.n	8002c76 <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bd2:	60fb      	str	r3, [r7, #12]
          break;
 8002bd4:	e04f      	b.n	8002c76 <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 8002bd6:	7afb      	ldrb	r3, [r7, #11]
 8002bd8:	f043 0306 	orr.w	r3, r3, #6
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f103 0018 	add.w	r0, r3, #24
 8002be6:	f107 020b 	add.w	r2, r7, #11
 8002bea:	2301      	movs	r3, #1
 8002bec:	f643 0120 	movw	r1, #14368	; 0x3820
 8002bf0:	f000 fa1c 	bl	800302c <ov5640_write_reg>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bfe:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002c00:	e03b      	b.n	8002c7a <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 8002c02:	7abb      	ldrb	r3, [r7, #10]
 8002c04:	f043 0306 	orr.w	r3, r3, #6
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f103 0018 	add.w	r0, r3, #24
 8002c12:	f107 020a 	add.w	r2, r7, #10
 8002c16:	2301      	movs	r3, #1
 8002c18:	f643 0121 	movw	r1, #14369	; 0x3821
 8002c1c:	f000 fa06 	bl	800302c <ov5640_write_reg>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d029      	beq.n	8002c7a <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c2a:	60fb      	str	r3, [r7, #12]
          break;
 8002c2c:	e025      	b.n	8002c7a <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f103 0018 	add.w	r0, r3, #24
 8002c34:	f107 020b 	add.w	r2, r7, #11
 8002c38:	2301      	movs	r3, #1
 8002c3a:	f643 0120 	movw	r1, #14368	; 0x3820
 8002c3e:	f000 f9f5 	bl	800302c <ov5640_write_reg>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c4c:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002c4e:	e016      	b.n	8002c7e <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f103 0018 	add.w	r0, r3, #24
 8002c56:	f107 020a 	add.w	r2, r7, #10
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f643 0121 	movw	r1, #14369	; 0x3821
 8002c60:	f000 f9e4 	bl	800302c <ov5640_write_reg>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 8002c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c6e:	60fb      	str	r3, [r7, #12]
          break;
 8002c70:	e005      	b.n	8002c7e <OV5640_MirrorFlipConfig+0x1c6>
          break;
 8002c72:	bf00      	nop
 8002c74:	e004      	b.n	8002c80 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002c76:	bf00      	nop
 8002c78:	e002      	b.n	8002c80 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002c7a:	bf00      	nop
 8002c7c:	e000      	b.n	8002c80 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002c7e:	bf00      	nop
      }
    }
  }

  return ret;
 8002c80:	68fb      	ldr	r3, [r7, #12]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b086      	sub	sp, #24
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8002c98:	f107 030c 	add.w	r3, r7, #12
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff f8a2 	bl	8001de8 <OV5640_GetResolution>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	e04e      	b.n	8002d50 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b44      	cmp	r3, #68	; 0x44
 8002cba:	d112      	bne.n	8002ce2 <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f103 0018 	add.w	r0, r3, #24
 8002cc6:	f107 020b 	add.w	r2, r7, #11
 8002cca:	2301      	movs	r3, #1
 8002ccc:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002cd0:	f000 f9ac 	bl	800302c <ov5640_write_reg>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d03a      	beq.n	8002d50 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 8002cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	e036      	b.n	8002d50 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d802      	bhi.n	8002cee <OV5640_ZoomConfig+0x64>
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d103      	bne.n	8002cf4 <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8002cec:	e00a      	b.n	8002d04 <OV5640_ZoomConfig+0x7a>
      switch (res)
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d004      	beq.n	8002cfc <OV5640_ZoomConfig+0x72>
          break;
 8002cf2:	e007      	b.n	8002d04 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	085b      	lsrs	r3, r3, #1
 8002cf8:	613b      	str	r3, [r7, #16]
          break;
 8002cfa:	e003      	b.n	8002d04 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	089b      	lsrs	r3, r3, #2
 8002d00:	613b      	str	r3, [r7, #16]
          break;
 8002d02:	bf00      	nop
      }

      tmp = 0x00;
 8002d04:	2300      	movs	r3, #0
 8002d06:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f103 0018 	add.w	r0, r3, #24
 8002d0e:	f107 020b 	add.w	r2, r7, #11
 8002d12:	2301      	movs	r3, #1
 8002d14:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002d18:	f000 f988 	bl	800302c <ov5640_write_reg>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	e012      	b.n	8002d50 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f103 0018 	add.w	r0, r3, #24
 8002d36:	f107 020b 	add.w	r2, r7, #11
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f245 6101 	movw	r1, #22017	; 0x5601
 8002d40:	f000 f974 	bl	800302c <ov5640_write_reg>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d4e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002d50:	697b      	ldr	r3, [r7, #20]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	f040 80ce 	bne.w	8002f0c <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f103 0018 	add.w	r0, r3, #24
 8002d76:	f107 020b 	add.w	r2, r7, #11
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f243 0138 	movw	r1, #12344	; 0x3038
 8002d80:	f000 f954 	bl	800302c <ov5640_write_reg>
 8002d84:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f103 0018 	add.w	r0, r3, #24
 8002d92:	f107 020b 	add.w	r2, r7, #11
 8002d96:	2301      	movs	r3, #1
 8002d98:	f243 0139 	movw	r1, #12345	; 0x3039
 8002d9c:	f000 f946 	bl	800302c <ov5640_write_reg>
 8002da0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10c      	bne.n	8002dc2 <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 8002da8:	237c      	movs	r3, #124	; 0x7c
 8002daa:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f103 0018 	add.w	r0, r3, #24
 8002db2:	f107 020b 	add.w	r2, r7, #11
 8002db6:	2301      	movs	r3, #1
 8002db8:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002dbc:	f000 f936 	bl	800302c <ov5640_write_reg>
 8002dc0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10c      	bne.n	8002de2 <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f103 0018 	add.w	r0, r3, #24
 8002dd2:	f107 020b 	add.w	r2, r7, #11
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f643 2108 	movw	r1, #14856	; 0x3a08
 8002ddc:	f000 f926 	bl	800302c <ov5640_write_reg>
 8002de0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10c      	bne.n	8002e02 <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 8002de8:	2327      	movs	r3, #39	; 0x27
 8002dea:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f103 0018 	add.w	r0, r3, #24
 8002df2:	f107 020b 	add.w	r2, r7, #11
 8002df6:	2301      	movs	r3, #1
 8002df8:	f643 2109 	movw	r1, #14857	; 0x3a09
 8002dfc:	f000 f916 	bl	800302c <ov5640_write_reg>
 8002e00:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10c      	bne.n	8002e22 <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f103 0018 	add.w	r0, r3, #24
 8002e12:	f107 020b 	add.w	r2, r7, #11
 8002e16:	2301      	movs	r3, #1
 8002e18:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8002e1c:	f000 f906 	bl	800302c <ov5640_write_reg>
 8002e20:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10c      	bne.n	8002e42 <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 8002e28:	23f6      	movs	r3, #246	; 0xf6
 8002e2a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f103 0018 	add.w	r0, r3, #24
 8002e32:	f107 020b 	add.w	r2, r7, #11
 8002e36:	2301      	movs	r3, #1
 8002e38:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8002e3c:	f000 f8f6 	bl	800302c <ov5640_write_reg>
 8002e40:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10c      	bne.n	8002e62 <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 8002e48:	2304      	movs	r3, #4
 8002e4a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f103 0018 	add.w	r0, r3, #24
 8002e52:	f107 020b 	add.w	r2, r7, #11
 8002e56:	2301      	movs	r3, #1
 8002e58:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8002e5c:	f000 f8e6 	bl	800302c <ov5640_write_reg>
 8002e60:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10a      	bne.n	8002e7e <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f103 0018 	add.w	r0, r3, #24
 8002e6e:	f107 020b 	add.w	r2, r7, #11
 8002e72:	2301      	movs	r3, #1
 8002e74:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8002e78:	f000 f8d8 	bl	800302c <ov5640_write_reg>
 8002e7c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10c      	bne.n	8002e9e <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 8002e84:	230b      	movs	r3, #11
 8002e86:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f103 0018 	add.w	r0, r3, #24
 8002e8e:	f107 020b 	add.w	r2, r7, #11
 8002e92:	2301      	movs	r3, #1
 8002e94:	f643 2102 	movw	r1, #14850	; 0x3a02
 8002e98:	f000 f8c8 	bl	800302c <ov5640_write_reg>
 8002e9c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10c      	bne.n	8002ebe <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 8002ea4:	2388      	movs	r3, #136	; 0x88
 8002ea6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f103 0018 	add.w	r0, r3, #24
 8002eae:	f107 020b 	add.w	r2, r7, #11
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f643 2103 	movw	r1, #14851	; 0x3a03
 8002eb8:	f000 f8b8 	bl	800302c <ov5640_write_reg>
 8002ebc:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10c      	bne.n	8002ede <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 8002ec4:	230b      	movs	r3, #11
 8002ec6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f103 0018 	add.w	r0, r3, #24
 8002ece:	f107 020b 	add.w	r2, r7, #11
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	f643 2114 	movw	r1, #14868	; 0x3a14
 8002ed8:	f000 f8a8 	bl	800302c <ov5640_write_reg>
 8002edc:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10c      	bne.n	8002efe <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 8002ee4:	2388      	movs	r3, #136	; 0x88
 8002ee6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f103 0018 	add.w	r0, r3, #24
 8002eee:	f107 020b 	add.w	r2, r7, #11
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f643 2115 	movw	r1, #14869	; 0x3a15
 8002ef8:	f000 f898 	bl	800302c <ov5640_write_reg>
 8002efc:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d02b      	beq.n	8002f5c <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 8002f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	e027      	b.n	8002f5c <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f103 0018 	add.w	r0, r3, #24
 8002f12:	f107 020b 	add.w	r2, r7, #11
 8002f16:	2301      	movs	r3, #1
 8002f18:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002f1c:	f000 f86f 	bl	8002ffe <ov5640_read_reg>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 8002f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	e016      	b.n	8002f5c <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 8002f32:	7afb      	ldrb	r3, [r7, #11]
 8002f34:	f023 0304 	bic.w	r3, r3, #4
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f103 0018 	add.w	r0, r3, #24
 8002f42:	f107 020b 	add.w	r2, r7, #11
 8002f46:	2301      	movs	r3, #1
 8002f48:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002f4c:	f000 f86e 	bl	800302c <ov5640_write_reg>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 8002f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f5a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	4798      	blx	r3
 8002f76:	4603      	mov	r3, r0
 8002f78:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8002f7a:	bf00      	nop
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	4798      	blx	r3
 8002f82:	4603      	mov	r3, r0
 8002f84:	461a      	mov	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d8f5      	bhi.n	8002f7c <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002f9a:	b590      	push	{r4, r7, lr}
 8002f9c:	b087      	sub	sp, #28
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	817b      	strh	r3, [r7, #10]
 8002faa:	4613      	mov	r3, r2
 8002fac:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	691c      	ldr	r4, [r3, #16]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	8918      	ldrh	r0, [r3, #8]
 8002fba:	893b      	ldrh	r3, [r7, #8]
 8002fbc:	8979      	ldrh	r1, [r7, #10]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	47a0      	blx	r4
 8002fc2:	4603      	mov	r3, r0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd90      	pop	{r4, r7, pc}

08002fcc <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002fcc:	b590      	push	{r4, r7, lr}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	460b      	mov	r3, r1
 8002fda:	817b      	strh	r3, [r7, #10]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	68dc      	ldr	r4, [r3, #12]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	8918      	ldrh	r0, [r3, #8]
 8002fec:	893b      	ldrh	r3, [r7, #8]
 8002fee:	8979      	ldrh	r1, [r7, #10]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	47a0      	blx	r4
 8002ff4:	4603      	mov	r3, r0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	371c      	adds	r7, #28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd90      	pop	{r4, r7, pc}

08002ffe <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8002ffe:	b590      	push	{r4, r7, lr}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	461a      	mov	r2, r3
 800300a:	460b      	mov	r3, r1
 800300c:	817b      	strh	r3, [r7, #10]
 800300e:	4613      	mov	r3, r2
 8003010:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	685c      	ldr	r4, [r3, #4]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6898      	ldr	r0, [r3, #8]
 800301a:	893b      	ldrh	r3, [r7, #8]
 800301c:	8979      	ldrh	r1, [r7, #10]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	47a0      	blx	r4
 8003022:	4603      	mov	r3, r0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	bd90      	pop	{r4, r7, pc}

0800302c <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	461a      	mov	r2, r3
 8003038:	460b      	mov	r3, r1
 800303a:	817b      	strh	r3, [r7, #10]
 800303c:	4613      	mov	r3, r2
 800303e:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681c      	ldr	r4, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6898      	ldr	r0, [r3, #8]
 8003048:	893b      	ldrh	r3, [r7, #8]
 800304a:	8979      	ldrh	r1, [r7, #10]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	47a0      	blx	r4
 8003050:	4603      	mov	r3, r0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	bd90      	pop	{r4, r7, pc}
	...

0800305c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003064:	4a07      	ldr	r2, [pc, #28]	; (8003084 <RetargetInit+0x28>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <RetargetInit+0x2c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6898      	ldr	r0, [r3, #8]
 8003070:	2300      	movs	r3, #0
 8003072:	2202      	movs	r2, #2
 8003074:	2100      	movs	r1, #0
 8003076:	f00c fb01 	bl	800f67c <setvbuf>
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	240df4e8 	.word	0x240df4e8
 8003088:	24000054 	.word	0x24000054

0800308c <_isatty>:

int _isatty(int fd) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	db04      	blt.n	80030a4 <_isatty+0x18>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b02      	cmp	r3, #2
 800309e:	dc01      	bgt.n	80030a4 <_isatty+0x18>
    return 1;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e005      	b.n	80030b0 <_isatty+0x24>

  errno = EBADF;
 80030a4:	f00c fa92 	bl	800f5cc <__errno>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2209      	movs	r2, #9
 80030ac:	601a      	str	r2, [r3, #0]
  return 0;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <_write>:

int _write(int fd, char* ptr, int len) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d002      	beq.n	80030d0 <_write+0x18>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d111      	bne.n	80030f4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80030d0:	4b0e      	ldr	r3, [pc, #56]	; (800310c <_write+0x54>)
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	f00a fa5a 	bl	800d596 <HAL_UART_Transmit>
 80030e2:	4603      	mov	r3, r0
 80030e4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <_write+0x38>
      return len;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	e008      	b.n	8003102 <_write+0x4a>
    else
      return EIO;
 80030f0:	2305      	movs	r3, #5
 80030f2:	e006      	b.n	8003102 <_write+0x4a>
  }
  errno = EBADF;
 80030f4:	f00c fa6a 	bl	800f5cc <__errno>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2209      	movs	r2, #9
 80030fc:	601a      	str	r2, [r3, #0]
  return -1;
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	240df4e8 	.word	0x240df4e8

08003110 <_close>:

int _close(int fd) {
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	db04      	blt.n	8003128 <_close+0x18>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b02      	cmp	r3, #2
 8003122:	dc01      	bgt.n	8003128 <_close+0x18>
    return 0;
 8003124:	2300      	movs	r3, #0
 8003126:	e006      	b.n	8003136 <_close+0x26>

  errno = EBADF;
 8003128:	f00c fa50 	bl	800f5cc <__errno>
 800312c:	4603      	mov	r3, r0
 800312e:	2209      	movs	r2, #9
 8003130:	601a      	str	r2, [r3, #0]
  return -1;
 8003132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <_read>:

int _read(int fd, char* ptr, int len) {
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d110      	bne.n	8003174 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003152:	4b0e      	ldr	r3, [pc, #56]	; (800318c <_read+0x4c>)
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800315a:	2201      	movs	r2, #1
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	f00a faa8 	bl	800d6b2 <HAL_UART_Receive>
 8003162:	4603      	mov	r3, r0
 8003164:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003166:	7dfb      	ldrb	r3, [r7, #23]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <_read+0x30>
      return 1;
 800316c:	2301      	movs	r3, #1
 800316e:	e008      	b.n	8003182 <_read+0x42>
    else
      return EIO;
 8003170:	2305      	movs	r3, #5
 8003172:	e006      	b.n	8003182 <_read+0x42>
  }
  errno = EBADF;
 8003174:	f00c fa2a 	bl	800f5cc <__errno>
 8003178:	4603      	mov	r3, r0
 800317a:	2209      	movs	r2, #9
 800317c:	601a      	str	r2, [r3, #0]
  return -1;
 800317e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	240df4e8 	.word	0x240df4e8

08003190 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	db08      	blt.n	80031b2 <_fstat+0x22>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	dc05      	bgt.n	80031b2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031ac:	605a      	str	r2, [r3, #4]
    return 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	e005      	b.n	80031be <_fstat+0x2e>
  }

  errno = EBADF;
 80031b2:	f00c fa0b 	bl	800f5cc <__errno>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2209      	movs	r2, #9
 80031ba:	601a      	str	r2, [r3, #0]
  return 0;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <MX_RTC_Init+0x4c>)
 80031ce:	4a12      	ldr	r2, [pc, #72]	; (8003218 <MX_RTC_Init+0x50>)
 80031d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <MX_RTC_Init+0x4c>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <MX_RTC_Init+0x4c>)
 80031da:	227f      	movs	r2, #127	; 0x7f
 80031dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80031de:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <MX_RTC_Init+0x4c>)
 80031e0:	22ff      	movs	r2, #255	; 0xff
 80031e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <MX_RTC_Init+0x4c>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <MX_RTC_Init+0x4c>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <MX_RTC_Init+0x4c>)
 80031f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031f6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <MX_RTC_Init+0x4c>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80031fe:	4805      	ldr	r0, [pc, #20]	; (8003214 <MX_RTC_Init+0x4c>)
 8003200:	f009 ffc2 	bl	800d188 <HAL_RTC_Init>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800320a:	f7fe fa7f 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	240df4ec 	.word	0x240df4ec
 8003218:	58004000 	.word	0x58004000

0800321c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b0b2      	sub	sp, #200	; 0xc8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003224:	f107 0308 	add.w	r3, r7, #8
 8003228:	22c0      	movs	r2, #192	; 0xc0
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f00c fa05 	bl	800f63c <memset>
  if(rtcHandle->Instance==RTC)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a10      	ldr	r2, [pc, #64]	; (8003278 <HAL_RTC_MspInit+0x5c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d119      	bne.n	8003270 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800323c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800324c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003250:	f107 0308 	add.w	r3, r7, #8
 8003254:	4618      	mov	r0, r3
 8003256:	f008 f9b7 	bl	800b5c8 <HAL_RCCEx_PeriphCLKConfig>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003260:	f7fe fa54 	bl	800170c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <HAL_RTC_MspInit+0x60>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	4a04      	ldr	r2, [pc, #16]	; (800327c <HAL_RTC_MspInit+0x60>)
 800326a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800326e:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003270:	bf00      	nop
 8003272:	37c8      	adds	r7, #200	; 0xc8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	58004000 	.word	0x58004000
 800327c:	58024400 	.word	0x58024400

08003280 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003286:	2300      	movs	r3, #0
 8003288:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800328a:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <BSP_I2C4_Init+0x64>)
 800328c:	4a16      	ldr	r2, [pc, #88]	; (80032e8 <BSP_I2C4_Init+0x68>)
 800328e:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8003290:	4b16      	ldr	r3, [pc, #88]	; (80032ec <BSP_I2C4_Init+0x6c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d11f      	bne.n	80032d8 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8003298:	4b14      	ldr	r3, [pc, #80]	; (80032ec <BSP_I2C4_Init+0x6c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3301      	adds	r3, #1
 800329e:	4a13      	ldr	r2, [pc, #76]	; (80032ec <BSP_I2C4_Init+0x6c>)
 80032a0:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80032a2:	4810      	ldr	r0, [pc, #64]	; (80032e4 <BSP_I2C4_Init+0x64>)
 80032a4:	f006 fa2a 	bl	80096fc <HAL_I2C_GetState>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d114      	bne.n	80032d8 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 80032ae:	480d      	ldr	r0, [pc, #52]	; (80032e4 <BSP_I2C4_Init+0x64>)
 80032b0:	f000 fb60 	bl	8003974 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80032b4:	f008 f972 	bl	800b59c <HAL_RCC_GetPCLK2Freq>
 80032b8:	4603      	mov	r3, r0
 80032ba:	490d      	ldr	r1, [pc, #52]	; (80032f0 <BSP_I2C4_Init+0x70>)
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 f8e3 	bl	8003488 <I2C_GetTiming>
 80032c2:	4603      	mov	r3, r0
 80032c4:	4619      	mov	r1, r3
 80032c6:	4807      	ldr	r0, [pc, #28]	; (80032e4 <BSP_I2C4_Init+0x64>)
 80032c8:	f000 f838 	bl	800333c <MX_I2C4_Init>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80032d2:	f06f 0307 	mvn.w	r3, #7
 80032d6:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 80032d8:	687b      	ldr	r3, [r7, #4]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	240dff1c 	.word	0x240dff1c
 80032e8:	58001c00 	.word	0x58001c00
 80032ec:	240df514 	.word	0x240df514
 80032f0:	000186a0 	.word	0x000186a0

080032f4 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 80032fe:	4b0d      	ldr	r3, [pc, #52]	; (8003334 <BSP_I2C4_DeInit+0x40>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3b01      	subs	r3, #1
 8003304:	4a0b      	ldr	r2, [pc, #44]	; (8003334 <BSP_I2C4_DeInit+0x40>)
 8003306:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8003308:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <BSP_I2C4_DeInit+0x40>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10b      	bne.n	8003328 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8003310:	4809      	ldr	r0, [pc, #36]	; (8003338 <BSP_I2C4_DeInit+0x44>)
 8003312:	f000 fb9b 	bl	8003a4c <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8003316:	4808      	ldr	r0, [pc, #32]	; (8003338 <BSP_I2C4_DeInit+0x44>)
 8003318:	f005 ff7e 	bl	8009218 <HAL_I2C_DeInit>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003322:	f06f 0307 	mvn.w	r3, #7
 8003326:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8003328:	687b      	ldr	r3, [r7, #4]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	240df514 	.word	0x240df514
 8003338:	240dff1c 	.word	0x240dff1c

0800333c <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f005 febc 	bl	80090f8 <HAL_I2C_Init>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
 800338a:	e014      	b.n	80033b6 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800338c:	2300      	movs	r3, #0
 800338e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f006 fc84 	bl	8009ca0 <HAL_I2CEx_ConfigAnalogFilter>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d002      	beq.n	80033a4 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	73fb      	strb	r3, [r7, #15]
 80033a2:	e008      	b.n	80033b6 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80033a4:	2100      	movs	r1, #0
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f006 fcc5 	bl	8009d36 <HAL_I2CEx_ConfigDigitalFilter>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60ba      	str	r2, [r7, #8]
 80033c8:	461a      	mov	r2, r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	81fb      	strh	r3, [r7, #14]
 80033ce:	460b      	mov	r3, r1
 80033d0:	81bb      	strh	r3, [r7, #12]
 80033d2:	4613      	mov	r3, r2
 80033d4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80033d6:	89b9      	ldrh	r1, [r7, #12]
 80033d8:	89f8      	ldrh	r0, [r7, #14]
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2202      	movs	r2, #2
 80033e2:	f000 fb57 	bl	8003a94 <I2C4_WriteReg>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d102      	bne.n	80033f2 <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	e00c      	b.n	800340c <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80033f2:	4809      	ldr	r0, [pc, #36]	; (8003418 <BSP_I2C4_WriteReg16+0x58>)
 80033f4:	f006 f990 	bl	8009718 <HAL_I2C_GetError>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d103      	bne.n	8003406 <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80033fe:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	e002      	b.n	800340c <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003406:	f06f 0303 	mvn.w	r3, #3
 800340a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800340c:	697b      	ldr	r3, [r7, #20]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	240dff1c 	.word	0x240dff1c

0800341c <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af02      	add	r7, sp, #8
 8003422:	60ba      	str	r2, [r7, #8]
 8003424:	461a      	mov	r2, r3
 8003426:	4603      	mov	r3, r0
 8003428:	81fb      	strh	r3, [r7, #14]
 800342a:	460b      	mov	r3, r1
 800342c:	81bb      	strh	r3, [r7, #12]
 800342e:	4613      	mov	r3, r2
 8003430:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8003432:	89b9      	ldrh	r1, [r7, #12]
 8003434:	89f8      	ldrh	r0, [r7, #14]
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2202      	movs	r2, #2
 800343e:	f000 fb4f 	bl	8003ae0 <I2C4_ReadReg>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	e00c      	b.n	8003468 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800344e:	4809      	ldr	r0, [pc, #36]	; (8003474 <BSP_I2C4_ReadReg16+0x58>)
 8003450:	f006 f962 	bl	8009718 <HAL_I2C_GetError>
 8003454:	4603      	mov	r3, r0
 8003456:	2b04      	cmp	r3, #4
 8003458:	d103      	bne.n	8003462 <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800345a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	e002      	b.n	8003468 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003462:	f06f 0303 	mvn.w	r3, #3
 8003466:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003468:	697b      	ldr	r3, [r7, #20]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	240dff1c 	.word	0x240dff1c

08003478 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800347c:	f000 ffd4 	bl	8004428 <HAL_GetTick>
 8003480:	4603      	mov	r3, r0
}
 8003482:	4618      	mov	r0, r3
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d06b      	beq.n	8003574 <I2C_GetTiming+0xec>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d068      	beq.n	8003574 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	e060      	b.n	800356a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80034a8:	4a35      	ldr	r2, [pc, #212]	; (8003580 <I2C_GetTiming+0xf8>)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	212c      	movs	r1, #44	; 0x2c
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	3304      	adds	r3, #4
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d352      	bcc.n	8003564 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80034be:	4a30      	ldr	r2, [pc, #192]	; (8003580 <I2C_GetTiming+0xf8>)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	212c      	movs	r1, #44	; 0x2c
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	3308      	adds	r3, #8
 80034cc:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d847      	bhi.n	8003564 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80034d4:	6939      	ldr	r1, [r7, #16]
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f856 	bl	8003588 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80034dc:	6939      	ldr	r1, [r7, #16]
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f940 	bl	8003764 <I2C_Compute_SCLL_SCLH>
 80034e4:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b7f      	cmp	r3, #127	; 0x7f
 80034ea:	d842      	bhi.n	8003572 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80034ec:	4925      	ldr	r1, [pc, #148]	; (8003584 <I2C_GetTiming+0xfc>)
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80034fe:	4821      	ldr	r0, [pc, #132]	; (8003584 <I2C_GetTiming+0xfc>)
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4403      	add	r3, r0
 800350c:	3304      	adds	r3, #4
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	051b      	lsls	r3, r3, #20
 8003512:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003516:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003518:	481a      	ldr	r0, [pc, #104]	; (8003584 <I2C_GetTiming+0xfc>)
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4403      	add	r3, r0
 8003526:	3308      	adds	r3, #8
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	041b      	lsls	r3, r3, #16
 800352c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003530:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8003532:	4814      	ldr	r0, [pc, #80]	; (8003584 <I2C_GetTiming+0xfc>)
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4403      	add	r3, r0
 8003540:	330c      	adds	r3, #12
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	021b      	lsls	r3, r3, #8
 8003546:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003548:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800354a:	480e      	ldr	r0, [pc, #56]	; (8003584 <I2C_GetTiming+0xfc>)
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4403      	add	r3, r0
 8003558:	3310      	adds	r3, #16
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800355e:	430b      	orrs	r3, r1
 8003560:	617b      	str	r3, [r7, #20]
        }
        break;
 8003562:	e006      	b.n	8003572 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	3301      	adds	r3, #1
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	2b02      	cmp	r3, #2
 800356e:	d99b      	bls.n	80034a8 <I2C_GetTiming+0x20>
 8003570:	e000      	b.n	8003574 <I2C_GetTiming+0xec>
        break;
 8003572:	bf00      	nop
      }
    }
  }

  return ret;
 8003574:	697b      	ldr	r3, [r7, #20]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	08010cac 	.word	0x08010cac
 8003584:	240df518 	.word	0x240df518

08003588 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003588:	b480      	push	{r7}
 800358a:	b08f      	sub	sp, #60	; 0x3c
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8003592:	2310      	movs	r3, #16
 8003594:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	085a      	lsrs	r2, r3, #1
 800359a:	4b6e      	ldr	r3, [pc, #440]	; (8003754 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800359c:	4413      	add	r3, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80035a4:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80035a6:	2332      	movs	r3, #50	; 0x32
 80035a8:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 80035aa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80035ae:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80035b0:	4a69      	ldr	r2, [pc, #420]	; (8003758 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	212c      	movs	r1, #44	; 0x2c
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	4413      	add	r3, r2
 80035bc:	3324      	adds	r3, #36	; 0x24
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	4a65      	ldr	r2, [pc, #404]	; (8003758 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	212c      	movs	r1, #44	; 0x2c
 80035c8:	fb01 f303 	mul.w	r3, r1, r3
 80035cc:	4413      	add	r3, r2
 80035ce:	330c      	adds	r3, #12
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80035d4:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80035d6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80035d8:	495f      	ldr	r1, [pc, #380]	; (8003758 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	202c      	movs	r0, #44	; 0x2c
 80035de:	fb00 f303 	mul.w	r3, r0, r3
 80035e2:	440b      	add	r3, r1
 80035e4:	3328      	adds	r3, #40	; 0x28
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3303      	adds	r3, #3
 80035ea:	69f9      	ldr	r1, [r7, #28]
 80035ec:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80035f4:	4a58      	ldr	r2, [pc, #352]	; (8003758 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	212c      	movs	r1, #44	; 0x2c
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	4413      	add	r3, r2
 8003600:	3310      	adds	r3, #16
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	4a54      	ldr	r2, [pc, #336]	; (8003758 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	212c      	movs	r1, #44	; 0x2c
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	4413      	add	r3, r2
 8003612:	3320      	adds	r3, #32
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8003618:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800361a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800361c:	494e      	ldr	r1, [pc, #312]	; (8003758 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	202c      	movs	r0, #44	; 0x2c
 8003622:	fb00 f303 	mul.w	r3, r0, r3
 8003626:	440b      	add	r3, r1
 8003628:	3328      	adds	r3, #40	; 0x28
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3304      	adds	r3, #4
 800362e:	69f9      	ldr	r1, [r7, #28]
 8003630:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8003638:	4a47      	ldr	r2, [pc, #284]	; (8003758 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	212c      	movs	r1, #44	; 0x2c
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	4413      	add	r3, r2
 8003644:	3320      	adds	r3, #32
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	4a43      	ldr	r2, [pc, #268]	; (8003758 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	212c      	movs	r1, #44	; 0x2c
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	4413      	add	r3, r2
 8003656:	3314      	adds	r3, #20
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4403      	add	r3, r0
 800365c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	2b00      	cmp	r3, #0
 8003662:	dc01      	bgt.n	8003668 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8003664:	2300      	movs	r3, #0
 8003666:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	2b00      	cmp	r3, #0
 800366c:	dc01      	bgt.n	8003672 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003672:	2300      	movs	r3, #0
 8003674:	62bb      	str	r3, [r7, #40]	; 0x28
 8003676:	e062      	b.n	800373e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003678:	2300      	movs	r3, #0
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
 800367c:	e059      	b.n	8003732 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	3301      	adds	r3, #1
 8003682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003684:	3201      	adds	r2, #1
 8003686:	fb03 f202 	mul.w	r2, r3, r2
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	fb02 f303 	mul.w	r3, r2, r3
 8003690:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	429a      	cmp	r2, r3
 8003698:	d348      	bcc.n	800372c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800369a:	2300      	movs	r3, #0
 800369c:	623b      	str	r3, [r7, #32]
 800369e:	e042      	b.n	8003726 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 80036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a2:	3301      	adds	r3, #1
 80036a4:	6a3a      	ldr	r2, [r7, #32]
 80036a6:	fb03 f202 	mul.w	r2, r3, r2
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	fb02 f303 	mul.w	r3, r2, r3
 80036b0:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d332      	bcc.n	8003720 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 80036ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d82e      	bhi.n	8003720 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 80036c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d02a      	beq.n	8003720 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80036ca:	4b24      	ldr	r3, [pc, #144]	; (800375c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4924      	ldr	r1, [pc, #144]	; (8003760 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036dc:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80036de:	4b1f      	ldr	r3, [pc, #124]	; (800375c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	491f      	ldr	r1, [pc, #124]	; (8003760 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	3304      	adds	r3, #4
 80036f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f2:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80036f4:	4b19      	ldr	r3, [pc, #100]	; (800375c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4919      	ldr	r1, [pc, #100]	; (8003760 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	3308      	adds	r3, #8
 8003706:	6a3a      	ldr	r2, [r7, #32]
 8003708:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800370e:	4b13      	ldr	r3, [pc, #76]	; (800375c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3301      	adds	r3, #1
 8003714:	4a11      	ldr	r2, [pc, #68]	; (800375c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003716:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003718:	4b10      	ldr	r3, [pc, #64]	; (800375c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b7f      	cmp	r3, #127	; 0x7f
 800371e:	d812      	bhi.n	8003746 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	3301      	adds	r3, #1
 8003724:	623b      	str	r3, [r7, #32]
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	2b0f      	cmp	r3, #15
 800372a:	d9b9      	bls.n	80036a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	3301      	adds	r3, #1
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	2b0f      	cmp	r3, #15
 8003736:	d9a2      	bls.n	800367e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	3301      	adds	r3, #1
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	2b0f      	cmp	r3, #15
 8003742:	d999      	bls.n	8003678 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8003744:	e000      	b.n	8003748 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8003746:	bf00      	nop
          }
        }
      }
    }
  }
}
 8003748:	373c      	adds	r7, #60	; 0x3c
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	3b9aca00 	.word	0x3b9aca00
 8003758:	08010cac 	.word	0x08010cac
 800375c:	240dff18 	.word	0x240dff18
 8003760:	240df518 	.word	0x240df518

08003764 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003764:	b480      	push	{r7}
 8003766:	b093      	sub	sp, #76	; 0x4c
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800376e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003772:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	085a      	lsrs	r2, r3, #1
 8003778:	4b7a      	ldr	r3, [pc, #488]	; (8003964 <I2C_Compute_SCLL_SCLH+0x200>)
 800377a:	4413      	add	r3, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003784:	4a78      	ldr	r2, [pc, #480]	; (8003968 <I2C_Compute_SCLL_SCLH+0x204>)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	212c      	movs	r1, #44	; 0x2c
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	4413      	add	r3, r2
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	085a      	lsrs	r2, r3, #1
 8003794:	4b73      	ldr	r3, [pc, #460]	; (8003964 <I2C_Compute_SCLL_SCLH+0x200>)
 8003796:	4413      	add	r3, r2
 8003798:	4973      	ldr	r1, [pc, #460]	; (8003968 <I2C_Compute_SCLL_SCLH+0x204>)
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	202c      	movs	r0, #44	; 0x2c
 800379e:	fb00 f202 	mul.w	r2, r0, r2
 80037a2:	440a      	add	r2, r1
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80037aa:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80037ac:	2332      	movs	r3, #50	; 0x32
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80037b0:	4a6d      	ldr	r2, [pc, #436]	; (8003968 <I2C_Compute_SCLL_SCLH+0x204>)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	212c      	movs	r1, #44	; 0x2c
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	3328      	adds	r3, #40	; 0x28
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80037c8:	4a67      	ldr	r2, [pc, #412]	; (8003968 <I2C_Compute_SCLL_SCLH+0x204>)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	212c      	movs	r1, #44	; 0x2c
 80037ce:	fb01 f303 	mul.w	r3, r1, r3
 80037d2:	4413      	add	r3, r2
 80037d4:	3304      	adds	r3, #4
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a62      	ldr	r2, [pc, #392]	; (8003964 <I2C_Compute_SCLL_SCLH+0x200>)
 80037da:	fbb2 f3f3 	udiv	r3, r2, r3
 80037de:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80037e0:	4a61      	ldr	r2, [pc, #388]	; (8003968 <I2C_Compute_SCLL_SCLH+0x204>)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	212c      	movs	r1, #44	; 0x2c
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	4413      	add	r3, r2
 80037ec:	3308      	adds	r3, #8
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a5c      	ldr	r2, [pc, #368]	; (8003964 <I2C_Compute_SCLL_SCLH+0x200>)
 80037f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f6:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80037f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fa:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80037fc:	2300      	movs	r3, #0
 80037fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003800:	e0a3      	b.n	800394a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003802:	495a      	ldr	r1, [pc, #360]	; (800396c <I2C_Compute_SCLL_SCLH+0x208>)
 8003804:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800381c:	2300      	movs	r3, #0
 800381e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003820:	e08c      	b.n	800393c <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	441a      	add	r2, r3
 8003828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382a:	3301      	adds	r3, #1
 800382c:	6979      	ldr	r1, [r7, #20]
 800382e:	fb03 f101 	mul.w	r1, r3, r1
 8003832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	440b      	add	r3, r1
 8003838:	4413      	add	r3, r2
 800383a:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800383c:	4a4a      	ldr	r2, [pc, #296]	; (8003968 <I2C_Compute_SCLL_SCLH+0x204>)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	212c      	movs	r1, #44	; 0x2c
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	4413      	add	r3, r2
 8003848:	3318      	adds	r3, #24
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	429a      	cmp	r2, r3
 8003850:	d971      	bls.n	8003936 <I2C_Compute_SCLL_SCLH+0x1d2>
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	1ad2      	subs	r2, r2, r3
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	089b      	lsrs	r3, r3, #2
 800385e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003860:	429a      	cmp	r2, r3
 8003862:	d268      	bcs.n	8003936 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003864:	2300      	movs	r3, #0
 8003866:	63bb      	str	r3, [r7, #56]	; 0x38
 8003868:	e062      	b.n	8003930 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800386a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	441a      	add	r2, r3
 8003870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003872:	3301      	adds	r3, #1
 8003874:	6979      	ldr	r1, [r7, #20]
 8003876:	fb03 f101 	mul.w	r1, r3, r1
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	440b      	add	r3, r1
 8003880:	4413      	add	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	441a      	add	r2, r3
 800388a:	4937      	ldr	r1, [pc, #220]	; (8003968 <I2C_Compute_SCLL_SCLH+0x204>)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	202c      	movs	r0, #44	; 0x2c
 8003890:	fb00 f303 	mul.w	r3, r0, r3
 8003894:	440b      	add	r3, r1
 8003896:	3320      	adds	r3, #32
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	441a      	add	r2, r3
 800389c:	4932      	ldr	r1, [pc, #200]	; (8003968 <I2C_Compute_SCLL_SCLH+0x204>)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	202c      	movs	r0, #44	; 0x2c
 80038a2:	fb00 f303 	mul.w	r3, r0, r3
 80038a6:	440b      	add	r3, r1
 80038a8:	3324      	adds	r3, #36	; 0x24
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4413      	add	r3, r2
 80038ae:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d338      	bcc.n	800392a <I2C_Compute_SCLL_SCLH+0x1c6>
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d834      	bhi.n	800392a <I2C_Compute_SCLL_SCLH+0x1c6>
 80038c0:	4a29      	ldr	r2, [pc, #164]	; (8003968 <I2C_Compute_SCLL_SCLH+0x204>)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	212c      	movs	r1, #44	; 0x2c
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	331c      	adds	r3, #28
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d329      	bcc.n	800392a <I2C_Compute_SCLL_SCLH+0x1c6>
 80038d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d225      	bcs.n	800392a <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	da02      	bge.n	80038f2 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	425b      	negs	r3, r3
 80038f0:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80038f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d917      	bls.n	800392a <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80038fe:	491b      	ldr	r1, [pc, #108]	; (800396c <I2C_Compute_SCLL_SCLH+0x208>)
 8003900:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	3310      	adds	r3, #16
 800390e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003910:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8003912:	4916      	ldr	r1, [pc, #88]	; (800396c <I2C_Compute_SCLL_SCLH+0x208>)
 8003914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	330c      	adds	r3, #12
 8003922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003924:	601a      	str	r2, [r3, #0]
              ret = count;
 8003926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003928:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	3301      	adds	r3, #1
 800392e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003932:	2bff      	cmp	r3, #255	; 0xff
 8003934:	d999      	bls.n	800386a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003938:	3301      	adds	r3, #1
 800393a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800393c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393e:	2bff      	cmp	r3, #255	; 0xff
 8003940:	f67f af6f 	bls.w	8003822 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003946:	3301      	adds	r3, #1
 8003948:	637b      	str	r3, [r7, #52]	; 0x34
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <I2C_Compute_SCLL_SCLH+0x20c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003950:	429a      	cmp	r2, r3
 8003952:	f4ff af56 	bcc.w	8003802 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8003956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003958:	4618      	mov	r0, r3
 800395a:	374c      	adds	r7, #76	; 0x4c
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	3b9aca00 	.word	0x3b9aca00
 8003968:	08010cac 	.word	0x08010cac
 800396c:	240df518 	.word	0x240df518
 8003970:	240dff18 	.word	0x240dff18

08003974 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800397c:	4b31      	ldr	r3, [pc, #196]	; (8003a44 <I2C4_MspInit+0xd0>)
 800397e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003982:	4a30      	ldr	r2, [pc, #192]	; (8003a44 <I2C4_MspInit+0xd0>)
 8003984:	f043 0308 	orr.w	r3, r3, #8
 8003988:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800398c:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <I2C4_MspInit+0xd0>)
 800398e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800399a:	4b2a      	ldr	r3, [pc, #168]	; (8003a44 <I2C4_MspInit+0xd0>)
 800399c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039a0:	4a28      	ldr	r2, [pc, #160]	; (8003a44 <I2C4_MspInit+0xd0>)
 80039a2:	f043 0308 	orr.w	r3, r3, #8
 80039a6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80039aa:	4b26      	ldr	r3, [pc, #152]	; (8003a44 <I2C4_MspInit+0xd0>)
 80039ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80039b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039bc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80039be:	2312      	movs	r3, #18
 80039c0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80039c6:	2302      	movs	r3, #2
 80039c8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80039ca:	2304      	movs	r3, #4
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80039ce:	f107 0314 	add.w	r3, r7, #20
 80039d2:	4619      	mov	r1, r3
 80039d4:	481c      	ldr	r0, [pc, #112]	; (8003a48 <I2C4_MspInit+0xd4>)
 80039d6:	f005 f8a1 	bl	8008b1c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80039da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039de:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80039e0:	2312      	movs	r3, #18
 80039e2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80039e8:	2302      	movs	r3, #2
 80039ea:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80039ec:	2304      	movs	r3, #4
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	4619      	mov	r1, r3
 80039f6:	4814      	ldr	r0, [pc, #80]	; (8003a48 <I2C4_MspInit+0xd4>)
 80039f8:	f005 f890 	bl	8008b1c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <I2C4_MspInit+0xd0>)
 80039fe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003a02:	4a10      	ldr	r2, [pc, #64]	; (8003a44 <I2C4_MspInit+0xd0>)
 8003a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a08:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003a0c:	4b0d      	ldr	r3, [pc, #52]	; (8003a44 <I2C4_MspInit+0xd0>)
 8003a0e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <I2C4_MspInit+0xd0>)
 8003a1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a20:	4a08      	ldr	r2, [pc, #32]	; (8003a44 <I2C4_MspInit+0xd0>)
 8003a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a26:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <I2C4_MspInit+0xd0>)
 8003a2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a30:	4a04      	ldr	r2, [pc, #16]	; (8003a44 <I2C4_MspInit+0xd0>)
 8003a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a36:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8003a3a:	bf00      	nop
 8003a3c:	3728      	adds	r7, #40	; 0x28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	58024400 	.word	0x58024400
 8003a48:	58020c00 	.word	0x58020c00

08003a4c <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8003a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a58:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	480b      	ldr	r0, [pc, #44]	; (8003a8c <I2C4_MspDeInit+0x40>)
 8003a60:	f005 fa0c 	bl	8008e7c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a68:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4807      	ldr	r0, [pc, #28]	; (8003a8c <I2C4_MspDeInit+0x40>)
 8003a70:	f005 fa04 	bl	8008e7c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003a74:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <I2C4_MspDeInit+0x44>)
 8003a76:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003a7a:	4a05      	ldr	r2, [pc, #20]	; (8003a90 <I2C4_MspDeInit+0x44>)
 8003a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a80:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8003a84:	bf00      	nop
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	58020c00 	.word	0x58020c00
 8003a90:	58024400 	.word	0x58024400

08003a94 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af04      	add	r7, sp, #16
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	81fb      	strh	r3, [r7, #14]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	81bb      	strh	r3, [r7, #12]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003aa8:	8978      	ldrh	r0, [r7, #10]
 8003aaa:	89ba      	ldrh	r2, [r7, #12]
 8003aac:	89f9      	ldrh	r1, [r7, #14]
 8003aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ab2:	9302      	str	r3, [sp, #8]
 8003ab4:	8b3b      	ldrh	r3, [r7, #24]
 8003ab6:	9301      	str	r3, [sp, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	4603      	mov	r3, r0
 8003abe:	4807      	ldr	r0, [pc, #28]	; (8003adc <I2C4_WriteReg+0x48>)
 8003ac0:	f005 fbee 	bl	80092a0 <HAL_I2C_Mem_Write>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e001      	b.n	8003ad2 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003ace:	f06f 0307 	mvn.w	r3, #7
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	240dff1c 	.word	0x240dff1c

08003ae0 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af04      	add	r7, sp, #16
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	4603      	mov	r3, r0
 8003aea:	81fb      	strh	r3, [r7, #14]
 8003aec:	460b      	mov	r3, r1
 8003aee:	81bb      	strh	r3, [r7, #12]
 8003af0:	4613      	mov	r3, r2
 8003af2:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003af4:	8978      	ldrh	r0, [r7, #10]
 8003af6:	89ba      	ldrh	r2, [r7, #12]
 8003af8:	89f9      	ldrh	r1, [r7, #14]
 8003afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003afe:	9302      	str	r3, [sp, #8]
 8003b00:	8b3b      	ldrh	r3, [r7, #24]
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4807      	ldr	r0, [pc, #28]	; (8003b28 <I2C4_ReadReg+0x48>)
 8003b0c:	f005 fcdc 	bl	80094c8 <HAL_I2C_Mem_Read>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e001      	b.n	8003b1e <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003b1a:	f06f 0307 	mvn.w	r3, #7
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	240dff1c 	.word	0x240dff1c

08003b2c <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003b42:	f06f 0301 	mvn.w	r3, #1
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	e02d      	b.n	8003ba6 <BSP_CAMERA_Init+0x7a>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    HAL_DCMI_MspInit(&hdcmi);
 8003b4a:	4819      	ldr	r0, [pc, #100]	; (8003bb0 <BSP_CAMERA_Init+0x84>)
 8003b4c:	f7fc fdd6 	bl	80006fc <HAL_DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    MX_DCMI_Init();
 8003b50:	f7fc fda0 	bl	8000694 <MX_DCMI_Init>

    if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 8003b54:	2000      	movs	r0, #0
 8003b56:	f000 f887 	bl	8003c68 <BSP_CAMERA_HwReset>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <BSP_CAMERA_Init+0x3c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003b60:	f06f 0307 	mvn.w	r3, #7
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	e01e      	b.n	8003ba6 <BSP_CAMERA_Init+0x7a>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	68b8      	ldr	r0, [r7, #8]
 8003b6c:	f000 f93e 	bl	8003dec <OV5640_Probe>
 8003b70:	6178      	str	r0, [r7, #20]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <BSP_CAMERA_Init+0x54>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003b78:	f06f 0306 	mvn.w	r3, #6
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	e012      	b.n	8003ba6 <BSP_CAMERA_Init+0x7a>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 8003b80:	490c      	ldr	r1, [pc, #48]	; (8003bb4 <BSP_CAMERA_Init+0x88>)
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4613      	mov	r3, r2
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	4413      	add	r3, r2
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	440b      	add	r3, r1
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 8003b92:	4908      	ldr	r1, [pc, #32]	; (8003bb4 <BSP_CAMERA_Init+0x88>)
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4613      	mov	r3, r2
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	4413      	add	r3, r2
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	440b      	add	r3, r1
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 8003ba6:	697b      	ldr	r3, [r7, #20]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	240000d4 	.word	0x240000d4
 8003bb4:	240dff74 	.word	0x240dff74

08003bb8 <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 8003bb8:	b590      	push	{r4, r7, lr}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003bca:	f06f 0301 	mvn.w	r3, #1
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	e022      	b.n	8003c18 <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hdcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 8003bd2:	68bc      	ldr	r4, [r7, #8]
 8003bd4:	4913      	ldr	r1, [pc, #76]	; (8003c24 <BSP_CAMERA_Start+0x6c>)
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	4413      	add	r3, r2
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	440b      	add	r3, r1
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	490f      	ldr	r1, [pc, #60]	; (8003c24 <BSP_CAMERA_Start+0x6c>)
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4613      	mov	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4413      	add	r3, r2
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f000 f8a6 	bl	8003d48 <GetSize>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	4622      	mov	r2, r4
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4809      	ldr	r0, [pc, #36]	; (8003c28 <BSP_CAMERA_Start+0x70>)
 8003c04:	f000 fdca 	bl	800479c <HAL_DCMI_Start_DMA>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8003c0e:	f06f 0303 	mvn.w	r3, #3
 8003c12:	e002      	b.n	8003c1a <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8003c18:	697b      	ldr	r3, [r7, #20]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd90      	pop	{r4, r7, pc}
 8003c22:	bf00      	nop
 8003c24:	240dff74 	.word	0x240dff74
 8003c28:	240000d4 	.word	0x240000d4

08003c2c <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003c3a:	f06f 0301 	mvn.w	r3, #1
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	e00b      	b.n	8003c5a <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hdcmi) != HAL_OK)
 8003c42:	4808      	ldr	r0, [pc, #32]	; (8003c64 <BSP_CAMERA_Stop+0x38>)
 8003c44:	f000 fe6c 	bl	8004920 <HAL_DCMI_Stop>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8003c4e:	f06f 0303 	mvn.w	r3, #3
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	e001      	b.n	8003c5a <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	240000d4 	.word	0x240000d4

08003c68 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <BSP_CAMERA_HwReset+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003c7a:	f06f 0301 	mvn.w	r3, #1
 8003c7e:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003c80:	68fb      	ldr	r3, [r7, #12]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b085      	sub	sp, #20
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <BSP_CAMERA_PwrDown+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003ca0:	f06f 0301 	mvn.w	r3, #1
 8003ca4:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	f7ff ffdb 	bl	8003cb4 <BSP_CAMERA_LineEventCallback>
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 {
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 8003d0e:	2000      	movs	r0, #0
 8003d10:	f7fd fce6 	bl	80016e0 <BSP_CAMERA_FrameEventCallback>
}
 8003d14:	bf00      	nop
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8003d24:	2000      	movs	r0, #0
 8003d26:	f7ff ffcf 	bl	8003cc8 <BSP_CAMERA_VsyncEventCallback>
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	f7ff ffce 	bl	8003cdc <BSP_CAMERA_ErrorCallback>
}
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d102      	bne.n	8003d62 <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	e001      	b.n	8003d66 <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 8003d62:	2302      	movs	r3, #2
 8003d64:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d834      	bhi.n	8003dd6 <GetSize+0x8e>
 8003d6c:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <GetSize+0x2c>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003d89 	.word	0x08003d89
 8003d78:	08003d99 	.word	0x08003d99
 8003d7c:	08003da9 	.word	0x08003da9
 8003d80:	08003db9 	.word	0x08003db9
 8003d84:	08003dc9 	.word	0x08003dc9
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003d8e:	fb02 f303 	mul.w	r3, r2, r3
 8003d92:	089b      	lsrs	r3, r3, #2
 8003d94:	60fb      	str	r3, [r7, #12]
    break;
 8003d96:	e01f      	b.n	8003dd8 <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	089b      	lsrs	r3, r3, #2
 8003da4:	60fb      	str	r3, [r7, #12]
    break;
 8003da6:	e017      	b.n	8003dd8 <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	4613      	mov	r3, r2
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	025b      	lsls	r3, r3, #9
 8003db2:	089b      	lsrs	r3, r3, #2
 8003db4:	60fb      	str	r3, [r7, #12]
    break;
 8003db6:	e00f      	b.n	8003dd8 <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 8003dbe:	fb02 f303 	mul.w	r3, r2, r3
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	60fb      	str	r3, [r7, #12]
    break;
 8003dc6:	e007      	b.n	8003dd8 <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4a07      	ldr	r2, [pc, #28]	; (8003de8 <GetSize+0xa0>)
 8003dcc:	fb02 f303 	mul.w	r3, r2, r3
 8003dd0:	089b      	lsrs	r3, r3, #2
 8003dd2:	60fb      	str	r3, [r7, #12]
    break;
 8003dd4:	e000      	b.n	8003dd8 <GetSize+0x90>
  default:
    break;
 8003dd6:	bf00      	nop
  }

  return (int32_t)size;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	0005dc00 	.word	0x0005dc00

08003dec <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08a      	sub	sp, #40	; 0x28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8003df6:	2378      	movs	r3, #120	; 0x78
 8003df8:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003dfa:	4b2c      	ldr	r3, [pc, #176]	; (8003eac <OV5640_Probe+0xc0>)
 8003dfc:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003dfe:	4b2c      	ldr	r3, [pc, #176]	; (8003eb0 <OV5640_Probe+0xc4>)
 8003e00:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8003e02:	4b2c      	ldr	r3, [pc, #176]	; (8003eb4 <OV5640_Probe+0xc8>)
 8003e04:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8003e06:	4b2c      	ldr	r3, [pc, #176]	; (8003eb8 <OV5640_Probe+0xcc>)
 8003e08:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003e0a:	4b2c      	ldr	r3, [pc, #176]	; (8003ebc <OV5640_Probe+0xd0>)
 8003e0c:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8003e0e:	f107 030c 	add.w	r3, r7, #12
 8003e12:	4619      	mov	r1, r3
 8003e14:	482a      	ldr	r0, [pc, #168]	; (8003ec0 <OV5640_Probe+0xd4>)
 8003e16:	f7fd fc7f 	bl	8001718 <OV5640_RegisterBusIO>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003e20:	f06f 0304 	mvn.w	r3, #4
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
 8003e26:	e03c      	b.n	8003ea2 <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8003e28:	f107 0308 	add.w	r3, r7, #8
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4824      	ldr	r0, [pc, #144]	; (8003ec0 <OV5640_Probe+0xd4>)
 8003e30:	f7fe f8c6 	bl	8001fc0 <OV5640_ReadID>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003e3a:	f06f 0304 	mvn.w	r3, #4
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e40:	e02f      	b.n	8003ea2 <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f245 6240 	movw	r2, #22080	; 0x5640
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d003      	beq.n	8003e54 <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003e4c:	f06f 0306 	mvn.w	r3, #6
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
 8003e52:	e026      	b.n	8003ea2 <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <OV5640_Probe+0xd8>)
 8003e56:	4a1c      	ldr	r2, [pc, #112]	; (8003ec8 <OV5640_Probe+0xdc>)
 8003e58:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 8003e5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <OV5640_Probe+0xe0>)
 8003e5c:	4a18      	ldr	r2, [pc, #96]	; (8003ec0 <OV5640_Probe+0xd4>)
 8003e5e:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8003e60:	4b18      	ldr	r3, [pc, #96]	; (8003ec4 <OV5640_Probe+0xd8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a19      	ldr	r2, [pc, #100]	; (8003ecc <OV5640_Probe+0xe0>)
 8003e68:	6810      	ldr	r0, [r2, #0]
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4798      	blx	r3
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003e76:	f06f 0304 	mvn.w	r3, #4
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7c:	e011      	b.n	8003ea2 <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 8003e7e:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <OV5640_Probe+0xd8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4a11      	ldr	r2, [pc, #68]	; (8003ecc <OV5640_Probe+0xe0>)
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	4911      	ldr	r1, [pc, #68]	; (8003ed0 <OV5640_Probe+0xe4>)
 8003e8a:	6809      	ldr	r1, [r1, #0]
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	4798      	blx	r3
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003e96:	f06f 0304 	mvn.w	r3, #4
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9c:	e001      	b.n	8003ea2 <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3728      	adds	r7, #40	; 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	08003281 	.word	0x08003281
 8003eb0:	080032f5 	.word	0x080032f5
 8003eb4:	0800341d 	.word	0x0800341d
 8003eb8:	080033c1 	.word	0x080033c1
 8003ebc:	08003479 	.word	0x08003479
 8003ec0:	240dffac 	.word	0x240dffac
 8003ec4:	240dffa4 	.word	0x240dffa4
 8003ec8:	24000000 	.word	0x24000000
 8003ecc:	240dff70 	.word	0x240dff70
 8003ed0:	240dffa8 	.word	0x240dffa8

08003ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eda:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <HAL_MspInit+0x30>)
 8003edc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003ee0:	4a08      	ldr	r2, [pc, #32]	; (8003f04 <HAL_MspInit+0x30>)
 8003ee2:	f043 0302 	orr.w	r3, r3, #2
 8003ee6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003eea:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <HAL_MspInit+0x30>)
 8003eec:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	607b      	str	r3, [r7, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	58024400 	.word	0x58024400

08003f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f0c:	e7fe      	b.n	8003f0c <NMI_Handler+0x4>

08003f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f12:	e7fe      	b.n	8003f12 <HardFault_Handler+0x4>

08003f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f18:	e7fe      	b.n	8003f18 <MemManage_Handler+0x4>

08003f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f1e:	e7fe      	b.n	8003f1e <BusFault_Handler+0x4>

08003f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f24:	e7fe      	b.n	8003f24 <UsageFault_Handler+0x4>

08003f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f26:	b480      	push	{r7}
 8003f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f2a:	bf00      	nop
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f42:	b480      	push	{r7}
 8003f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f54:	f000 fa54 	bl	8004400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f58:	bf00      	nop
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f60:	4802      	ldr	r0, [pc, #8]	; (8003f6c <USART1_IRQHandler+0x10>)
 8003f62:	f009 fc6f 	bl	800d844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f66:	bf00      	nop
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	240dffd8 	.word	0x240dffd8

08003f70 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003f74:	4802      	ldr	r0, [pc, #8]	; (8003f80 <DMA2_Stream1_IRQHandler+0x10>)
 8003f76:	f002 f9c3 	bl	8006300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	24000124 	.word	0x24000124

08003f84 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003f88:	4802      	ldr	r0, [pc, #8]	; (8003f94 <DCMI_PSSI_IRQHandler+0x10>)
 8003f8a:	f000 fd29 	bl	80049e0 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8003f8e:	bf00      	nop
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	240000d4 	.word	0x240000d4

08003f98 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003f9c:	4802      	ldr	r0, [pc, #8]	; (8003fa8 <LTDC_IRQHandler+0x10>)
 8003f9e:	f005 ffe7 	bl	8009f70 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	2400023c 	.word	0x2400023c

08003fac <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC Error global Interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003fb0:	4802      	ldr	r0, [pc, #8]	; (8003fbc <LTDC_ER_IRQHandler+0x10>)
 8003fb2:	f005 ffdd 	bl	8009f70 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	2400023c 	.word	0x2400023c

08003fc0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003fc4:	4802      	ldr	r0, [pc, #8]	; (8003fd0 <DMA2D_IRQHandler+0x10>)
 8003fc6:	f003 fe95 	bl	8007cf4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003fca:	bf00      	nop
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	2400019c 	.word	0x2400019c

08003fd4 <_lseek>:
//  (void)file;
//  return 1;
//}

int _lseek(int file, int ptr, int dir)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
	...

08003ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ff8:	4a14      	ldr	r2, [pc, #80]	; (800404c <_sbrk+0x5c>)
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <_sbrk+0x60>)
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004004:	4b13      	ldr	r3, [pc, #76]	; (8004054 <_sbrk+0x64>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d102      	bne.n	8004012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800400c:	4b11      	ldr	r3, [pc, #68]	; (8004054 <_sbrk+0x64>)
 800400e:	4a12      	ldr	r2, [pc, #72]	; (8004058 <_sbrk+0x68>)
 8004010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <_sbrk+0x64>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4413      	add	r3, r2
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	429a      	cmp	r2, r3
 800401e:	d207      	bcs.n	8004030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004020:	f00b fad4 	bl	800f5cc <__errno>
 8004024:	4603      	mov	r3, r0
 8004026:	220c      	movs	r2, #12
 8004028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800402a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800402e:	e009      	b.n	8004044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004030:	4b08      	ldr	r3, [pc, #32]	; (8004054 <_sbrk+0x64>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004036:	4b07      	ldr	r3, [pc, #28]	; (8004054 <_sbrk+0x64>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4413      	add	r3, r2
 800403e:	4a05      	ldr	r2, [pc, #20]	; (8004054 <_sbrk+0x64>)
 8004040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004042:	68fb      	ldr	r3, [r7, #12]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	24100000 	.word	0x24100000
 8004050:	00000400 	.word	0x00000400
 8004054:	240dffd4 	.word	0x240dffd4
 8004058:	240e0080 	.word	0x240e0080

0800405c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004060:	4b32      	ldr	r3, [pc, #200]	; (800412c <SystemInit+0xd0>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	4a31      	ldr	r2, [pc, #196]	; (800412c <SystemInit+0xd0>)
 8004068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800406c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004070:	4b2f      	ldr	r3, [pc, #188]	; (8004130 <SystemInit+0xd4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	2b02      	cmp	r3, #2
 800407a:	d807      	bhi.n	800408c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800407c:	4b2c      	ldr	r3, [pc, #176]	; (8004130 <SystemInit+0xd4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f023 030f 	bic.w	r3, r3, #15
 8004084:	4a2a      	ldr	r2, [pc, #168]	; (8004130 <SystemInit+0xd4>)
 8004086:	f043 0303 	orr.w	r3, r3, #3
 800408a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800408c:	4b29      	ldr	r3, [pc, #164]	; (8004134 <SystemInit+0xd8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a28      	ldr	r2, [pc, #160]	; (8004134 <SystemInit+0xd8>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004098:	4b26      	ldr	r3, [pc, #152]	; (8004134 <SystemInit+0xd8>)
 800409a:	2200      	movs	r2, #0
 800409c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800409e:	4b25      	ldr	r3, [pc, #148]	; (8004134 <SystemInit+0xd8>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4924      	ldr	r1, [pc, #144]	; (8004134 <SystemInit+0xd8>)
 80040a4:	4b24      	ldr	r3, [pc, #144]	; (8004138 <SystemInit+0xdc>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80040aa:	4b21      	ldr	r3, [pc, #132]	; (8004130 <SystemInit+0xd4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80040b6:	4b1e      	ldr	r3, [pc, #120]	; (8004130 <SystemInit+0xd4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 030f 	bic.w	r3, r3, #15
 80040be:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <SystemInit+0xd4>)
 80040c0:	f043 0303 	orr.w	r3, r3, #3
 80040c4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80040c6:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <SystemInit+0xd8>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80040cc:	4b19      	ldr	r3, [pc, #100]	; (8004134 <SystemInit+0xd8>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80040d2:	4b18      	ldr	r3, [pc, #96]	; (8004134 <SystemInit+0xd8>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80040d8:	4b16      	ldr	r3, [pc, #88]	; (8004134 <SystemInit+0xd8>)
 80040da:	4a18      	ldr	r2, [pc, #96]	; (800413c <SystemInit+0xe0>)
 80040dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80040de:	4b15      	ldr	r3, [pc, #84]	; (8004134 <SystemInit+0xd8>)
 80040e0:	4a17      	ldr	r2, [pc, #92]	; (8004140 <SystemInit+0xe4>)
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80040e4:	4b13      	ldr	r3, [pc, #76]	; (8004134 <SystemInit+0xd8>)
 80040e6:	4a17      	ldr	r2, [pc, #92]	; (8004144 <SystemInit+0xe8>)
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80040ea:	4b12      	ldr	r3, [pc, #72]	; (8004134 <SystemInit+0xd8>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80040f0:	4b10      	ldr	r3, [pc, #64]	; (8004134 <SystemInit+0xd8>)
 80040f2:	4a14      	ldr	r2, [pc, #80]	; (8004144 <SystemInit+0xe8>)
 80040f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80040f6:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <SystemInit+0xd8>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80040fc:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <SystemInit+0xd8>)
 80040fe:	4a11      	ldr	r2, [pc, #68]	; (8004144 <SystemInit+0xe8>)
 8004100:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004102:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <SystemInit+0xd8>)
 8004104:	2200      	movs	r2, #0
 8004106:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004108:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <SystemInit+0xd8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a09      	ldr	r2, [pc, #36]	; (8004134 <SystemInit+0xd8>)
 800410e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004112:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004114:	4b07      	ldr	r3, [pc, #28]	; (8004134 <SystemInit+0xd8>)
 8004116:	2200      	movs	r2, #0
 8004118:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800411a:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <SystemInit+0xec>)
 800411c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004120:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004122:	bf00      	nop
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	e000ed00 	.word	0xe000ed00
 8004130:	52002000 	.word	0x52002000
 8004134:	58024400 	.word	0x58024400
 8004138:	eaf6ed7f 	.word	0xeaf6ed7f
 800413c:	02020200 	.word	0x02020200
 8004140:	01ff0000 	.word	0x01ff0000
 8004144:	01010280 	.word	0x01010280
 8004148:	52004000 	.word	0x52004000

0800414c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004150:	4b22      	ldr	r3, [pc, #136]	; (80041dc <MX_USART1_UART_Init+0x90>)
 8004152:	4a23      	ldr	r2, [pc, #140]	; (80041e0 <MX_USART1_UART_Init+0x94>)
 8004154:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004156:	4b21      	ldr	r3, [pc, #132]	; (80041dc <MX_USART1_UART_Init+0x90>)
 8004158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800415c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800415e:	4b1f      	ldr	r3, [pc, #124]	; (80041dc <MX_USART1_UART_Init+0x90>)
 8004160:	2200      	movs	r2, #0
 8004162:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004164:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <MX_USART1_UART_Init+0x90>)
 8004166:	2200      	movs	r2, #0
 8004168:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800416a:	4b1c      	ldr	r3, [pc, #112]	; (80041dc <MX_USART1_UART_Init+0x90>)
 800416c:	2200      	movs	r2, #0
 800416e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004170:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <MX_USART1_UART_Init+0x90>)
 8004172:	220c      	movs	r2, #12
 8004174:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004176:	4b19      	ldr	r3, [pc, #100]	; (80041dc <MX_USART1_UART_Init+0x90>)
 8004178:	2200      	movs	r2, #0
 800417a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800417c:	4b17      	ldr	r3, [pc, #92]	; (80041dc <MX_USART1_UART_Init+0x90>)
 800417e:	2200      	movs	r2, #0
 8004180:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004182:	4b16      	ldr	r3, [pc, #88]	; (80041dc <MX_USART1_UART_Init+0x90>)
 8004184:	2200      	movs	r2, #0
 8004186:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004188:	4b14      	ldr	r3, [pc, #80]	; (80041dc <MX_USART1_UART_Init+0x90>)
 800418a:	2200      	movs	r2, #0
 800418c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800418e:	4b13      	ldr	r3, [pc, #76]	; (80041dc <MX_USART1_UART_Init+0x90>)
 8004190:	2200      	movs	r2, #0
 8004192:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004194:	4811      	ldr	r0, [pc, #68]	; (80041dc <MX_USART1_UART_Init+0x90>)
 8004196:	f009 f9ae 	bl	800d4f6 <HAL_UART_Init>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80041a0:	f7fd fab4 	bl	800170c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041a4:	2100      	movs	r1, #0
 80041a6:	480d      	ldr	r0, [pc, #52]	; (80041dc <MX_USART1_UART_Init+0x90>)
 80041a8:	f00b f844 	bl	800f234 <HAL_UARTEx_SetTxFifoThreshold>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80041b2:	f7fd faab 	bl	800170c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041b6:	2100      	movs	r1, #0
 80041b8:	4808      	ldr	r0, [pc, #32]	; (80041dc <MX_USART1_UART_Init+0x90>)
 80041ba:	f00b f879 	bl	800f2b0 <HAL_UARTEx_SetRxFifoThreshold>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80041c4:	f7fd faa2 	bl	800170c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80041c8:	4804      	ldr	r0, [pc, #16]	; (80041dc <MX_USART1_UART_Init+0x90>)
 80041ca:	f00a fffa 	bl	800f1c2 <HAL_UARTEx_DisableFifoMode>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80041d4:	f7fd fa9a 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80041d8:	bf00      	nop
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	240dffd8 	.word	0x240dffd8
 80041e0:	40011000 	.word	0x40011000

080041e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b0ba      	sub	sp, #232	; 0xe8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	60da      	str	r2, [r3, #12]
 80041fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041fc:	f107 0310 	add.w	r3, r7, #16
 8004200:	22c0      	movs	r2, #192	; 0xc0
 8004202:	2100      	movs	r1, #0
 8004204:	4618      	mov	r0, r3
 8004206:	f00b fa19 	bl	800f63c <memset>
  if(uartHandle->Instance==USART1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a2b      	ldr	r2, [pc, #172]	; (80042bc <HAL_UART_MspInit+0xd8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d14e      	bne.n	80042b2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004214:	f04f 0201 	mov.w	r2, #1
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004220:	2300      	movs	r3, #0
 8004222:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004226:	f107 0310 	add.w	r3, r7, #16
 800422a:	4618      	mov	r0, r3
 800422c:	f007 f9cc 	bl	800b5c8 <HAL_RCCEx_PeriphCLKConfig>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004236:	f7fd fa69 	bl	800170c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800423a:	4b21      	ldr	r3, [pc, #132]	; (80042c0 <HAL_UART_MspInit+0xdc>)
 800423c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004240:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <HAL_UART_MspInit+0xdc>)
 8004242:	f043 0310 	orr.w	r3, r3, #16
 8004246:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800424a:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <HAL_UART_MspInit+0xdc>)
 800424c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004250:	f003 0310 	and.w	r3, r3, #16
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004258:	4b19      	ldr	r3, [pc, #100]	; (80042c0 <HAL_UART_MspInit+0xdc>)
 800425a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800425e:	4a18      	ldr	r2, [pc, #96]	; (80042c0 <HAL_UART_MspInit+0xdc>)
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004268:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <HAL_UART_MspInit+0xdc>)
 800426a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	60bb      	str	r3, [r7, #8]
 8004274:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8004276:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800427a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800427e:	2302      	movs	r3, #2
 8004280:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004284:	2300      	movs	r3, #0
 8004286:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800428a:	2300      	movs	r3, #0
 800428c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004290:	2307      	movs	r3, #7
 8004292:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004296:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800429a:	4619      	mov	r1, r3
 800429c:	4809      	ldr	r0, [pc, #36]	; (80042c4 <HAL_UART_MspInit+0xe0>)
 800429e:	f004 fc3d 	bl	8008b1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80042a2:	2200      	movs	r2, #0
 80042a4:	2100      	movs	r1, #0
 80042a6:	2025      	movs	r0, #37	; 0x25
 80042a8:	f000 f9c9 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80042ac:	2025      	movs	r0, #37	; 0x25
 80042ae:	f000 f9e0 	bl	8004672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80042b2:	bf00      	nop
 80042b4:	37e8      	adds	r7, #232	; 0xe8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40011000 	.word	0x40011000
 80042c0:	58024400 	.word	0x58024400
 80042c4:	58020000 	.word	0x58020000

080042c8 <Reset_Handler>:
 80042c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004300 <LoopFillZerobss+0xe>
 80042cc:	f7ff fec6 	bl	800405c <SystemInit>
 80042d0:	480c      	ldr	r0, [pc, #48]	; (8004304 <LoopFillZerobss+0x12>)
 80042d2:	490d      	ldr	r1, [pc, #52]	; (8004308 <LoopFillZerobss+0x16>)
 80042d4:	4a0d      	ldr	r2, [pc, #52]	; (800430c <LoopFillZerobss+0x1a>)
 80042d6:	2300      	movs	r3, #0
 80042d8:	e002      	b.n	80042e0 <LoopCopyDataInit>

080042da <CopyDataInit>:
 80042da:	58d4      	ldr	r4, [r2, r3]
 80042dc:	50c4      	str	r4, [r0, r3]
 80042de:	3304      	adds	r3, #4

080042e0 <LoopCopyDataInit>:
 80042e0:	18c4      	adds	r4, r0, r3
 80042e2:	428c      	cmp	r4, r1
 80042e4:	d3f9      	bcc.n	80042da <CopyDataInit>
 80042e6:	4a0a      	ldr	r2, [pc, #40]	; (8004310 <LoopFillZerobss+0x1e>)
 80042e8:	4c0a      	ldr	r4, [pc, #40]	; (8004314 <LoopFillZerobss+0x22>)
 80042ea:	2300      	movs	r3, #0
 80042ec:	e001      	b.n	80042f2 <LoopFillZerobss>

080042ee <FillZerobss>:
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	3204      	adds	r2, #4

080042f2 <LoopFillZerobss>:
 80042f2:	42a2      	cmp	r2, r4
 80042f4:	d3fb      	bcc.n	80042ee <FillZerobss>
 80042f6:	f00b f96f 	bl	800f5d8 <__libc_init_array>
 80042fa:	f7fd f8e1 	bl	80014c0 <main>
 80042fe:	4770      	bx	lr
 8004300:	24100000 	.word	0x24100000
 8004304:	24000000 	.word	0x24000000
 8004308:	240000b8 	.word	0x240000b8
 800430c:	08010e18 	.word	0x08010e18
 8004310:	240000b8 	.word	0x240000b8
 8004314:	240e0080 	.word	0x240e0080

08004318 <ADC_IRQHandler>:
 8004318:	e7fe      	b.n	8004318 <ADC_IRQHandler>
	...

0800431c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004322:	2003      	movs	r0, #3
 8004324:	f000 f980 	bl	8004628 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004328:	f006 ff78 	bl	800b21c <HAL_RCC_GetSysClockFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b15      	ldr	r3, [pc, #84]	; (8004384 <HAL_Init+0x68>)
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	4913      	ldr	r1, [pc, #76]	; (8004388 <HAL_Init+0x6c>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
 8004344:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004346:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <HAL_Init+0x68>)
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	4a0e      	ldr	r2, [pc, #56]	; (8004388 <HAL_Init+0x6c>)
 8004350:	5cd3      	ldrb	r3, [r2, r3]
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
 800435c:	4a0b      	ldr	r2, [pc, #44]	; (800438c <HAL_Init+0x70>)
 800435e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004360:	4a0b      	ldr	r2, [pc, #44]	; (8004390 <HAL_Init+0x74>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004366:	2000      	movs	r0, #0
 8004368:	f000 f814 	bl	8004394 <HAL_InitTick>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e002      	b.n	800437c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004376:	f7ff fdad 	bl	8003ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	58024400 	.word	0x58024400
 8004388:	08010d30 	.word	0x08010d30
 800438c:	24000048 	.word	0x24000048
 8004390:	24000044 	.word	0x24000044

08004394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800439c:	4b15      	ldr	r3, [pc, #84]	; (80043f4 <HAL_InitTick+0x60>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e021      	b.n	80043ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80043a8:	4b13      	ldr	r3, [pc, #76]	; (80043f8 <HAL_InitTick+0x64>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <HAL_InitTick+0x60>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	4619      	mov	r1, r3
 80043b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f965 	bl	800468e <HAL_SYSTICK_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e00e      	b.n	80043ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b0f      	cmp	r3, #15
 80043d2:	d80a      	bhi.n	80043ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043d4:	2200      	movs	r2, #0
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043dc:	f000 f92f 	bl	800463e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043e0:	4a06      	ldr	r2, [pc, #24]	; (80043fc <HAL_InitTick+0x68>)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	e000      	b.n	80043ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	24000050 	.word	0x24000050
 80043f8:	24000044 	.word	0x24000044
 80043fc:	2400004c 	.word	0x2400004c

08004400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <HAL_IncTick+0x20>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <HAL_IncTick+0x24>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4413      	add	r3, r2
 8004410:	4a04      	ldr	r2, [pc, #16]	; (8004424 <HAL_IncTick+0x24>)
 8004412:	6013      	str	r3, [r2, #0]
}
 8004414:	bf00      	nop
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	24000050 	.word	0x24000050
 8004424:	240e006c 	.word	0x240e006c

08004428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return uwTick;
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <HAL_GetTick+0x14>)
 800442e:	681b      	ldr	r3, [r3, #0]
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	240e006c 	.word	0x240e006c

08004440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004448:	f7ff ffee 	bl	8004428 <HAL_GetTick>
 800444c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004458:	d005      	beq.n	8004466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800445a:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <HAL_Delay+0x44>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004466:	bf00      	nop
 8004468:	f7ff ffde 	bl	8004428 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	429a      	cmp	r2, r3
 8004476:	d8f7      	bhi.n	8004468 <HAL_Delay+0x28>
  {
  }
}
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	24000050 	.word	0x24000050

08004488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <__NVIC_SetPriorityGrouping+0x40>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044a4:	4013      	ands	r3, r2
 80044a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <__NVIC_SetPriorityGrouping+0x44>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044b6:	4a04      	ldr	r2, [pc, #16]	; (80044c8 <__NVIC_SetPriorityGrouping+0x40>)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	60d3      	str	r3, [r2, #12]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	e000ed00 	.word	0xe000ed00
 80044cc:	05fa0000 	.word	0x05fa0000

080044d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <__NVIC_GetPriorityGrouping+0x18>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	0a1b      	lsrs	r3, r3, #8
 80044da:	f003 0307 	and.w	r3, r3, #7
}
 80044de:	4618      	mov	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	e000ed00 	.word	0xe000ed00

080044ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80044f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	db0b      	blt.n	8004516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	f003 021f 	and.w	r2, r3, #31
 8004504:	4907      	ldr	r1, [pc, #28]	; (8004524 <__NVIC_EnableIRQ+0x38>)
 8004506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2001      	movs	r0, #1
 800450e:	fa00 f202 	lsl.w	r2, r0, r2
 8004512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	e000e100 	.word	0xe000e100

08004528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	6039      	str	r1, [r7, #0]
 8004532:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004538:	2b00      	cmp	r3, #0
 800453a:	db0a      	blt.n	8004552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	b2da      	uxtb	r2, r3
 8004540:	490c      	ldr	r1, [pc, #48]	; (8004574 <__NVIC_SetPriority+0x4c>)
 8004542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004546:	0112      	lsls	r2, r2, #4
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	440b      	add	r3, r1
 800454c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004550:	e00a      	b.n	8004568 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	4908      	ldr	r1, [pc, #32]	; (8004578 <__NVIC_SetPriority+0x50>)
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	3b04      	subs	r3, #4
 8004560:	0112      	lsls	r2, r2, #4
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	440b      	add	r3, r1
 8004566:	761a      	strb	r2, [r3, #24]
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	e000e100 	.word	0xe000e100
 8004578:	e000ed00 	.word	0xe000ed00

0800457c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800457c:	b480      	push	{r7}
 800457e:	b089      	sub	sp, #36	; 0x24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f1c3 0307 	rsb	r3, r3, #7
 8004596:	2b04      	cmp	r3, #4
 8004598:	bf28      	it	cs
 800459a:	2304      	movcs	r3, #4
 800459c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	3304      	adds	r3, #4
 80045a2:	2b06      	cmp	r3, #6
 80045a4:	d902      	bls.n	80045ac <NVIC_EncodePriority+0x30>
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	3b03      	subs	r3, #3
 80045aa:	e000      	b.n	80045ae <NVIC_EncodePriority+0x32>
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43da      	mvns	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	401a      	ands	r2, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fa01 f303 	lsl.w	r3, r1, r3
 80045ce:	43d9      	mvns	r1, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d4:	4313      	orrs	r3, r2
         );
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3724      	adds	r7, #36	; 0x24
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045f4:	d301      	bcc.n	80045fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045f6:	2301      	movs	r3, #1
 80045f8:	e00f      	b.n	800461a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045fa:	4a0a      	ldr	r2, [pc, #40]	; (8004624 <SysTick_Config+0x40>)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3b01      	subs	r3, #1
 8004600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004602:	210f      	movs	r1, #15
 8004604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004608:	f7ff ff8e 	bl	8004528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <SysTick_Config+0x40>)
 800460e:	2200      	movs	r2, #0
 8004610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004612:	4b04      	ldr	r3, [pc, #16]	; (8004624 <SysTick_Config+0x40>)
 8004614:	2207      	movs	r2, #7
 8004616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	e000e010 	.word	0xe000e010

08004628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ff29 	bl	8004488 <__NVIC_SetPriorityGrouping>
}
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b086      	sub	sp, #24
 8004642:	af00      	add	r7, sp, #0
 8004644:	4603      	mov	r3, r0
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
 800464a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800464c:	f7ff ff40 	bl	80044d0 <__NVIC_GetPriorityGrouping>
 8004650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	68b9      	ldr	r1, [r7, #8]
 8004656:	6978      	ldr	r0, [r7, #20]
 8004658:	f7ff ff90 	bl	800457c <NVIC_EncodePriority>
 800465c:	4602      	mov	r2, r0
 800465e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004662:	4611      	mov	r1, r2
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff ff5f 	bl	8004528 <__NVIC_SetPriority>
}
 800466a:	bf00      	nop
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	4603      	mov	r3, r0
 800467a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800467c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff ff33 	bl	80044ec <__NVIC_EnableIRQ>
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff ffa4 	bl	80045e4 <SysTick_Config>
 800469c:	4603      	mov	r3, r0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e069      	b.n	800478e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d102      	bne.n	80046cc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7fc f818 	bl	80006fc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6819      	ldr	r1, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b2a      	ldr	r3, [pc, #168]	; (8004798 <HAL_DCMI_Init+0xf0>)
 80046ee:	400b      	ands	r3, r1
 80046f0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6819      	ldr	r1, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004706:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004712:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800471e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800472a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8004736:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b10      	cmp	r3, #16
 8004746:	d112      	bne.n	800476e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	7f1b      	ldrb	r3, [r3, #28]
 800474c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	7f5b      	ldrb	r3, [r3, #29]
 8004752:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004754:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	7f9b      	ldrb	r3, [r3, #30]
 800475a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800475c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	7fdb      	ldrb	r3, [r3, #31]
 8004764:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800476a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800476c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 021e 	orr.w	r2, r2, #30
 800477c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	ffe0f007 	.word	0xffe0f007

0800479c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af02      	add	r7, sp, #8
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_DCMI_Start_DMA+0x1c>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e0ab      	b.n	8004910 <HAL_DCMI_Start_DMA+0x174>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047d6:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0202 	bic.w	r2, r2, #2
 80047e6:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6819      	ldr	r1, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fc:	4a46      	ldr	r2, [pc, #280]	; (8004918 <HAL_DCMI_Start_DMA+0x17c>)
 80047fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004804:	4a45      	ldr	r2, [pc, #276]	; (800491c <HAL_DCMI_Start_DMA+0x180>)
 8004806:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480c:	2200      	movs	r2, #0
 800480e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800482e:	d219      	bcs.n	8004864 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3328      	adds	r3, #40	; 0x28
 800483a:	4619      	mov	r1, r3
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	f000 fd90 	bl	8005364 <HAL_DMA_Start_IT>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d055      	beq.n	80048f6 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2240      	movs	r2, #64	; 0x40
 800484e:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e055      	b.n	8004910 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004868:	4a2b      	ldr	r2, [pc, #172]	; (8004918 <HAL_DCMI_Start_DMA+0x17c>)
 800486a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2201      	movs	r2, #1
 8004870:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800487e:	e009      	b.n	8004894 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004884:	085a      	lsrs	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	005a      	lsls	r2, r3, #1
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489c:	d2f0      	bcs.n	8004880 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	1e9a      	subs	r2, r3, #2
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	4413      	add	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3328      	adds	r3, #40	; 0x28
 80048c6:	4619      	mov	r1, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	f003 fc73 	bl	80081bc <HAL_DMAEx_MultiBufferStart_IT>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00c      	beq.n	80048f6 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2240      	movs	r2, #64	; 0x40
 80048e0:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e00c      	b.n	8004910 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0201 	orr.w	r2, r2, #1
 8004904:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	08004ae5 	.word	0x08004ae5
 800491c:	08004c0b 	.word	0x08004c0b

08004920 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8004928:	4b2b      	ldr	r3, [pc, #172]	; (80049d8 <HAL_DCMI_Stop+0xb8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a2b      	ldr	r2, [pc, #172]	; (80049dc <HAL_DCMI_Stop+0xbc>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	0a5b      	lsrs	r3, r3, #9
 8004934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004938:	fb02 f303 	mul.w	r3, r2, r3
 800493c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_DCMI_Stop+0x30>
 800494c:	2302      	movs	r3, #2
 800494e:	e03f      	b.n	80049d0 <HAL_DCMI_Stop+0xb0>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	3b01      	subs	r3, #1
 8004974:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d108      	bne.n	800498e <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004980:	f043 0220 	orr.w	r2, r3, #32
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	72fb      	strb	r3, [r7, #11]
      break;
 800498c:	e006      	b.n	800499c <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e9      	bne.n	8004970 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049aa:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 ff41 	bl	8005838 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 80049ce:	7afb      	ldrb	r3, [r7, #11]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	24000044 	.word	0x24000044
 80049dc:	10624dd3 	.word	0x10624dd3

080049e0 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d016      	beq.n	8004a28 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2204      	movs	r2, #4
 8004a00:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a06:	f043 0202 	orr.w	r2, r3, #2
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2204      	movs	r2, #4
 8004a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1a:	4a31      	ldr	r2, [pc, #196]	; (8004ae0 <HAL_DCMI_IRQHandler+0x100>)
 8004a1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 fa26 	bl	8005e74 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d016      	beq.n	8004a60 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2202      	movs	r2, #2
 8004a38:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3e:	f043 0201 	orr.w	r2, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2204      	movs	r2, #4
 8004a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a52:	4a23      	ldr	r2, [pc, #140]	; (8004ae0 <HAL_DCMI_IRQHandler+0x100>)
 8004a54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 fa0a 	bl	8005e74 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 0310 	and.w	r3, r3, #16
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d006      	beq.n	8004a78 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2210      	movs	r2, #16
 8004a70:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff f93c 	bl	8003cf0 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d006      	beq.n	8004a90 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2208      	movs	r2, #8
 8004a88:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff f946 	bl	8003d1c <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d01d      	beq.n	8004ad6 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d107      	bne.n	8004ab8 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 021e 	bic.w	r2, r2, #30
 8004ab6:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0201 	bic.w	r2, r2, #1
 8004ac6:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2201      	movs	r2, #1
 8004ace:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff f918 	bl	8003d06 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004ad6:	bf00      	nop
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	08004c0b 	.word	0x08004c0b

08004ae4 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d043      	beq.n	8004b82 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b06:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d118      	bne.n	8004b46 <DCMI_DMAXferCplt+0x62>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d015      	beq.n	8004b46 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2c:	00da      	lsls	r2, r3, #3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	4413      	add	r3, r2
 8004b32:	2200      	movs	r2, #0
 8004b34:	4619      	mov	r1, r3
 8004b36:	f003 fe9f 	bl	8008878 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	1e5a      	subs	r2, r3, #1
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	639a      	str	r2, [r3, #56]	; 0x38
 8004b44:	e044      	b.n	8004bd0 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d13c      	bne.n	8004bd0 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b68:	00da      	lsls	r2, r3, #3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	2201      	movs	r2, #1
 8004b70:	4619      	mov	r1, r3
 8004b72:	f003 fe81 	bl	8008878 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	1e5a      	subs	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38
 8004b80:	e026      	b.n	8004bd0 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d006      	beq.n	8004ba0 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b9c:	60da      	str	r2, [r3, #12]
 8004b9e:	e017      	b.n	8004bd0 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10f      	bne.n	8004bd0 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb4:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bba:	0099      	lsls	r1, r3, #2
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d112      	bne.n	8004c02 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d103      	bne.n	8004c02 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8004c02:	bf00      	nop
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d009      	beq.n	8004c36 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff f87b 	bl	8003d32 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8004c3c:	bf00      	nop
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004c4c:	f7ff fbec 	bl	8004428 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e37f      	b.n	800535c <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a66      	ldr	r2, [pc, #408]	; (8004dfc <HAL_DMA_Init+0x1b8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d04a      	beq.n	8004cfc <HAL_DMA_Init+0xb8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a65      	ldr	r2, [pc, #404]	; (8004e00 <HAL_DMA_Init+0x1bc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d045      	beq.n	8004cfc <HAL_DMA_Init+0xb8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a63      	ldr	r2, [pc, #396]	; (8004e04 <HAL_DMA_Init+0x1c0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d040      	beq.n	8004cfc <HAL_DMA_Init+0xb8>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a62      	ldr	r2, [pc, #392]	; (8004e08 <HAL_DMA_Init+0x1c4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d03b      	beq.n	8004cfc <HAL_DMA_Init+0xb8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a60      	ldr	r2, [pc, #384]	; (8004e0c <HAL_DMA_Init+0x1c8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d036      	beq.n	8004cfc <HAL_DMA_Init+0xb8>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a5f      	ldr	r2, [pc, #380]	; (8004e10 <HAL_DMA_Init+0x1cc>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d031      	beq.n	8004cfc <HAL_DMA_Init+0xb8>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a5d      	ldr	r2, [pc, #372]	; (8004e14 <HAL_DMA_Init+0x1d0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d02c      	beq.n	8004cfc <HAL_DMA_Init+0xb8>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a5c      	ldr	r2, [pc, #368]	; (8004e18 <HAL_DMA_Init+0x1d4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d027      	beq.n	8004cfc <HAL_DMA_Init+0xb8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a5a      	ldr	r2, [pc, #360]	; (8004e1c <HAL_DMA_Init+0x1d8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d022      	beq.n	8004cfc <HAL_DMA_Init+0xb8>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a59      	ldr	r2, [pc, #356]	; (8004e20 <HAL_DMA_Init+0x1dc>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d01d      	beq.n	8004cfc <HAL_DMA_Init+0xb8>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a57      	ldr	r2, [pc, #348]	; (8004e24 <HAL_DMA_Init+0x1e0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d018      	beq.n	8004cfc <HAL_DMA_Init+0xb8>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a56      	ldr	r2, [pc, #344]	; (8004e28 <HAL_DMA_Init+0x1e4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d013      	beq.n	8004cfc <HAL_DMA_Init+0xb8>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a54      	ldr	r2, [pc, #336]	; (8004e2c <HAL_DMA_Init+0x1e8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00e      	beq.n	8004cfc <HAL_DMA_Init+0xb8>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a53      	ldr	r2, [pc, #332]	; (8004e30 <HAL_DMA_Init+0x1ec>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d009      	beq.n	8004cfc <HAL_DMA_Init+0xb8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a51      	ldr	r2, [pc, #324]	; (8004e34 <HAL_DMA_Init+0x1f0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <HAL_DMA_Init+0xb8>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a50      	ldr	r2, [pc, #320]	; (8004e38 <HAL_DMA_Init+0x1f4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d101      	bne.n	8004d00 <HAL_DMA_Init+0xbc>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <HAL_DMA_Init+0xbe>
 8004d00:	2300      	movs	r3, #0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 813c 	beq.w	8004f80 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a37      	ldr	r2, [pc, #220]	; (8004dfc <HAL_DMA_Init+0x1b8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d04a      	beq.n	8004db8 <HAL_DMA_Init+0x174>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a36      	ldr	r2, [pc, #216]	; (8004e00 <HAL_DMA_Init+0x1bc>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d045      	beq.n	8004db8 <HAL_DMA_Init+0x174>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a34      	ldr	r2, [pc, #208]	; (8004e04 <HAL_DMA_Init+0x1c0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d040      	beq.n	8004db8 <HAL_DMA_Init+0x174>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a33      	ldr	r2, [pc, #204]	; (8004e08 <HAL_DMA_Init+0x1c4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d03b      	beq.n	8004db8 <HAL_DMA_Init+0x174>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a31      	ldr	r2, [pc, #196]	; (8004e0c <HAL_DMA_Init+0x1c8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d036      	beq.n	8004db8 <HAL_DMA_Init+0x174>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a30      	ldr	r2, [pc, #192]	; (8004e10 <HAL_DMA_Init+0x1cc>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d031      	beq.n	8004db8 <HAL_DMA_Init+0x174>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a2e      	ldr	r2, [pc, #184]	; (8004e14 <HAL_DMA_Init+0x1d0>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d02c      	beq.n	8004db8 <HAL_DMA_Init+0x174>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a2d      	ldr	r2, [pc, #180]	; (8004e18 <HAL_DMA_Init+0x1d4>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d027      	beq.n	8004db8 <HAL_DMA_Init+0x174>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a2b      	ldr	r2, [pc, #172]	; (8004e1c <HAL_DMA_Init+0x1d8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d022      	beq.n	8004db8 <HAL_DMA_Init+0x174>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a2a      	ldr	r2, [pc, #168]	; (8004e20 <HAL_DMA_Init+0x1dc>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d01d      	beq.n	8004db8 <HAL_DMA_Init+0x174>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a28      	ldr	r2, [pc, #160]	; (8004e24 <HAL_DMA_Init+0x1e0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d018      	beq.n	8004db8 <HAL_DMA_Init+0x174>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a27      	ldr	r2, [pc, #156]	; (8004e28 <HAL_DMA_Init+0x1e4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d013      	beq.n	8004db8 <HAL_DMA_Init+0x174>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a25      	ldr	r2, [pc, #148]	; (8004e2c <HAL_DMA_Init+0x1e8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00e      	beq.n	8004db8 <HAL_DMA_Init+0x174>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a24      	ldr	r2, [pc, #144]	; (8004e30 <HAL_DMA_Init+0x1ec>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d009      	beq.n	8004db8 <HAL_DMA_Init+0x174>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a22      	ldr	r2, [pc, #136]	; (8004e34 <HAL_DMA_Init+0x1f0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d004      	beq.n	8004db8 <HAL_DMA_Init+0x174>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a21      	ldr	r2, [pc, #132]	; (8004e38 <HAL_DMA_Init+0x1f4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d108      	bne.n	8004dca <HAL_DMA_Init+0x186>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0201 	bic.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	e007      	b.n	8004dda <HAL_DMA_Init+0x196>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0201 	bic.w	r2, r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004dda:	e02f      	b.n	8004e3c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ddc:	f7ff fb24 	bl	8004428 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b05      	cmp	r3, #5
 8004de8:	d928      	bls.n	8004e3c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2203      	movs	r2, #3
 8004df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e2af      	b.n	800535c <HAL_DMA_Init+0x718>
 8004dfc:	40020010 	.word	0x40020010
 8004e00:	40020028 	.word	0x40020028
 8004e04:	40020040 	.word	0x40020040
 8004e08:	40020058 	.word	0x40020058
 8004e0c:	40020070 	.word	0x40020070
 8004e10:	40020088 	.word	0x40020088
 8004e14:	400200a0 	.word	0x400200a0
 8004e18:	400200b8 	.word	0x400200b8
 8004e1c:	40020410 	.word	0x40020410
 8004e20:	40020428 	.word	0x40020428
 8004e24:	40020440 	.word	0x40020440
 8004e28:	40020458 	.word	0x40020458
 8004e2c:	40020470 	.word	0x40020470
 8004e30:	40020488 	.word	0x40020488
 8004e34:	400204a0 	.word	0x400204a0
 8004e38:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1c8      	bne.n	8004ddc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4b73      	ldr	r3, [pc, #460]	; (8005024 <HAL_DMA_Init+0x3e0>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004e62:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e7a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d107      	bne.n	8004ea0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b28      	cmp	r3, #40	; 0x28
 8004ea6:	d903      	bls.n	8004eb0 <HAL_DMA_Init+0x26c>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b2e      	cmp	r3, #46	; 0x2e
 8004eae:	d91f      	bls.n	8004ef0 <HAL_DMA_Init+0x2ac>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b3e      	cmp	r3, #62	; 0x3e
 8004eb6:	d903      	bls.n	8004ec0 <HAL_DMA_Init+0x27c>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b42      	cmp	r3, #66	; 0x42
 8004ebe:	d917      	bls.n	8004ef0 <HAL_DMA_Init+0x2ac>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b46      	cmp	r3, #70	; 0x46
 8004ec6:	d903      	bls.n	8004ed0 <HAL_DMA_Init+0x28c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2b48      	cmp	r3, #72	; 0x48
 8004ece:	d90f      	bls.n	8004ef0 <HAL_DMA_Init+0x2ac>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b4e      	cmp	r3, #78	; 0x4e
 8004ed6:	d903      	bls.n	8004ee0 <HAL_DMA_Init+0x29c>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b52      	cmp	r3, #82	; 0x52
 8004ede:	d907      	bls.n	8004ef0 <HAL_DMA_Init+0x2ac>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b73      	cmp	r3, #115	; 0x73
 8004ee6:	d905      	bls.n	8004ef4 <HAL_DMA_Init+0x2b0>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b77      	cmp	r3, #119	; 0x77
 8004eee:	d801      	bhi.n	8004ef4 <HAL_DMA_Init+0x2b0>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <HAL_DMA_Init+0x2b2>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f00:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f023 0307 	bic.w	r3, r3, #7
 8004f18:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d117      	bne.n	8004f5c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00e      	beq.n	8004f5c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f002 fbd6 	bl	80076f0 <DMA_CheckFifoParam>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2240      	movs	r2, #64	; 0x40
 8004f4e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e1ff      	b.n	800535c <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f002 fb11 	bl	800758c <DMA_CalcBaseAndBitshift>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f72:	f003 031f 	and.w	r3, r3, #31
 8004f76:	223f      	movs	r2, #63	; 0x3f
 8004f78:	409a      	lsls	r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	609a      	str	r2, [r3, #8]
 8004f7e:	e0fe      	b.n	800517e <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a28      	ldr	r2, [pc, #160]	; (8005028 <HAL_DMA_Init+0x3e4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d04a      	beq.n	8005020 <HAL_DMA_Init+0x3dc>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a27      	ldr	r2, [pc, #156]	; (800502c <HAL_DMA_Init+0x3e8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d045      	beq.n	8005020 <HAL_DMA_Init+0x3dc>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a25      	ldr	r2, [pc, #148]	; (8005030 <HAL_DMA_Init+0x3ec>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d040      	beq.n	8005020 <HAL_DMA_Init+0x3dc>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a24      	ldr	r2, [pc, #144]	; (8005034 <HAL_DMA_Init+0x3f0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d03b      	beq.n	8005020 <HAL_DMA_Init+0x3dc>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a22      	ldr	r2, [pc, #136]	; (8005038 <HAL_DMA_Init+0x3f4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d036      	beq.n	8005020 <HAL_DMA_Init+0x3dc>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a21      	ldr	r2, [pc, #132]	; (800503c <HAL_DMA_Init+0x3f8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d031      	beq.n	8005020 <HAL_DMA_Init+0x3dc>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1f      	ldr	r2, [pc, #124]	; (8005040 <HAL_DMA_Init+0x3fc>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d02c      	beq.n	8005020 <HAL_DMA_Init+0x3dc>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a1e      	ldr	r2, [pc, #120]	; (8005044 <HAL_DMA_Init+0x400>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d027      	beq.n	8005020 <HAL_DMA_Init+0x3dc>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a1c      	ldr	r2, [pc, #112]	; (8005048 <HAL_DMA_Init+0x404>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d022      	beq.n	8005020 <HAL_DMA_Init+0x3dc>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1b      	ldr	r2, [pc, #108]	; (800504c <HAL_DMA_Init+0x408>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d01d      	beq.n	8005020 <HAL_DMA_Init+0x3dc>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a19      	ldr	r2, [pc, #100]	; (8005050 <HAL_DMA_Init+0x40c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d018      	beq.n	8005020 <HAL_DMA_Init+0x3dc>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a18      	ldr	r2, [pc, #96]	; (8005054 <HAL_DMA_Init+0x410>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d013      	beq.n	8005020 <HAL_DMA_Init+0x3dc>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a16      	ldr	r2, [pc, #88]	; (8005058 <HAL_DMA_Init+0x414>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00e      	beq.n	8005020 <HAL_DMA_Init+0x3dc>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a15      	ldr	r2, [pc, #84]	; (800505c <HAL_DMA_Init+0x418>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d009      	beq.n	8005020 <HAL_DMA_Init+0x3dc>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a13      	ldr	r2, [pc, #76]	; (8005060 <HAL_DMA_Init+0x41c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d004      	beq.n	8005020 <HAL_DMA_Init+0x3dc>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a12      	ldr	r2, [pc, #72]	; (8005064 <HAL_DMA_Init+0x420>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d123      	bne.n	8005068 <HAL_DMA_Init+0x424>
 8005020:	2301      	movs	r3, #1
 8005022:	e022      	b.n	800506a <HAL_DMA_Init+0x426>
 8005024:	fe10803f 	.word	0xfe10803f
 8005028:	48022c08 	.word	0x48022c08
 800502c:	48022c1c 	.word	0x48022c1c
 8005030:	48022c30 	.word	0x48022c30
 8005034:	48022c44 	.word	0x48022c44
 8005038:	48022c58 	.word	0x48022c58
 800503c:	48022c6c 	.word	0x48022c6c
 8005040:	48022c80 	.word	0x48022c80
 8005044:	48022c94 	.word	0x48022c94
 8005048:	58025408 	.word	0x58025408
 800504c:	5802541c 	.word	0x5802541c
 8005050:	58025430 	.word	0x58025430
 8005054:	58025444 	.word	0x58025444
 8005058:	58025458 	.word	0x58025458
 800505c:	5802546c 	.word	0x5802546c
 8005060:	58025480 	.word	0x58025480
 8005064:	58025494 	.word	0x58025494
 8005068:	2300      	movs	r3, #0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d07e      	beq.n	800516c <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a80      	ldr	r2, [pc, #512]	; (8005274 <HAL_DMA_Init+0x630>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d021      	beq.n	80050bc <HAL_DMA_Init+0x478>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a7e      	ldr	r2, [pc, #504]	; (8005278 <HAL_DMA_Init+0x634>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d01c      	beq.n	80050bc <HAL_DMA_Init+0x478>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a7d      	ldr	r2, [pc, #500]	; (800527c <HAL_DMA_Init+0x638>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d017      	beq.n	80050bc <HAL_DMA_Init+0x478>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a7b      	ldr	r2, [pc, #492]	; (8005280 <HAL_DMA_Init+0x63c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d012      	beq.n	80050bc <HAL_DMA_Init+0x478>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a7a      	ldr	r2, [pc, #488]	; (8005284 <HAL_DMA_Init+0x640>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00d      	beq.n	80050bc <HAL_DMA_Init+0x478>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a78      	ldr	r2, [pc, #480]	; (8005288 <HAL_DMA_Init+0x644>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d008      	beq.n	80050bc <HAL_DMA_Init+0x478>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a77      	ldr	r2, [pc, #476]	; (800528c <HAL_DMA_Init+0x648>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <HAL_DMA_Init+0x478>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a75      	ldr	r2, [pc, #468]	; (8005290 <HAL_DMA_Init+0x64c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2202      	movs	r2, #2
 80050c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4b6e      	ldr	r3, [pc, #440]	; (8005294 <HAL_DMA_Init+0x650>)
 80050da:	4013      	ands	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	2b40      	cmp	r3, #64	; 0x40
 80050e4:	d008      	beq.n	80050f8 <HAL_DMA_Init+0x4b4>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	2b80      	cmp	r3, #128	; 0x80
 80050ec:	d102      	bne.n	80050f4 <HAL_DMA_Init+0x4b0>
 80050ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050f2:	e002      	b.n	80050fa <HAL_DMA_Init+0x4b6>
 80050f4:	2300      	movs	r3, #0
 80050f6:	e000      	b.n	80050fa <HAL_DMA_Init+0x4b6>
 80050f8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	68d2      	ldr	r2, [r2, #12]
 80050fe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005100:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005108:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005110:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005118:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005120:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005128:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	4b56      	ldr	r3, [pc, #344]	; (8005298 <HAL_DMA_Init+0x654>)
 8005140:	4413      	add	r3, r2
 8005142:	4a56      	ldr	r2, [pc, #344]	; (800529c <HAL_DMA_Init+0x658>)
 8005144:	fba2 2303 	umull	r2, r3, r2, r3
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	009a      	lsls	r2, r3, #2
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f002 fa1b 	bl	800758c <DMA_CalcBaseAndBitshift>
 8005156:	4603      	mov	r3, r0
 8005158:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	2201      	movs	r2, #1
 8005164:	409a      	lsls	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	605a      	str	r2, [r3, #4]
 800516a:	e008      	b.n	800517e <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2240      	movs	r2, #64	; 0x40
 8005170:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2203      	movs	r2, #3
 8005176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e0ee      	b.n	800535c <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a47      	ldr	r2, [pc, #284]	; (80052a0 <HAL_DMA_Init+0x65c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d072      	beq.n	800526e <HAL_DMA_Init+0x62a>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a45      	ldr	r2, [pc, #276]	; (80052a4 <HAL_DMA_Init+0x660>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d06d      	beq.n	800526e <HAL_DMA_Init+0x62a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a44      	ldr	r2, [pc, #272]	; (80052a8 <HAL_DMA_Init+0x664>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d068      	beq.n	800526e <HAL_DMA_Init+0x62a>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a42      	ldr	r2, [pc, #264]	; (80052ac <HAL_DMA_Init+0x668>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d063      	beq.n	800526e <HAL_DMA_Init+0x62a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a41      	ldr	r2, [pc, #260]	; (80052b0 <HAL_DMA_Init+0x66c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d05e      	beq.n	800526e <HAL_DMA_Init+0x62a>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a3f      	ldr	r2, [pc, #252]	; (80052b4 <HAL_DMA_Init+0x670>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d059      	beq.n	800526e <HAL_DMA_Init+0x62a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a3e      	ldr	r2, [pc, #248]	; (80052b8 <HAL_DMA_Init+0x674>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d054      	beq.n	800526e <HAL_DMA_Init+0x62a>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a3c      	ldr	r2, [pc, #240]	; (80052bc <HAL_DMA_Init+0x678>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d04f      	beq.n	800526e <HAL_DMA_Init+0x62a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a3b      	ldr	r2, [pc, #236]	; (80052c0 <HAL_DMA_Init+0x67c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d04a      	beq.n	800526e <HAL_DMA_Init+0x62a>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a39      	ldr	r2, [pc, #228]	; (80052c4 <HAL_DMA_Init+0x680>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d045      	beq.n	800526e <HAL_DMA_Init+0x62a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a38      	ldr	r2, [pc, #224]	; (80052c8 <HAL_DMA_Init+0x684>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d040      	beq.n	800526e <HAL_DMA_Init+0x62a>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a36      	ldr	r2, [pc, #216]	; (80052cc <HAL_DMA_Init+0x688>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d03b      	beq.n	800526e <HAL_DMA_Init+0x62a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a35      	ldr	r2, [pc, #212]	; (80052d0 <HAL_DMA_Init+0x68c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d036      	beq.n	800526e <HAL_DMA_Init+0x62a>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a33      	ldr	r2, [pc, #204]	; (80052d4 <HAL_DMA_Init+0x690>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d031      	beq.n	800526e <HAL_DMA_Init+0x62a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a32      	ldr	r2, [pc, #200]	; (80052d8 <HAL_DMA_Init+0x694>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d02c      	beq.n	800526e <HAL_DMA_Init+0x62a>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a30      	ldr	r2, [pc, #192]	; (80052dc <HAL_DMA_Init+0x698>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d027      	beq.n	800526e <HAL_DMA_Init+0x62a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a14      	ldr	r2, [pc, #80]	; (8005274 <HAL_DMA_Init+0x630>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d022      	beq.n	800526e <HAL_DMA_Init+0x62a>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a12      	ldr	r2, [pc, #72]	; (8005278 <HAL_DMA_Init+0x634>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d01d      	beq.n	800526e <HAL_DMA_Init+0x62a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a11      	ldr	r2, [pc, #68]	; (800527c <HAL_DMA_Init+0x638>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d018      	beq.n	800526e <HAL_DMA_Init+0x62a>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a0f      	ldr	r2, [pc, #60]	; (8005280 <HAL_DMA_Init+0x63c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <HAL_DMA_Init+0x62a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a0e      	ldr	r2, [pc, #56]	; (8005284 <HAL_DMA_Init+0x640>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00e      	beq.n	800526e <HAL_DMA_Init+0x62a>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a0c      	ldr	r2, [pc, #48]	; (8005288 <HAL_DMA_Init+0x644>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d009      	beq.n	800526e <HAL_DMA_Init+0x62a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a0b      	ldr	r2, [pc, #44]	; (800528c <HAL_DMA_Init+0x648>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <HAL_DMA_Init+0x62a>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a09      	ldr	r2, [pc, #36]	; (8005290 <HAL_DMA_Init+0x64c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d138      	bne.n	80052e0 <HAL_DMA_Init+0x69c>
 800526e:	2301      	movs	r3, #1
 8005270:	e037      	b.n	80052e2 <HAL_DMA_Init+0x69e>
 8005272:	bf00      	nop
 8005274:	58025408 	.word	0x58025408
 8005278:	5802541c 	.word	0x5802541c
 800527c:	58025430 	.word	0x58025430
 8005280:	58025444 	.word	0x58025444
 8005284:	58025458 	.word	0x58025458
 8005288:	5802546c 	.word	0x5802546c
 800528c:	58025480 	.word	0x58025480
 8005290:	58025494 	.word	0x58025494
 8005294:	fffe000f 	.word	0xfffe000f
 8005298:	a7fdabf8 	.word	0xa7fdabf8
 800529c:	cccccccd 	.word	0xcccccccd
 80052a0:	40020010 	.word	0x40020010
 80052a4:	40020028 	.word	0x40020028
 80052a8:	40020040 	.word	0x40020040
 80052ac:	40020058 	.word	0x40020058
 80052b0:	40020070 	.word	0x40020070
 80052b4:	40020088 	.word	0x40020088
 80052b8:	400200a0 	.word	0x400200a0
 80052bc:	400200b8 	.word	0x400200b8
 80052c0:	40020410 	.word	0x40020410
 80052c4:	40020428 	.word	0x40020428
 80052c8:	40020440 	.word	0x40020440
 80052cc:	40020458 	.word	0x40020458
 80052d0:	40020470 	.word	0x40020470
 80052d4:	40020488 	.word	0x40020488
 80052d8:	400204a0 	.word	0x400204a0
 80052dc:	400204b8 	.word	0x400204b8
 80052e0:	2300      	movs	r3, #0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d032      	beq.n	800534c <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f002 fa7e 	bl	80077e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b80      	cmp	r3, #128	; 0x80
 80052f2:	d102      	bne.n	80052fa <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800530e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d010      	beq.n	800533a <HAL_DMA_Init+0x6f6>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b08      	cmp	r3, #8
 800531e:	d80c      	bhi.n	800533a <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f002 fafb 	bl	800791c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800532a:	2200      	movs	r2, #0
 800532c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005336:	605a      	str	r2, [r3, #4]
 8005338:	e008      	b.n	800534c <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e226      	b.n	80057ce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <HAL_DMA_Start_IT+0x2a>
 800538a:	2302      	movs	r3, #2
 800538c:	e21f      	b.n	80057ce <HAL_DMA_Start_IT+0x46a>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b01      	cmp	r3, #1
 80053a0:	f040 820a 	bne.w	80057b8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a68      	ldr	r2, [pc, #416]	; (8005558 <HAL_DMA_Start_IT+0x1f4>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d04a      	beq.n	8005452 <HAL_DMA_Start_IT+0xee>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a66      	ldr	r2, [pc, #408]	; (800555c <HAL_DMA_Start_IT+0x1f8>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d045      	beq.n	8005452 <HAL_DMA_Start_IT+0xee>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a65      	ldr	r2, [pc, #404]	; (8005560 <HAL_DMA_Start_IT+0x1fc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d040      	beq.n	8005452 <HAL_DMA_Start_IT+0xee>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a63      	ldr	r2, [pc, #396]	; (8005564 <HAL_DMA_Start_IT+0x200>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d03b      	beq.n	8005452 <HAL_DMA_Start_IT+0xee>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a62      	ldr	r2, [pc, #392]	; (8005568 <HAL_DMA_Start_IT+0x204>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d036      	beq.n	8005452 <HAL_DMA_Start_IT+0xee>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a60      	ldr	r2, [pc, #384]	; (800556c <HAL_DMA_Start_IT+0x208>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d031      	beq.n	8005452 <HAL_DMA_Start_IT+0xee>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a5f      	ldr	r2, [pc, #380]	; (8005570 <HAL_DMA_Start_IT+0x20c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d02c      	beq.n	8005452 <HAL_DMA_Start_IT+0xee>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a5d      	ldr	r2, [pc, #372]	; (8005574 <HAL_DMA_Start_IT+0x210>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d027      	beq.n	8005452 <HAL_DMA_Start_IT+0xee>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a5c      	ldr	r2, [pc, #368]	; (8005578 <HAL_DMA_Start_IT+0x214>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d022      	beq.n	8005452 <HAL_DMA_Start_IT+0xee>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a5a      	ldr	r2, [pc, #360]	; (800557c <HAL_DMA_Start_IT+0x218>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d01d      	beq.n	8005452 <HAL_DMA_Start_IT+0xee>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a59      	ldr	r2, [pc, #356]	; (8005580 <HAL_DMA_Start_IT+0x21c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d018      	beq.n	8005452 <HAL_DMA_Start_IT+0xee>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a57      	ldr	r2, [pc, #348]	; (8005584 <HAL_DMA_Start_IT+0x220>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d013      	beq.n	8005452 <HAL_DMA_Start_IT+0xee>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a56      	ldr	r2, [pc, #344]	; (8005588 <HAL_DMA_Start_IT+0x224>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00e      	beq.n	8005452 <HAL_DMA_Start_IT+0xee>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a54      	ldr	r2, [pc, #336]	; (800558c <HAL_DMA_Start_IT+0x228>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d009      	beq.n	8005452 <HAL_DMA_Start_IT+0xee>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a53      	ldr	r2, [pc, #332]	; (8005590 <HAL_DMA_Start_IT+0x22c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <HAL_DMA_Start_IT+0xee>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a51      	ldr	r2, [pc, #324]	; (8005594 <HAL_DMA_Start_IT+0x230>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d108      	bne.n	8005464 <HAL_DMA_Start_IT+0x100>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0201 	bic.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	e007      	b.n	8005474 <HAL_DMA_Start_IT+0x110>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0201 	bic.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f001 fea2 	bl	80071c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a34      	ldr	r2, [pc, #208]	; (8005558 <HAL_DMA_Start_IT+0x1f4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d04a      	beq.n	8005520 <HAL_DMA_Start_IT+0x1bc>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a33      	ldr	r2, [pc, #204]	; (800555c <HAL_DMA_Start_IT+0x1f8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d045      	beq.n	8005520 <HAL_DMA_Start_IT+0x1bc>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a31      	ldr	r2, [pc, #196]	; (8005560 <HAL_DMA_Start_IT+0x1fc>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d040      	beq.n	8005520 <HAL_DMA_Start_IT+0x1bc>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a30      	ldr	r2, [pc, #192]	; (8005564 <HAL_DMA_Start_IT+0x200>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d03b      	beq.n	8005520 <HAL_DMA_Start_IT+0x1bc>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a2e      	ldr	r2, [pc, #184]	; (8005568 <HAL_DMA_Start_IT+0x204>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d036      	beq.n	8005520 <HAL_DMA_Start_IT+0x1bc>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a2d      	ldr	r2, [pc, #180]	; (800556c <HAL_DMA_Start_IT+0x208>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d031      	beq.n	8005520 <HAL_DMA_Start_IT+0x1bc>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a2b      	ldr	r2, [pc, #172]	; (8005570 <HAL_DMA_Start_IT+0x20c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d02c      	beq.n	8005520 <HAL_DMA_Start_IT+0x1bc>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a2a      	ldr	r2, [pc, #168]	; (8005574 <HAL_DMA_Start_IT+0x210>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d027      	beq.n	8005520 <HAL_DMA_Start_IT+0x1bc>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a28      	ldr	r2, [pc, #160]	; (8005578 <HAL_DMA_Start_IT+0x214>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d022      	beq.n	8005520 <HAL_DMA_Start_IT+0x1bc>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a27      	ldr	r2, [pc, #156]	; (800557c <HAL_DMA_Start_IT+0x218>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d01d      	beq.n	8005520 <HAL_DMA_Start_IT+0x1bc>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a25      	ldr	r2, [pc, #148]	; (8005580 <HAL_DMA_Start_IT+0x21c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d018      	beq.n	8005520 <HAL_DMA_Start_IT+0x1bc>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a24      	ldr	r2, [pc, #144]	; (8005584 <HAL_DMA_Start_IT+0x220>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d013      	beq.n	8005520 <HAL_DMA_Start_IT+0x1bc>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a22      	ldr	r2, [pc, #136]	; (8005588 <HAL_DMA_Start_IT+0x224>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00e      	beq.n	8005520 <HAL_DMA_Start_IT+0x1bc>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a21      	ldr	r2, [pc, #132]	; (800558c <HAL_DMA_Start_IT+0x228>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d009      	beq.n	8005520 <HAL_DMA_Start_IT+0x1bc>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a1f      	ldr	r2, [pc, #124]	; (8005590 <HAL_DMA_Start_IT+0x22c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d004      	beq.n	8005520 <HAL_DMA_Start_IT+0x1bc>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a1e      	ldr	r2, [pc, #120]	; (8005594 <HAL_DMA_Start_IT+0x230>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d101      	bne.n	8005524 <HAL_DMA_Start_IT+0x1c0>
 8005520:	2301      	movs	r3, #1
 8005522:	e000      	b.n	8005526 <HAL_DMA_Start_IT+0x1c2>
 8005524:	2300      	movs	r3, #0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d036      	beq.n	8005598 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f023 021e 	bic.w	r2, r3, #30
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f042 0216 	orr.w	r2, r2, #22
 800553c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d03e      	beq.n	80055c4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0208 	orr.w	r2, r2, #8
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	e035      	b.n	80055c4 <HAL_DMA_Start_IT+0x260>
 8005558:	40020010 	.word	0x40020010
 800555c:	40020028 	.word	0x40020028
 8005560:	40020040 	.word	0x40020040
 8005564:	40020058 	.word	0x40020058
 8005568:	40020070 	.word	0x40020070
 800556c:	40020088 	.word	0x40020088
 8005570:	400200a0 	.word	0x400200a0
 8005574:	400200b8 	.word	0x400200b8
 8005578:	40020410 	.word	0x40020410
 800557c:	40020428 	.word	0x40020428
 8005580:	40020440 	.word	0x40020440
 8005584:	40020458 	.word	0x40020458
 8005588:	40020470 	.word	0x40020470
 800558c:	40020488 	.word	0x40020488
 8005590:	400204a0 	.word	0x400204a0
 8005594:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f023 020e 	bic.w	r2, r3, #14
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 020a 	orr.w	r2, r2, #10
 80055aa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0204 	orr.w	r2, r2, #4
 80055c2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a83      	ldr	r2, [pc, #524]	; (80057d8 <HAL_DMA_Start_IT+0x474>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d072      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a82      	ldr	r2, [pc, #520]	; (80057dc <HAL_DMA_Start_IT+0x478>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d06d      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a80      	ldr	r2, [pc, #512]	; (80057e0 <HAL_DMA_Start_IT+0x47c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d068      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a7f      	ldr	r2, [pc, #508]	; (80057e4 <HAL_DMA_Start_IT+0x480>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d063      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a7d      	ldr	r2, [pc, #500]	; (80057e8 <HAL_DMA_Start_IT+0x484>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d05e      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a7c      	ldr	r2, [pc, #496]	; (80057ec <HAL_DMA_Start_IT+0x488>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d059      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a7a      	ldr	r2, [pc, #488]	; (80057f0 <HAL_DMA_Start_IT+0x48c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d054      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a79      	ldr	r2, [pc, #484]	; (80057f4 <HAL_DMA_Start_IT+0x490>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d04f      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a77      	ldr	r2, [pc, #476]	; (80057f8 <HAL_DMA_Start_IT+0x494>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d04a      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a76      	ldr	r2, [pc, #472]	; (80057fc <HAL_DMA_Start_IT+0x498>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d045      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a74      	ldr	r2, [pc, #464]	; (8005800 <HAL_DMA_Start_IT+0x49c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d040      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a73      	ldr	r2, [pc, #460]	; (8005804 <HAL_DMA_Start_IT+0x4a0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d03b      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a71      	ldr	r2, [pc, #452]	; (8005808 <HAL_DMA_Start_IT+0x4a4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d036      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a70      	ldr	r2, [pc, #448]	; (800580c <HAL_DMA_Start_IT+0x4a8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d031      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a6e      	ldr	r2, [pc, #440]	; (8005810 <HAL_DMA_Start_IT+0x4ac>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d02c      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a6d      	ldr	r2, [pc, #436]	; (8005814 <HAL_DMA_Start_IT+0x4b0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d027      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a6b      	ldr	r2, [pc, #428]	; (8005818 <HAL_DMA_Start_IT+0x4b4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d022      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a6a      	ldr	r2, [pc, #424]	; (800581c <HAL_DMA_Start_IT+0x4b8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d01d      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a68      	ldr	r2, [pc, #416]	; (8005820 <HAL_DMA_Start_IT+0x4bc>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d018      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a67      	ldr	r2, [pc, #412]	; (8005824 <HAL_DMA_Start_IT+0x4c0>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d013      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a65      	ldr	r2, [pc, #404]	; (8005828 <HAL_DMA_Start_IT+0x4c4>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00e      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a64      	ldr	r2, [pc, #400]	; (800582c <HAL_DMA_Start_IT+0x4c8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d009      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a62      	ldr	r2, [pc, #392]	; (8005830 <HAL_DMA_Start_IT+0x4cc>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d004      	beq.n	80056b4 <HAL_DMA_Start_IT+0x350>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a61      	ldr	r2, [pc, #388]	; (8005834 <HAL_DMA_Start_IT+0x4d0>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d101      	bne.n	80056b8 <HAL_DMA_Start_IT+0x354>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <HAL_DMA_Start_IT+0x356>
 80056b8:	2300      	movs	r3, #0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d01a      	beq.n	80056f4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d007      	beq.n	80056dc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056da:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d007      	beq.n	80056f4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056f2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a37      	ldr	r2, [pc, #220]	; (80057d8 <HAL_DMA_Start_IT+0x474>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d04a      	beq.n	8005794 <HAL_DMA_Start_IT+0x430>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a36      	ldr	r2, [pc, #216]	; (80057dc <HAL_DMA_Start_IT+0x478>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d045      	beq.n	8005794 <HAL_DMA_Start_IT+0x430>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a34      	ldr	r2, [pc, #208]	; (80057e0 <HAL_DMA_Start_IT+0x47c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d040      	beq.n	8005794 <HAL_DMA_Start_IT+0x430>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a33      	ldr	r2, [pc, #204]	; (80057e4 <HAL_DMA_Start_IT+0x480>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d03b      	beq.n	8005794 <HAL_DMA_Start_IT+0x430>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a31      	ldr	r2, [pc, #196]	; (80057e8 <HAL_DMA_Start_IT+0x484>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d036      	beq.n	8005794 <HAL_DMA_Start_IT+0x430>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a30      	ldr	r2, [pc, #192]	; (80057ec <HAL_DMA_Start_IT+0x488>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d031      	beq.n	8005794 <HAL_DMA_Start_IT+0x430>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a2e      	ldr	r2, [pc, #184]	; (80057f0 <HAL_DMA_Start_IT+0x48c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d02c      	beq.n	8005794 <HAL_DMA_Start_IT+0x430>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a2d      	ldr	r2, [pc, #180]	; (80057f4 <HAL_DMA_Start_IT+0x490>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d027      	beq.n	8005794 <HAL_DMA_Start_IT+0x430>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a2b      	ldr	r2, [pc, #172]	; (80057f8 <HAL_DMA_Start_IT+0x494>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d022      	beq.n	8005794 <HAL_DMA_Start_IT+0x430>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a2a      	ldr	r2, [pc, #168]	; (80057fc <HAL_DMA_Start_IT+0x498>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d01d      	beq.n	8005794 <HAL_DMA_Start_IT+0x430>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a28      	ldr	r2, [pc, #160]	; (8005800 <HAL_DMA_Start_IT+0x49c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d018      	beq.n	8005794 <HAL_DMA_Start_IT+0x430>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a27      	ldr	r2, [pc, #156]	; (8005804 <HAL_DMA_Start_IT+0x4a0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d013      	beq.n	8005794 <HAL_DMA_Start_IT+0x430>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a25      	ldr	r2, [pc, #148]	; (8005808 <HAL_DMA_Start_IT+0x4a4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00e      	beq.n	8005794 <HAL_DMA_Start_IT+0x430>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a24      	ldr	r2, [pc, #144]	; (800580c <HAL_DMA_Start_IT+0x4a8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d009      	beq.n	8005794 <HAL_DMA_Start_IT+0x430>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a22      	ldr	r2, [pc, #136]	; (8005810 <HAL_DMA_Start_IT+0x4ac>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d004      	beq.n	8005794 <HAL_DMA_Start_IT+0x430>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a21      	ldr	r2, [pc, #132]	; (8005814 <HAL_DMA_Start_IT+0x4b0>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d108      	bne.n	80057a6 <HAL_DMA_Start_IT+0x442>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0201 	orr.w	r2, r2, #1
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	e012      	b.n	80057cc <HAL_DMA_Start_IT+0x468>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f042 0201 	orr.w	r2, r2, #1
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	e009      	b.n	80057cc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80057cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	40020010 	.word	0x40020010
 80057dc:	40020028 	.word	0x40020028
 80057e0:	40020040 	.word	0x40020040
 80057e4:	40020058 	.word	0x40020058
 80057e8:	40020070 	.word	0x40020070
 80057ec:	40020088 	.word	0x40020088
 80057f0:	400200a0 	.word	0x400200a0
 80057f4:	400200b8 	.word	0x400200b8
 80057f8:	40020410 	.word	0x40020410
 80057fc:	40020428 	.word	0x40020428
 8005800:	40020440 	.word	0x40020440
 8005804:	40020458 	.word	0x40020458
 8005808:	40020470 	.word	0x40020470
 800580c:	40020488 	.word	0x40020488
 8005810:	400204a0 	.word	0x400204a0
 8005814:	400204b8 	.word	0x400204b8
 8005818:	58025408 	.word	0x58025408
 800581c:	5802541c 	.word	0x5802541c
 8005820:	58025430 	.word	0x58025430
 8005824:	58025444 	.word	0x58025444
 8005828:	58025458 	.word	0x58025458
 800582c:	5802546c 	.word	0x5802546c
 8005830:	58025480 	.word	0x58025480
 8005834:	58025494 	.word	0x58025494

08005838 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005840:	f7fe fdf2 	bl	8004428 <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e2dc      	b.n	8005e0a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d008      	beq.n	800586e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2280      	movs	r2, #128	; 0x80
 8005860:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e2cd      	b.n	8005e0a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a76      	ldr	r2, [pc, #472]	; (8005a4c <HAL_DMA_Abort+0x214>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d04a      	beq.n	800590e <HAL_DMA_Abort+0xd6>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a74      	ldr	r2, [pc, #464]	; (8005a50 <HAL_DMA_Abort+0x218>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d045      	beq.n	800590e <HAL_DMA_Abort+0xd6>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a73      	ldr	r2, [pc, #460]	; (8005a54 <HAL_DMA_Abort+0x21c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d040      	beq.n	800590e <HAL_DMA_Abort+0xd6>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a71      	ldr	r2, [pc, #452]	; (8005a58 <HAL_DMA_Abort+0x220>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d03b      	beq.n	800590e <HAL_DMA_Abort+0xd6>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a70      	ldr	r2, [pc, #448]	; (8005a5c <HAL_DMA_Abort+0x224>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d036      	beq.n	800590e <HAL_DMA_Abort+0xd6>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a6e      	ldr	r2, [pc, #440]	; (8005a60 <HAL_DMA_Abort+0x228>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d031      	beq.n	800590e <HAL_DMA_Abort+0xd6>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a6d      	ldr	r2, [pc, #436]	; (8005a64 <HAL_DMA_Abort+0x22c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d02c      	beq.n	800590e <HAL_DMA_Abort+0xd6>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a6b      	ldr	r2, [pc, #428]	; (8005a68 <HAL_DMA_Abort+0x230>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d027      	beq.n	800590e <HAL_DMA_Abort+0xd6>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a6a      	ldr	r2, [pc, #424]	; (8005a6c <HAL_DMA_Abort+0x234>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d022      	beq.n	800590e <HAL_DMA_Abort+0xd6>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a68      	ldr	r2, [pc, #416]	; (8005a70 <HAL_DMA_Abort+0x238>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d01d      	beq.n	800590e <HAL_DMA_Abort+0xd6>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a67      	ldr	r2, [pc, #412]	; (8005a74 <HAL_DMA_Abort+0x23c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d018      	beq.n	800590e <HAL_DMA_Abort+0xd6>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a65      	ldr	r2, [pc, #404]	; (8005a78 <HAL_DMA_Abort+0x240>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d013      	beq.n	800590e <HAL_DMA_Abort+0xd6>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a64      	ldr	r2, [pc, #400]	; (8005a7c <HAL_DMA_Abort+0x244>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00e      	beq.n	800590e <HAL_DMA_Abort+0xd6>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a62      	ldr	r2, [pc, #392]	; (8005a80 <HAL_DMA_Abort+0x248>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d009      	beq.n	800590e <HAL_DMA_Abort+0xd6>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a61      	ldr	r2, [pc, #388]	; (8005a84 <HAL_DMA_Abort+0x24c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d004      	beq.n	800590e <HAL_DMA_Abort+0xd6>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a5f      	ldr	r2, [pc, #380]	; (8005a88 <HAL_DMA_Abort+0x250>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d101      	bne.n	8005912 <HAL_DMA_Abort+0xda>
 800590e:	2301      	movs	r3, #1
 8005910:	e000      	b.n	8005914 <HAL_DMA_Abort+0xdc>
 8005912:	2300      	movs	r3, #0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d013      	beq.n	8005940 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 021e 	bic.w	r2, r2, #30
 8005926:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695a      	ldr	r2, [r3, #20]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005936:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	e00a      	b.n	8005956 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 020e 	bic.w	r2, r2, #14
 800594e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a3c      	ldr	r2, [pc, #240]	; (8005a4c <HAL_DMA_Abort+0x214>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d072      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a3a      	ldr	r2, [pc, #232]	; (8005a50 <HAL_DMA_Abort+0x218>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d06d      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a39      	ldr	r2, [pc, #228]	; (8005a54 <HAL_DMA_Abort+0x21c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d068      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a37      	ldr	r2, [pc, #220]	; (8005a58 <HAL_DMA_Abort+0x220>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d063      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a36      	ldr	r2, [pc, #216]	; (8005a5c <HAL_DMA_Abort+0x224>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d05e      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a34      	ldr	r2, [pc, #208]	; (8005a60 <HAL_DMA_Abort+0x228>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d059      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a33      	ldr	r2, [pc, #204]	; (8005a64 <HAL_DMA_Abort+0x22c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d054      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a31      	ldr	r2, [pc, #196]	; (8005a68 <HAL_DMA_Abort+0x230>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d04f      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a30      	ldr	r2, [pc, #192]	; (8005a6c <HAL_DMA_Abort+0x234>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d04a      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a2e      	ldr	r2, [pc, #184]	; (8005a70 <HAL_DMA_Abort+0x238>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d045      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a2d      	ldr	r2, [pc, #180]	; (8005a74 <HAL_DMA_Abort+0x23c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d040      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a2b      	ldr	r2, [pc, #172]	; (8005a78 <HAL_DMA_Abort+0x240>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d03b      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a2a      	ldr	r2, [pc, #168]	; (8005a7c <HAL_DMA_Abort+0x244>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d036      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a28      	ldr	r2, [pc, #160]	; (8005a80 <HAL_DMA_Abort+0x248>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d031      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a27      	ldr	r2, [pc, #156]	; (8005a84 <HAL_DMA_Abort+0x24c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d02c      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a25      	ldr	r2, [pc, #148]	; (8005a88 <HAL_DMA_Abort+0x250>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d027      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a24      	ldr	r2, [pc, #144]	; (8005a8c <HAL_DMA_Abort+0x254>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d022      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a22      	ldr	r2, [pc, #136]	; (8005a90 <HAL_DMA_Abort+0x258>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d01d      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a21      	ldr	r2, [pc, #132]	; (8005a94 <HAL_DMA_Abort+0x25c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d018      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a1f      	ldr	r2, [pc, #124]	; (8005a98 <HAL_DMA_Abort+0x260>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d013      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1e      	ldr	r2, [pc, #120]	; (8005a9c <HAL_DMA_Abort+0x264>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d00e      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a1c      	ldr	r2, [pc, #112]	; (8005aa0 <HAL_DMA_Abort+0x268>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d009      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a1b      	ldr	r2, [pc, #108]	; (8005aa4 <HAL_DMA_Abort+0x26c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d004      	beq.n	8005a46 <HAL_DMA_Abort+0x20e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a19      	ldr	r2, [pc, #100]	; (8005aa8 <HAL_DMA_Abort+0x270>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d132      	bne.n	8005aac <HAL_DMA_Abort+0x274>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e031      	b.n	8005aae <HAL_DMA_Abort+0x276>
 8005a4a:	bf00      	nop
 8005a4c:	40020010 	.word	0x40020010
 8005a50:	40020028 	.word	0x40020028
 8005a54:	40020040 	.word	0x40020040
 8005a58:	40020058 	.word	0x40020058
 8005a5c:	40020070 	.word	0x40020070
 8005a60:	40020088 	.word	0x40020088
 8005a64:	400200a0 	.word	0x400200a0
 8005a68:	400200b8 	.word	0x400200b8
 8005a6c:	40020410 	.word	0x40020410
 8005a70:	40020428 	.word	0x40020428
 8005a74:	40020440 	.word	0x40020440
 8005a78:	40020458 	.word	0x40020458
 8005a7c:	40020470 	.word	0x40020470
 8005a80:	40020488 	.word	0x40020488
 8005a84:	400204a0 	.word	0x400204a0
 8005a88:	400204b8 	.word	0x400204b8
 8005a8c:	58025408 	.word	0x58025408
 8005a90:	5802541c 	.word	0x5802541c
 8005a94:	58025430 	.word	0x58025430
 8005a98:	58025444 	.word	0x58025444
 8005a9c:	58025458 	.word	0x58025458
 8005aa0:	5802546c 	.word	0x5802546c
 8005aa4:	58025480 	.word	0x58025480
 8005aa8:	58025494 	.word	0x58025494
 8005aac:	2300      	movs	r3, #0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d007      	beq.n	8005ac2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005abc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ac0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a6d      	ldr	r2, [pc, #436]	; (8005c7c <HAL_DMA_Abort+0x444>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d04a      	beq.n	8005b62 <HAL_DMA_Abort+0x32a>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a6b      	ldr	r2, [pc, #428]	; (8005c80 <HAL_DMA_Abort+0x448>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d045      	beq.n	8005b62 <HAL_DMA_Abort+0x32a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a6a      	ldr	r2, [pc, #424]	; (8005c84 <HAL_DMA_Abort+0x44c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d040      	beq.n	8005b62 <HAL_DMA_Abort+0x32a>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a68      	ldr	r2, [pc, #416]	; (8005c88 <HAL_DMA_Abort+0x450>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d03b      	beq.n	8005b62 <HAL_DMA_Abort+0x32a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a67      	ldr	r2, [pc, #412]	; (8005c8c <HAL_DMA_Abort+0x454>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d036      	beq.n	8005b62 <HAL_DMA_Abort+0x32a>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a65      	ldr	r2, [pc, #404]	; (8005c90 <HAL_DMA_Abort+0x458>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d031      	beq.n	8005b62 <HAL_DMA_Abort+0x32a>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a64      	ldr	r2, [pc, #400]	; (8005c94 <HAL_DMA_Abort+0x45c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d02c      	beq.n	8005b62 <HAL_DMA_Abort+0x32a>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a62      	ldr	r2, [pc, #392]	; (8005c98 <HAL_DMA_Abort+0x460>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d027      	beq.n	8005b62 <HAL_DMA_Abort+0x32a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a61      	ldr	r2, [pc, #388]	; (8005c9c <HAL_DMA_Abort+0x464>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d022      	beq.n	8005b62 <HAL_DMA_Abort+0x32a>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a5f      	ldr	r2, [pc, #380]	; (8005ca0 <HAL_DMA_Abort+0x468>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d01d      	beq.n	8005b62 <HAL_DMA_Abort+0x32a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a5e      	ldr	r2, [pc, #376]	; (8005ca4 <HAL_DMA_Abort+0x46c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d018      	beq.n	8005b62 <HAL_DMA_Abort+0x32a>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a5c      	ldr	r2, [pc, #368]	; (8005ca8 <HAL_DMA_Abort+0x470>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d013      	beq.n	8005b62 <HAL_DMA_Abort+0x32a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a5b      	ldr	r2, [pc, #364]	; (8005cac <HAL_DMA_Abort+0x474>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00e      	beq.n	8005b62 <HAL_DMA_Abort+0x32a>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a59      	ldr	r2, [pc, #356]	; (8005cb0 <HAL_DMA_Abort+0x478>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d009      	beq.n	8005b62 <HAL_DMA_Abort+0x32a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a58      	ldr	r2, [pc, #352]	; (8005cb4 <HAL_DMA_Abort+0x47c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d004      	beq.n	8005b62 <HAL_DMA_Abort+0x32a>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a56      	ldr	r2, [pc, #344]	; (8005cb8 <HAL_DMA_Abort+0x480>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d108      	bne.n	8005b74 <HAL_DMA_Abort+0x33c>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0201 	bic.w	r2, r2, #1
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	e007      	b.n	8005b84 <HAL_DMA_Abort+0x34c>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0201 	bic.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005b84:	e013      	b.n	8005bae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b86:	f7fe fc4f 	bl	8004428 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b05      	cmp	r3, #5
 8005b92:	d90c      	bls.n	8005bae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2220      	movs	r2, #32
 8005b98:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2203      	movs	r2, #3
 8005b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e12d      	b.n	8005e0a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e5      	bne.n	8005b86 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a2f      	ldr	r2, [pc, #188]	; (8005c7c <HAL_DMA_Abort+0x444>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d04a      	beq.n	8005c5a <HAL_DMA_Abort+0x422>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a2d      	ldr	r2, [pc, #180]	; (8005c80 <HAL_DMA_Abort+0x448>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d045      	beq.n	8005c5a <HAL_DMA_Abort+0x422>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a2c      	ldr	r2, [pc, #176]	; (8005c84 <HAL_DMA_Abort+0x44c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d040      	beq.n	8005c5a <HAL_DMA_Abort+0x422>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a2a      	ldr	r2, [pc, #168]	; (8005c88 <HAL_DMA_Abort+0x450>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d03b      	beq.n	8005c5a <HAL_DMA_Abort+0x422>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a29      	ldr	r2, [pc, #164]	; (8005c8c <HAL_DMA_Abort+0x454>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d036      	beq.n	8005c5a <HAL_DMA_Abort+0x422>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a27      	ldr	r2, [pc, #156]	; (8005c90 <HAL_DMA_Abort+0x458>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d031      	beq.n	8005c5a <HAL_DMA_Abort+0x422>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a26      	ldr	r2, [pc, #152]	; (8005c94 <HAL_DMA_Abort+0x45c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d02c      	beq.n	8005c5a <HAL_DMA_Abort+0x422>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a24      	ldr	r2, [pc, #144]	; (8005c98 <HAL_DMA_Abort+0x460>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d027      	beq.n	8005c5a <HAL_DMA_Abort+0x422>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a23      	ldr	r2, [pc, #140]	; (8005c9c <HAL_DMA_Abort+0x464>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d022      	beq.n	8005c5a <HAL_DMA_Abort+0x422>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a21      	ldr	r2, [pc, #132]	; (8005ca0 <HAL_DMA_Abort+0x468>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d01d      	beq.n	8005c5a <HAL_DMA_Abort+0x422>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a20      	ldr	r2, [pc, #128]	; (8005ca4 <HAL_DMA_Abort+0x46c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d018      	beq.n	8005c5a <HAL_DMA_Abort+0x422>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a1e      	ldr	r2, [pc, #120]	; (8005ca8 <HAL_DMA_Abort+0x470>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d013      	beq.n	8005c5a <HAL_DMA_Abort+0x422>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a1d      	ldr	r2, [pc, #116]	; (8005cac <HAL_DMA_Abort+0x474>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00e      	beq.n	8005c5a <HAL_DMA_Abort+0x422>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1b      	ldr	r2, [pc, #108]	; (8005cb0 <HAL_DMA_Abort+0x478>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d009      	beq.n	8005c5a <HAL_DMA_Abort+0x422>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a1a      	ldr	r2, [pc, #104]	; (8005cb4 <HAL_DMA_Abort+0x47c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d004      	beq.n	8005c5a <HAL_DMA_Abort+0x422>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a18      	ldr	r2, [pc, #96]	; (8005cb8 <HAL_DMA_Abort+0x480>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d101      	bne.n	8005c5e <HAL_DMA_Abort+0x426>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <HAL_DMA_Abort+0x428>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d02b      	beq.n	8005cbc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c68:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6e:	f003 031f 	and.w	r3, r3, #31
 8005c72:	223f      	movs	r2, #63	; 0x3f
 8005c74:	409a      	lsls	r2, r3
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	609a      	str	r2, [r3, #8]
 8005c7a:	e02a      	b.n	8005cd2 <HAL_DMA_Abort+0x49a>
 8005c7c:	40020010 	.word	0x40020010
 8005c80:	40020028 	.word	0x40020028
 8005c84:	40020040 	.word	0x40020040
 8005c88:	40020058 	.word	0x40020058
 8005c8c:	40020070 	.word	0x40020070
 8005c90:	40020088 	.word	0x40020088
 8005c94:	400200a0 	.word	0x400200a0
 8005c98:	400200b8 	.word	0x400200b8
 8005c9c:	40020410 	.word	0x40020410
 8005ca0:	40020428 	.word	0x40020428
 8005ca4:	40020440 	.word	0x40020440
 8005ca8:	40020458 	.word	0x40020458
 8005cac:	40020470 	.word	0x40020470
 8005cb0:	40020488 	.word	0x40020488
 8005cb4:	400204a0 	.word	0x400204a0
 8005cb8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	2201      	movs	r2, #1
 8005ccc:	409a      	lsls	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a4f      	ldr	r2, [pc, #316]	; (8005e14 <HAL_DMA_Abort+0x5dc>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d072      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a4d      	ldr	r2, [pc, #308]	; (8005e18 <HAL_DMA_Abort+0x5e0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d06d      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a4c      	ldr	r2, [pc, #304]	; (8005e1c <HAL_DMA_Abort+0x5e4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d068      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a4a      	ldr	r2, [pc, #296]	; (8005e20 <HAL_DMA_Abort+0x5e8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d063      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a49      	ldr	r2, [pc, #292]	; (8005e24 <HAL_DMA_Abort+0x5ec>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d05e      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a47      	ldr	r2, [pc, #284]	; (8005e28 <HAL_DMA_Abort+0x5f0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d059      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a46      	ldr	r2, [pc, #280]	; (8005e2c <HAL_DMA_Abort+0x5f4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d054      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a44      	ldr	r2, [pc, #272]	; (8005e30 <HAL_DMA_Abort+0x5f8>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d04f      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a43      	ldr	r2, [pc, #268]	; (8005e34 <HAL_DMA_Abort+0x5fc>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d04a      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a41      	ldr	r2, [pc, #260]	; (8005e38 <HAL_DMA_Abort+0x600>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d045      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a40      	ldr	r2, [pc, #256]	; (8005e3c <HAL_DMA_Abort+0x604>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d040      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a3e      	ldr	r2, [pc, #248]	; (8005e40 <HAL_DMA_Abort+0x608>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d03b      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a3d      	ldr	r2, [pc, #244]	; (8005e44 <HAL_DMA_Abort+0x60c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d036      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a3b      	ldr	r2, [pc, #236]	; (8005e48 <HAL_DMA_Abort+0x610>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d031      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a3a      	ldr	r2, [pc, #232]	; (8005e4c <HAL_DMA_Abort+0x614>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d02c      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a38      	ldr	r2, [pc, #224]	; (8005e50 <HAL_DMA_Abort+0x618>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d027      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a37      	ldr	r2, [pc, #220]	; (8005e54 <HAL_DMA_Abort+0x61c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d022      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a35      	ldr	r2, [pc, #212]	; (8005e58 <HAL_DMA_Abort+0x620>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d01d      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a34      	ldr	r2, [pc, #208]	; (8005e5c <HAL_DMA_Abort+0x624>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d018      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a32      	ldr	r2, [pc, #200]	; (8005e60 <HAL_DMA_Abort+0x628>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d013      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a31      	ldr	r2, [pc, #196]	; (8005e64 <HAL_DMA_Abort+0x62c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00e      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a2f      	ldr	r2, [pc, #188]	; (8005e68 <HAL_DMA_Abort+0x630>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d009      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a2e      	ldr	r2, [pc, #184]	; (8005e6c <HAL_DMA_Abort+0x634>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d004      	beq.n	8005dc2 <HAL_DMA_Abort+0x58a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a2c      	ldr	r2, [pc, #176]	; (8005e70 <HAL_DMA_Abort+0x638>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d101      	bne.n	8005dc6 <HAL_DMA_Abort+0x58e>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <HAL_DMA_Abort+0x590>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d015      	beq.n	8005df8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005dd4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00c      	beq.n	8005df8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005df6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	40020010 	.word	0x40020010
 8005e18:	40020028 	.word	0x40020028
 8005e1c:	40020040 	.word	0x40020040
 8005e20:	40020058 	.word	0x40020058
 8005e24:	40020070 	.word	0x40020070
 8005e28:	40020088 	.word	0x40020088
 8005e2c:	400200a0 	.word	0x400200a0
 8005e30:	400200b8 	.word	0x400200b8
 8005e34:	40020410 	.word	0x40020410
 8005e38:	40020428 	.word	0x40020428
 8005e3c:	40020440 	.word	0x40020440
 8005e40:	40020458 	.word	0x40020458
 8005e44:	40020470 	.word	0x40020470
 8005e48:	40020488 	.word	0x40020488
 8005e4c:	400204a0 	.word	0x400204a0
 8005e50:	400204b8 	.word	0x400204b8
 8005e54:	58025408 	.word	0x58025408
 8005e58:	5802541c 	.word	0x5802541c
 8005e5c:	58025430 	.word	0x58025430
 8005e60:	58025444 	.word	0x58025444
 8005e64:	58025458 	.word	0x58025458
 8005e68:	5802546c 	.word	0x5802546c
 8005e6c:	58025480 	.word	0x58025480
 8005e70:	58025494 	.word	0x58025494

08005e74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e237      	b.n	80062f6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d004      	beq.n	8005e9c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2280      	movs	r2, #128	; 0x80
 8005e96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e22c      	b.n	80062f6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a5c      	ldr	r2, [pc, #368]	; (8006014 <HAL_DMA_Abort_IT+0x1a0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d04a      	beq.n	8005f3c <HAL_DMA_Abort_IT+0xc8>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a5b      	ldr	r2, [pc, #364]	; (8006018 <HAL_DMA_Abort_IT+0x1a4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d045      	beq.n	8005f3c <HAL_DMA_Abort_IT+0xc8>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a59      	ldr	r2, [pc, #356]	; (800601c <HAL_DMA_Abort_IT+0x1a8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d040      	beq.n	8005f3c <HAL_DMA_Abort_IT+0xc8>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a58      	ldr	r2, [pc, #352]	; (8006020 <HAL_DMA_Abort_IT+0x1ac>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d03b      	beq.n	8005f3c <HAL_DMA_Abort_IT+0xc8>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a56      	ldr	r2, [pc, #344]	; (8006024 <HAL_DMA_Abort_IT+0x1b0>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d036      	beq.n	8005f3c <HAL_DMA_Abort_IT+0xc8>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a55      	ldr	r2, [pc, #340]	; (8006028 <HAL_DMA_Abort_IT+0x1b4>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d031      	beq.n	8005f3c <HAL_DMA_Abort_IT+0xc8>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a53      	ldr	r2, [pc, #332]	; (800602c <HAL_DMA_Abort_IT+0x1b8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d02c      	beq.n	8005f3c <HAL_DMA_Abort_IT+0xc8>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a52      	ldr	r2, [pc, #328]	; (8006030 <HAL_DMA_Abort_IT+0x1bc>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d027      	beq.n	8005f3c <HAL_DMA_Abort_IT+0xc8>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a50      	ldr	r2, [pc, #320]	; (8006034 <HAL_DMA_Abort_IT+0x1c0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d022      	beq.n	8005f3c <HAL_DMA_Abort_IT+0xc8>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a4f      	ldr	r2, [pc, #316]	; (8006038 <HAL_DMA_Abort_IT+0x1c4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d01d      	beq.n	8005f3c <HAL_DMA_Abort_IT+0xc8>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a4d      	ldr	r2, [pc, #308]	; (800603c <HAL_DMA_Abort_IT+0x1c8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d018      	beq.n	8005f3c <HAL_DMA_Abort_IT+0xc8>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a4c      	ldr	r2, [pc, #304]	; (8006040 <HAL_DMA_Abort_IT+0x1cc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d013      	beq.n	8005f3c <HAL_DMA_Abort_IT+0xc8>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a4a      	ldr	r2, [pc, #296]	; (8006044 <HAL_DMA_Abort_IT+0x1d0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00e      	beq.n	8005f3c <HAL_DMA_Abort_IT+0xc8>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a49      	ldr	r2, [pc, #292]	; (8006048 <HAL_DMA_Abort_IT+0x1d4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d009      	beq.n	8005f3c <HAL_DMA_Abort_IT+0xc8>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a47      	ldr	r2, [pc, #284]	; (800604c <HAL_DMA_Abort_IT+0x1d8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d004      	beq.n	8005f3c <HAL_DMA_Abort_IT+0xc8>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a46      	ldr	r2, [pc, #280]	; (8006050 <HAL_DMA_Abort_IT+0x1dc>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d101      	bne.n	8005f40 <HAL_DMA_Abort_IT+0xcc>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e000      	b.n	8005f42 <HAL_DMA_Abort_IT+0xce>
 8005f40:	2300      	movs	r3, #0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 8086 	beq.w	8006054 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2204      	movs	r2, #4
 8005f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a2f      	ldr	r2, [pc, #188]	; (8006014 <HAL_DMA_Abort_IT+0x1a0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d04a      	beq.n	8005ff0 <HAL_DMA_Abort_IT+0x17c>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a2e      	ldr	r2, [pc, #184]	; (8006018 <HAL_DMA_Abort_IT+0x1a4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d045      	beq.n	8005ff0 <HAL_DMA_Abort_IT+0x17c>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a2c      	ldr	r2, [pc, #176]	; (800601c <HAL_DMA_Abort_IT+0x1a8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d040      	beq.n	8005ff0 <HAL_DMA_Abort_IT+0x17c>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a2b      	ldr	r2, [pc, #172]	; (8006020 <HAL_DMA_Abort_IT+0x1ac>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d03b      	beq.n	8005ff0 <HAL_DMA_Abort_IT+0x17c>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a29      	ldr	r2, [pc, #164]	; (8006024 <HAL_DMA_Abort_IT+0x1b0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d036      	beq.n	8005ff0 <HAL_DMA_Abort_IT+0x17c>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a28      	ldr	r2, [pc, #160]	; (8006028 <HAL_DMA_Abort_IT+0x1b4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d031      	beq.n	8005ff0 <HAL_DMA_Abort_IT+0x17c>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a26      	ldr	r2, [pc, #152]	; (800602c <HAL_DMA_Abort_IT+0x1b8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d02c      	beq.n	8005ff0 <HAL_DMA_Abort_IT+0x17c>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a25      	ldr	r2, [pc, #148]	; (8006030 <HAL_DMA_Abort_IT+0x1bc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d027      	beq.n	8005ff0 <HAL_DMA_Abort_IT+0x17c>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a23      	ldr	r2, [pc, #140]	; (8006034 <HAL_DMA_Abort_IT+0x1c0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d022      	beq.n	8005ff0 <HAL_DMA_Abort_IT+0x17c>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a22      	ldr	r2, [pc, #136]	; (8006038 <HAL_DMA_Abort_IT+0x1c4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d01d      	beq.n	8005ff0 <HAL_DMA_Abort_IT+0x17c>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a20      	ldr	r2, [pc, #128]	; (800603c <HAL_DMA_Abort_IT+0x1c8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d018      	beq.n	8005ff0 <HAL_DMA_Abort_IT+0x17c>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a1f      	ldr	r2, [pc, #124]	; (8006040 <HAL_DMA_Abort_IT+0x1cc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d013      	beq.n	8005ff0 <HAL_DMA_Abort_IT+0x17c>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a1d      	ldr	r2, [pc, #116]	; (8006044 <HAL_DMA_Abort_IT+0x1d0>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00e      	beq.n	8005ff0 <HAL_DMA_Abort_IT+0x17c>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a1c      	ldr	r2, [pc, #112]	; (8006048 <HAL_DMA_Abort_IT+0x1d4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d009      	beq.n	8005ff0 <HAL_DMA_Abort_IT+0x17c>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a1a      	ldr	r2, [pc, #104]	; (800604c <HAL_DMA_Abort_IT+0x1d8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d004      	beq.n	8005ff0 <HAL_DMA_Abort_IT+0x17c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a19      	ldr	r2, [pc, #100]	; (8006050 <HAL_DMA_Abort_IT+0x1dc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d108      	bne.n	8006002 <HAL_DMA_Abort_IT+0x18e>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0201 	bic.w	r2, r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	e178      	b.n	80062f4 <HAL_DMA_Abort_IT+0x480>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0201 	bic.w	r2, r2, #1
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	e16f      	b.n	80062f4 <HAL_DMA_Abort_IT+0x480>
 8006014:	40020010 	.word	0x40020010
 8006018:	40020028 	.word	0x40020028
 800601c:	40020040 	.word	0x40020040
 8006020:	40020058 	.word	0x40020058
 8006024:	40020070 	.word	0x40020070
 8006028:	40020088 	.word	0x40020088
 800602c:	400200a0 	.word	0x400200a0
 8006030:	400200b8 	.word	0x400200b8
 8006034:	40020410 	.word	0x40020410
 8006038:	40020428 	.word	0x40020428
 800603c:	40020440 	.word	0x40020440
 8006040:	40020458 	.word	0x40020458
 8006044:	40020470 	.word	0x40020470
 8006048:	40020488 	.word	0x40020488
 800604c:	400204a0 	.word	0x400204a0
 8006050:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 020e 	bic.w	r2, r2, #14
 8006062:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a6c      	ldr	r2, [pc, #432]	; (800621c <HAL_DMA_Abort_IT+0x3a8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d04a      	beq.n	8006104 <HAL_DMA_Abort_IT+0x290>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a6b      	ldr	r2, [pc, #428]	; (8006220 <HAL_DMA_Abort_IT+0x3ac>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d045      	beq.n	8006104 <HAL_DMA_Abort_IT+0x290>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a69      	ldr	r2, [pc, #420]	; (8006224 <HAL_DMA_Abort_IT+0x3b0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d040      	beq.n	8006104 <HAL_DMA_Abort_IT+0x290>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a68      	ldr	r2, [pc, #416]	; (8006228 <HAL_DMA_Abort_IT+0x3b4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d03b      	beq.n	8006104 <HAL_DMA_Abort_IT+0x290>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a66      	ldr	r2, [pc, #408]	; (800622c <HAL_DMA_Abort_IT+0x3b8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d036      	beq.n	8006104 <HAL_DMA_Abort_IT+0x290>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a65      	ldr	r2, [pc, #404]	; (8006230 <HAL_DMA_Abort_IT+0x3bc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d031      	beq.n	8006104 <HAL_DMA_Abort_IT+0x290>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a63      	ldr	r2, [pc, #396]	; (8006234 <HAL_DMA_Abort_IT+0x3c0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d02c      	beq.n	8006104 <HAL_DMA_Abort_IT+0x290>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a62      	ldr	r2, [pc, #392]	; (8006238 <HAL_DMA_Abort_IT+0x3c4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d027      	beq.n	8006104 <HAL_DMA_Abort_IT+0x290>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a60      	ldr	r2, [pc, #384]	; (800623c <HAL_DMA_Abort_IT+0x3c8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d022      	beq.n	8006104 <HAL_DMA_Abort_IT+0x290>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a5f      	ldr	r2, [pc, #380]	; (8006240 <HAL_DMA_Abort_IT+0x3cc>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d01d      	beq.n	8006104 <HAL_DMA_Abort_IT+0x290>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a5d      	ldr	r2, [pc, #372]	; (8006244 <HAL_DMA_Abort_IT+0x3d0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d018      	beq.n	8006104 <HAL_DMA_Abort_IT+0x290>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a5c      	ldr	r2, [pc, #368]	; (8006248 <HAL_DMA_Abort_IT+0x3d4>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d013      	beq.n	8006104 <HAL_DMA_Abort_IT+0x290>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a5a      	ldr	r2, [pc, #360]	; (800624c <HAL_DMA_Abort_IT+0x3d8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00e      	beq.n	8006104 <HAL_DMA_Abort_IT+0x290>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a59      	ldr	r2, [pc, #356]	; (8006250 <HAL_DMA_Abort_IT+0x3dc>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d009      	beq.n	8006104 <HAL_DMA_Abort_IT+0x290>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a57      	ldr	r2, [pc, #348]	; (8006254 <HAL_DMA_Abort_IT+0x3e0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <HAL_DMA_Abort_IT+0x290>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a56      	ldr	r2, [pc, #344]	; (8006258 <HAL_DMA_Abort_IT+0x3e4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d108      	bne.n	8006116 <HAL_DMA_Abort_IT+0x2a2>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0201 	bic.w	r2, r2, #1
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	e007      	b.n	8006126 <HAL_DMA_Abort_IT+0x2b2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0201 	bic.w	r2, r2, #1
 8006124:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a3c      	ldr	r2, [pc, #240]	; (800621c <HAL_DMA_Abort_IT+0x3a8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d072      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a3a      	ldr	r2, [pc, #232]	; (8006220 <HAL_DMA_Abort_IT+0x3ac>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d06d      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a39      	ldr	r2, [pc, #228]	; (8006224 <HAL_DMA_Abort_IT+0x3b0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d068      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a37      	ldr	r2, [pc, #220]	; (8006228 <HAL_DMA_Abort_IT+0x3b4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d063      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a36      	ldr	r2, [pc, #216]	; (800622c <HAL_DMA_Abort_IT+0x3b8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d05e      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a34      	ldr	r2, [pc, #208]	; (8006230 <HAL_DMA_Abort_IT+0x3bc>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d059      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a33      	ldr	r2, [pc, #204]	; (8006234 <HAL_DMA_Abort_IT+0x3c0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d054      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a31      	ldr	r2, [pc, #196]	; (8006238 <HAL_DMA_Abort_IT+0x3c4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d04f      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a30      	ldr	r2, [pc, #192]	; (800623c <HAL_DMA_Abort_IT+0x3c8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d04a      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a2e      	ldr	r2, [pc, #184]	; (8006240 <HAL_DMA_Abort_IT+0x3cc>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d045      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a2d      	ldr	r2, [pc, #180]	; (8006244 <HAL_DMA_Abort_IT+0x3d0>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d040      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a2b      	ldr	r2, [pc, #172]	; (8006248 <HAL_DMA_Abort_IT+0x3d4>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d03b      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a2a      	ldr	r2, [pc, #168]	; (800624c <HAL_DMA_Abort_IT+0x3d8>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d036      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a28      	ldr	r2, [pc, #160]	; (8006250 <HAL_DMA_Abort_IT+0x3dc>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d031      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a27      	ldr	r2, [pc, #156]	; (8006254 <HAL_DMA_Abort_IT+0x3e0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d02c      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a25      	ldr	r2, [pc, #148]	; (8006258 <HAL_DMA_Abort_IT+0x3e4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d027      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a24      	ldr	r2, [pc, #144]	; (800625c <HAL_DMA_Abort_IT+0x3e8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d022      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a22      	ldr	r2, [pc, #136]	; (8006260 <HAL_DMA_Abort_IT+0x3ec>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d01d      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a21      	ldr	r2, [pc, #132]	; (8006264 <HAL_DMA_Abort_IT+0x3f0>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d018      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a1f      	ldr	r2, [pc, #124]	; (8006268 <HAL_DMA_Abort_IT+0x3f4>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d013      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a1e      	ldr	r2, [pc, #120]	; (800626c <HAL_DMA_Abort_IT+0x3f8>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d00e      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a1c      	ldr	r2, [pc, #112]	; (8006270 <HAL_DMA_Abort_IT+0x3fc>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d009      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a1b      	ldr	r2, [pc, #108]	; (8006274 <HAL_DMA_Abort_IT+0x400>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d004      	beq.n	8006216 <HAL_DMA_Abort_IT+0x3a2>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a19      	ldr	r2, [pc, #100]	; (8006278 <HAL_DMA_Abort_IT+0x404>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d132      	bne.n	800627c <HAL_DMA_Abort_IT+0x408>
 8006216:	2301      	movs	r3, #1
 8006218:	e031      	b.n	800627e <HAL_DMA_Abort_IT+0x40a>
 800621a:	bf00      	nop
 800621c:	40020010 	.word	0x40020010
 8006220:	40020028 	.word	0x40020028
 8006224:	40020040 	.word	0x40020040
 8006228:	40020058 	.word	0x40020058
 800622c:	40020070 	.word	0x40020070
 8006230:	40020088 	.word	0x40020088
 8006234:	400200a0 	.word	0x400200a0
 8006238:	400200b8 	.word	0x400200b8
 800623c:	40020410 	.word	0x40020410
 8006240:	40020428 	.word	0x40020428
 8006244:	40020440 	.word	0x40020440
 8006248:	40020458 	.word	0x40020458
 800624c:	40020470 	.word	0x40020470
 8006250:	40020488 	.word	0x40020488
 8006254:	400204a0 	.word	0x400204a0
 8006258:	400204b8 	.word	0x400204b8
 800625c:	58025408 	.word	0x58025408
 8006260:	5802541c 	.word	0x5802541c
 8006264:	58025430 	.word	0x58025430
 8006268:	58025444 	.word	0x58025444
 800626c:	58025458 	.word	0x58025458
 8006270:	5802546c 	.word	0x5802546c
 8006274:	58025480 	.word	0x58025480
 8006278:	58025494 	.word	0x58025494
 800627c:	2300      	movs	r3, #0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d028      	beq.n	80062d4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800628c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006290:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006296:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	2201      	movs	r2, #1
 80062a2:	409a      	lsls	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00c      	beq.n	80062d4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80062d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop

08006300 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08a      	sub	sp, #40	; 0x28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800630c:	4b67      	ldr	r3, [pc, #412]	; (80064ac <HAL_DMA_IRQHandler+0x1ac>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a67      	ldr	r2, [pc, #412]	; (80064b0 <HAL_DMA_IRQHandler+0x1b0>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	0a9b      	lsrs	r3, r3, #10
 8006318:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006324:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a5f      	ldr	r2, [pc, #380]	; (80064b4 <HAL_DMA_IRQHandler+0x1b4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d04a      	beq.n	80063d2 <HAL_DMA_IRQHandler+0xd2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a5d      	ldr	r2, [pc, #372]	; (80064b8 <HAL_DMA_IRQHandler+0x1b8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d045      	beq.n	80063d2 <HAL_DMA_IRQHandler+0xd2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a5c      	ldr	r2, [pc, #368]	; (80064bc <HAL_DMA_IRQHandler+0x1bc>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d040      	beq.n	80063d2 <HAL_DMA_IRQHandler+0xd2>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a5a      	ldr	r2, [pc, #360]	; (80064c0 <HAL_DMA_IRQHandler+0x1c0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d03b      	beq.n	80063d2 <HAL_DMA_IRQHandler+0xd2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a59      	ldr	r2, [pc, #356]	; (80064c4 <HAL_DMA_IRQHandler+0x1c4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d036      	beq.n	80063d2 <HAL_DMA_IRQHandler+0xd2>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a57      	ldr	r2, [pc, #348]	; (80064c8 <HAL_DMA_IRQHandler+0x1c8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d031      	beq.n	80063d2 <HAL_DMA_IRQHandler+0xd2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a56      	ldr	r2, [pc, #344]	; (80064cc <HAL_DMA_IRQHandler+0x1cc>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d02c      	beq.n	80063d2 <HAL_DMA_IRQHandler+0xd2>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a54      	ldr	r2, [pc, #336]	; (80064d0 <HAL_DMA_IRQHandler+0x1d0>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d027      	beq.n	80063d2 <HAL_DMA_IRQHandler+0xd2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a53      	ldr	r2, [pc, #332]	; (80064d4 <HAL_DMA_IRQHandler+0x1d4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d022      	beq.n	80063d2 <HAL_DMA_IRQHandler+0xd2>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a51      	ldr	r2, [pc, #324]	; (80064d8 <HAL_DMA_IRQHandler+0x1d8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d01d      	beq.n	80063d2 <HAL_DMA_IRQHandler+0xd2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a50      	ldr	r2, [pc, #320]	; (80064dc <HAL_DMA_IRQHandler+0x1dc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d018      	beq.n	80063d2 <HAL_DMA_IRQHandler+0xd2>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a4e      	ldr	r2, [pc, #312]	; (80064e0 <HAL_DMA_IRQHandler+0x1e0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d013      	beq.n	80063d2 <HAL_DMA_IRQHandler+0xd2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a4d      	ldr	r2, [pc, #308]	; (80064e4 <HAL_DMA_IRQHandler+0x1e4>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00e      	beq.n	80063d2 <HAL_DMA_IRQHandler+0xd2>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a4b      	ldr	r2, [pc, #300]	; (80064e8 <HAL_DMA_IRQHandler+0x1e8>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d009      	beq.n	80063d2 <HAL_DMA_IRQHandler+0xd2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a4a      	ldr	r2, [pc, #296]	; (80064ec <HAL_DMA_IRQHandler+0x1ec>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d004      	beq.n	80063d2 <HAL_DMA_IRQHandler+0xd2>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a48      	ldr	r2, [pc, #288]	; (80064f0 <HAL_DMA_IRQHandler+0x1f0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d101      	bne.n	80063d6 <HAL_DMA_IRQHandler+0xd6>
 80063d2:	2301      	movs	r3, #1
 80063d4:	e000      	b.n	80063d8 <HAL_DMA_IRQHandler+0xd8>
 80063d6:	2300      	movs	r3, #0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 842b 	beq.w	8006c34 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e2:	f003 031f 	and.w	r3, r3, #31
 80063e6:	2208      	movs	r2, #8
 80063e8:	409a      	lsls	r2, r3
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	4013      	ands	r3, r2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 80a2 	beq.w	8006538 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a2e      	ldr	r2, [pc, #184]	; (80064b4 <HAL_DMA_IRQHandler+0x1b4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d04a      	beq.n	8006494 <HAL_DMA_IRQHandler+0x194>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a2d      	ldr	r2, [pc, #180]	; (80064b8 <HAL_DMA_IRQHandler+0x1b8>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d045      	beq.n	8006494 <HAL_DMA_IRQHandler+0x194>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a2b      	ldr	r2, [pc, #172]	; (80064bc <HAL_DMA_IRQHandler+0x1bc>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d040      	beq.n	8006494 <HAL_DMA_IRQHandler+0x194>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a2a      	ldr	r2, [pc, #168]	; (80064c0 <HAL_DMA_IRQHandler+0x1c0>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d03b      	beq.n	8006494 <HAL_DMA_IRQHandler+0x194>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a28      	ldr	r2, [pc, #160]	; (80064c4 <HAL_DMA_IRQHandler+0x1c4>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d036      	beq.n	8006494 <HAL_DMA_IRQHandler+0x194>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a27      	ldr	r2, [pc, #156]	; (80064c8 <HAL_DMA_IRQHandler+0x1c8>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d031      	beq.n	8006494 <HAL_DMA_IRQHandler+0x194>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a25      	ldr	r2, [pc, #148]	; (80064cc <HAL_DMA_IRQHandler+0x1cc>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d02c      	beq.n	8006494 <HAL_DMA_IRQHandler+0x194>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a24      	ldr	r2, [pc, #144]	; (80064d0 <HAL_DMA_IRQHandler+0x1d0>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d027      	beq.n	8006494 <HAL_DMA_IRQHandler+0x194>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a22      	ldr	r2, [pc, #136]	; (80064d4 <HAL_DMA_IRQHandler+0x1d4>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d022      	beq.n	8006494 <HAL_DMA_IRQHandler+0x194>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a21      	ldr	r2, [pc, #132]	; (80064d8 <HAL_DMA_IRQHandler+0x1d8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d01d      	beq.n	8006494 <HAL_DMA_IRQHandler+0x194>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a1f      	ldr	r2, [pc, #124]	; (80064dc <HAL_DMA_IRQHandler+0x1dc>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d018      	beq.n	8006494 <HAL_DMA_IRQHandler+0x194>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a1e      	ldr	r2, [pc, #120]	; (80064e0 <HAL_DMA_IRQHandler+0x1e0>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d013      	beq.n	8006494 <HAL_DMA_IRQHandler+0x194>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a1c      	ldr	r2, [pc, #112]	; (80064e4 <HAL_DMA_IRQHandler+0x1e4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00e      	beq.n	8006494 <HAL_DMA_IRQHandler+0x194>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a1b      	ldr	r2, [pc, #108]	; (80064e8 <HAL_DMA_IRQHandler+0x1e8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d009      	beq.n	8006494 <HAL_DMA_IRQHandler+0x194>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a19      	ldr	r2, [pc, #100]	; (80064ec <HAL_DMA_IRQHandler+0x1ec>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d004      	beq.n	8006494 <HAL_DMA_IRQHandler+0x194>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a18      	ldr	r2, [pc, #96]	; (80064f0 <HAL_DMA_IRQHandler+0x1f0>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d12f      	bne.n	80064f4 <HAL_DMA_IRQHandler+0x1f4>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0304 	and.w	r3, r3, #4
 800649e:	2b00      	cmp	r3, #0
 80064a0:	bf14      	ite	ne
 80064a2:	2301      	movne	r3, #1
 80064a4:	2300      	moveq	r3, #0
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	e02e      	b.n	8006508 <HAL_DMA_IRQHandler+0x208>
 80064aa:	bf00      	nop
 80064ac:	24000044 	.word	0x24000044
 80064b0:	1b4e81b5 	.word	0x1b4e81b5
 80064b4:	40020010 	.word	0x40020010
 80064b8:	40020028 	.word	0x40020028
 80064bc:	40020040 	.word	0x40020040
 80064c0:	40020058 	.word	0x40020058
 80064c4:	40020070 	.word	0x40020070
 80064c8:	40020088 	.word	0x40020088
 80064cc:	400200a0 	.word	0x400200a0
 80064d0:	400200b8 	.word	0x400200b8
 80064d4:	40020410 	.word	0x40020410
 80064d8:	40020428 	.word	0x40020428
 80064dc:	40020440 	.word	0x40020440
 80064e0:	40020458 	.word	0x40020458
 80064e4:	40020470 	.word	0x40020470
 80064e8:	40020488 	.word	0x40020488
 80064ec:	400204a0 	.word	0x400204a0
 80064f0:	400204b8 	.word	0x400204b8
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0308 	and.w	r3, r3, #8
 80064fe:	2b00      	cmp	r3, #0
 8006500:	bf14      	ite	ne
 8006502:	2301      	movne	r3, #1
 8006504:	2300      	moveq	r3, #0
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	d015      	beq.n	8006538 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0204 	bic.w	r2, r2, #4
 800651a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006520:	f003 031f 	and.w	r3, r3, #31
 8006524:	2208      	movs	r2, #8
 8006526:	409a      	lsls	r2, r3
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006530:	f043 0201 	orr.w	r2, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800653c:	f003 031f 	and.w	r3, r3, #31
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	fa22 f303 	lsr.w	r3, r2, r3
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	d06e      	beq.n	800662c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a69      	ldr	r2, [pc, #420]	; (80066f8 <HAL_DMA_IRQHandler+0x3f8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d04a      	beq.n	80065ee <HAL_DMA_IRQHandler+0x2ee>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a67      	ldr	r2, [pc, #412]	; (80066fc <HAL_DMA_IRQHandler+0x3fc>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d045      	beq.n	80065ee <HAL_DMA_IRQHandler+0x2ee>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a66      	ldr	r2, [pc, #408]	; (8006700 <HAL_DMA_IRQHandler+0x400>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d040      	beq.n	80065ee <HAL_DMA_IRQHandler+0x2ee>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a64      	ldr	r2, [pc, #400]	; (8006704 <HAL_DMA_IRQHandler+0x404>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d03b      	beq.n	80065ee <HAL_DMA_IRQHandler+0x2ee>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a63      	ldr	r2, [pc, #396]	; (8006708 <HAL_DMA_IRQHandler+0x408>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d036      	beq.n	80065ee <HAL_DMA_IRQHandler+0x2ee>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a61      	ldr	r2, [pc, #388]	; (800670c <HAL_DMA_IRQHandler+0x40c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d031      	beq.n	80065ee <HAL_DMA_IRQHandler+0x2ee>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a60      	ldr	r2, [pc, #384]	; (8006710 <HAL_DMA_IRQHandler+0x410>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d02c      	beq.n	80065ee <HAL_DMA_IRQHandler+0x2ee>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a5e      	ldr	r2, [pc, #376]	; (8006714 <HAL_DMA_IRQHandler+0x414>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d027      	beq.n	80065ee <HAL_DMA_IRQHandler+0x2ee>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a5d      	ldr	r2, [pc, #372]	; (8006718 <HAL_DMA_IRQHandler+0x418>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d022      	beq.n	80065ee <HAL_DMA_IRQHandler+0x2ee>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a5b      	ldr	r2, [pc, #364]	; (800671c <HAL_DMA_IRQHandler+0x41c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d01d      	beq.n	80065ee <HAL_DMA_IRQHandler+0x2ee>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a5a      	ldr	r2, [pc, #360]	; (8006720 <HAL_DMA_IRQHandler+0x420>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d018      	beq.n	80065ee <HAL_DMA_IRQHandler+0x2ee>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a58      	ldr	r2, [pc, #352]	; (8006724 <HAL_DMA_IRQHandler+0x424>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d013      	beq.n	80065ee <HAL_DMA_IRQHandler+0x2ee>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a57      	ldr	r2, [pc, #348]	; (8006728 <HAL_DMA_IRQHandler+0x428>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00e      	beq.n	80065ee <HAL_DMA_IRQHandler+0x2ee>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a55      	ldr	r2, [pc, #340]	; (800672c <HAL_DMA_IRQHandler+0x42c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d009      	beq.n	80065ee <HAL_DMA_IRQHandler+0x2ee>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a54      	ldr	r2, [pc, #336]	; (8006730 <HAL_DMA_IRQHandler+0x430>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d004      	beq.n	80065ee <HAL_DMA_IRQHandler+0x2ee>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a52      	ldr	r2, [pc, #328]	; (8006734 <HAL_DMA_IRQHandler+0x434>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d10a      	bne.n	8006604 <HAL_DMA_IRQHandler+0x304>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bf14      	ite	ne
 80065fc:	2301      	movne	r3, #1
 80065fe:	2300      	moveq	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	e003      	b.n	800660c <HAL_DMA_IRQHandler+0x30c>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2300      	movs	r3, #0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00d      	beq.n	800662c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006614:	f003 031f 	and.w	r3, r3, #31
 8006618:	2201      	movs	r2, #1
 800661a:	409a      	lsls	r2, r3
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006624:	f043 0202 	orr.w	r2, r3, #2
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006630:	f003 031f 	and.w	r3, r3, #31
 8006634:	2204      	movs	r2, #4
 8006636:	409a      	lsls	r2, r3
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 808f 	beq.w	8006760 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a2c      	ldr	r2, [pc, #176]	; (80066f8 <HAL_DMA_IRQHandler+0x3f8>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d04a      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x3e2>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a2a      	ldr	r2, [pc, #168]	; (80066fc <HAL_DMA_IRQHandler+0x3fc>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d045      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x3e2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a29      	ldr	r2, [pc, #164]	; (8006700 <HAL_DMA_IRQHandler+0x400>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d040      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x3e2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a27      	ldr	r2, [pc, #156]	; (8006704 <HAL_DMA_IRQHandler+0x404>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d03b      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x3e2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a26      	ldr	r2, [pc, #152]	; (8006708 <HAL_DMA_IRQHandler+0x408>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d036      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x3e2>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a24      	ldr	r2, [pc, #144]	; (800670c <HAL_DMA_IRQHandler+0x40c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d031      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x3e2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a23      	ldr	r2, [pc, #140]	; (8006710 <HAL_DMA_IRQHandler+0x410>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d02c      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x3e2>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a21      	ldr	r2, [pc, #132]	; (8006714 <HAL_DMA_IRQHandler+0x414>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d027      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x3e2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a20      	ldr	r2, [pc, #128]	; (8006718 <HAL_DMA_IRQHandler+0x418>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d022      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x3e2>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a1e      	ldr	r2, [pc, #120]	; (800671c <HAL_DMA_IRQHandler+0x41c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d01d      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x3e2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a1d      	ldr	r2, [pc, #116]	; (8006720 <HAL_DMA_IRQHandler+0x420>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d018      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x3e2>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a1b      	ldr	r2, [pc, #108]	; (8006724 <HAL_DMA_IRQHandler+0x424>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d013      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x3e2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a1a      	ldr	r2, [pc, #104]	; (8006728 <HAL_DMA_IRQHandler+0x428>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00e      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x3e2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a18      	ldr	r2, [pc, #96]	; (800672c <HAL_DMA_IRQHandler+0x42c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d009      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x3e2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a17      	ldr	r2, [pc, #92]	; (8006730 <HAL_DMA_IRQHandler+0x430>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d004      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x3e2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a15      	ldr	r2, [pc, #84]	; (8006734 <HAL_DMA_IRQHandler+0x434>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d12a      	bne.n	8006738 <HAL_DMA_IRQHandler+0x438>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	bf14      	ite	ne
 80066f0:	2301      	movne	r3, #1
 80066f2:	2300      	moveq	r3, #0
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	e023      	b.n	8006740 <HAL_DMA_IRQHandler+0x440>
 80066f8:	40020010 	.word	0x40020010
 80066fc:	40020028 	.word	0x40020028
 8006700:	40020040 	.word	0x40020040
 8006704:	40020058 	.word	0x40020058
 8006708:	40020070 	.word	0x40020070
 800670c:	40020088 	.word	0x40020088
 8006710:	400200a0 	.word	0x400200a0
 8006714:	400200b8 	.word	0x400200b8
 8006718:	40020410 	.word	0x40020410
 800671c:	40020428 	.word	0x40020428
 8006720:	40020440 	.word	0x40020440
 8006724:	40020458 	.word	0x40020458
 8006728:	40020470 	.word	0x40020470
 800672c:	40020488 	.word	0x40020488
 8006730:	400204a0 	.word	0x400204a0
 8006734:	400204b8 	.word	0x400204b8
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2300      	movs	r3, #0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00d      	beq.n	8006760 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	2204      	movs	r2, #4
 800674e:	409a      	lsls	r2, r3
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006758:	f043 0204 	orr.w	r2, r3, #4
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006764:	f003 031f 	and.w	r3, r3, #31
 8006768:	2210      	movs	r2, #16
 800676a:	409a      	lsls	r2, r3
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	4013      	ands	r3, r2
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 80a6 	beq.w	80068c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a85      	ldr	r2, [pc, #532]	; (8006990 <HAL_DMA_IRQHandler+0x690>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d04a      	beq.n	8006816 <HAL_DMA_IRQHandler+0x516>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a83      	ldr	r2, [pc, #524]	; (8006994 <HAL_DMA_IRQHandler+0x694>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d045      	beq.n	8006816 <HAL_DMA_IRQHandler+0x516>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a82      	ldr	r2, [pc, #520]	; (8006998 <HAL_DMA_IRQHandler+0x698>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d040      	beq.n	8006816 <HAL_DMA_IRQHandler+0x516>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a80      	ldr	r2, [pc, #512]	; (800699c <HAL_DMA_IRQHandler+0x69c>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d03b      	beq.n	8006816 <HAL_DMA_IRQHandler+0x516>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a7f      	ldr	r2, [pc, #508]	; (80069a0 <HAL_DMA_IRQHandler+0x6a0>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d036      	beq.n	8006816 <HAL_DMA_IRQHandler+0x516>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a7d      	ldr	r2, [pc, #500]	; (80069a4 <HAL_DMA_IRQHandler+0x6a4>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d031      	beq.n	8006816 <HAL_DMA_IRQHandler+0x516>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a7c      	ldr	r2, [pc, #496]	; (80069a8 <HAL_DMA_IRQHandler+0x6a8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d02c      	beq.n	8006816 <HAL_DMA_IRQHandler+0x516>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a7a      	ldr	r2, [pc, #488]	; (80069ac <HAL_DMA_IRQHandler+0x6ac>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d027      	beq.n	8006816 <HAL_DMA_IRQHandler+0x516>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a79      	ldr	r2, [pc, #484]	; (80069b0 <HAL_DMA_IRQHandler+0x6b0>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d022      	beq.n	8006816 <HAL_DMA_IRQHandler+0x516>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a77      	ldr	r2, [pc, #476]	; (80069b4 <HAL_DMA_IRQHandler+0x6b4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d01d      	beq.n	8006816 <HAL_DMA_IRQHandler+0x516>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a76      	ldr	r2, [pc, #472]	; (80069b8 <HAL_DMA_IRQHandler+0x6b8>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d018      	beq.n	8006816 <HAL_DMA_IRQHandler+0x516>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a74      	ldr	r2, [pc, #464]	; (80069bc <HAL_DMA_IRQHandler+0x6bc>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d013      	beq.n	8006816 <HAL_DMA_IRQHandler+0x516>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a73      	ldr	r2, [pc, #460]	; (80069c0 <HAL_DMA_IRQHandler+0x6c0>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d00e      	beq.n	8006816 <HAL_DMA_IRQHandler+0x516>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a71      	ldr	r2, [pc, #452]	; (80069c4 <HAL_DMA_IRQHandler+0x6c4>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d009      	beq.n	8006816 <HAL_DMA_IRQHandler+0x516>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a70      	ldr	r2, [pc, #448]	; (80069c8 <HAL_DMA_IRQHandler+0x6c8>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d004      	beq.n	8006816 <HAL_DMA_IRQHandler+0x516>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a6e      	ldr	r2, [pc, #440]	; (80069cc <HAL_DMA_IRQHandler+0x6cc>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d10a      	bne.n	800682c <HAL_DMA_IRQHandler+0x52c>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0308 	and.w	r3, r3, #8
 8006820:	2b00      	cmp	r3, #0
 8006822:	bf14      	ite	ne
 8006824:	2301      	movne	r3, #1
 8006826:	2300      	moveq	r3, #0
 8006828:	b2db      	uxtb	r3, r3
 800682a:	e009      	b.n	8006840 <HAL_DMA_IRQHandler+0x540>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0304 	and.w	r3, r3, #4
 8006836:	2b00      	cmp	r3, #0
 8006838:	bf14      	ite	ne
 800683a:	2301      	movne	r3, #1
 800683c:	2300      	moveq	r3, #0
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d03e      	beq.n	80068c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006848:	f003 031f 	and.w	r3, r3, #31
 800684c:	2210      	movs	r2, #16
 800684e:	409a      	lsls	r2, r3
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d018      	beq.n	8006894 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d108      	bne.n	8006882 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006874:	2b00      	cmp	r3, #0
 8006876:	d024      	beq.n	80068c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	4798      	blx	r3
 8006880:	e01f      	b.n	80068c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006886:	2b00      	cmp	r3, #0
 8006888:	d01b      	beq.n	80068c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	4798      	blx	r3
 8006892:	e016      	b.n	80068c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d107      	bne.n	80068b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0208 	bic.w	r2, r2, #8
 80068b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c6:	f003 031f 	and.w	r3, r3, #31
 80068ca:	2220      	movs	r2, #32
 80068cc:	409a      	lsls	r2, r3
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	4013      	ands	r3, r2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 8110 	beq.w	8006af8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a2c      	ldr	r2, [pc, #176]	; (8006990 <HAL_DMA_IRQHandler+0x690>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d04a      	beq.n	8006978 <HAL_DMA_IRQHandler+0x678>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a2b      	ldr	r2, [pc, #172]	; (8006994 <HAL_DMA_IRQHandler+0x694>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d045      	beq.n	8006978 <HAL_DMA_IRQHandler+0x678>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a29      	ldr	r2, [pc, #164]	; (8006998 <HAL_DMA_IRQHandler+0x698>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d040      	beq.n	8006978 <HAL_DMA_IRQHandler+0x678>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a28      	ldr	r2, [pc, #160]	; (800699c <HAL_DMA_IRQHandler+0x69c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d03b      	beq.n	8006978 <HAL_DMA_IRQHandler+0x678>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a26      	ldr	r2, [pc, #152]	; (80069a0 <HAL_DMA_IRQHandler+0x6a0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d036      	beq.n	8006978 <HAL_DMA_IRQHandler+0x678>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a25      	ldr	r2, [pc, #148]	; (80069a4 <HAL_DMA_IRQHandler+0x6a4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d031      	beq.n	8006978 <HAL_DMA_IRQHandler+0x678>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a23      	ldr	r2, [pc, #140]	; (80069a8 <HAL_DMA_IRQHandler+0x6a8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d02c      	beq.n	8006978 <HAL_DMA_IRQHandler+0x678>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a22      	ldr	r2, [pc, #136]	; (80069ac <HAL_DMA_IRQHandler+0x6ac>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d027      	beq.n	8006978 <HAL_DMA_IRQHandler+0x678>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a20      	ldr	r2, [pc, #128]	; (80069b0 <HAL_DMA_IRQHandler+0x6b0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d022      	beq.n	8006978 <HAL_DMA_IRQHandler+0x678>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a1f      	ldr	r2, [pc, #124]	; (80069b4 <HAL_DMA_IRQHandler+0x6b4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d01d      	beq.n	8006978 <HAL_DMA_IRQHandler+0x678>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a1d      	ldr	r2, [pc, #116]	; (80069b8 <HAL_DMA_IRQHandler+0x6b8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d018      	beq.n	8006978 <HAL_DMA_IRQHandler+0x678>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a1c      	ldr	r2, [pc, #112]	; (80069bc <HAL_DMA_IRQHandler+0x6bc>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d013      	beq.n	8006978 <HAL_DMA_IRQHandler+0x678>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a1a      	ldr	r2, [pc, #104]	; (80069c0 <HAL_DMA_IRQHandler+0x6c0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00e      	beq.n	8006978 <HAL_DMA_IRQHandler+0x678>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a19      	ldr	r2, [pc, #100]	; (80069c4 <HAL_DMA_IRQHandler+0x6c4>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d009      	beq.n	8006978 <HAL_DMA_IRQHandler+0x678>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a17      	ldr	r2, [pc, #92]	; (80069c8 <HAL_DMA_IRQHandler+0x6c8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d004      	beq.n	8006978 <HAL_DMA_IRQHandler+0x678>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a16      	ldr	r2, [pc, #88]	; (80069cc <HAL_DMA_IRQHandler+0x6cc>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d12b      	bne.n	80069d0 <HAL_DMA_IRQHandler+0x6d0>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0310 	and.w	r3, r3, #16
 8006982:	2b00      	cmp	r3, #0
 8006984:	bf14      	ite	ne
 8006986:	2301      	movne	r3, #1
 8006988:	2300      	moveq	r3, #0
 800698a:	b2db      	uxtb	r3, r3
 800698c:	e02a      	b.n	80069e4 <HAL_DMA_IRQHandler+0x6e4>
 800698e:	bf00      	nop
 8006990:	40020010 	.word	0x40020010
 8006994:	40020028 	.word	0x40020028
 8006998:	40020040 	.word	0x40020040
 800699c:	40020058 	.word	0x40020058
 80069a0:	40020070 	.word	0x40020070
 80069a4:	40020088 	.word	0x40020088
 80069a8:	400200a0 	.word	0x400200a0
 80069ac:	400200b8 	.word	0x400200b8
 80069b0:	40020410 	.word	0x40020410
 80069b4:	40020428 	.word	0x40020428
 80069b8:	40020440 	.word	0x40020440
 80069bc:	40020458 	.word	0x40020458
 80069c0:	40020470 	.word	0x40020470
 80069c4:	40020488 	.word	0x40020488
 80069c8:	400204a0 	.word	0x400204a0
 80069cc:	400204b8 	.word	0x400204b8
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	bf14      	ite	ne
 80069de:	2301      	movne	r3, #1
 80069e0:	2300      	moveq	r3, #0
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 8087 	beq.w	8006af8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ee:	f003 031f 	and.w	r3, r3, #31
 80069f2:	2220      	movs	r2, #32
 80069f4:	409a      	lsls	r2, r3
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d139      	bne.n	8006a7a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0216 	bic.w	r2, r2, #22
 8006a14:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	695a      	ldr	r2, [r3, #20]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a24:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d103      	bne.n	8006a36 <HAL_DMA_IRQHandler+0x736>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d007      	beq.n	8006a46 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0208 	bic.w	r2, r2, #8
 8006a44:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4a:	f003 031f 	and.w	r3, r3, #31
 8006a4e:	223f      	movs	r2, #63	; 0x3f
 8006a50:	409a      	lsls	r2, r3
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f000 8382 	beq.w	8007174 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	4798      	blx	r3
          }
          return;
 8006a78:	e37c      	b.n	8007174 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d018      	beq.n	8006aba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d108      	bne.n	8006aa8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d02c      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	4798      	blx	r3
 8006aa6:	e027      	b.n	8006af8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d023      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	4798      	blx	r3
 8006ab8:	e01e      	b.n	8006af8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10f      	bne.n	8006ae8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0210 	bic.w	r2, r2, #16
 8006ad6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 833e 	beq.w	800717e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b06:	f003 0301 	and.w	r3, r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 8088 	beq.w	8006c20 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2204      	movs	r2, #4
 8006b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a89      	ldr	r2, [pc, #548]	; (8006d44 <HAL_DMA_IRQHandler+0xa44>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d04a      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x8b8>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a88      	ldr	r2, [pc, #544]	; (8006d48 <HAL_DMA_IRQHandler+0xa48>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d045      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x8b8>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a86      	ldr	r2, [pc, #536]	; (8006d4c <HAL_DMA_IRQHandler+0xa4c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d040      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x8b8>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a85      	ldr	r2, [pc, #532]	; (8006d50 <HAL_DMA_IRQHandler+0xa50>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d03b      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x8b8>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a83      	ldr	r2, [pc, #524]	; (8006d54 <HAL_DMA_IRQHandler+0xa54>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d036      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x8b8>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a82      	ldr	r2, [pc, #520]	; (8006d58 <HAL_DMA_IRQHandler+0xa58>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d031      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x8b8>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a80      	ldr	r2, [pc, #512]	; (8006d5c <HAL_DMA_IRQHandler+0xa5c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d02c      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x8b8>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a7f      	ldr	r2, [pc, #508]	; (8006d60 <HAL_DMA_IRQHandler+0xa60>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d027      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x8b8>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a7d      	ldr	r2, [pc, #500]	; (8006d64 <HAL_DMA_IRQHandler+0xa64>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d022      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x8b8>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a7c      	ldr	r2, [pc, #496]	; (8006d68 <HAL_DMA_IRQHandler+0xa68>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d01d      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x8b8>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a7a      	ldr	r2, [pc, #488]	; (8006d6c <HAL_DMA_IRQHandler+0xa6c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d018      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x8b8>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a79      	ldr	r2, [pc, #484]	; (8006d70 <HAL_DMA_IRQHandler+0xa70>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d013      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x8b8>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a77      	ldr	r2, [pc, #476]	; (8006d74 <HAL_DMA_IRQHandler+0xa74>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d00e      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x8b8>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a76      	ldr	r2, [pc, #472]	; (8006d78 <HAL_DMA_IRQHandler+0xa78>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d009      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x8b8>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a74      	ldr	r2, [pc, #464]	; (8006d7c <HAL_DMA_IRQHandler+0xa7c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d004      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x8b8>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a73      	ldr	r2, [pc, #460]	; (8006d80 <HAL_DMA_IRQHandler+0xa80>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d108      	bne.n	8006bca <HAL_DMA_IRQHandler+0x8ca>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0201 	bic.w	r2, r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	e007      	b.n	8006bda <HAL_DMA_IRQHandler+0x8da>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0201 	bic.w	r2, r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d307      	bcc.n	8006bf6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1f2      	bne.n	8006bda <HAL_DMA_IRQHandler+0x8da>
 8006bf4:	e000      	b.n	8006bf8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006bf6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d004      	beq.n	8006c10 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2203      	movs	r2, #3
 8006c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006c0e:	e003      	b.n	8006c18 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 82aa 	beq.w	800717e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	4798      	blx	r3
 8006c32:	e2a4      	b.n	800717e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a52      	ldr	r2, [pc, #328]	; (8006d84 <HAL_DMA_IRQHandler+0xa84>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d04a      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x9d4>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a51      	ldr	r2, [pc, #324]	; (8006d88 <HAL_DMA_IRQHandler+0xa88>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d045      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x9d4>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a4f      	ldr	r2, [pc, #316]	; (8006d8c <HAL_DMA_IRQHandler+0xa8c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d040      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x9d4>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a4e      	ldr	r2, [pc, #312]	; (8006d90 <HAL_DMA_IRQHandler+0xa90>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d03b      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x9d4>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a4c      	ldr	r2, [pc, #304]	; (8006d94 <HAL_DMA_IRQHandler+0xa94>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d036      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x9d4>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a4b      	ldr	r2, [pc, #300]	; (8006d98 <HAL_DMA_IRQHandler+0xa98>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d031      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x9d4>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a49      	ldr	r2, [pc, #292]	; (8006d9c <HAL_DMA_IRQHandler+0xa9c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d02c      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x9d4>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a48      	ldr	r2, [pc, #288]	; (8006da0 <HAL_DMA_IRQHandler+0xaa0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d027      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x9d4>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a46      	ldr	r2, [pc, #280]	; (8006da4 <HAL_DMA_IRQHandler+0xaa4>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d022      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x9d4>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a45      	ldr	r2, [pc, #276]	; (8006da8 <HAL_DMA_IRQHandler+0xaa8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d01d      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x9d4>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a43      	ldr	r2, [pc, #268]	; (8006dac <HAL_DMA_IRQHandler+0xaac>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d018      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x9d4>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a42      	ldr	r2, [pc, #264]	; (8006db0 <HAL_DMA_IRQHandler+0xab0>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d013      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x9d4>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a40      	ldr	r2, [pc, #256]	; (8006db4 <HAL_DMA_IRQHandler+0xab4>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d00e      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x9d4>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a3f      	ldr	r2, [pc, #252]	; (8006db8 <HAL_DMA_IRQHandler+0xab8>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d009      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x9d4>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a3d      	ldr	r2, [pc, #244]	; (8006dbc <HAL_DMA_IRQHandler+0xabc>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d004      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x9d4>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a3c      	ldr	r2, [pc, #240]	; (8006dc0 <HAL_DMA_IRQHandler+0xac0>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d101      	bne.n	8006cd8 <HAL_DMA_IRQHandler+0x9d8>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e000      	b.n	8006cda <HAL_DMA_IRQHandler+0x9da>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 824f 	beq.w	800717e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cec:	f003 031f 	and.w	r3, r3, #31
 8006cf0:	2204      	movs	r2, #4
 8006cf2:	409a      	lsls	r2, r3
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 80dd 	beq.w	8006eb8 <HAL_DMA_IRQHandler+0xbb8>
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f003 0304 	and.w	r3, r3, #4
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 80d7 	beq.w	8006eb8 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d0e:	f003 031f 	and.w	r3, r3, #31
 8006d12:	2204      	movs	r2, #4
 8006d14:	409a      	lsls	r2, r3
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d059      	beq.n	8006dd8 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d14a      	bne.n	8006dc4 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 8220 	beq.w	8007178 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d40:	e21a      	b.n	8007178 <HAL_DMA_IRQHandler+0xe78>
 8006d42:	bf00      	nop
 8006d44:	40020010 	.word	0x40020010
 8006d48:	40020028 	.word	0x40020028
 8006d4c:	40020040 	.word	0x40020040
 8006d50:	40020058 	.word	0x40020058
 8006d54:	40020070 	.word	0x40020070
 8006d58:	40020088 	.word	0x40020088
 8006d5c:	400200a0 	.word	0x400200a0
 8006d60:	400200b8 	.word	0x400200b8
 8006d64:	40020410 	.word	0x40020410
 8006d68:	40020428 	.word	0x40020428
 8006d6c:	40020440 	.word	0x40020440
 8006d70:	40020458 	.word	0x40020458
 8006d74:	40020470 	.word	0x40020470
 8006d78:	40020488 	.word	0x40020488
 8006d7c:	400204a0 	.word	0x400204a0
 8006d80:	400204b8 	.word	0x400204b8
 8006d84:	48022c08 	.word	0x48022c08
 8006d88:	48022c1c 	.word	0x48022c1c
 8006d8c:	48022c30 	.word	0x48022c30
 8006d90:	48022c44 	.word	0x48022c44
 8006d94:	48022c58 	.word	0x48022c58
 8006d98:	48022c6c 	.word	0x48022c6c
 8006d9c:	48022c80 	.word	0x48022c80
 8006da0:	48022c94 	.word	0x48022c94
 8006da4:	58025408 	.word	0x58025408
 8006da8:	5802541c 	.word	0x5802541c
 8006dac:	58025430 	.word	0x58025430
 8006db0:	58025444 	.word	0x58025444
 8006db4:	58025458 	.word	0x58025458
 8006db8:	5802546c 	.word	0x5802546c
 8006dbc:	58025480 	.word	0x58025480
 8006dc0:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 81d5 	beq.w	8007178 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dd6:	e1cf      	b.n	8007178 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d160      	bne.n	8006ea4 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a7f      	ldr	r2, [pc, #508]	; (8006fe4 <HAL_DMA_IRQHandler+0xce4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d04a      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xb82>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a7d      	ldr	r2, [pc, #500]	; (8006fe8 <HAL_DMA_IRQHandler+0xce8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d045      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xb82>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a7c      	ldr	r2, [pc, #496]	; (8006fec <HAL_DMA_IRQHandler+0xcec>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d040      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xb82>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a7a      	ldr	r2, [pc, #488]	; (8006ff0 <HAL_DMA_IRQHandler+0xcf0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d03b      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xb82>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a79      	ldr	r2, [pc, #484]	; (8006ff4 <HAL_DMA_IRQHandler+0xcf4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d036      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xb82>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a77      	ldr	r2, [pc, #476]	; (8006ff8 <HAL_DMA_IRQHandler+0xcf8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d031      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xb82>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a76      	ldr	r2, [pc, #472]	; (8006ffc <HAL_DMA_IRQHandler+0xcfc>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d02c      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xb82>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a74      	ldr	r2, [pc, #464]	; (8007000 <HAL_DMA_IRQHandler+0xd00>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d027      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xb82>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a73      	ldr	r2, [pc, #460]	; (8007004 <HAL_DMA_IRQHandler+0xd04>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d022      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xb82>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a71      	ldr	r2, [pc, #452]	; (8007008 <HAL_DMA_IRQHandler+0xd08>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d01d      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xb82>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a70      	ldr	r2, [pc, #448]	; (800700c <HAL_DMA_IRQHandler+0xd0c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d018      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xb82>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a6e      	ldr	r2, [pc, #440]	; (8007010 <HAL_DMA_IRQHandler+0xd10>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d013      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xb82>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a6d      	ldr	r2, [pc, #436]	; (8007014 <HAL_DMA_IRQHandler+0xd14>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00e      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xb82>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a6b      	ldr	r2, [pc, #428]	; (8007018 <HAL_DMA_IRQHandler+0xd18>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d009      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xb82>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a6a      	ldr	r2, [pc, #424]	; (800701c <HAL_DMA_IRQHandler+0xd1c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d004      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xb82>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a68      	ldr	r2, [pc, #416]	; (8007020 <HAL_DMA_IRQHandler+0xd20>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d108      	bne.n	8006e94 <HAL_DMA_IRQHandler+0xb94>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 0208 	bic.w	r2, r2, #8
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	e007      	b.n	8006ea4 <HAL_DMA_IRQHandler+0xba4>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 0204 	bic.w	r2, r2, #4
 8006ea2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 8165 	beq.w	8007178 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eb6:	e15f      	b.n	8007178 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ebc:	f003 031f 	and.w	r3, r3, #31
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	409a      	lsls	r2, r3
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 80c5 	beq.w	8007058 <HAL_DMA_IRQHandler+0xd58>
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 80bf 	beq.w	8007058 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ede:	f003 031f 	and.w	r3, r3, #31
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	409a      	lsls	r2, r3
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d018      	beq.n	8006f26 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d109      	bne.n	8006f12 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 813a 	beq.w	800717c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f10:	e134      	b.n	800717c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 8130 	beq.w	800717c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f24:	e12a      	b.n	800717c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f003 0320 	and.w	r3, r3, #32
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f040 8089 	bne.w	8007044 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a2b      	ldr	r2, [pc, #172]	; (8006fe4 <HAL_DMA_IRQHandler+0xce4>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d04a      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xcd2>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a29      	ldr	r2, [pc, #164]	; (8006fe8 <HAL_DMA_IRQHandler+0xce8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d045      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xcd2>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a28      	ldr	r2, [pc, #160]	; (8006fec <HAL_DMA_IRQHandler+0xcec>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d040      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xcd2>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a26      	ldr	r2, [pc, #152]	; (8006ff0 <HAL_DMA_IRQHandler+0xcf0>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d03b      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xcd2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a25      	ldr	r2, [pc, #148]	; (8006ff4 <HAL_DMA_IRQHandler+0xcf4>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d036      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xcd2>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a23      	ldr	r2, [pc, #140]	; (8006ff8 <HAL_DMA_IRQHandler+0xcf8>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d031      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xcd2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a22      	ldr	r2, [pc, #136]	; (8006ffc <HAL_DMA_IRQHandler+0xcfc>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d02c      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xcd2>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a20      	ldr	r2, [pc, #128]	; (8007000 <HAL_DMA_IRQHandler+0xd00>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d027      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xcd2>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a1f      	ldr	r2, [pc, #124]	; (8007004 <HAL_DMA_IRQHandler+0xd04>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d022      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xcd2>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a1d      	ldr	r2, [pc, #116]	; (8007008 <HAL_DMA_IRQHandler+0xd08>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d01d      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xcd2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a1c      	ldr	r2, [pc, #112]	; (800700c <HAL_DMA_IRQHandler+0xd0c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d018      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xcd2>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a1a      	ldr	r2, [pc, #104]	; (8007010 <HAL_DMA_IRQHandler+0xd10>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d013      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xcd2>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a19      	ldr	r2, [pc, #100]	; (8007014 <HAL_DMA_IRQHandler+0xd14>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00e      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xcd2>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a17      	ldr	r2, [pc, #92]	; (8007018 <HAL_DMA_IRQHandler+0xd18>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d009      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xcd2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a16      	ldr	r2, [pc, #88]	; (800701c <HAL_DMA_IRQHandler+0xd1c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d004      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0xcd2>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a14      	ldr	r2, [pc, #80]	; (8007020 <HAL_DMA_IRQHandler+0xd20>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d128      	bne.n	8007024 <HAL_DMA_IRQHandler+0xd24>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0214 	bic.w	r2, r2, #20
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	e027      	b.n	8007034 <HAL_DMA_IRQHandler+0xd34>
 8006fe4:	40020010 	.word	0x40020010
 8006fe8:	40020028 	.word	0x40020028
 8006fec:	40020040 	.word	0x40020040
 8006ff0:	40020058 	.word	0x40020058
 8006ff4:	40020070 	.word	0x40020070
 8006ff8:	40020088 	.word	0x40020088
 8006ffc:	400200a0 	.word	0x400200a0
 8007000:	400200b8 	.word	0x400200b8
 8007004:	40020410 	.word	0x40020410
 8007008:	40020428 	.word	0x40020428
 800700c:	40020440 	.word	0x40020440
 8007010:	40020458 	.word	0x40020458
 8007014:	40020470 	.word	0x40020470
 8007018:	40020488 	.word	0x40020488
 800701c:	400204a0 	.word	0x400204a0
 8007020:	400204b8 	.word	0x400204b8
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 020a 	bic.w	r2, r2, #10
 8007032:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 8097 	beq.w	800717c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007056:	e091      	b.n	800717c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800705c:	f003 031f 	and.w	r3, r3, #31
 8007060:	2208      	movs	r2, #8
 8007062:	409a      	lsls	r2, r3
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	4013      	ands	r3, r2
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 8088 	beq.w	800717e <HAL_DMA_IRQHandler+0xe7e>
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f003 0308 	and.w	r3, r3, #8
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 8082 	beq.w	800717e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a41      	ldr	r2, [pc, #260]	; (8007184 <HAL_DMA_IRQHandler+0xe84>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d04a      	beq.n	800711a <HAL_DMA_IRQHandler+0xe1a>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a3f      	ldr	r2, [pc, #252]	; (8007188 <HAL_DMA_IRQHandler+0xe88>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d045      	beq.n	800711a <HAL_DMA_IRQHandler+0xe1a>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a3e      	ldr	r2, [pc, #248]	; (800718c <HAL_DMA_IRQHandler+0xe8c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d040      	beq.n	800711a <HAL_DMA_IRQHandler+0xe1a>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a3c      	ldr	r2, [pc, #240]	; (8007190 <HAL_DMA_IRQHandler+0xe90>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d03b      	beq.n	800711a <HAL_DMA_IRQHandler+0xe1a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a3b      	ldr	r2, [pc, #236]	; (8007194 <HAL_DMA_IRQHandler+0xe94>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d036      	beq.n	800711a <HAL_DMA_IRQHandler+0xe1a>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a39      	ldr	r2, [pc, #228]	; (8007198 <HAL_DMA_IRQHandler+0xe98>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d031      	beq.n	800711a <HAL_DMA_IRQHandler+0xe1a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a38      	ldr	r2, [pc, #224]	; (800719c <HAL_DMA_IRQHandler+0xe9c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d02c      	beq.n	800711a <HAL_DMA_IRQHandler+0xe1a>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a36      	ldr	r2, [pc, #216]	; (80071a0 <HAL_DMA_IRQHandler+0xea0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d027      	beq.n	800711a <HAL_DMA_IRQHandler+0xe1a>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a35      	ldr	r2, [pc, #212]	; (80071a4 <HAL_DMA_IRQHandler+0xea4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d022      	beq.n	800711a <HAL_DMA_IRQHandler+0xe1a>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a33      	ldr	r2, [pc, #204]	; (80071a8 <HAL_DMA_IRQHandler+0xea8>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d01d      	beq.n	800711a <HAL_DMA_IRQHandler+0xe1a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a32      	ldr	r2, [pc, #200]	; (80071ac <HAL_DMA_IRQHandler+0xeac>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d018      	beq.n	800711a <HAL_DMA_IRQHandler+0xe1a>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a30      	ldr	r2, [pc, #192]	; (80071b0 <HAL_DMA_IRQHandler+0xeb0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d013      	beq.n	800711a <HAL_DMA_IRQHandler+0xe1a>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a2f      	ldr	r2, [pc, #188]	; (80071b4 <HAL_DMA_IRQHandler+0xeb4>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d00e      	beq.n	800711a <HAL_DMA_IRQHandler+0xe1a>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a2d      	ldr	r2, [pc, #180]	; (80071b8 <HAL_DMA_IRQHandler+0xeb8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d009      	beq.n	800711a <HAL_DMA_IRQHandler+0xe1a>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a2c      	ldr	r2, [pc, #176]	; (80071bc <HAL_DMA_IRQHandler+0xebc>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d004      	beq.n	800711a <HAL_DMA_IRQHandler+0xe1a>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a2a      	ldr	r2, [pc, #168]	; (80071c0 <HAL_DMA_IRQHandler+0xec0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d108      	bne.n	800712c <HAL_DMA_IRQHandler+0xe2c>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 021c 	bic.w	r2, r2, #28
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	e007      	b.n	800713c <HAL_DMA_IRQHandler+0xe3c>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 020e 	bic.w	r2, r2, #14
 800713a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007140:	f003 031f 	and.w	r3, r3, #31
 8007144:	2201      	movs	r2, #1
 8007146:	409a      	lsls	r2, r3
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007166:	2b00      	cmp	r3, #0
 8007168:	d009      	beq.n	800717e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	4798      	blx	r3
 8007172:	e004      	b.n	800717e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8007174:	bf00      	nop
 8007176:	e002      	b.n	800717e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007178:	bf00      	nop
 800717a:	e000      	b.n	800717e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800717c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800717e:	3728      	adds	r7, #40	; 0x28
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	40020010 	.word	0x40020010
 8007188:	40020028 	.word	0x40020028
 800718c:	40020040 	.word	0x40020040
 8007190:	40020058 	.word	0x40020058
 8007194:	40020070 	.word	0x40020070
 8007198:	40020088 	.word	0x40020088
 800719c:	400200a0 	.word	0x400200a0
 80071a0:	400200b8 	.word	0x400200b8
 80071a4:	40020410 	.word	0x40020410
 80071a8:	40020428 	.word	0x40020428
 80071ac:	40020440 	.word	0x40020440
 80071b0:	40020458 	.word	0x40020458
 80071b4:	40020470 	.word	0x40020470
 80071b8:	40020488 	.word	0x40020488
 80071bc:	400204a0 	.word	0x400204a0
 80071c0:	400204b8 	.word	0x400204b8

080071c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a7f      	ldr	r2, [pc, #508]	; (80073e0 <DMA_SetConfig+0x21c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d072      	beq.n	80072ce <DMA_SetConfig+0x10a>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a7d      	ldr	r2, [pc, #500]	; (80073e4 <DMA_SetConfig+0x220>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d06d      	beq.n	80072ce <DMA_SetConfig+0x10a>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a7c      	ldr	r2, [pc, #496]	; (80073e8 <DMA_SetConfig+0x224>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d068      	beq.n	80072ce <DMA_SetConfig+0x10a>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a7a      	ldr	r2, [pc, #488]	; (80073ec <DMA_SetConfig+0x228>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d063      	beq.n	80072ce <DMA_SetConfig+0x10a>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a79      	ldr	r2, [pc, #484]	; (80073f0 <DMA_SetConfig+0x22c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d05e      	beq.n	80072ce <DMA_SetConfig+0x10a>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a77      	ldr	r2, [pc, #476]	; (80073f4 <DMA_SetConfig+0x230>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d059      	beq.n	80072ce <DMA_SetConfig+0x10a>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a76      	ldr	r2, [pc, #472]	; (80073f8 <DMA_SetConfig+0x234>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d054      	beq.n	80072ce <DMA_SetConfig+0x10a>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a74      	ldr	r2, [pc, #464]	; (80073fc <DMA_SetConfig+0x238>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d04f      	beq.n	80072ce <DMA_SetConfig+0x10a>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a73      	ldr	r2, [pc, #460]	; (8007400 <DMA_SetConfig+0x23c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d04a      	beq.n	80072ce <DMA_SetConfig+0x10a>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a71      	ldr	r2, [pc, #452]	; (8007404 <DMA_SetConfig+0x240>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d045      	beq.n	80072ce <DMA_SetConfig+0x10a>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a70      	ldr	r2, [pc, #448]	; (8007408 <DMA_SetConfig+0x244>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d040      	beq.n	80072ce <DMA_SetConfig+0x10a>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a6e      	ldr	r2, [pc, #440]	; (800740c <DMA_SetConfig+0x248>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d03b      	beq.n	80072ce <DMA_SetConfig+0x10a>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a6d      	ldr	r2, [pc, #436]	; (8007410 <DMA_SetConfig+0x24c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d036      	beq.n	80072ce <DMA_SetConfig+0x10a>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a6b      	ldr	r2, [pc, #428]	; (8007414 <DMA_SetConfig+0x250>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d031      	beq.n	80072ce <DMA_SetConfig+0x10a>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a6a      	ldr	r2, [pc, #424]	; (8007418 <DMA_SetConfig+0x254>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d02c      	beq.n	80072ce <DMA_SetConfig+0x10a>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a68      	ldr	r2, [pc, #416]	; (800741c <DMA_SetConfig+0x258>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d027      	beq.n	80072ce <DMA_SetConfig+0x10a>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a67      	ldr	r2, [pc, #412]	; (8007420 <DMA_SetConfig+0x25c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d022      	beq.n	80072ce <DMA_SetConfig+0x10a>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a65      	ldr	r2, [pc, #404]	; (8007424 <DMA_SetConfig+0x260>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d01d      	beq.n	80072ce <DMA_SetConfig+0x10a>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a64      	ldr	r2, [pc, #400]	; (8007428 <DMA_SetConfig+0x264>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d018      	beq.n	80072ce <DMA_SetConfig+0x10a>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a62      	ldr	r2, [pc, #392]	; (800742c <DMA_SetConfig+0x268>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d013      	beq.n	80072ce <DMA_SetConfig+0x10a>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a61      	ldr	r2, [pc, #388]	; (8007430 <DMA_SetConfig+0x26c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d00e      	beq.n	80072ce <DMA_SetConfig+0x10a>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a5f      	ldr	r2, [pc, #380]	; (8007434 <DMA_SetConfig+0x270>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d009      	beq.n	80072ce <DMA_SetConfig+0x10a>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a5e      	ldr	r2, [pc, #376]	; (8007438 <DMA_SetConfig+0x274>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d004      	beq.n	80072ce <DMA_SetConfig+0x10a>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a5c      	ldr	r2, [pc, #368]	; (800743c <DMA_SetConfig+0x278>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d101      	bne.n	80072d2 <DMA_SetConfig+0x10e>
 80072ce:	2301      	movs	r3, #1
 80072d0:	e000      	b.n	80072d4 <DMA_SetConfig+0x110>
 80072d2:	2300      	movs	r3, #0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00d      	beq.n	80072f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d004      	beq.n	80072f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80072f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a39      	ldr	r2, [pc, #228]	; (80073e0 <DMA_SetConfig+0x21c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d04a      	beq.n	8007394 <DMA_SetConfig+0x1d0>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a38      	ldr	r2, [pc, #224]	; (80073e4 <DMA_SetConfig+0x220>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d045      	beq.n	8007394 <DMA_SetConfig+0x1d0>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a36      	ldr	r2, [pc, #216]	; (80073e8 <DMA_SetConfig+0x224>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d040      	beq.n	8007394 <DMA_SetConfig+0x1d0>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a35      	ldr	r2, [pc, #212]	; (80073ec <DMA_SetConfig+0x228>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d03b      	beq.n	8007394 <DMA_SetConfig+0x1d0>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a33      	ldr	r2, [pc, #204]	; (80073f0 <DMA_SetConfig+0x22c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d036      	beq.n	8007394 <DMA_SetConfig+0x1d0>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a32      	ldr	r2, [pc, #200]	; (80073f4 <DMA_SetConfig+0x230>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d031      	beq.n	8007394 <DMA_SetConfig+0x1d0>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a30      	ldr	r2, [pc, #192]	; (80073f8 <DMA_SetConfig+0x234>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d02c      	beq.n	8007394 <DMA_SetConfig+0x1d0>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a2f      	ldr	r2, [pc, #188]	; (80073fc <DMA_SetConfig+0x238>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d027      	beq.n	8007394 <DMA_SetConfig+0x1d0>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a2d      	ldr	r2, [pc, #180]	; (8007400 <DMA_SetConfig+0x23c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d022      	beq.n	8007394 <DMA_SetConfig+0x1d0>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a2c      	ldr	r2, [pc, #176]	; (8007404 <DMA_SetConfig+0x240>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d01d      	beq.n	8007394 <DMA_SetConfig+0x1d0>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a2a      	ldr	r2, [pc, #168]	; (8007408 <DMA_SetConfig+0x244>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d018      	beq.n	8007394 <DMA_SetConfig+0x1d0>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a29      	ldr	r2, [pc, #164]	; (800740c <DMA_SetConfig+0x248>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d013      	beq.n	8007394 <DMA_SetConfig+0x1d0>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a27      	ldr	r2, [pc, #156]	; (8007410 <DMA_SetConfig+0x24c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d00e      	beq.n	8007394 <DMA_SetConfig+0x1d0>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a26      	ldr	r2, [pc, #152]	; (8007414 <DMA_SetConfig+0x250>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d009      	beq.n	8007394 <DMA_SetConfig+0x1d0>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a24      	ldr	r2, [pc, #144]	; (8007418 <DMA_SetConfig+0x254>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d004      	beq.n	8007394 <DMA_SetConfig+0x1d0>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a23      	ldr	r2, [pc, #140]	; (800741c <DMA_SetConfig+0x258>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d101      	bne.n	8007398 <DMA_SetConfig+0x1d4>
 8007394:	2301      	movs	r3, #1
 8007396:	e000      	b.n	800739a <DMA_SetConfig+0x1d6>
 8007398:	2300      	movs	r3, #0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d059      	beq.n	8007452 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a2:	f003 031f 	and.w	r3, r3, #31
 80073a6:	223f      	movs	r2, #63	; 0x3f
 80073a8:	409a      	lsls	r2, r3
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	2b40      	cmp	r3, #64	; 0x40
 80073cc:	d138      	bne.n	8007440 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80073de:	e0ae      	b.n	800753e <DMA_SetConfig+0x37a>
 80073e0:	40020010 	.word	0x40020010
 80073e4:	40020028 	.word	0x40020028
 80073e8:	40020040 	.word	0x40020040
 80073ec:	40020058 	.word	0x40020058
 80073f0:	40020070 	.word	0x40020070
 80073f4:	40020088 	.word	0x40020088
 80073f8:	400200a0 	.word	0x400200a0
 80073fc:	400200b8 	.word	0x400200b8
 8007400:	40020410 	.word	0x40020410
 8007404:	40020428 	.word	0x40020428
 8007408:	40020440 	.word	0x40020440
 800740c:	40020458 	.word	0x40020458
 8007410:	40020470 	.word	0x40020470
 8007414:	40020488 	.word	0x40020488
 8007418:	400204a0 	.word	0x400204a0
 800741c:	400204b8 	.word	0x400204b8
 8007420:	58025408 	.word	0x58025408
 8007424:	5802541c 	.word	0x5802541c
 8007428:	58025430 	.word	0x58025430
 800742c:	58025444 	.word	0x58025444
 8007430:	58025458 	.word	0x58025458
 8007434:	5802546c 	.word	0x5802546c
 8007438:	58025480 	.word	0x58025480
 800743c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	60da      	str	r2, [r3, #12]
}
 8007450:	e075      	b.n	800753e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a3d      	ldr	r2, [pc, #244]	; (800754c <DMA_SetConfig+0x388>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d04a      	beq.n	80074f2 <DMA_SetConfig+0x32e>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a3b      	ldr	r2, [pc, #236]	; (8007550 <DMA_SetConfig+0x38c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d045      	beq.n	80074f2 <DMA_SetConfig+0x32e>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a3a      	ldr	r2, [pc, #232]	; (8007554 <DMA_SetConfig+0x390>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d040      	beq.n	80074f2 <DMA_SetConfig+0x32e>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a38      	ldr	r2, [pc, #224]	; (8007558 <DMA_SetConfig+0x394>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d03b      	beq.n	80074f2 <DMA_SetConfig+0x32e>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a37      	ldr	r2, [pc, #220]	; (800755c <DMA_SetConfig+0x398>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d036      	beq.n	80074f2 <DMA_SetConfig+0x32e>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a35      	ldr	r2, [pc, #212]	; (8007560 <DMA_SetConfig+0x39c>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d031      	beq.n	80074f2 <DMA_SetConfig+0x32e>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a34      	ldr	r2, [pc, #208]	; (8007564 <DMA_SetConfig+0x3a0>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d02c      	beq.n	80074f2 <DMA_SetConfig+0x32e>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a32      	ldr	r2, [pc, #200]	; (8007568 <DMA_SetConfig+0x3a4>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d027      	beq.n	80074f2 <DMA_SetConfig+0x32e>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a31      	ldr	r2, [pc, #196]	; (800756c <DMA_SetConfig+0x3a8>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d022      	beq.n	80074f2 <DMA_SetConfig+0x32e>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a2f      	ldr	r2, [pc, #188]	; (8007570 <DMA_SetConfig+0x3ac>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d01d      	beq.n	80074f2 <DMA_SetConfig+0x32e>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a2e      	ldr	r2, [pc, #184]	; (8007574 <DMA_SetConfig+0x3b0>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d018      	beq.n	80074f2 <DMA_SetConfig+0x32e>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a2c      	ldr	r2, [pc, #176]	; (8007578 <DMA_SetConfig+0x3b4>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d013      	beq.n	80074f2 <DMA_SetConfig+0x32e>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a2b      	ldr	r2, [pc, #172]	; (800757c <DMA_SetConfig+0x3b8>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00e      	beq.n	80074f2 <DMA_SetConfig+0x32e>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a29      	ldr	r2, [pc, #164]	; (8007580 <DMA_SetConfig+0x3bc>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d009      	beq.n	80074f2 <DMA_SetConfig+0x32e>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a28      	ldr	r2, [pc, #160]	; (8007584 <DMA_SetConfig+0x3c0>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d004      	beq.n	80074f2 <DMA_SetConfig+0x32e>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a26      	ldr	r2, [pc, #152]	; (8007588 <DMA_SetConfig+0x3c4>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d101      	bne.n	80074f6 <DMA_SetConfig+0x332>
 80074f2:	2301      	movs	r3, #1
 80074f4:	e000      	b.n	80074f8 <DMA_SetConfig+0x334>
 80074f6:	2300      	movs	r3, #0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d020      	beq.n	800753e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007500:	f003 031f 	and.w	r3, r3, #31
 8007504:	2201      	movs	r2, #1
 8007506:	409a      	lsls	r2, r3
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	2b40      	cmp	r3, #64	; 0x40
 800751a:	d108      	bne.n	800752e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	60da      	str	r2, [r3, #12]
}
 800752c:	e007      	b.n	800753e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	60da      	str	r2, [r3, #12]
}
 800753e:	bf00      	nop
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	48022c08 	.word	0x48022c08
 8007550:	48022c1c 	.word	0x48022c1c
 8007554:	48022c30 	.word	0x48022c30
 8007558:	48022c44 	.word	0x48022c44
 800755c:	48022c58 	.word	0x48022c58
 8007560:	48022c6c 	.word	0x48022c6c
 8007564:	48022c80 	.word	0x48022c80
 8007568:	48022c94 	.word	0x48022c94
 800756c:	58025408 	.word	0x58025408
 8007570:	5802541c 	.word	0x5802541c
 8007574:	58025430 	.word	0x58025430
 8007578:	58025444 	.word	0x58025444
 800757c:	58025458 	.word	0x58025458
 8007580:	5802546c 	.word	0x5802546c
 8007584:	58025480 	.word	0x58025480
 8007588:	58025494 	.word	0x58025494

0800758c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a42      	ldr	r2, [pc, #264]	; (80076a4 <DMA_CalcBaseAndBitshift+0x118>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d04a      	beq.n	8007634 <DMA_CalcBaseAndBitshift+0xa8>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a41      	ldr	r2, [pc, #260]	; (80076a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d045      	beq.n	8007634 <DMA_CalcBaseAndBitshift+0xa8>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a3f      	ldr	r2, [pc, #252]	; (80076ac <DMA_CalcBaseAndBitshift+0x120>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d040      	beq.n	8007634 <DMA_CalcBaseAndBitshift+0xa8>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a3e      	ldr	r2, [pc, #248]	; (80076b0 <DMA_CalcBaseAndBitshift+0x124>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d03b      	beq.n	8007634 <DMA_CalcBaseAndBitshift+0xa8>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a3c      	ldr	r2, [pc, #240]	; (80076b4 <DMA_CalcBaseAndBitshift+0x128>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d036      	beq.n	8007634 <DMA_CalcBaseAndBitshift+0xa8>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a3b      	ldr	r2, [pc, #236]	; (80076b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d031      	beq.n	8007634 <DMA_CalcBaseAndBitshift+0xa8>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a39      	ldr	r2, [pc, #228]	; (80076bc <DMA_CalcBaseAndBitshift+0x130>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d02c      	beq.n	8007634 <DMA_CalcBaseAndBitshift+0xa8>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a38      	ldr	r2, [pc, #224]	; (80076c0 <DMA_CalcBaseAndBitshift+0x134>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d027      	beq.n	8007634 <DMA_CalcBaseAndBitshift+0xa8>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a36      	ldr	r2, [pc, #216]	; (80076c4 <DMA_CalcBaseAndBitshift+0x138>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d022      	beq.n	8007634 <DMA_CalcBaseAndBitshift+0xa8>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a35      	ldr	r2, [pc, #212]	; (80076c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d01d      	beq.n	8007634 <DMA_CalcBaseAndBitshift+0xa8>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a33      	ldr	r2, [pc, #204]	; (80076cc <DMA_CalcBaseAndBitshift+0x140>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d018      	beq.n	8007634 <DMA_CalcBaseAndBitshift+0xa8>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a32      	ldr	r2, [pc, #200]	; (80076d0 <DMA_CalcBaseAndBitshift+0x144>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d013      	beq.n	8007634 <DMA_CalcBaseAndBitshift+0xa8>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a30      	ldr	r2, [pc, #192]	; (80076d4 <DMA_CalcBaseAndBitshift+0x148>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d00e      	beq.n	8007634 <DMA_CalcBaseAndBitshift+0xa8>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a2f      	ldr	r2, [pc, #188]	; (80076d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d009      	beq.n	8007634 <DMA_CalcBaseAndBitshift+0xa8>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a2d      	ldr	r2, [pc, #180]	; (80076dc <DMA_CalcBaseAndBitshift+0x150>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d004      	beq.n	8007634 <DMA_CalcBaseAndBitshift+0xa8>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a2c      	ldr	r2, [pc, #176]	; (80076e0 <DMA_CalcBaseAndBitshift+0x154>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d101      	bne.n	8007638 <DMA_CalcBaseAndBitshift+0xac>
 8007634:	2301      	movs	r3, #1
 8007636:	e000      	b.n	800763a <DMA_CalcBaseAndBitshift+0xae>
 8007638:	2300      	movs	r3, #0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d024      	beq.n	8007688 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	b2db      	uxtb	r3, r3
 8007644:	3b10      	subs	r3, #16
 8007646:	4a27      	ldr	r2, [pc, #156]	; (80076e4 <DMA_CalcBaseAndBitshift+0x158>)
 8007648:	fba2 2303 	umull	r2, r3, r2, r3
 800764c:	091b      	lsrs	r3, r3, #4
 800764e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	4a24      	ldr	r2, [pc, #144]	; (80076e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007658:	5cd3      	ldrb	r3, [r2, r3]
 800765a:	461a      	mov	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2b03      	cmp	r3, #3
 8007664:	d908      	bls.n	8007678 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	461a      	mov	r2, r3
 800766c:	4b1f      	ldr	r3, [pc, #124]	; (80076ec <DMA_CalcBaseAndBitshift+0x160>)
 800766e:	4013      	ands	r3, r2
 8007670:	1d1a      	adds	r2, r3, #4
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	659a      	str	r2, [r3, #88]	; 0x58
 8007676:	e00d      	b.n	8007694 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	461a      	mov	r2, r3
 800767e:	4b1b      	ldr	r3, [pc, #108]	; (80076ec <DMA_CalcBaseAndBitshift+0x160>)
 8007680:	4013      	ands	r3, r2
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	6593      	str	r3, [r2, #88]	; 0x58
 8007686:	e005      	b.n	8007694 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007698:	4618      	mov	r0, r3
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	40020010 	.word	0x40020010
 80076a8:	40020028 	.word	0x40020028
 80076ac:	40020040 	.word	0x40020040
 80076b0:	40020058 	.word	0x40020058
 80076b4:	40020070 	.word	0x40020070
 80076b8:	40020088 	.word	0x40020088
 80076bc:	400200a0 	.word	0x400200a0
 80076c0:	400200b8 	.word	0x400200b8
 80076c4:	40020410 	.word	0x40020410
 80076c8:	40020428 	.word	0x40020428
 80076cc:	40020440 	.word	0x40020440
 80076d0:	40020458 	.word	0x40020458
 80076d4:	40020470 	.word	0x40020470
 80076d8:	40020488 	.word	0x40020488
 80076dc:	400204a0 	.word	0x400204a0
 80076e0:	400204b8 	.word	0x400204b8
 80076e4:	aaaaaaab 	.word	0xaaaaaaab
 80076e8:	08010d40 	.word	0x08010d40
 80076ec:	fffffc00 	.word	0xfffffc00

080076f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d120      	bne.n	8007746 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007708:	2b03      	cmp	r3, #3
 800770a:	d858      	bhi.n	80077be <DMA_CheckFifoParam+0xce>
 800770c:	a201      	add	r2, pc, #4	; (adr r2, 8007714 <DMA_CheckFifoParam+0x24>)
 800770e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007712:	bf00      	nop
 8007714:	08007725 	.word	0x08007725
 8007718:	08007737 	.word	0x08007737
 800771c:	08007725 	.word	0x08007725
 8007720:	080077bf 	.word	0x080077bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d048      	beq.n	80077c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007734:	e045      	b.n	80077c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800773e:	d142      	bne.n	80077c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007744:	e03f      	b.n	80077c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800774e:	d123      	bne.n	8007798 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007754:	2b03      	cmp	r3, #3
 8007756:	d838      	bhi.n	80077ca <DMA_CheckFifoParam+0xda>
 8007758:	a201      	add	r2, pc, #4	; (adr r2, 8007760 <DMA_CheckFifoParam+0x70>)
 800775a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775e:	bf00      	nop
 8007760:	08007771 	.word	0x08007771
 8007764:	08007777 	.word	0x08007777
 8007768:	08007771 	.word	0x08007771
 800776c:	08007789 	.word	0x08007789
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	73fb      	strb	r3, [r7, #15]
        break;
 8007774:	e030      	b.n	80077d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d025      	beq.n	80077ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007786:	e022      	b.n	80077ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007790:	d11f      	bne.n	80077d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007796:	e01c      	b.n	80077d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779c:	2b02      	cmp	r3, #2
 800779e:	d902      	bls.n	80077a6 <DMA_CheckFifoParam+0xb6>
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	d003      	beq.n	80077ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80077a4:	e018      	b.n	80077d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	73fb      	strb	r3, [r7, #15]
        break;
 80077aa:	e015      	b.n	80077d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00e      	beq.n	80077d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	73fb      	strb	r3, [r7, #15]
    break;
 80077bc:	e00b      	b.n	80077d6 <DMA_CheckFifoParam+0xe6>
        break;
 80077be:	bf00      	nop
 80077c0:	e00a      	b.n	80077d8 <DMA_CheckFifoParam+0xe8>
        break;
 80077c2:	bf00      	nop
 80077c4:	e008      	b.n	80077d8 <DMA_CheckFifoParam+0xe8>
        break;
 80077c6:	bf00      	nop
 80077c8:	e006      	b.n	80077d8 <DMA_CheckFifoParam+0xe8>
        break;
 80077ca:	bf00      	nop
 80077cc:	e004      	b.n	80077d8 <DMA_CheckFifoParam+0xe8>
        break;
 80077ce:	bf00      	nop
 80077d0:	e002      	b.n	80077d8 <DMA_CheckFifoParam+0xe8>
        break;
 80077d2:	bf00      	nop
 80077d4:	e000      	b.n	80077d8 <DMA_CheckFifoParam+0xe8>
    break;
 80077d6:	bf00      	nop
    }
  }

  return status;
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop

080077e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a38      	ldr	r2, [pc, #224]	; (80078dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d022      	beq.n	8007846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a36      	ldr	r2, [pc, #216]	; (80078e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d01d      	beq.n	8007846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a35      	ldr	r2, [pc, #212]	; (80078e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d018      	beq.n	8007846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a33      	ldr	r2, [pc, #204]	; (80078e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d013      	beq.n	8007846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a32      	ldr	r2, [pc, #200]	; (80078ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d00e      	beq.n	8007846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a30      	ldr	r2, [pc, #192]	; (80078f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d009      	beq.n	8007846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a2f      	ldr	r2, [pc, #188]	; (80078f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d004      	beq.n	8007846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a2d      	ldr	r2, [pc, #180]	; (80078f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d101      	bne.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007846:	2301      	movs	r3, #1
 8007848:	e000      	b.n	800784c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800784a:	2300      	movs	r3, #0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01a      	beq.n	8007886 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	b2db      	uxtb	r3, r3
 8007856:	3b08      	subs	r3, #8
 8007858:	4a28      	ldr	r2, [pc, #160]	; (80078fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800785a:	fba2 2303 	umull	r2, r3, r2, r3
 800785e:	091b      	lsrs	r3, r3, #4
 8007860:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	4b26      	ldr	r3, [pc, #152]	; (8007900 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007866:	4413      	add	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	461a      	mov	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a24      	ldr	r2, [pc, #144]	; (8007904 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007874:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f003 031f 	and.w	r3, r3, #31
 800787c:	2201      	movs	r2, #1
 800787e:	409a      	lsls	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007884:	e024      	b.n	80078d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	b2db      	uxtb	r3, r3
 800788c:	3b10      	subs	r3, #16
 800788e:	4a1e      	ldr	r2, [pc, #120]	; (8007908 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007890:	fba2 2303 	umull	r2, r3, r2, r3
 8007894:	091b      	lsrs	r3, r3, #4
 8007896:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4a1c      	ldr	r2, [pc, #112]	; (800790c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d806      	bhi.n	80078ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	4a1b      	ldr	r2, [pc, #108]	; (8007910 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d902      	bls.n	80078ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3308      	adds	r3, #8
 80078ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	4b18      	ldr	r3, [pc, #96]	; (8007914 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80078b2:	4413      	add	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	461a      	mov	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a16      	ldr	r2, [pc, #88]	; (8007918 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80078c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f003 031f 	and.w	r3, r3, #31
 80078c8:	2201      	movs	r2, #1
 80078ca:	409a      	lsls	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078d0:	bf00      	nop
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	58025408 	.word	0x58025408
 80078e0:	5802541c 	.word	0x5802541c
 80078e4:	58025430 	.word	0x58025430
 80078e8:	58025444 	.word	0x58025444
 80078ec:	58025458 	.word	0x58025458
 80078f0:	5802546c 	.word	0x5802546c
 80078f4:	58025480 	.word	0x58025480
 80078f8:	58025494 	.word	0x58025494
 80078fc:	cccccccd 	.word	0xcccccccd
 8007900:	16009600 	.word	0x16009600
 8007904:	58025880 	.word	0x58025880
 8007908:	aaaaaaab 	.word	0xaaaaaaab
 800790c:	400204b8 	.word	0x400204b8
 8007910:	4002040f 	.word	0x4002040f
 8007914:	10008200 	.word	0x10008200
 8007918:	40020880 	.word	0x40020880

0800791c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	b2db      	uxtb	r3, r3
 800792a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d04a      	beq.n	80079c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b08      	cmp	r3, #8
 8007936:	d847      	bhi.n	80079c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a25      	ldr	r2, [pc, #148]	; (80079d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d022      	beq.n	8007988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a24      	ldr	r2, [pc, #144]	; (80079d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d01d      	beq.n	8007988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a22      	ldr	r2, [pc, #136]	; (80079dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d018      	beq.n	8007988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a21      	ldr	r2, [pc, #132]	; (80079e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d013      	beq.n	8007988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a1f      	ldr	r2, [pc, #124]	; (80079e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d00e      	beq.n	8007988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a1e      	ldr	r2, [pc, #120]	; (80079e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d009      	beq.n	8007988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a1c      	ldr	r2, [pc, #112]	; (80079ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d004      	beq.n	8007988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a1b      	ldr	r2, [pc, #108]	; (80079f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d101      	bne.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007988:	2301      	movs	r3, #1
 800798a:	e000      	b.n	800798e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800798c:	2300      	movs	r3, #0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	4b17      	ldr	r3, [pc, #92]	; (80079f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	461a      	mov	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a15      	ldr	r2, [pc, #84]	; (80079f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80079a4:	671a      	str	r2, [r3, #112]	; 0x70
 80079a6:	e009      	b.n	80079bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4b14      	ldr	r3, [pc, #80]	; (80079fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	461a      	mov	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a11      	ldr	r2, [pc, #68]	; (8007a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80079ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	3b01      	subs	r3, #1
 80079c0:	2201      	movs	r2, #1
 80079c2:	409a      	lsls	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80079c8:	bf00      	nop
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	58025408 	.word	0x58025408
 80079d8:	5802541c 	.word	0x5802541c
 80079dc:	58025430 	.word	0x58025430
 80079e0:	58025444 	.word	0x58025444
 80079e4:	58025458 	.word	0x58025458
 80079e8:	5802546c 	.word	0x5802546c
 80079ec:	58025480 	.word	0x58025480
 80079f0:	58025494 	.word	0x58025494
 80079f4:	1600963f 	.word	0x1600963f
 80079f8:	58025940 	.word	0x58025940
 80079fc:	1000823f 	.word	0x1000823f
 8007a00:	40020940 	.word	0x40020940

08007a04 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e04f      	b.n	8007ab6 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d106      	bne.n	8007a30 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7f8 ffd0 	bl	80009d0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	4b20      	ldr	r3, [pc, #128]	; (8007ac0 <HAL_DMA2D_Init+0xbc>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6851      	ldr	r1, [r2, #4]
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	69d2      	ldr	r2, [r2, #28]
 8007a4a:	4311      	orrs	r1, r2
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6812      	ldr	r2, [r2, #0]
 8007a50:	430b      	orrs	r3, r1
 8007a52:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a5a:	4b1a      	ldr	r3, [pc, #104]	; (8007ac4 <HAL_DMA2D_Init+0xc0>)
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	6891      	ldr	r1, [r2, #8]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	6992      	ldr	r2, [r2, #24]
 8007a66:	4311      	orrs	r1, r2
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6812      	ldr	r2, [r2, #0]
 8007a6c:	430b      	orrs	r3, r1
 8007a6e:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a76:	4b14      	ldr	r3, [pc, #80]	; (8007ac8 <HAL_DMA2D_Init+0xc4>)
 8007a78:	4013      	ands	r3, r2
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	68d1      	ldr	r1, [r2, #12]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	6812      	ldr	r2, [r2, #0]
 8007a82:	430b      	orrs	r3, r1
 8007a84:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	051a      	lsls	r2, r3, #20
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	055b      	lsls	r3, r3, #21
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	fff8ffbf 	.word	0xfff8ffbf
 8007ac4:	fffffef8 	.word	0xfffffef8
 8007ac8:	ffff0000 	.word	0xffff0000

08007acc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af02      	add	r7, sp, #8
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
 8007ad8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d101      	bne.n	8007ae8 <HAL_DMA2D_Start+0x1c>
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	e018      	b.n	8007b1a <HAL_DMA2D_Start+0x4e>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	68b9      	ldr	r1, [r7, #8]
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 fab4 	bl	8008070 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f042 0201 	orr.w	r2, r2, #1
 8007b16:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b086      	sub	sp, #24
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d056      	beq.n	8007bec <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b3e:	f7fc fc73 	bl	8004428 <HAL_GetTick>
 8007b42:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007b44:	e04b      	b.n	8007bde <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d023      	beq.n	8007ba0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d005      	beq.n	8007b6e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b66:	f043 0202 	orr.w	r2, r3, #2
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f003 0301 	and.w	r3, r3, #1
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d005      	beq.n	8007b84 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b7c:	f043 0201 	orr.w	r2, r3, #1
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2221      	movs	r2, #33	; 0x21
 8007b8a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2204      	movs	r2, #4
 8007b90:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e0a5      	b.n	8007cec <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ba6:	d01a      	beq.n	8007bde <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007ba8:	f7fc fc3e 	bl	8004428 <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d302      	bcc.n	8007bbe <HAL_DMA2D_PollForTransfer+0x9c>
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10f      	bne.n	8007bde <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bc2:	f043 0220 	orr.w	r2, r3, #32
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2203      	movs	r2, #3
 8007bce:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e086      	b.n	8007cec <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d0ac      	beq.n	8007b46 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	f003 0320 	and.w	r3, r3, #32
 8007bf6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	f003 0320 	and.w	r3, r3, #32
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d061      	beq.n	8007cd2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c0e:	f7fc fc0b 	bl	8004428 <HAL_GetTick>
 8007c12:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007c14:	e056      	b.n	8007cc4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d02e      	beq.n	8007c86 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f003 0308 	and.w	r3, r3, #8
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d005      	beq.n	8007c3e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c36:	f043 0204 	orr.w	r2, r3, #4
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f003 0320 	and.w	r3, r3, #32
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d005      	beq.n	8007c54 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c4c:	f043 0202 	orr.w	r2, r3, #2
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d005      	beq.n	8007c6a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c62:	f043 0201 	orr.w	r2, r3, #1
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2229      	movs	r2, #41	; 0x29
 8007c70:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2204      	movs	r2, #4
 8007c76:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e032      	b.n	8007cec <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c8c:	d01a      	beq.n	8007cc4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c8e:	f7fc fbcb 	bl	8004428 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d302      	bcc.n	8007ca4 <HAL_DMA2D_PollForTransfer+0x182>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10f      	bne.n	8007cc4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ca8:	f043 0220 	orr.w	r2, r3, #32
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2203      	movs	r2, #3
 8007cb4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e013      	b.n	8007cec <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f003 0310 	and.w	r3, r3, #16
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0a1      	beq.n	8007c16 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2212      	movs	r2, #18
 8007cd8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d026      	beq.n	8007d64 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d021      	beq.n	8007d64 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d2e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d34:	f043 0201 	orr.w	r2, r3, #1
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2201      	movs	r2, #1
 8007d42:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2204      	movs	r2, #4
 8007d48:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d003      	beq.n	8007d64 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f003 0320 	and.w	r3, r3, #32
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d026      	beq.n	8007dbc <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d021      	beq.n	8007dbc <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d86:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d94:	f043 0202 	orr.w	r2, r3, #2
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2204      	movs	r2, #4
 8007da0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d003      	beq.n	8007dbc <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f003 0308 	and.w	r3, r3, #8
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d026      	beq.n	8007e14 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d021      	beq.n	8007e14 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dde:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2208      	movs	r2, #8
 8007de6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dec:	f043 0204 	orr.w	r2, r3, #4
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2204      	movs	r2, #4
 8007df8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d003      	beq.n	8007e14 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f003 0304 	and.w	r3, r3, #4
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d013      	beq.n	8007e46 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00e      	beq.n	8007e46 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e36:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2204      	movs	r2, #4
 8007e3e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f853 	bl	8007eec <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d024      	beq.n	8007e9a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d01f      	beq.n	8007e9a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007e68:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d003      	beq.n	8007e9a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f003 0310 	and.w	r3, r3, #16
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d01f      	beq.n	8007ee4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d01a      	beq.n	8007ee4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ebc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2210      	movs	r2, #16
 8007ec4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f80e 	bl	8007f00 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007ee4:	bf00      	nop
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d101      	bne.n	8007f38 <HAL_DMA2D_ConfigLayer+0x24>
 8007f34:	2302      	movs	r3, #2
 8007f36:	e092      	b.n	800805e <HAL_DMA2D_ConfigLayer+0x14a>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	00db      	lsls	r3, r3, #3
 8007f4e:	1a9b      	subs	r3, r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	3328      	adds	r3, #40	; 0x28
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	4413      	add	r3, r2
 8007f58:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	041b      	lsls	r3, r3, #16
 8007f64:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007f6c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007f74:	4313      	orrs	r3, r2
 8007f76:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007f78:	4b3c      	ldr	r3, [pc, #240]	; (800806c <HAL_DMA2D_ConfigLayer+0x158>)
 8007f7a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	2b0a      	cmp	r3, #10
 8007f82:	d003      	beq.n	8007f8c <HAL_DMA2D_ConfigLayer+0x78>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	2b09      	cmp	r3, #9
 8007f8a:	d107      	bne.n	8007f9c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	613b      	str	r3, [r7, #16]
 8007f9a:	e005      	b.n	8007fa8 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	061b      	lsls	r3, r3, #24
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d120      	bne.n	8007ff0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	43db      	mvns	r3, r3
 8007fb8:	ea02 0103 	and.w	r1, r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	6812      	ldr	r2, [r2, #0]
 8007fce:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	2b0a      	cmp	r3, #10
 8007fd6:	d003      	beq.n	8007fe0 <HAL_DMA2D_ConfigLayer+0xcc>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	2b09      	cmp	r3, #9
 8007fde:	d135      	bne.n	800804c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007fec:	629a      	str	r2, [r3, #40]	; 0x28
 8007fee:	e02d      	b.n	800804c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	2b0b      	cmp	r3, #11
 8007ff6:	d109      	bne.n	800800c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	049b      	lsls	r3, r3, #18
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	4313      	orrs	r3, r2
 8008002:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800800a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	69da      	ldr	r2, [r3, #28]
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	43db      	mvns	r3, r3
 8008016:	ea02 0103 	and.w	r1, r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	430a      	orrs	r2, r1
 8008022:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	6812      	ldr	r2, [r2, #0]
 800802c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	2b0a      	cmp	r3, #10
 8008034:	d003      	beq.n	800803e <HAL_DMA2D_ConfigLayer+0x12a>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	2b09      	cmp	r3, #9
 800803c:	d106      	bne.n	800804c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800804a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	371c      	adds	r7, #28
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	ff33000f 	.word	0xff33000f

08008070 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8008070:	b480      	push	{r7}
 8008072:	b08b      	sub	sp, #44	; 0x2c
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008084:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	041a      	lsls	r2, r3, #16
 800808c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808e:	431a      	orrs	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	430a      	orrs	r2, r1
 8008096:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080a8:	d174      	bne.n	8008194 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80080b0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080b8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80080c0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d108      	bne.n	80080e2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80080d0:	69ba      	ldr	r2, [r7, #24]
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	431a      	orrs	r2, r3
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	4313      	orrs	r3, r2
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	4313      	orrs	r3, r2
 80080de:	627b      	str	r3, [r7, #36]	; 0x24
 80080e0:	e053      	b.n	800818a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d106      	bne.n	80080f8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80080ea:	69ba      	ldr	r2, [r7, #24]
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	627b      	str	r3, [r7, #36]	; 0x24
 80080f6:	e048      	b.n	800818a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d111      	bne.n	8008124 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	0cdb      	lsrs	r3, r3, #19
 8008104:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	0a9b      	lsrs	r3, r3, #10
 800810a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	08db      	lsrs	r3, r3, #3
 8008110:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	015a      	lsls	r2, r3, #5
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	02db      	lsls	r3, r3, #11
 800811a:	4313      	orrs	r3, r2
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	4313      	orrs	r3, r2
 8008120:	627b      	str	r3, [r7, #36]	; 0x24
 8008122:	e032      	b.n	800818a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	2b03      	cmp	r3, #3
 800812a:	d117      	bne.n	800815c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800812c:	6a3b      	ldr	r3, [r7, #32]
 800812e:	0fdb      	lsrs	r3, r3, #31
 8008130:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	0cdb      	lsrs	r3, r3, #19
 8008136:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	0adb      	lsrs	r3, r3, #11
 800813c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	08db      	lsrs	r3, r3, #3
 8008142:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	015a      	lsls	r2, r3, #5
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	029b      	lsls	r3, r3, #10
 800814c:	431a      	orrs	r2, r3
 800814e:	6a3b      	ldr	r3, [r7, #32]
 8008150:	03db      	lsls	r3, r3, #15
 8008152:	4313      	orrs	r3, r2
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	627b      	str	r3, [r7, #36]	; 0x24
 800815a:	e016      	b.n	800818a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800815c:	6a3b      	ldr	r3, [r7, #32]
 800815e:	0f1b      	lsrs	r3, r3, #28
 8008160:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	0d1b      	lsrs	r3, r3, #20
 8008166:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	0b1b      	lsrs	r3, r3, #12
 800816c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	091b      	lsrs	r3, r3, #4
 8008172:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	011a      	lsls	r2, r3, #4
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	021b      	lsls	r3, r3, #8
 800817c:	431a      	orrs	r2, r3
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	031b      	lsls	r3, r3, #12
 8008182:	4313      	orrs	r3, r2
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	4313      	orrs	r3, r2
 8008188:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008190:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008192:	e00d      	b.n	80081b0 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800819c:	d104      	bne.n	80081a8 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	615a      	str	r2, [r3, #20]
}
 80081a6:	e003      	b.n	80081b0 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	60da      	str	r2, [r3, #12]
}
 80081b0:	bf00      	nop
 80081b2:	372c      	adds	r7, #44	; 0x2c
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	2b80      	cmp	r3, #128	; 0x80
 80081d4:	d105      	bne.n	80081e2 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e315      	b.n	800880e <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d101      	bne.n	80081f0 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80081ec:	2302      	movs	r3, #2
 80081ee:	e30e      	b.n	800880e <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b01      	cmp	r3, #1
 8008202:	f040 82fd 	bne.w	8008800 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2202      	movs	r2, #2
 800820a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a82      	ldr	r2, [pc, #520]	; (8008424 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d04a      	beq.n	80082b4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a81      	ldr	r2, [pc, #516]	; (8008428 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d045      	beq.n	80082b4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a7f      	ldr	r2, [pc, #508]	; (800842c <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d040      	beq.n	80082b4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a7e      	ldr	r2, [pc, #504]	; (8008430 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d03b      	beq.n	80082b4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a7c      	ldr	r2, [pc, #496]	; (8008434 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d036      	beq.n	80082b4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a7b      	ldr	r2, [pc, #492]	; (8008438 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d031      	beq.n	80082b4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a79      	ldr	r2, [pc, #484]	; (800843c <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d02c      	beq.n	80082b4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a78      	ldr	r2, [pc, #480]	; (8008440 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d027      	beq.n	80082b4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a76      	ldr	r2, [pc, #472]	; (8008444 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d022      	beq.n	80082b4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a75      	ldr	r2, [pc, #468]	; (8008448 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d01d      	beq.n	80082b4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a73      	ldr	r2, [pc, #460]	; (800844c <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d018      	beq.n	80082b4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a72      	ldr	r2, [pc, #456]	; (8008450 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d013      	beq.n	80082b4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a70      	ldr	r2, [pc, #448]	; (8008454 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d00e      	beq.n	80082b4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a6f      	ldr	r2, [pc, #444]	; (8008458 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d009      	beq.n	80082b4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a6d      	ldr	r2, [pc, #436]	; (800845c <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d004      	beq.n	80082b4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a6c      	ldr	r2, [pc, #432]	; (8008460 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d101      	bne.n	80082b8 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 80082b4:	2301      	movs	r3, #1
 80082b6:	e000      	b.n	80082ba <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 80082b8:	2300      	movs	r3, #0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d018      	beq.n	80082f0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80082cc:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082da:	3308      	adds	r3, #8
 80082dc:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082e2:	f003 031f 	and.w	r3, r3, #31
 80082e6:	223f      	movs	r2, #63	; 0x3f
 80082e8:	409a      	lsls	r2, r3
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	601a      	str	r2, [r3, #0]
 80082ee:	e018      	b.n	8008322 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6819      	ldr	r1, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	f248 0320 	movw	r3, #32800	; 0x8020
 80082fe:	430b      	orrs	r3, r1
 8008300:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800830e:	3304      	adds	r3, #4
 8008310:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008316:	f003 031f 	and.w	r3, r3, #31
 800831a:	2201      	movs	r2, #1
 800831c:	409a      	lsls	r2, r3
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	68b9      	ldr	r1, [r7, #8]
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f000 fb41 	bl	80089b0 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a3c      	ldr	r2, [pc, #240]	; (8008424 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d072      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a3a      	ldr	r2, [pc, #232]	; (8008428 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d06d      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a39      	ldr	r2, [pc, #228]	; (800842c <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d068      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a37      	ldr	r2, [pc, #220]	; (8008430 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d063      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a36      	ldr	r2, [pc, #216]	; (8008434 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d05e      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a34      	ldr	r2, [pc, #208]	; (8008438 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d059      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a33      	ldr	r2, [pc, #204]	; (800843c <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d054      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a31      	ldr	r2, [pc, #196]	; (8008440 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d04f      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a30      	ldr	r2, [pc, #192]	; (8008444 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d04a      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a2e      	ldr	r2, [pc, #184]	; (8008448 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d045      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a2d      	ldr	r2, [pc, #180]	; (800844c <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d040      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a2b      	ldr	r2, [pc, #172]	; (8008450 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d03b      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a2a      	ldr	r2, [pc, #168]	; (8008454 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d036      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a28      	ldr	r2, [pc, #160]	; (8008458 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d031      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a27      	ldr	r2, [pc, #156]	; (800845c <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d02c      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a25      	ldr	r2, [pc, #148]	; (8008460 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d027      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a24      	ldr	r2, [pc, #144]	; (8008464 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d022      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a22      	ldr	r2, [pc, #136]	; (8008468 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d01d      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a21      	ldr	r2, [pc, #132]	; (800846c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d018      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a1f      	ldr	r2, [pc, #124]	; (8008470 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d013      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a1e      	ldr	r2, [pc, #120]	; (8008474 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d00e      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a1c      	ldr	r2, [pc, #112]	; (8008478 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d009      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a1b      	ldr	r2, [pc, #108]	; (800847c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d004      	beq.n	800841e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a19      	ldr	r2, [pc, #100]	; (8008480 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d132      	bne.n	8008484 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 800841e:	2301      	movs	r3, #1
 8008420:	e031      	b.n	8008486 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8008422:	bf00      	nop
 8008424:	40020010 	.word	0x40020010
 8008428:	40020028 	.word	0x40020028
 800842c:	40020040 	.word	0x40020040
 8008430:	40020058 	.word	0x40020058
 8008434:	40020070 	.word	0x40020070
 8008438:	40020088 	.word	0x40020088
 800843c:	400200a0 	.word	0x400200a0
 8008440:	400200b8 	.word	0x400200b8
 8008444:	40020410 	.word	0x40020410
 8008448:	40020428 	.word	0x40020428
 800844c:	40020440 	.word	0x40020440
 8008450:	40020458 	.word	0x40020458
 8008454:	40020470 	.word	0x40020470
 8008458:	40020488 	.word	0x40020488
 800845c:	400204a0 	.word	0x400204a0
 8008460:	400204b8 	.word	0x400204b8
 8008464:	58025408 	.word	0x58025408
 8008468:	5802541c 	.word	0x5802541c
 800846c:	58025430 	.word	0x58025430
 8008470:	58025444 	.word	0x58025444
 8008474:	58025458 	.word	0x58025458
 8008478:	5802546c 	.word	0x5802546c
 800847c:	58025480 	.word	0x58025480
 8008480:	58025494 	.word	0x58025494
 8008484:	2300      	movs	r3, #0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00d      	beq.n	80084a6 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008492:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008498:	2b00      	cmp	r3, #0
 800849a:	d004      	beq.n	80084a6 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80084a4:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a3b      	ldr	r2, [pc, #236]	; (8008598 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d04a      	beq.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a39      	ldr	r2, [pc, #228]	; (800859c <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d045      	beq.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a38      	ldr	r2, [pc, #224]	; (80085a0 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d040      	beq.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a36      	ldr	r2, [pc, #216]	; (80085a4 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d03b      	beq.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a35      	ldr	r2, [pc, #212]	; (80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d036      	beq.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a33      	ldr	r2, [pc, #204]	; (80085ac <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d031      	beq.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a32      	ldr	r2, [pc, #200]	; (80085b0 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d02c      	beq.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a30      	ldr	r2, [pc, #192]	; (80085b4 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d027      	beq.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a2f      	ldr	r2, [pc, #188]	; (80085b8 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d022      	beq.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a2d      	ldr	r2, [pc, #180]	; (80085bc <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d01d      	beq.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a2c      	ldr	r2, [pc, #176]	; (80085c0 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d018      	beq.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a2a      	ldr	r2, [pc, #168]	; (80085c4 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d013      	beq.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a29      	ldr	r2, [pc, #164]	; (80085c8 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d00e      	beq.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a27      	ldr	r2, [pc, #156]	; (80085cc <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d009      	beq.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a26      	ldr	r2, [pc, #152]	; (80085d0 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d004      	beq.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a24      	ldr	r2, [pc, #144]	; (80085d4 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d101      	bne.n	800854a <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8008546:	2301      	movs	r3, #1
 8008548:	e000      	b.n	800854c <HAL_DMAEx_MultiBufferStart_IT+0x390>
 800854a:	2300      	movs	r3, #0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d043      	beq.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f023 021e 	bic.w	r2, r3, #30
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0216 	orr.w	r2, r2, #22
 8008562:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	695a      	ldr	r2, [r3, #20]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008572:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008578:	2b00      	cmp	r3, #0
 800857a:	d103      	bne.n	8008584 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008580:	2b00      	cmp	r3, #0
 8008582:	d043      	beq.n	800860c <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f042 0208 	orr.w	r2, r2, #8
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	e03a      	b.n	800860c <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8008596:	bf00      	nop
 8008598:	40020010 	.word	0x40020010
 800859c:	40020028 	.word	0x40020028
 80085a0:	40020040 	.word	0x40020040
 80085a4:	40020058 	.word	0x40020058
 80085a8:	40020070 	.word	0x40020070
 80085ac:	40020088 	.word	0x40020088
 80085b0:	400200a0 	.word	0x400200a0
 80085b4:	400200b8 	.word	0x400200b8
 80085b8:	40020410 	.word	0x40020410
 80085bc:	40020428 	.word	0x40020428
 80085c0:	40020440 	.word	0x40020440
 80085c4:	40020458 	.word	0x40020458
 80085c8:	40020470 	.word	0x40020470
 80085cc:	40020488 	.word	0x40020488
 80085d0:	400204a0 	.word	0x400204a0
 80085d4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f023 020e 	bic.w	r2, r3, #14
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f042 020a 	orr.w	r2, r2, #10
 80085ea:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d103      	bne.n	80085fc <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d007      	beq.n	800860c <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f042 0204 	orr.w	r2, r2, #4
 800860a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a81      	ldr	r2, [pc, #516]	; (8008818 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d072      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a80      	ldr	r2, [pc, #512]	; (800881c <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d06d      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a7e      	ldr	r2, [pc, #504]	; (8008820 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d068      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a7d      	ldr	r2, [pc, #500]	; (8008824 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d063      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a7b      	ldr	r2, [pc, #492]	; (8008828 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d05e      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a7a      	ldr	r2, [pc, #488]	; (800882c <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d059      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a78      	ldr	r2, [pc, #480]	; (8008830 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d054      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a77      	ldr	r2, [pc, #476]	; (8008834 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d04f      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a75      	ldr	r2, [pc, #468]	; (8008838 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d04a      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a74      	ldr	r2, [pc, #464]	; (800883c <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d045      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a72      	ldr	r2, [pc, #456]	; (8008840 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d040      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a71      	ldr	r2, [pc, #452]	; (8008844 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d03b      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a6f      	ldr	r2, [pc, #444]	; (8008848 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d036      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a6e      	ldr	r2, [pc, #440]	; (800884c <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d031      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a6c      	ldr	r2, [pc, #432]	; (8008850 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d02c      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a6b      	ldr	r2, [pc, #428]	; (8008854 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d027      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a69      	ldr	r2, [pc, #420]	; (8008858 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d022      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a68      	ldr	r2, [pc, #416]	; (800885c <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d01d      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a66      	ldr	r2, [pc, #408]	; (8008860 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d018      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a65      	ldr	r2, [pc, #404]	; (8008864 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d013      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a63      	ldr	r2, [pc, #396]	; (8008868 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d00e      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a62      	ldr	r2, [pc, #392]	; (800886c <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d009      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a60      	ldr	r2, [pc, #384]	; (8008870 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d004      	beq.n	80086fc <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a5f      	ldr	r2, [pc, #380]	; (8008874 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d101      	bne.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80086fc:	2301      	movs	r3, #1
 80086fe:	e000      	b.n	8008702 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8008700:	2300      	movs	r3, #0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d01a      	beq.n	800873c <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d007      	beq.n	8008724 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800871e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008722:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008728:	2b00      	cmp	r3, #0
 800872a:	d007      	beq.n	800873c <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800873a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a35      	ldr	r2, [pc, #212]	; (8008818 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d04a      	beq.n	80087dc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a34      	ldr	r2, [pc, #208]	; (800881c <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d045      	beq.n	80087dc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a32      	ldr	r2, [pc, #200]	; (8008820 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d040      	beq.n	80087dc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a31      	ldr	r2, [pc, #196]	; (8008824 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d03b      	beq.n	80087dc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a2f      	ldr	r2, [pc, #188]	; (8008828 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d036      	beq.n	80087dc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a2e      	ldr	r2, [pc, #184]	; (800882c <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d031      	beq.n	80087dc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a2c      	ldr	r2, [pc, #176]	; (8008830 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d02c      	beq.n	80087dc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a2b      	ldr	r2, [pc, #172]	; (8008834 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d027      	beq.n	80087dc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a29      	ldr	r2, [pc, #164]	; (8008838 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d022      	beq.n	80087dc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a28      	ldr	r2, [pc, #160]	; (800883c <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d01d      	beq.n	80087dc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a26      	ldr	r2, [pc, #152]	; (8008840 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d018      	beq.n	80087dc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a25      	ldr	r2, [pc, #148]	; (8008844 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d013      	beq.n	80087dc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a23      	ldr	r2, [pc, #140]	; (8008848 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d00e      	beq.n	80087dc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a22      	ldr	r2, [pc, #136]	; (800884c <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d009      	beq.n	80087dc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a20      	ldr	r2, [pc, #128]	; (8008850 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d004      	beq.n	80087dc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a1f      	ldr	r2, [pc, #124]	; (8008854 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d108      	bne.n	80087ee <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f042 0201 	orr.w	r2, r2, #1
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	e00e      	b.n	800880c <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f042 0201 	orr.w	r2, r2, #1
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	e005      	b.n	800880c <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008806:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800880c:	7dfb      	ldrb	r3, [r7, #23]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	40020010 	.word	0x40020010
 800881c:	40020028 	.word	0x40020028
 8008820:	40020040 	.word	0x40020040
 8008824:	40020058 	.word	0x40020058
 8008828:	40020070 	.word	0x40020070
 800882c:	40020088 	.word	0x40020088
 8008830:	400200a0 	.word	0x400200a0
 8008834:	400200b8 	.word	0x400200b8
 8008838:	40020410 	.word	0x40020410
 800883c:	40020428 	.word	0x40020428
 8008840:	40020440 	.word	0x40020440
 8008844:	40020458 	.word	0x40020458
 8008848:	40020470 	.word	0x40020470
 800884c:	40020488 	.word	0x40020488
 8008850:	400204a0 	.word	0x400204a0
 8008854:	400204b8 	.word	0x400204b8
 8008858:	58025408 	.word	0x58025408
 800885c:	5802541c 	.word	0x5802541c
 8008860:	58025430 	.word	0x58025430
 8008864:	58025444 	.word	0x58025444
 8008868:	58025458 	.word	0x58025458
 800886c:	5802546c 	.word	0x5802546c
 8008870:	58025480 	.word	0x58025480
 8008874:	58025494 	.word	0x58025494

08008878 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	4613      	mov	r3, r2
 8008884:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a39      	ldr	r2, [pc, #228]	; (8008970 <HAL_DMAEx_ChangeMemory+0xf8>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d04a      	beq.n	8008926 <HAL_DMAEx_ChangeMemory+0xae>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a37      	ldr	r2, [pc, #220]	; (8008974 <HAL_DMAEx_ChangeMemory+0xfc>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d045      	beq.n	8008926 <HAL_DMAEx_ChangeMemory+0xae>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a36      	ldr	r2, [pc, #216]	; (8008978 <HAL_DMAEx_ChangeMemory+0x100>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d040      	beq.n	8008926 <HAL_DMAEx_ChangeMemory+0xae>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a34      	ldr	r2, [pc, #208]	; (800897c <HAL_DMAEx_ChangeMemory+0x104>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d03b      	beq.n	8008926 <HAL_DMAEx_ChangeMemory+0xae>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a33      	ldr	r2, [pc, #204]	; (8008980 <HAL_DMAEx_ChangeMemory+0x108>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d036      	beq.n	8008926 <HAL_DMAEx_ChangeMemory+0xae>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a31      	ldr	r2, [pc, #196]	; (8008984 <HAL_DMAEx_ChangeMemory+0x10c>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d031      	beq.n	8008926 <HAL_DMAEx_ChangeMemory+0xae>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a30      	ldr	r2, [pc, #192]	; (8008988 <HAL_DMAEx_ChangeMemory+0x110>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d02c      	beq.n	8008926 <HAL_DMAEx_ChangeMemory+0xae>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a2e      	ldr	r2, [pc, #184]	; (800898c <HAL_DMAEx_ChangeMemory+0x114>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d027      	beq.n	8008926 <HAL_DMAEx_ChangeMemory+0xae>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a2d      	ldr	r2, [pc, #180]	; (8008990 <HAL_DMAEx_ChangeMemory+0x118>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d022      	beq.n	8008926 <HAL_DMAEx_ChangeMemory+0xae>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a2b      	ldr	r2, [pc, #172]	; (8008994 <HAL_DMAEx_ChangeMemory+0x11c>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d01d      	beq.n	8008926 <HAL_DMAEx_ChangeMemory+0xae>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a2a      	ldr	r2, [pc, #168]	; (8008998 <HAL_DMAEx_ChangeMemory+0x120>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d018      	beq.n	8008926 <HAL_DMAEx_ChangeMemory+0xae>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a28      	ldr	r2, [pc, #160]	; (800899c <HAL_DMAEx_ChangeMemory+0x124>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d013      	beq.n	8008926 <HAL_DMAEx_ChangeMemory+0xae>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a27      	ldr	r2, [pc, #156]	; (80089a0 <HAL_DMAEx_ChangeMemory+0x128>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d00e      	beq.n	8008926 <HAL_DMAEx_ChangeMemory+0xae>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a25      	ldr	r2, [pc, #148]	; (80089a4 <HAL_DMAEx_ChangeMemory+0x12c>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d009      	beq.n	8008926 <HAL_DMAEx_ChangeMemory+0xae>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a24      	ldr	r2, [pc, #144]	; (80089a8 <HAL_DMAEx_ChangeMemory+0x130>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d004      	beq.n	8008926 <HAL_DMAEx_ChangeMemory+0xae>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a22      	ldr	r2, [pc, #136]	; (80089ac <HAL_DMAEx_ChangeMemory+0x134>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d101      	bne.n	800892a <HAL_DMAEx_ChangeMemory+0xb2>
 8008926:	2301      	movs	r3, #1
 8008928:	e000      	b.n	800892c <HAL_DMAEx_ChangeMemory+0xb4>
 800892a:	2300      	movs	r3, #0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00c      	beq.n	800894a <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8008930:	79fb      	ldrb	r3, [r7, #7]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d104      	bne.n	8008940 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	60da      	str	r2, [r3, #12]
 800893e:	e010      	b.n	8008962 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	611a      	str	r2, [r3, #16]
 8008948:	e00b      	b.n	8008962 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 800894a:	79fb      	ldrb	r3, [r7, #7]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d104      	bne.n	800895a <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	60da      	str	r2, [r3, #12]
 8008958:	e003      	b.n	8008962 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr
 8008970:	40020010 	.word	0x40020010
 8008974:	40020028 	.word	0x40020028
 8008978:	40020040 	.word	0x40020040
 800897c:	40020058 	.word	0x40020058
 8008980:	40020070 	.word	0x40020070
 8008984:	40020088 	.word	0x40020088
 8008988:	400200a0 	.word	0x400200a0
 800898c:	400200b8 	.word	0x400200b8
 8008990:	40020410 	.word	0x40020410
 8008994:	40020428 	.word	0x40020428
 8008998:	40020440 	.word	0x40020440
 800899c:	40020458 	.word	0x40020458
 80089a0:	40020470 	.word	0x40020470
 80089a4:	40020488 	.word	0x40020488
 80089a8:	400204a0 	.word	0x400204a0
 80089ac:	400204b8 	.word	0x400204b8

080089b0 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
 80089bc:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a46      	ldr	r2, [pc, #280]	; (8008adc <DMA_MultiBufferSetConfig+0x12c>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d04a      	beq.n	8008a5e <DMA_MultiBufferSetConfig+0xae>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a44      	ldr	r2, [pc, #272]	; (8008ae0 <DMA_MultiBufferSetConfig+0x130>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d045      	beq.n	8008a5e <DMA_MultiBufferSetConfig+0xae>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a43      	ldr	r2, [pc, #268]	; (8008ae4 <DMA_MultiBufferSetConfig+0x134>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d040      	beq.n	8008a5e <DMA_MultiBufferSetConfig+0xae>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a41      	ldr	r2, [pc, #260]	; (8008ae8 <DMA_MultiBufferSetConfig+0x138>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d03b      	beq.n	8008a5e <DMA_MultiBufferSetConfig+0xae>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a40      	ldr	r2, [pc, #256]	; (8008aec <DMA_MultiBufferSetConfig+0x13c>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d036      	beq.n	8008a5e <DMA_MultiBufferSetConfig+0xae>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a3e      	ldr	r2, [pc, #248]	; (8008af0 <DMA_MultiBufferSetConfig+0x140>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d031      	beq.n	8008a5e <DMA_MultiBufferSetConfig+0xae>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a3d      	ldr	r2, [pc, #244]	; (8008af4 <DMA_MultiBufferSetConfig+0x144>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d02c      	beq.n	8008a5e <DMA_MultiBufferSetConfig+0xae>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a3b      	ldr	r2, [pc, #236]	; (8008af8 <DMA_MultiBufferSetConfig+0x148>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d027      	beq.n	8008a5e <DMA_MultiBufferSetConfig+0xae>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a3a      	ldr	r2, [pc, #232]	; (8008afc <DMA_MultiBufferSetConfig+0x14c>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d022      	beq.n	8008a5e <DMA_MultiBufferSetConfig+0xae>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a38      	ldr	r2, [pc, #224]	; (8008b00 <DMA_MultiBufferSetConfig+0x150>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d01d      	beq.n	8008a5e <DMA_MultiBufferSetConfig+0xae>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a37      	ldr	r2, [pc, #220]	; (8008b04 <DMA_MultiBufferSetConfig+0x154>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d018      	beq.n	8008a5e <DMA_MultiBufferSetConfig+0xae>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a35      	ldr	r2, [pc, #212]	; (8008b08 <DMA_MultiBufferSetConfig+0x158>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d013      	beq.n	8008a5e <DMA_MultiBufferSetConfig+0xae>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a34      	ldr	r2, [pc, #208]	; (8008b0c <DMA_MultiBufferSetConfig+0x15c>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d00e      	beq.n	8008a5e <DMA_MultiBufferSetConfig+0xae>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a32      	ldr	r2, [pc, #200]	; (8008b10 <DMA_MultiBufferSetConfig+0x160>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d009      	beq.n	8008a5e <DMA_MultiBufferSetConfig+0xae>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a31      	ldr	r2, [pc, #196]	; (8008b14 <DMA_MultiBufferSetConfig+0x164>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d004      	beq.n	8008a5e <DMA_MultiBufferSetConfig+0xae>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a2f      	ldr	r2, [pc, #188]	; (8008b18 <DMA_MultiBufferSetConfig+0x168>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d101      	bne.n	8008a62 <DMA_MultiBufferSetConfig+0xb2>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e000      	b.n	8008a64 <DMA_MultiBufferSetConfig+0xb4>
 8008a62:	2300      	movs	r3, #0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d019      	beq.n	8008a9c <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	2b40      	cmp	r3, #64	; 0x40
 8008a76:	d108      	bne.n	8008a8a <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8008a88:	e021      	b.n	8008ace <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	60da      	str	r2, [r3, #12]
}
 8008a9a:	e018      	b.n	8008ace <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	2b40      	cmp	r3, #64	; 0x40
 8008aaa:	d108      	bne.n	8008abe <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	60da      	str	r2, [r3, #12]
}
 8008abc:	e007      	b.n	8008ace <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	60da      	str	r2, [r3, #12]
}
 8008ace:	bf00      	nop
 8008ad0:	3714      	adds	r7, #20
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	40020010 	.word	0x40020010
 8008ae0:	40020028 	.word	0x40020028
 8008ae4:	40020040 	.word	0x40020040
 8008ae8:	40020058 	.word	0x40020058
 8008aec:	40020070 	.word	0x40020070
 8008af0:	40020088 	.word	0x40020088
 8008af4:	400200a0 	.word	0x400200a0
 8008af8:	400200b8 	.word	0x400200b8
 8008afc:	40020410 	.word	0x40020410
 8008b00:	40020428 	.word	0x40020428
 8008b04:	40020440 	.word	0x40020440
 8008b08:	40020458 	.word	0x40020458
 8008b0c:	40020470 	.word	0x40020470
 8008b10:	40020488 	.word	0x40020488
 8008b14:	400204a0 	.word	0x400204a0
 8008b18:	400204b8 	.word	0x400204b8

08008b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b089      	sub	sp, #36	; 0x24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008b2a:	4b89      	ldr	r3, [pc, #548]	; (8008d50 <HAL_GPIO_Init+0x234>)
 8008b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b2e:	e194      	b.n	8008e5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	2101      	movs	r1, #1
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	fa01 f303 	lsl.w	r3, r1, r3
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 8186 	beq.w	8008e54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f003 0303 	and.w	r3, r3, #3
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d005      	beq.n	8008b60 <HAL_GPIO_Init+0x44>
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	f003 0303 	and.w	r3, r3, #3
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d130      	bne.n	8008bc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	005b      	lsls	r3, r3, #1
 8008b6a:	2203      	movs	r2, #3
 8008b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b70:	43db      	mvns	r3, r3
 8008b72:	69ba      	ldr	r2, [r7, #24]
 8008b74:	4013      	ands	r3, r2
 8008b76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	68da      	ldr	r2, [r3, #12]
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	fa02 f303 	lsl.w	r3, r2, r3
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	69ba      	ldr	r2, [r7, #24]
 8008b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008b96:	2201      	movs	r2, #1
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9e:	43db      	mvns	r3, r3
 8008ba0:	69ba      	ldr	r2, [r7, #24]
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	091b      	lsrs	r3, r3, #4
 8008bac:	f003 0201 	and.w	r2, r3, #1
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb6:	69ba      	ldr	r2, [r7, #24]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	69ba      	ldr	r2, [r7, #24]
 8008bc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	f003 0303 	and.w	r3, r3, #3
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d017      	beq.n	8008bfe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	005b      	lsls	r3, r3, #1
 8008bd8:	2203      	movs	r2, #3
 8008bda:	fa02 f303 	lsl.w	r3, r2, r3
 8008bde:	43db      	mvns	r3, r3
 8008be0:	69ba      	ldr	r2, [r7, #24]
 8008be2:	4013      	ands	r3, r2
 8008be4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	689a      	ldr	r2, [r3, #8]
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	005b      	lsls	r3, r3, #1
 8008bee:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf2:	69ba      	ldr	r2, [r7, #24]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	69ba      	ldr	r2, [r7, #24]
 8008bfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	f003 0303 	and.w	r3, r3, #3
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d123      	bne.n	8008c52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	08da      	lsrs	r2, r3, #3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	3208      	adds	r2, #8
 8008c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	220f      	movs	r2, #15
 8008c22:	fa02 f303 	lsl.w	r3, r2, r3
 8008c26:	43db      	mvns	r3, r3
 8008c28:	69ba      	ldr	r2, [r7, #24]
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	691a      	ldr	r2, [r3, #16]
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	f003 0307 	and.w	r3, r3, #7
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	08da      	lsrs	r2, r3, #3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3208      	adds	r2, #8
 8008c4c:	69b9      	ldr	r1, [r7, #24]
 8008c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	005b      	lsls	r3, r3, #1
 8008c5c:	2203      	movs	r2, #3
 8008c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c62:	43db      	mvns	r3, r3
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	4013      	ands	r3, r2
 8008c68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f003 0203 	and.w	r2, r3, #3
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	005b      	lsls	r3, r3, #1
 8008c76:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	69ba      	ldr	r2, [r7, #24]
 8008c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f000 80e0 	beq.w	8008e54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c94:	4b2f      	ldr	r3, [pc, #188]	; (8008d54 <HAL_GPIO_Init+0x238>)
 8008c96:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008c9a:	4a2e      	ldr	r2, [pc, #184]	; (8008d54 <HAL_GPIO_Init+0x238>)
 8008c9c:	f043 0302 	orr.w	r3, r3, #2
 8008ca0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8008ca4:	4b2b      	ldr	r3, [pc, #172]	; (8008d54 <HAL_GPIO_Init+0x238>)
 8008ca6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008caa:	f003 0302 	and.w	r3, r3, #2
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008cb2:	4a29      	ldr	r2, [pc, #164]	; (8008d58 <HAL_GPIO_Init+0x23c>)
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	089b      	lsrs	r3, r3, #2
 8008cb8:	3302      	adds	r3, #2
 8008cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	f003 0303 	and.w	r3, r3, #3
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	220f      	movs	r2, #15
 8008cca:	fa02 f303 	lsl.w	r3, r2, r3
 8008cce:	43db      	mvns	r3, r3
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a20      	ldr	r2, [pc, #128]	; (8008d5c <HAL_GPIO_Init+0x240>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d052      	beq.n	8008d84 <HAL_GPIO_Init+0x268>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a1f      	ldr	r2, [pc, #124]	; (8008d60 <HAL_GPIO_Init+0x244>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d031      	beq.n	8008d4a <HAL_GPIO_Init+0x22e>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a1e      	ldr	r2, [pc, #120]	; (8008d64 <HAL_GPIO_Init+0x248>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d02b      	beq.n	8008d46 <HAL_GPIO_Init+0x22a>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a1d      	ldr	r2, [pc, #116]	; (8008d68 <HAL_GPIO_Init+0x24c>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d025      	beq.n	8008d42 <HAL_GPIO_Init+0x226>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a1c      	ldr	r2, [pc, #112]	; (8008d6c <HAL_GPIO_Init+0x250>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d01f      	beq.n	8008d3e <HAL_GPIO_Init+0x222>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a1b      	ldr	r2, [pc, #108]	; (8008d70 <HAL_GPIO_Init+0x254>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d019      	beq.n	8008d3a <HAL_GPIO_Init+0x21e>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a1a      	ldr	r2, [pc, #104]	; (8008d74 <HAL_GPIO_Init+0x258>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d013      	beq.n	8008d36 <HAL_GPIO_Init+0x21a>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a19      	ldr	r2, [pc, #100]	; (8008d78 <HAL_GPIO_Init+0x25c>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d00d      	beq.n	8008d32 <HAL_GPIO_Init+0x216>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a18      	ldr	r2, [pc, #96]	; (8008d7c <HAL_GPIO_Init+0x260>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d007      	beq.n	8008d2e <HAL_GPIO_Init+0x212>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a17      	ldr	r2, [pc, #92]	; (8008d80 <HAL_GPIO_Init+0x264>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d101      	bne.n	8008d2a <HAL_GPIO_Init+0x20e>
 8008d26:	2309      	movs	r3, #9
 8008d28:	e02d      	b.n	8008d86 <HAL_GPIO_Init+0x26a>
 8008d2a:	230a      	movs	r3, #10
 8008d2c:	e02b      	b.n	8008d86 <HAL_GPIO_Init+0x26a>
 8008d2e:	2308      	movs	r3, #8
 8008d30:	e029      	b.n	8008d86 <HAL_GPIO_Init+0x26a>
 8008d32:	2307      	movs	r3, #7
 8008d34:	e027      	b.n	8008d86 <HAL_GPIO_Init+0x26a>
 8008d36:	2306      	movs	r3, #6
 8008d38:	e025      	b.n	8008d86 <HAL_GPIO_Init+0x26a>
 8008d3a:	2305      	movs	r3, #5
 8008d3c:	e023      	b.n	8008d86 <HAL_GPIO_Init+0x26a>
 8008d3e:	2304      	movs	r3, #4
 8008d40:	e021      	b.n	8008d86 <HAL_GPIO_Init+0x26a>
 8008d42:	2303      	movs	r3, #3
 8008d44:	e01f      	b.n	8008d86 <HAL_GPIO_Init+0x26a>
 8008d46:	2302      	movs	r3, #2
 8008d48:	e01d      	b.n	8008d86 <HAL_GPIO_Init+0x26a>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e01b      	b.n	8008d86 <HAL_GPIO_Init+0x26a>
 8008d4e:	bf00      	nop
 8008d50:	58000080 	.word	0x58000080
 8008d54:	58024400 	.word	0x58024400
 8008d58:	58000400 	.word	0x58000400
 8008d5c:	58020000 	.word	0x58020000
 8008d60:	58020400 	.word	0x58020400
 8008d64:	58020800 	.word	0x58020800
 8008d68:	58020c00 	.word	0x58020c00
 8008d6c:	58021000 	.word	0x58021000
 8008d70:	58021400 	.word	0x58021400
 8008d74:	58021800 	.word	0x58021800
 8008d78:	58021c00 	.word	0x58021c00
 8008d7c:	58022000 	.word	0x58022000
 8008d80:	58022400 	.word	0x58022400
 8008d84:	2300      	movs	r3, #0
 8008d86:	69fa      	ldr	r2, [r7, #28]
 8008d88:	f002 0203 	and.w	r2, r2, #3
 8008d8c:	0092      	lsls	r2, r2, #2
 8008d8e:	4093      	lsls	r3, r2
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d96:	4938      	ldr	r1, [pc, #224]	; (8008e78 <HAL_GPIO_Init+0x35c>)
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	089b      	lsrs	r3, r3, #2
 8008d9c:	3302      	adds	r3, #2
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	43db      	mvns	r3, r3
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	4013      	ands	r3, r2
 8008db4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008dc2:	69ba      	ldr	r2, [r7, #24]
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008dca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	43db      	mvns	r3, r3
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	4013      	ands	r3, r2
 8008de2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d003      	beq.n	8008df8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008df0:	69ba      	ldr	r2, [r7, #24]
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008df8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	43db      	mvns	r3, r3
 8008e0a:	69ba      	ldr	r2, [r7, #24]
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	69ba      	ldr	r2, [r7, #24]
 8008e28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	43db      	mvns	r3, r3
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	4013      	ands	r3, r2
 8008e38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008e46:	69ba      	ldr	r2, [r7, #24]
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	69ba      	ldr	r2, [r7, #24]
 8008e52:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	3301      	adds	r3, #1
 8008e58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	fa22 f303 	lsr.w	r3, r2, r3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f47f ae63 	bne.w	8008b30 <HAL_GPIO_Init+0x14>
  }
}
 8008e6a:	bf00      	nop
 8008e6c:	bf00      	nop
 8008e6e:	3724      	adds	r7, #36	; 0x24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	58000400 	.word	0x58000400

08008e7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b087      	sub	sp, #28
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008e8a:	4b75      	ldr	r3, [pc, #468]	; (8009060 <HAL_GPIO_DeInit+0x1e4>)
 8008e8c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008e8e:	e0d9      	b.n	8009044 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008e90:	2201      	movs	r2, #1
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	fa02 f303 	lsl.w	r3, r2, r3
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 80cc 	beq.w	800903e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008ea6:	4a6f      	ldr	r2, [pc, #444]	; (8009064 <HAL_GPIO_DeInit+0x1e8>)
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	089b      	lsrs	r3, r3, #2
 8008eac:	3302      	adds	r3, #2
 8008eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eb2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	f003 0303 	and.w	r3, r3, #3
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	220f      	movs	r2, #15
 8008ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a67      	ldr	r2, [pc, #412]	; (8009068 <HAL_GPIO_DeInit+0x1ec>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d037      	beq.n	8008f40 <HAL_GPIO_DeInit+0xc4>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a66      	ldr	r2, [pc, #408]	; (800906c <HAL_GPIO_DeInit+0x1f0>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d031      	beq.n	8008f3c <HAL_GPIO_DeInit+0xc0>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a65      	ldr	r2, [pc, #404]	; (8009070 <HAL_GPIO_DeInit+0x1f4>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d02b      	beq.n	8008f38 <HAL_GPIO_DeInit+0xbc>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a64      	ldr	r2, [pc, #400]	; (8009074 <HAL_GPIO_DeInit+0x1f8>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d025      	beq.n	8008f34 <HAL_GPIO_DeInit+0xb8>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a63      	ldr	r2, [pc, #396]	; (8009078 <HAL_GPIO_DeInit+0x1fc>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d01f      	beq.n	8008f30 <HAL_GPIO_DeInit+0xb4>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a62      	ldr	r2, [pc, #392]	; (800907c <HAL_GPIO_DeInit+0x200>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d019      	beq.n	8008f2c <HAL_GPIO_DeInit+0xb0>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a61      	ldr	r2, [pc, #388]	; (8009080 <HAL_GPIO_DeInit+0x204>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d013      	beq.n	8008f28 <HAL_GPIO_DeInit+0xac>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a60      	ldr	r2, [pc, #384]	; (8009084 <HAL_GPIO_DeInit+0x208>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d00d      	beq.n	8008f24 <HAL_GPIO_DeInit+0xa8>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a5f      	ldr	r2, [pc, #380]	; (8009088 <HAL_GPIO_DeInit+0x20c>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d007      	beq.n	8008f20 <HAL_GPIO_DeInit+0xa4>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a5e      	ldr	r2, [pc, #376]	; (800908c <HAL_GPIO_DeInit+0x210>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d101      	bne.n	8008f1c <HAL_GPIO_DeInit+0xa0>
 8008f18:	2309      	movs	r3, #9
 8008f1a:	e012      	b.n	8008f42 <HAL_GPIO_DeInit+0xc6>
 8008f1c:	230a      	movs	r3, #10
 8008f1e:	e010      	b.n	8008f42 <HAL_GPIO_DeInit+0xc6>
 8008f20:	2308      	movs	r3, #8
 8008f22:	e00e      	b.n	8008f42 <HAL_GPIO_DeInit+0xc6>
 8008f24:	2307      	movs	r3, #7
 8008f26:	e00c      	b.n	8008f42 <HAL_GPIO_DeInit+0xc6>
 8008f28:	2306      	movs	r3, #6
 8008f2a:	e00a      	b.n	8008f42 <HAL_GPIO_DeInit+0xc6>
 8008f2c:	2305      	movs	r3, #5
 8008f2e:	e008      	b.n	8008f42 <HAL_GPIO_DeInit+0xc6>
 8008f30:	2304      	movs	r3, #4
 8008f32:	e006      	b.n	8008f42 <HAL_GPIO_DeInit+0xc6>
 8008f34:	2303      	movs	r3, #3
 8008f36:	e004      	b.n	8008f42 <HAL_GPIO_DeInit+0xc6>
 8008f38:	2302      	movs	r3, #2
 8008f3a:	e002      	b.n	8008f42 <HAL_GPIO_DeInit+0xc6>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e000      	b.n	8008f42 <HAL_GPIO_DeInit+0xc6>
 8008f40:	2300      	movs	r3, #0
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	f002 0203 	and.w	r2, r2, #3
 8008f48:	0092      	lsls	r2, r2, #2
 8008f4a:	4093      	lsls	r3, r2
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d136      	bne.n	8008fc0 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	43db      	mvns	r3, r3
 8008f5a:	401a      	ands	r2, r3
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	685a      	ldr	r2, [r3, #4]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	43db      	mvns	r3, r3
 8008f68:	401a      	ands	r2, r3
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f72:	685a      	ldr	r2, [r3, #4]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	43db      	mvns	r3, r3
 8008f78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	43db      	mvns	r3, r3
 8008f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f8e:	4013      	ands	r3, r2
 8008f90:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f003 0303 	and.w	r3, r3, #3
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	220f      	movs	r2, #15
 8008f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008fa2:	4a30      	ldr	r2, [pc, #192]	; (8009064 <HAL_GPIO_DeInit+0x1e8>)
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	089b      	lsrs	r3, r3, #2
 8008fa8:	3302      	adds	r3, #2
 8008faa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	43da      	mvns	r2, r3
 8008fb2:	482c      	ldr	r0, [pc, #176]	; (8009064 <HAL_GPIO_DeInit+0x1e8>)
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	089b      	lsrs	r3, r3, #2
 8008fb8:	400a      	ands	r2, r1
 8008fba:	3302      	adds	r3, #2
 8008fbc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	005b      	lsls	r3, r3, #1
 8008fc8:	2103      	movs	r1, #3
 8008fca:	fa01 f303 	lsl.w	r3, r1, r3
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	08da      	lsrs	r2, r3, #3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	3208      	adds	r2, #8
 8008fdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f003 0307 	and.w	r3, r3, #7
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	220f      	movs	r2, #15
 8008fea:	fa02 f303 	lsl.w	r3, r2, r3
 8008fee:	43db      	mvns	r3, r3
 8008ff0:	697a      	ldr	r2, [r7, #20]
 8008ff2:	08d2      	lsrs	r2, r2, #3
 8008ff4:	4019      	ands	r1, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	3208      	adds	r2, #8
 8008ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68da      	ldr	r2, [r3, #12]
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	005b      	lsls	r3, r3, #1
 8009006:	2103      	movs	r1, #3
 8009008:	fa01 f303 	lsl.w	r3, r1, r3
 800900c:	43db      	mvns	r3, r3
 800900e:	401a      	ands	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	2101      	movs	r1, #1
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	fa01 f303 	lsl.w	r3, r1, r3
 8009020:	43db      	mvns	r3, r3
 8009022:	401a      	ands	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689a      	ldr	r2, [r3, #8]
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	005b      	lsls	r3, r3, #1
 8009030:	2103      	movs	r1, #3
 8009032:	fa01 f303 	lsl.w	r3, r1, r3
 8009036:	43db      	mvns	r3, r3
 8009038:	401a      	ands	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	3301      	adds	r3, #1
 8009042:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	fa22 f303 	lsr.w	r3, r2, r3
 800904c:	2b00      	cmp	r3, #0
 800904e:	f47f af1f 	bne.w	8008e90 <HAL_GPIO_DeInit+0x14>
  }
}
 8009052:	bf00      	nop
 8009054:	bf00      	nop
 8009056:	371c      	adds	r7, #28
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	58000080 	.word	0x58000080
 8009064:	58000400 	.word	0x58000400
 8009068:	58020000 	.word	0x58020000
 800906c:	58020400 	.word	0x58020400
 8009070:	58020800 	.word	0x58020800
 8009074:	58020c00 	.word	0x58020c00
 8009078:	58021000 	.word	0x58021000
 800907c:	58021400 	.word	0x58021400
 8009080:	58021800 	.word	0x58021800
 8009084:	58021c00 	.word	0x58021c00
 8009088:	58022000 	.word	0x58022000
 800908c:	58022400 	.word	0x58022400

08009090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	460b      	mov	r3, r1
 800909a:	807b      	strh	r3, [r7, #2]
 800909c:	4613      	mov	r3, r2
 800909e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80090a0:	787b      	ldrb	r3, [r7, #1]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d003      	beq.n	80090ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80090a6:	887a      	ldrh	r2, [r7, #2]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80090ac:	e003      	b.n	80090b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80090ae:	887b      	ldrh	r3, [r7, #2]
 80090b0:	041a      	lsls	r2, r3, #16
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	619a      	str	r2, [r3, #24]
}
 80090b6:	bf00      	nop
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80090c2:	b480      	push	{r7}
 80090c4:	b085      	sub	sp, #20
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	460b      	mov	r3, r1
 80090cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80090d4:	887a      	ldrh	r2, [r7, #2]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	4013      	ands	r3, r2
 80090da:	041a      	lsls	r2, r3, #16
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	43d9      	mvns	r1, r3
 80090e0:	887b      	ldrh	r3, [r7, #2]
 80090e2:	400b      	ands	r3, r1
 80090e4:	431a      	orrs	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	619a      	str	r2, [r3, #24]
}
 80090ea:	bf00      	nop
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
	...

080090f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e07f      	b.n	800920a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	d106      	bne.n	8009124 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f8a9 	bl	8009276 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2224      	movs	r2, #36	; 0x24
 8009128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f022 0201 	bic.w	r2, r2, #1
 800913a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009148:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	689a      	ldr	r2, [r3, #8]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009158:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d107      	bne.n	8009172 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689a      	ldr	r2, [r3, #8]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800916e:	609a      	str	r2, [r3, #8]
 8009170:	e006      	b.n	8009180 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	689a      	ldr	r2, [r3, #8]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800917e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	2b02      	cmp	r3, #2
 8009186:	d104      	bne.n	8009192 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009190:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6859      	ldr	r1, [r3, #4]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	4b1d      	ldr	r3, [pc, #116]	; (8009214 <HAL_I2C_Init+0x11c>)
 800919e:	430b      	orrs	r3, r1
 80091a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68da      	ldr	r2, [r3, #12]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80091b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	691a      	ldr	r2, [r3, #16]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	430a      	orrs	r2, r1
 80091ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	69d9      	ldr	r1, [r3, #28]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a1a      	ldr	r2, [r3, #32]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	430a      	orrs	r2, r1
 80091da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f042 0201 	orr.w	r2, r2, #1
 80091ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2220      	movs	r2, #32
 80091f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2200      	movs	r2, #0
 8009204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	02008000 	.word	0x02008000

08009218 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d101      	bne.n	800922a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e021      	b.n	800926e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2224      	movs	r2, #36	; 0x24
 800922e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f022 0201 	bic.w	r2, r2, #1
 8009240:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f821 	bl	800928a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009276:	b480      	push	{r7}
 8009278:	b083      	sub	sp, #12
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800927e:	bf00      	nop
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800928a:	b480      	push	{r7}
 800928c:	b083      	sub	sp, #12
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009292:	bf00      	nop
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
	...

080092a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b088      	sub	sp, #32
 80092a4:	af02      	add	r7, sp, #8
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	4608      	mov	r0, r1
 80092aa:	4611      	mov	r1, r2
 80092ac:	461a      	mov	r2, r3
 80092ae:	4603      	mov	r3, r0
 80092b0:	817b      	strh	r3, [r7, #10]
 80092b2:	460b      	mov	r3, r1
 80092b4:	813b      	strh	r3, [r7, #8]
 80092b6:	4613      	mov	r3, r2
 80092b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b20      	cmp	r3, #32
 80092c4:	f040 80f9 	bne.w	80094ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d002      	beq.n	80092d4 <HAL_I2C_Mem_Write+0x34>
 80092ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d105      	bne.n	80092e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e0ed      	b.n	80094bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d101      	bne.n	80092ee <HAL_I2C_Mem_Write+0x4e>
 80092ea:	2302      	movs	r3, #2
 80092ec:	e0e6      	b.n	80094bc <HAL_I2C_Mem_Write+0x21c>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80092f6:	f7fb f897 	bl	8004428 <HAL_GetTick>
 80092fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	2319      	movs	r3, #25
 8009302:	2201      	movs	r2, #1
 8009304:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 fadd 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e0d1      	b.n	80094bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2221      	movs	r2, #33	; 0x21
 800931c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2240      	movs	r2, #64	; 0x40
 8009324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6a3a      	ldr	r2, [r7, #32]
 8009332:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009338:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009340:	88f8      	ldrh	r0, [r7, #6]
 8009342:	893a      	ldrh	r2, [r7, #8]
 8009344:	8979      	ldrh	r1, [r7, #10]
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	9301      	str	r3, [sp, #4]
 800934a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	4603      	mov	r3, r0
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f000 f9ed 	bl	8009730 <I2C_RequestMemoryWrite>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d005      	beq.n	8009368 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	e0a9      	b.n	80094bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800936c:	b29b      	uxth	r3, r3
 800936e:	2bff      	cmp	r3, #255	; 0xff
 8009370:	d90e      	bls.n	8009390 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	22ff      	movs	r2, #255	; 0xff
 8009376:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800937c:	b2da      	uxtb	r2, r3
 800937e:	8979      	ldrh	r1, [r7, #10]
 8009380:	2300      	movs	r3, #0
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 fc57 	bl	8009c3c <I2C_TransferConfig>
 800938e:	e00f      	b.n	80093b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009394:	b29a      	uxth	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	8979      	ldrh	r1, [r7, #10]
 80093a2:	2300      	movs	r3, #0
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f000 fc46 	bl	8009c3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093b0:	697a      	ldr	r2, [r7, #20]
 80093b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 fad6 	bl	8009966 <I2C_WaitOnTXISFlagUntilTimeout>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d001      	beq.n	80093c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e07b      	b.n	80094bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c8:	781a      	ldrb	r2, [r3, #0]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d4:	1c5a      	adds	r2, r3, #1
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093de:	b29b      	uxth	r3, r3
 80093e0:	3b01      	subs	r3, #1
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ec:	3b01      	subs	r3, #1
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d034      	beq.n	8009468 <HAL_I2C_Mem_Write+0x1c8>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009402:	2b00      	cmp	r3, #0
 8009404:	d130      	bne.n	8009468 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940c:	2200      	movs	r2, #0
 800940e:	2180      	movs	r1, #128	; 0x80
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 fa59 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e04d      	b.n	80094bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009424:	b29b      	uxth	r3, r3
 8009426:	2bff      	cmp	r3, #255	; 0xff
 8009428:	d90e      	bls.n	8009448 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	22ff      	movs	r2, #255	; 0xff
 800942e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009434:	b2da      	uxtb	r2, r3
 8009436:	8979      	ldrh	r1, [r7, #10]
 8009438:	2300      	movs	r3, #0
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f000 fbfb 	bl	8009c3c <I2C_TransferConfig>
 8009446:	e00f      	b.n	8009468 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800944c:	b29a      	uxth	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009456:	b2da      	uxtb	r2, r3
 8009458:	8979      	ldrh	r1, [r7, #10]
 800945a:	2300      	movs	r3, #0
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f000 fbea 	bl	8009c3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800946c:	b29b      	uxth	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d19e      	bne.n	80093b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009472:	697a      	ldr	r2, [r7, #20]
 8009474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 fabc 	bl	80099f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e01a      	b.n	80094bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2220      	movs	r2, #32
 800948c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	6859      	ldr	r1, [r3, #4]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	4b0a      	ldr	r3, [pc, #40]	; (80094c4 <HAL_I2C_Mem_Write+0x224>)
 800949a:	400b      	ands	r3, r1
 800949c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2220      	movs	r2, #32
 80094a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	e000      	b.n	80094bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80094ba:	2302      	movs	r3, #2
  }
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	fe00e800 	.word	0xfe00e800

080094c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b088      	sub	sp, #32
 80094cc:	af02      	add	r7, sp, #8
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	4608      	mov	r0, r1
 80094d2:	4611      	mov	r1, r2
 80094d4:	461a      	mov	r2, r3
 80094d6:	4603      	mov	r3, r0
 80094d8:	817b      	strh	r3, [r7, #10]
 80094da:	460b      	mov	r3, r1
 80094dc:	813b      	strh	r3, [r7, #8]
 80094de:	4613      	mov	r3, r2
 80094e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b20      	cmp	r3, #32
 80094ec:	f040 80fd 	bne.w	80096ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80094f0:	6a3b      	ldr	r3, [r7, #32]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <HAL_I2C_Mem_Read+0x34>
 80094f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d105      	bne.n	8009508 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009502:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e0f1      	b.n	80096ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800950e:	2b01      	cmp	r3, #1
 8009510:	d101      	bne.n	8009516 <HAL_I2C_Mem_Read+0x4e>
 8009512:	2302      	movs	r3, #2
 8009514:	e0ea      	b.n	80096ec <HAL_I2C_Mem_Read+0x224>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800951e:	f7fa ff83 	bl	8004428 <HAL_GetTick>
 8009522:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	2319      	movs	r3, #25
 800952a:	2201      	movs	r2, #1
 800952c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f000 f9c9 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d001      	beq.n	8009540 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e0d5      	b.n	80096ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2222      	movs	r2, #34	; 0x22
 8009544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2240      	movs	r2, #64	; 0x40
 800954c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6a3a      	ldr	r2, [r7, #32]
 800955a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009560:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009568:	88f8      	ldrh	r0, [r7, #6]
 800956a:	893a      	ldrh	r2, [r7, #8]
 800956c:	8979      	ldrh	r1, [r7, #10]
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	9301      	str	r3, [sp, #4]
 8009572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009574:	9300      	str	r3, [sp, #0]
 8009576:	4603      	mov	r3, r0
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f000 f92d 	bl	80097d8 <I2C_RequestMemoryRead>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d005      	beq.n	8009590 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e0ad      	b.n	80096ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009594:	b29b      	uxth	r3, r3
 8009596:	2bff      	cmp	r3, #255	; 0xff
 8009598:	d90e      	bls.n	80095b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	22ff      	movs	r2, #255	; 0xff
 800959e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	8979      	ldrh	r1, [r7, #10]
 80095a8:	4b52      	ldr	r3, [pc, #328]	; (80096f4 <HAL_I2C_Mem_Read+0x22c>)
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 fb43 	bl	8009c3c <I2C_TransferConfig>
 80095b6:	e00f      	b.n	80095d8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095bc:	b29a      	uxth	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	8979      	ldrh	r1, [r7, #10]
 80095ca:	4b4a      	ldr	r3, [pc, #296]	; (80096f4 <HAL_I2C_Mem_Read+0x22c>)
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 fb32 	bl	8009c3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095de:	2200      	movs	r2, #0
 80095e0:	2104      	movs	r1, #4
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f000 f970 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d001      	beq.n	80095f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e07c      	b.n	80096ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fc:	b2d2      	uxtb	r2, r2
 80095fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009604:	1c5a      	adds	r2, r3, #1
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800960e:	3b01      	subs	r3, #1
 8009610:	b29a      	uxth	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800961a:	b29b      	uxth	r3, r3
 800961c:	3b01      	subs	r3, #1
 800961e:	b29a      	uxth	r2, r3
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009628:	b29b      	uxth	r3, r3
 800962a:	2b00      	cmp	r3, #0
 800962c:	d034      	beq.n	8009698 <HAL_I2C_Mem_Read+0x1d0>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009632:	2b00      	cmp	r3, #0
 8009634:	d130      	bne.n	8009698 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963c:	2200      	movs	r2, #0
 800963e:	2180      	movs	r1, #128	; 0x80
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f000 f941 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d001      	beq.n	8009650 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e04d      	b.n	80096ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009654:	b29b      	uxth	r3, r3
 8009656:	2bff      	cmp	r3, #255	; 0xff
 8009658:	d90e      	bls.n	8009678 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	22ff      	movs	r2, #255	; 0xff
 800965e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009664:	b2da      	uxtb	r2, r3
 8009666:	8979      	ldrh	r1, [r7, #10]
 8009668:	2300      	movs	r3, #0
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f000 fae3 	bl	8009c3c <I2C_TransferConfig>
 8009676:	e00f      	b.n	8009698 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800967c:	b29a      	uxth	r2, r3
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009686:	b2da      	uxtb	r2, r3
 8009688:	8979      	ldrh	r1, [r7, #10]
 800968a:	2300      	movs	r3, #0
 800968c:	9300      	str	r3, [sp, #0]
 800968e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f000 fad2 	bl	8009c3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800969c:	b29b      	uxth	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d19a      	bne.n	80095d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f000 f9a4 	bl	80099f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e01a      	b.n	80096ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2220      	movs	r2, #32
 80096bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	6859      	ldr	r1, [r3, #4]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	4b0b      	ldr	r3, [pc, #44]	; (80096f8 <HAL_I2C_Mem_Read+0x230>)
 80096ca:	400b      	ands	r3, r1
 80096cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2220      	movs	r2, #32
 80096d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	e000      	b.n	80096ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80096ea:	2302      	movs	r3, #2
  }
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3718      	adds	r7, #24
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	80002400 	.word	0x80002400
 80096f8:	fe00e800 	.word	0xfe00e800

080096fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800970a:	b2db      	uxtb	r3, r3
}
 800970c:	4618      	mov	r0, r3
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8009724:	4618      	mov	r0, r3
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af02      	add	r7, sp, #8
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	4608      	mov	r0, r1
 800973a:	4611      	mov	r1, r2
 800973c:	461a      	mov	r2, r3
 800973e:	4603      	mov	r3, r0
 8009740:	817b      	strh	r3, [r7, #10]
 8009742:	460b      	mov	r3, r1
 8009744:	813b      	strh	r3, [r7, #8]
 8009746:	4613      	mov	r3, r2
 8009748:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800974a:	88fb      	ldrh	r3, [r7, #6]
 800974c:	b2da      	uxtb	r2, r3
 800974e:	8979      	ldrh	r1, [r7, #10]
 8009750:	4b20      	ldr	r3, [pc, #128]	; (80097d4 <I2C_RequestMemoryWrite+0xa4>)
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 fa6f 	bl	8009c3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800975e:	69fa      	ldr	r2, [r7, #28]
 8009760:	69b9      	ldr	r1, [r7, #24]
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f000 f8ff 	bl	8009966 <I2C_WaitOnTXISFlagUntilTimeout>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e02c      	b.n	80097cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009772:	88fb      	ldrh	r3, [r7, #6]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d105      	bne.n	8009784 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009778:	893b      	ldrh	r3, [r7, #8]
 800977a:	b2da      	uxtb	r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	629a      	str	r2, [r3, #40]	; 0x28
 8009782:	e015      	b.n	80097b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009784:	893b      	ldrh	r3, [r7, #8]
 8009786:	0a1b      	lsrs	r3, r3, #8
 8009788:	b29b      	uxth	r3, r3
 800978a:	b2da      	uxtb	r2, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009792:	69fa      	ldr	r2, [r7, #28]
 8009794:	69b9      	ldr	r1, [r7, #24]
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f000 f8e5 	bl	8009966 <I2C_WaitOnTXISFlagUntilTimeout>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e012      	b.n	80097cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80097a6:	893b      	ldrh	r3, [r7, #8]
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	2200      	movs	r2, #0
 80097b8:	2180      	movs	r1, #128	; 0x80
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f000 f884 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e000      	b.n	80097cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	80002000 	.word	0x80002000

080097d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b086      	sub	sp, #24
 80097dc:	af02      	add	r7, sp, #8
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	4608      	mov	r0, r1
 80097e2:	4611      	mov	r1, r2
 80097e4:	461a      	mov	r2, r3
 80097e6:	4603      	mov	r3, r0
 80097e8:	817b      	strh	r3, [r7, #10]
 80097ea:	460b      	mov	r3, r1
 80097ec:	813b      	strh	r3, [r7, #8]
 80097ee:	4613      	mov	r3, r2
 80097f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80097f2:	88fb      	ldrh	r3, [r7, #6]
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	8979      	ldrh	r1, [r7, #10]
 80097f8:	4b20      	ldr	r3, [pc, #128]	; (800987c <I2C_RequestMemoryRead+0xa4>)
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	2300      	movs	r3, #0
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f000 fa1c 	bl	8009c3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009804:	69fa      	ldr	r2, [r7, #28]
 8009806:	69b9      	ldr	r1, [r7, #24]
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 f8ac 	bl	8009966 <I2C_WaitOnTXISFlagUntilTimeout>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d001      	beq.n	8009818 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e02c      	b.n	8009872 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009818:	88fb      	ldrh	r3, [r7, #6]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d105      	bne.n	800982a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800981e:	893b      	ldrh	r3, [r7, #8]
 8009820:	b2da      	uxtb	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	629a      	str	r2, [r3, #40]	; 0x28
 8009828:	e015      	b.n	8009856 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800982a:	893b      	ldrh	r3, [r7, #8]
 800982c:	0a1b      	lsrs	r3, r3, #8
 800982e:	b29b      	uxth	r3, r3
 8009830:	b2da      	uxtb	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009838:	69fa      	ldr	r2, [r7, #28]
 800983a:	69b9      	ldr	r1, [r7, #24]
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f000 f892 	bl	8009966 <I2C_WaitOnTXISFlagUntilTimeout>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d001      	beq.n	800984c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e012      	b.n	8009872 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800984c:	893b      	ldrh	r3, [r7, #8]
 800984e:	b2da      	uxtb	r2, r3
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	2200      	movs	r2, #0
 800985e:	2140      	movs	r1, #64	; 0x40
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 f831 	bl	80098c8 <I2C_WaitOnFlagUntilTimeout>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e000      	b.n	8009872 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	80002000 	.word	0x80002000

08009880 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b02      	cmp	r3, #2
 8009894:	d103      	bne.n	800989e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2200      	movs	r2, #0
 800989c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	699b      	ldr	r3, [r3, #24]
 80098a4:	f003 0301 	and.w	r3, r3, #1
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d007      	beq.n	80098bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	699a      	ldr	r2, [r3, #24]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f042 0201 	orr.w	r2, r2, #1
 80098ba:	619a      	str	r2, [r3, #24]
  }
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	603b      	str	r3, [r7, #0]
 80098d4:	4613      	mov	r3, r2
 80098d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098d8:	e031      	b.n	800993e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098e0:	d02d      	beq.n	800993e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098e2:	f7fa fda1 	bl	8004428 <HAL_GetTick>
 80098e6:	4602      	mov	r2, r0
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	683a      	ldr	r2, [r7, #0]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d302      	bcc.n	80098f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d122      	bne.n	800993e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	699a      	ldr	r2, [r3, #24]
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	4013      	ands	r3, r2
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	429a      	cmp	r2, r3
 8009906:	bf0c      	ite	eq
 8009908:	2301      	moveq	r3, #1
 800990a:	2300      	movne	r3, #0
 800990c:	b2db      	uxtb	r3, r3
 800990e:	461a      	mov	r2, r3
 8009910:	79fb      	ldrb	r3, [r7, #7]
 8009912:	429a      	cmp	r2, r3
 8009914:	d113      	bne.n	800993e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800991a:	f043 0220 	orr.w	r2, r3, #32
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2220      	movs	r2, #32
 8009926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e00f      	b.n	800995e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	699a      	ldr	r2, [r3, #24]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	4013      	ands	r3, r2
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	429a      	cmp	r2, r3
 800994c:	bf0c      	ite	eq
 800994e:	2301      	moveq	r3, #1
 8009950:	2300      	movne	r3, #0
 8009952:	b2db      	uxtb	r3, r3
 8009954:	461a      	mov	r2, r3
 8009956:	79fb      	ldrb	r3, [r7, #7]
 8009958:	429a      	cmp	r2, r3
 800995a:	d0be      	beq.n	80098da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b084      	sub	sp, #16
 800996a:	af00      	add	r7, sp, #0
 800996c:	60f8      	str	r0, [r7, #12]
 800996e:	60b9      	str	r1, [r7, #8]
 8009970:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009972:	e033      	b.n	80099dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	68b9      	ldr	r1, [r7, #8]
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f000 f87f 	bl	8009a7c <I2C_IsErrorOccurred>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d001      	beq.n	8009988 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e031      	b.n	80099ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800998e:	d025      	beq.n	80099dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009990:	f7fa fd4a 	bl	8004428 <HAL_GetTick>
 8009994:	4602      	mov	r2, r0
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	429a      	cmp	r2, r3
 800999e:	d302      	bcc.n	80099a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d11a      	bne.n	80099dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	f003 0302 	and.w	r3, r3, #2
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d013      	beq.n	80099dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099b8:	f043 0220 	orr.w	r2, r3, #32
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2220      	movs	r2, #32
 80099c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	e007      	b.n	80099ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	f003 0302 	and.w	r3, r3, #2
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d1c4      	bne.n	8009974 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a00:	e02f      	b.n	8009a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	68b9      	ldr	r1, [r7, #8]
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f000 f838 	bl	8009a7c <I2C_IsErrorOccurred>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d001      	beq.n	8009a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e02d      	b.n	8009a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a16:	f7fa fd07 	bl	8004428 <HAL_GetTick>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	1ad3      	subs	r3, r2, r3
 8009a20:	68ba      	ldr	r2, [r7, #8]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d302      	bcc.n	8009a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d11a      	bne.n	8009a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	f003 0320 	and.w	r3, r3, #32
 8009a36:	2b20      	cmp	r3, #32
 8009a38:	d013      	beq.n	8009a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a3e:	f043 0220 	orr.w	r2, r3, #32
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2220      	movs	r2, #32
 8009a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e007      	b.n	8009a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	f003 0320 	and.w	r3, r3, #32
 8009a6c:	2b20      	cmp	r3, #32
 8009a6e:	d1c8      	bne.n	8009a02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
	...

08009a7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b08a      	sub	sp, #40	; 0x28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009a96:	2300      	movs	r3, #0
 8009a98:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009a9e:	69bb      	ldr	r3, [r7, #24]
 8009aa0:	f003 0310 	and.w	r3, r3, #16
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d068      	beq.n	8009b7a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2210      	movs	r2, #16
 8009aae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ab0:	e049      	b.n	8009b46 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ab8:	d045      	beq.n	8009b46 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009aba:	f7fa fcb5 	bl	8004428 <HAL_GetTick>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d302      	bcc.n	8009ad0 <I2C_IsErrorOccurred+0x54>
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d13a      	bne.n	8009b46 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ada:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009ae2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	699b      	ldr	r3, [r3, #24]
 8009aea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009af2:	d121      	bne.n	8009b38 <I2C_IsErrorOccurred+0xbc>
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009afa:	d01d      	beq.n	8009b38 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009afc:	7cfb      	ldrb	r3, [r7, #19]
 8009afe:	2b20      	cmp	r3, #32
 8009b00:	d01a      	beq.n	8009b38 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	685a      	ldr	r2, [r3, #4]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b10:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009b12:	f7fa fc89 	bl	8004428 <HAL_GetTick>
 8009b16:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b18:	e00e      	b.n	8009b38 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009b1a:	f7fa fc85 	bl	8004428 <HAL_GetTick>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	2b19      	cmp	r3, #25
 8009b26:	d907      	bls.n	8009b38 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009b28:	6a3b      	ldr	r3, [r7, #32]
 8009b2a:	f043 0320 	orr.w	r3, r3, #32
 8009b2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009b36:	e006      	b.n	8009b46 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	f003 0320 	and.w	r3, r3, #32
 8009b42:	2b20      	cmp	r3, #32
 8009b44:	d1e9      	bne.n	8009b1a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	f003 0320 	and.w	r3, r3, #32
 8009b50:	2b20      	cmp	r3, #32
 8009b52:	d003      	beq.n	8009b5c <I2C_IsErrorOccurred+0xe0>
 8009b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d0aa      	beq.n	8009ab2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d103      	bne.n	8009b6c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2220      	movs	r2, #32
 8009b6a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	f043 0304 	orr.w	r3, r3, #4
 8009b72:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d00b      	beq.n	8009ba4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009b8c:	6a3b      	ldr	r3, [r7, #32]
 8009b8e:	f043 0301 	orr.w	r3, r3, #1
 8009b92:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00b      	beq.n	8009bc6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	f043 0308 	orr.w	r3, r3, #8
 8009bb4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009bbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00b      	beq.n	8009be8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009bd0:	6a3b      	ldr	r3, [r7, #32]
 8009bd2:	f043 0302 	orr.w	r3, r3, #2
 8009bd6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009be0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d01c      	beq.n	8009c2a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f7ff fe45 	bl	8009880 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	6859      	ldr	r1, [r3, #4]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	4b0d      	ldr	r3, [pc, #52]	; (8009c38 <I2C_IsErrorOccurred+0x1bc>)
 8009c02:	400b      	ands	r3, r1
 8009c04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c0a:	6a3b      	ldr	r3, [r7, #32]
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2220      	movs	r2, #32
 8009c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3728      	adds	r7, #40	; 0x28
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	fe00e800 	.word	0xfe00e800

08009c3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b087      	sub	sp, #28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	607b      	str	r3, [r7, #4]
 8009c46:	460b      	mov	r3, r1
 8009c48:	817b      	strh	r3, [r7, #10]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c4e:	897b      	ldrh	r3, [r7, #10]
 8009c50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c54:	7a7b      	ldrb	r3, [r7, #9]
 8009c56:	041b      	lsls	r3, r3, #16
 8009c58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c5c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c62:	6a3b      	ldr	r3, [r7, #32]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c6a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	685a      	ldr	r2, [r3, #4]
 8009c72:	6a3b      	ldr	r3, [r7, #32]
 8009c74:	0d5b      	lsrs	r3, r3, #21
 8009c76:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009c7a:	4b08      	ldr	r3, [pc, #32]	; (8009c9c <I2C_TransferConfig+0x60>)
 8009c7c:	430b      	orrs	r3, r1
 8009c7e:	43db      	mvns	r3, r3
 8009c80:	ea02 0103 	and.w	r1, r2, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	697a      	ldr	r2, [r7, #20]
 8009c8a:	430a      	orrs	r2, r1
 8009c8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009c8e:	bf00      	nop
 8009c90:	371c      	adds	r7, #28
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	03ff63ff 	.word	0x03ff63ff

08009ca0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	2b20      	cmp	r3, #32
 8009cb4:	d138      	bne.n	8009d28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d101      	bne.n	8009cc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	e032      	b.n	8009d2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2224      	movs	r2, #36	; 0x24
 8009cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f022 0201 	bic.w	r2, r2, #1
 8009ce2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009cf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6819      	ldr	r1, [r3, #0]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	430a      	orrs	r2, r1
 8009d02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f042 0201 	orr.w	r2, r2, #1
 8009d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2220      	movs	r2, #32
 8009d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d24:	2300      	movs	r3, #0
 8009d26:	e000      	b.n	8009d2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009d28:	2302      	movs	r3, #2
  }
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	370c      	adds	r7, #12
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b085      	sub	sp, #20
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
 8009d3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b20      	cmp	r3, #32
 8009d4a:	d139      	bne.n	8009dc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d101      	bne.n	8009d5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009d56:	2302      	movs	r3, #2
 8009d58:	e033      	b.n	8009dc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2224      	movs	r2, #36	; 0x24
 8009d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f022 0201 	bic.w	r2, r2, #1
 8009d78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009d88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	021b      	lsls	r3, r3, #8
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	4313      	orrs	r3, r2
 8009d92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f042 0201 	orr.w	r2, r2, #1
 8009daa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2220      	movs	r2, #32
 8009db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	e000      	b.n	8009dc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009dc0:	2302      	movs	r3, #2
  }
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3714      	adds	r7, #20
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
	...

08009dd0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e0bf      	b.n	8009f62 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d106      	bne.n	8009dfc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f7f7 fa48 	bl	800128c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2202      	movs	r2, #2
 8009e00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	699a      	ldr	r2, [r3, #24]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009e12:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6999      	ldr	r1, [r3, #24]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009e28:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	430a      	orrs	r2, r1
 8009e36:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	6899      	ldr	r1, [r3, #8]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	4b4a      	ldr	r3, [pc, #296]	; (8009f6c <HAL_LTDC_Init+0x19c>)
 8009e44:	400b      	ands	r3, r1
 8009e46:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	695b      	ldr	r3, [r3, #20]
 8009e4c:	041b      	lsls	r3, r3, #16
 8009e4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	6899      	ldr	r1, [r3, #8]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	699a      	ldr	r2, [r3, #24]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	431a      	orrs	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	430a      	orrs	r2, r1
 8009e64:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68d9      	ldr	r1, [r3, #12]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	4b3e      	ldr	r3, [pc, #248]	; (8009f6c <HAL_LTDC_Init+0x19c>)
 8009e72:	400b      	ands	r3, r1
 8009e74:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	69db      	ldr	r3, [r3, #28]
 8009e7a:	041b      	lsls	r3, r3, #16
 8009e7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68d9      	ldr	r1, [r3, #12]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a1a      	ldr	r2, [r3, #32]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	431a      	orrs	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	430a      	orrs	r2, r1
 8009e92:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6919      	ldr	r1, [r3, #16]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	4b33      	ldr	r3, [pc, #204]	; (8009f6c <HAL_LTDC_Init+0x19c>)
 8009ea0:	400b      	ands	r3, r1
 8009ea2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea8:	041b      	lsls	r3, r3, #16
 8009eaa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6919      	ldr	r1, [r3, #16]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	431a      	orrs	r2, r3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	430a      	orrs	r2, r1
 8009ec0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	6959      	ldr	r1, [r3, #20]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	4b27      	ldr	r3, [pc, #156]	; (8009f6c <HAL_LTDC_Init+0x19c>)
 8009ece:	400b      	ands	r3, r1
 8009ed0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed6:	041b      	lsls	r3, r3, #16
 8009ed8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	6959      	ldr	r1, [r3, #20]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	431a      	orrs	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	430a      	orrs	r2, r1
 8009eee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009ef6:	021b      	lsls	r3, r3, #8
 8009ef8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009f00:	041b      	lsls	r3, r3, #16
 8009f02:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009f26:	431a      	orrs	r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	430a      	orrs	r2, r1
 8009f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f042 0206 	orr.w	r2, r2, #6
 8009f3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	699a      	ldr	r2, [r3, #24]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f042 0201 	orr.w	r2, r2, #1
 8009f4e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	f000f800 	.word	0xf000f800

08009f70 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f86:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f003 0304 	and.w	r3, r3, #4
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d023      	beq.n	8009fda <HAL_LTDC_IRQHandler+0x6a>
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	f003 0304 	and.w	r3, r3, #4
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d01e      	beq.n	8009fda <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f022 0204 	bic.w	r2, r2, #4
 8009faa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2204      	movs	r2, #4
 8009fb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009fba:	f043 0201 	orr.w	r2, r3, #1
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2204      	movs	r2, #4
 8009fc8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f86f 	bl	800a0b8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f003 0302 	and.w	r3, r3, #2
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d023      	beq.n	800a02c <HAL_LTDC_IRQHandler+0xbc>
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	f003 0302 	and.w	r3, r3, #2
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d01e      	beq.n	800a02c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f022 0202 	bic.w	r2, r2, #2
 8009ffc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2202      	movs	r2, #2
 800a004:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a00c:	f043 0202 	orr.w	r2, r3, #2
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2204      	movs	r2, #4
 800a01a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f846 	bl	800a0b8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f003 0301 	and.w	r3, r3, #1
 800a032:	2b00      	cmp	r3, #0
 800a034:	d01b      	beq.n	800a06e <HAL_LTDC_IRQHandler+0xfe>
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	f003 0301 	and.w	r3, r3, #1
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d016      	beq.n	800a06e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f022 0201 	bic.w	r2, r2, #1
 800a04e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2201      	movs	r2, #1
 800a056:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 f82f 	bl	800a0cc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f003 0308 	and.w	r3, r3, #8
 800a074:	2b00      	cmp	r3, #0
 800a076:	d01b      	beq.n	800a0b0 <HAL_LTDC_IRQHandler+0x140>
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	f003 0308 	and.w	r3, r3, #8
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d016      	beq.n	800a0b0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f022 0208 	bic.w	r2, r2, #8
 800a090:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2208      	movs	r2, #8
 800a098:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f818 	bl	800a0e0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a0b0:	bf00      	nop
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a0d4:	bf00      	nop
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a0e8:	bf00      	nop
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a0f4:	b5b0      	push	{r4, r5, r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a106:	2b01      	cmp	r3, #1
 800a108:	d101      	bne.n	800a10e <HAL_LTDC_ConfigLayer+0x1a>
 800a10a:	2302      	movs	r3, #2
 800a10c:	e02c      	b.n	800a168 <HAL_LTDC_ConfigLayer+0x74>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2202      	movs	r2, #2
 800a11a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2134      	movs	r1, #52	; 0x34
 800a124:	fb01 f303 	mul.w	r3, r1, r3
 800a128:	4413      	add	r3, r2
 800a12a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	4614      	mov	r4, r2
 800a132:	461d      	mov	r5, r3
 800a134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a13a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a13c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a13e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a140:	682b      	ldr	r3, [r5, #0]
 800a142:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	68b9      	ldr	r1, [r7, #8]
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f000 f811 	bl	800a170 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2201      	movs	r2, #1
 800a154:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2201      	movs	r2, #1
 800a15a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bdb0      	pop	{r4, r5, r7, pc}

0800a170 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a170:	b480      	push	{r7}
 800a172:	b089      	sub	sp, #36	; 0x24
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	685a      	ldr	r2, [r3, #4]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	0c1b      	lsrs	r3, r3, #16
 800a188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a18c:	4413      	add	r3, r2
 800a18e:	041b      	lsls	r3, r3, #16
 800a190:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	461a      	mov	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	01db      	lsls	r3, r3, #7
 800a19c:	4413      	add	r3, r2
 800a19e:	3384      	adds	r3, #132	; 0x84
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	6812      	ldr	r2, [r2, #0]
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	01d2      	lsls	r2, r2, #7
 800a1ac:	440a      	add	r2, r1
 800a1ae:	3284      	adds	r2, #132	; 0x84
 800a1b0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a1b4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	0c1b      	lsrs	r3, r3, #16
 800a1c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a1c6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a1c8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	01db      	lsls	r3, r3, #7
 800a1d4:	440b      	add	r3, r1
 800a1d6:	3384      	adds	r3, #132	; 0x84
 800a1d8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a1de:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	68da      	ldr	r2, [r3, #12]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a1ee:	4413      	add	r3, r2
 800a1f0:	041b      	lsls	r3, r3, #16
 800a1f2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	01db      	lsls	r3, r3, #7
 800a1fe:	4413      	add	r3, r2
 800a200:	3384      	adds	r3, #132	; 0x84
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	6812      	ldr	r2, [r2, #0]
 800a208:	4611      	mov	r1, r2
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	01d2      	lsls	r2, r2, #7
 800a20e:	440a      	add	r2, r1
 800a210:	3284      	adds	r2, #132	; 0x84
 800a212:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a216:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	689a      	ldr	r2, [r3, #8]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a226:	4413      	add	r3, r2
 800a228:	1c5a      	adds	r2, r3, #1
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4619      	mov	r1, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	01db      	lsls	r3, r3, #7
 800a234:	440b      	add	r3, r1
 800a236:	3384      	adds	r3, #132	; 0x84
 800a238:	4619      	mov	r1, r3
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	461a      	mov	r2, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	01db      	lsls	r3, r3, #7
 800a24a:	4413      	add	r3, r2
 800a24c:	3384      	adds	r3, #132	; 0x84
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	6812      	ldr	r2, [r2, #0]
 800a254:	4611      	mov	r1, r2
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	01d2      	lsls	r2, r2, #7
 800a25a:	440a      	add	r2, r1
 800a25c:	3284      	adds	r2, #132	; 0x84
 800a25e:	f023 0307 	bic.w	r3, r3, #7
 800a262:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	461a      	mov	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	01db      	lsls	r3, r3, #7
 800a26e:	4413      	add	r3, r2
 800a270:	3384      	adds	r3, #132	; 0x84
 800a272:	461a      	mov	r2, r3
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a280:	021b      	lsls	r3, r3, #8
 800a282:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a28a:	041b      	lsls	r3, r3, #16
 800a28c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	061b      	lsls	r3, r3, #24
 800a294:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	461a      	mov	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	01db      	lsls	r3, r3, #7
 800a2a0:	4413      	add	r3, r2
 800a2a2:	3384      	adds	r3, #132	; 0x84
 800a2a4:	699b      	ldr	r3, [r3, #24]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	01db      	lsls	r3, r3, #7
 800a2b0:	4413      	add	r3, r2
 800a2b2:	3384      	adds	r3, #132	; 0x84
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	431a      	orrs	r2, r3
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	431a      	orrs	r2, r3
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	01db      	lsls	r3, r3, #7
 800a2d4:	440b      	add	r3, r1
 800a2d6:	3384      	adds	r3, #132	; 0x84
 800a2d8:	4619      	mov	r1, r3
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	01db      	lsls	r3, r3, #7
 800a2ea:	4413      	add	r3, r2
 800a2ec:	3384      	adds	r3, #132	; 0x84
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	6812      	ldr	r2, [r2, #0]
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	01d2      	lsls	r2, r2, #7
 800a2fa:	440a      	add	r2, r1
 800a2fc:	3284      	adds	r2, #132	; 0x84
 800a2fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a302:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	461a      	mov	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	01db      	lsls	r3, r3, #7
 800a30e:	4413      	add	r3, r2
 800a310:	3384      	adds	r3, #132	; 0x84
 800a312:	461a      	mov	r2, r3
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	695b      	ldr	r3, [r3, #20]
 800a318:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	01db      	lsls	r3, r3, #7
 800a324:	4413      	add	r3, r2
 800a326:	3384      	adds	r3, #132	; 0x84
 800a328:	69da      	ldr	r2, [r3, #28]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4619      	mov	r1, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	01db      	lsls	r3, r3, #7
 800a334:	440b      	add	r3, r1
 800a336:	3384      	adds	r3, #132	; 0x84
 800a338:	4619      	mov	r1, r3
 800a33a:	4b58      	ldr	r3, [pc, #352]	; (800a49c <LTDC_SetConfig+0x32c>)
 800a33c:	4013      	ands	r3, r2
 800a33e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	69da      	ldr	r2, [r3, #28]
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	6a1b      	ldr	r3, [r3, #32]
 800a348:	68f9      	ldr	r1, [r7, #12]
 800a34a:	6809      	ldr	r1, [r1, #0]
 800a34c:	4608      	mov	r0, r1
 800a34e:	6879      	ldr	r1, [r7, #4]
 800a350:	01c9      	lsls	r1, r1, #7
 800a352:	4401      	add	r1, r0
 800a354:	3184      	adds	r1, #132	; 0x84
 800a356:	4313      	orrs	r3, r2
 800a358:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	461a      	mov	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	01db      	lsls	r3, r3, #7
 800a364:	4413      	add	r3, r2
 800a366:	3384      	adds	r3, #132	; 0x84
 800a368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	461a      	mov	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	01db      	lsls	r3, r3, #7
 800a374:	4413      	add	r3, r2
 800a376:	3384      	adds	r3, #132	; 0x84
 800a378:	461a      	mov	r2, r3
 800a37a:	2300      	movs	r3, #0
 800a37c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	461a      	mov	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	01db      	lsls	r3, r3, #7
 800a388:	4413      	add	r3, r2
 800a38a:	3384      	adds	r3, #132	; 0x84
 800a38c:	461a      	mov	r2, r3
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a392:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d102      	bne.n	800a3a2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a39c:	2304      	movs	r3, #4
 800a39e:	61fb      	str	r3, [r7, #28]
 800a3a0:	e01b      	b.n	800a3da <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d102      	bne.n	800a3b0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a3aa:	2303      	movs	r3, #3
 800a3ac:	61fb      	str	r3, [r7, #28]
 800a3ae:	e014      	b.n	800a3da <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	2b04      	cmp	r3, #4
 800a3b6:	d00b      	beq.n	800a3d0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d007      	beq.n	800a3d0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a3c4:	2b03      	cmp	r3, #3
 800a3c6:	d003      	beq.n	800a3d0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a3cc:	2b07      	cmp	r3, #7
 800a3ce:	d102      	bne.n	800a3d6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	61fb      	str	r3, [r7, #28]
 800a3d4:	e001      	b.n	800a3da <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	01db      	lsls	r3, r3, #7
 800a3e4:	4413      	add	r3, r2
 800a3e6:	3384      	adds	r3, #132	; 0x84
 800a3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	6812      	ldr	r2, [r2, #0]
 800a3ee:	4611      	mov	r1, r2
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	01d2      	lsls	r2, r2, #7
 800a3f4:	440a      	add	r2, r1
 800a3f6:	3284      	adds	r2, #132	; 0x84
 800a3f8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a3fc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a402:	69fa      	ldr	r2, [r7, #28]
 800a404:	fb02 f303 	mul.w	r3, r2, r3
 800a408:	041a      	lsls	r2, r3, #16
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	6859      	ldr	r1, [r3, #4]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	1acb      	subs	r3, r1, r3
 800a414:	69f9      	ldr	r1, [r7, #28]
 800a416:	fb01 f303 	mul.w	r3, r1, r3
 800a41a:	3307      	adds	r3, #7
 800a41c:	68f9      	ldr	r1, [r7, #12]
 800a41e:	6809      	ldr	r1, [r1, #0]
 800a420:	4608      	mov	r0, r1
 800a422:	6879      	ldr	r1, [r7, #4]
 800a424:	01c9      	lsls	r1, r1, #7
 800a426:	4401      	add	r1, r0
 800a428:	3184      	adds	r1, #132	; 0x84
 800a42a:	4313      	orrs	r3, r2
 800a42c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	461a      	mov	r2, r3
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	01db      	lsls	r3, r3, #7
 800a438:	4413      	add	r3, r2
 800a43a:	3384      	adds	r3, #132	; 0x84
 800a43c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4619      	mov	r1, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	01db      	lsls	r3, r3, #7
 800a448:	440b      	add	r3, r1
 800a44a:	3384      	adds	r3, #132	; 0x84
 800a44c:	4619      	mov	r1, r3
 800a44e:	4b14      	ldr	r3, [pc, #80]	; (800a4a0 <LTDC_SetConfig+0x330>)
 800a450:	4013      	ands	r3, r2
 800a452:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	461a      	mov	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	01db      	lsls	r3, r3, #7
 800a45e:	4413      	add	r3, r2
 800a460:	3384      	adds	r3, #132	; 0x84
 800a462:	461a      	mov	r2, r3
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a468:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	461a      	mov	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	01db      	lsls	r3, r3, #7
 800a474:	4413      	add	r3, r2
 800a476:	3384      	adds	r3, #132	; 0x84
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	6812      	ldr	r2, [r2, #0]
 800a47e:	4611      	mov	r1, r2
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	01d2      	lsls	r2, r2, #7
 800a484:	440a      	add	r2, r1
 800a486:	3284      	adds	r2, #132	; 0x84
 800a488:	f043 0301 	orr.w	r3, r3, #1
 800a48c:	6013      	str	r3, [r2, #0]
}
 800a48e:	bf00      	nop
 800a490:	3724      	adds	r7, #36	; 0x24
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	fffff8f8 	.word	0xfffff8f8
 800a4a0:	fffff800 	.word	0xfffff800

0800a4a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800a4a8:	4b05      	ldr	r3, [pc, #20]	; (800a4c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a04      	ldr	r2, [pc, #16]	; (800a4c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a4ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4b2:	6013      	str	r3, [r2, #0]
}
 800a4b4:	bf00      	nop
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	58024800 	.word	0x58024800

0800a4c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a4cc:	4b29      	ldr	r3, [pc, #164]	; (800a574 <HAL_PWREx_ConfigSupply+0xb0>)
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	f003 0307 	and.w	r3, r3, #7
 800a4d4:	2b06      	cmp	r3, #6
 800a4d6:	d00a      	beq.n	800a4ee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a4d8:	4b26      	ldr	r3, [pc, #152]	; (800a574 <HAL_PWREx_ConfigSupply+0xb0>)
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d001      	beq.n	800a4ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e040      	b.n	800a56c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	e03e      	b.n	800a56c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a4ee:	4b21      	ldr	r3, [pc, #132]	; (800a574 <HAL_PWREx_ConfigSupply+0xb0>)
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800a4f6:	491f      	ldr	r1, [pc, #124]	; (800a574 <HAL_PWREx_ConfigSupply+0xb0>)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a4fe:	f7f9 ff93 	bl	8004428 <HAL_GetTick>
 800a502:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a504:	e009      	b.n	800a51a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a506:	f7f9 ff8f 	bl	8004428 <HAL_GetTick>
 800a50a:	4602      	mov	r2, r0
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a514:	d901      	bls.n	800a51a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	e028      	b.n	800a56c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a51a:	4b16      	ldr	r3, [pc, #88]	; (800a574 <HAL_PWREx_ConfigSupply+0xb0>)
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a526:	d1ee      	bne.n	800a506 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2b1e      	cmp	r3, #30
 800a52c:	d008      	beq.n	800a540 <HAL_PWREx_ConfigSupply+0x7c>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b2e      	cmp	r3, #46	; 0x2e
 800a532:	d005      	beq.n	800a540 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2b1d      	cmp	r3, #29
 800a538:	d002      	beq.n	800a540 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b2d      	cmp	r3, #45	; 0x2d
 800a53e:	d114      	bne.n	800a56a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a540:	f7f9 ff72 	bl	8004428 <HAL_GetTick>
 800a544:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a546:	e009      	b.n	800a55c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a548:	f7f9 ff6e 	bl	8004428 <HAL_GetTick>
 800a54c:	4602      	mov	r2, r0
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a556:	d901      	bls.n	800a55c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	e007      	b.n	800a56c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a55c:	4b05      	ldr	r3, [pc, #20]	; (800a574 <HAL_PWREx_ConfigSupply+0xb0>)
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a568:	d1ee      	bne.n	800a548 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	58024800 	.word	0x58024800

0800a578 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b08c      	sub	sp, #48	; 0x30
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d102      	bne.n	800a58c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a586:	2301      	movs	r3, #1
 800a588:	f000 bc1f 	b.w	800adca <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 0301 	and.w	r3, r3, #1
 800a594:	2b00      	cmp	r3, #0
 800a596:	f000 80b3 	beq.w	800a700 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a59a:	4b95      	ldr	r3, [pc, #596]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a5a4:	4b92      	ldr	r3, [pc, #584]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a5a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ac:	2b10      	cmp	r3, #16
 800a5ae:	d007      	beq.n	800a5c0 <HAL_RCC_OscConfig+0x48>
 800a5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b2:	2b18      	cmp	r3, #24
 800a5b4:	d112      	bne.n	800a5dc <HAL_RCC_OscConfig+0x64>
 800a5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5b8:	f003 0303 	and.w	r3, r3, #3
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d10d      	bne.n	800a5dc <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5c0:	4b8b      	ldr	r3, [pc, #556]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 8098 	beq.w	800a6fe <HAL_RCC_OscConfig+0x186>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f040 8093 	bne.w	800a6fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e3f6      	b.n	800adca <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5e4:	d106      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x7c>
 800a5e6:	4b82      	ldr	r3, [pc, #520]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a81      	ldr	r2, [pc, #516]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a5ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5f0:	6013      	str	r3, [r2, #0]
 800a5f2:	e058      	b.n	800a6a6 <HAL_RCC_OscConfig+0x12e>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d112      	bne.n	800a622 <HAL_RCC_OscConfig+0xaa>
 800a5fc:	4b7c      	ldr	r3, [pc, #496]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a7b      	ldr	r2, [pc, #492]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a606:	6013      	str	r3, [r2, #0]
 800a608:	4b79      	ldr	r3, [pc, #484]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a78      	ldr	r2, [pc, #480]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a60e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a612:	6013      	str	r3, [r2, #0]
 800a614:	4b76      	ldr	r3, [pc, #472]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a75      	ldr	r2, [pc, #468]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a61a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	e041      	b.n	800a6a6 <HAL_RCC_OscConfig+0x12e>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a62a:	d112      	bne.n	800a652 <HAL_RCC_OscConfig+0xda>
 800a62c:	4b70      	ldr	r3, [pc, #448]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a6f      	ldr	r2, [pc, #444]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a632:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a636:	6013      	str	r3, [r2, #0]
 800a638:	4b6d      	ldr	r3, [pc, #436]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a6c      	ldr	r2, [pc, #432]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a63e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a642:	6013      	str	r3, [r2, #0]
 800a644:	4b6a      	ldr	r3, [pc, #424]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a69      	ldr	r2, [pc, #420]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a64a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a64e:	6013      	str	r3, [r2, #0]
 800a650:	e029      	b.n	800a6a6 <HAL_RCC_OscConfig+0x12e>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a65a:	d112      	bne.n	800a682 <HAL_RCC_OscConfig+0x10a>
 800a65c:	4b64      	ldr	r3, [pc, #400]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a63      	ldr	r2, [pc, #396]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a662:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a666:	6013      	str	r3, [r2, #0]
 800a668:	4b61      	ldr	r3, [pc, #388]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a60      	ldr	r2, [pc, #384]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a66e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a672:	6013      	str	r3, [r2, #0]
 800a674:	4b5e      	ldr	r3, [pc, #376]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a5d      	ldr	r2, [pc, #372]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a67a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a67e:	6013      	str	r3, [r2, #0]
 800a680:	e011      	b.n	800a6a6 <HAL_RCC_OscConfig+0x12e>
 800a682:	4b5b      	ldr	r3, [pc, #364]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a5a      	ldr	r2, [pc, #360]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a68c:	6013      	str	r3, [r2, #0]
 800a68e:	4b58      	ldr	r3, [pc, #352]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a57      	ldr	r2, [pc, #348]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a698:	6013      	str	r3, [r2, #0]
 800a69a:	4b55      	ldr	r3, [pc, #340]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a54      	ldr	r2, [pc, #336]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a6a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a6a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d013      	beq.n	800a6d6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ae:	f7f9 febb 	bl	8004428 <HAL_GetTick>
 800a6b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a6b4:	e008      	b.n	800a6c8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6b6:	f7f9 feb7 	bl	8004428 <HAL_GetTick>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6be:	1ad3      	subs	r3, r2, r3
 800a6c0:	2b64      	cmp	r3, #100	; 0x64
 800a6c2:	d901      	bls.n	800a6c8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a6c4:	2303      	movs	r3, #3
 800a6c6:	e380      	b.n	800adca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a6c8:	4b49      	ldr	r3, [pc, #292]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d0f0      	beq.n	800a6b6 <HAL_RCC_OscConfig+0x13e>
 800a6d4:	e014      	b.n	800a700 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6d6:	f7f9 fea7 	bl	8004428 <HAL_GetTick>
 800a6da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a6dc:	e008      	b.n	800a6f0 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6de:	f7f9 fea3 	bl	8004428 <HAL_GetTick>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	2b64      	cmp	r3, #100	; 0x64
 800a6ea:	d901      	bls.n	800a6f0 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	e36c      	b.n	800adca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a6f0:	4b3f      	ldr	r3, [pc, #252]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1f0      	bne.n	800a6de <HAL_RCC_OscConfig+0x166>
 800a6fc:	e000      	b.n	800a700 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 0302 	and.w	r3, r3, #2
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 808c 	beq.w	800a826 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a70e:	4b38      	ldr	r3, [pc, #224]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a716:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a718:	4b35      	ldr	r3, [pc, #212]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a71c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a71e:	6a3b      	ldr	r3, [r7, #32]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d007      	beq.n	800a734 <HAL_RCC_OscConfig+0x1bc>
 800a724:	6a3b      	ldr	r3, [r7, #32]
 800a726:	2b18      	cmp	r3, #24
 800a728:	d137      	bne.n	800a79a <HAL_RCC_OscConfig+0x222>
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	f003 0303 	and.w	r3, r3, #3
 800a730:	2b00      	cmp	r3, #0
 800a732:	d132      	bne.n	800a79a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a734:	4b2e      	ldr	r3, [pc, #184]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0304 	and.w	r3, r3, #4
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d005      	beq.n	800a74c <HAL_RCC_OscConfig+0x1d4>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d101      	bne.n	800a74c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	e33e      	b.n	800adca <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a74c:	4b28      	ldr	r3, [pc, #160]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f023 0219 	bic.w	r2, r3, #25
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	4925      	ldr	r1, [pc, #148]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a75a:	4313      	orrs	r3, r2
 800a75c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a75e:	f7f9 fe63 	bl	8004428 <HAL_GetTick>
 800a762:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a764:	e008      	b.n	800a778 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a766:	f7f9 fe5f 	bl	8004428 <HAL_GetTick>
 800a76a:	4602      	mov	r2, r0
 800a76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	2b02      	cmp	r3, #2
 800a772:	d901      	bls.n	800a778 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a774:	2303      	movs	r3, #3
 800a776:	e328      	b.n	800adca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a778:	4b1d      	ldr	r3, [pc, #116]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 0304 	and.w	r3, r3, #4
 800a780:	2b00      	cmp	r3, #0
 800a782:	d0f0      	beq.n	800a766 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a784:	4b1a      	ldr	r3, [pc, #104]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	691b      	ldr	r3, [r3, #16]
 800a790:	061b      	lsls	r3, r3, #24
 800a792:	4917      	ldr	r1, [pc, #92]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a794:	4313      	orrs	r3, r2
 800a796:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a798:	e045      	b.n	800a826 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d028      	beq.n	800a7f4 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a7a2:	4b13      	ldr	r3, [pc, #76]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f023 0219 	bic.w	r2, r3, #25
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	4910      	ldr	r1, [pc, #64]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7b4:	f7f9 fe38 	bl	8004428 <HAL_GetTick>
 800a7b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7ba:	e008      	b.n	800a7ce <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7bc:	f7f9 fe34 	bl	8004428 <HAL_GetTick>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	d901      	bls.n	800a7ce <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	e2fd      	b.n	800adca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a7ce:	4b08      	ldr	r3, [pc, #32]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f003 0304 	and.w	r3, r3, #4
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d0f0      	beq.n	800a7bc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7da:	4b05      	ldr	r3, [pc, #20]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	061b      	lsls	r3, r3, #24
 800a7e8:	4901      	ldr	r1, [pc, #4]	; (800a7f0 <HAL_RCC_OscConfig+0x278>)
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	604b      	str	r3, [r1, #4]
 800a7ee:	e01a      	b.n	800a826 <HAL_RCC_OscConfig+0x2ae>
 800a7f0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a7f4:	4b97      	ldr	r3, [pc, #604]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a96      	ldr	r2, [pc, #600]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a7fa:	f023 0301 	bic.w	r3, r3, #1
 800a7fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a800:	f7f9 fe12 	bl	8004428 <HAL_GetTick>
 800a804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a806:	e008      	b.n	800a81a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a808:	f7f9 fe0e 	bl	8004428 <HAL_GetTick>
 800a80c:	4602      	mov	r2, r0
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	2b02      	cmp	r3, #2
 800a814:	d901      	bls.n	800a81a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a816:	2303      	movs	r3, #3
 800a818:	e2d7      	b.n	800adca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a81a:	4b8e      	ldr	r3, [pc, #568]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f003 0304 	and.w	r3, r3, #4
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1f0      	bne.n	800a808 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 0310 	and.w	r3, r3, #16
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d06a      	beq.n	800a908 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a832:	4b88      	ldr	r3, [pc, #544]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a83a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a83c:	4b85      	ldr	r3, [pc, #532]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a840:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	2b08      	cmp	r3, #8
 800a846:	d007      	beq.n	800a858 <HAL_RCC_OscConfig+0x2e0>
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	2b18      	cmp	r3, #24
 800a84c:	d11b      	bne.n	800a886 <HAL_RCC_OscConfig+0x30e>
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	f003 0303 	and.w	r3, r3, #3
 800a854:	2b01      	cmp	r3, #1
 800a856:	d116      	bne.n	800a886 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a858:	4b7e      	ldr	r3, [pc, #504]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a860:	2b00      	cmp	r3, #0
 800a862:	d005      	beq.n	800a870 <HAL_RCC_OscConfig+0x2f8>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	69db      	ldr	r3, [r3, #28]
 800a868:	2b80      	cmp	r3, #128	; 0x80
 800a86a:	d001      	beq.n	800a870 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e2ac      	b.n	800adca <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a870:	4b78      	ldr	r3, [pc, #480]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a1b      	ldr	r3, [r3, #32]
 800a87c:	061b      	lsls	r3, r3, #24
 800a87e:	4975      	ldr	r1, [pc, #468]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a880:	4313      	orrs	r3, r2
 800a882:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a884:	e040      	b.n	800a908 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	69db      	ldr	r3, [r3, #28]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d023      	beq.n	800a8d6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a88e:	4b71      	ldr	r3, [pc, #452]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a70      	ldr	r2, [pc, #448]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a89a:	f7f9 fdc5 	bl	8004428 <HAL_GetTick>
 800a89e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8a0:	e008      	b.n	800a8b4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a8a2:	f7f9 fdc1 	bl	8004428 <HAL_GetTick>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8aa:	1ad3      	subs	r3, r2, r3
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d901      	bls.n	800a8b4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	e28a      	b.n	800adca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a8b4:	4b67      	ldr	r3, [pc, #412]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d0f0      	beq.n	800a8a2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a8c0:	4b64      	ldr	r3, [pc, #400]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a1b      	ldr	r3, [r3, #32]
 800a8cc:	061b      	lsls	r3, r3, #24
 800a8ce:	4961      	ldr	r1, [pc, #388]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	60cb      	str	r3, [r1, #12]
 800a8d4:	e018      	b.n	800a908 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a8d6:	4b5f      	ldr	r3, [pc, #380]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a5e      	ldr	r2, [pc, #376]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a8dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8e2:	f7f9 fda1 	bl	8004428 <HAL_GetTick>
 800a8e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a8e8:	e008      	b.n	800a8fc <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a8ea:	f7f9 fd9d 	bl	8004428 <HAL_GetTick>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d901      	bls.n	800a8fc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	e266      	b.n	800adca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a8fc:	4b55      	ldr	r3, [pc, #340]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1f0      	bne.n	800a8ea <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f003 0308 	and.w	r3, r3, #8
 800a910:	2b00      	cmp	r3, #0
 800a912:	d036      	beq.n	800a982 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	695b      	ldr	r3, [r3, #20]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d019      	beq.n	800a950 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a91c:	4b4d      	ldr	r3, [pc, #308]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a91e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a920:	4a4c      	ldr	r2, [pc, #304]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a922:	f043 0301 	orr.w	r3, r3, #1
 800a926:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a928:	f7f9 fd7e 	bl	8004428 <HAL_GetTick>
 800a92c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a92e:	e008      	b.n	800a942 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a930:	f7f9 fd7a 	bl	8004428 <HAL_GetTick>
 800a934:	4602      	mov	r2, r0
 800a936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a938:	1ad3      	subs	r3, r2, r3
 800a93a:	2b02      	cmp	r3, #2
 800a93c:	d901      	bls.n	800a942 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a93e:	2303      	movs	r3, #3
 800a940:	e243      	b.n	800adca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a942:	4b44      	ldr	r3, [pc, #272]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a946:	f003 0302 	and.w	r3, r3, #2
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d0f0      	beq.n	800a930 <HAL_RCC_OscConfig+0x3b8>
 800a94e:	e018      	b.n	800a982 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a950:	4b40      	ldr	r3, [pc, #256]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a954:	4a3f      	ldr	r2, [pc, #252]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a956:	f023 0301 	bic.w	r3, r3, #1
 800a95a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a95c:	f7f9 fd64 	bl	8004428 <HAL_GetTick>
 800a960:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a962:	e008      	b.n	800a976 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a964:	f7f9 fd60 	bl	8004428 <HAL_GetTick>
 800a968:	4602      	mov	r2, r0
 800a96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96c:	1ad3      	subs	r3, r2, r3
 800a96e:	2b02      	cmp	r3, #2
 800a970:	d901      	bls.n	800a976 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a972:	2303      	movs	r3, #3
 800a974:	e229      	b.n	800adca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a976:	4b37      	ldr	r3, [pc, #220]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a97a:	f003 0302 	and.w	r3, r3, #2
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1f0      	bne.n	800a964 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f003 0320 	and.w	r3, r3, #32
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d036      	beq.n	800a9fc <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d019      	beq.n	800a9ca <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a996:	4b2f      	ldr	r3, [pc, #188]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a2e      	ldr	r2, [pc, #184]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a99c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a9a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a9a2:	f7f9 fd41 	bl	8004428 <HAL_GetTick>
 800a9a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a9a8:	e008      	b.n	800a9bc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a9aa:	f7f9 fd3d 	bl	8004428 <HAL_GetTick>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	1ad3      	subs	r3, r2, r3
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d901      	bls.n	800a9bc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	e206      	b.n	800adca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a9bc:	4b25      	ldr	r3, [pc, #148]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d0f0      	beq.n	800a9aa <HAL_RCC_OscConfig+0x432>
 800a9c8:	e018      	b.n	800a9fc <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a9ca:	4b22      	ldr	r3, [pc, #136]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a21      	ldr	r2, [pc, #132]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a9d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a9d6:	f7f9 fd27 	bl	8004428 <HAL_GetTick>
 800a9da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a9dc:	e008      	b.n	800a9f0 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a9de:	f7f9 fd23 	bl	8004428 <HAL_GetTick>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e6:	1ad3      	subs	r3, r2, r3
 800a9e8:	2b02      	cmp	r3, #2
 800a9ea:	d901      	bls.n	800a9f0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800a9ec:	2303      	movs	r3, #3
 800a9ee:	e1ec      	b.n	800adca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a9f0:	4b18      	ldr	r3, [pc, #96]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d1f0      	bne.n	800a9de <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f003 0304 	and.w	r3, r3, #4
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f000 80af 	beq.w	800ab68 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aa0a:	4b13      	ldr	r3, [pc, #76]	; (800aa58 <HAL_RCC_OscConfig+0x4e0>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a12      	ldr	r2, [pc, #72]	; (800aa58 <HAL_RCC_OscConfig+0x4e0>)
 800aa10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aa16:	f7f9 fd07 	bl	8004428 <HAL_GetTick>
 800aa1a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa1c:	e008      	b.n	800aa30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa1e:	f7f9 fd03 	bl	8004428 <HAL_GetTick>
 800aa22:	4602      	mov	r2, r0
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	2b64      	cmp	r3, #100	; 0x64
 800aa2a:	d901      	bls.n	800aa30 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	e1cc      	b.n	800adca <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aa30:	4b09      	ldr	r3, [pc, #36]	; (800aa58 <HAL_RCC_OscConfig+0x4e0>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d0f0      	beq.n	800aa1e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d10b      	bne.n	800aa5c <HAL_RCC_OscConfig+0x4e4>
 800aa44:	4b03      	ldr	r3, [pc, #12]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800aa46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa48:	4a02      	ldr	r2, [pc, #8]	; (800aa54 <HAL_RCC_OscConfig+0x4dc>)
 800aa4a:	f043 0301 	orr.w	r3, r3, #1
 800aa4e:	6713      	str	r3, [r2, #112]	; 0x70
 800aa50:	e05b      	b.n	800ab0a <HAL_RCC_OscConfig+0x592>
 800aa52:	bf00      	nop
 800aa54:	58024400 	.word	0x58024400
 800aa58:	58024800 	.word	0x58024800
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d112      	bne.n	800aa8a <HAL_RCC_OscConfig+0x512>
 800aa64:	4b9d      	ldr	r3, [pc, #628]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aa66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa68:	4a9c      	ldr	r2, [pc, #624]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aa6a:	f023 0301 	bic.w	r3, r3, #1
 800aa6e:	6713      	str	r3, [r2, #112]	; 0x70
 800aa70:	4b9a      	ldr	r3, [pc, #616]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aa72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa74:	4a99      	ldr	r2, [pc, #612]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aa76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa7a:	6713      	str	r3, [r2, #112]	; 0x70
 800aa7c:	4b97      	ldr	r3, [pc, #604]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aa7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa80:	4a96      	ldr	r2, [pc, #600]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aa82:	f023 0304 	bic.w	r3, r3, #4
 800aa86:	6713      	str	r3, [r2, #112]	; 0x70
 800aa88:	e03f      	b.n	800ab0a <HAL_RCC_OscConfig+0x592>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	2b05      	cmp	r3, #5
 800aa90:	d112      	bne.n	800aab8 <HAL_RCC_OscConfig+0x540>
 800aa92:	4b92      	ldr	r3, [pc, #584]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aa94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa96:	4a91      	ldr	r2, [pc, #580]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aa98:	f043 0304 	orr.w	r3, r3, #4
 800aa9c:	6713      	str	r3, [r2, #112]	; 0x70
 800aa9e:	4b8f      	ldr	r3, [pc, #572]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aaa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaa2:	4a8e      	ldr	r2, [pc, #568]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aaa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaa8:	6713      	str	r3, [r2, #112]	; 0x70
 800aaaa:	4b8c      	ldr	r3, [pc, #560]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aaac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaae:	4a8b      	ldr	r2, [pc, #556]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aab0:	f043 0301 	orr.w	r3, r3, #1
 800aab4:	6713      	str	r3, [r2, #112]	; 0x70
 800aab6:	e028      	b.n	800ab0a <HAL_RCC_OscConfig+0x592>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	2b85      	cmp	r3, #133	; 0x85
 800aabe:	d112      	bne.n	800aae6 <HAL_RCC_OscConfig+0x56e>
 800aac0:	4b86      	ldr	r3, [pc, #536]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aac4:	4a85      	ldr	r2, [pc, #532]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aac6:	f043 0304 	orr.w	r3, r3, #4
 800aaca:	6713      	str	r3, [r2, #112]	; 0x70
 800aacc:	4b83      	ldr	r3, [pc, #524]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aad0:	4a82      	ldr	r2, [pc, #520]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad6:	6713      	str	r3, [r2, #112]	; 0x70
 800aad8:	4b80      	ldr	r3, [pc, #512]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aadc:	4a7f      	ldr	r2, [pc, #508]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aade:	f043 0301 	orr.w	r3, r3, #1
 800aae2:	6713      	str	r3, [r2, #112]	; 0x70
 800aae4:	e011      	b.n	800ab0a <HAL_RCC_OscConfig+0x592>
 800aae6:	4b7d      	ldr	r3, [pc, #500]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaea:	4a7c      	ldr	r2, [pc, #496]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aaec:	f023 0301 	bic.w	r3, r3, #1
 800aaf0:	6713      	str	r3, [r2, #112]	; 0x70
 800aaf2:	4b7a      	ldr	r3, [pc, #488]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aaf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaf6:	4a79      	ldr	r2, [pc, #484]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aaf8:	f023 0304 	bic.w	r3, r3, #4
 800aafc:	6713      	str	r3, [r2, #112]	; 0x70
 800aafe:	4b77      	ldr	r3, [pc, #476]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ab00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab02:	4a76      	ldr	r2, [pc, #472]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ab04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d015      	beq.n	800ab3e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab12:	f7f9 fc89 	bl	8004428 <HAL_GetTick>
 800ab16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab18:	e00a      	b.n	800ab30 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab1a:	f7f9 fc85 	bl	8004428 <HAL_GetTick>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	1ad3      	subs	r3, r2, r3
 800ab24:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d901      	bls.n	800ab30 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e14c      	b.n	800adca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab30:	4b6a      	ldr	r3, [pc, #424]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ab32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab34:	f003 0302 	and.w	r3, r3, #2
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d0ee      	beq.n	800ab1a <HAL_RCC_OscConfig+0x5a2>
 800ab3c:	e014      	b.n	800ab68 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab3e:	f7f9 fc73 	bl	8004428 <HAL_GetTick>
 800ab42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ab44:	e00a      	b.n	800ab5c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab46:	f7f9 fc6f 	bl	8004428 <HAL_GetTick>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4e:	1ad3      	subs	r3, r2, r3
 800ab50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d901      	bls.n	800ab5c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e136      	b.n	800adca <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ab5c:	4b5f      	ldr	r3, [pc, #380]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ab5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab60:	f003 0302 	and.w	r3, r3, #2
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1ee      	bne.n	800ab46 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f000 812b 	beq.w	800adc8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ab72:	4b5a      	ldr	r3, [pc, #360]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab7a:	2b18      	cmp	r3, #24
 800ab7c:	f000 80bb 	beq.w	800acf6 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	f040 8095 	bne.w	800acb4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab8a:	4b54      	ldr	r3, [pc, #336]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a53      	ldr	r2, [pc, #332]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ab90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab96:	f7f9 fc47 	bl	8004428 <HAL_GetTick>
 800ab9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab9c:	e008      	b.n	800abb0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab9e:	f7f9 fc43 	bl	8004428 <HAL_GetTick>
 800aba2:	4602      	mov	r2, r0
 800aba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba6:	1ad3      	subs	r3, r2, r3
 800aba8:	2b02      	cmp	r3, #2
 800abaa:	d901      	bls.n	800abb0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800abac:	2303      	movs	r3, #3
 800abae:	e10c      	b.n	800adca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800abb0:	4b4a      	ldr	r3, [pc, #296]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1f0      	bne.n	800ab9e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800abbc:	4b47      	ldr	r3, [pc, #284]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800abbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abc0:	4b47      	ldr	r3, [pc, #284]	; (800ace0 <HAL_RCC_OscConfig+0x768>)
 800abc2:	4013      	ands	r3, r2
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800abcc:	0112      	lsls	r2, r2, #4
 800abce:	430a      	orrs	r2, r1
 800abd0:	4942      	ldr	r1, [pc, #264]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800abd2:	4313      	orrs	r3, r2
 800abd4:	628b      	str	r3, [r1, #40]	; 0x28
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abda:	3b01      	subs	r3, #1
 800abdc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abe4:	3b01      	subs	r3, #1
 800abe6:	025b      	lsls	r3, r3, #9
 800abe8:	b29b      	uxth	r3, r3
 800abea:	431a      	orrs	r2, r3
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf0:	3b01      	subs	r3, #1
 800abf2:	041b      	lsls	r3, r3, #16
 800abf4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800abf8:	431a      	orrs	r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abfe:	3b01      	subs	r3, #1
 800ac00:	061b      	lsls	r3, r3, #24
 800ac02:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ac06:	4935      	ldr	r1, [pc, #212]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ac0c:	4b33      	ldr	r3, [pc, #204]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac10:	4a32      	ldr	r2, [pc, #200]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac12:	f023 0301 	bic.w	r3, r3, #1
 800ac16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ac18:	4b30      	ldr	r3, [pc, #192]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac1c:	4b31      	ldr	r3, [pc, #196]	; (800ace4 <HAL_RCC_OscConfig+0x76c>)
 800ac1e:	4013      	ands	r3, r2
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ac24:	00d2      	lsls	r2, r2, #3
 800ac26:	492d      	ldr	r1, [pc, #180]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ac2c:	4b2b      	ldr	r3, [pc, #172]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac30:	f023 020c 	bic.w	r2, r3, #12
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac38:	4928      	ldr	r1, [pc, #160]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ac3e:	4b27      	ldr	r3, [pc, #156]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac42:	f023 0202 	bic.w	r2, r3, #2
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac4a:	4924      	ldr	r1, [pc, #144]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ac50:	4b22      	ldr	r3, [pc, #136]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac54:	4a21      	ldr	r2, [pc, #132]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac5c:	4b1f      	ldr	r3, [pc, #124]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac60:	4a1e      	ldr	r2, [pc, #120]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ac68:	4b1c      	ldr	r3, [pc, #112]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac6c:	4a1b      	ldr	r2, [pc, #108]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ac74:	4b19      	ldr	r3, [pc, #100]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac78:	4a18      	ldr	r2, [pc, #96]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac7a:	f043 0301 	orr.w	r3, r3, #1
 800ac7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac80:	4b16      	ldr	r3, [pc, #88]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a15      	ldr	r2, [pc, #84]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800ac86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac8c:	f7f9 fbcc 	bl	8004428 <HAL_GetTick>
 800ac90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac92:	e008      	b.n	800aca6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac94:	f7f9 fbc8 	bl	8004428 <HAL_GetTick>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9c:	1ad3      	subs	r3, r2, r3
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d901      	bls.n	800aca6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800aca2:	2303      	movs	r3, #3
 800aca4:	e091      	b.n	800adca <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aca6:	4b0d      	ldr	r3, [pc, #52]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d0f0      	beq.n	800ac94 <HAL_RCC_OscConfig+0x71c>
 800acb2:	e089      	b.n	800adc8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acb4:	4b09      	ldr	r3, [pc, #36]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a08      	ldr	r2, [pc, #32]	; (800acdc <HAL_RCC_OscConfig+0x764>)
 800acba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800acbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acc0:	f7f9 fbb2 	bl	8004428 <HAL_GetTick>
 800acc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acc6:	e00f      	b.n	800ace8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acc8:	f7f9 fbae 	bl	8004428 <HAL_GetTick>
 800accc:	4602      	mov	r2, r0
 800acce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	2b02      	cmp	r3, #2
 800acd4:	d908      	bls.n	800ace8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800acd6:	2303      	movs	r3, #3
 800acd8:	e077      	b.n	800adca <HAL_RCC_OscConfig+0x852>
 800acda:	bf00      	nop
 800acdc:	58024400 	.word	0x58024400
 800ace0:	fffffc0c 	.word	0xfffffc0c
 800ace4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ace8:	4b3a      	ldr	r3, [pc, #232]	; (800add4 <HAL_RCC_OscConfig+0x85c>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1e9      	bne.n	800acc8 <HAL_RCC_OscConfig+0x750>
 800acf4:	e068      	b.n	800adc8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800acf6:	4b37      	ldr	r3, [pc, #220]	; (800add4 <HAL_RCC_OscConfig+0x85c>)
 800acf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acfa:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800acfc:	4b35      	ldr	r3, [pc, #212]	; (800add4 <HAL_RCC_OscConfig+0x85c>)
 800acfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad00:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d031      	beq.n	800ad6e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	f003 0203 	and.w	r2, r3, #3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d12a      	bne.n	800ad6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	091b      	lsrs	r3, r3, #4
 800ad1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d122      	bne.n	800ad6e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad32:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d11a      	bne.n	800ad6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	0a5b      	lsrs	r3, r3, #9
 800ad3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad44:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d111      	bne.n	800ad6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	0c1b      	lsrs	r3, r3, #16
 800ad4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d108      	bne.n	800ad6e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	0e1b      	lsrs	r3, r3, #24
 800ad60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d001      	beq.n	800ad72 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e02b      	b.n	800adca <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ad72:	4b18      	ldr	r3, [pc, #96]	; (800add4 <HAL_RCC_OscConfig+0x85c>)
 800ad74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad76:	08db      	lsrs	r3, r3, #3
 800ad78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad7c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad82:	693a      	ldr	r2, [r7, #16]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d01f      	beq.n	800adc8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ad88:	4b12      	ldr	r3, [pc, #72]	; (800add4 <HAL_RCC_OscConfig+0x85c>)
 800ad8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad8c:	4a11      	ldr	r2, [pc, #68]	; (800add4 <HAL_RCC_OscConfig+0x85c>)
 800ad8e:	f023 0301 	bic.w	r3, r3, #1
 800ad92:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ad94:	f7f9 fb48 	bl	8004428 <HAL_GetTick>
 800ad98:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ad9a:	bf00      	nop
 800ad9c:	f7f9 fb44 	bl	8004428 <HAL_GetTick>
 800ada0:	4602      	mov	r2, r0
 800ada2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d0f9      	beq.n	800ad9c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ada8:	4b0a      	ldr	r3, [pc, #40]	; (800add4 <HAL_RCC_OscConfig+0x85c>)
 800adaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adac:	4b0a      	ldr	r3, [pc, #40]	; (800add8 <HAL_RCC_OscConfig+0x860>)
 800adae:	4013      	ands	r3, r2
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800adb4:	00d2      	lsls	r2, r2, #3
 800adb6:	4907      	ldr	r1, [pc, #28]	; (800add4 <HAL_RCC_OscConfig+0x85c>)
 800adb8:	4313      	orrs	r3, r2
 800adba:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800adbc:	4b05      	ldr	r3, [pc, #20]	; (800add4 <HAL_RCC_OscConfig+0x85c>)
 800adbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc0:	4a04      	ldr	r2, [pc, #16]	; (800add4 <HAL_RCC_OscConfig+0x85c>)
 800adc2:	f043 0301 	orr.w	r3, r3, #1
 800adc6:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3730      	adds	r7, #48	; 0x30
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	58024400 	.word	0x58024400
 800add8:	ffff0007 	.word	0xffff0007

0800addc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b086      	sub	sp, #24
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d101      	bne.n	800adf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800adec:	2301      	movs	r3, #1
 800adee:	e19c      	b.n	800b12a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800adf0:	4b8a      	ldr	r3, [pc, #552]	; (800b01c <HAL_RCC_ClockConfig+0x240>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 030f 	and.w	r3, r3, #15
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d910      	bls.n	800ae20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adfe:	4b87      	ldr	r3, [pc, #540]	; (800b01c <HAL_RCC_ClockConfig+0x240>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f023 020f 	bic.w	r2, r3, #15
 800ae06:	4985      	ldr	r1, [pc, #532]	; (800b01c <HAL_RCC_ClockConfig+0x240>)
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae0e:	4b83      	ldr	r3, [pc, #524]	; (800b01c <HAL_RCC_ClockConfig+0x240>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f003 030f 	and.w	r3, r3, #15
 800ae16:	683a      	ldr	r2, [r7, #0]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d001      	beq.n	800ae20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e184      	b.n	800b12a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 0304 	and.w	r3, r3, #4
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d010      	beq.n	800ae4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	691a      	ldr	r2, [r3, #16]
 800ae30:	4b7b      	ldr	r3, [pc, #492]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d908      	bls.n	800ae4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ae3c:	4b78      	ldr	r3, [pc, #480]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	4975      	ldr	r1, [pc, #468]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f003 0308 	and.w	r3, r3, #8
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d010      	beq.n	800ae7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	695a      	ldr	r2, [r3, #20]
 800ae5e:	4b70      	ldr	r3, [pc, #448]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800ae60:	69db      	ldr	r3, [r3, #28]
 800ae62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d908      	bls.n	800ae7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ae6a:	4b6d      	ldr	r3, [pc, #436]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800ae6c:	69db      	ldr	r3, [r3, #28]
 800ae6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	695b      	ldr	r3, [r3, #20]
 800ae76:	496a      	ldr	r1, [pc, #424]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 0310 	and.w	r3, r3, #16
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d010      	beq.n	800aeaa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	699a      	ldr	r2, [r3, #24]
 800ae8c:	4b64      	ldr	r3, [pc, #400]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800ae8e:	69db      	ldr	r3, [r3, #28]
 800ae90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d908      	bls.n	800aeaa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ae98:	4b61      	ldr	r3, [pc, #388]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800ae9a:	69db      	ldr	r3, [r3, #28]
 800ae9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	495e      	ldr	r1, [pc, #376]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800aea6:	4313      	orrs	r3, r2
 800aea8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 0320 	and.w	r3, r3, #32
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d010      	beq.n	800aed8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	69da      	ldr	r2, [r3, #28]
 800aeba:	4b59      	ldr	r3, [pc, #356]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800aebc:	6a1b      	ldr	r3, [r3, #32]
 800aebe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d908      	bls.n	800aed8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aec6:	4b56      	ldr	r3, [pc, #344]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	69db      	ldr	r3, [r3, #28]
 800aed2:	4953      	ldr	r1, [pc, #332]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800aed4:	4313      	orrs	r3, r2
 800aed6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f003 0302 	and.w	r3, r3, #2
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d010      	beq.n	800af06 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	68da      	ldr	r2, [r3, #12]
 800aee8:	4b4d      	ldr	r3, [pc, #308]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800aeea:	699b      	ldr	r3, [r3, #24]
 800aeec:	f003 030f 	and.w	r3, r3, #15
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d908      	bls.n	800af06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aef4:	4b4a      	ldr	r3, [pc, #296]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800aef6:	699b      	ldr	r3, [r3, #24]
 800aef8:	f023 020f 	bic.w	r2, r3, #15
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	4947      	ldr	r1, [pc, #284]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800af02:	4313      	orrs	r3, r2
 800af04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f003 0301 	and.w	r3, r3, #1
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d055      	beq.n	800afbe <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800af12:	4b43      	ldr	r3, [pc, #268]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800af14:	699b      	ldr	r3, [r3, #24]
 800af16:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	4940      	ldr	r1, [pc, #256]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800af20:	4313      	orrs	r3, r2
 800af22:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d107      	bne.n	800af3c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800af2c:	4b3c      	ldr	r3, [pc, #240]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af34:	2b00      	cmp	r3, #0
 800af36:	d121      	bne.n	800af7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af38:	2301      	movs	r3, #1
 800af3a:	e0f6      	b.n	800b12a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	2b03      	cmp	r3, #3
 800af42:	d107      	bne.n	800af54 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800af44:	4b36      	ldr	r3, [pc, #216]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d115      	bne.n	800af7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af50:	2301      	movs	r3, #1
 800af52:	e0ea      	b.n	800b12a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d107      	bne.n	800af6c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800af5c:	4b30      	ldr	r3, [pc, #192]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af64:	2b00      	cmp	r3, #0
 800af66:	d109      	bne.n	800af7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af68:	2301      	movs	r3, #1
 800af6a:	e0de      	b.n	800b12a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af6c:	4b2c      	ldr	r3, [pc, #176]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f003 0304 	and.w	r3, r3, #4
 800af74:	2b00      	cmp	r3, #0
 800af76:	d101      	bne.n	800af7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	e0d6      	b.n	800b12a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800af7c:	4b28      	ldr	r3, [pc, #160]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	f023 0207 	bic.w	r2, r3, #7
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	4925      	ldr	r1, [pc, #148]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800af8a:	4313      	orrs	r3, r2
 800af8c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af8e:	f7f9 fa4b 	bl	8004428 <HAL_GetTick>
 800af92:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af94:	e00a      	b.n	800afac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af96:	f7f9 fa47 	bl	8004428 <HAL_GetTick>
 800af9a:	4602      	mov	r2, r0
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	1ad3      	subs	r3, r2, r3
 800afa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d901      	bls.n	800afac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800afa8:	2303      	movs	r3, #3
 800afaa:	e0be      	b.n	800b12a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afac:	4b1c      	ldr	r3, [pc, #112]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800afae:	691b      	ldr	r3, [r3, #16]
 800afb0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	00db      	lsls	r3, r3, #3
 800afba:	429a      	cmp	r2, r3
 800afbc:	d1eb      	bne.n	800af96 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f003 0302 	and.w	r3, r3, #2
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d010      	beq.n	800afec <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	68da      	ldr	r2, [r3, #12]
 800afce:	4b14      	ldr	r3, [pc, #80]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	f003 030f 	and.w	r3, r3, #15
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d208      	bcs.n	800afec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800afda:	4b11      	ldr	r3, [pc, #68]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800afdc:	699b      	ldr	r3, [r3, #24]
 800afde:	f023 020f 	bic.w	r2, r3, #15
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	490e      	ldr	r1, [pc, #56]	; (800b020 <HAL_RCC_ClockConfig+0x244>)
 800afe8:	4313      	orrs	r3, r2
 800afea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800afec:	4b0b      	ldr	r3, [pc, #44]	; (800b01c <HAL_RCC_ClockConfig+0x240>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f003 030f 	and.w	r3, r3, #15
 800aff4:	683a      	ldr	r2, [r7, #0]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d214      	bcs.n	800b024 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800affa:	4b08      	ldr	r3, [pc, #32]	; (800b01c <HAL_RCC_ClockConfig+0x240>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f023 020f 	bic.w	r2, r3, #15
 800b002:	4906      	ldr	r1, [pc, #24]	; (800b01c <HAL_RCC_ClockConfig+0x240>)
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	4313      	orrs	r3, r2
 800b008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b00a:	4b04      	ldr	r3, [pc, #16]	; (800b01c <HAL_RCC_ClockConfig+0x240>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 030f 	and.w	r3, r3, #15
 800b012:	683a      	ldr	r2, [r7, #0]
 800b014:	429a      	cmp	r2, r3
 800b016:	d005      	beq.n	800b024 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	e086      	b.n	800b12a <HAL_RCC_ClockConfig+0x34e>
 800b01c:	52002000 	.word	0x52002000
 800b020:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f003 0304 	and.w	r3, r3, #4
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d010      	beq.n	800b052 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	691a      	ldr	r2, [r3, #16]
 800b034:	4b3f      	ldr	r3, [pc, #252]	; (800b134 <HAL_RCC_ClockConfig+0x358>)
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d208      	bcs.n	800b052 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b040:	4b3c      	ldr	r3, [pc, #240]	; (800b134 <HAL_RCC_ClockConfig+0x358>)
 800b042:	699b      	ldr	r3, [r3, #24]
 800b044:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	4939      	ldr	r1, [pc, #228]	; (800b134 <HAL_RCC_ClockConfig+0x358>)
 800b04e:	4313      	orrs	r3, r2
 800b050:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f003 0308 	and.w	r3, r3, #8
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d010      	beq.n	800b080 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	695a      	ldr	r2, [r3, #20]
 800b062:	4b34      	ldr	r3, [pc, #208]	; (800b134 <HAL_RCC_ClockConfig+0x358>)
 800b064:	69db      	ldr	r3, [r3, #28]
 800b066:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d208      	bcs.n	800b080 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b06e:	4b31      	ldr	r3, [pc, #196]	; (800b134 <HAL_RCC_ClockConfig+0x358>)
 800b070:	69db      	ldr	r3, [r3, #28]
 800b072:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	695b      	ldr	r3, [r3, #20]
 800b07a:	492e      	ldr	r1, [pc, #184]	; (800b134 <HAL_RCC_ClockConfig+0x358>)
 800b07c:	4313      	orrs	r3, r2
 800b07e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f003 0310 	and.w	r3, r3, #16
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d010      	beq.n	800b0ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	699a      	ldr	r2, [r3, #24]
 800b090:	4b28      	ldr	r3, [pc, #160]	; (800b134 <HAL_RCC_ClockConfig+0x358>)
 800b092:	69db      	ldr	r3, [r3, #28]
 800b094:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b098:	429a      	cmp	r2, r3
 800b09a:	d208      	bcs.n	800b0ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b09c:	4b25      	ldr	r3, [pc, #148]	; (800b134 <HAL_RCC_ClockConfig+0x358>)
 800b09e:	69db      	ldr	r3, [r3, #28]
 800b0a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	4922      	ldr	r1, [pc, #136]	; (800b134 <HAL_RCC_ClockConfig+0x358>)
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f003 0320 	and.w	r3, r3, #32
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d010      	beq.n	800b0dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	69da      	ldr	r2, [r3, #28]
 800b0be:	4b1d      	ldr	r3, [pc, #116]	; (800b134 <HAL_RCC_ClockConfig+0x358>)
 800b0c0:	6a1b      	ldr	r3, [r3, #32]
 800b0c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d208      	bcs.n	800b0dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b0ca:	4b1a      	ldr	r3, [pc, #104]	; (800b134 <HAL_RCC_ClockConfig+0x358>)
 800b0cc:	6a1b      	ldr	r3, [r3, #32]
 800b0ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	69db      	ldr	r3, [r3, #28]
 800b0d6:	4917      	ldr	r1, [pc, #92]	; (800b134 <HAL_RCC_ClockConfig+0x358>)
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b0dc:	f000 f89e 	bl	800b21c <HAL_RCC_GetSysClockFreq>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	4b14      	ldr	r3, [pc, #80]	; (800b134 <HAL_RCC_ClockConfig+0x358>)
 800b0e4:	699b      	ldr	r3, [r3, #24]
 800b0e6:	0a1b      	lsrs	r3, r3, #8
 800b0e8:	f003 030f 	and.w	r3, r3, #15
 800b0ec:	4912      	ldr	r1, [pc, #72]	; (800b138 <HAL_RCC_ClockConfig+0x35c>)
 800b0ee:	5ccb      	ldrb	r3, [r1, r3]
 800b0f0:	f003 031f 	and.w	r3, r3, #31
 800b0f4:	fa22 f303 	lsr.w	r3, r2, r3
 800b0f8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b0fa:	4b0e      	ldr	r3, [pc, #56]	; (800b134 <HAL_RCC_ClockConfig+0x358>)
 800b0fc:	699b      	ldr	r3, [r3, #24]
 800b0fe:	f003 030f 	and.w	r3, r3, #15
 800b102:	4a0d      	ldr	r2, [pc, #52]	; (800b138 <HAL_RCC_ClockConfig+0x35c>)
 800b104:	5cd3      	ldrb	r3, [r2, r3]
 800b106:	f003 031f 	and.w	r3, r3, #31
 800b10a:	693a      	ldr	r2, [r7, #16]
 800b10c:	fa22 f303 	lsr.w	r3, r2, r3
 800b110:	4a0a      	ldr	r2, [pc, #40]	; (800b13c <HAL_RCC_ClockConfig+0x360>)
 800b112:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b114:	4a0a      	ldr	r2, [pc, #40]	; (800b140 <HAL_RCC_ClockConfig+0x364>)
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b11a:	4b0a      	ldr	r3, [pc, #40]	; (800b144 <HAL_RCC_ClockConfig+0x368>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4618      	mov	r0, r3
 800b120:	f7f9 f938 	bl	8004394 <HAL_InitTick>
 800b124:	4603      	mov	r3, r0
 800b126:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b128:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3718      	adds	r7, #24
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	58024400 	.word	0x58024400
 800b138:	08010d30 	.word	0x08010d30
 800b13c:	24000048 	.word	0x24000048
 800b140:	24000044 	.word	0x24000044
 800b144:	2400004c 	.word	0x2400004c

0800b148 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b08c      	sub	sp, #48	; 0x30
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d12a      	bne.n	800b1b0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b15a:	4b2d      	ldr	r3, [pc, #180]	; (800b210 <HAL_RCC_MCOConfig+0xc8>)
 800b15c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b160:	4a2b      	ldr	r2, [pc, #172]	; (800b210 <HAL_RCC_MCOConfig+0xc8>)
 800b162:	f043 0301 	orr.w	r3, r3, #1
 800b166:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b16a:	4b29      	ldr	r3, [pc, #164]	; (800b210 <HAL_RCC_MCOConfig+0xc8>)
 800b16c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b170:	f003 0301 	and.w	r3, r3, #1
 800b174:	61bb      	str	r3, [r7, #24]
 800b176:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b17c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b17e:	2302      	movs	r3, #2
 800b180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b182:	2303      	movs	r3, #3
 800b184:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b186:	2300      	movs	r3, #0
 800b188:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b18a:	2300      	movs	r3, #0
 800b18c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b18e:	f107 031c 	add.w	r3, r7, #28
 800b192:	4619      	mov	r1, r3
 800b194:	481f      	ldr	r0, [pc, #124]	; (800b214 <HAL_RCC_MCOConfig+0xcc>)
 800b196:	f7fd fcc1 	bl	8008b1c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b19a:	4b1d      	ldr	r3, [pc, #116]	; (800b210 <HAL_RCC_MCOConfig+0xc8>)
 800b19c:	691b      	ldr	r3, [r3, #16]
 800b19e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b1a2:	68b9      	ldr	r1, [r7, #8]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	430b      	orrs	r3, r1
 800b1a8:	4919      	ldr	r1, [pc, #100]	; (800b210 <HAL_RCC_MCOConfig+0xc8>)
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b1ae:	e02a      	b.n	800b206 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b1b0:	4b17      	ldr	r3, [pc, #92]	; (800b210 <HAL_RCC_MCOConfig+0xc8>)
 800b1b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b1b6:	4a16      	ldr	r2, [pc, #88]	; (800b210 <HAL_RCC_MCOConfig+0xc8>)
 800b1b8:	f043 0304 	orr.w	r3, r3, #4
 800b1bc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b1c0:	4b13      	ldr	r3, [pc, #76]	; (800b210 <HAL_RCC_MCOConfig+0xc8>)
 800b1c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b1c6:	f003 0304 	and.w	r3, r3, #4
 800b1ca:	617b      	str	r3, [r7, #20]
 800b1cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b1ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1d4:	2302      	movs	r3, #2
 800b1d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1d8:	2303      	movs	r3, #3
 800b1da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b1e4:	f107 031c 	add.w	r3, r7, #28
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	480b      	ldr	r0, [pc, #44]	; (800b218 <HAL_RCC_MCOConfig+0xd0>)
 800b1ec:	f7fd fc96 	bl	8008b1c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b1f0:	4b07      	ldr	r3, [pc, #28]	; (800b210 <HAL_RCC_MCOConfig+0xc8>)
 800b1f2:	691b      	ldr	r3, [r3, #16]
 800b1f4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	01d9      	lsls	r1, r3, #7
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	430b      	orrs	r3, r1
 800b200:	4903      	ldr	r1, [pc, #12]	; (800b210 <HAL_RCC_MCOConfig+0xc8>)
 800b202:	4313      	orrs	r3, r2
 800b204:	610b      	str	r3, [r1, #16]
}
 800b206:	bf00      	nop
 800b208:	3730      	adds	r7, #48	; 0x30
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	58024400 	.word	0x58024400
 800b214:	58020000 	.word	0x58020000
 800b218:	58020800 	.word	0x58020800

0800b21c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b089      	sub	sp, #36	; 0x24
 800b220:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b222:	4bb3      	ldr	r3, [pc, #716]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b224:	691b      	ldr	r3, [r3, #16]
 800b226:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b22a:	2b18      	cmp	r3, #24
 800b22c:	f200 8155 	bhi.w	800b4da <HAL_RCC_GetSysClockFreq+0x2be>
 800b230:	a201      	add	r2, pc, #4	; (adr r2, 800b238 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b236:	bf00      	nop
 800b238:	0800b29d 	.word	0x0800b29d
 800b23c:	0800b4db 	.word	0x0800b4db
 800b240:	0800b4db 	.word	0x0800b4db
 800b244:	0800b4db 	.word	0x0800b4db
 800b248:	0800b4db 	.word	0x0800b4db
 800b24c:	0800b4db 	.word	0x0800b4db
 800b250:	0800b4db 	.word	0x0800b4db
 800b254:	0800b4db 	.word	0x0800b4db
 800b258:	0800b2c3 	.word	0x0800b2c3
 800b25c:	0800b4db 	.word	0x0800b4db
 800b260:	0800b4db 	.word	0x0800b4db
 800b264:	0800b4db 	.word	0x0800b4db
 800b268:	0800b4db 	.word	0x0800b4db
 800b26c:	0800b4db 	.word	0x0800b4db
 800b270:	0800b4db 	.word	0x0800b4db
 800b274:	0800b4db 	.word	0x0800b4db
 800b278:	0800b2c9 	.word	0x0800b2c9
 800b27c:	0800b4db 	.word	0x0800b4db
 800b280:	0800b4db 	.word	0x0800b4db
 800b284:	0800b4db 	.word	0x0800b4db
 800b288:	0800b4db 	.word	0x0800b4db
 800b28c:	0800b4db 	.word	0x0800b4db
 800b290:	0800b4db 	.word	0x0800b4db
 800b294:	0800b4db 	.word	0x0800b4db
 800b298:	0800b2cf 	.word	0x0800b2cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b29c:	4b94      	ldr	r3, [pc, #592]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f003 0320 	and.w	r3, r3, #32
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d009      	beq.n	800b2bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2a8:	4b91      	ldr	r3, [pc, #580]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	08db      	lsrs	r3, r3, #3
 800b2ae:	f003 0303 	and.w	r3, r3, #3
 800b2b2:	4a90      	ldr	r2, [pc, #576]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b2b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b2ba:	e111      	b.n	800b4e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b2bc:	4b8d      	ldr	r3, [pc, #564]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2be:	61bb      	str	r3, [r7, #24]
      break;
 800b2c0:	e10e      	b.n	800b4e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b2c2:	4b8d      	ldr	r3, [pc, #564]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b2c4:	61bb      	str	r3, [r7, #24]
      break;
 800b2c6:	e10b      	b.n	800b4e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b2c8:	4b8c      	ldr	r3, [pc, #560]	; (800b4fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b2ca:	61bb      	str	r3, [r7, #24]
      break;
 800b2cc:	e108      	b.n	800b4e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2ce:	4b88      	ldr	r3, [pc, #544]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d2:	f003 0303 	and.w	r3, r3, #3
 800b2d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b2d8:	4b85      	ldr	r3, [pc, #532]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2dc:	091b      	lsrs	r3, r3, #4
 800b2de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b2e4:	4b82      	ldr	r3, [pc, #520]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e8:	f003 0301 	and.w	r3, r3, #1
 800b2ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b2ee:	4b80      	ldr	r3, [pc, #512]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f2:	08db      	lsrs	r3, r3, #3
 800b2f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	fb02 f303 	mul.w	r3, r2, r3
 800b2fe:	ee07 3a90 	vmov	s15, r3
 800b302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b306:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f000 80e1 	beq.w	800b4d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	2b02      	cmp	r3, #2
 800b316:	f000 8083 	beq.w	800b420 <HAL_RCC_GetSysClockFreq+0x204>
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	2b02      	cmp	r3, #2
 800b31e:	f200 80a1 	bhi.w	800b464 <HAL_RCC_GetSysClockFreq+0x248>
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d003      	beq.n	800b330 <HAL_RCC_GetSysClockFreq+0x114>
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d056      	beq.n	800b3dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800b32e:	e099      	b.n	800b464 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b330:	4b6f      	ldr	r3, [pc, #444]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f003 0320 	and.w	r3, r3, #32
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d02d      	beq.n	800b398 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b33c:	4b6c      	ldr	r3, [pc, #432]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	08db      	lsrs	r3, r3, #3
 800b342:	f003 0303 	and.w	r3, r3, #3
 800b346:	4a6b      	ldr	r2, [pc, #428]	; (800b4f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b348:	fa22 f303 	lsr.w	r3, r2, r3
 800b34c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	ee07 3a90 	vmov	s15, r3
 800b354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	ee07 3a90 	vmov	s15, r3
 800b35e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b366:	4b62      	ldr	r3, [pc, #392]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b36a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b36e:	ee07 3a90 	vmov	s15, r3
 800b372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b376:	ed97 6a02 	vldr	s12, [r7, #8]
 800b37a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b37e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b38a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b38e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b392:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b396:	e087      	b.n	800b4a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	ee07 3a90 	vmov	s15, r3
 800b39e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b504 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b3a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3aa:	4b51      	ldr	r3, [pc, #324]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3b2:	ee07 3a90 	vmov	s15, r3
 800b3b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ba:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3be:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b3da:	e065      	b.n	800b4a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	ee07 3a90 	vmov	s15, r3
 800b3e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b508 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b3ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ee:	4b40      	ldr	r3, [pc, #256]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3f6:	ee07 3a90 	vmov	s15, r3
 800b3fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800b402:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b40a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b40e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b41a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b41e:	e043      	b.n	800b4a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	ee07 3a90 	vmov	s15, r3
 800b426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b42a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b50c <HAL_RCC_GetSysClockFreq+0x2f0>
 800b42e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b432:	4b2f      	ldr	r3, [pc, #188]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b43a:	ee07 3a90 	vmov	s15, r3
 800b43e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b442:	ed97 6a02 	vldr	s12, [r7, #8]
 800b446:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b44a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b44e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b45a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b45e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b462:	e021      	b.n	800b4a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	ee07 3a90 	vmov	s15, r3
 800b46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b46e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b508 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b476:	4b1e      	ldr	r3, [pc, #120]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b47a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b47e:	ee07 3a90 	vmov	s15, r3
 800b482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b486:	ed97 6a02 	vldr	s12, [r7, #8]
 800b48a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b48e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b49a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b49e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b4a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b4a8:	4b11      	ldr	r3, [pc, #68]	; (800b4f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ac:	0a5b      	lsrs	r3, r3, #9
 800b4ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	ee07 3a90 	vmov	s15, r3
 800b4bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b4c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4cc:	ee17 3a90 	vmov	r3, s15
 800b4d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b4d2:	e005      	b.n	800b4e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	61bb      	str	r3, [r7, #24]
      break;
 800b4d8:	e002      	b.n	800b4e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b4da:	4b07      	ldr	r3, [pc, #28]	; (800b4f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b4dc:	61bb      	str	r3, [r7, #24]
      break;
 800b4de:	bf00      	nop
  }

  return sysclockfreq;
 800b4e0:	69bb      	ldr	r3, [r7, #24]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3724      	adds	r7, #36	; 0x24
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop
 800b4f0:	58024400 	.word	0x58024400
 800b4f4:	03d09000 	.word	0x03d09000
 800b4f8:	003d0900 	.word	0x003d0900
 800b4fc:	016e3600 	.word	0x016e3600
 800b500:	46000000 	.word	0x46000000
 800b504:	4c742400 	.word	0x4c742400
 800b508:	4a742400 	.word	0x4a742400
 800b50c:	4bb71b00 	.word	0x4bb71b00

0800b510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b516:	f7ff fe81 	bl	800b21c <HAL_RCC_GetSysClockFreq>
 800b51a:	4602      	mov	r2, r0
 800b51c:	4b10      	ldr	r3, [pc, #64]	; (800b560 <HAL_RCC_GetHCLKFreq+0x50>)
 800b51e:	699b      	ldr	r3, [r3, #24]
 800b520:	0a1b      	lsrs	r3, r3, #8
 800b522:	f003 030f 	and.w	r3, r3, #15
 800b526:	490f      	ldr	r1, [pc, #60]	; (800b564 <HAL_RCC_GetHCLKFreq+0x54>)
 800b528:	5ccb      	ldrb	r3, [r1, r3]
 800b52a:	f003 031f 	and.w	r3, r3, #31
 800b52e:	fa22 f303 	lsr.w	r3, r2, r3
 800b532:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b534:	4b0a      	ldr	r3, [pc, #40]	; (800b560 <HAL_RCC_GetHCLKFreq+0x50>)
 800b536:	699b      	ldr	r3, [r3, #24]
 800b538:	f003 030f 	and.w	r3, r3, #15
 800b53c:	4a09      	ldr	r2, [pc, #36]	; (800b564 <HAL_RCC_GetHCLKFreq+0x54>)
 800b53e:	5cd3      	ldrb	r3, [r2, r3]
 800b540:	f003 031f 	and.w	r3, r3, #31
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	fa22 f303 	lsr.w	r3, r2, r3
 800b54a:	4a07      	ldr	r2, [pc, #28]	; (800b568 <HAL_RCC_GetHCLKFreq+0x58>)
 800b54c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b54e:	4a07      	ldr	r2, [pc, #28]	; (800b56c <HAL_RCC_GetHCLKFreq+0x5c>)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b554:	4b04      	ldr	r3, [pc, #16]	; (800b568 <HAL_RCC_GetHCLKFreq+0x58>)
 800b556:	681b      	ldr	r3, [r3, #0]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	58024400 	.word	0x58024400
 800b564:	08010d30 	.word	0x08010d30
 800b568:	24000048 	.word	0x24000048
 800b56c:	24000044 	.word	0x24000044

0800b570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b574:	f7ff ffcc 	bl	800b510 <HAL_RCC_GetHCLKFreq>
 800b578:	4602      	mov	r2, r0
 800b57a:	4b06      	ldr	r3, [pc, #24]	; (800b594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b57c:	69db      	ldr	r3, [r3, #28]
 800b57e:	091b      	lsrs	r3, r3, #4
 800b580:	f003 0307 	and.w	r3, r3, #7
 800b584:	4904      	ldr	r1, [pc, #16]	; (800b598 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b586:	5ccb      	ldrb	r3, [r1, r3]
 800b588:	f003 031f 	and.w	r3, r3, #31
 800b58c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b590:	4618      	mov	r0, r3
 800b592:	bd80      	pop	{r7, pc}
 800b594:	58024400 	.word	0x58024400
 800b598:	08010d30 	.word	0x08010d30

0800b59c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b5a0:	f7ff ffb6 	bl	800b510 <HAL_RCC_GetHCLKFreq>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	4b06      	ldr	r3, [pc, #24]	; (800b5c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b5a8:	69db      	ldr	r3, [r3, #28]
 800b5aa:	0a1b      	lsrs	r3, r3, #8
 800b5ac:	f003 0307 	and.w	r3, r3, #7
 800b5b0:	4904      	ldr	r1, [pc, #16]	; (800b5c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b5b2:	5ccb      	ldrb	r3, [r1, r3]
 800b5b4:	f003 031f 	and.w	r3, r3, #31
 800b5b8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	58024400 	.word	0x58024400
 800b5c4:	08010d30 	.word	0x08010d30

0800b5c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5cc:	b0c8      	sub	sp, #288	; 0x120
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b5da:	2300      	movs	r3, #0
 800b5dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b5e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b5ec:	2500      	movs	r5, #0
 800b5ee:	ea54 0305 	orrs.w	r3, r4, r5
 800b5f2:	d049      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b5f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b5fe:	d02f      	beq.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b600:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b604:	d828      	bhi.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b60a:	d01a      	beq.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b60c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b610:	d822      	bhi.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b612:	2b00      	cmp	r3, #0
 800b614:	d003      	beq.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b61a:	d007      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b61c:	e01c      	b.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b61e:	4ba7      	ldr	r3, [pc, #668]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b622:	4aa6      	ldr	r2, [pc, #664]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b628:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b62a:	e01a      	b.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b62c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b630:	3308      	adds	r3, #8
 800b632:	2102      	movs	r1, #2
 800b634:	4618      	mov	r0, r3
 800b636:	f001 fc43 	bl	800cec0 <RCCEx_PLL2_Config>
 800b63a:	4603      	mov	r3, r0
 800b63c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b640:	e00f      	b.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b646:	3328      	adds	r3, #40	; 0x28
 800b648:	2102      	movs	r1, #2
 800b64a:	4618      	mov	r0, r3
 800b64c:	f001 fcea 	bl	800d024 <RCCEx_PLL3_Config>
 800b650:	4603      	mov	r3, r0
 800b652:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b656:	e004      	b.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b65e:	e000      	b.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b660:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b662:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b666:	2b00      	cmp	r3, #0
 800b668:	d10a      	bne.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b66a:	4b94      	ldr	r3, [pc, #592]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b66c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b66e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b678:	4a90      	ldr	r2, [pc, #576]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b67a:	430b      	orrs	r3, r1
 800b67c:	6513      	str	r3, [r2, #80]	; 0x50
 800b67e:	e003      	b.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b680:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b684:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b690:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b694:	f04f 0900 	mov.w	r9, #0
 800b698:	ea58 0309 	orrs.w	r3, r8, r9
 800b69c:	d047      	beq.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b69e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6a4:	2b04      	cmp	r3, #4
 800b6a6:	d82a      	bhi.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b6a8:	a201      	add	r2, pc, #4	; (adr r2, 800b6b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ae:	bf00      	nop
 800b6b0:	0800b6c5 	.word	0x0800b6c5
 800b6b4:	0800b6d3 	.word	0x0800b6d3
 800b6b8:	0800b6e9 	.word	0x0800b6e9
 800b6bc:	0800b707 	.word	0x0800b707
 800b6c0:	0800b707 	.word	0x0800b707
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6c4:	4b7d      	ldr	r3, [pc, #500]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c8:	4a7c      	ldr	r2, [pc, #496]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6d0:	e01a      	b.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6d6:	3308      	adds	r3, #8
 800b6d8:	2100      	movs	r1, #0
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f001 fbf0 	bl	800cec0 <RCCEx_PLL2_Config>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6e6:	e00f      	b.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b6e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6ec:	3328      	adds	r3, #40	; 0x28
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f001 fc97 	bl	800d024 <RCCEx_PLL3_Config>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6fc:	e004      	b.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b704:	e000      	b.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b706:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b708:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d10a      	bne.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b710:	4b6a      	ldr	r3, [pc, #424]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b714:	f023 0107 	bic.w	r1, r3, #7
 800b718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b71c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b71e:	4a67      	ldr	r2, [pc, #412]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b720:	430b      	orrs	r3, r1
 800b722:	6513      	str	r3, [r2, #80]	; 0x50
 800b724:	e003      	b.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b726:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b72a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b72e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b736:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b73a:	f04f 0b00 	mov.w	fp, #0
 800b73e:	ea5a 030b 	orrs.w	r3, sl, fp
 800b742:	d054      	beq.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b74a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b74e:	d036      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b750:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b754:	d82f      	bhi.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b75a:	d032      	beq.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b75c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b760:	d829      	bhi.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b762:	2bc0      	cmp	r3, #192	; 0xc0
 800b764:	d02f      	beq.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b766:	2bc0      	cmp	r3, #192	; 0xc0
 800b768:	d825      	bhi.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b76a:	2b80      	cmp	r3, #128	; 0x80
 800b76c:	d018      	beq.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b76e:	2b80      	cmp	r3, #128	; 0x80
 800b770:	d821      	bhi.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b772:	2b00      	cmp	r3, #0
 800b774:	d002      	beq.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b776:	2b40      	cmp	r3, #64	; 0x40
 800b778:	d007      	beq.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b77a:	e01c      	b.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b77c:	4b4f      	ldr	r3, [pc, #316]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b780:	4a4e      	ldr	r2, [pc, #312]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b786:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b788:	e01e      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b78a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b78e:	3308      	adds	r3, #8
 800b790:	2100      	movs	r1, #0
 800b792:	4618      	mov	r0, r3
 800b794:	f001 fb94 	bl	800cec0 <RCCEx_PLL2_Config>
 800b798:	4603      	mov	r3, r0
 800b79a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b79e:	e013      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7a4:	3328      	adds	r3, #40	; 0x28
 800b7a6:	2100      	movs	r1, #0
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f001 fc3b 	bl	800d024 <RCCEx_PLL3_Config>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b7b4:	e008      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b7bc:	e004      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b7be:	bf00      	nop
 800b7c0:	e002      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b7c2:	bf00      	nop
 800b7c4:	e000      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b7c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7c8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10a      	bne.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b7d0:	4b3a      	ldr	r3, [pc, #232]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b7d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7de:	4a37      	ldr	r2, [pc, #220]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7e0:	430b      	orrs	r3, r1
 800b7e2:	6513      	str	r3, [r2, #80]	; 0x50
 800b7e4:	e003      	b.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b7ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b7fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b7fe:	2300      	movs	r3, #0
 800b800:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b804:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b808:	460b      	mov	r3, r1
 800b80a:	4313      	orrs	r3, r2
 800b80c:	d05c      	beq.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b80e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b814:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b818:	d03b      	beq.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b81a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b81e:	d834      	bhi.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b824:	d037      	beq.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b82a:	d82e      	bhi.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b82c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b830:	d033      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b832:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b836:	d828      	bhi.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b83c:	d01a      	beq.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b83e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b842:	d822      	bhi.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b844:	2b00      	cmp	r3, #0
 800b846:	d003      	beq.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b84c:	d007      	beq.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b84e:	e01c      	b.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b850:	4b1a      	ldr	r3, [pc, #104]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b854:	4a19      	ldr	r2, [pc, #100]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b85a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b85c:	e01e      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b85e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b862:	3308      	adds	r3, #8
 800b864:	2100      	movs	r1, #0
 800b866:	4618      	mov	r0, r3
 800b868:	f001 fb2a 	bl	800cec0 <RCCEx_PLL2_Config>
 800b86c:	4603      	mov	r3, r0
 800b86e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b872:	e013      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b878:	3328      	adds	r3, #40	; 0x28
 800b87a:	2100      	movs	r1, #0
 800b87c:	4618      	mov	r0, r3
 800b87e:	f001 fbd1 	bl	800d024 <RCCEx_PLL3_Config>
 800b882:	4603      	mov	r3, r0
 800b884:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b888:	e008      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b890:	e004      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b892:	bf00      	nop
 800b894:	e002      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b896:	bf00      	nop
 800b898:	e000      	b.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b89a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b89c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10d      	bne.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b8a4:	4b05      	ldr	r3, [pc, #20]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8a8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800b8ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8b2:	4a02      	ldr	r2, [pc, #8]	; (800b8bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8b4:	430b      	orrs	r3, r1
 800b8b6:	6513      	str	r3, [r2, #80]	; 0x50
 800b8b8:	e006      	b.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b8ba:	bf00      	nop
 800b8bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b8c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b8d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b8d8:	2300      	movs	r3, #0
 800b8da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	d03a      	beq.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b8e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8ee:	2b30      	cmp	r3, #48	; 0x30
 800b8f0:	d01f      	beq.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b8f2:	2b30      	cmp	r3, #48	; 0x30
 800b8f4:	d819      	bhi.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b8f6:	2b20      	cmp	r3, #32
 800b8f8:	d00c      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b8fa:	2b20      	cmp	r3, #32
 800b8fc:	d815      	bhi.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d019      	beq.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b902:	2b10      	cmp	r3, #16
 800b904:	d111      	bne.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b906:	4bae      	ldr	r3, [pc, #696]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b90a:	4aad      	ldr	r2, [pc, #692]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b90c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b910:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b912:	e011      	b.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b918:	3308      	adds	r3, #8
 800b91a:	2102      	movs	r1, #2
 800b91c:	4618      	mov	r0, r3
 800b91e:	f001 facf 	bl	800cec0 <RCCEx_PLL2_Config>
 800b922:	4603      	mov	r3, r0
 800b924:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b928:	e006      	b.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b930:	e002      	b.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b932:	bf00      	nop
 800b934:	e000      	b.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b936:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b938:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d10a      	bne.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b940:	4b9f      	ldr	r3, [pc, #636]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b944:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b94c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b94e:	4a9c      	ldr	r2, [pc, #624]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b950:	430b      	orrs	r3, r1
 800b952:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b954:	e003      	b.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b956:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b95a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b95e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b966:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b96a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b96e:	2300      	movs	r3, #0
 800b970:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b974:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b978:	460b      	mov	r3, r1
 800b97a:	4313      	orrs	r3, r2
 800b97c:	d051      	beq.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b97e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b984:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b988:	d035      	beq.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b98a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b98e:	d82e      	bhi.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b990:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b994:	d031      	beq.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b996:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b99a:	d828      	bhi.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b99c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9a0:	d01a      	beq.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b9a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9a6:	d822      	bhi.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d003      	beq.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800b9ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9b0:	d007      	beq.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800b9b2:	e01c      	b.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9b4:	4b82      	ldr	r3, [pc, #520]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b8:	4a81      	ldr	r2, [pc, #516]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b9c0:	e01c      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9c6:	3308      	adds	r3, #8
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f001 fa78 	bl	800cec0 <RCCEx_PLL2_Config>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b9d6:	e011      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9dc:	3328      	adds	r3, #40	; 0x28
 800b9de:	2100      	movs	r1, #0
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f001 fb1f 	bl	800d024 <RCCEx_PLL3_Config>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b9ec:	e006      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b9f4:	e002      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b9f6:	bf00      	nop
 800b9f8:	e000      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b9fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d10a      	bne.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ba04:	4b6e      	ldr	r3, [pc, #440]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba08:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ba0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba12:	4a6b      	ldr	r2, [pc, #428]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba14:	430b      	orrs	r3, r1
 800ba16:	6513      	str	r3, [r2, #80]	; 0x50
 800ba18:	e003      	b.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba1e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ba22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ba2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ba32:	2300      	movs	r3, #0
 800ba34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ba38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	d053      	beq.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ba42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba4c:	d033      	beq.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800ba4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba52:	d82c      	bhi.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ba58:	d02f      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800ba5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ba5e:	d826      	bhi.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba64:	d02b      	beq.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba6a:	d820      	bhi.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba70:	d012      	beq.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ba72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba76:	d81a      	bhi.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d022      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800ba7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba80:	d115      	bne.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba86:	3308      	adds	r3, #8
 800ba88:	2101      	movs	r1, #1
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f001 fa18 	bl	800cec0 <RCCEx_PLL2_Config>
 800ba90:	4603      	mov	r3, r0
 800ba92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ba96:	e015      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba9c:	3328      	adds	r3, #40	; 0x28
 800ba9e:	2101      	movs	r1, #1
 800baa0:	4618      	mov	r0, r3
 800baa2:	f001 fabf 	bl	800d024 <RCCEx_PLL3_Config>
 800baa6:	4603      	mov	r3, r0
 800baa8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800baac:	e00a      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bab4:	e006      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bab6:	bf00      	nop
 800bab8:	e004      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800baba:	bf00      	nop
 800babc:	e002      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800babe:	bf00      	nop
 800bac0:	e000      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bac4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d10a      	bne.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bacc:	4b3c      	ldr	r3, [pc, #240]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bad0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800bad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bada:	4a39      	ldr	r2, [pc, #228]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800badc:	430b      	orrs	r3, r1
 800bade:	6513      	str	r3, [r2, #80]	; 0x50
 800bae0:	e003      	b.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bae6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800baea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800baee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800baf6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bafa:	2300      	movs	r3, #0
 800bafc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bb00:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800bb04:	460b      	mov	r3, r1
 800bb06:	4313      	orrs	r3, r2
 800bb08:	d060      	beq.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bb0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bb12:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800bb16:	d039      	beq.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800bb18:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800bb1c:	d832      	bhi.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb22:	d035      	beq.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bb24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb28:	d82c      	bhi.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb2e:	d031      	beq.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bb30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb34:	d826      	bhi.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb3a:	d02d      	beq.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bb3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb40:	d820      	bhi.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb46:	d012      	beq.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bb48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb4c:	d81a      	bhi.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d024      	beq.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bb52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb56:	d115      	bne.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb5c:	3308      	adds	r3, #8
 800bb5e:	2101      	movs	r1, #1
 800bb60:	4618      	mov	r0, r3
 800bb62:	f001 f9ad 	bl	800cec0 <RCCEx_PLL2_Config>
 800bb66:	4603      	mov	r3, r0
 800bb68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bb6c:	e017      	b.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb72:	3328      	adds	r3, #40	; 0x28
 800bb74:	2101      	movs	r1, #1
 800bb76:	4618      	mov	r0, r3
 800bb78:	f001 fa54 	bl	800d024 <RCCEx_PLL3_Config>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bb82:	e00c      	b.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bb8a:	e008      	b.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb8c:	bf00      	nop
 800bb8e:	e006      	b.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb90:	bf00      	nop
 800bb92:	e004      	b.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb94:	bf00      	nop
 800bb96:	e002      	b.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb98:	bf00      	nop
 800bb9a:	e000      	b.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d10e      	bne.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bba6:	4b06      	ldr	r3, [pc, #24]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbaa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bbae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bbb6:	4a02      	ldr	r2, [pc, #8]	; (800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbb8:	430b      	orrs	r3, r1
 800bbba:	6593      	str	r3, [r2, #88]	; 0x58
 800bbbc:	e006      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bbbe:	bf00      	nop
 800bbc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbc8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bbcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bbd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bbe2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	d037      	beq.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bbec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbf6:	d00e      	beq.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bbf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbfc:	d816      	bhi.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d018      	beq.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bc02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc06:	d111      	bne.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc08:	4bc4      	ldr	r3, [pc, #784]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0c:	4ac3      	ldr	r2, [pc, #780]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc14:	e00f      	b.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc1a:	3308      	adds	r3, #8
 800bc1c:	2101      	movs	r1, #1
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f001 f94e 	bl	800cec0 <RCCEx_PLL2_Config>
 800bc24:	4603      	mov	r3, r0
 800bc26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc2a:	e004      	b.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bc32:	e000      	b.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bc34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d10a      	bne.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bc3e:	4bb7      	ldr	r3, [pc, #732]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc42:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bc46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc4c:	4ab3      	ldr	r2, [pc, #716]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc4e:	430b      	orrs	r3, r1
 800bc50:	6513      	str	r3, [r2, #80]	; 0x50
 800bc52:	e003      	b.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bc5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc64:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bc68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bc72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bc76:	460b      	mov	r3, r1
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	d039      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bc7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc82:	2b03      	cmp	r3, #3
 800bc84:	d81c      	bhi.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bc86:	a201      	add	r2, pc, #4	; (adr r2, 800bc8c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc8c:	0800bcc9 	.word	0x0800bcc9
 800bc90:	0800bc9d 	.word	0x0800bc9d
 800bc94:	0800bcab 	.word	0x0800bcab
 800bc98:	0800bcc9 	.word	0x0800bcc9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc9c:	4b9f      	ldr	r3, [pc, #636]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca0:	4a9e      	ldr	r2, [pc, #632]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bca6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bca8:	e00f      	b.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bcaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcae:	3308      	adds	r3, #8
 800bcb0:	2102      	movs	r1, #2
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f001 f904 	bl	800cec0 <RCCEx_PLL2_Config>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bcbe:	e004      	b.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bcc6:	e000      	b.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bcc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10a      	bne.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bcd2:	4b92      	ldr	r3, [pc, #584]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcd6:	f023 0103 	bic.w	r1, r3, #3
 800bcda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bce0:	4a8e      	ldr	r2, [pc, #568]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bce2:	430b      	orrs	r3, r1
 800bce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bce6:	e003      	b.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bce8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bcec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bcf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bcfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd00:	2300      	movs	r3, #0
 800bd02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bd06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	f000 8099 	beq.w	800be44 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bd12:	4b83      	ldr	r3, [pc, #524]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a82      	ldr	r2, [pc, #520]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bd1e:	f7f8 fb83 	bl	8004428 <HAL_GetTick>
 800bd22:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd26:	e00b      	b.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd28:	f7f8 fb7e 	bl	8004428 <HAL_GetTick>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bd32:	1ad3      	subs	r3, r2, r3
 800bd34:	2b64      	cmp	r3, #100	; 0x64
 800bd36:	d903      	bls.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bd38:	2303      	movs	r3, #3
 800bd3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bd3e:	e005      	b.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd40:	4b77      	ldr	r3, [pc, #476]	; (800bf20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d0ed      	beq.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bd4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d173      	bne.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bd54:	4b71      	ldr	r3, [pc, #452]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bd58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd60:	4053      	eors	r3, r2
 800bd62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d015      	beq.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bd6a:	4b6c      	ldr	r3, [pc, #432]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bd76:	4b69      	ldr	r3, [pc, #420]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd7a:	4a68      	ldr	r2, [pc, #416]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd80:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bd82:	4b66      	ldr	r3, [pc, #408]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd86:	4a65      	ldr	r2, [pc, #404]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd8c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bd8e:	4a63      	ldr	r2, [pc, #396]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd94:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bd96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bda2:	d118      	bne.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bda4:	f7f8 fb40 	bl	8004428 <HAL_GetTick>
 800bda8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bdac:	e00d      	b.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bdae:	f7f8 fb3b 	bl	8004428 <HAL_GetTick>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bdb8:	1ad2      	subs	r2, r2, r3
 800bdba:	f241 3388 	movw	r3, #5000	; 0x1388
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d903      	bls.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800bdc8:	e005      	b.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bdca:	4b54      	ldr	r3, [pc, #336]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdce:	f003 0302 	and.w	r3, r3, #2
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d0eb      	beq.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bdd6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d129      	bne.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bdde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bde2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bde6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bdea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdee:	d10e      	bne.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bdf0:	4b4a      	ldr	r3, [pc, #296]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bdf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800be00:	091a      	lsrs	r2, r3, #4
 800be02:	4b48      	ldr	r3, [pc, #288]	; (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800be04:	4013      	ands	r3, r2
 800be06:	4a45      	ldr	r2, [pc, #276]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be08:	430b      	orrs	r3, r1
 800be0a:	6113      	str	r3, [r2, #16]
 800be0c:	e005      	b.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800be0e:	4b43      	ldr	r3, [pc, #268]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be10:	691b      	ldr	r3, [r3, #16]
 800be12:	4a42      	ldr	r2, [pc, #264]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be14:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800be18:	6113      	str	r3, [r2, #16]
 800be1a:	4b40      	ldr	r3, [pc, #256]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be1c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800be1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800be26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be2a:	4a3c      	ldr	r2, [pc, #240]	; (800bf1c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be2c:	430b      	orrs	r3, r1
 800be2e:	6713      	str	r3, [r2, #112]	; 0x70
 800be30:	e008      	b.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800be32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be36:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800be3a:	e003      	b.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be3c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800be44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4c:	f002 0301 	and.w	r3, r2, #1
 800be50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be54:	2300      	movs	r3, #0
 800be56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be5a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800be5e:	460b      	mov	r3, r1
 800be60:	4313      	orrs	r3, r2
 800be62:	f000 8090 	beq.w	800bf86 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800be66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be6e:	2b28      	cmp	r3, #40	; 0x28
 800be70:	d870      	bhi.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800be72:	a201      	add	r2, pc, #4	; (adr r2, 800be78 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800be74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be78:	0800bf5d 	.word	0x0800bf5d
 800be7c:	0800bf55 	.word	0x0800bf55
 800be80:	0800bf55 	.word	0x0800bf55
 800be84:	0800bf55 	.word	0x0800bf55
 800be88:	0800bf55 	.word	0x0800bf55
 800be8c:	0800bf55 	.word	0x0800bf55
 800be90:	0800bf55 	.word	0x0800bf55
 800be94:	0800bf55 	.word	0x0800bf55
 800be98:	0800bf29 	.word	0x0800bf29
 800be9c:	0800bf55 	.word	0x0800bf55
 800bea0:	0800bf55 	.word	0x0800bf55
 800bea4:	0800bf55 	.word	0x0800bf55
 800bea8:	0800bf55 	.word	0x0800bf55
 800beac:	0800bf55 	.word	0x0800bf55
 800beb0:	0800bf55 	.word	0x0800bf55
 800beb4:	0800bf55 	.word	0x0800bf55
 800beb8:	0800bf3f 	.word	0x0800bf3f
 800bebc:	0800bf55 	.word	0x0800bf55
 800bec0:	0800bf55 	.word	0x0800bf55
 800bec4:	0800bf55 	.word	0x0800bf55
 800bec8:	0800bf55 	.word	0x0800bf55
 800becc:	0800bf55 	.word	0x0800bf55
 800bed0:	0800bf55 	.word	0x0800bf55
 800bed4:	0800bf55 	.word	0x0800bf55
 800bed8:	0800bf5d 	.word	0x0800bf5d
 800bedc:	0800bf55 	.word	0x0800bf55
 800bee0:	0800bf55 	.word	0x0800bf55
 800bee4:	0800bf55 	.word	0x0800bf55
 800bee8:	0800bf55 	.word	0x0800bf55
 800beec:	0800bf55 	.word	0x0800bf55
 800bef0:	0800bf55 	.word	0x0800bf55
 800bef4:	0800bf55 	.word	0x0800bf55
 800bef8:	0800bf5d 	.word	0x0800bf5d
 800befc:	0800bf55 	.word	0x0800bf55
 800bf00:	0800bf55 	.word	0x0800bf55
 800bf04:	0800bf55 	.word	0x0800bf55
 800bf08:	0800bf55 	.word	0x0800bf55
 800bf0c:	0800bf55 	.word	0x0800bf55
 800bf10:	0800bf55 	.word	0x0800bf55
 800bf14:	0800bf55 	.word	0x0800bf55
 800bf18:	0800bf5d 	.word	0x0800bf5d
 800bf1c:	58024400 	.word	0x58024400
 800bf20:	58024800 	.word	0x58024800
 800bf24:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf2c:	3308      	adds	r3, #8
 800bf2e:	2101      	movs	r1, #1
 800bf30:	4618      	mov	r0, r3
 800bf32:	f000 ffc5 	bl	800cec0 <RCCEx_PLL2_Config>
 800bf36:	4603      	mov	r3, r0
 800bf38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bf3c:	e00f      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf42:	3328      	adds	r3, #40	; 0x28
 800bf44:	2101      	movs	r1, #1
 800bf46:	4618      	mov	r0, r3
 800bf48:	f001 f86c 	bl	800d024 <RCCEx_PLL3_Config>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bf52:	e004      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf54:	2301      	movs	r3, #1
 800bf56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bf5a:	e000      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bf5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d10b      	bne.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bf66:	4bc0      	ldr	r3, [pc, #768]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf6a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bf6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf76:	4abc      	ldr	r2, [pc, #752]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf78:	430b      	orrs	r3, r1
 800bf7a:	6553      	str	r3, [r2, #84]	; 0x54
 800bf7c:	e003      	b.n	800bf86 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf82:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bf86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8e:	f002 0302 	and.w	r3, r2, #2
 800bf92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf96:	2300      	movs	r3, #0
 800bf98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bf9c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	d043      	beq.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bfa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfae:	2b05      	cmp	r3, #5
 800bfb0:	d824      	bhi.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800bfb2:	a201      	add	r2, pc, #4	; (adr r2, 800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800bfb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb8:	0800c005 	.word	0x0800c005
 800bfbc:	0800bfd1 	.word	0x0800bfd1
 800bfc0:	0800bfe7 	.word	0x0800bfe7
 800bfc4:	0800c005 	.word	0x0800c005
 800bfc8:	0800c005 	.word	0x0800c005
 800bfcc:	0800c005 	.word	0x0800c005
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfd4:	3308      	adds	r3, #8
 800bfd6:	2101      	movs	r1, #1
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f000 ff71 	bl	800cec0 <RCCEx_PLL2_Config>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bfe4:	e00f      	b.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bfe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfea:	3328      	adds	r3, #40	; 0x28
 800bfec:	2101      	movs	r1, #1
 800bfee:	4618      	mov	r0, r3
 800bff0:	f001 f818 	bl	800d024 <RCCEx_PLL3_Config>
 800bff4:	4603      	mov	r3, r0
 800bff6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bffa:	e004      	b.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c002:	e000      	b.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800c004:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c006:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10b      	bne.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c00e:	4b96      	ldr	r3, [pc, #600]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c012:	f023 0107 	bic.w	r1, r3, #7
 800c016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c01a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c01e:	4a92      	ldr	r2, [pc, #584]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c020:	430b      	orrs	r3, r1
 800c022:	6553      	str	r3, [r2, #84]	; 0x54
 800c024:	e003      	b.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c026:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c02a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c02e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c036:	f002 0304 	and.w	r3, r2, #4
 800c03a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c03e:	2300      	movs	r3, #0
 800c040:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c044:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c048:	460b      	mov	r3, r1
 800c04a:	4313      	orrs	r3, r2
 800c04c:	d043      	beq.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c04e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c052:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c056:	2b05      	cmp	r3, #5
 800c058:	d824      	bhi.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800c05a:	a201      	add	r2, pc, #4	; (adr r2, 800c060 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800c05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c060:	0800c0ad 	.word	0x0800c0ad
 800c064:	0800c079 	.word	0x0800c079
 800c068:	0800c08f 	.word	0x0800c08f
 800c06c:	0800c0ad 	.word	0x0800c0ad
 800c070:	0800c0ad 	.word	0x0800c0ad
 800c074:	0800c0ad 	.word	0x0800c0ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c078:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c07c:	3308      	adds	r3, #8
 800c07e:	2101      	movs	r1, #1
 800c080:	4618      	mov	r0, r3
 800c082:	f000 ff1d 	bl	800cec0 <RCCEx_PLL2_Config>
 800c086:	4603      	mov	r3, r0
 800c088:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c08c:	e00f      	b.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c08e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c092:	3328      	adds	r3, #40	; 0x28
 800c094:	2101      	movs	r1, #1
 800c096:	4618      	mov	r0, r3
 800c098:	f000 ffc4 	bl	800d024 <RCCEx_PLL3_Config>
 800c09c:	4603      	mov	r3, r0
 800c09e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c0a2:	e004      	b.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c0aa:	e000      	b.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800c0ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d10b      	bne.n	800c0ce <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c0b6:	4b6c      	ldr	r3, [pc, #432]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0ba:	f023 0107 	bic.w	r1, r3, #7
 800c0be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c0c6:	4a68      	ldr	r2, [pc, #416]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c0c8:	430b      	orrs	r3, r1
 800c0ca:	6593      	str	r3, [r2, #88]	; 0x58
 800c0cc:	e003      	b.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c0d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0de:	f002 0320 	and.w	r3, r2, #32
 800c0e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c0ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	d055      	beq.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c0f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c0fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c102:	d033      	beq.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c108:	d82c      	bhi.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c10a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c10e:	d02f      	beq.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c114:	d826      	bhi.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c116:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c11a:	d02b      	beq.n	800c174 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c11c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c120:	d820      	bhi.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c126:	d012      	beq.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c12c:	d81a      	bhi.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d022      	beq.n	800c178 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c136:	d115      	bne.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c13c:	3308      	adds	r3, #8
 800c13e:	2100      	movs	r1, #0
 800c140:	4618      	mov	r0, r3
 800c142:	f000 febd 	bl	800cec0 <RCCEx_PLL2_Config>
 800c146:	4603      	mov	r3, r0
 800c148:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c14c:	e015      	b.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c14e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c152:	3328      	adds	r3, #40	; 0x28
 800c154:	2102      	movs	r1, #2
 800c156:	4618      	mov	r0, r3
 800c158:	f000 ff64 	bl	800d024 <RCCEx_PLL3_Config>
 800c15c:	4603      	mov	r3, r0
 800c15e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c162:	e00a      	b.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c164:	2301      	movs	r3, #1
 800c166:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c16a:	e006      	b.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c16c:	bf00      	nop
 800c16e:	e004      	b.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c170:	bf00      	nop
 800c172:	e002      	b.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c174:	bf00      	nop
 800c176:	e000      	b.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c17a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d10b      	bne.n	800c19a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c182:	4b39      	ldr	r3, [pc, #228]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c186:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c18a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c18e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c192:	4a35      	ldr	r2, [pc, #212]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c194:	430b      	orrs	r3, r1
 800c196:	6553      	str	r3, [r2, #84]	; 0x54
 800c198:	e003      	b.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c19a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c19e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c1a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1aa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c1ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c1b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c1bc:	460b      	mov	r3, r1
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	d058      	beq.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c1c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c1ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c1ce:	d033      	beq.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c1d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c1d4:	d82c      	bhi.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c1d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1da:	d02f      	beq.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c1dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1e0:	d826      	bhi.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c1e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c1e6:	d02b      	beq.n	800c240 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c1e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c1ec:	d820      	bhi.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c1ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1f2:	d012      	beq.n	800c21a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c1f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1f8:	d81a      	bhi.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d022      	beq.n	800c244 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c1fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c202:	d115      	bne.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c204:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c208:	3308      	adds	r3, #8
 800c20a:	2100      	movs	r1, #0
 800c20c:	4618      	mov	r0, r3
 800c20e:	f000 fe57 	bl	800cec0 <RCCEx_PLL2_Config>
 800c212:	4603      	mov	r3, r0
 800c214:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c218:	e015      	b.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c21a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c21e:	3328      	adds	r3, #40	; 0x28
 800c220:	2102      	movs	r1, #2
 800c222:	4618      	mov	r0, r3
 800c224:	f000 fefe 	bl	800d024 <RCCEx_PLL3_Config>
 800c228:	4603      	mov	r3, r0
 800c22a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c22e:	e00a      	b.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c230:	2301      	movs	r3, #1
 800c232:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c236:	e006      	b.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c238:	bf00      	nop
 800c23a:	e004      	b.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c23c:	bf00      	nop
 800c23e:	e002      	b.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c240:	bf00      	nop
 800c242:	e000      	b.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c244:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c246:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d10e      	bne.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c24e:	4b06      	ldr	r3, [pc, #24]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c252:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c25a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c25e:	4a02      	ldr	r2, [pc, #8]	; (800c268 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c260:	430b      	orrs	r3, r1
 800c262:	6593      	str	r3, [r2, #88]	; 0x58
 800c264:	e006      	b.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c266:	bf00      	nop
 800c268:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c26c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c270:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c274:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c284:	2300      	movs	r3, #0
 800c286:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c28a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c28e:	460b      	mov	r3, r1
 800c290:	4313      	orrs	r3, r2
 800c292:	d055      	beq.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c298:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c29c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c2a0:	d033      	beq.n	800c30a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c2a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c2a6:	d82c      	bhi.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c2a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2ac:	d02f      	beq.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c2ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2b2:	d826      	bhi.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c2b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c2b8:	d02b      	beq.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c2ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c2be:	d820      	bhi.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c2c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2c4:	d012      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c2c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2ca:	d81a      	bhi.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d022      	beq.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c2d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2d4:	d115      	bne.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2da:	3308      	adds	r3, #8
 800c2dc:	2100      	movs	r1, #0
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f000 fdee 	bl	800cec0 <RCCEx_PLL2_Config>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c2ea:	e015      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2f0:	3328      	adds	r3, #40	; 0x28
 800c2f2:	2102      	movs	r1, #2
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f000 fe95 	bl	800d024 <RCCEx_PLL3_Config>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c300:	e00a      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c302:	2301      	movs	r3, #1
 800c304:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c308:	e006      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c30a:	bf00      	nop
 800c30c:	e004      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c30e:	bf00      	nop
 800c310:	e002      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c312:	bf00      	nop
 800c314:	e000      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c316:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c318:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10b      	bne.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c320:	4ba1      	ldr	r3, [pc, #644]	; (800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c324:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c32c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c330:	4a9d      	ldr	r2, [pc, #628]	; (800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c332:	430b      	orrs	r3, r1
 800c334:	6593      	str	r3, [r2, #88]	; 0x58
 800c336:	e003      	b.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c338:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c33c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c348:	f002 0308 	and.w	r3, r2, #8
 800c34c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c350:	2300      	movs	r3, #0
 800c352:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c356:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c35a:	460b      	mov	r3, r1
 800c35c:	4313      	orrs	r3, r2
 800c35e:	d01e      	beq.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c360:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c36c:	d10c      	bne.n	800c388 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c36e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c372:	3328      	adds	r3, #40	; 0x28
 800c374:	2102      	movs	r1, #2
 800c376:	4618      	mov	r0, r3
 800c378:	f000 fe54 	bl	800d024 <RCCEx_PLL3_Config>
 800c37c:	4603      	mov	r3, r0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d002      	beq.n	800c388 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c382:	2301      	movs	r3, #1
 800c384:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c388:	4b87      	ldr	r3, [pc, #540]	; (800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c38a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c38c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c398:	4a83      	ldr	r2, [pc, #524]	; (800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c39a:	430b      	orrs	r3, r1
 800c39c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c39e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a6:	f002 0310 	and.w	r3, r2, #16
 800c3aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c3b4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	d01e      	beq.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c3be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c3c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3ca:	d10c      	bne.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c3cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3d0:	3328      	adds	r3, #40	; 0x28
 800c3d2:	2102      	movs	r1, #2
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f000 fe25 	bl	800d024 <RCCEx_PLL3_Config>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d002      	beq.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c3e6:	4b70      	ldr	r3, [pc, #448]	; (800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c3ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c3f6:	4a6c      	ldr	r2, [pc, #432]	; (800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c3f8:	430b      	orrs	r3, r1
 800c3fa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c3fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c404:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c408:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c40c:	2300      	movs	r3, #0
 800c40e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c412:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c416:	460b      	mov	r3, r1
 800c418:	4313      	orrs	r3, r2
 800c41a:	d03e      	beq.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c41c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c420:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c428:	d022      	beq.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c42a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c42e:	d81b      	bhi.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c430:	2b00      	cmp	r3, #0
 800c432:	d003      	beq.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c438:	d00b      	beq.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c43a:	e015      	b.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c43c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c440:	3308      	adds	r3, #8
 800c442:	2100      	movs	r1, #0
 800c444:	4618      	mov	r0, r3
 800c446:	f000 fd3b 	bl	800cec0 <RCCEx_PLL2_Config>
 800c44a:	4603      	mov	r3, r0
 800c44c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c450:	e00f      	b.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c452:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c456:	3328      	adds	r3, #40	; 0x28
 800c458:	2102      	movs	r1, #2
 800c45a:	4618      	mov	r0, r3
 800c45c:	f000 fde2 	bl	800d024 <RCCEx_PLL3_Config>
 800c460:	4603      	mov	r3, r0
 800c462:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c466:	e004      	b.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c468:	2301      	movs	r3, #1
 800c46a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c46e:	e000      	b.n	800c472 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c470:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c472:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c476:	2b00      	cmp	r3, #0
 800c478:	d10b      	bne.n	800c492 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c47a:	4b4b      	ldr	r3, [pc, #300]	; (800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c47c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c47e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c486:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c48a:	4a47      	ldr	r2, [pc, #284]	; (800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c48c:	430b      	orrs	r3, r1
 800c48e:	6593      	str	r3, [r2, #88]	; 0x58
 800c490:	e003      	b.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c492:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c496:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c49a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c4a6:	67bb      	str	r3, [r7, #120]	; 0x78
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c4ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	d03b      	beq.n	800c52e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c4b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c4c2:	d01f      	beq.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c4c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c4c8:	d818      	bhi.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c4ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4ce:	d003      	beq.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c4d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c4d4:	d007      	beq.n	800c4e6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c4d6:	e011      	b.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4d8:	4b33      	ldr	r3, [pc, #204]	; (800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4dc:	4a32      	ldr	r2, [pc, #200]	; (800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c4e4:	e00f      	b.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4ea:	3328      	adds	r3, #40	; 0x28
 800c4ec:	2101      	movs	r1, #1
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f000 fd98 	bl	800d024 <RCCEx_PLL3_Config>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c4fa:	e004      	b.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c502:	e000      	b.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c504:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c506:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10b      	bne.n	800c526 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c50e:	4b26      	ldr	r3, [pc, #152]	; (800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c512:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c51a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c51e:	4a22      	ldr	r2, [pc, #136]	; (800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c520:	430b      	orrs	r3, r1
 800c522:	6553      	str	r3, [r2, #84]	; 0x54
 800c524:	e003      	b.n	800c52e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c526:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c52a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c52e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c536:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c53a:	673b      	str	r3, [r7, #112]	; 0x70
 800c53c:	2300      	movs	r3, #0
 800c53e:	677b      	str	r3, [r7, #116]	; 0x74
 800c540:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c544:	460b      	mov	r3, r1
 800c546:	4313      	orrs	r3, r2
 800c548:	d034      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c54a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c54e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c550:	2b00      	cmp	r3, #0
 800c552:	d003      	beq.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c558:	d007      	beq.n	800c56a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c55a:	e011      	b.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c55c:	4b12      	ldr	r3, [pc, #72]	; (800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c560:	4a11      	ldr	r2, [pc, #68]	; (800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c568:	e00e      	b.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c56a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c56e:	3308      	adds	r3, #8
 800c570:	2102      	movs	r1, #2
 800c572:	4618      	mov	r0, r3
 800c574:	f000 fca4 	bl	800cec0 <RCCEx_PLL2_Config>
 800c578:	4603      	mov	r3, r0
 800c57a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c57e:	e003      	b.n	800c588 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c580:	2301      	movs	r3, #1
 800c582:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c586:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c588:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d10d      	bne.n	800c5ac <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c590:	4b05      	ldr	r3, [pc, #20]	; (800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c594:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c598:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c59c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c59e:	4a02      	ldr	r2, [pc, #8]	; (800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5a0:	430b      	orrs	r3, r1
 800c5a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c5a4:	e006      	b.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c5a6:	bf00      	nop
 800c5a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c5b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5bc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c5c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c5c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	d00c      	beq.n	800c5ea <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c5d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5d4:	3328      	adds	r3, #40	; 0x28
 800c5d6:	2102      	movs	r1, #2
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f000 fd23 	bl	800d024 <RCCEx_PLL3_Config>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d002      	beq.n	800c5ea <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c5ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c5f6:	663b      	str	r3, [r7, #96]	; 0x60
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	667b      	str	r3, [r7, #100]	; 0x64
 800c5fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c600:	460b      	mov	r3, r1
 800c602:	4313      	orrs	r3, r2
 800c604:	d038      	beq.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c60a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c60e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c612:	d018      	beq.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c618:	d811      	bhi.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c61a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c61e:	d014      	beq.n	800c64a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c624:	d80b      	bhi.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c626:	2b00      	cmp	r3, #0
 800c628:	d011      	beq.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c62a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c62e:	d106      	bne.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c630:	4bc3      	ldr	r3, [pc, #780]	; (800c940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c634:	4ac2      	ldr	r2, [pc, #776]	; (800c940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c63a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c63c:	e008      	b.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c63e:	2301      	movs	r3, #1
 800c640:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c644:	e004      	b.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c646:	bf00      	nop
 800c648:	e002      	b.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c64a:	bf00      	nop
 800c64c:	e000      	b.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c64e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c650:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c654:	2b00      	cmp	r3, #0
 800c656:	d10b      	bne.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c658:	4bb9      	ldr	r3, [pc, #740]	; (800c940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c65a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c65c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c660:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c668:	4ab5      	ldr	r2, [pc, #724]	; (800c940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c66a:	430b      	orrs	r3, r1
 800c66c:	6553      	str	r3, [r2, #84]	; 0x54
 800c66e:	e003      	b.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c670:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c674:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c680:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c684:	65bb      	str	r3, [r7, #88]	; 0x58
 800c686:	2300      	movs	r3, #0
 800c688:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c68a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c68e:	460b      	mov	r3, r1
 800c690:	4313      	orrs	r3, r2
 800c692:	d009      	beq.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c694:	4baa      	ldr	r3, [pc, #680]	; (800c940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c698:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c69c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6a2:	4aa7      	ldr	r2, [pc, #668]	; (800c940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6a4:	430b      	orrs	r3, r1
 800c6a6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c6a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c6b4:	653b      	str	r3, [r7, #80]	; 0x50
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	657b      	str	r3, [r7, #84]	; 0x54
 800c6ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c6be:	460b      	mov	r3, r1
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	d009      	beq.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c6c4:	4b9e      	ldr	r3, [pc, #632]	; (800c940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6c8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c6cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6d2:	4a9b      	ldr	r2, [pc, #620]	; (800c940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6d4:	430b      	orrs	r3, r1
 800c6d6:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c6d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c6e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6ea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	d009      	beq.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c6f4:	4b92      	ldr	r3, [pc, #584]	; (800c940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6f8:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800c6fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c702:	4a8f      	ldr	r2, [pc, #572]	; (800c940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c704:	430b      	orrs	r3, r1
 800c706:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c708:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c710:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c714:	643b      	str	r3, [r7, #64]	; 0x40
 800c716:	2300      	movs	r3, #0
 800c718:	647b      	str	r3, [r7, #68]	; 0x44
 800c71a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c71e:	460b      	mov	r3, r1
 800c720:	4313      	orrs	r3, r2
 800c722:	d00e      	beq.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c724:	4b86      	ldr	r3, [pc, #536]	; (800c940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c726:	691b      	ldr	r3, [r3, #16]
 800c728:	4a85      	ldr	r2, [pc, #532]	; (800c940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c72a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c72e:	6113      	str	r3, [r2, #16]
 800c730:	4b83      	ldr	r3, [pc, #524]	; (800c940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c732:	6919      	ldr	r1, [r3, #16]
 800c734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c738:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c73c:	4a80      	ldr	r2, [pc, #512]	; (800c940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c73e:	430b      	orrs	r3, r1
 800c740:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c74e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c750:	2300      	movs	r3, #0
 800c752:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c754:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c758:	460b      	mov	r3, r1
 800c75a:	4313      	orrs	r3, r2
 800c75c:	d009      	beq.n	800c772 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c75e:	4b78      	ldr	r3, [pc, #480]	; (800c940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c762:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c766:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c76a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c76c:	4a74      	ldr	r2, [pc, #464]	; (800c940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c76e:	430b      	orrs	r3, r1
 800c770:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c77e:	633b      	str	r3, [r7, #48]	; 0x30
 800c780:	2300      	movs	r3, #0
 800c782:	637b      	str	r3, [r7, #52]	; 0x34
 800c784:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c788:	460b      	mov	r3, r1
 800c78a:	4313      	orrs	r3, r2
 800c78c:	d00a      	beq.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c78e:	4b6c      	ldr	r3, [pc, #432]	; (800c940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c792:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c796:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c79a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c79e:	4a68      	ldr	r2, [pc, #416]	; (800c940 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7a0:	430b      	orrs	r3, r1
 800c7a2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c7a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ac:	2100      	movs	r1, #0
 800c7ae:	62b9      	str	r1, [r7, #40]	; 0x28
 800c7b0:	f003 0301 	and.w	r3, r3, #1
 800c7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7b6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	d011      	beq.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7c4:	3308      	adds	r3, #8
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f000 fb79 	bl	800cec0 <RCCEx_PLL2_Config>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c7d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d003      	beq.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c7e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ec:	2100      	movs	r1, #0
 800c7ee:	6239      	str	r1, [r7, #32]
 800c7f0:	f003 0302 	and.w	r3, r3, #2
 800c7f4:	627b      	str	r3, [r7, #36]	; 0x24
 800c7f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	d011      	beq.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c804:	3308      	adds	r3, #8
 800c806:	2101      	movs	r1, #1
 800c808:	4618      	mov	r0, r3
 800c80a:	f000 fb59 	bl	800cec0 <RCCEx_PLL2_Config>
 800c80e:	4603      	mov	r3, r0
 800c810:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c814:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d003      	beq.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c81c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c820:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	2100      	movs	r1, #0
 800c82e:	61b9      	str	r1, [r7, #24]
 800c830:	f003 0304 	and.w	r3, r3, #4
 800c834:	61fb      	str	r3, [r7, #28]
 800c836:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c83a:	460b      	mov	r3, r1
 800c83c:	4313      	orrs	r3, r2
 800c83e:	d011      	beq.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c844:	3308      	adds	r3, #8
 800c846:	2102      	movs	r1, #2
 800c848:	4618      	mov	r0, r3
 800c84a:	f000 fb39 	bl	800cec0 <RCCEx_PLL2_Config>
 800c84e:	4603      	mov	r3, r0
 800c850:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c854:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d003      	beq.n	800c864 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c85c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c860:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86c:	2100      	movs	r1, #0
 800c86e:	6139      	str	r1, [r7, #16]
 800c870:	f003 0308 	and.w	r3, r3, #8
 800c874:	617b      	str	r3, [r7, #20]
 800c876:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c87a:	460b      	mov	r3, r1
 800c87c:	4313      	orrs	r3, r2
 800c87e:	d011      	beq.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c884:	3328      	adds	r3, #40	; 0x28
 800c886:	2100      	movs	r1, #0
 800c888:	4618      	mov	r0, r3
 800c88a:	f000 fbcb 	bl	800d024 <RCCEx_PLL3_Config>
 800c88e:	4603      	mov	r3, r0
 800c890:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800c894:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d003      	beq.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c89c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c8a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	60b9      	str	r1, [r7, #8]
 800c8b0:	f003 0310 	and.w	r3, r3, #16
 800c8b4:	60fb      	str	r3, [r7, #12]
 800c8b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	d011      	beq.n	800c8e4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c8c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8c4:	3328      	adds	r3, #40	; 0x28
 800c8c6:	2101      	movs	r1, #1
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f000 fbab 	bl	800d024 <RCCEx_PLL3_Config>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c8d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d003      	beq.n	800c8e4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c8e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ec:	2100      	movs	r1, #0
 800c8ee:	6039      	str	r1, [r7, #0]
 800c8f0:	f003 0320 	and.w	r3, r3, #32
 800c8f4:	607b      	str	r3, [r7, #4]
 800c8f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	d011      	beq.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c904:	3328      	adds	r3, #40	; 0x28
 800c906:	2102      	movs	r1, #2
 800c908:	4618      	mov	r0, r3
 800c90a:	f000 fb8b 	bl	800d024 <RCCEx_PLL3_Config>
 800c90e:	4603      	mov	r3, r0
 800c910:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c914:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d003      	beq.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c91c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c920:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800c924:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d101      	bne.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800c92c:	2300      	movs	r3, #0
 800c92e:	e000      	b.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800c930:	2301      	movs	r3, #1
}
 800c932:	4618      	mov	r0, r3
 800c934:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800c938:	46bd      	mov	sp, r7
 800c93a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c93e:	bf00      	nop
 800c940:	58024400 	.word	0x58024400

0800c944 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800c948:	f7fe fde2 	bl	800b510 <HAL_RCC_GetHCLKFreq>
 800c94c:	4602      	mov	r2, r0
 800c94e:	4b06      	ldr	r3, [pc, #24]	; (800c968 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c950:	6a1b      	ldr	r3, [r3, #32]
 800c952:	091b      	lsrs	r3, r3, #4
 800c954:	f003 0307 	and.w	r3, r3, #7
 800c958:	4904      	ldr	r1, [pc, #16]	; (800c96c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c95a:	5ccb      	ldrb	r3, [r1, r3]
 800c95c:	f003 031f 	and.w	r3, r3, #31
 800c960:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c964:	4618      	mov	r0, r3
 800c966:	bd80      	pop	{r7, pc}
 800c968:	58024400 	.word	0x58024400
 800c96c:	08010d30 	.word	0x08010d30

0800c970 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c970:	b480      	push	{r7}
 800c972:	b089      	sub	sp, #36	; 0x24
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c978:	4ba1      	ldr	r3, [pc, #644]	; (800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c97c:	f003 0303 	and.w	r3, r3, #3
 800c980:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c982:	4b9f      	ldr	r3, [pc, #636]	; (800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c986:	0b1b      	lsrs	r3, r3, #12
 800c988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c98c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c98e:	4b9c      	ldr	r3, [pc, #624]	; (800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c992:	091b      	lsrs	r3, r3, #4
 800c994:	f003 0301 	and.w	r3, r3, #1
 800c998:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c99a:	4b99      	ldr	r3, [pc, #612]	; (800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c99e:	08db      	lsrs	r3, r3, #3
 800c9a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9a4:	693a      	ldr	r2, [r7, #16]
 800c9a6:	fb02 f303 	mul.w	r3, r2, r3
 800c9aa:	ee07 3a90 	vmov	s15, r3
 800c9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f000 8111 	beq.w	800cbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	2b02      	cmp	r3, #2
 800c9c2:	f000 8083 	beq.w	800cacc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c9c6:	69bb      	ldr	r3, [r7, #24]
 800c9c8:	2b02      	cmp	r3, #2
 800c9ca:	f200 80a1 	bhi.w	800cb10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d003      	beq.n	800c9dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c9d4:	69bb      	ldr	r3, [r7, #24]
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d056      	beq.n	800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c9da:	e099      	b.n	800cb10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9dc:	4b88      	ldr	r3, [pc, #544]	; (800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f003 0320 	and.w	r3, r3, #32
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d02d      	beq.n	800ca44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9e8:	4b85      	ldr	r3, [pc, #532]	; (800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	08db      	lsrs	r3, r3, #3
 800c9ee:	f003 0303 	and.w	r3, r3, #3
 800c9f2:	4a84      	ldr	r2, [pc, #528]	; (800cc04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c9f4:	fa22 f303 	lsr.w	r3, r2, r3
 800c9f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	ee07 3a90 	vmov	s15, r3
 800ca00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	ee07 3a90 	vmov	s15, r3
 800ca0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca12:	4b7b      	ldr	r3, [pc, #492]	; (800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca1a:	ee07 3a90 	vmov	s15, r3
 800ca1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca22:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca26:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cc08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca42:	e087      	b.n	800cb54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	ee07 3a90 	vmov	s15, r3
 800ca4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cc0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ca52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca56:	4b6a      	ldr	r3, [pc, #424]	; (800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca5e:	ee07 3a90 	vmov	s15, r3
 800ca62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca66:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cc08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca86:	e065      	b.n	800cb54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	ee07 3a90 	vmov	s15, r3
 800ca8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cc10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca9a:	4b59      	ldr	r3, [pc, #356]	; (800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caa2:	ee07 3a90 	vmov	s15, r3
 800caa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800caae:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cc08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cabe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800caca:	e043      	b.n	800cb54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	ee07 3a90 	vmov	s15, r3
 800cad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cad6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cc14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cade:	4b48      	ldr	r3, [pc, #288]	; (800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cae6:	ee07 3a90 	vmov	s15, r3
 800caea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caee:	ed97 6a03 	vldr	s12, [r7, #12]
 800caf2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cc08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800caf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cafa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cafe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb0e:	e021      	b.n	800cb54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	ee07 3a90 	vmov	s15, r3
 800cb16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cc10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb22:	4b37      	ldr	r3, [pc, #220]	; (800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb2a:	ee07 3a90 	vmov	s15, r3
 800cb2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb32:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb36:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cc08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cb54:	4b2a      	ldr	r3, [pc, #168]	; (800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb58:	0a5b      	lsrs	r3, r3, #9
 800cb5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb5e:	ee07 3a90 	vmov	s15, r3
 800cb62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb7a:	ee17 2a90 	vmov	r2, s15
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cb82:	4b1f      	ldr	r3, [pc, #124]	; (800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb86:	0c1b      	lsrs	r3, r3, #16
 800cb88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb8c:	ee07 3a90 	vmov	s15, r3
 800cb90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cba8:	ee17 2a90 	vmov	r2, s15
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cbb0:	4b13      	ldr	r3, [pc, #76]	; (800cc00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb4:	0e1b      	lsrs	r3, r3, #24
 800cbb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbba:	ee07 3a90 	vmov	s15, r3
 800cbbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbca:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbd6:	ee17 2a90 	vmov	r2, s15
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cbde:	e008      	b.n	800cbf2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	609a      	str	r2, [r3, #8]
}
 800cbf2:	bf00      	nop
 800cbf4:	3724      	adds	r7, #36	; 0x24
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	58024400 	.word	0x58024400
 800cc04:	03d09000 	.word	0x03d09000
 800cc08:	46000000 	.word	0x46000000
 800cc0c:	4c742400 	.word	0x4c742400
 800cc10:	4a742400 	.word	0x4a742400
 800cc14:	4bb71b00 	.word	0x4bb71b00

0800cc18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b089      	sub	sp, #36	; 0x24
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc20:	4ba1      	ldr	r3, [pc, #644]	; (800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc24:	f003 0303 	and.w	r3, r3, #3
 800cc28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cc2a:	4b9f      	ldr	r3, [pc, #636]	; (800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc2e:	0d1b      	lsrs	r3, r3, #20
 800cc30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cc36:	4b9c      	ldr	r3, [pc, #624]	; (800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3a:	0a1b      	lsrs	r3, r3, #8
 800cc3c:	f003 0301 	and.w	r3, r3, #1
 800cc40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cc42:	4b99      	ldr	r3, [pc, #612]	; (800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc46:	08db      	lsrs	r3, r3, #3
 800cc48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc4c:	693a      	ldr	r2, [r7, #16]
 800cc4e:	fb02 f303 	mul.w	r3, r2, r3
 800cc52:	ee07 3a90 	vmov	s15, r3
 800cc56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	f000 8111 	beq.w	800ce88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cc66:	69bb      	ldr	r3, [r7, #24]
 800cc68:	2b02      	cmp	r3, #2
 800cc6a:	f000 8083 	beq.w	800cd74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cc6e:	69bb      	ldr	r3, [r7, #24]
 800cc70:	2b02      	cmp	r3, #2
 800cc72:	f200 80a1 	bhi.w	800cdb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d003      	beq.n	800cc84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d056      	beq.n	800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cc82:	e099      	b.n	800cdb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc84:	4b88      	ldr	r3, [pc, #544]	; (800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f003 0320 	and.w	r3, r3, #32
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d02d      	beq.n	800ccec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc90:	4b85      	ldr	r3, [pc, #532]	; (800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	08db      	lsrs	r3, r3, #3
 800cc96:	f003 0303 	and.w	r3, r3, #3
 800cc9a:	4a84      	ldr	r2, [pc, #528]	; (800ceac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cc9c:	fa22 f303 	lsr.w	r3, r2, r3
 800cca0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	ee07 3a90 	vmov	s15, r3
 800cca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	ee07 3a90 	vmov	s15, r3
 800ccb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccba:	4b7b      	ldr	r3, [pc, #492]	; (800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccc2:	ee07 3a90 	vmov	s15, r3
 800ccc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccca:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ceb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cce6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ccea:	e087      	b.n	800cdfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	ee07 3a90 	vmov	s15, r3
 800ccf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccf6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ceb4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ccfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccfe:	4b6a      	ldr	r3, [pc, #424]	; (800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd06:	ee07 3a90 	vmov	s15, r3
 800cd0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd12:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ceb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd2e:	e065      	b.n	800cdfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	ee07 3a90 	vmov	s15, r3
 800cd36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ceb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd42:	4b59      	ldr	r3, [pc, #356]	; (800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd4a:	ee07 3a90 	vmov	s15, r3
 800cd4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd52:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd56:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ceb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd72:	e043      	b.n	800cdfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	ee07 3a90 	vmov	s15, r3
 800cd7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cd82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd86:	4b48      	ldr	r3, [pc, #288]	; (800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd8e:	ee07 3a90 	vmov	s15, r3
 800cd92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd96:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ceb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cda2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cda6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdb6:	e021      	b.n	800cdfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	ee07 3a90 	vmov	s15, r3
 800cdbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdc2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ceb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cdc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdca:	4b37      	ldr	r3, [pc, #220]	; (800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdd2:	ee07 3a90 	vmov	s15, r3
 800cdd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdda:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdde:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ceb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cde2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cde6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdfa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cdfc:	4b2a      	ldr	r3, [pc, #168]	; (800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce00:	0a5b      	lsrs	r3, r3, #9
 800ce02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce06:	ee07 3a90 	vmov	s15, r3
 800ce0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce16:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce22:	ee17 2a90 	vmov	r2, s15
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ce2a:	4b1f      	ldr	r3, [pc, #124]	; (800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce2e:	0c1b      	lsrs	r3, r3, #16
 800ce30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce34:	ee07 3a90 	vmov	s15, r3
 800ce38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce44:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce50:	ee17 2a90 	vmov	r2, s15
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ce58:	4b13      	ldr	r3, [pc, #76]	; (800cea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce5c:	0e1b      	lsrs	r3, r3, #24
 800ce5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce62:	ee07 3a90 	vmov	s15, r3
 800ce66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce72:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce7e:	ee17 2a90 	vmov	r2, s15
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ce86:	e008      	b.n	800ce9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2200      	movs	r2, #0
 800ce92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	609a      	str	r2, [r3, #8]
}
 800ce9a:	bf00      	nop
 800ce9c:	3724      	adds	r7, #36	; 0x24
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr
 800cea6:	bf00      	nop
 800cea8:	58024400 	.word	0x58024400
 800ceac:	03d09000 	.word	0x03d09000
 800ceb0:	46000000 	.word	0x46000000
 800ceb4:	4c742400 	.word	0x4c742400
 800ceb8:	4a742400 	.word	0x4a742400
 800cebc:	4bb71b00 	.word	0x4bb71b00

0800cec0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ceca:	2300      	movs	r3, #0
 800cecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cece:	4b53      	ldr	r3, [pc, #332]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800ced0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced2:	f003 0303 	and.w	r3, r3, #3
 800ced6:	2b03      	cmp	r3, #3
 800ced8:	d101      	bne.n	800cede <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ceda:	2301      	movs	r3, #1
 800cedc:	e099      	b.n	800d012 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cede:	4b4f      	ldr	r3, [pc, #316]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a4e      	ldr	r2, [pc, #312]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cee4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ceea:	f7f7 fa9d 	bl	8004428 <HAL_GetTick>
 800ceee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cef0:	e008      	b.n	800cf04 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cef2:	f7f7 fa99 	bl	8004428 <HAL_GetTick>
 800cef6:	4602      	mov	r2, r0
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	1ad3      	subs	r3, r2, r3
 800cefc:	2b02      	cmp	r3, #2
 800cefe:	d901      	bls.n	800cf04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cf00:	2303      	movs	r3, #3
 800cf02:	e086      	b.n	800d012 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cf04:	4b45      	ldr	r3, [pc, #276]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d1f0      	bne.n	800cef2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cf10:	4b42      	ldr	r3, [pc, #264]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cf12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	031b      	lsls	r3, r3, #12
 800cf1e:	493f      	ldr	r1, [pc, #252]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cf20:	4313      	orrs	r3, r2
 800cf22:	628b      	str	r3, [r1, #40]	; 0x28
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	3b01      	subs	r3, #1
 800cf2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	3b01      	subs	r3, #1
 800cf34:	025b      	lsls	r3, r3, #9
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	431a      	orrs	r2, r3
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	68db      	ldr	r3, [r3, #12]
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	041b      	lsls	r3, r3, #16
 800cf42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cf46:	431a      	orrs	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	691b      	ldr	r3, [r3, #16]
 800cf4c:	3b01      	subs	r3, #1
 800cf4e:	061b      	lsls	r3, r3, #24
 800cf50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf54:	4931      	ldr	r1, [pc, #196]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cf56:	4313      	orrs	r3, r2
 800cf58:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cf5a:	4b30      	ldr	r3, [pc, #192]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cf5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	695b      	ldr	r3, [r3, #20]
 800cf66:	492d      	ldr	r1, [pc, #180]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cf6c:	4b2b      	ldr	r3, [pc, #172]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cf6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf70:	f023 0220 	bic.w	r2, r3, #32
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	699b      	ldr	r3, [r3, #24]
 800cf78:	4928      	ldr	r1, [pc, #160]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cf7e:	4b27      	ldr	r3, [pc, #156]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cf80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf82:	4a26      	ldr	r2, [pc, #152]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cf84:	f023 0310 	bic.w	r3, r3, #16
 800cf88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cf8a:	4b24      	ldr	r3, [pc, #144]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cf8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf8e:	4b24      	ldr	r3, [pc, #144]	; (800d020 <RCCEx_PLL2_Config+0x160>)
 800cf90:	4013      	ands	r3, r2
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	69d2      	ldr	r2, [r2, #28]
 800cf96:	00d2      	lsls	r2, r2, #3
 800cf98:	4920      	ldr	r1, [pc, #128]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cf9e:	4b1f      	ldr	r3, [pc, #124]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cfa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa2:	4a1e      	ldr	r2, [pc, #120]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cfa4:	f043 0310 	orr.w	r3, r3, #16
 800cfa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d106      	bne.n	800cfbe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cfb0:	4b1a      	ldr	r3, [pc, #104]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cfb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb4:	4a19      	ldr	r2, [pc, #100]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cfb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cfba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cfbc:	e00f      	b.n	800cfde <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d106      	bne.n	800cfd2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cfc4:	4b15      	ldr	r3, [pc, #84]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cfc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc8:	4a14      	ldr	r2, [pc, #80]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cfca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cfd0:	e005      	b.n	800cfde <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cfd2:	4b12      	ldr	r3, [pc, #72]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cfd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd6:	4a11      	ldr	r2, [pc, #68]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cfd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cfdc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cfde:	4b0f      	ldr	r3, [pc, #60]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	4a0e      	ldr	r2, [pc, #56]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800cfe4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cfe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfea:	f7f7 fa1d 	bl	8004428 <HAL_GetTick>
 800cfee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cff0:	e008      	b.n	800d004 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cff2:	f7f7 fa19 	bl	8004428 <HAL_GetTick>
 800cff6:	4602      	mov	r2, r0
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	1ad3      	subs	r3, r2, r3
 800cffc:	2b02      	cmp	r3, #2
 800cffe:	d901      	bls.n	800d004 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d000:	2303      	movs	r3, #3
 800d002:	e006      	b.n	800d012 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d004:	4b05      	ldr	r3, [pc, #20]	; (800d01c <RCCEx_PLL2_Config+0x15c>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d0f0      	beq.n	800cff2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d010:	7bfb      	ldrb	r3, [r7, #15]
}
 800d012:	4618      	mov	r0, r3
 800d014:	3710      	adds	r7, #16
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	58024400 	.word	0x58024400
 800d020:	ffff0007 	.word	0xffff0007

0800d024 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d02e:	2300      	movs	r3, #0
 800d030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d032:	4b53      	ldr	r3, [pc, #332]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d036:	f003 0303 	and.w	r3, r3, #3
 800d03a:	2b03      	cmp	r3, #3
 800d03c:	d101      	bne.n	800d042 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d03e:	2301      	movs	r3, #1
 800d040:	e099      	b.n	800d176 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d042:	4b4f      	ldr	r3, [pc, #316]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4a4e      	ldr	r2, [pc, #312]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d04c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d04e:	f7f7 f9eb 	bl	8004428 <HAL_GetTick>
 800d052:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d054:	e008      	b.n	800d068 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d056:	f7f7 f9e7 	bl	8004428 <HAL_GetTick>
 800d05a:	4602      	mov	r2, r0
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	1ad3      	subs	r3, r2, r3
 800d060:	2b02      	cmp	r3, #2
 800d062:	d901      	bls.n	800d068 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d064:	2303      	movs	r3, #3
 800d066:	e086      	b.n	800d176 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d068:	4b45      	ldr	r3, [pc, #276]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d070:	2b00      	cmp	r3, #0
 800d072:	d1f0      	bne.n	800d056 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d074:	4b42      	ldr	r3, [pc, #264]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d078:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	051b      	lsls	r3, r3, #20
 800d082:	493f      	ldr	r1, [pc, #252]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d084:	4313      	orrs	r3, r2
 800d086:	628b      	str	r3, [r1, #40]	; 0x28
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	3b01      	subs	r3, #1
 800d08e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	689b      	ldr	r3, [r3, #8]
 800d096:	3b01      	subs	r3, #1
 800d098:	025b      	lsls	r3, r3, #9
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	431a      	orrs	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	68db      	ldr	r3, [r3, #12]
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	041b      	lsls	r3, r3, #16
 800d0a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d0aa:	431a      	orrs	r2, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	691b      	ldr	r3, [r3, #16]
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	061b      	lsls	r3, r3, #24
 800d0b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d0b8:	4931      	ldr	r1, [pc, #196]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d0be:	4b30      	ldr	r3, [pc, #192]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	695b      	ldr	r3, [r3, #20]
 800d0ca:	492d      	ldr	r1, [pc, #180]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d0d0:	4b2b      	ldr	r3, [pc, #172]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	699b      	ldr	r3, [r3, #24]
 800d0dc:	4928      	ldr	r1, [pc, #160]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d0e2:	4b27      	ldr	r3, [pc, #156]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e6:	4a26      	ldr	r2, [pc, #152]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d0e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d0ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d0ee:	4b24      	ldr	r3, [pc, #144]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d0f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0f2:	4b24      	ldr	r3, [pc, #144]	; (800d184 <RCCEx_PLL3_Config+0x160>)
 800d0f4:	4013      	ands	r3, r2
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	69d2      	ldr	r2, [r2, #28]
 800d0fa:	00d2      	lsls	r2, r2, #3
 800d0fc:	4920      	ldr	r1, [pc, #128]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d0fe:	4313      	orrs	r3, r2
 800d100:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d102:	4b1f      	ldr	r3, [pc, #124]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d106:	4a1e      	ldr	r2, [pc, #120]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d10c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d106      	bne.n	800d122 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d114:	4b1a      	ldr	r3, [pc, #104]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d118:	4a19      	ldr	r2, [pc, #100]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d11a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d11e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d120:	e00f      	b.n	800d142 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	2b01      	cmp	r3, #1
 800d126:	d106      	bne.n	800d136 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d128:	4b15      	ldr	r3, [pc, #84]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d12c:	4a14      	ldr	r2, [pc, #80]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d12e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d132:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d134:	e005      	b.n	800d142 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d136:	4b12      	ldr	r3, [pc, #72]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d13a:	4a11      	ldr	r2, [pc, #68]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d13c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d140:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d142:	4b0f      	ldr	r3, [pc, #60]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a0e      	ldr	r2, [pc, #56]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d14c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d14e:	f7f7 f96b 	bl	8004428 <HAL_GetTick>
 800d152:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d154:	e008      	b.n	800d168 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d156:	f7f7 f967 	bl	8004428 <HAL_GetTick>
 800d15a:	4602      	mov	r2, r0
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	1ad3      	subs	r3, r2, r3
 800d160:	2b02      	cmp	r3, #2
 800d162:	d901      	bls.n	800d168 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d164:	2303      	movs	r3, #3
 800d166:	e006      	b.n	800d176 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d168:	4b05      	ldr	r3, [pc, #20]	; (800d180 <RCCEx_PLL3_Config+0x15c>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d170:	2b00      	cmp	r3, #0
 800d172:	d0f0      	beq.n	800d156 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d174:	7bfb      	ldrb	r3, [r7, #15]
}
 800d176:	4618      	mov	r0, r3
 800d178:	3710      	adds	r7, #16
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	58024400 	.word	0x58024400
 800d184:	ffff0007 	.word	0xffff0007

0800d188 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b084      	sub	sp, #16
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d190:	2301      	movs	r3, #1
 800d192:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d074      	beq.n	800d284 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d1a0:	b2db      	uxtb	r3, r3
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d106      	bne.n	800d1b4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f7f6 f834 	bl	800321c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2202      	movs	r2, #2
 800d1b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	68db      	ldr	r3, [r3, #12]
 800d1c2:	f003 0310 	and.w	r3, r3, #16
 800d1c6:	2b10      	cmp	r3, #16
 800d1c8:	d053      	beq.n	800d272 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	22ca      	movs	r2, #202	; 0xca
 800d1d0:	625a      	str	r2, [r3, #36]	; 0x24
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2253      	movs	r2, #83	; 0x53
 800d1d8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 f87e 	bl	800d2dc <RTC_EnterInitMode>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d1e4:	7bfb      	ldrb	r3, [r7, #15]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d124      	bne.n	800d234 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	6999      	ldr	r1, [r3, #24]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	4b26      	ldr	r3, [pc, #152]	; (800d290 <HAL_RTC_Init+0x108>)
 800d1f6:	400b      	ands	r3, r1
 800d1f8:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	6999      	ldr	r1, [r3, #24]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	685a      	ldr	r2, [r3, #4]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	691b      	ldr	r3, [r3, #16]
 800d208:	431a      	orrs	r2, r3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	699b      	ldr	r3, [r3, #24]
 800d20e:	431a      	orrs	r2, r3
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	430a      	orrs	r2, r1
 800d216:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	689b      	ldr	r3, [r3, #8]
 800d21c:	0419      	lsls	r1, r3, #16
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	68da      	ldr	r2, [r3, #12]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	430a      	orrs	r2, r1
 800d228:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 f88c 	bl	800d348 <RTC_ExitInitMode>
 800d230:	4603      	mov	r3, r0
 800d232:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d234:	7bfb      	ldrb	r3, [r7, #15]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d116      	bne.n	800d268 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	699a      	ldr	r2, [r3, #24]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800d248:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	6999      	ldr	r1, [r3, #24]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6a1a      	ldr	r2, [r3, #32]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	69db      	ldr	r3, [r3, #28]
 800d258:	431a      	orrs	r2, r3
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	695b      	ldr	r3, [r3, #20]
 800d25e:	431a      	orrs	r2, r3
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	430a      	orrs	r2, r1
 800d266:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	22ff      	movs	r2, #255	; 0xff
 800d26e:	625a      	str	r2, [r3, #36]	; 0x24
 800d270:	e001      	b.n	800d276 <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d272:	2300      	movs	r3, #0
 800d274:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d276:	7bfb      	ldrb	r3, [r7, #15]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d103      	bne.n	800d284 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2201      	movs	r2, #1
 800d280:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800d284:	7bfb      	ldrb	r3, [r7, #15]
}
 800d286:	4618      	mov	r0, r3
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	fb8fffbf 	.word	0xfb8fffbf

0800d294 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4a0d      	ldr	r2, [pc, #52]	; (800d2d8 <HAL_RTC_WaitForSynchro+0x44>)
 800d2a2:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d2a4:	f7f7 f8c0 	bl	8004428 <HAL_GetTick>
 800d2a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d2aa:	e009      	b.n	800d2c0 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d2ac:	f7f7 f8bc 	bl	8004428 <HAL_GetTick>
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	1ad3      	subs	r3, r2, r3
 800d2b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2ba:	d901      	bls.n	800d2c0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d2bc:	2303      	movs	r3, #3
 800d2be:	e007      	b.n	800d2d0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	68db      	ldr	r3, [r3, #12]
 800d2c6:	f003 0320 	and.w	r3, r3, #32
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d0ee      	beq.n	800d2ac <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d2ce:	2300      	movs	r3, #0
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3710      	adds	r7, #16
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	0001005f 	.word	0x0001005f

0800d2dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d123      	bne.n	800d33e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	68da      	ldr	r2, [r3, #12]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d304:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d306:	f7f7 f88f 	bl	8004428 <HAL_GetTick>
 800d30a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d30c:	e00d      	b.n	800d32a <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d30e:	f7f7 f88b 	bl	8004428 <HAL_GetTick>
 800d312:	4602      	mov	r2, r0
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	1ad3      	subs	r3, r2, r3
 800d318:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d31c:	d905      	bls.n	800d32a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800d31e:	2303      	movs	r3, #3
 800d320:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2203      	movs	r2, #3
 800d326:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d334:	2b00      	cmp	r3, #0
 800d336:	d102      	bne.n	800d33e <RTC_EnterInitMode+0x62>
 800d338:	7bfb      	ldrb	r3, [r7, #15]
 800d33a:	2b03      	cmp	r3, #3
 800d33c:	d1e7      	bne.n	800d30e <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800d33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d340:	4618      	mov	r0, r3
 800d342:	3710      	adds	r7, #16
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d350:	2300      	movs	r3, #0
 800d352:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d354:	4b1a      	ldr	r3, [pc, #104]	; (800d3c0 <RTC_ExitInitMode+0x78>)
 800d356:	68db      	ldr	r3, [r3, #12]
 800d358:	4a19      	ldr	r2, [pc, #100]	; (800d3c0 <RTC_ExitInitMode+0x78>)
 800d35a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d35e:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d360:	4b17      	ldr	r3, [pc, #92]	; (800d3c0 <RTC_ExitInitMode+0x78>)
 800d362:	699b      	ldr	r3, [r3, #24]
 800d364:	f003 0320 	and.w	r3, r3, #32
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d10c      	bne.n	800d386 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f7ff ff91 	bl	800d294 <HAL_RTC_WaitForSynchro>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d01e      	beq.n	800d3b6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2203      	movs	r2, #3
 800d37c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d380:	2303      	movs	r3, #3
 800d382:	73fb      	strb	r3, [r7, #15]
 800d384:	e017      	b.n	800d3b6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d386:	4b0e      	ldr	r3, [pc, #56]	; (800d3c0 <RTC_ExitInitMode+0x78>)
 800d388:	699b      	ldr	r3, [r3, #24]
 800d38a:	4a0d      	ldr	r2, [pc, #52]	; (800d3c0 <RTC_ExitInitMode+0x78>)
 800d38c:	f023 0320 	bic.w	r3, r3, #32
 800d390:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f7ff ff7e 	bl	800d294 <HAL_RTC_WaitForSynchro>
 800d398:	4603      	mov	r3, r0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d005      	beq.n	800d3aa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2203      	movs	r2, #3
 800d3a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d3a6:	2303      	movs	r3, #3
 800d3a8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d3aa:	4b05      	ldr	r3, [pc, #20]	; (800d3c0 <RTC_ExitInitMode+0x78>)
 800d3ac:	699b      	ldr	r3, [r3, #24]
 800d3ae:	4a04      	ldr	r2, [pc, #16]	; (800d3c0 <RTC_ExitInitMode+0x78>)
 800d3b0:	f043 0320 	orr.w	r3, r3, #32
 800d3b4:	6193      	str	r3, [r2, #24]
  }

  return status;
 800d3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3710      	adds	r7, #16
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	58004000 	.word	0x58004000

0800d3c4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b082      	sub	sp, #8
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d101      	bne.n	800d3d8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	e02b      	b.n	800d430 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d106      	bne.n	800d3f2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f7f3 fc93 	bl	8000d18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2202      	movs	r2, #2
 800d3f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	3304      	adds	r3, #4
 800d402:	4619      	mov	r1, r3
 800d404:	4610      	mov	r0, r2
 800d406:	f001 ffdf 	bl	800f3c8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6818      	ldr	r0, [r3, #0]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	461a      	mov	r2, r3
 800d414:	6839      	ldr	r1, [r7, #0]
 800d416:	f002 f833 	bl	800f480 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d41a:	4b07      	ldr	r3, [pc, #28]	; (800d438 <HAL_SDRAM_Init+0x74>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	4a06      	ldr	r2, [pc, #24]	; (800d438 <HAL_SDRAM_Init+0x74>)
 800d420:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d424:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2201      	movs	r2, #1
 800d42a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d42e:	2300      	movs	r3, #0
}
 800d430:	4618      	mov	r0, r3
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	52004000 	.word	0x52004000

0800d43c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b086      	sub	sp, #24
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d44e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d450:	7dfb      	ldrb	r3, [r7, #23]
 800d452:	2b02      	cmp	r3, #2
 800d454:	d101      	bne.n	800d45a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d456:	2302      	movs	r3, #2
 800d458:	e021      	b.n	800d49e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d45a:	7dfb      	ldrb	r3, [r7, #23]
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	d002      	beq.n	800d466 <HAL_SDRAM_SendCommand+0x2a>
 800d460:	7dfb      	ldrb	r3, [r7, #23]
 800d462:	2b05      	cmp	r3, #5
 800d464:	d118      	bne.n	800d498 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2202      	movs	r2, #2
 800d46a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	68b9      	ldr	r1, [r7, #8]
 800d476:	4618      	mov	r0, r3
 800d478:	f002 f86c 	bl	800f554 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	2b02      	cmp	r3, #2
 800d482:	d104      	bne.n	800d48e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2205      	movs	r2, #5
 800d488:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d48c:	e006      	b.n	800d49c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2201      	movs	r2, #1
 800d492:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d496:	e001      	b.n	800d49c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d498:	2301      	movs	r3, #1
 800d49a:	e000      	b.n	800d49e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d49c:	2300      	movs	r3, #0
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3718      	adds	r7, #24
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}

0800d4a6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d4a6:	b580      	push	{r7, lr}
 800d4a8:	b082      	sub	sp, #8
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	6078      	str	r0, [r7, #4]
 800d4ae:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	2b02      	cmp	r3, #2
 800d4ba:	d101      	bne.n	800d4c0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d4bc:	2302      	movs	r3, #2
 800d4be:	e016      	b.n	800d4ee <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d10f      	bne.n	800d4ec <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2202      	movs	r2, #2
 800d4d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	6839      	ldr	r1, [r7, #0]
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f002 f85e 	bl	800f59c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	e000      	b.n	800d4ee <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800d4ec:	2301      	movs	r3, #1
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3708      	adds	r7, #8
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}

0800d4f6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	b082      	sub	sp, #8
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d101      	bne.n	800d508 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d504:	2301      	movs	r3, #1
 800d506:	e042      	b.n	800d58e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d106      	bne.n	800d520 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2200      	movs	r2, #0
 800d516:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f7f6 fe62 	bl	80041e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2224      	movs	r2, #36	; 0x24
 800d524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f022 0201 	bic.w	r2, r2, #1
 800d536:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 fd5d 	bl	800dff8 <UART_SetConfig>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b01      	cmp	r3, #1
 800d542:	d101      	bne.n	800d548 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d544:	2301      	movs	r3, #1
 800d546:	e022      	b.n	800d58e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d002      	beq.n	800d556 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f001 fbbd 	bl	800ecd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	685a      	ldr	r2, [r3, #4]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d564:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	689a      	ldr	r2, [r3, #8]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d574:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f042 0201 	orr.w	r2, r2, #1
 800d584:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f001 fc44 	bl	800ee14 <UART_CheckIdleState>
 800d58c:	4603      	mov	r3, r0
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3708      	adds	r7, #8
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b08a      	sub	sp, #40	; 0x28
 800d59a:	af02      	add	r7, sp, #8
 800d59c:	60f8      	str	r0, [r7, #12]
 800d59e:	60b9      	str	r1, [r7, #8]
 800d5a0:	603b      	str	r3, [r7, #0]
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5ac:	2b20      	cmp	r3, #32
 800d5ae:	d17b      	bne.n	800d6a8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d002      	beq.n	800d5bc <HAL_UART_Transmit+0x26>
 800d5b6:	88fb      	ldrh	r3, [r7, #6]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d101      	bne.n	800d5c0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	e074      	b.n	800d6aa <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2221      	movs	r2, #33	; 0x21
 800d5cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d5d0:	f7f6 ff2a 	bl	8004428 <HAL_GetTick>
 800d5d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	88fa      	ldrh	r2, [r7, #6]
 800d5da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	88fa      	ldrh	r2, [r7, #6]
 800d5e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5ee:	d108      	bne.n	800d602 <HAL_UART_Transmit+0x6c>
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	691b      	ldr	r3, [r3, #16]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d104      	bne.n	800d602 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	61bb      	str	r3, [r7, #24]
 800d600:	e003      	b.n	800d60a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d606:	2300      	movs	r3, #0
 800d608:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d60a:	e030      	b.n	800d66e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	9300      	str	r3, [sp, #0]
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	2200      	movs	r2, #0
 800d614:	2180      	movs	r1, #128	; 0x80
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f001 fca6 	bl	800ef68 <UART_WaitOnFlagUntilTimeout>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d005      	beq.n	800d62e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	2220      	movs	r2, #32
 800d626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d62a:	2303      	movs	r3, #3
 800d62c:	e03d      	b.n	800d6aa <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d62e:	69fb      	ldr	r3, [r7, #28]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d10b      	bne.n	800d64c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d634:	69bb      	ldr	r3, [r7, #24]
 800d636:	881b      	ldrh	r3, [r3, #0]
 800d638:	461a      	mov	r2, r3
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d642:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d644:	69bb      	ldr	r3, [r7, #24]
 800d646:	3302      	adds	r3, #2
 800d648:	61bb      	str	r3, [r7, #24]
 800d64a:	e007      	b.n	800d65c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d64c:	69fb      	ldr	r3, [r7, #28]
 800d64e:	781a      	ldrb	r2, [r3, #0]
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	3301      	adds	r3, #1
 800d65a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d662:	b29b      	uxth	r3, r3
 800d664:	3b01      	subs	r3, #1
 800d666:	b29a      	uxth	r2, r3
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d674:	b29b      	uxth	r3, r3
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1c8      	bne.n	800d60c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	2200      	movs	r2, #0
 800d682:	2140      	movs	r1, #64	; 0x40
 800d684:	68f8      	ldr	r0, [r7, #12]
 800d686:	f001 fc6f 	bl	800ef68 <UART_WaitOnFlagUntilTimeout>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d005      	beq.n	800d69c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2220      	movs	r2, #32
 800d694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d698:	2303      	movs	r3, #3
 800d69a:	e006      	b.n	800d6aa <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2220      	movs	r2, #32
 800d6a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	e000      	b.n	800d6aa <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d6a8:	2302      	movs	r3, #2
  }
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3720      	adds	r7, #32
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}

0800d6b2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d6b2:	b580      	push	{r7, lr}
 800d6b4:	b08a      	sub	sp, #40	; 0x28
 800d6b6:	af02      	add	r7, sp, #8
 800d6b8:	60f8      	str	r0, [r7, #12]
 800d6ba:	60b9      	str	r1, [r7, #8]
 800d6bc:	603b      	str	r3, [r7, #0]
 800d6be:	4613      	mov	r3, r2
 800d6c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d6c8:	2b20      	cmp	r3, #32
 800d6ca:	f040 80b5 	bne.w	800d838 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d002      	beq.n	800d6da <HAL_UART_Receive+0x28>
 800d6d4:	88fb      	ldrh	r3, [r7, #6]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d101      	bne.n	800d6de <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e0ad      	b.n	800d83a <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2222      	movs	r2, #34	; 0x22
 800d6ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d6f4:	f7f6 fe98 	bl	8004428 <HAL_GetTick>
 800d6f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	88fa      	ldrh	r2, [r7, #6]
 800d6fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	88fa      	ldrh	r2, [r7, #6]
 800d706:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	689b      	ldr	r3, [r3, #8]
 800d70e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d712:	d10e      	bne.n	800d732 <HAL_UART_Receive+0x80>
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	691b      	ldr	r3, [r3, #16]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d105      	bne.n	800d728 <HAL_UART_Receive+0x76>
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d722:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d726:	e02d      	b.n	800d784 <HAL_UART_Receive+0xd2>
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	22ff      	movs	r2, #255	; 0xff
 800d72c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d730:	e028      	b.n	800d784 <HAL_UART_Receive+0xd2>
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	689b      	ldr	r3, [r3, #8]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d10d      	bne.n	800d756 <HAL_UART_Receive+0xa4>
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	691b      	ldr	r3, [r3, #16]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d104      	bne.n	800d74c <HAL_UART_Receive+0x9a>
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	22ff      	movs	r2, #255	; 0xff
 800d746:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d74a:	e01b      	b.n	800d784 <HAL_UART_Receive+0xd2>
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	227f      	movs	r2, #127	; 0x7f
 800d750:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d754:	e016      	b.n	800d784 <HAL_UART_Receive+0xd2>
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	689b      	ldr	r3, [r3, #8]
 800d75a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d75e:	d10d      	bne.n	800d77c <HAL_UART_Receive+0xca>
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	691b      	ldr	r3, [r3, #16]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d104      	bne.n	800d772 <HAL_UART_Receive+0xc0>
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	227f      	movs	r2, #127	; 0x7f
 800d76c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d770:	e008      	b.n	800d784 <HAL_UART_Receive+0xd2>
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	223f      	movs	r2, #63	; 0x3f
 800d776:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d77a:	e003      	b.n	800d784 <HAL_UART_Receive+0xd2>
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2200      	movs	r2, #0
 800d780:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d78a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	689b      	ldr	r3, [r3, #8]
 800d790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d794:	d108      	bne.n	800d7a8 <HAL_UART_Receive+0xf6>
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	691b      	ldr	r3, [r3, #16]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d104      	bne.n	800d7a8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	61bb      	str	r3, [r7, #24]
 800d7a6:	e003      	b.n	800d7b0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d7b0:	e036      	b.n	800d820 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	9300      	str	r3, [sp, #0]
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	2120      	movs	r1, #32
 800d7bc:	68f8      	ldr	r0, [r7, #12]
 800d7be:	f001 fbd3 	bl	800ef68 <UART_WaitOnFlagUntilTimeout>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d005      	beq.n	800d7d4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2220      	movs	r2, #32
 800d7cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800d7d0:	2303      	movs	r3, #3
 800d7d2:	e032      	b.n	800d83a <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d10c      	bne.n	800d7f4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e0:	b29a      	uxth	r2, r3
 800d7e2:	8a7b      	ldrh	r3, [r7, #18]
 800d7e4:	4013      	ands	r3, r2
 800d7e6:	b29a      	uxth	r2, r3
 800d7e8:	69bb      	ldr	r3, [r7, #24]
 800d7ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	3302      	adds	r3, #2
 800d7f0:	61bb      	str	r3, [r7, #24]
 800d7f2:	e00c      	b.n	800d80e <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7fa:	b2da      	uxtb	r2, r3
 800d7fc:	8a7b      	ldrh	r3, [r7, #18]
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	4013      	ands	r3, r2
 800d802:	b2da      	uxtb	r2, r3
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d808:	69fb      	ldr	r3, [r7, #28]
 800d80a:	3301      	adds	r3, #1
 800d80c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d814:	b29b      	uxth	r3, r3
 800d816:	3b01      	subs	r3, #1
 800d818:	b29a      	uxth	r2, r3
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d826:	b29b      	uxth	r3, r3
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d1c2      	bne.n	800d7b2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2220      	movs	r2, #32
 800d830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800d834:	2300      	movs	r3, #0
 800d836:	e000      	b.n	800d83a <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800d838:	2302      	movs	r3, #2
  }
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3720      	adds	r7, #32
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
	...

0800d844 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b0ba      	sub	sp, #232	; 0xe8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	69db      	ldr	r3, [r3, #28]
 800d852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d86a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d86e:	f640 030f 	movw	r3, #2063	; 0x80f
 800d872:	4013      	ands	r3, r2
 800d874:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d878:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d11b      	bne.n	800d8b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d884:	f003 0320 	and.w	r3, r3, #32
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d015      	beq.n	800d8b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d88c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d890:	f003 0320 	and.w	r3, r3, #32
 800d894:	2b00      	cmp	r3, #0
 800d896:	d105      	bne.n	800d8a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d89c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d009      	beq.n	800d8b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	f000 8377 	beq.w	800df9c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	4798      	blx	r3
      }
      return;
 800d8b6:	e371      	b.n	800df9c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d8b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	f000 8123 	beq.w	800db08 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d8c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d8c6:	4b8d      	ldr	r3, [pc, #564]	; (800dafc <HAL_UART_IRQHandler+0x2b8>)
 800d8c8:	4013      	ands	r3, r2
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d106      	bne.n	800d8dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d8ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d8d2:	4b8b      	ldr	r3, [pc, #556]	; (800db00 <HAL_UART_IRQHandler+0x2bc>)
 800d8d4:	4013      	ands	r3, r2
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	f000 8116 	beq.w	800db08 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8e0:	f003 0301 	and.w	r3, r3, #1
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d011      	beq.n	800d90c <HAL_UART_IRQHandler+0xc8>
 800d8e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d8ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d00b      	beq.n	800d90c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d902:	f043 0201 	orr.w	r2, r3, #1
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d90c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d910:	f003 0302 	and.w	r3, r3, #2
 800d914:	2b00      	cmp	r3, #0
 800d916:	d011      	beq.n	800d93c <HAL_UART_IRQHandler+0xf8>
 800d918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d91c:	f003 0301 	and.w	r3, r3, #1
 800d920:	2b00      	cmp	r3, #0
 800d922:	d00b      	beq.n	800d93c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2202      	movs	r2, #2
 800d92a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d932:	f043 0204 	orr.w	r2, r3, #4
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d93c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d940:	f003 0304 	and.w	r3, r3, #4
 800d944:	2b00      	cmp	r3, #0
 800d946:	d011      	beq.n	800d96c <HAL_UART_IRQHandler+0x128>
 800d948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d94c:	f003 0301 	and.w	r3, r3, #1
 800d950:	2b00      	cmp	r3, #0
 800d952:	d00b      	beq.n	800d96c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2204      	movs	r2, #4
 800d95a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d962:	f043 0202 	orr.w	r2, r3, #2
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d96c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d970:	f003 0308 	and.w	r3, r3, #8
 800d974:	2b00      	cmp	r3, #0
 800d976:	d017      	beq.n	800d9a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d97c:	f003 0320 	and.w	r3, r3, #32
 800d980:	2b00      	cmp	r3, #0
 800d982:	d105      	bne.n	800d990 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d984:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d988:	4b5c      	ldr	r3, [pc, #368]	; (800dafc <HAL_UART_IRQHandler+0x2b8>)
 800d98a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00b      	beq.n	800d9a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	2208      	movs	r2, #8
 800d996:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d99e:	f043 0208 	orr.w	r2, r3, #8
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d9a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d012      	beq.n	800d9da <HAL_UART_IRQHandler+0x196>
 800d9b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00c      	beq.n	800d9da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d9c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9d0:	f043 0220 	orr.w	r2, r3, #32
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	f000 82dd 	beq.w	800dfa0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d9e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9ea:	f003 0320 	and.w	r3, r3, #32
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d013      	beq.n	800da1a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d9f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9f6:	f003 0320 	and.w	r3, r3, #32
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d105      	bne.n	800da0a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d9fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da06:	2b00      	cmp	r3, #0
 800da08:	d007      	beq.n	800da1a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d003      	beq.n	800da1a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	689b      	ldr	r3, [r3, #8]
 800da2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da2e:	2b40      	cmp	r3, #64	; 0x40
 800da30:	d005      	beq.n	800da3e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800da32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800da36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d054      	beq.n	800dae8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f001 fafa 	bl	800f038 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	689b      	ldr	r3, [r3, #8]
 800da4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da4e:	2b40      	cmp	r3, #64	; 0x40
 800da50:	d146      	bne.n	800dae0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	3308      	adds	r3, #8
 800da58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800da60:	e853 3f00 	ldrex	r3, [r3]
 800da64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800da68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	3308      	adds	r3, #8
 800da7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800da7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800da82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800da8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800da8e:	e841 2300 	strex	r3, r2, [r1]
 800da92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800da96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1d9      	bne.n	800da52 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d017      	beq.n	800dad8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daae:	4a15      	ldr	r2, [pc, #84]	; (800db04 <HAL_UART_IRQHandler+0x2c0>)
 800dab0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dab8:	4618      	mov	r0, r3
 800daba:	f7f8 f9db 	bl	8005e74 <HAL_DMA_Abort_IT>
 800dabe:	4603      	mov	r3, r0
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d019      	beq.n	800daf8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dacc:	687a      	ldr	r2, [r7, #4]
 800dace:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800dad2:	4610      	mov	r0, r2
 800dad4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dad6:	e00f      	b.n	800daf8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 fa77 	bl	800dfcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dade:	e00b      	b.n	800daf8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f000 fa73 	bl	800dfcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dae6:	e007      	b.n	800daf8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 fa6f 	bl	800dfcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2200      	movs	r2, #0
 800daf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800daf6:	e253      	b.n	800dfa0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800daf8:	bf00      	nop
    return;
 800dafa:	e251      	b.n	800dfa0 <HAL_UART_IRQHandler+0x75c>
 800dafc:	10000001 	.word	0x10000001
 800db00:	04000120 	.word	0x04000120
 800db04:	0800f105 	.word	0x0800f105

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	f040 81e7 	bne.w	800dee0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800db12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db16:	f003 0310 	and.w	r3, r3, #16
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	f000 81e0 	beq.w	800dee0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800db20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db24:	f003 0310 	and.w	r3, r3, #16
 800db28:	2b00      	cmp	r3, #0
 800db2a:	f000 81d9 	beq.w	800dee0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	2210      	movs	r2, #16
 800db34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	689b      	ldr	r3, [r3, #8]
 800db3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db40:	2b40      	cmp	r3, #64	; 0x40
 800db42:	f040 8151 	bne.w	800dde8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a96      	ldr	r2, [pc, #600]	; (800dda8 <HAL_UART_IRQHandler+0x564>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d068      	beq.n	800dc26 <HAL_UART_IRQHandler+0x3e2>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4a93      	ldr	r2, [pc, #588]	; (800ddac <HAL_UART_IRQHandler+0x568>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d061      	beq.n	800dc26 <HAL_UART_IRQHandler+0x3e2>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4a91      	ldr	r2, [pc, #580]	; (800ddb0 <HAL_UART_IRQHandler+0x56c>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d05a      	beq.n	800dc26 <HAL_UART_IRQHandler+0x3e2>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	4a8e      	ldr	r2, [pc, #568]	; (800ddb4 <HAL_UART_IRQHandler+0x570>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d053      	beq.n	800dc26 <HAL_UART_IRQHandler+0x3e2>
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	4a8c      	ldr	r2, [pc, #560]	; (800ddb8 <HAL_UART_IRQHandler+0x574>)
 800db88:	4293      	cmp	r3, r2
 800db8a:	d04c      	beq.n	800dc26 <HAL_UART_IRQHandler+0x3e2>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a89      	ldr	r2, [pc, #548]	; (800ddbc <HAL_UART_IRQHandler+0x578>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d045      	beq.n	800dc26 <HAL_UART_IRQHandler+0x3e2>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	4a87      	ldr	r2, [pc, #540]	; (800ddc0 <HAL_UART_IRQHandler+0x57c>)
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d03e      	beq.n	800dc26 <HAL_UART_IRQHandler+0x3e2>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4a84      	ldr	r2, [pc, #528]	; (800ddc4 <HAL_UART_IRQHandler+0x580>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	d037      	beq.n	800dc26 <HAL_UART_IRQHandler+0x3e2>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4a82      	ldr	r2, [pc, #520]	; (800ddc8 <HAL_UART_IRQHandler+0x584>)
 800dbc0:	4293      	cmp	r3, r2
 800dbc2:	d030      	beq.n	800dc26 <HAL_UART_IRQHandler+0x3e2>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4a7f      	ldr	r2, [pc, #508]	; (800ddcc <HAL_UART_IRQHandler+0x588>)
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	d029      	beq.n	800dc26 <HAL_UART_IRQHandler+0x3e2>
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4a7d      	ldr	r2, [pc, #500]	; (800ddd0 <HAL_UART_IRQHandler+0x58c>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d022      	beq.n	800dc26 <HAL_UART_IRQHandler+0x3e2>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4a7a      	ldr	r2, [pc, #488]	; (800ddd4 <HAL_UART_IRQHandler+0x590>)
 800dbea:	4293      	cmp	r3, r2
 800dbec:	d01b      	beq.n	800dc26 <HAL_UART_IRQHandler+0x3e2>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	4a78      	ldr	r2, [pc, #480]	; (800ddd8 <HAL_UART_IRQHandler+0x594>)
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d014      	beq.n	800dc26 <HAL_UART_IRQHandler+0x3e2>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	4a75      	ldr	r2, [pc, #468]	; (800dddc <HAL_UART_IRQHandler+0x598>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d00d      	beq.n	800dc26 <HAL_UART_IRQHandler+0x3e2>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	4a73      	ldr	r2, [pc, #460]	; (800dde0 <HAL_UART_IRQHandler+0x59c>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d006      	beq.n	800dc26 <HAL_UART_IRQHandler+0x3e2>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4a70      	ldr	r2, [pc, #448]	; (800dde4 <HAL_UART_IRQHandler+0x5a0>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	d106      	bne.n	800dc34 <HAL_UART_IRQHandler+0x3f0>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	e005      	b.n	800dc40 <HAL_UART_IRQHandler+0x3fc>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dc44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	f000 81ab 	beq.w	800dfa4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dc54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	f080 81a3 	bcs.w	800dfa4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dc64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc6e:	69db      	ldr	r3, [r3, #28]
 800dc70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc74:	f000 8087 	beq.w	800dd86 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dc84:	e853 3f00 	ldrex	r3, [r3]
 800dc88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dc8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dc90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dca6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dcae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dcb2:	e841 2300 	strex	r3, r2, [r1]
 800dcb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dcba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1da      	bne.n	800dc78 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	3308      	adds	r3, #8
 800dcc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dccc:	e853 3f00 	ldrex	r3, [r3]
 800dcd0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dcd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcd4:	f023 0301 	bic.w	r3, r3, #1
 800dcd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	3308      	adds	r3, #8
 800dce2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dce6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dcea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dcee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dcf2:	e841 2300 	strex	r3, r2, [r1]
 800dcf6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dcf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d1e1      	bne.n	800dcc2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	3308      	adds	r3, #8
 800dd04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd08:	e853 3f00 	ldrex	r3, [r3]
 800dd0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dd0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	3308      	adds	r3, #8
 800dd1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dd22:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dd24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dd28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dd2a:	e841 2300 	strex	r3, r2, [r1]
 800dd2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dd30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d1e3      	bne.n	800dcfe <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2220      	movs	r2, #32
 800dd3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2200      	movs	r2, #0
 800dd42:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd4c:	e853 3f00 	ldrex	r3, [r3]
 800dd50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dd52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd54:	f023 0310 	bic.w	r3, r3, #16
 800dd58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	461a      	mov	r2, r3
 800dd62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dd66:	65bb      	str	r3, [r7, #88]	; 0x58
 800dd68:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dd6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd6e:	e841 2300 	strex	r3, r2, [r1]
 800dd72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dd74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d1e4      	bne.n	800dd44 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7f7 fd59 	bl	8005838 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	2202      	movs	r2, #2
 800dd8a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	1ad3      	subs	r3, r2, r3
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	4619      	mov	r1, r3
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 f91d 	bl	800dfe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dda6:	e0fd      	b.n	800dfa4 <HAL_UART_IRQHandler+0x760>
 800dda8:	40020010 	.word	0x40020010
 800ddac:	40020028 	.word	0x40020028
 800ddb0:	40020040 	.word	0x40020040
 800ddb4:	40020058 	.word	0x40020058
 800ddb8:	40020070 	.word	0x40020070
 800ddbc:	40020088 	.word	0x40020088
 800ddc0:	400200a0 	.word	0x400200a0
 800ddc4:	400200b8 	.word	0x400200b8
 800ddc8:	40020410 	.word	0x40020410
 800ddcc:	40020428 	.word	0x40020428
 800ddd0:	40020440 	.word	0x40020440
 800ddd4:	40020458 	.word	0x40020458
 800ddd8:	40020470 	.word	0x40020470
 800dddc:	40020488 	.word	0x40020488
 800dde0:	400204a0 	.word	0x400204a0
 800dde4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	1ad3      	subs	r3, r2, r3
 800ddf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de02:	b29b      	uxth	r3, r3
 800de04:	2b00      	cmp	r3, #0
 800de06:	f000 80cf 	beq.w	800dfa8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800de0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800de0e:	2b00      	cmp	r3, #0
 800de10:	f000 80ca 	beq.w	800dfa8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de1c:	e853 3f00 	ldrex	r3, [r3]
 800de20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800de22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800de28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	461a      	mov	r2, r3
 800de32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800de36:	647b      	str	r3, [r7, #68]	; 0x44
 800de38:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800de3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de3e:	e841 2300 	strex	r3, r2, [r1]
 800de42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800de44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de46:	2b00      	cmp	r3, #0
 800de48:	d1e4      	bne.n	800de14 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	3308      	adds	r3, #8
 800de50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de54:	e853 3f00 	ldrex	r3, [r3]
 800de58:	623b      	str	r3, [r7, #32]
   return(result);
 800de5a:	6a3a      	ldr	r2, [r7, #32]
 800de5c:	4b55      	ldr	r3, [pc, #340]	; (800dfb4 <HAL_UART_IRQHandler+0x770>)
 800de5e:	4013      	ands	r3, r2
 800de60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	3308      	adds	r3, #8
 800de6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800de6e:	633a      	str	r2, [r7, #48]	; 0x30
 800de70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de76:	e841 2300 	strex	r3, r2, [r1]
 800de7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800de7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d1e3      	bne.n	800de4a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2220      	movs	r2, #32
 800de86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2200      	movs	r2, #0
 800de8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2200      	movs	r2, #0
 800de94:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	e853 3f00 	ldrex	r3, [r3]
 800dea2:	60fb      	str	r3, [r7, #12]
   return(result);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f023 0310 	bic.w	r3, r3, #16
 800deaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	461a      	mov	r2, r3
 800deb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800deb8:	61fb      	str	r3, [r7, #28]
 800deba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800debc:	69b9      	ldr	r1, [r7, #24]
 800debe:	69fa      	ldr	r2, [r7, #28]
 800dec0:	e841 2300 	strex	r3, r2, [r1]
 800dec4:	617b      	str	r3, [r7, #20]
   return(result);
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1e4      	bne.n	800de96 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2202      	movs	r2, #2
 800ded0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ded2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ded6:	4619      	mov	r1, r3
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f000 f881 	bl	800dfe0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dede:	e063      	b.n	800dfa8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800dee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d00e      	beq.n	800df0a <HAL_UART_IRQHandler+0x6c6>
 800deec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800def0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800def4:	2b00      	cmp	r3, #0
 800def6:	d008      	beq.n	800df0a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800df00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f001 f93f 	bl	800f186 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800df08:	e051      	b.n	800dfae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800df0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df12:	2b00      	cmp	r3, #0
 800df14:	d014      	beq.n	800df40 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800df16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d105      	bne.n	800df2e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800df22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d008      	beq.n	800df40 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df32:	2b00      	cmp	r3, #0
 800df34:	d03a      	beq.n	800dfac <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	4798      	blx	r3
    }
    return;
 800df3e:	e035      	b.n	800dfac <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800df40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d009      	beq.n	800df60 <HAL_UART_IRQHandler+0x71c>
 800df4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df54:	2b00      	cmp	r3, #0
 800df56:	d003      	beq.n	800df60 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f001 f8e9 	bl	800f130 <UART_EndTransmit_IT>
    return;
 800df5e:	e026      	b.n	800dfae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800df60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d009      	beq.n	800df80 <HAL_UART_IRQHandler+0x73c>
 800df6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800df74:	2b00      	cmp	r3, #0
 800df76:	d003      	beq.n	800df80 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f001 f918 	bl	800f1ae <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800df7e:	e016      	b.n	800dfae <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800df80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d010      	beq.n	800dfae <HAL_UART_IRQHandler+0x76a>
 800df8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df90:	2b00      	cmp	r3, #0
 800df92:	da0c      	bge.n	800dfae <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f001 f900 	bl	800f19a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800df9a:	e008      	b.n	800dfae <HAL_UART_IRQHandler+0x76a>
      return;
 800df9c:	bf00      	nop
 800df9e:	e006      	b.n	800dfae <HAL_UART_IRQHandler+0x76a>
    return;
 800dfa0:	bf00      	nop
 800dfa2:	e004      	b.n	800dfae <HAL_UART_IRQHandler+0x76a>
      return;
 800dfa4:	bf00      	nop
 800dfa6:	e002      	b.n	800dfae <HAL_UART_IRQHandler+0x76a>
      return;
 800dfa8:	bf00      	nop
 800dfaa:	e000      	b.n	800dfae <HAL_UART_IRQHandler+0x76a>
    return;
 800dfac:	bf00      	nop
  }
}
 800dfae:	37e8      	adds	r7, #232	; 0xe8
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}
 800dfb4:	effffffe 	.word	0xeffffffe

0800dfb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b083      	sub	sp, #12
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dfc0:	bf00      	nop
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b083      	sub	sp, #12
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dfd4:	bf00      	nop
 800dfd6:	370c      	adds	r7, #12
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	460b      	mov	r3, r1
 800dfea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dfec:	bf00      	nop
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dffc:	b092      	sub	sp, #72	; 0x48
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e002:	2300      	movs	r3, #0
 800e004:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	689a      	ldr	r2, [r3, #8]
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	691b      	ldr	r3, [r3, #16]
 800e010:	431a      	orrs	r2, r3
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	695b      	ldr	r3, [r3, #20]
 800e016:	431a      	orrs	r2, r3
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	69db      	ldr	r3, [r3, #28]
 800e01c:	4313      	orrs	r3, r2
 800e01e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	681a      	ldr	r2, [r3, #0]
 800e026:	4bbe      	ldr	r3, [pc, #760]	; (800e320 <UART_SetConfig+0x328>)
 800e028:	4013      	ands	r3, r2
 800e02a:	697a      	ldr	r2, [r7, #20]
 800e02c:	6812      	ldr	r2, [r2, #0]
 800e02e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e030:	430b      	orrs	r3, r1
 800e032:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	68da      	ldr	r2, [r3, #12]
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	430a      	orrs	r2, r1
 800e048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	699b      	ldr	r3, [r3, #24]
 800e04e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4ab3      	ldr	r2, [pc, #716]	; (800e324 <UART_SetConfig+0x32c>)
 800e056:	4293      	cmp	r3, r2
 800e058:	d004      	beq.n	800e064 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	6a1b      	ldr	r3, [r3, #32]
 800e05e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e060:	4313      	orrs	r3, r2
 800e062:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	689a      	ldr	r2, [r3, #8]
 800e06a:	4baf      	ldr	r3, [pc, #700]	; (800e328 <UART_SetConfig+0x330>)
 800e06c:	4013      	ands	r3, r2
 800e06e:	697a      	ldr	r2, [r7, #20]
 800e070:	6812      	ldr	r2, [r2, #0]
 800e072:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e074:	430b      	orrs	r3, r1
 800e076:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e07e:	f023 010f 	bic.w	r1, r3, #15
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	430a      	orrs	r2, r1
 800e08c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4aa6      	ldr	r2, [pc, #664]	; (800e32c <UART_SetConfig+0x334>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d177      	bne.n	800e188 <UART_SetConfig+0x190>
 800e098:	4ba5      	ldr	r3, [pc, #660]	; (800e330 <UART_SetConfig+0x338>)
 800e09a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e09c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e0a0:	2b28      	cmp	r3, #40	; 0x28
 800e0a2:	d86d      	bhi.n	800e180 <UART_SetConfig+0x188>
 800e0a4:	a201      	add	r2, pc, #4	; (adr r2, 800e0ac <UART_SetConfig+0xb4>)
 800e0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0aa:	bf00      	nop
 800e0ac:	0800e151 	.word	0x0800e151
 800e0b0:	0800e181 	.word	0x0800e181
 800e0b4:	0800e181 	.word	0x0800e181
 800e0b8:	0800e181 	.word	0x0800e181
 800e0bc:	0800e181 	.word	0x0800e181
 800e0c0:	0800e181 	.word	0x0800e181
 800e0c4:	0800e181 	.word	0x0800e181
 800e0c8:	0800e181 	.word	0x0800e181
 800e0cc:	0800e159 	.word	0x0800e159
 800e0d0:	0800e181 	.word	0x0800e181
 800e0d4:	0800e181 	.word	0x0800e181
 800e0d8:	0800e181 	.word	0x0800e181
 800e0dc:	0800e181 	.word	0x0800e181
 800e0e0:	0800e181 	.word	0x0800e181
 800e0e4:	0800e181 	.word	0x0800e181
 800e0e8:	0800e181 	.word	0x0800e181
 800e0ec:	0800e161 	.word	0x0800e161
 800e0f0:	0800e181 	.word	0x0800e181
 800e0f4:	0800e181 	.word	0x0800e181
 800e0f8:	0800e181 	.word	0x0800e181
 800e0fc:	0800e181 	.word	0x0800e181
 800e100:	0800e181 	.word	0x0800e181
 800e104:	0800e181 	.word	0x0800e181
 800e108:	0800e181 	.word	0x0800e181
 800e10c:	0800e169 	.word	0x0800e169
 800e110:	0800e181 	.word	0x0800e181
 800e114:	0800e181 	.word	0x0800e181
 800e118:	0800e181 	.word	0x0800e181
 800e11c:	0800e181 	.word	0x0800e181
 800e120:	0800e181 	.word	0x0800e181
 800e124:	0800e181 	.word	0x0800e181
 800e128:	0800e181 	.word	0x0800e181
 800e12c:	0800e171 	.word	0x0800e171
 800e130:	0800e181 	.word	0x0800e181
 800e134:	0800e181 	.word	0x0800e181
 800e138:	0800e181 	.word	0x0800e181
 800e13c:	0800e181 	.word	0x0800e181
 800e140:	0800e181 	.word	0x0800e181
 800e144:	0800e181 	.word	0x0800e181
 800e148:	0800e181 	.word	0x0800e181
 800e14c:	0800e179 	.word	0x0800e179
 800e150:	2301      	movs	r3, #1
 800e152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e156:	e326      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e158:	2304      	movs	r3, #4
 800e15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e15e:	e322      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e160:	2308      	movs	r3, #8
 800e162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e166:	e31e      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e168:	2310      	movs	r3, #16
 800e16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e16e:	e31a      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e170:	2320      	movs	r3, #32
 800e172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e176:	e316      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e178:	2340      	movs	r3, #64	; 0x40
 800e17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17e:	e312      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e180:	2380      	movs	r3, #128	; 0x80
 800e182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e186:	e30e      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	4a69      	ldr	r2, [pc, #420]	; (800e334 <UART_SetConfig+0x33c>)
 800e18e:	4293      	cmp	r3, r2
 800e190:	d130      	bne.n	800e1f4 <UART_SetConfig+0x1fc>
 800e192:	4b67      	ldr	r3, [pc, #412]	; (800e330 <UART_SetConfig+0x338>)
 800e194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e196:	f003 0307 	and.w	r3, r3, #7
 800e19a:	2b05      	cmp	r3, #5
 800e19c:	d826      	bhi.n	800e1ec <UART_SetConfig+0x1f4>
 800e19e:	a201      	add	r2, pc, #4	; (adr r2, 800e1a4 <UART_SetConfig+0x1ac>)
 800e1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a4:	0800e1bd 	.word	0x0800e1bd
 800e1a8:	0800e1c5 	.word	0x0800e1c5
 800e1ac:	0800e1cd 	.word	0x0800e1cd
 800e1b0:	0800e1d5 	.word	0x0800e1d5
 800e1b4:	0800e1dd 	.word	0x0800e1dd
 800e1b8:	0800e1e5 	.word	0x0800e1e5
 800e1bc:	2300      	movs	r3, #0
 800e1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1c2:	e2f0      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e1c4:	2304      	movs	r3, #4
 800e1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ca:	e2ec      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e1cc:	2308      	movs	r3, #8
 800e1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1d2:	e2e8      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e1d4:	2310      	movs	r3, #16
 800e1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1da:	e2e4      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e1dc:	2320      	movs	r3, #32
 800e1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1e2:	e2e0      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e1e4:	2340      	movs	r3, #64	; 0x40
 800e1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ea:	e2dc      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e1ec:	2380      	movs	r3, #128	; 0x80
 800e1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1f2:	e2d8      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	4a4f      	ldr	r2, [pc, #316]	; (800e338 <UART_SetConfig+0x340>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d130      	bne.n	800e260 <UART_SetConfig+0x268>
 800e1fe:	4b4c      	ldr	r3, [pc, #304]	; (800e330 <UART_SetConfig+0x338>)
 800e200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e202:	f003 0307 	and.w	r3, r3, #7
 800e206:	2b05      	cmp	r3, #5
 800e208:	d826      	bhi.n	800e258 <UART_SetConfig+0x260>
 800e20a:	a201      	add	r2, pc, #4	; (adr r2, 800e210 <UART_SetConfig+0x218>)
 800e20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e210:	0800e229 	.word	0x0800e229
 800e214:	0800e231 	.word	0x0800e231
 800e218:	0800e239 	.word	0x0800e239
 800e21c:	0800e241 	.word	0x0800e241
 800e220:	0800e249 	.word	0x0800e249
 800e224:	0800e251 	.word	0x0800e251
 800e228:	2300      	movs	r3, #0
 800e22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e22e:	e2ba      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e230:	2304      	movs	r3, #4
 800e232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e236:	e2b6      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e238:	2308      	movs	r3, #8
 800e23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e23e:	e2b2      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e240:	2310      	movs	r3, #16
 800e242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e246:	e2ae      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e248:	2320      	movs	r3, #32
 800e24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e24e:	e2aa      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e250:	2340      	movs	r3, #64	; 0x40
 800e252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e256:	e2a6      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e258:	2380      	movs	r3, #128	; 0x80
 800e25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25e:	e2a2      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	4a35      	ldr	r2, [pc, #212]	; (800e33c <UART_SetConfig+0x344>)
 800e266:	4293      	cmp	r3, r2
 800e268:	d130      	bne.n	800e2cc <UART_SetConfig+0x2d4>
 800e26a:	4b31      	ldr	r3, [pc, #196]	; (800e330 <UART_SetConfig+0x338>)
 800e26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e26e:	f003 0307 	and.w	r3, r3, #7
 800e272:	2b05      	cmp	r3, #5
 800e274:	d826      	bhi.n	800e2c4 <UART_SetConfig+0x2cc>
 800e276:	a201      	add	r2, pc, #4	; (adr r2, 800e27c <UART_SetConfig+0x284>)
 800e278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e27c:	0800e295 	.word	0x0800e295
 800e280:	0800e29d 	.word	0x0800e29d
 800e284:	0800e2a5 	.word	0x0800e2a5
 800e288:	0800e2ad 	.word	0x0800e2ad
 800e28c:	0800e2b5 	.word	0x0800e2b5
 800e290:	0800e2bd 	.word	0x0800e2bd
 800e294:	2300      	movs	r3, #0
 800e296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e29a:	e284      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e29c:	2304      	movs	r3, #4
 800e29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2a2:	e280      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e2a4:	2308      	movs	r3, #8
 800e2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2aa:	e27c      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e2ac:	2310      	movs	r3, #16
 800e2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2b2:	e278      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e2b4:	2320      	movs	r3, #32
 800e2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ba:	e274      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e2bc:	2340      	movs	r3, #64	; 0x40
 800e2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2c2:	e270      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e2c4:	2380      	movs	r3, #128	; 0x80
 800e2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ca:	e26c      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4a1b      	ldr	r2, [pc, #108]	; (800e340 <UART_SetConfig+0x348>)
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d142      	bne.n	800e35c <UART_SetConfig+0x364>
 800e2d6:	4b16      	ldr	r3, [pc, #88]	; (800e330 <UART_SetConfig+0x338>)
 800e2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2da:	f003 0307 	and.w	r3, r3, #7
 800e2de:	2b05      	cmp	r3, #5
 800e2e0:	d838      	bhi.n	800e354 <UART_SetConfig+0x35c>
 800e2e2:	a201      	add	r2, pc, #4	; (adr r2, 800e2e8 <UART_SetConfig+0x2f0>)
 800e2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2e8:	0800e301 	.word	0x0800e301
 800e2ec:	0800e309 	.word	0x0800e309
 800e2f0:	0800e311 	.word	0x0800e311
 800e2f4:	0800e319 	.word	0x0800e319
 800e2f8:	0800e345 	.word	0x0800e345
 800e2fc:	0800e34d 	.word	0x0800e34d
 800e300:	2300      	movs	r3, #0
 800e302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e306:	e24e      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e308:	2304      	movs	r3, #4
 800e30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e30e:	e24a      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e310:	2308      	movs	r3, #8
 800e312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e316:	e246      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e318:	2310      	movs	r3, #16
 800e31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e31e:	e242      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e320:	cfff69f3 	.word	0xcfff69f3
 800e324:	58000c00 	.word	0x58000c00
 800e328:	11fff4ff 	.word	0x11fff4ff
 800e32c:	40011000 	.word	0x40011000
 800e330:	58024400 	.word	0x58024400
 800e334:	40004400 	.word	0x40004400
 800e338:	40004800 	.word	0x40004800
 800e33c:	40004c00 	.word	0x40004c00
 800e340:	40005000 	.word	0x40005000
 800e344:	2320      	movs	r3, #32
 800e346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34a:	e22c      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e34c:	2340      	movs	r3, #64	; 0x40
 800e34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e352:	e228      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e354:	2380      	movs	r3, #128	; 0x80
 800e356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e35a:	e224      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4ab1      	ldr	r2, [pc, #708]	; (800e628 <UART_SetConfig+0x630>)
 800e362:	4293      	cmp	r3, r2
 800e364:	d176      	bne.n	800e454 <UART_SetConfig+0x45c>
 800e366:	4bb1      	ldr	r3, [pc, #708]	; (800e62c <UART_SetConfig+0x634>)
 800e368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e36a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e36e:	2b28      	cmp	r3, #40	; 0x28
 800e370:	d86c      	bhi.n	800e44c <UART_SetConfig+0x454>
 800e372:	a201      	add	r2, pc, #4	; (adr r2, 800e378 <UART_SetConfig+0x380>)
 800e374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e378:	0800e41d 	.word	0x0800e41d
 800e37c:	0800e44d 	.word	0x0800e44d
 800e380:	0800e44d 	.word	0x0800e44d
 800e384:	0800e44d 	.word	0x0800e44d
 800e388:	0800e44d 	.word	0x0800e44d
 800e38c:	0800e44d 	.word	0x0800e44d
 800e390:	0800e44d 	.word	0x0800e44d
 800e394:	0800e44d 	.word	0x0800e44d
 800e398:	0800e425 	.word	0x0800e425
 800e39c:	0800e44d 	.word	0x0800e44d
 800e3a0:	0800e44d 	.word	0x0800e44d
 800e3a4:	0800e44d 	.word	0x0800e44d
 800e3a8:	0800e44d 	.word	0x0800e44d
 800e3ac:	0800e44d 	.word	0x0800e44d
 800e3b0:	0800e44d 	.word	0x0800e44d
 800e3b4:	0800e44d 	.word	0x0800e44d
 800e3b8:	0800e42d 	.word	0x0800e42d
 800e3bc:	0800e44d 	.word	0x0800e44d
 800e3c0:	0800e44d 	.word	0x0800e44d
 800e3c4:	0800e44d 	.word	0x0800e44d
 800e3c8:	0800e44d 	.word	0x0800e44d
 800e3cc:	0800e44d 	.word	0x0800e44d
 800e3d0:	0800e44d 	.word	0x0800e44d
 800e3d4:	0800e44d 	.word	0x0800e44d
 800e3d8:	0800e435 	.word	0x0800e435
 800e3dc:	0800e44d 	.word	0x0800e44d
 800e3e0:	0800e44d 	.word	0x0800e44d
 800e3e4:	0800e44d 	.word	0x0800e44d
 800e3e8:	0800e44d 	.word	0x0800e44d
 800e3ec:	0800e44d 	.word	0x0800e44d
 800e3f0:	0800e44d 	.word	0x0800e44d
 800e3f4:	0800e44d 	.word	0x0800e44d
 800e3f8:	0800e43d 	.word	0x0800e43d
 800e3fc:	0800e44d 	.word	0x0800e44d
 800e400:	0800e44d 	.word	0x0800e44d
 800e404:	0800e44d 	.word	0x0800e44d
 800e408:	0800e44d 	.word	0x0800e44d
 800e40c:	0800e44d 	.word	0x0800e44d
 800e410:	0800e44d 	.word	0x0800e44d
 800e414:	0800e44d 	.word	0x0800e44d
 800e418:	0800e445 	.word	0x0800e445
 800e41c:	2301      	movs	r3, #1
 800e41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e422:	e1c0      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e424:	2304      	movs	r3, #4
 800e426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e42a:	e1bc      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e42c:	2308      	movs	r3, #8
 800e42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e432:	e1b8      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e434:	2310      	movs	r3, #16
 800e436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43a:	e1b4      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e43c:	2320      	movs	r3, #32
 800e43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e442:	e1b0      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e444:	2340      	movs	r3, #64	; 0x40
 800e446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e44a:	e1ac      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e44c:	2380      	movs	r3, #128	; 0x80
 800e44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e452:	e1a8      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4a75      	ldr	r2, [pc, #468]	; (800e630 <UART_SetConfig+0x638>)
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d130      	bne.n	800e4c0 <UART_SetConfig+0x4c8>
 800e45e:	4b73      	ldr	r3, [pc, #460]	; (800e62c <UART_SetConfig+0x634>)
 800e460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e462:	f003 0307 	and.w	r3, r3, #7
 800e466:	2b05      	cmp	r3, #5
 800e468:	d826      	bhi.n	800e4b8 <UART_SetConfig+0x4c0>
 800e46a:	a201      	add	r2, pc, #4	; (adr r2, 800e470 <UART_SetConfig+0x478>)
 800e46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e470:	0800e489 	.word	0x0800e489
 800e474:	0800e491 	.word	0x0800e491
 800e478:	0800e499 	.word	0x0800e499
 800e47c:	0800e4a1 	.word	0x0800e4a1
 800e480:	0800e4a9 	.word	0x0800e4a9
 800e484:	0800e4b1 	.word	0x0800e4b1
 800e488:	2300      	movs	r3, #0
 800e48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e48e:	e18a      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e490:	2304      	movs	r3, #4
 800e492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e496:	e186      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e498:	2308      	movs	r3, #8
 800e49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e49e:	e182      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e4a0:	2310      	movs	r3, #16
 800e4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4a6:	e17e      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e4a8:	2320      	movs	r3, #32
 800e4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ae:	e17a      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e4b0:	2340      	movs	r3, #64	; 0x40
 800e4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4b6:	e176      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e4b8:	2380      	movs	r3, #128	; 0x80
 800e4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4be:	e172      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	4a5b      	ldr	r2, [pc, #364]	; (800e634 <UART_SetConfig+0x63c>)
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d130      	bne.n	800e52c <UART_SetConfig+0x534>
 800e4ca:	4b58      	ldr	r3, [pc, #352]	; (800e62c <UART_SetConfig+0x634>)
 800e4cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4ce:	f003 0307 	and.w	r3, r3, #7
 800e4d2:	2b05      	cmp	r3, #5
 800e4d4:	d826      	bhi.n	800e524 <UART_SetConfig+0x52c>
 800e4d6:	a201      	add	r2, pc, #4	; (adr r2, 800e4dc <UART_SetConfig+0x4e4>)
 800e4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4dc:	0800e4f5 	.word	0x0800e4f5
 800e4e0:	0800e4fd 	.word	0x0800e4fd
 800e4e4:	0800e505 	.word	0x0800e505
 800e4e8:	0800e50d 	.word	0x0800e50d
 800e4ec:	0800e515 	.word	0x0800e515
 800e4f0:	0800e51d 	.word	0x0800e51d
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4fa:	e154      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e4fc:	2304      	movs	r3, #4
 800e4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e502:	e150      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e504:	2308      	movs	r3, #8
 800e506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e50a:	e14c      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e50c:	2310      	movs	r3, #16
 800e50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e512:	e148      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e514:	2320      	movs	r3, #32
 800e516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e51a:	e144      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e51c:	2340      	movs	r3, #64	; 0x40
 800e51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e522:	e140      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e524:	2380      	movs	r3, #128	; 0x80
 800e526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e52a:	e13c      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4a41      	ldr	r2, [pc, #260]	; (800e638 <UART_SetConfig+0x640>)
 800e532:	4293      	cmp	r3, r2
 800e534:	f040 8082 	bne.w	800e63c <UART_SetConfig+0x644>
 800e538:	4b3c      	ldr	r3, [pc, #240]	; (800e62c <UART_SetConfig+0x634>)
 800e53a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e53c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e540:	2b28      	cmp	r3, #40	; 0x28
 800e542:	d86d      	bhi.n	800e620 <UART_SetConfig+0x628>
 800e544:	a201      	add	r2, pc, #4	; (adr r2, 800e54c <UART_SetConfig+0x554>)
 800e546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e54a:	bf00      	nop
 800e54c:	0800e5f1 	.word	0x0800e5f1
 800e550:	0800e621 	.word	0x0800e621
 800e554:	0800e621 	.word	0x0800e621
 800e558:	0800e621 	.word	0x0800e621
 800e55c:	0800e621 	.word	0x0800e621
 800e560:	0800e621 	.word	0x0800e621
 800e564:	0800e621 	.word	0x0800e621
 800e568:	0800e621 	.word	0x0800e621
 800e56c:	0800e5f9 	.word	0x0800e5f9
 800e570:	0800e621 	.word	0x0800e621
 800e574:	0800e621 	.word	0x0800e621
 800e578:	0800e621 	.word	0x0800e621
 800e57c:	0800e621 	.word	0x0800e621
 800e580:	0800e621 	.word	0x0800e621
 800e584:	0800e621 	.word	0x0800e621
 800e588:	0800e621 	.word	0x0800e621
 800e58c:	0800e601 	.word	0x0800e601
 800e590:	0800e621 	.word	0x0800e621
 800e594:	0800e621 	.word	0x0800e621
 800e598:	0800e621 	.word	0x0800e621
 800e59c:	0800e621 	.word	0x0800e621
 800e5a0:	0800e621 	.word	0x0800e621
 800e5a4:	0800e621 	.word	0x0800e621
 800e5a8:	0800e621 	.word	0x0800e621
 800e5ac:	0800e609 	.word	0x0800e609
 800e5b0:	0800e621 	.word	0x0800e621
 800e5b4:	0800e621 	.word	0x0800e621
 800e5b8:	0800e621 	.word	0x0800e621
 800e5bc:	0800e621 	.word	0x0800e621
 800e5c0:	0800e621 	.word	0x0800e621
 800e5c4:	0800e621 	.word	0x0800e621
 800e5c8:	0800e621 	.word	0x0800e621
 800e5cc:	0800e611 	.word	0x0800e611
 800e5d0:	0800e621 	.word	0x0800e621
 800e5d4:	0800e621 	.word	0x0800e621
 800e5d8:	0800e621 	.word	0x0800e621
 800e5dc:	0800e621 	.word	0x0800e621
 800e5e0:	0800e621 	.word	0x0800e621
 800e5e4:	0800e621 	.word	0x0800e621
 800e5e8:	0800e621 	.word	0x0800e621
 800e5ec:	0800e619 	.word	0x0800e619
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5f6:	e0d6      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e5f8:	2304      	movs	r3, #4
 800e5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5fe:	e0d2      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e600:	2308      	movs	r3, #8
 800e602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e606:	e0ce      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e608:	2310      	movs	r3, #16
 800e60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e60e:	e0ca      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e610:	2320      	movs	r3, #32
 800e612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e616:	e0c6      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e618:	2340      	movs	r3, #64	; 0x40
 800e61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e61e:	e0c2      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e620:	2380      	movs	r3, #128	; 0x80
 800e622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e626:	e0be      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e628:	40011400 	.word	0x40011400
 800e62c:	58024400 	.word	0x58024400
 800e630:	40007800 	.word	0x40007800
 800e634:	40007c00 	.word	0x40007c00
 800e638:	40011800 	.word	0x40011800
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4aad      	ldr	r2, [pc, #692]	; (800e8f8 <UART_SetConfig+0x900>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d176      	bne.n	800e734 <UART_SetConfig+0x73c>
 800e646:	4bad      	ldr	r3, [pc, #692]	; (800e8fc <UART_SetConfig+0x904>)
 800e648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e64a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e64e:	2b28      	cmp	r3, #40	; 0x28
 800e650:	d86c      	bhi.n	800e72c <UART_SetConfig+0x734>
 800e652:	a201      	add	r2, pc, #4	; (adr r2, 800e658 <UART_SetConfig+0x660>)
 800e654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e658:	0800e6fd 	.word	0x0800e6fd
 800e65c:	0800e72d 	.word	0x0800e72d
 800e660:	0800e72d 	.word	0x0800e72d
 800e664:	0800e72d 	.word	0x0800e72d
 800e668:	0800e72d 	.word	0x0800e72d
 800e66c:	0800e72d 	.word	0x0800e72d
 800e670:	0800e72d 	.word	0x0800e72d
 800e674:	0800e72d 	.word	0x0800e72d
 800e678:	0800e705 	.word	0x0800e705
 800e67c:	0800e72d 	.word	0x0800e72d
 800e680:	0800e72d 	.word	0x0800e72d
 800e684:	0800e72d 	.word	0x0800e72d
 800e688:	0800e72d 	.word	0x0800e72d
 800e68c:	0800e72d 	.word	0x0800e72d
 800e690:	0800e72d 	.word	0x0800e72d
 800e694:	0800e72d 	.word	0x0800e72d
 800e698:	0800e70d 	.word	0x0800e70d
 800e69c:	0800e72d 	.word	0x0800e72d
 800e6a0:	0800e72d 	.word	0x0800e72d
 800e6a4:	0800e72d 	.word	0x0800e72d
 800e6a8:	0800e72d 	.word	0x0800e72d
 800e6ac:	0800e72d 	.word	0x0800e72d
 800e6b0:	0800e72d 	.word	0x0800e72d
 800e6b4:	0800e72d 	.word	0x0800e72d
 800e6b8:	0800e715 	.word	0x0800e715
 800e6bc:	0800e72d 	.word	0x0800e72d
 800e6c0:	0800e72d 	.word	0x0800e72d
 800e6c4:	0800e72d 	.word	0x0800e72d
 800e6c8:	0800e72d 	.word	0x0800e72d
 800e6cc:	0800e72d 	.word	0x0800e72d
 800e6d0:	0800e72d 	.word	0x0800e72d
 800e6d4:	0800e72d 	.word	0x0800e72d
 800e6d8:	0800e71d 	.word	0x0800e71d
 800e6dc:	0800e72d 	.word	0x0800e72d
 800e6e0:	0800e72d 	.word	0x0800e72d
 800e6e4:	0800e72d 	.word	0x0800e72d
 800e6e8:	0800e72d 	.word	0x0800e72d
 800e6ec:	0800e72d 	.word	0x0800e72d
 800e6f0:	0800e72d 	.word	0x0800e72d
 800e6f4:	0800e72d 	.word	0x0800e72d
 800e6f8:	0800e725 	.word	0x0800e725
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e702:	e050      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e704:	2304      	movs	r3, #4
 800e706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e70a:	e04c      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e70c:	2308      	movs	r3, #8
 800e70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e712:	e048      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e714:	2310      	movs	r3, #16
 800e716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e71a:	e044      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e71c:	2320      	movs	r3, #32
 800e71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e722:	e040      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e724:	2340      	movs	r3, #64	; 0x40
 800e726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e72a:	e03c      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e72c:	2380      	movs	r3, #128	; 0x80
 800e72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e732:	e038      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4a71      	ldr	r2, [pc, #452]	; (800e900 <UART_SetConfig+0x908>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d130      	bne.n	800e7a0 <UART_SetConfig+0x7a8>
 800e73e:	4b6f      	ldr	r3, [pc, #444]	; (800e8fc <UART_SetConfig+0x904>)
 800e740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e742:	f003 0307 	and.w	r3, r3, #7
 800e746:	2b05      	cmp	r3, #5
 800e748:	d826      	bhi.n	800e798 <UART_SetConfig+0x7a0>
 800e74a:	a201      	add	r2, pc, #4	; (adr r2, 800e750 <UART_SetConfig+0x758>)
 800e74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e750:	0800e769 	.word	0x0800e769
 800e754:	0800e771 	.word	0x0800e771
 800e758:	0800e779 	.word	0x0800e779
 800e75c:	0800e781 	.word	0x0800e781
 800e760:	0800e789 	.word	0x0800e789
 800e764:	0800e791 	.word	0x0800e791
 800e768:	2302      	movs	r3, #2
 800e76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e76e:	e01a      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e770:	2304      	movs	r3, #4
 800e772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e776:	e016      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e778:	2308      	movs	r3, #8
 800e77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e77e:	e012      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e780:	2310      	movs	r3, #16
 800e782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e786:	e00e      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e788:	2320      	movs	r3, #32
 800e78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e78e:	e00a      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e790:	2340      	movs	r3, #64	; 0x40
 800e792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e796:	e006      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e798:	2380      	movs	r3, #128	; 0x80
 800e79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e79e:	e002      	b.n	800e7a6 <UART_SetConfig+0x7ae>
 800e7a0:	2380      	movs	r3, #128	; 0x80
 800e7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	4a55      	ldr	r2, [pc, #340]	; (800e900 <UART_SetConfig+0x908>)
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	f040 80f8 	bne.w	800e9a2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e7b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e7b6:	2b20      	cmp	r3, #32
 800e7b8:	dc46      	bgt.n	800e848 <UART_SetConfig+0x850>
 800e7ba:	2b02      	cmp	r3, #2
 800e7bc:	db75      	blt.n	800e8aa <UART_SetConfig+0x8b2>
 800e7be:	3b02      	subs	r3, #2
 800e7c0:	2b1e      	cmp	r3, #30
 800e7c2:	d872      	bhi.n	800e8aa <UART_SetConfig+0x8b2>
 800e7c4:	a201      	add	r2, pc, #4	; (adr r2, 800e7cc <UART_SetConfig+0x7d4>)
 800e7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ca:	bf00      	nop
 800e7cc:	0800e84f 	.word	0x0800e84f
 800e7d0:	0800e8ab 	.word	0x0800e8ab
 800e7d4:	0800e857 	.word	0x0800e857
 800e7d8:	0800e8ab 	.word	0x0800e8ab
 800e7dc:	0800e8ab 	.word	0x0800e8ab
 800e7e0:	0800e8ab 	.word	0x0800e8ab
 800e7e4:	0800e867 	.word	0x0800e867
 800e7e8:	0800e8ab 	.word	0x0800e8ab
 800e7ec:	0800e8ab 	.word	0x0800e8ab
 800e7f0:	0800e8ab 	.word	0x0800e8ab
 800e7f4:	0800e8ab 	.word	0x0800e8ab
 800e7f8:	0800e8ab 	.word	0x0800e8ab
 800e7fc:	0800e8ab 	.word	0x0800e8ab
 800e800:	0800e8ab 	.word	0x0800e8ab
 800e804:	0800e877 	.word	0x0800e877
 800e808:	0800e8ab 	.word	0x0800e8ab
 800e80c:	0800e8ab 	.word	0x0800e8ab
 800e810:	0800e8ab 	.word	0x0800e8ab
 800e814:	0800e8ab 	.word	0x0800e8ab
 800e818:	0800e8ab 	.word	0x0800e8ab
 800e81c:	0800e8ab 	.word	0x0800e8ab
 800e820:	0800e8ab 	.word	0x0800e8ab
 800e824:	0800e8ab 	.word	0x0800e8ab
 800e828:	0800e8ab 	.word	0x0800e8ab
 800e82c:	0800e8ab 	.word	0x0800e8ab
 800e830:	0800e8ab 	.word	0x0800e8ab
 800e834:	0800e8ab 	.word	0x0800e8ab
 800e838:	0800e8ab 	.word	0x0800e8ab
 800e83c:	0800e8ab 	.word	0x0800e8ab
 800e840:	0800e8ab 	.word	0x0800e8ab
 800e844:	0800e89d 	.word	0x0800e89d
 800e848:	2b40      	cmp	r3, #64	; 0x40
 800e84a:	d02a      	beq.n	800e8a2 <UART_SetConfig+0x8aa>
 800e84c:	e02d      	b.n	800e8aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e84e:	f7fe f879 	bl	800c944 <HAL_RCCEx_GetD3PCLK1Freq>
 800e852:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e854:	e02f      	b.n	800e8b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e85a:	4618      	mov	r0, r3
 800e85c:	f7fe f888 	bl	800c970 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e864:	e027      	b.n	800e8b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e866:	f107 0318 	add.w	r3, r7, #24
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7fe f9d4 	bl	800cc18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e874:	e01f      	b.n	800e8b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e876:	4b21      	ldr	r3, [pc, #132]	; (800e8fc <UART_SetConfig+0x904>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f003 0320 	and.w	r3, r3, #32
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d009      	beq.n	800e896 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e882:	4b1e      	ldr	r3, [pc, #120]	; (800e8fc <UART_SetConfig+0x904>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	08db      	lsrs	r3, r3, #3
 800e888:	f003 0303 	and.w	r3, r3, #3
 800e88c:	4a1d      	ldr	r2, [pc, #116]	; (800e904 <UART_SetConfig+0x90c>)
 800e88e:	fa22 f303 	lsr.w	r3, r2, r3
 800e892:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e894:	e00f      	b.n	800e8b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e896:	4b1b      	ldr	r3, [pc, #108]	; (800e904 <UART_SetConfig+0x90c>)
 800e898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e89a:	e00c      	b.n	800e8b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e89c:	4b1a      	ldr	r3, [pc, #104]	; (800e908 <UART_SetConfig+0x910>)
 800e89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8a0:	e009      	b.n	800e8b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8a8:	e005      	b.n	800e8b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e8b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e8b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	f000 81ee 	beq.w	800ec9a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c2:	4a12      	ldr	r2, [pc, #72]	; (800e90c <UART_SetConfig+0x914>)
 800e8c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8d0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	685a      	ldr	r2, [r3, #4]
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	005b      	lsls	r3, r3, #1
 800e8da:	4413      	add	r3, r2
 800e8dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d305      	bcc.n	800e8ee <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e8e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d910      	bls.n	800e910 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e8f4:	e1d1      	b.n	800ec9a <UART_SetConfig+0xca2>
 800e8f6:	bf00      	nop
 800e8f8:	40011c00 	.word	0x40011c00
 800e8fc:	58024400 	.word	0x58024400
 800e900:	58000c00 	.word	0x58000c00
 800e904:	03d09000 	.word	0x03d09000
 800e908:	003d0900 	.word	0x003d0900
 800e90c:	08010d48 	.word	0x08010d48
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e912:	2200      	movs	r2, #0
 800e914:	60bb      	str	r3, [r7, #8]
 800e916:	60fa      	str	r2, [r7, #12]
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e91c:	4ac0      	ldr	r2, [pc, #768]	; (800ec20 <UART_SetConfig+0xc28>)
 800e91e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e922:	b29b      	uxth	r3, r3
 800e924:	2200      	movs	r2, #0
 800e926:	603b      	str	r3, [r7, #0]
 800e928:	607a      	str	r2, [r7, #4]
 800e92a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e92e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e932:	f7f1 fd2d 	bl	8000390 <__aeabi_uldivmod>
 800e936:	4602      	mov	r2, r0
 800e938:	460b      	mov	r3, r1
 800e93a:	4610      	mov	r0, r2
 800e93c:	4619      	mov	r1, r3
 800e93e:	f04f 0200 	mov.w	r2, #0
 800e942:	f04f 0300 	mov.w	r3, #0
 800e946:	020b      	lsls	r3, r1, #8
 800e948:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e94c:	0202      	lsls	r2, r0, #8
 800e94e:	6979      	ldr	r1, [r7, #20]
 800e950:	6849      	ldr	r1, [r1, #4]
 800e952:	0849      	lsrs	r1, r1, #1
 800e954:	2000      	movs	r0, #0
 800e956:	460c      	mov	r4, r1
 800e958:	4605      	mov	r5, r0
 800e95a:	eb12 0804 	adds.w	r8, r2, r4
 800e95e:	eb43 0905 	adc.w	r9, r3, r5
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	2200      	movs	r2, #0
 800e968:	469a      	mov	sl, r3
 800e96a:	4693      	mov	fp, r2
 800e96c:	4652      	mov	r2, sl
 800e96e:	465b      	mov	r3, fp
 800e970:	4640      	mov	r0, r8
 800e972:	4649      	mov	r1, r9
 800e974:	f7f1 fd0c 	bl	8000390 <__aeabi_uldivmod>
 800e978:	4602      	mov	r2, r0
 800e97a:	460b      	mov	r3, r1
 800e97c:	4613      	mov	r3, r2
 800e97e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e986:	d308      	bcc.n	800e99a <UART_SetConfig+0x9a2>
 800e988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e98a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e98e:	d204      	bcs.n	800e99a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e996:	60da      	str	r2, [r3, #12]
 800e998:	e17f      	b.n	800ec9a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e99a:	2301      	movs	r3, #1
 800e99c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e9a0:	e17b      	b.n	800ec9a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	69db      	ldr	r3, [r3, #28]
 800e9a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9aa:	f040 80bd 	bne.w	800eb28 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e9ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e9b2:	2b20      	cmp	r3, #32
 800e9b4:	dc48      	bgt.n	800ea48 <UART_SetConfig+0xa50>
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	db7b      	blt.n	800eab2 <UART_SetConfig+0xaba>
 800e9ba:	2b20      	cmp	r3, #32
 800e9bc:	d879      	bhi.n	800eab2 <UART_SetConfig+0xaba>
 800e9be:	a201      	add	r2, pc, #4	; (adr r2, 800e9c4 <UART_SetConfig+0x9cc>)
 800e9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9c4:	0800ea4f 	.word	0x0800ea4f
 800e9c8:	0800ea57 	.word	0x0800ea57
 800e9cc:	0800eab3 	.word	0x0800eab3
 800e9d0:	0800eab3 	.word	0x0800eab3
 800e9d4:	0800ea5f 	.word	0x0800ea5f
 800e9d8:	0800eab3 	.word	0x0800eab3
 800e9dc:	0800eab3 	.word	0x0800eab3
 800e9e0:	0800eab3 	.word	0x0800eab3
 800e9e4:	0800ea6f 	.word	0x0800ea6f
 800e9e8:	0800eab3 	.word	0x0800eab3
 800e9ec:	0800eab3 	.word	0x0800eab3
 800e9f0:	0800eab3 	.word	0x0800eab3
 800e9f4:	0800eab3 	.word	0x0800eab3
 800e9f8:	0800eab3 	.word	0x0800eab3
 800e9fc:	0800eab3 	.word	0x0800eab3
 800ea00:	0800eab3 	.word	0x0800eab3
 800ea04:	0800ea7f 	.word	0x0800ea7f
 800ea08:	0800eab3 	.word	0x0800eab3
 800ea0c:	0800eab3 	.word	0x0800eab3
 800ea10:	0800eab3 	.word	0x0800eab3
 800ea14:	0800eab3 	.word	0x0800eab3
 800ea18:	0800eab3 	.word	0x0800eab3
 800ea1c:	0800eab3 	.word	0x0800eab3
 800ea20:	0800eab3 	.word	0x0800eab3
 800ea24:	0800eab3 	.word	0x0800eab3
 800ea28:	0800eab3 	.word	0x0800eab3
 800ea2c:	0800eab3 	.word	0x0800eab3
 800ea30:	0800eab3 	.word	0x0800eab3
 800ea34:	0800eab3 	.word	0x0800eab3
 800ea38:	0800eab3 	.word	0x0800eab3
 800ea3c:	0800eab3 	.word	0x0800eab3
 800ea40:	0800eab3 	.word	0x0800eab3
 800ea44:	0800eaa5 	.word	0x0800eaa5
 800ea48:	2b40      	cmp	r3, #64	; 0x40
 800ea4a:	d02e      	beq.n	800eaaa <UART_SetConfig+0xab2>
 800ea4c:	e031      	b.n	800eab2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea4e:	f7fc fd8f 	bl	800b570 <HAL_RCC_GetPCLK1Freq>
 800ea52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea54:	e033      	b.n	800eabe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea56:	f7fc fda1 	bl	800b59c <HAL_RCC_GetPCLK2Freq>
 800ea5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea5c:	e02f      	b.n	800eabe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7fd ff84 	bl	800c970 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea6c:	e027      	b.n	800eabe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea6e:	f107 0318 	add.w	r3, r7, #24
 800ea72:	4618      	mov	r0, r3
 800ea74:	f7fe f8d0 	bl	800cc18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea78:	69fb      	ldr	r3, [r7, #28]
 800ea7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea7c:	e01f      	b.n	800eabe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea7e:	4b69      	ldr	r3, [pc, #420]	; (800ec24 <UART_SetConfig+0xc2c>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f003 0320 	and.w	r3, r3, #32
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d009      	beq.n	800ea9e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea8a:	4b66      	ldr	r3, [pc, #408]	; (800ec24 <UART_SetConfig+0xc2c>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	08db      	lsrs	r3, r3, #3
 800ea90:	f003 0303 	and.w	r3, r3, #3
 800ea94:	4a64      	ldr	r2, [pc, #400]	; (800ec28 <UART_SetConfig+0xc30>)
 800ea96:	fa22 f303 	lsr.w	r3, r2, r3
 800ea9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ea9c:	e00f      	b.n	800eabe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ea9e:	4b62      	ldr	r3, [pc, #392]	; (800ec28 <UART_SetConfig+0xc30>)
 800eaa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaa2:	e00c      	b.n	800eabe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eaa4:	4b61      	ldr	r3, [pc, #388]	; (800ec2c <UART_SetConfig+0xc34>)
 800eaa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaa8:	e009      	b.n	800eabe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eaaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eaae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eab0:	e005      	b.n	800eabe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800eab2:	2300      	movs	r3, #0
 800eab4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eab6:	2301      	movs	r3, #1
 800eab8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eabc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eabe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	f000 80ea 	beq.w	800ec9a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaca:	4a55      	ldr	r2, [pc, #340]	; (800ec20 <UART_SetConfig+0xc28>)
 800eacc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ead0:	461a      	mov	r2, r3
 800ead2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ead4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ead8:	005a      	lsls	r2, r3, #1
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	085b      	lsrs	r3, r3, #1
 800eae0:	441a      	add	r2, r3
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	fbb2 f3f3 	udiv	r3, r2, r3
 800eaea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eaec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaee:	2b0f      	cmp	r3, #15
 800eaf0:	d916      	bls.n	800eb20 <UART_SetConfig+0xb28>
 800eaf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaf8:	d212      	bcs.n	800eb20 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	f023 030f 	bic.w	r3, r3, #15
 800eb02:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb06:	085b      	lsrs	r3, r3, #1
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	f003 0307 	and.w	r3, r3, #7
 800eb0e:	b29a      	uxth	r2, r3
 800eb10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eb12:	4313      	orrs	r3, r2
 800eb14:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800eb1c:	60da      	str	r2, [r3, #12]
 800eb1e:	e0bc      	b.n	800ec9a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800eb20:	2301      	movs	r3, #1
 800eb22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eb26:	e0b8      	b.n	800ec9a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800eb28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eb2c:	2b20      	cmp	r3, #32
 800eb2e:	dc4b      	bgt.n	800ebc8 <UART_SetConfig+0xbd0>
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	f2c0 8087 	blt.w	800ec44 <UART_SetConfig+0xc4c>
 800eb36:	2b20      	cmp	r3, #32
 800eb38:	f200 8084 	bhi.w	800ec44 <UART_SetConfig+0xc4c>
 800eb3c:	a201      	add	r2, pc, #4	; (adr r2, 800eb44 <UART_SetConfig+0xb4c>)
 800eb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb42:	bf00      	nop
 800eb44:	0800ebcf 	.word	0x0800ebcf
 800eb48:	0800ebd7 	.word	0x0800ebd7
 800eb4c:	0800ec45 	.word	0x0800ec45
 800eb50:	0800ec45 	.word	0x0800ec45
 800eb54:	0800ebdf 	.word	0x0800ebdf
 800eb58:	0800ec45 	.word	0x0800ec45
 800eb5c:	0800ec45 	.word	0x0800ec45
 800eb60:	0800ec45 	.word	0x0800ec45
 800eb64:	0800ebef 	.word	0x0800ebef
 800eb68:	0800ec45 	.word	0x0800ec45
 800eb6c:	0800ec45 	.word	0x0800ec45
 800eb70:	0800ec45 	.word	0x0800ec45
 800eb74:	0800ec45 	.word	0x0800ec45
 800eb78:	0800ec45 	.word	0x0800ec45
 800eb7c:	0800ec45 	.word	0x0800ec45
 800eb80:	0800ec45 	.word	0x0800ec45
 800eb84:	0800ebff 	.word	0x0800ebff
 800eb88:	0800ec45 	.word	0x0800ec45
 800eb8c:	0800ec45 	.word	0x0800ec45
 800eb90:	0800ec45 	.word	0x0800ec45
 800eb94:	0800ec45 	.word	0x0800ec45
 800eb98:	0800ec45 	.word	0x0800ec45
 800eb9c:	0800ec45 	.word	0x0800ec45
 800eba0:	0800ec45 	.word	0x0800ec45
 800eba4:	0800ec45 	.word	0x0800ec45
 800eba8:	0800ec45 	.word	0x0800ec45
 800ebac:	0800ec45 	.word	0x0800ec45
 800ebb0:	0800ec45 	.word	0x0800ec45
 800ebb4:	0800ec45 	.word	0x0800ec45
 800ebb8:	0800ec45 	.word	0x0800ec45
 800ebbc:	0800ec45 	.word	0x0800ec45
 800ebc0:	0800ec45 	.word	0x0800ec45
 800ebc4:	0800ec37 	.word	0x0800ec37
 800ebc8:	2b40      	cmp	r3, #64	; 0x40
 800ebca:	d037      	beq.n	800ec3c <UART_SetConfig+0xc44>
 800ebcc:	e03a      	b.n	800ec44 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ebce:	f7fc fccf 	bl	800b570 <HAL_RCC_GetPCLK1Freq>
 800ebd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ebd4:	e03c      	b.n	800ec50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ebd6:	f7fc fce1 	bl	800b59c <HAL_RCC_GetPCLK2Freq>
 800ebda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ebdc:	e038      	b.n	800ec50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ebde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7fd fec4 	bl	800c970 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ebe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebec:	e030      	b.n	800ec50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ebee:	f107 0318 	add.w	r3, r7, #24
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7fe f810 	bl	800cc18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebfc:	e028      	b.n	800ec50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebfe:	4b09      	ldr	r3, [pc, #36]	; (800ec24 <UART_SetConfig+0xc2c>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f003 0320 	and.w	r3, r3, #32
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d012      	beq.n	800ec30 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ec0a:	4b06      	ldr	r3, [pc, #24]	; (800ec24 <UART_SetConfig+0xc2c>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	08db      	lsrs	r3, r3, #3
 800ec10:	f003 0303 	and.w	r3, r3, #3
 800ec14:	4a04      	ldr	r2, [pc, #16]	; (800ec28 <UART_SetConfig+0xc30>)
 800ec16:	fa22 f303 	lsr.w	r3, r2, r3
 800ec1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec1c:	e018      	b.n	800ec50 <UART_SetConfig+0xc58>
 800ec1e:	bf00      	nop
 800ec20:	08010d48 	.word	0x08010d48
 800ec24:	58024400 	.word	0x58024400
 800ec28:	03d09000 	.word	0x03d09000
 800ec2c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ec30:	4b24      	ldr	r3, [pc, #144]	; (800ecc4 <UART_SetConfig+0xccc>)
 800ec32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec34:	e00c      	b.n	800ec50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec36:	4b24      	ldr	r3, [pc, #144]	; (800ecc8 <UART_SetConfig+0xcd0>)
 800ec38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec3a:	e009      	b.n	800ec50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec42:	e005      	b.n	800ec50 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ec44:	2300      	movs	r3, #0
 800ec46:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ec4e:	bf00      	nop
    }

    if (pclk != 0U)
 800ec50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d021      	beq.n	800ec9a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec5a:	4a1c      	ldr	r2, [pc, #112]	; (800eccc <UART_SetConfig+0xcd4>)
 800ec5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec60:	461a      	mov	r2, r3
 800ec62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec64:	fbb3 f2f2 	udiv	r2, r3, r2
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	085b      	lsrs	r3, r3, #1
 800ec6e:	441a      	add	r2, r3
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec78:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec7c:	2b0f      	cmp	r3, #15
 800ec7e:	d909      	bls.n	800ec94 <UART_SetConfig+0xc9c>
 800ec80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec86:	d205      	bcs.n	800ec94 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ec88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec8a:	b29a      	uxth	r2, r3
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	60da      	str	r2, [r3, #12]
 800ec92:	e002      	b.n	800ec9a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ec94:	2301      	movs	r3, #1
 800ec96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	2201      	movs	r2, #1
 800eca6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	2200      	movs	r2, #0
 800ecae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ecb6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3748      	adds	r7, #72	; 0x48
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ecc4:	03d09000 	.word	0x03d09000
 800ecc8:	003d0900 	.word	0x003d0900
 800eccc:	08010d48 	.word	0x08010d48

0800ecd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecdc:	f003 0301 	and.w	r3, r3, #1
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d00a      	beq.n	800ecfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	430a      	orrs	r2, r1
 800ecf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecfe:	f003 0302 	and.w	r3, r3, #2
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d00a      	beq.n	800ed1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	430a      	orrs	r2, r1
 800ed1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed20:	f003 0304 	and.w	r3, r3, #4
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d00a      	beq.n	800ed3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	430a      	orrs	r2, r1
 800ed3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed42:	f003 0308 	and.w	r3, r3, #8
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d00a      	beq.n	800ed60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	430a      	orrs	r2, r1
 800ed5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed64:	f003 0310 	and.w	r3, r3, #16
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d00a      	beq.n	800ed82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	689b      	ldr	r3, [r3, #8]
 800ed72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	430a      	orrs	r2, r1
 800ed80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed86:	f003 0320 	and.w	r3, r3, #32
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d00a      	beq.n	800eda4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	430a      	orrs	r2, r1
 800eda2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eda8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edac:	2b00      	cmp	r3, #0
 800edae:	d01a      	beq.n	800ede6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	685b      	ldr	r3, [r3, #4]
 800edb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	430a      	orrs	r2, r1
 800edc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800edce:	d10a      	bne.n	800ede6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	430a      	orrs	r2, r1
 800ede4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d00a      	beq.n	800ee08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	430a      	orrs	r2, r1
 800ee06:	605a      	str	r2, [r3, #4]
  }
}
 800ee08:	bf00      	nop
 800ee0a:	370c      	adds	r7, #12
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee12:	4770      	bx	lr

0800ee14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b098      	sub	sp, #96	; 0x60
 800ee18:	af02      	add	r7, sp, #8
 800ee1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ee24:	f7f5 fb00 	bl	8004428 <HAL_GetTick>
 800ee28:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	f003 0308 	and.w	r3, r3, #8
 800ee34:	2b08      	cmp	r3, #8
 800ee36:	d12f      	bne.n	800ee98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee3c:	9300      	str	r3, [sp, #0]
 800ee3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee40:	2200      	movs	r2, #0
 800ee42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f000 f88e 	bl	800ef68 <UART_WaitOnFlagUntilTimeout>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d022      	beq.n	800ee98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5a:	e853 3f00 	ldrex	r3, [r3]
 800ee5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ee60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee66:	653b      	str	r3, [r7, #80]	; 0x50
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee70:	647b      	str	r3, [r7, #68]	; 0x44
 800ee72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee78:	e841 2300 	strex	r3, r2, [r1]
 800ee7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ee7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d1e6      	bne.n	800ee52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2220      	movs	r2, #32
 800ee88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee94:	2303      	movs	r3, #3
 800ee96:	e063      	b.n	800ef60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f003 0304 	and.w	r3, r3, #4
 800eea2:	2b04      	cmp	r3, #4
 800eea4:	d149      	bne.n	800ef3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eea6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eeaa:	9300      	str	r3, [sp, #0]
 800eeac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eeae:	2200      	movs	r2, #0
 800eeb0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f000 f857 	bl	800ef68 <UART_WaitOnFlagUntilTimeout>
 800eeba:	4603      	mov	r3, r0
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d03c      	beq.n	800ef3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec8:	e853 3f00 	ldrex	r3, [r3]
 800eecc:	623b      	str	r3, [r7, #32]
   return(result);
 800eece:	6a3b      	ldr	r3, [r7, #32]
 800eed0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eed4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	461a      	mov	r2, r3
 800eedc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eede:	633b      	str	r3, [r7, #48]	; 0x30
 800eee0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eee2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eee6:	e841 2300 	strex	r3, r2, [r1]
 800eeea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d1e6      	bne.n	800eec0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	3308      	adds	r3, #8
 800eef8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	e853 3f00 	ldrex	r3, [r3]
 800ef00:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f023 0301 	bic.w	r3, r3, #1
 800ef08:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	3308      	adds	r3, #8
 800ef10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef12:	61fa      	str	r2, [r7, #28]
 800ef14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef16:	69b9      	ldr	r1, [r7, #24]
 800ef18:	69fa      	ldr	r2, [r7, #28]
 800ef1a:	e841 2300 	strex	r3, r2, [r1]
 800ef1e:	617b      	str	r3, [r7, #20]
   return(result);
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d1e5      	bne.n	800eef2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	2220      	movs	r2, #32
 800ef2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2200      	movs	r2, #0
 800ef32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef36:	2303      	movs	r3, #3
 800ef38:	e012      	b.n	800ef60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2220      	movs	r2, #32
 800ef3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2220      	movs	r2, #32
 800ef46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2200      	movs	r2, #0
 800ef54:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef5e:	2300      	movs	r3, #0
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3758      	adds	r7, #88	; 0x58
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b084      	sub	sp, #16
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	603b      	str	r3, [r7, #0]
 800ef74:	4613      	mov	r3, r2
 800ef76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef78:	e049      	b.n	800f00e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ef7a:	69bb      	ldr	r3, [r7, #24]
 800ef7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef80:	d045      	beq.n	800f00e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef82:	f7f5 fa51 	bl	8004428 <HAL_GetTick>
 800ef86:	4602      	mov	r2, r0
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	1ad3      	subs	r3, r2, r3
 800ef8c:	69ba      	ldr	r2, [r7, #24]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d302      	bcc.n	800ef98 <UART_WaitOnFlagUntilTimeout+0x30>
 800ef92:	69bb      	ldr	r3, [r7, #24]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d101      	bne.n	800ef9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ef98:	2303      	movs	r3, #3
 800ef9a:	e048      	b.n	800f02e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f003 0304 	and.w	r3, r3, #4
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d031      	beq.n	800f00e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	69db      	ldr	r3, [r3, #28]
 800efb0:	f003 0308 	and.w	r3, r3, #8
 800efb4:	2b08      	cmp	r3, #8
 800efb6:	d110      	bne.n	800efda <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	2208      	movs	r2, #8
 800efbe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800efc0:	68f8      	ldr	r0, [r7, #12]
 800efc2:	f000 f839 	bl	800f038 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	2208      	movs	r2, #8
 800efca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	2200      	movs	r2, #0
 800efd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800efd6:	2301      	movs	r3, #1
 800efd8:	e029      	b.n	800f02e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	69db      	ldr	r3, [r3, #28]
 800efe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800efe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800efe8:	d111      	bne.n	800f00e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eff4:	68f8      	ldr	r0, [r7, #12]
 800eff6:	f000 f81f 	bl	800f038 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	2220      	movs	r2, #32
 800effe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	2200      	movs	r2, #0
 800f006:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f00a:	2303      	movs	r3, #3
 800f00c:	e00f      	b.n	800f02e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	69da      	ldr	r2, [r3, #28]
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	4013      	ands	r3, r2
 800f018:	68ba      	ldr	r2, [r7, #8]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	bf0c      	ite	eq
 800f01e:	2301      	moveq	r3, #1
 800f020:	2300      	movne	r3, #0
 800f022:	b2db      	uxtb	r3, r3
 800f024:	461a      	mov	r2, r3
 800f026:	79fb      	ldrb	r3, [r7, #7]
 800f028:	429a      	cmp	r2, r3
 800f02a:	d0a6      	beq.n	800ef7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f02c:	2300      	movs	r3, #0
}
 800f02e:	4618      	mov	r0, r3
 800f030:	3710      	adds	r7, #16
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
	...

0800f038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f038:	b480      	push	{r7}
 800f03a:	b095      	sub	sp, #84	; 0x54
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f048:	e853 3f00 	ldrex	r3, [r3]
 800f04c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f050:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f054:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	461a      	mov	r2, r3
 800f05c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f05e:	643b      	str	r3, [r7, #64]	; 0x40
 800f060:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f062:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f064:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f066:	e841 2300 	strex	r3, r2, [r1]
 800f06a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d1e6      	bne.n	800f040 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	3308      	adds	r3, #8
 800f078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f07a:	6a3b      	ldr	r3, [r7, #32]
 800f07c:	e853 3f00 	ldrex	r3, [r3]
 800f080:	61fb      	str	r3, [r7, #28]
   return(result);
 800f082:	69fa      	ldr	r2, [r7, #28]
 800f084:	4b1e      	ldr	r3, [pc, #120]	; (800f100 <UART_EndRxTransfer+0xc8>)
 800f086:	4013      	ands	r3, r2
 800f088:	64bb      	str	r3, [r7, #72]	; 0x48
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	3308      	adds	r3, #8
 800f090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f092:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f094:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f096:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f09a:	e841 2300 	strex	r3, r2, [r1]
 800f09e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d1e5      	bne.n	800f072 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d118      	bne.n	800f0e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	e853 3f00 	ldrex	r3, [r3]
 800f0ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	f023 0310 	bic.w	r3, r3, #16
 800f0c2:	647b      	str	r3, [r7, #68]	; 0x44
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0cc:	61bb      	str	r3, [r7, #24]
 800f0ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0d0:	6979      	ldr	r1, [r7, #20]
 800f0d2:	69ba      	ldr	r2, [r7, #24]
 800f0d4:	e841 2300 	strex	r3, r2, [r1]
 800f0d8:	613b      	str	r3, [r7, #16]
   return(result);
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d1e6      	bne.n	800f0ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2220      	movs	r2, #32
 800f0e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f0f4:	bf00      	nop
 800f0f6:	3754      	adds	r7, #84	; 0x54
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr
 800f100:	effffffe 	.word	0xeffffffe

0800f104 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b084      	sub	sp, #16
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f110:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	2200      	movs	r2, #0
 800f116:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	2200      	movs	r2, #0
 800f11e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f122:	68f8      	ldr	r0, [r7, #12]
 800f124:	f7fe ff52 	bl	800dfcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f128:	bf00      	nop
 800f12a:	3710      	adds	r7, #16
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b088      	sub	sp, #32
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	e853 3f00 	ldrex	r3, [r3]
 800f144:	60bb      	str	r3, [r7, #8]
   return(result);
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f14c:	61fb      	str	r3, [r7, #28]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	461a      	mov	r2, r3
 800f154:	69fb      	ldr	r3, [r7, #28]
 800f156:	61bb      	str	r3, [r7, #24]
 800f158:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f15a:	6979      	ldr	r1, [r7, #20]
 800f15c:	69ba      	ldr	r2, [r7, #24]
 800f15e:	e841 2300 	strex	r3, r2, [r1]
 800f162:	613b      	str	r3, [r7, #16]
   return(result);
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d1e6      	bne.n	800f138 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2220      	movs	r2, #32
 800f16e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2200      	movs	r2, #0
 800f176:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f7fe ff1d 	bl	800dfb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f17e:	bf00      	nop
 800f180:	3720      	adds	r7, #32
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}

0800f186 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f186:	b480      	push	{r7}
 800f188:	b083      	sub	sp, #12
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f18e:	bf00      	nop
 800f190:	370c      	adds	r7, #12
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr

0800f19a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f19a:	b480      	push	{r7}
 800f19c:	b083      	sub	sp, #12
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f1a2:	bf00      	nop
 800f1a4:	370c      	adds	r7, #12
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ac:	4770      	bx	lr

0800f1ae <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f1ae:	b480      	push	{r7}
 800f1b0:	b083      	sub	sp, #12
 800f1b2:	af00      	add	r7, sp, #0
 800f1b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f1b6:	bf00      	nop
 800f1b8:	370c      	adds	r7, #12
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c0:	4770      	bx	lr

0800f1c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f1c2:	b480      	push	{r7}
 800f1c4:	b085      	sub	sp, #20
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d101      	bne.n	800f1d8 <HAL_UARTEx_DisableFifoMode+0x16>
 800f1d4:	2302      	movs	r3, #2
 800f1d6:	e027      	b.n	800f228 <HAL_UARTEx_DisableFifoMode+0x66>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2201      	movs	r2, #1
 800f1dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2224      	movs	r2, #36	; 0x24
 800f1e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f022 0201 	bic.w	r2, r2, #1
 800f1fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f206:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2200      	movs	r2, #0
 800f20c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	68fa      	ldr	r2, [r7, #12]
 800f214:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2220      	movs	r2, #32
 800f21a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2200      	movs	r2, #0
 800f222:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f226:	2300      	movs	r3, #0
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3714      	adds	r7, #20
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr

0800f234 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b084      	sub	sp, #16
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f244:	2b01      	cmp	r3, #1
 800f246:	d101      	bne.n	800f24c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f248:	2302      	movs	r3, #2
 800f24a:	e02d      	b.n	800f2a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2201      	movs	r2, #1
 800f250:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2224      	movs	r2, #36	; 0x24
 800f258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	f022 0201 	bic.w	r2, r2, #1
 800f272:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	689b      	ldr	r3, [r3, #8]
 800f27a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	683a      	ldr	r2, [r7, #0]
 800f284:	430a      	orrs	r2, r1
 800f286:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f000 f84f 	bl	800f32c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	68fa      	ldr	r2, [r7, #12]
 800f294:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2220      	movs	r2, #32
 800f29a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f2a6:	2300      	movs	r3, #0
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3710      	adds	r7, #16
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}

0800f2b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b084      	sub	sp, #16
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d101      	bne.n	800f2c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f2c4:	2302      	movs	r3, #2
 800f2c6:	e02d      	b.n	800f324 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2224      	movs	r2, #36	; 0x24
 800f2d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	681a      	ldr	r2, [r3, #0]
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	f022 0201 	bic.w	r2, r2, #1
 800f2ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	689b      	ldr	r3, [r3, #8]
 800f2f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	683a      	ldr	r2, [r7, #0]
 800f300:	430a      	orrs	r2, r1
 800f302:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f000 f811 	bl	800f32c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	68fa      	ldr	r2, [r7, #12]
 800f310:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2220      	movs	r2, #32
 800f316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2200      	movs	r2, #0
 800f31e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f322:	2300      	movs	r3, #0
}
 800f324:	4618      	mov	r0, r3
 800f326:	3710      	adds	r7, #16
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b085      	sub	sp, #20
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d108      	bne.n	800f34e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2201      	movs	r2, #1
 800f340:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2201      	movs	r2, #1
 800f348:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f34c:	e031      	b.n	800f3b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f34e:	2310      	movs	r3, #16
 800f350:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f352:	2310      	movs	r3, #16
 800f354:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	689b      	ldr	r3, [r3, #8]
 800f35c:	0e5b      	lsrs	r3, r3, #25
 800f35e:	b2db      	uxtb	r3, r3
 800f360:	f003 0307 	and.w	r3, r3, #7
 800f364:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	689b      	ldr	r3, [r3, #8]
 800f36c:	0f5b      	lsrs	r3, r3, #29
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	f003 0307 	and.w	r3, r3, #7
 800f374:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f376:	7bbb      	ldrb	r3, [r7, #14]
 800f378:	7b3a      	ldrb	r2, [r7, #12]
 800f37a:	4911      	ldr	r1, [pc, #68]	; (800f3c0 <UARTEx_SetNbDataToProcess+0x94>)
 800f37c:	5c8a      	ldrb	r2, [r1, r2]
 800f37e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f382:	7b3a      	ldrb	r2, [r7, #12]
 800f384:	490f      	ldr	r1, [pc, #60]	; (800f3c4 <UARTEx_SetNbDataToProcess+0x98>)
 800f386:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f388:	fb93 f3f2 	sdiv	r3, r3, r2
 800f38c:	b29a      	uxth	r2, r3
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f394:	7bfb      	ldrb	r3, [r7, #15]
 800f396:	7b7a      	ldrb	r2, [r7, #13]
 800f398:	4909      	ldr	r1, [pc, #36]	; (800f3c0 <UARTEx_SetNbDataToProcess+0x94>)
 800f39a:	5c8a      	ldrb	r2, [r1, r2]
 800f39c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f3a0:	7b7a      	ldrb	r2, [r7, #13]
 800f3a2:	4908      	ldr	r1, [pc, #32]	; (800f3c4 <UARTEx_SetNbDataToProcess+0x98>)
 800f3a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f3a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800f3aa:	b29a      	uxth	r2, r3
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f3b2:	bf00      	nop
 800f3b4:	3714      	adds	r7, #20
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3bc:	4770      	bx	lr
 800f3be:	bf00      	nop
 800f3c0:	08010d60 	.word	0x08010d60
 800f3c4:	08010d68 	.word	0x08010d68

0800f3c8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b083      	sub	sp, #12
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d121      	bne.n	800f41e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681a      	ldr	r2, [r3, #0]
 800f3de:	4b27      	ldr	r3, [pc, #156]	; (800f47c <FMC_SDRAM_Init+0xb4>)
 800f3e0:	4013      	ands	r3, r2
 800f3e2:	683a      	ldr	r2, [r7, #0]
 800f3e4:	6851      	ldr	r1, [r2, #4]
 800f3e6:	683a      	ldr	r2, [r7, #0]
 800f3e8:	6892      	ldr	r2, [r2, #8]
 800f3ea:	4311      	orrs	r1, r2
 800f3ec:	683a      	ldr	r2, [r7, #0]
 800f3ee:	68d2      	ldr	r2, [r2, #12]
 800f3f0:	4311      	orrs	r1, r2
 800f3f2:	683a      	ldr	r2, [r7, #0]
 800f3f4:	6912      	ldr	r2, [r2, #16]
 800f3f6:	4311      	orrs	r1, r2
 800f3f8:	683a      	ldr	r2, [r7, #0]
 800f3fa:	6952      	ldr	r2, [r2, #20]
 800f3fc:	4311      	orrs	r1, r2
 800f3fe:	683a      	ldr	r2, [r7, #0]
 800f400:	6992      	ldr	r2, [r2, #24]
 800f402:	4311      	orrs	r1, r2
 800f404:	683a      	ldr	r2, [r7, #0]
 800f406:	69d2      	ldr	r2, [r2, #28]
 800f408:	4311      	orrs	r1, r2
 800f40a:	683a      	ldr	r2, [r7, #0]
 800f40c:	6a12      	ldr	r2, [r2, #32]
 800f40e:	4311      	orrs	r1, r2
 800f410:	683a      	ldr	r2, [r7, #0]
 800f412:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f414:	430a      	orrs	r2, r1
 800f416:	431a      	orrs	r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	601a      	str	r2, [r3, #0]
 800f41c:	e026      	b.n	800f46c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	69d9      	ldr	r1, [r3, #28]
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	6a1b      	ldr	r3, [r3, #32]
 800f42e:	4319      	orrs	r1, r3
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f434:	430b      	orrs	r3, r1
 800f436:	431a      	orrs	r2, r3
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	685a      	ldr	r2, [r3, #4]
 800f440:	4b0e      	ldr	r3, [pc, #56]	; (800f47c <FMC_SDRAM_Init+0xb4>)
 800f442:	4013      	ands	r3, r2
 800f444:	683a      	ldr	r2, [r7, #0]
 800f446:	6851      	ldr	r1, [r2, #4]
 800f448:	683a      	ldr	r2, [r7, #0]
 800f44a:	6892      	ldr	r2, [r2, #8]
 800f44c:	4311      	orrs	r1, r2
 800f44e:	683a      	ldr	r2, [r7, #0]
 800f450:	68d2      	ldr	r2, [r2, #12]
 800f452:	4311      	orrs	r1, r2
 800f454:	683a      	ldr	r2, [r7, #0]
 800f456:	6912      	ldr	r2, [r2, #16]
 800f458:	4311      	orrs	r1, r2
 800f45a:	683a      	ldr	r2, [r7, #0]
 800f45c:	6952      	ldr	r2, [r2, #20]
 800f45e:	4311      	orrs	r1, r2
 800f460:	683a      	ldr	r2, [r7, #0]
 800f462:	6992      	ldr	r2, [r2, #24]
 800f464:	430a      	orrs	r2, r1
 800f466:	431a      	orrs	r2, r3
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f46c:	2300      	movs	r3, #0
}
 800f46e:	4618      	mov	r0, r3
 800f470:	370c      	adds	r7, #12
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr
 800f47a:	bf00      	nop
 800f47c:	ffff8000 	.word	0xffff8000

0800f480 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f480:	b480      	push	{r7}
 800f482:	b085      	sub	sp, #20
 800f484:	af00      	add	r7, sp, #0
 800f486:	60f8      	str	r0, [r7, #12]
 800f488:	60b9      	str	r1, [r7, #8]
 800f48a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d128      	bne.n	800f4e4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	689b      	ldr	r3, [r3, #8]
 800f496:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	1e59      	subs	r1, r3, #1
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	3b01      	subs	r3, #1
 800f4a6:	011b      	lsls	r3, r3, #4
 800f4a8:	4319      	orrs	r1, r3
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	689b      	ldr	r3, [r3, #8]
 800f4ae:	3b01      	subs	r3, #1
 800f4b0:	021b      	lsls	r3, r3, #8
 800f4b2:	4319      	orrs	r1, r3
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	68db      	ldr	r3, [r3, #12]
 800f4b8:	3b01      	subs	r3, #1
 800f4ba:	031b      	lsls	r3, r3, #12
 800f4bc:	4319      	orrs	r1, r3
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	691b      	ldr	r3, [r3, #16]
 800f4c2:	3b01      	subs	r3, #1
 800f4c4:	041b      	lsls	r3, r3, #16
 800f4c6:	4319      	orrs	r1, r3
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	695b      	ldr	r3, [r3, #20]
 800f4cc:	3b01      	subs	r3, #1
 800f4ce:	051b      	lsls	r3, r3, #20
 800f4d0:	4319      	orrs	r1, r3
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	699b      	ldr	r3, [r3, #24]
 800f4d6:	3b01      	subs	r3, #1
 800f4d8:	061b      	lsls	r3, r3, #24
 800f4da:	430b      	orrs	r3, r1
 800f4dc:	431a      	orrs	r2, r3
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	609a      	str	r2, [r3, #8]
 800f4e2:	e02d      	b.n	800f540 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	689a      	ldr	r2, [r3, #8]
 800f4e8:	4b19      	ldr	r3, [pc, #100]	; (800f550 <FMC_SDRAM_Timing_Init+0xd0>)
 800f4ea:	4013      	ands	r3, r2
 800f4ec:	68ba      	ldr	r2, [r7, #8]
 800f4ee:	68d2      	ldr	r2, [r2, #12]
 800f4f0:	3a01      	subs	r2, #1
 800f4f2:	0311      	lsls	r1, r2, #12
 800f4f4:	68ba      	ldr	r2, [r7, #8]
 800f4f6:	6952      	ldr	r2, [r2, #20]
 800f4f8:	3a01      	subs	r2, #1
 800f4fa:	0512      	lsls	r2, r2, #20
 800f4fc:	430a      	orrs	r2, r1
 800f4fe:	431a      	orrs	r2, r3
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	68db      	ldr	r3, [r3, #12]
 800f508:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	1e59      	subs	r1, r3, #1
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	3b01      	subs	r3, #1
 800f518:	011b      	lsls	r3, r3, #4
 800f51a:	4319      	orrs	r1, r3
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	689b      	ldr	r3, [r3, #8]
 800f520:	3b01      	subs	r3, #1
 800f522:	021b      	lsls	r3, r3, #8
 800f524:	4319      	orrs	r1, r3
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	691b      	ldr	r3, [r3, #16]
 800f52a:	3b01      	subs	r3, #1
 800f52c:	041b      	lsls	r3, r3, #16
 800f52e:	4319      	orrs	r1, r3
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	699b      	ldr	r3, [r3, #24]
 800f534:	3b01      	subs	r3, #1
 800f536:	061b      	lsls	r3, r3, #24
 800f538:	430b      	orrs	r3, r1
 800f53a:	431a      	orrs	r2, r3
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800f540:	2300      	movs	r3, #0
}
 800f542:	4618      	mov	r0, r3
 800f544:	3714      	adds	r7, #20
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr
 800f54e:	bf00      	nop
 800f550:	ff0f0fff 	.word	0xff0f0fff

0800f554 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	60b9      	str	r1, [r7, #8]
 800f55e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	691a      	ldr	r2, [r3, #16]
 800f564:	4b0c      	ldr	r3, [pc, #48]	; (800f598 <FMC_SDRAM_SendCommand+0x44>)
 800f566:	4013      	ands	r3, r2
 800f568:	68ba      	ldr	r2, [r7, #8]
 800f56a:	6811      	ldr	r1, [r2, #0]
 800f56c:	68ba      	ldr	r2, [r7, #8]
 800f56e:	6852      	ldr	r2, [r2, #4]
 800f570:	4311      	orrs	r1, r2
 800f572:	68ba      	ldr	r2, [r7, #8]
 800f574:	6892      	ldr	r2, [r2, #8]
 800f576:	3a01      	subs	r2, #1
 800f578:	0152      	lsls	r2, r2, #5
 800f57a:	4311      	orrs	r1, r2
 800f57c:	68ba      	ldr	r2, [r7, #8]
 800f57e:	68d2      	ldr	r2, [r2, #12]
 800f580:	0252      	lsls	r2, r2, #9
 800f582:	430a      	orrs	r2, r1
 800f584:	431a      	orrs	r2, r3
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800f58a:	2300      	movs	r3, #0
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3714      	adds	r7, #20
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr
 800f598:	ffc00000 	.word	0xffc00000

0800f59c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800f59c:	b480      	push	{r7}
 800f59e:	b083      	sub	sp, #12
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	695a      	ldr	r2, [r3, #20]
 800f5aa:	4b07      	ldr	r3, [pc, #28]	; (800f5c8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800f5ac:	4013      	ands	r3, r2
 800f5ae:	683a      	ldr	r2, [r7, #0]
 800f5b0:	0052      	lsls	r2, r2, #1
 800f5b2:	431a      	orrs	r2, r3
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800f5b8:	2300      	movs	r3, #0
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	370c      	adds	r7, #12
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c4:	4770      	bx	lr
 800f5c6:	bf00      	nop
 800f5c8:	ffffc001 	.word	0xffffc001

0800f5cc <__errno>:
 800f5cc:	4b01      	ldr	r3, [pc, #4]	; (800f5d4 <__errno+0x8>)
 800f5ce:	6818      	ldr	r0, [r3, #0]
 800f5d0:	4770      	bx	lr
 800f5d2:	bf00      	nop
 800f5d4:	24000054 	.word	0x24000054

0800f5d8 <__libc_init_array>:
 800f5d8:	b570      	push	{r4, r5, r6, lr}
 800f5da:	4d0d      	ldr	r5, [pc, #52]	; (800f610 <__libc_init_array+0x38>)
 800f5dc:	4c0d      	ldr	r4, [pc, #52]	; (800f614 <__libc_init_array+0x3c>)
 800f5de:	1b64      	subs	r4, r4, r5
 800f5e0:	10a4      	asrs	r4, r4, #2
 800f5e2:	2600      	movs	r6, #0
 800f5e4:	42a6      	cmp	r6, r4
 800f5e6:	d109      	bne.n	800f5fc <__libc_init_array+0x24>
 800f5e8:	4d0b      	ldr	r5, [pc, #44]	; (800f618 <__libc_init_array+0x40>)
 800f5ea:	4c0c      	ldr	r4, [pc, #48]	; (800f61c <__libc_init_array+0x44>)
 800f5ec:	f001 f88a 	bl	8010704 <_init>
 800f5f0:	1b64      	subs	r4, r4, r5
 800f5f2:	10a4      	asrs	r4, r4, #2
 800f5f4:	2600      	movs	r6, #0
 800f5f6:	42a6      	cmp	r6, r4
 800f5f8:	d105      	bne.n	800f606 <__libc_init_array+0x2e>
 800f5fa:	bd70      	pop	{r4, r5, r6, pc}
 800f5fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f600:	4798      	blx	r3
 800f602:	3601      	adds	r6, #1
 800f604:	e7ee      	b.n	800f5e4 <__libc_init_array+0xc>
 800f606:	f855 3b04 	ldr.w	r3, [r5], #4
 800f60a:	4798      	blx	r3
 800f60c:	3601      	adds	r6, #1
 800f60e:	e7f2      	b.n	800f5f6 <__libc_init_array+0x1e>
 800f610:	08010e10 	.word	0x08010e10
 800f614:	08010e10 	.word	0x08010e10
 800f618:	08010e10 	.word	0x08010e10
 800f61c:	08010e14 	.word	0x08010e14

0800f620 <memcpy>:
 800f620:	440a      	add	r2, r1
 800f622:	4291      	cmp	r1, r2
 800f624:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f628:	d100      	bne.n	800f62c <memcpy+0xc>
 800f62a:	4770      	bx	lr
 800f62c:	b510      	push	{r4, lr}
 800f62e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f632:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f636:	4291      	cmp	r1, r2
 800f638:	d1f9      	bne.n	800f62e <memcpy+0xe>
 800f63a:	bd10      	pop	{r4, pc}

0800f63c <memset>:
 800f63c:	4402      	add	r2, r0
 800f63e:	4603      	mov	r3, r0
 800f640:	4293      	cmp	r3, r2
 800f642:	d100      	bne.n	800f646 <memset+0xa>
 800f644:	4770      	bx	lr
 800f646:	f803 1b01 	strb.w	r1, [r3], #1
 800f64a:	e7f9      	b.n	800f640 <memset+0x4>

0800f64c <iprintf>:
 800f64c:	b40f      	push	{r0, r1, r2, r3}
 800f64e:	4b0a      	ldr	r3, [pc, #40]	; (800f678 <iprintf+0x2c>)
 800f650:	b513      	push	{r0, r1, r4, lr}
 800f652:	681c      	ldr	r4, [r3, #0]
 800f654:	b124      	cbz	r4, 800f660 <iprintf+0x14>
 800f656:	69a3      	ldr	r3, [r4, #24]
 800f658:	b913      	cbnz	r3, 800f660 <iprintf+0x14>
 800f65a:	4620      	mov	r0, r4
 800f65c:	f000 f9ee 	bl	800fa3c <__sinit>
 800f660:	ab05      	add	r3, sp, #20
 800f662:	9a04      	ldr	r2, [sp, #16]
 800f664:	68a1      	ldr	r1, [r4, #8]
 800f666:	9301      	str	r3, [sp, #4]
 800f668:	4620      	mov	r0, r4
 800f66a:	f000 fbff 	bl	800fe6c <_vfiprintf_r>
 800f66e:	b002      	add	sp, #8
 800f670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f674:	b004      	add	sp, #16
 800f676:	4770      	bx	lr
 800f678:	24000054 	.word	0x24000054

0800f67c <setvbuf>:
 800f67c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f680:	461d      	mov	r5, r3
 800f682:	4b5d      	ldr	r3, [pc, #372]	; (800f7f8 <setvbuf+0x17c>)
 800f684:	681f      	ldr	r7, [r3, #0]
 800f686:	4604      	mov	r4, r0
 800f688:	460e      	mov	r6, r1
 800f68a:	4690      	mov	r8, r2
 800f68c:	b127      	cbz	r7, 800f698 <setvbuf+0x1c>
 800f68e:	69bb      	ldr	r3, [r7, #24]
 800f690:	b913      	cbnz	r3, 800f698 <setvbuf+0x1c>
 800f692:	4638      	mov	r0, r7
 800f694:	f000 f9d2 	bl	800fa3c <__sinit>
 800f698:	4b58      	ldr	r3, [pc, #352]	; (800f7fc <setvbuf+0x180>)
 800f69a:	429c      	cmp	r4, r3
 800f69c:	d167      	bne.n	800f76e <setvbuf+0xf2>
 800f69e:	687c      	ldr	r4, [r7, #4]
 800f6a0:	f1b8 0f02 	cmp.w	r8, #2
 800f6a4:	d006      	beq.n	800f6b4 <setvbuf+0x38>
 800f6a6:	f1b8 0f01 	cmp.w	r8, #1
 800f6aa:	f200 809f 	bhi.w	800f7ec <setvbuf+0x170>
 800f6ae:	2d00      	cmp	r5, #0
 800f6b0:	f2c0 809c 	blt.w	800f7ec <setvbuf+0x170>
 800f6b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6b6:	07db      	lsls	r3, r3, #31
 800f6b8:	d405      	bmi.n	800f6c6 <setvbuf+0x4a>
 800f6ba:	89a3      	ldrh	r3, [r4, #12]
 800f6bc:	0598      	lsls	r0, r3, #22
 800f6be:	d402      	bmi.n	800f6c6 <setvbuf+0x4a>
 800f6c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6c2:	f000 fa59 	bl	800fb78 <__retarget_lock_acquire_recursive>
 800f6c6:	4621      	mov	r1, r4
 800f6c8:	4638      	mov	r0, r7
 800f6ca:	f000 f923 	bl	800f914 <_fflush_r>
 800f6ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6d0:	b141      	cbz	r1, 800f6e4 <setvbuf+0x68>
 800f6d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6d6:	4299      	cmp	r1, r3
 800f6d8:	d002      	beq.n	800f6e0 <setvbuf+0x64>
 800f6da:	4638      	mov	r0, r7
 800f6dc:	f000 fabc 	bl	800fc58 <_free_r>
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	6363      	str	r3, [r4, #52]	; 0x34
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	61a3      	str	r3, [r4, #24]
 800f6e8:	6063      	str	r3, [r4, #4]
 800f6ea:	89a3      	ldrh	r3, [r4, #12]
 800f6ec:	0619      	lsls	r1, r3, #24
 800f6ee:	d503      	bpl.n	800f6f8 <setvbuf+0x7c>
 800f6f0:	6921      	ldr	r1, [r4, #16]
 800f6f2:	4638      	mov	r0, r7
 800f6f4:	f000 fab0 	bl	800fc58 <_free_r>
 800f6f8:	89a3      	ldrh	r3, [r4, #12]
 800f6fa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800f6fe:	f023 0303 	bic.w	r3, r3, #3
 800f702:	f1b8 0f02 	cmp.w	r8, #2
 800f706:	81a3      	strh	r3, [r4, #12]
 800f708:	d06c      	beq.n	800f7e4 <setvbuf+0x168>
 800f70a:	ab01      	add	r3, sp, #4
 800f70c:	466a      	mov	r2, sp
 800f70e:	4621      	mov	r1, r4
 800f710:	4638      	mov	r0, r7
 800f712:	f000 fa33 	bl	800fb7c <__swhatbuf_r>
 800f716:	89a3      	ldrh	r3, [r4, #12]
 800f718:	4318      	orrs	r0, r3
 800f71a:	81a0      	strh	r0, [r4, #12]
 800f71c:	2d00      	cmp	r5, #0
 800f71e:	d130      	bne.n	800f782 <setvbuf+0x106>
 800f720:	9d00      	ldr	r5, [sp, #0]
 800f722:	4628      	mov	r0, r5
 800f724:	f000 fa90 	bl	800fc48 <malloc>
 800f728:	4606      	mov	r6, r0
 800f72a:	2800      	cmp	r0, #0
 800f72c:	d155      	bne.n	800f7da <setvbuf+0x15e>
 800f72e:	f8dd 9000 	ldr.w	r9, [sp]
 800f732:	45a9      	cmp	r9, r5
 800f734:	d14a      	bne.n	800f7cc <setvbuf+0x150>
 800f736:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f73a:	2200      	movs	r2, #0
 800f73c:	60a2      	str	r2, [r4, #8]
 800f73e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800f742:	6022      	str	r2, [r4, #0]
 800f744:	6122      	str	r2, [r4, #16]
 800f746:	2201      	movs	r2, #1
 800f748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f74c:	6162      	str	r2, [r4, #20]
 800f74e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f750:	f043 0302 	orr.w	r3, r3, #2
 800f754:	07d2      	lsls	r2, r2, #31
 800f756:	81a3      	strh	r3, [r4, #12]
 800f758:	d405      	bmi.n	800f766 <setvbuf+0xea>
 800f75a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800f75e:	d102      	bne.n	800f766 <setvbuf+0xea>
 800f760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f762:	f000 fa0a 	bl	800fb7a <__retarget_lock_release_recursive>
 800f766:	4628      	mov	r0, r5
 800f768:	b003      	add	sp, #12
 800f76a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f76e:	4b24      	ldr	r3, [pc, #144]	; (800f800 <setvbuf+0x184>)
 800f770:	429c      	cmp	r4, r3
 800f772:	d101      	bne.n	800f778 <setvbuf+0xfc>
 800f774:	68bc      	ldr	r4, [r7, #8]
 800f776:	e793      	b.n	800f6a0 <setvbuf+0x24>
 800f778:	4b22      	ldr	r3, [pc, #136]	; (800f804 <setvbuf+0x188>)
 800f77a:	429c      	cmp	r4, r3
 800f77c:	bf08      	it	eq
 800f77e:	68fc      	ldreq	r4, [r7, #12]
 800f780:	e78e      	b.n	800f6a0 <setvbuf+0x24>
 800f782:	2e00      	cmp	r6, #0
 800f784:	d0cd      	beq.n	800f722 <setvbuf+0xa6>
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	b913      	cbnz	r3, 800f790 <setvbuf+0x114>
 800f78a:	4638      	mov	r0, r7
 800f78c:	f000 f956 	bl	800fa3c <__sinit>
 800f790:	f1b8 0f01 	cmp.w	r8, #1
 800f794:	bf08      	it	eq
 800f796:	89a3      	ldrheq	r3, [r4, #12]
 800f798:	6026      	str	r6, [r4, #0]
 800f79a:	bf04      	itt	eq
 800f79c:	f043 0301 	orreq.w	r3, r3, #1
 800f7a0:	81a3      	strheq	r3, [r4, #12]
 800f7a2:	89a2      	ldrh	r2, [r4, #12]
 800f7a4:	f012 0308 	ands.w	r3, r2, #8
 800f7a8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f7ac:	d01c      	beq.n	800f7e8 <setvbuf+0x16c>
 800f7ae:	07d3      	lsls	r3, r2, #31
 800f7b0:	bf41      	itttt	mi
 800f7b2:	2300      	movmi	r3, #0
 800f7b4:	426d      	negmi	r5, r5
 800f7b6:	60a3      	strmi	r3, [r4, #8]
 800f7b8:	61a5      	strmi	r5, [r4, #24]
 800f7ba:	bf58      	it	pl
 800f7bc:	60a5      	strpl	r5, [r4, #8]
 800f7be:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800f7c0:	f015 0501 	ands.w	r5, r5, #1
 800f7c4:	d115      	bne.n	800f7f2 <setvbuf+0x176>
 800f7c6:	f412 7f00 	tst.w	r2, #512	; 0x200
 800f7ca:	e7c8      	b.n	800f75e <setvbuf+0xe2>
 800f7cc:	4648      	mov	r0, r9
 800f7ce:	f000 fa3b 	bl	800fc48 <malloc>
 800f7d2:	4606      	mov	r6, r0
 800f7d4:	2800      	cmp	r0, #0
 800f7d6:	d0ae      	beq.n	800f736 <setvbuf+0xba>
 800f7d8:	464d      	mov	r5, r9
 800f7da:	89a3      	ldrh	r3, [r4, #12]
 800f7dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7e0:	81a3      	strh	r3, [r4, #12]
 800f7e2:	e7d0      	b.n	800f786 <setvbuf+0x10a>
 800f7e4:	2500      	movs	r5, #0
 800f7e6:	e7a8      	b.n	800f73a <setvbuf+0xbe>
 800f7e8:	60a3      	str	r3, [r4, #8]
 800f7ea:	e7e8      	b.n	800f7be <setvbuf+0x142>
 800f7ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f7f0:	e7b9      	b.n	800f766 <setvbuf+0xea>
 800f7f2:	2500      	movs	r5, #0
 800f7f4:	e7b7      	b.n	800f766 <setvbuf+0xea>
 800f7f6:	bf00      	nop
 800f7f8:	24000054 	.word	0x24000054
 800f7fc:	08010d94 	.word	0x08010d94
 800f800:	08010db4 	.word	0x08010db4
 800f804:	08010d74 	.word	0x08010d74

0800f808 <__sflush_r>:
 800f808:	898a      	ldrh	r2, [r1, #12]
 800f80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f80e:	4605      	mov	r5, r0
 800f810:	0710      	lsls	r0, r2, #28
 800f812:	460c      	mov	r4, r1
 800f814:	d458      	bmi.n	800f8c8 <__sflush_r+0xc0>
 800f816:	684b      	ldr	r3, [r1, #4]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	dc05      	bgt.n	800f828 <__sflush_r+0x20>
 800f81c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f81e:	2b00      	cmp	r3, #0
 800f820:	dc02      	bgt.n	800f828 <__sflush_r+0x20>
 800f822:	2000      	movs	r0, #0
 800f824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f82a:	2e00      	cmp	r6, #0
 800f82c:	d0f9      	beq.n	800f822 <__sflush_r+0x1a>
 800f82e:	2300      	movs	r3, #0
 800f830:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f834:	682f      	ldr	r7, [r5, #0]
 800f836:	602b      	str	r3, [r5, #0]
 800f838:	d032      	beq.n	800f8a0 <__sflush_r+0x98>
 800f83a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f83c:	89a3      	ldrh	r3, [r4, #12]
 800f83e:	075a      	lsls	r2, r3, #29
 800f840:	d505      	bpl.n	800f84e <__sflush_r+0x46>
 800f842:	6863      	ldr	r3, [r4, #4]
 800f844:	1ac0      	subs	r0, r0, r3
 800f846:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f848:	b10b      	cbz	r3, 800f84e <__sflush_r+0x46>
 800f84a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f84c:	1ac0      	subs	r0, r0, r3
 800f84e:	2300      	movs	r3, #0
 800f850:	4602      	mov	r2, r0
 800f852:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f854:	6a21      	ldr	r1, [r4, #32]
 800f856:	4628      	mov	r0, r5
 800f858:	47b0      	blx	r6
 800f85a:	1c43      	adds	r3, r0, #1
 800f85c:	89a3      	ldrh	r3, [r4, #12]
 800f85e:	d106      	bne.n	800f86e <__sflush_r+0x66>
 800f860:	6829      	ldr	r1, [r5, #0]
 800f862:	291d      	cmp	r1, #29
 800f864:	d82c      	bhi.n	800f8c0 <__sflush_r+0xb8>
 800f866:	4a2a      	ldr	r2, [pc, #168]	; (800f910 <__sflush_r+0x108>)
 800f868:	40ca      	lsrs	r2, r1
 800f86a:	07d6      	lsls	r6, r2, #31
 800f86c:	d528      	bpl.n	800f8c0 <__sflush_r+0xb8>
 800f86e:	2200      	movs	r2, #0
 800f870:	6062      	str	r2, [r4, #4]
 800f872:	04d9      	lsls	r1, r3, #19
 800f874:	6922      	ldr	r2, [r4, #16]
 800f876:	6022      	str	r2, [r4, #0]
 800f878:	d504      	bpl.n	800f884 <__sflush_r+0x7c>
 800f87a:	1c42      	adds	r2, r0, #1
 800f87c:	d101      	bne.n	800f882 <__sflush_r+0x7a>
 800f87e:	682b      	ldr	r3, [r5, #0]
 800f880:	b903      	cbnz	r3, 800f884 <__sflush_r+0x7c>
 800f882:	6560      	str	r0, [r4, #84]	; 0x54
 800f884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f886:	602f      	str	r7, [r5, #0]
 800f888:	2900      	cmp	r1, #0
 800f88a:	d0ca      	beq.n	800f822 <__sflush_r+0x1a>
 800f88c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f890:	4299      	cmp	r1, r3
 800f892:	d002      	beq.n	800f89a <__sflush_r+0x92>
 800f894:	4628      	mov	r0, r5
 800f896:	f000 f9df 	bl	800fc58 <_free_r>
 800f89a:	2000      	movs	r0, #0
 800f89c:	6360      	str	r0, [r4, #52]	; 0x34
 800f89e:	e7c1      	b.n	800f824 <__sflush_r+0x1c>
 800f8a0:	6a21      	ldr	r1, [r4, #32]
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	4628      	mov	r0, r5
 800f8a6:	47b0      	blx	r6
 800f8a8:	1c41      	adds	r1, r0, #1
 800f8aa:	d1c7      	bne.n	800f83c <__sflush_r+0x34>
 800f8ac:	682b      	ldr	r3, [r5, #0]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d0c4      	beq.n	800f83c <__sflush_r+0x34>
 800f8b2:	2b1d      	cmp	r3, #29
 800f8b4:	d001      	beq.n	800f8ba <__sflush_r+0xb2>
 800f8b6:	2b16      	cmp	r3, #22
 800f8b8:	d101      	bne.n	800f8be <__sflush_r+0xb6>
 800f8ba:	602f      	str	r7, [r5, #0]
 800f8bc:	e7b1      	b.n	800f822 <__sflush_r+0x1a>
 800f8be:	89a3      	ldrh	r3, [r4, #12]
 800f8c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8c4:	81a3      	strh	r3, [r4, #12]
 800f8c6:	e7ad      	b.n	800f824 <__sflush_r+0x1c>
 800f8c8:	690f      	ldr	r7, [r1, #16]
 800f8ca:	2f00      	cmp	r7, #0
 800f8cc:	d0a9      	beq.n	800f822 <__sflush_r+0x1a>
 800f8ce:	0793      	lsls	r3, r2, #30
 800f8d0:	680e      	ldr	r6, [r1, #0]
 800f8d2:	bf08      	it	eq
 800f8d4:	694b      	ldreq	r3, [r1, #20]
 800f8d6:	600f      	str	r7, [r1, #0]
 800f8d8:	bf18      	it	ne
 800f8da:	2300      	movne	r3, #0
 800f8dc:	eba6 0807 	sub.w	r8, r6, r7
 800f8e0:	608b      	str	r3, [r1, #8]
 800f8e2:	f1b8 0f00 	cmp.w	r8, #0
 800f8e6:	dd9c      	ble.n	800f822 <__sflush_r+0x1a>
 800f8e8:	6a21      	ldr	r1, [r4, #32]
 800f8ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f8ec:	4643      	mov	r3, r8
 800f8ee:	463a      	mov	r2, r7
 800f8f0:	4628      	mov	r0, r5
 800f8f2:	47b0      	blx	r6
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	dc06      	bgt.n	800f906 <__sflush_r+0xfe>
 800f8f8:	89a3      	ldrh	r3, [r4, #12]
 800f8fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8fe:	81a3      	strh	r3, [r4, #12]
 800f900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f904:	e78e      	b.n	800f824 <__sflush_r+0x1c>
 800f906:	4407      	add	r7, r0
 800f908:	eba8 0800 	sub.w	r8, r8, r0
 800f90c:	e7e9      	b.n	800f8e2 <__sflush_r+0xda>
 800f90e:	bf00      	nop
 800f910:	20400001 	.word	0x20400001

0800f914 <_fflush_r>:
 800f914:	b538      	push	{r3, r4, r5, lr}
 800f916:	690b      	ldr	r3, [r1, #16]
 800f918:	4605      	mov	r5, r0
 800f91a:	460c      	mov	r4, r1
 800f91c:	b913      	cbnz	r3, 800f924 <_fflush_r+0x10>
 800f91e:	2500      	movs	r5, #0
 800f920:	4628      	mov	r0, r5
 800f922:	bd38      	pop	{r3, r4, r5, pc}
 800f924:	b118      	cbz	r0, 800f92e <_fflush_r+0x1a>
 800f926:	6983      	ldr	r3, [r0, #24]
 800f928:	b90b      	cbnz	r3, 800f92e <_fflush_r+0x1a>
 800f92a:	f000 f887 	bl	800fa3c <__sinit>
 800f92e:	4b14      	ldr	r3, [pc, #80]	; (800f980 <_fflush_r+0x6c>)
 800f930:	429c      	cmp	r4, r3
 800f932:	d11b      	bne.n	800f96c <_fflush_r+0x58>
 800f934:	686c      	ldr	r4, [r5, #4]
 800f936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d0ef      	beq.n	800f91e <_fflush_r+0xa>
 800f93e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f940:	07d0      	lsls	r0, r2, #31
 800f942:	d404      	bmi.n	800f94e <_fflush_r+0x3a>
 800f944:	0599      	lsls	r1, r3, #22
 800f946:	d402      	bmi.n	800f94e <_fflush_r+0x3a>
 800f948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f94a:	f000 f915 	bl	800fb78 <__retarget_lock_acquire_recursive>
 800f94e:	4628      	mov	r0, r5
 800f950:	4621      	mov	r1, r4
 800f952:	f7ff ff59 	bl	800f808 <__sflush_r>
 800f956:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f958:	07da      	lsls	r2, r3, #31
 800f95a:	4605      	mov	r5, r0
 800f95c:	d4e0      	bmi.n	800f920 <_fflush_r+0xc>
 800f95e:	89a3      	ldrh	r3, [r4, #12]
 800f960:	059b      	lsls	r3, r3, #22
 800f962:	d4dd      	bmi.n	800f920 <_fflush_r+0xc>
 800f964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f966:	f000 f908 	bl	800fb7a <__retarget_lock_release_recursive>
 800f96a:	e7d9      	b.n	800f920 <_fflush_r+0xc>
 800f96c:	4b05      	ldr	r3, [pc, #20]	; (800f984 <_fflush_r+0x70>)
 800f96e:	429c      	cmp	r4, r3
 800f970:	d101      	bne.n	800f976 <_fflush_r+0x62>
 800f972:	68ac      	ldr	r4, [r5, #8]
 800f974:	e7df      	b.n	800f936 <_fflush_r+0x22>
 800f976:	4b04      	ldr	r3, [pc, #16]	; (800f988 <_fflush_r+0x74>)
 800f978:	429c      	cmp	r4, r3
 800f97a:	bf08      	it	eq
 800f97c:	68ec      	ldreq	r4, [r5, #12]
 800f97e:	e7da      	b.n	800f936 <_fflush_r+0x22>
 800f980:	08010d94 	.word	0x08010d94
 800f984:	08010db4 	.word	0x08010db4
 800f988:	08010d74 	.word	0x08010d74

0800f98c <std>:
 800f98c:	2300      	movs	r3, #0
 800f98e:	b510      	push	{r4, lr}
 800f990:	4604      	mov	r4, r0
 800f992:	e9c0 3300 	strd	r3, r3, [r0]
 800f996:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f99a:	6083      	str	r3, [r0, #8]
 800f99c:	8181      	strh	r1, [r0, #12]
 800f99e:	6643      	str	r3, [r0, #100]	; 0x64
 800f9a0:	81c2      	strh	r2, [r0, #14]
 800f9a2:	6183      	str	r3, [r0, #24]
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	2208      	movs	r2, #8
 800f9a8:	305c      	adds	r0, #92	; 0x5c
 800f9aa:	f7ff fe47 	bl	800f63c <memset>
 800f9ae:	4b05      	ldr	r3, [pc, #20]	; (800f9c4 <std+0x38>)
 800f9b0:	6263      	str	r3, [r4, #36]	; 0x24
 800f9b2:	4b05      	ldr	r3, [pc, #20]	; (800f9c8 <std+0x3c>)
 800f9b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800f9b6:	4b05      	ldr	r3, [pc, #20]	; (800f9cc <std+0x40>)
 800f9b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f9ba:	4b05      	ldr	r3, [pc, #20]	; (800f9d0 <std+0x44>)
 800f9bc:	6224      	str	r4, [r4, #32]
 800f9be:	6323      	str	r3, [r4, #48]	; 0x30
 800f9c0:	bd10      	pop	{r4, pc}
 800f9c2:	bf00      	nop
 800f9c4:	08010415 	.word	0x08010415
 800f9c8:	08010437 	.word	0x08010437
 800f9cc:	0801046f 	.word	0x0801046f
 800f9d0:	08010493 	.word	0x08010493

0800f9d4 <_cleanup_r>:
 800f9d4:	4901      	ldr	r1, [pc, #4]	; (800f9dc <_cleanup_r+0x8>)
 800f9d6:	f000 b8af 	b.w	800fb38 <_fwalk_reent>
 800f9da:	bf00      	nop
 800f9dc:	0800f915 	.word	0x0800f915

0800f9e0 <__sfmoreglue>:
 800f9e0:	b570      	push	{r4, r5, r6, lr}
 800f9e2:	2268      	movs	r2, #104	; 0x68
 800f9e4:	1e4d      	subs	r5, r1, #1
 800f9e6:	4355      	muls	r5, r2
 800f9e8:	460e      	mov	r6, r1
 800f9ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f9ee:	f000 f99f 	bl	800fd30 <_malloc_r>
 800f9f2:	4604      	mov	r4, r0
 800f9f4:	b140      	cbz	r0, 800fa08 <__sfmoreglue+0x28>
 800f9f6:	2100      	movs	r1, #0
 800f9f8:	e9c0 1600 	strd	r1, r6, [r0]
 800f9fc:	300c      	adds	r0, #12
 800f9fe:	60a0      	str	r0, [r4, #8]
 800fa00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fa04:	f7ff fe1a 	bl	800f63c <memset>
 800fa08:	4620      	mov	r0, r4
 800fa0a:	bd70      	pop	{r4, r5, r6, pc}

0800fa0c <__sfp_lock_acquire>:
 800fa0c:	4801      	ldr	r0, [pc, #4]	; (800fa14 <__sfp_lock_acquire+0x8>)
 800fa0e:	f000 b8b3 	b.w	800fb78 <__retarget_lock_acquire_recursive>
 800fa12:	bf00      	nop
 800fa14:	240e0071 	.word	0x240e0071

0800fa18 <__sfp_lock_release>:
 800fa18:	4801      	ldr	r0, [pc, #4]	; (800fa20 <__sfp_lock_release+0x8>)
 800fa1a:	f000 b8ae 	b.w	800fb7a <__retarget_lock_release_recursive>
 800fa1e:	bf00      	nop
 800fa20:	240e0071 	.word	0x240e0071

0800fa24 <__sinit_lock_acquire>:
 800fa24:	4801      	ldr	r0, [pc, #4]	; (800fa2c <__sinit_lock_acquire+0x8>)
 800fa26:	f000 b8a7 	b.w	800fb78 <__retarget_lock_acquire_recursive>
 800fa2a:	bf00      	nop
 800fa2c:	240e0072 	.word	0x240e0072

0800fa30 <__sinit_lock_release>:
 800fa30:	4801      	ldr	r0, [pc, #4]	; (800fa38 <__sinit_lock_release+0x8>)
 800fa32:	f000 b8a2 	b.w	800fb7a <__retarget_lock_release_recursive>
 800fa36:	bf00      	nop
 800fa38:	240e0072 	.word	0x240e0072

0800fa3c <__sinit>:
 800fa3c:	b510      	push	{r4, lr}
 800fa3e:	4604      	mov	r4, r0
 800fa40:	f7ff fff0 	bl	800fa24 <__sinit_lock_acquire>
 800fa44:	69a3      	ldr	r3, [r4, #24]
 800fa46:	b11b      	cbz	r3, 800fa50 <__sinit+0x14>
 800fa48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa4c:	f7ff bff0 	b.w	800fa30 <__sinit_lock_release>
 800fa50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fa54:	6523      	str	r3, [r4, #80]	; 0x50
 800fa56:	4b13      	ldr	r3, [pc, #76]	; (800faa4 <__sinit+0x68>)
 800fa58:	4a13      	ldr	r2, [pc, #76]	; (800faa8 <__sinit+0x6c>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	62a2      	str	r2, [r4, #40]	; 0x28
 800fa5e:	42a3      	cmp	r3, r4
 800fa60:	bf04      	itt	eq
 800fa62:	2301      	moveq	r3, #1
 800fa64:	61a3      	streq	r3, [r4, #24]
 800fa66:	4620      	mov	r0, r4
 800fa68:	f000 f820 	bl	800faac <__sfp>
 800fa6c:	6060      	str	r0, [r4, #4]
 800fa6e:	4620      	mov	r0, r4
 800fa70:	f000 f81c 	bl	800faac <__sfp>
 800fa74:	60a0      	str	r0, [r4, #8]
 800fa76:	4620      	mov	r0, r4
 800fa78:	f000 f818 	bl	800faac <__sfp>
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	60e0      	str	r0, [r4, #12]
 800fa80:	2104      	movs	r1, #4
 800fa82:	6860      	ldr	r0, [r4, #4]
 800fa84:	f7ff ff82 	bl	800f98c <std>
 800fa88:	68a0      	ldr	r0, [r4, #8]
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	2109      	movs	r1, #9
 800fa8e:	f7ff ff7d 	bl	800f98c <std>
 800fa92:	68e0      	ldr	r0, [r4, #12]
 800fa94:	2202      	movs	r2, #2
 800fa96:	2112      	movs	r1, #18
 800fa98:	f7ff ff78 	bl	800f98c <std>
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	61a3      	str	r3, [r4, #24]
 800faa0:	e7d2      	b.n	800fa48 <__sinit+0xc>
 800faa2:	bf00      	nop
 800faa4:	08010d70 	.word	0x08010d70
 800faa8:	0800f9d5 	.word	0x0800f9d5

0800faac <__sfp>:
 800faac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faae:	4607      	mov	r7, r0
 800fab0:	f7ff ffac 	bl	800fa0c <__sfp_lock_acquire>
 800fab4:	4b1e      	ldr	r3, [pc, #120]	; (800fb30 <__sfp+0x84>)
 800fab6:	681e      	ldr	r6, [r3, #0]
 800fab8:	69b3      	ldr	r3, [r6, #24]
 800faba:	b913      	cbnz	r3, 800fac2 <__sfp+0x16>
 800fabc:	4630      	mov	r0, r6
 800fabe:	f7ff ffbd 	bl	800fa3c <__sinit>
 800fac2:	3648      	adds	r6, #72	; 0x48
 800fac4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fac8:	3b01      	subs	r3, #1
 800faca:	d503      	bpl.n	800fad4 <__sfp+0x28>
 800facc:	6833      	ldr	r3, [r6, #0]
 800face:	b30b      	cbz	r3, 800fb14 <__sfp+0x68>
 800fad0:	6836      	ldr	r6, [r6, #0]
 800fad2:	e7f7      	b.n	800fac4 <__sfp+0x18>
 800fad4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fad8:	b9d5      	cbnz	r5, 800fb10 <__sfp+0x64>
 800fada:	4b16      	ldr	r3, [pc, #88]	; (800fb34 <__sfp+0x88>)
 800fadc:	60e3      	str	r3, [r4, #12]
 800fade:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fae2:	6665      	str	r5, [r4, #100]	; 0x64
 800fae4:	f000 f847 	bl	800fb76 <__retarget_lock_init_recursive>
 800fae8:	f7ff ff96 	bl	800fa18 <__sfp_lock_release>
 800faec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800faf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800faf4:	6025      	str	r5, [r4, #0]
 800faf6:	61a5      	str	r5, [r4, #24]
 800faf8:	2208      	movs	r2, #8
 800fafa:	4629      	mov	r1, r5
 800fafc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fb00:	f7ff fd9c 	bl	800f63c <memset>
 800fb04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fb08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb10:	3468      	adds	r4, #104	; 0x68
 800fb12:	e7d9      	b.n	800fac8 <__sfp+0x1c>
 800fb14:	2104      	movs	r1, #4
 800fb16:	4638      	mov	r0, r7
 800fb18:	f7ff ff62 	bl	800f9e0 <__sfmoreglue>
 800fb1c:	4604      	mov	r4, r0
 800fb1e:	6030      	str	r0, [r6, #0]
 800fb20:	2800      	cmp	r0, #0
 800fb22:	d1d5      	bne.n	800fad0 <__sfp+0x24>
 800fb24:	f7ff ff78 	bl	800fa18 <__sfp_lock_release>
 800fb28:	230c      	movs	r3, #12
 800fb2a:	603b      	str	r3, [r7, #0]
 800fb2c:	e7ee      	b.n	800fb0c <__sfp+0x60>
 800fb2e:	bf00      	nop
 800fb30:	08010d70 	.word	0x08010d70
 800fb34:	ffff0001 	.word	0xffff0001

0800fb38 <_fwalk_reent>:
 800fb38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb3c:	4606      	mov	r6, r0
 800fb3e:	4688      	mov	r8, r1
 800fb40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fb44:	2700      	movs	r7, #0
 800fb46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb4a:	f1b9 0901 	subs.w	r9, r9, #1
 800fb4e:	d505      	bpl.n	800fb5c <_fwalk_reent+0x24>
 800fb50:	6824      	ldr	r4, [r4, #0]
 800fb52:	2c00      	cmp	r4, #0
 800fb54:	d1f7      	bne.n	800fb46 <_fwalk_reent+0xe>
 800fb56:	4638      	mov	r0, r7
 800fb58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb5c:	89ab      	ldrh	r3, [r5, #12]
 800fb5e:	2b01      	cmp	r3, #1
 800fb60:	d907      	bls.n	800fb72 <_fwalk_reent+0x3a>
 800fb62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb66:	3301      	adds	r3, #1
 800fb68:	d003      	beq.n	800fb72 <_fwalk_reent+0x3a>
 800fb6a:	4629      	mov	r1, r5
 800fb6c:	4630      	mov	r0, r6
 800fb6e:	47c0      	blx	r8
 800fb70:	4307      	orrs	r7, r0
 800fb72:	3568      	adds	r5, #104	; 0x68
 800fb74:	e7e9      	b.n	800fb4a <_fwalk_reent+0x12>

0800fb76 <__retarget_lock_init_recursive>:
 800fb76:	4770      	bx	lr

0800fb78 <__retarget_lock_acquire_recursive>:
 800fb78:	4770      	bx	lr

0800fb7a <__retarget_lock_release_recursive>:
 800fb7a:	4770      	bx	lr

0800fb7c <__swhatbuf_r>:
 800fb7c:	b570      	push	{r4, r5, r6, lr}
 800fb7e:	460e      	mov	r6, r1
 800fb80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb84:	2900      	cmp	r1, #0
 800fb86:	b096      	sub	sp, #88	; 0x58
 800fb88:	4614      	mov	r4, r2
 800fb8a:	461d      	mov	r5, r3
 800fb8c:	da08      	bge.n	800fba0 <__swhatbuf_r+0x24>
 800fb8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fb92:	2200      	movs	r2, #0
 800fb94:	602a      	str	r2, [r5, #0]
 800fb96:	061a      	lsls	r2, r3, #24
 800fb98:	d410      	bmi.n	800fbbc <__swhatbuf_r+0x40>
 800fb9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb9e:	e00e      	b.n	800fbbe <__swhatbuf_r+0x42>
 800fba0:	466a      	mov	r2, sp
 800fba2:	f000 fd5d 	bl	8010660 <_fstat_r>
 800fba6:	2800      	cmp	r0, #0
 800fba8:	dbf1      	blt.n	800fb8e <__swhatbuf_r+0x12>
 800fbaa:	9a01      	ldr	r2, [sp, #4]
 800fbac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fbb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fbb4:	425a      	negs	r2, r3
 800fbb6:	415a      	adcs	r2, r3
 800fbb8:	602a      	str	r2, [r5, #0]
 800fbba:	e7ee      	b.n	800fb9a <__swhatbuf_r+0x1e>
 800fbbc:	2340      	movs	r3, #64	; 0x40
 800fbbe:	2000      	movs	r0, #0
 800fbc0:	6023      	str	r3, [r4, #0]
 800fbc2:	b016      	add	sp, #88	; 0x58
 800fbc4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fbc8 <__smakebuf_r>:
 800fbc8:	898b      	ldrh	r3, [r1, #12]
 800fbca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fbcc:	079d      	lsls	r5, r3, #30
 800fbce:	4606      	mov	r6, r0
 800fbd0:	460c      	mov	r4, r1
 800fbd2:	d507      	bpl.n	800fbe4 <__smakebuf_r+0x1c>
 800fbd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fbd8:	6023      	str	r3, [r4, #0]
 800fbda:	6123      	str	r3, [r4, #16]
 800fbdc:	2301      	movs	r3, #1
 800fbde:	6163      	str	r3, [r4, #20]
 800fbe0:	b002      	add	sp, #8
 800fbe2:	bd70      	pop	{r4, r5, r6, pc}
 800fbe4:	ab01      	add	r3, sp, #4
 800fbe6:	466a      	mov	r2, sp
 800fbe8:	f7ff ffc8 	bl	800fb7c <__swhatbuf_r>
 800fbec:	9900      	ldr	r1, [sp, #0]
 800fbee:	4605      	mov	r5, r0
 800fbf0:	4630      	mov	r0, r6
 800fbf2:	f000 f89d 	bl	800fd30 <_malloc_r>
 800fbf6:	b948      	cbnz	r0, 800fc0c <__smakebuf_r+0x44>
 800fbf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbfc:	059a      	lsls	r2, r3, #22
 800fbfe:	d4ef      	bmi.n	800fbe0 <__smakebuf_r+0x18>
 800fc00:	f023 0303 	bic.w	r3, r3, #3
 800fc04:	f043 0302 	orr.w	r3, r3, #2
 800fc08:	81a3      	strh	r3, [r4, #12]
 800fc0a:	e7e3      	b.n	800fbd4 <__smakebuf_r+0xc>
 800fc0c:	4b0d      	ldr	r3, [pc, #52]	; (800fc44 <__smakebuf_r+0x7c>)
 800fc0e:	62b3      	str	r3, [r6, #40]	; 0x28
 800fc10:	89a3      	ldrh	r3, [r4, #12]
 800fc12:	6020      	str	r0, [r4, #0]
 800fc14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc18:	81a3      	strh	r3, [r4, #12]
 800fc1a:	9b00      	ldr	r3, [sp, #0]
 800fc1c:	6163      	str	r3, [r4, #20]
 800fc1e:	9b01      	ldr	r3, [sp, #4]
 800fc20:	6120      	str	r0, [r4, #16]
 800fc22:	b15b      	cbz	r3, 800fc3c <__smakebuf_r+0x74>
 800fc24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc28:	4630      	mov	r0, r6
 800fc2a:	f000 fd2b 	bl	8010684 <_isatty_r>
 800fc2e:	b128      	cbz	r0, 800fc3c <__smakebuf_r+0x74>
 800fc30:	89a3      	ldrh	r3, [r4, #12]
 800fc32:	f023 0303 	bic.w	r3, r3, #3
 800fc36:	f043 0301 	orr.w	r3, r3, #1
 800fc3a:	81a3      	strh	r3, [r4, #12]
 800fc3c:	89a0      	ldrh	r0, [r4, #12]
 800fc3e:	4305      	orrs	r5, r0
 800fc40:	81a5      	strh	r5, [r4, #12]
 800fc42:	e7cd      	b.n	800fbe0 <__smakebuf_r+0x18>
 800fc44:	0800f9d5 	.word	0x0800f9d5

0800fc48 <malloc>:
 800fc48:	4b02      	ldr	r3, [pc, #8]	; (800fc54 <malloc+0xc>)
 800fc4a:	4601      	mov	r1, r0
 800fc4c:	6818      	ldr	r0, [r3, #0]
 800fc4e:	f000 b86f 	b.w	800fd30 <_malloc_r>
 800fc52:	bf00      	nop
 800fc54:	24000054 	.word	0x24000054

0800fc58 <_free_r>:
 800fc58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc5a:	2900      	cmp	r1, #0
 800fc5c:	d044      	beq.n	800fce8 <_free_r+0x90>
 800fc5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc62:	9001      	str	r0, [sp, #4]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	f1a1 0404 	sub.w	r4, r1, #4
 800fc6a:	bfb8      	it	lt
 800fc6c:	18e4      	addlt	r4, r4, r3
 800fc6e:	f000 fd2b 	bl	80106c8 <__malloc_lock>
 800fc72:	4a1e      	ldr	r2, [pc, #120]	; (800fcec <_free_r+0x94>)
 800fc74:	9801      	ldr	r0, [sp, #4]
 800fc76:	6813      	ldr	r3, [r2, #0]
 800fc78:	b933      	cbnz	r3, 800fc88 <_free_r+0x30>
 800fc7a:	6063      	str	r3, [r4, #4]
 800fc7c:	6014      	str	r4, [r2, #0]
 800fc7e:	b003      	add	sp, #12
 800fc80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc84:	f000 bd26 	b.w	80106d4 <__malloc_unlock>
 800fc88:	42a3      	cmp	r3, r4
 800fc8a:	d908      	bls.n	800fc9e <_free_r+0x46>
 800fc8c:	6825      	ldr	r5, [r4, #0]
 800fc8e:	1961      	adds	r1, r4, r5
 800fc90:	428b      	cmp	r3, r1
 800fc92:	bf01      	itttt	eq
 800fc94:	6819      	ldreq	r1, [r3, #0]
 800fc96:	685b      	ldreq	r3, [r3, #4]
 800fc98:	1949      	addeq	r1, r1, r5
 800fc9a:	6021      	streq	r1, [r4, #0]
 800fc9c:	e7ed      	b.n	800fc7a <_free_r+0x22>
 800fc9e:	461a      	mov	r2, r3
 800fca0:	685b      	ldr	r3, [r3, #4]
 800fca2:	b10b      	cbz	r3, 800fca8 <_free_r+0x50>
 800fca4:	42a3      	cmp	r3, r4
 800fca6:	d9fa      	bls.n	800fc9e <_free_r+0x46>
 800fca8:	6811      	ldr	r1, [r2, #0]
 800fcaa:	1855      	adds	r5, r2, r1
 800fcac:	42a5      	cmp	r5, r4
 800fcae:	d10b      	bne.n	800fcc8 <_free_r+0x70>
 800fcb0:	6824      	ldr	r4, [r4, #0]
 800fcb2:	4421      	add	r1, r4
 800fcb4:	1854      	adds	r4, r2, r1
 800fcb6:	42a3      	cmp	r3, r4
 800fcb8:	6011      	str	r1, [r2, #0]
 800fcba:	d1e0      	bne.n	800fc7e <_free_r+0x26>
 800fcbc:	681c      	ldr	r4, [r3, #0]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	6053      	str	r3, [r2, #4]
 800fcc2:	4421      	add	r1, r4
 800fcc4:	6011      	str	r1, [r2, #0]
 800fcc6:	e7da      	b.n	800fc7e <_free_r+0x26>
 800fcc8:	d902      	bls.n	800fcd0 <_free_r+0x78>
 800fcca:	230c      	movs	r3, #12
 800fccc:	6003      	str	r3, [r0, #0]
 800fcce:	e7d6      	b.n	800fc7e <_free_r+0x26>
 800fcd0:	6825      	ldr	r5, [r4, #0]
 800fcd2:	1961      	adds	r1, r4, r5
 800fcd4:	428b      	cmp	r3, r1
 800fcd6:	bf04      	itt	eq
 800fcd8:	6819      	ldreq	r1, [r3, #0]
 800fcda:	685b      	ldreq	r3, [r3, #4]
 800fcdc:	6063      	str	r3, [r4, #4]
 800fcde:	bf04      	itt	eq
 800fce0:	1949      	addeq	r1, r1, r5
 800fce2:	6021      	streq	r1, [r4, #0]
 800fce4:	6054      	str	r4, [r2, #4]
 800fce6:	e7ca      	b.n	800fc7e <_free_r+0x26>
 800fce8:	b003      	add	sp, #12
 800fcea:	bd30      	pop	{r4, r5, pc}
 800fcec:	240e0074 	.word	0x240e0074

0800fcf0 <sbrk_aligned>:
 800fcf0:	b570      	push	{r4, r5, r6, lr}
 800fcf2:	4e0e      	ldr	r6, [pc, #56]	; (800fd2c <sbrk_aligned+0x3c>)
 800fcf4:	460c      	mov	r4, r1
 800fcf6:	6831      	ldr	r1, [r6, #0]
 800fcf8:	4605      	mov	r5, r0
 800fcfa:	b911      	cbnz	r1, 800fd02 <sbrk_aligned+0x12>
 800fcfc:	f000 fb7a 	bl	80103f4 <_sbrk_r>
 800fd00:	6030      	str	r0, [r6, #0]
 800fd02:	4621      	mov	r1, r4
 800fd04:	4628      	mov	r0, r5
 800fd06:	f000 fb75 	bl	80103f4 <_sbrk_r>
 800fd0a:	1c43      	adds	r3, r0, #1
 800fd0c:	d00a      	beq.n	800fd24 <sbrk_aligned+0x34>
 800fd0e:	1cc4      	adds	r4, r0, #3
 800fd10:	f024 0403 	bic.w	r4, r4, #3
 800fd14:	42a0      	cmp	r0, r4
 800fd16:	d007      	beq.n	800fd28 <sbrk_aligned+0x38>
 800fd18:	1a21      	subs	r1, r4, r0
 800fd1a:	4628      	mov	r0, r5
 800fd1c:	f000 fb6a 	bl	80103f4 <_sbrk_r>
 800fd20:	3001      	adds	r0, #1
 800fd22:	d101      	bne.n	800fd28 <sbrk_aligned+0x38>
 800fd24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fd28:	4620      	mov	r0, r4
 800fd2a:	bd70      	pop	{r4, r5, r6, pc}
 800fd2c:	240e0078 	.word	0x240e0078

0800fd30 <_malloc_r>:
 800fd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd34:	1ccd      	adds	r5, r1, #3
 800fd36:	f025 0503 	bic.w	r5, r5, #3
 800fd3a:	3508      	adds	r5, #8
 800fd3c:	2d0c      	cmp	r5, #12
 800fd3e:	bf38      	it	cc
 800fd40:	250c      	movcc	r5, #12
 800fd42:	2d00      	cmp	r5, #0
 800fd44:	4607      	mov	r7, r0
 800fd46:	db01      	blt.n	800fd4c <_malloc_r+0x1c>
 800fd48:	42a9      	cmp	r1, r5
 800fd4a:	d905      	bls.n	800fd58 <_malloc_r+0x28>
 800fd4c:	230c      	movs	r3, #12
 800fd4e:	603b      	str	r3, [r7, #0]
 800fd50:	2600      	movs	r6, #0
 800fd52:	4630      	mov	r0, r6
 800fd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd58:	4e2e      	ldr	r6, [pc, #184]	; (800fe14 <_malloc_r+0xe4>)
 800fd5a:	f000 fcb5 	bl	80106c8 <__malloc_lock>
 800fd5e:	6833      	ldr	r3, [r6, #0]
 800fd60:	461c      	mov	r4, r3
 800fd62:	bb34      	cbnz	r4, 800fdb2 <_malloc_r+0x82>
 800fd64:	4629      	mov	r1, r5
 800fd66:	4638      	mov	r0, r7
 800fd68:	f7ff ffc2 	bl	800fcf0 <sbrk_aligned>
 800fd6c:	1c43      	adds	r3, r0, #1
 800fd6e:	4604      	mov	r4, r0
 800fd70:	d14d      	bne.n	800fe0e <_malloc_r+0xde>
 800fd72:	6834      	ldr	r4, [r6, #0]
 800fd74:	4626      	mov	r6, r4
 800fd76:	2e00      	cmp	r6, #0
 800fd78:	d140      	bne.n	800fdfc <_malloc_r+0xcc>
 800fd7a:	6823      	ldr	r3, [r4, #0]
 800fd7c:	4631      	mov	r1, r6
 800fd7e:	4638      	mov	r0, r7
 800fd80:	eb04 0803 	add.w	r8, r4, r3
 800fd84:	f000 fb36 	bl	80103f4 <_sbrk_r>
 800fd88:	4580      	cmp	r8, r0
 800fd8a:	d13a      	bne.n	800fe02 <_malloc_r+0xd2>
 800fd8c:	6821      	ldr	r1, [r4, #0]
 800fd8e:	3503      	adds	r5, #3
 800fd90:	1a6d      	subs	r5, r5, r1
 800fd92:	f025 0503 	bic.w	r5, r5, #3
 800fd96:	3508      	adds	r5, #8
 800fd98:	2d0c      	cmp	r5, #12
 800fd9a:	bf38      	it	cc
 800fd9c:	250c      	movcc	r5, #12
 800fd9e:	4629      	mov	r1, r5
 800fda0:	4638      	mov	r0, r7
 800fda2:	f7ff ffa5 	bl	800fcf0 <sbrk_aligned>
 800fda6:	3001      	adds	r0, #1
 800fda8:	d02b      	beq.n	800fe02 <_malloc_r+0xd2>
 800fdaa:	6823      	ldr	r3, [r4, #0]
 800fdac:	442b      	add	r3, r5
 800fdae:	6023      	str	r3, [r4, #0]
 800fdb0:	e00e      	b.n	800fdd0 <_malloc_r+0xa0>
 800fdb2:	6822      	ldr	r2, [r4, #0]
 800fdb4:	1b52      	subs	r2, r2, r5
 800fdb6:	d41e      	bmi.n	800fdf6 <_malloc_r+0xc6>
 800fdb8:	2a0b      	cmp	r2, #11
 800fdba:	d916      	bls.n	800fdea <_malloc_r+0xba>
 800fdbc:	1961      	adds	r1, r4, r5
 800fdbe:	42a3      	cmp	r3, r4
 800fdc0:	6025      	str	r5, [r4, #0]
 800fdc2:	bf18      	it	ne
 800fdc4:	6059      	strne	r1, [r3, #4]
 800fdc6:	6863      	ldr	r3, [r4, #4]
 800fdc8:	bf08      	it	eq
 800fdca:	6031      	streq	r1, [r6, #0]
 800fdcc:	5162      	str	r2, [r4, r5]
 800fdce:	604b      	str	r3, [r1, #4]
 800fdd0:	4638      	mov	r0, r7
 800fdd2:	f104 060b 	add.w	r6, r4, #11
 800fdd6:	f000 fc7d 	bl	80106d4 <__malloc_unlock>
 800fdda:	f026 0607 	bic.w	r6, r6, #7
 800fdde:	1d23      	adds	r3, r4, #4
 800fde0:	1af2      	subs	r2, r6, r3
 800fde2:	d0b6      	beq.n	800fd52 <_malloc_r+0x22>
 800fde4:	1b9b      	subs	r3, r3, r6
 800fde6:	50a3      	str	r3, [r4, r2]
 800fde8:	e7b3      	b.n	800fd52 <_malloc_r+0x22>
 800fdea:	6862      	ldr	r2, [r4, #4]
 800fdec:	42a3      	cmp	r3, r4
 800fdee:	bf0c      	ite	eq
 800fdf0:	6032      	streq	r2, [r6, #0]
 800fdf2:	605a      	strne	r2, [r3, #4]
 800fdf4:	e7ec      	b.n	800fdd0 <_malloc_r+0xa0>
 800fdf6:	4623      	mov	r3, r4
 800fdf8:	6864      	ldr	r4, [r4, #4]
 800fdfa:	e7b2      	b.n	800fd62 <_malloc_r+0x32>
 800fdfc:	4634      	mov	r4, r6
 800fdfe:	6876      	ldr	r6, [r6, #4]
 800fe00:	e7b9      	b.n	800fd76 <_malloc_r+0x46>
 800fe02:	230c      	movs	r3, #12
 800fe04:	603b      	str	r3, [r7, #0]
 800fe06:	4638      	mov	r0, r7
 800fe08:	f000 fc64 	bl	80106d4 <__malloc_unlock>
 800fe0c:	e7a1      	b.n	800fd52 <_malloc_r+0x22>
 800fe0e:	6025      	str	r5, [r4, #0]
 800fe10:	e7de      	b.n	800fdd0 <_malloc_r+0xa0>
 800fe12:	bf00      	nop
 800fe14:	240e0074 	.word	0x240e0074

0800fe18 <__sfputc_r>:
 800fe18:	6893      	ldr	r3, [r2, #8]
 800fe1a:	3b01      	subs	r3, #1
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	b410      	push	{r4}
 800fe20:	6093      	str	r3, [r2, #8]
 800fe22:	da08      	bge.n	800fe36 <__sfputc_r+0x1e>
 800fe24:	6994      	ldr	r4, [r2, #24]
 800fe26:	42a3      	cmp	r3, r4
 800fe28:	db01      	blt.n	800fe2e <__sfputc_r+0x16>
 800fe2a:	290a      	cmp	r1, #10
 800fe2c:	d103      	bne.n	800fe36 <__sfputc_r+0x1e>
 800fe2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe32:	f000 bb33 	b.w	801049c <__swbuf_r>
 800fe36:	6813      	ldr	r3, [r2, #0]
 800fe38:	1c58      	adds	r0, r3, #1
 800fe3a:	6010      	str	r0, [r2, #0]
 800fe3c:	7019      	strb	r1, [r3, #0]
 800fe3e:	4608      	mov	r0, r1
 800fe40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe44:	4770      	bx	lr

0800fe46 <__sfputs_r>:
 800fe46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe48:	4606      	mov	r6, r0
 800fe4a:	460f      	mov	r7, r1
 800fe4c:	4614      	mov	r4, r2
 800fe4e:	18d5      	adds	r5, r2, r3
 800fe50:	42ac      	cmp	r4, r5
 800fe52:	d101      	bne.n	800fe58 <__sfputs_r+0x12>
 800fe54:	2000      	movs	r0, #0
 800fe56:	e007      	b.n	800fe68 <__sfputs_r+0x22>
 800fe58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe5c:	463a      	mov	r2, r7
 800fe5e:	4630      	mov	r0, r6
 800fe60:	f7ff ffda 	bl	800fe18 <__sfputc_r>
 800fe64:	1c43      	adds	r3, r0, #1
 800fe66:	d1f3      	bne.n	800fe50 <__sfputs_r+0xa>
 800fe68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe6c <_vfiprintf_r>:
 800fe6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe70:	460d      	mov	r5, r1
 800fe72:	b09d      	sub	sp, #116	; 0x74
 800fe74:	4614      	mov	r4, r2
 800fe76:	4698      	mov	r8, r3
 800fe78:	4606      	mov	r6, r0
 800fe7a:	b118      	cbz	r0, 800fe84 <_vfiprintf_r+0x18>
 800fe7c:	6983      	ldr	r3, [r0, #24]
 800fe7e:	b90b      	cbnz	r3, 800fe84 <_vfiprintf_r+0x18>
 800fe80:	f7ff fddc 	bl	800fa3c <__sinit>
 800fe84:	4b89      	ldr	r3, [pc, #548]	; (80100ac <_vfiprintf_r+0x240>)
 800fe86:	429d      	cmp	r5, r3
 800fe88:	d11b      	bne.n	800fec2 <_vfiprintf_r+0x56>
 800fe8a:	6875      	ldr	r5, [r6, #4]
 800fe8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe8e:	07d9      	lsls	r1, r3, #31
 800fe90:	d405      	bmi.n	800fe9e <_vfiprintf_r+0x32>
 800fe92:	89ab      	ldrh	r3, [r5, #12]
 800fe94:	059a      	lsls	r2, r3, #22
 800fe96:	d402      	bmi.n	800fe9e <_vfiprintf_r+0x32>
 800fe98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe9a:	f7ff fe6d 	bl	800fb78 <__retarget_lock_acquire_recursive>
 800fe9e:	89ab      	ldrh	r3, [r5, #12]
 800fea0:	071b      	lsls	r3, r3, #28
 800fea2:	d501      	bpl.n	800fea8 <_vfiprintf_r+0x3c>
 800fea4:	692b      	ldr	r3, [r5, #16]
 800fea6:	b9eb      	cbnz	r3, 800fee4 <_vfiprintf_r+0x78>
 800fea8:	4629      	mov	r1, r5
 800feaa:	4630      	mov	r0, r6
 800feac:	f000 fb5a 	bl	8010564 <__swsetup_r>
 800feb0:	b1c0      	cbz	r0, 800fee4 <_vfiprintf_r+0x78>
 800feb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800feb4:	07dc      	lsls	r4, r3, #31
 800feb6:	d50e      	bpl.n	800fed6 <_vfiprintf_r+0x6a>
 800feb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800febc:	b01d      	add	sp, #116	; 0x74
 800febe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec2:	4b7b      	ldr	r3, [pc, #492]	; (80100b0 <_vfiprintf_r+0x244>)
 800fec4:	429d      	cmp	r5, r3
 800fec6:	d101      	bne.n	800fecc <_vfiprintf_r+0x60>
 800fec8:	68b5      	ldr	r5, [r6, #8]
 800feca:	e7df      	b.n	800fe8c <_vfiprintf_r+0x20>
 800fecc:	4b79      	ldr	r3, [pc, #484]	; (80100b4 <_vfiprintf_r+0x248>)
 800fece:	429d      	cmp	r5, r3
 800fed0:	bf08      	it	eq
 800fed2:	68f5      	ldreq	r5, [r6, #12]
 800fed4:	e7da      	b.n	800fe8c <_vfiprintf_r+0x20>
 800fed6:	89ab      	ldrh	r3, [r5, #12]
 800fed8:	0598      	lsls	r0, r3, #22
 800feda:	d4ed      	bmi.n	800feb8 <_vfiprintf_r+0x4c>
 800fedc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fede:	f7ff fe4c 	bl	800fb7a <__retarget_lock_release_recursive>
 800fee2:	e7e9      	b.n	800feb8 <_vfiprintf_r+0x4c>
 800fee4:	2300      	movs	r3, #0
 800fee6:	9309      	str	r3, [sp, #36]	; 0x24
 800fee8:	2320      	movs	r3, #32
 800feea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800feee:	f8cd 800c 	str.w	r8, [sp, #12]
 800fef2:	2330      	movs	r3, #48	; 0x30
 800fef4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80100b8 <_vfiprintf_r+0x24c>
 800fef8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fefc:	f04f 0901 	mov.w	r9, #1
 800ff00:	4623      	mov	r3, r4
 800ff02:	469a      	mov	sl, r3
 800ff04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff08:	b10a      	cbz	r2, 800ff0e <_vfiprintf_r+0xa2>
 800ff0a:	2a25      	cmp	r2, #37	; 0x25
 800ff0c:	d1f9      	bne.n	800ff02 <_vfiprintf_r+0x96>
 800ff0e:	ebba 0b04 	subs.w	fp, sl, r4
 800ff12:	d00b      	beq.n	800ff2c <_vfiprintf_r+0xc0>
 800ff14:	465b      	mov	r3, fp
 800ff16:	4622      	mov	r2, r4
 800ff18:	4629      	mov	r1, r5
 800ff1a:	4630      	mov	r0, r6
 800ff1c:	f7ff ff93 	bl	800fe46 <__sfputs_r>
 800ff20:	3001      	adds	r0, #1
 800ff22:	f000 80aa 	beq.w	801007a <_vfiprintf_r+0x20e>
 800ff26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff28:	445a      	add	r2, fp
 800ff2a:	9209      	str	r2, [sp, #36]	; 0x24
 800ff2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	f000 80a2 	beq.w	801007a <_vfiprintf_r+0x20e>
 800ff36:	2300      	movs	r3, #0
 800ff38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff40:	f10a 0a01 	add.w	sl, sl, #1
 800ff44:	9304      	str	r3, [sp, #16]
 800ff46:	9307      	str	r3, [sp, #28]
 800ff48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff4c:	931a      	str	r3, [sp, #104]	; 0x68
 800ff4e:	4654      	mov	r4, sl
 800ff50:	2205      	movs	r2, #5
 800ff52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff56:	4858      	ldr	r0, [pc, #352]	; (80100b8 <_vfiprintf_r+0x24c>)
 800ff58:	f7f0 f9ca 	bl	80002f0 <memchr>
 800ff5c:	9a04      	ldr	r2, [sp, #16]
 800ff5e:	b9d8      	cbnz	r0, 800ff98 <_vfiprintf_r+0x12c>
 800ff60:	06d1      	lsls	r1, r2, #27
 800ff62:	bf44      	itt	mi
 800ff64:	2320      	movmi	r3, #32
 800ff66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff6a:	0713      	lsls	r3, r2, #28
 800ff6c:	bf44      	itt	mi
 800ff6e:	232b      	movmi	r3, #43	; 0x2b
 800ff70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff74:	f89a 3000 	ldrb.w	r3, [sl]
 800ff78:	2b2a      	cmp	r3, #42	; 0x2a
 800ff7a:	d015      	beq.n	800ffa8 <_vfiprintf_r+0x13c>
 800ff7c:	9a07      	ldr	r2, [sp, #28]
 800ff7e:	4654      	mov	r4, sl
 800ff80:	2000      	movs	r0, #0
 800ff82:	f04f 0c0a 	mov.w	ip, #10
 800ff86:	4621      	mov	r1, r4
 800ff88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff8c:	3b30      	subs	r3, #48	; 0x30
 800ff8e:	2b09      	cmp	r3, #9
 800ff90:	d94e      	bls.n	8010030 <_vfiprintf_r+0x1c4>
 800ff92:	b1b0      	cbz	r0, 800ffc2 <_vfiprintf_r+0x156>
 800ff94:	9207      	str	r2, [sp, #28]
 800ff96:	e014      	b.n	800ffc2 <_vfiprintf_r+0x156>
 800ff98:	eba0 0308 	sub.w	r3, r0, r8
 800ff9c:	fa09 f303 	lsl.w	r3, r9, r3
 800ffa0:	4313      	orrs	r3, r2
 800ffa2:	9304      	str	r3, [sp, #16]
 800ffa4:	46a2      	mov	sl, r4
 800ffa6:	e7d2      	b.n	800ff4e <_vfiprintf_r+0xe2>
 800ffa8:	9b03      	ldr	r3, [sp, #12]
 800ffaa:	1d19      	adds	r1, r3, #4
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	9103      	str	r1, [sp, #12]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	bfbb      	ittet	lt
 800ffb4:	425b      	neglt	r3, r3
 800ffb6:	f042 0202 	orrlt.w	r2, r2, #2
 800ffba:	9307      	strge	r3, [sp, #28]
 800ffbc:	9307      	strlt	r3, [sp, #28]
 800ffbe:	bfb8      	it	lt
 800ffc0:	9204      	strlt	r2, [sp, #16]
 800ffc2:	7823      	ldrb	r3, [r4, #0]
 800ffc4:	2b2e      	cmp	r3, #46	; 0x2e
 800ffc6:	d10c      	bne.n	800ffe2 <_vfiprintf_r+0x176>
 800ffc8:	7863      	ldrb	r3, [r4, #1]
 800ffca:	2b2a      	cmp	r3, #42	; 0x2a
 800ffcc:	d135      	bne.n	801003a <_vfiprintf_r+0x1ce>
 800ffce:	9b03      	ldr	r3, [sp, #12]
 800ffd0:	1d1a      	adds	r2, r3, #4
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	9203      	str	r2, [sp, #12]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	bfb8      	it	lt
 800ffda:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ffde:	3402      	adds	r4, #2
 800ffe0:	9305      	str	r3, [sp, #20]
 800ffe2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80100c8 <_vfiprintf_r+0x25c>
 800ffe6:	7821      	ldrb	r1, [r4, #0]
 800ffe8:	2203      	movs	r2, #3
 800ffea:	4650      	mov	r0, sl
 800ffec:	f7f0 f980 	bl	80002f0 <memchr>
 800fff0:	b140      	cbz	r0, 8010004 <_vfiprintf_r+0x198>
 800fff2:	2340      	movs	r3, #64	; 0x40
 800fff4:	eba0 000a 	sub.w	r0, r0, sl
 800fff8:	fa03 f000 	lsl.w	r0, r3, r0
 800fffc:	9b04      	ldr	r3, [sp, #16]
 800fffe:	4303      	orrs	r3, r0
 8010000:	3401      	adds	r4, #1
 8010002:	9304      	str	r3, [sp, #16]
 8010004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010008:	482c      	ldr	r0, [pc, #176]	; (80100bc <_vfiprintf_r+0x250>)
 801000a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801000e:	2206      	movs	r2, #6
 8010010:	f7f0 f96e 	bl	80002f0 <memchr>
 8010014:	2800      	cmp	r0, #0
 8010016:	d03f      	beq.n	8010098 <_vfiprintf_r+0x22c>
 8010018:	4b29      	ldr	r3, [pc, #164]	; (80100c0 <_vfiprintf_r+0x254>)
 801001a:	bb1b      	cbnz	r3, 8010064 <_vfiprintf_r+0x1f8>
 801001c:	9b03      	ldr	r3, [sp, #12]
 801001e:	3307      	adds	r3, #7
 8010020:	f023 0307 	bic.w	r3, r3, #7
 8010024:	3308      	adds	r3, #8
 8010026:	9303      	str	r3, [sp, #12]
 8010028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801002a:	443b      	add	r3, r7
 801002c:	9309      	str	r3, [sp, #36]	; 0x24
 801002e:	e767      	b.n	800ff00 <_vfiprintf_r+0x94>
 8010030:	fb0c 3202 	mla	r2, ip, r2, r3
 8010034:	460c      	mov	r4, r1
 8010036:	2001      	movs	r0, #1
 8010038:	e7a5      	b.n	800ff86 <_vfiprintf_r+0x11a>
 801003a:	2300      	movs	r3, #0
 801003c:	3401      	adds	r4, #1
 801003e:	9305      	str	r3, [sp, #20]
 8010040:	4619      	mov	r1, r3
 8010042:	f04f 0c0a 	mov.w	ip, #10
 8010046:	4620      	mov	r0, r4
 8010048:	f810 2b01 	ldrb.w	r2, [r0], #1
 801004c:	3a30      	subs	r2, #48	; 0x30
 801004e:	2a09      	cmp	r2, #9
 8010050:	d903      	bls.n	801005a <_vfiprintf_r+0x1ee>
 8010052:	2b00      	cmp	r3, #0
 8010054:	d0c5      	beq.n	800ffe2 <_vfiprintf_r+0x176>
 8010056:	9105      	str	r1, [sp, #20]
 8010058:	e7c3      	b.n	800ffe2 <_vfiprintf_r+0x176>
 801005a:	fb0c 2101 	mla	r1, ip, r1, r2
 801005e:	4604      	mov	r4, r0
 8010060:	2301      	movs	r3, #1
 8010062:	e7f0      	b.n	8010046 <_vfiprintf_r+0x1da>
 8010064:	ab03      	add	r3, sp, #12
 8010066:	9300      	str	r3, [sp, #0]
 8010068:	462a      	mov	r2, r5
 801006a:	4b16      	ldr	r3, [pc, #88]	; (80100c4 <_vfiprintf_r+0x258>)
 801006c:	a904      	add	r1, sp, #16
 801006e:	4630      	mov	r0, r6
 8010070:	f3af 8000 	nop.w
 8010074:	4607      	mov	r7, r0
 8010076:	1c78      	adds	r0, r7, #1
 8010078:	d1d6      	bne.n	8010028 <_vfiprintf_r+0x1bc>
 801007a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801007c:	07d9      	lsls	r1, r3, #31
 801007e:	d405      	bmi.n	801008c <_vfiprintf_r+0x220>
 8010080:	89ab      	ldrh	r3, [r5, #12]
 8010082:	059a      	lsls	r2, r3, #22
 8010084:	d402      	bmi.n	801008c <_vfiprintf_r+0x220>
 8010086:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010088:	f7ff fd77 	bl	800fb7a <__retarget_lock_release_recursive>
 801008c:	89ab      	ldrh	r3, [r5, #12]
 801008e:	065b      	lsls	r3, r3, #25
 8010090:	f53f af12 	bmi.w	800feb8 <_vfiprintf_r+0x4c>
 8010094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010096:	e711      	b.n	800febc <_vfiprintf_r+0x50>
 8010098:	ab03      	add	r3, sp, #12
 801009a:	9300      	str	r3, [sp, #0]
 801009c:	462a      	mov	r2, r5
 801009e:	4b09      	ldr	r3, [pc, #36]	; (80100c4 <_vfiprintf_r+0x258>)
 80100a0:	a904      	add	r1, sp, #16
 80100a2:	4630      	mov	r0, r6
 80100a4:	f000 f880 	bl	80101a8 <_printf_i>
 80100a8:	e7e4      	b.n	8010074 <_vfiprintf_r+0x208>
 80100aa:	bf00      	nop
 80100ac:	08010d94 	.word	0x08010d94
 80100b0:	08010db4 	.word	0x08010db4
 80100b4:	08010d74 	.word	0x08010d74
 80100b8:	08010dd4 	.word	0x08010dd4
 80100bc:	08010dde 	.word	0x08010dde
 80100c0:	00000000 	.word	0x00000000
 80100c4:	0800fe47 	.word	0x0800fe47
 80100c8:	08010dda 	.word	0x08010dda

080100cc <_printf_common>:
 80100cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100d0:	4616      	mov	r6, r2
 80100d2:	4699      	mov	r9, r3
 80100d4:	688a      	ldr	r2, [r1, #8]
 80100d6:	690b      	ldr	r3, [r1, #16]
 80100d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80100dc:	4293      	cmp	r3, r2
 80100de:	bfb8      	it	lt
 80100e0:	4613      	movlt	r3, r2
 80100e2:	6033      	str	r3, [r6, #0]
 80100e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80100e8:	4607      	mov	r7, r0
 80100ea:	460c      	mov	r4, r1
 80100ec:	b10a      	cbz	r2, 80100f2 <_printf_common+0x26>
 80100ee:	3301      	adds	r3, #1
 80100f0:	6033      	str	r3, [r6, #0]
 80100f2:	6823      	ldr	r3, [r4, #0]
 80100f4:	0699      	lsls	r1, r3, #26
 80100f6:	bf42      	ittt	mi
 80100f8:	6833      	ldrmi	r3, [r6, #0]
 80100fa:	3302      	addmi	r3, #2
 80100fc:	6033      	strmi	r3, [r6, #0]
 80100fe:	6825      	ldr	r5, [r4, #0]
 8010100:	f015 0506 	ands.w	r5, r5, #6
 8010104:	d106      	bne.n	8010114 <_printf_common+0x48>
 8010106:	f104 0a19 	add.w	sl, r4, #25
 801010a:	68e3      	ldr	r3, [r4, #12]
 801010c:	6832      	ldr	r2, [r6, #0]
 801010e:	1a9b      	subs	r3, r3, r2
 8010110:	42ab      	cmp	r3, r5
 8010112:	dc26      	bgt.n	8010162 <_printf_common+0x96>
 8010114:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010118:	1e13      	subs	r3, r2, #0
 801011a:	6822      	ldr	r2, [r4, #0]
 801011c:	bf18      	it	ne
 801011e:	2301      	movne	r3, #1
 8010120:	0692      	lsls	r2, r2, #26
 8010122:	d42b      	bmi.n	801017c <_printf_common+0xb0>
 8010124:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010128:	4649      	mov	r1, r9
 801012a:	4638      	mov	r0, r7
 801012c:	47c0      	blx	r8
 801012e:	3001      	adds	r0, #1
 8010130:	d01e      	beq.n	8010170 <_printf_common+0xa4>
 8010132:	6823      	ldr	r3, [r4, #0]
 8010134:	68e5      	ldr	r5, [r4, #12]
 8010136:	6832      	ldr	r2, [r6, #0]
 8010138:	f003 0306 	and.w	r3, r3, #6
 801013c:	2b04      	cmp	r3, #4
 801013e:	bf08      	it	eq
 8010140:	1aad      	subeq	r5, r5, r2
 8010142:	68a3      	ldr	r3, [r4, #8]
 8010144:	6922      	ldr	r2, [r4, #16]
 8010146:	bf0c      	ite	eq
 8010148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801014c:	2500      	movne	r5, #0
 801014e:	4293      	cmp	r3, r2
 8010150:	bfc4      	itt	gt
 8010152:	1a9b      	subgt	r3, r3, r2
 8010154:	18ed      	addgt	r5, r5, r3
 8010156:	2600      	movs	r6, #0
 8010158:	341a      	adds	r4, #26
 801015a:	42b5      	cmp	r5, r6
 801015c:	d11a      	bne.n	8010194 <_printf_common+0xc8>
 801015e:	2000      	movs	r0, #0
 8010160:	e008      	b.n	8010174 <_printf_common+0xa8>
 8010162:	2301      	movs	r3, #1
 8010164:	4652      	mov	r2, sl
 8010166:	4649      	mov	r1, r9
 8010168:	4638      	mov	r0, r7
 801016a:	47c0      	blx	r8
 801016c:	3001      	adds	r0, #1
 801016e:	d103      	bne.n	8010178 <_printf_common+0xac>
 8010170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010178:	3501      	adds	r5, #1
 801017a:	e7c6      	b.n	801010a <_printf_common+0x3e>
 801017c:	18e1      	adds	r1, r4, r3
 801017e:	1c5a      	adds	r2, r3, #1
 8010180:	2030      	movs	r0, #48	; 0x30
 8010182:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010186:	4422      	add	r2, r4
 8010188:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801018c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010190:	3302      	adds	r3, #2
 8010192:	e7c7      	b.n	8010124 <_printf_common+0x58>
 8010194:	2301      	movs	r3, #1
 8010196:	4622      	mov	r2, r4
 8010198:	4649      	mov	r1, r9
 801019a:	4638      	mov	r0, r7
 801019c:	47c0      	blx	r8
 801019e:	3001      	adds	r0, #1
 80101a0:	d0e6      	beq.n	8010170 <_printf_common+0xa4>
 80101a2:	3601      	adds	r6, #1
 80101a4:	e7d9      	b.n	801015a <_printf_common+0x8e>
	...

080101a8 <_printf_i>:
 80101a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80101ac:	7e0f      	ldrb	r7, [r1, #24]
 80101ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80101b0:	2f78      	cmp	r7, #120	; 0x78
 80101b2:	4691      	mov	r9, r2
 80101b4:	4680      	mov	r8, r0
 80101b6:	460c      	mov	r4, r1
 80101b8:	469a      	mov	sl, r3
 80101ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80101be:	d807      	bhi.n	80101d0 <_printf_i+0x28>
 80101c0:	2f62      	cmp	r7, #98	; 0x62
 80101c2:	d80a      	bhi.n	80101da <_printf_i+0x32>
 80101c4:	2f00      	cmp	r7, #0
 80101c6:	f000 80d8 	beq.w	801037a <_printf_i+0x1d2>
 80101ca:	2f58      	cmp	r7, #88	; 0x58
 80101cc:	f000 80a3 	beq.w	8010316 <_printf_i+0x16e>
 80101d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80101d8:	e03a      	b.n	8010250 <_printf_i+0xa8>
 80101da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80101de:	2b15      	cmp	r3, #21
 80101e0:	d8f6      	bhi.n	80101d0 <_printf_i+0x28>
 80101e2:	a101      	add	r1, pc, #4	; (adr r1, 80101e8 <_printf_i+0x40>)
 80101e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80101e8:	08010241 	.word	0x08010241
 80101ec:	08010255 	.word	0x08010255
 80101f0:	080101d1 	.word	0x080101d1
 80101f4:	080101d1 	.word	0x080101d1
 80101f8:	080101d1 	.word	0x080101d1
 80101fc:	080101d1 	.word	0x080101d1
 8010200:	08010255 	.word	0x08010255
 8010204:	080101d1 	.word	0x080101d1
 8010208:	080101d1 	.word	0x080101d1
 801020c:	080101d1 	.word	0x080101d1
 8010210:	080101d1 	.word	0x080101d1
 8010214:	08010361 	.word	0x08010361
 8010218:	08010285 	.word	0x08010285
 801021c:	08010343 	.word	0x08010343
 8010220:	080101d1 	.word	0x080101d1
 8010224:	080101d1 	.word	0x080101d1
 8010228:	08010383 	.word	0x08010383
 801022c:	080101d1 	.word	0x080101d1
 8010230:	08010285 	.word	0x08010285
 8010234:	080101d1 	.word	0x080101d1
 8010238:	080101d1 	.word	0x080101d1
 801023c:	0801034b 	.word	0x0801034b
 8010240:	682b      	ldr	r3, [r5, #0]
 8010242:	1d1a      	adds	r2, r3, #4
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	602a      	str	r2, [r5, #0]
 8010248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801024c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010250:	2301      	movs	r3, #1
 8010252:	e0a3      	b.n	801039c <_printf_i+0x1f4>
 8010254:	6820      	ldr	r0, [r4, #0]
 8010256:	6829      	ldr	r1, [r5, #0]
 8010258:	0606      	lsls	r6, r0, #24
 801025a:	f101 0304 	add.w	r3, r1, #4
 801025e:	d50a      	bpl.n	8010276 <_printf_i+0xce>
 8010260:	680e      	ldr	r6, [r1, #0]
 8010262:	602b      	str	r3, [r5, #0]
 8010264:	2e00      	cmp	r6, #0
 8010266:	da03      	bge.n	8010270 <_printf_i+0xc8>
 8010268:	232d      	movs	r3, #45	; 0x2d
 801026a:	4276      	negs	r6, r6
 801026c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010270:	485e      	ldr	r0, [pc, #376]	; (80103ec <_printf_i+0x244>)
 8010272:	230a      	movs	r3, #10
 8010274:	e019      	b.n	80102aa <_printf_i+0x102>
 8010276:	680e      	ldr	r6, [r1, #0]
 8010278:	602b      	str	r3, [r5, #0]
 801027a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801027e:	bf18      	it	ne
 8010280:	b236      	sxthne	r6, r6
 8010282:	e7ef      	b.n	8010264 <_printf_i+0xbc>
 8010284:	682b      	ldr	r3, [r5, #0]
 8010286:	6820      	ldr	r0, [r4, #0]
 8010288:	1d19      	adds	r1, r3, #4
 801028a:	6029      	str	r1, [r5, #0]
 801028c:	0601      	lsls	r1, r0, #24
 801028e:	d501      	bpl.n	8010294 <_printf_i+0xec>
 8010290:	681e      	ldr	r6, [r3, #0]
 8010292:	e002      	b.n	801029a <_printf_i+0xf2>
 8010294:	0646      	lsls	r6, r0, #25
 8010296:	d5fb      	bpl.n	8010290 <_printf_i+0xe8>
 8010298:	881e      	ldrh	r6, [r3, #0]
 801029a:	4854      	ldr	r0, [pc, #336]	; (80103ec <_printf_i+0x244>)
 801029c:	2f6f      	cmp	r7, #111	; 0x6f
 801029e:	bf0c      	ite	eq
 80102a0:	2308      	moveq	r3, #8
 80102a2:	230a      	movne	r3, #10
 80102a4:	2100      	movs	r1, #0
 80102a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80102aa:	6865      	ldr	r5, [r4, #4]
 80102ac:	60a5      	str	r5, [r4, #8]
 80102ae:	2d00      	cmp	r5, #0
 80102b0:	bfa2      	ittt	ge
 80102b2:	6821      	ldrge	r1, [r4, #0]
 80102b4:	f021 0104 	bicge.w	r1, r1, #4
 80102b8:	6021      	strge	r1, [r4, #0]
 80102ba:	b90e      	cbnz	r6, 80102c0 <_printf_i+0x118>
 80102bc:	2d00      	cmp	r5, #0
 80102be:	d04d      	beq.n	801035c <_printf_i+0x1b4>
 80102c0:	4615      	mov	r5, r2
 80102c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80102c6:	fb03 6711 	mls	r7, r3, r1, r6
 80102ca:	5dc7      	ldrb	r7, [r0, r7]
 80102cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80102d0:	4637      	mov	r7, r6
 80102d2:	42bb      	cmp	r3, r7
 80102d4:	460e      	mov	r6, r1
 80102d6:	d9f4      	bls.n	80102c2 <_printf_i+0x11a>
 80102d8:	2b08      	cmp	r3, #8
 80102da:	d10b      	bne.n	80102f4 <_printf_i+0x14c>
 80102dc:	6823      	ldr	r3, [r4, #0]
 80102de:	07de      	lsls	r6, r3, #31
 80102e0:	d508      	bpl.n	80102f4 <_printf_i+0x14c>
 80102e2:	6923      	ldr	r3, [r4, #16]
 80102e4:	6861      	ldr	r1, [r4, #4]
 80102e6:	4299      	cmp	r1, r3
 80102e8:	bfde      	ittt	le
 80102ea:	2330      	movle	r3, #48	; 0x30
 80102ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80102f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80102f4:	1b52      	subs	r2, r2, r5
 80102f6:	6122      	str	r2, [r4, #16]
 80102f8:	f8cd a000 	str.w	sl, [sp]
 80102fc:	464b      	mov	r3, r9
 80102fe:	aa03      	add	r2, sp, #12
 8010300:	4621      	mov	r1, r4
 8010302:	4640      	mov	r0, r8
 8010304:	f7ff fee2 	bl	80100cc <_printf_common>
 8010308:	3001      	adds	r0, #1
 801030a:	d14c      	bne.n	80103a6 <_printf_i+0x1fe>
 801030c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010310:	b004      	add	sp, #16
 8010312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010316:	4835      	ldr	r0, [pc, #212]	; (80103ec <_printf_i+0x244>)
 8010318:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801031c:	6829      	ldr	r1, [r5, #0]
 801031e:	6823      	ldr	r3, [r4, #0]
 8010320:	f851 6b04 	ldr.w	r6, [r1], #4
 8010324:	6029      	str	r1, [r5, #0]
 8010326:	061d      	lsls	r5, r3, #24
 8010328:	d514      	bpl.n	8010354 <_printf_i+0x1ac>
 801032a:	07df      	lsls	r7, r3, #31
 801032c:	bf44      	itt	mi
 801032e:	f043 0320 	orrmi.w	r3, r3, #32
 8010332:	6023      	strmi	r3, [r4, #0]
 8010334:	b91e      	cbnz	r6, 801033e <_printf_i+0x196>
 8010336:	6823      	ldr	r3, [r4, #0]
 8010338:	f023 0320 	bic.w	r3, r3, #32
 801033c:	6023      	str	r3, [r4, #0]
 801033e:	2310      	movs	r3, #16
 8010340:	e7b0      	b.n	80102a4 <_printf_i+0xfc>
 8010342:	6823      	ldr	r3, [r4, #0]
 8010344:	f043 0320 	orr.w	r3, r3, #32
 8010348:	6023      	str	r3, [r4, #0]
 801034a:	2378      	movs	r3, #120	; 0x78
 801034c:	4828      	ldr	r0, [pc, #160]	; (80103f0 <_printf_i+0x248>)
 801034e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010352:	e7e3      	b.n	801031c <_printf_i+0x174>
 8010354:	0659      	lsls	r1, r3, #25
 8010356:	bf48      	it	mi
 8010358:	b2b6      	uxthmi	r6, r6
 801035a:	e7e6      	b.n	801032a <_printf_i+0x182>
 801035c:	4615      	mov	r5, r2
 801035e:	e7bb      	b.n	80102d8 <_printf_i+0x130>
 8010360:	682b      	ldr	r3, [r5, #0]
 8010362:	6826      	ldr	r6, [r4, #0]
 8010364:	6961      	ldr	r1, [r4, #20]
 8010366:	1d18      	adds	r0, r3, #4
 8010368:	6028      	str	r0, [r5, #0]
 801036a:	0635      	lsls	r5, r6, #24
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	d501      	bpl.n	8010374 <_printf_i+0x1cc>
 8010370:	6019      	str	r1, [r3, #0]
 8010372:	e002      	b.n	801037a <_printf_i+0x1d2>
 8010374:	0670      	lsls	r0, r6, #25
 8010376:	d5fb      	bpl.n	8010370 <_printf_i+0x1c8>
 8010378:	8019      	strh	r1, [r3, #0]
 801037a:	2300      	movs	r3, #0
 801037c:	6123      	str	r3, [r4, #16]
 801037e:	4615      	mov	r5, r2
 8010380:	e7ba      	b.n	80102f8 <_printf_i+0x150>
 8010382:	682b      	ldr	r3, [r5, #0]
 8010384:	1d1a      	adds	r2, r3, #4
 8010386:	602a      	str	r2, [r5, #0]
 8010388:	681d      	ldr	r5, [r3, #0]
 801038a:	6862      	ldr	r2, [r4, #4]
 801038c:	2100      	movs	r1, #0
 801038e:	4628      	mov	r0, r5
 8010390:	f7ef ffae 	bl	80002f0 <memchr>
 8010394:	b108      	cbz	r0, 801039a <_printf_i+0x1f2>
 8010396:	1b40      	subs	r0, r0, r5
 8010398:	6060      	str	r0, [r4, #4]
 801039a:	6863      	ldr	r3, [r4, #4]
 801039c:	6123      	str	r3, [r4, #16]
 801039e:	2300      	movs	r3, #0
 80103a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103a4:	e7a8      	b.n	80102f8 <_printf_i+0x150>
 80103a6:	6923      	ldr	r3, [r4, #16]
 80103a8:	462a      	mov	r2, r5
 80103aa:	4649      	mov	r1, r9
 80103ac:	4640      	mov	r0, r8
 80103ae:	47d0      	blx	sl
 80103b0:	3001      	adds	r0, #1
 80103b2:	d0ab      	beq.n	801030c <_printf_i+0x164>
 80103b4:	6823      	ldr	r3, [r4, #0]
 80103b6:	079b      	lsls	r3, r3, #30
 80103b8:	d413      	bmi.n	80103e2 <_printf_i+0x23a>
 80103ba:	68e0      	ldr	r0, [r4, #12]
 80103bc:	9b03      	ldr	r3, [sp, #12]
 80103be:	4298      	cmp	r0, r3
 80103c0:	bfb8      	it	lt
 80103c2:	4618      	movlt	r0, r3
 80103c4:	e7a4      	b.n	8010310 <_printf_i+0x168>
 80103c6:	2301      	movs	r3, #1
 80103c8:	4632      	mov	r2, r6
 80103ca:	4649      	mov	r1, r9
 80103cc:	4640      	mov	r0, r8
 80103ce:	47d0      	blx	sl
 80103d0:	3001      	adds	r0, #1
 80103d2:	d09b      	beq.n	801030c <_printf_i+0x164>
 80103d4:	3501      	adds	r5, #1
 80103d6:	68e3      	ldr	r3, [r4, #12]
 80103d8:	9903      	ldr	r1, [sp, #12]
 80103da:	1a5b      	subs	r3, r3, r1
 80103dc:	42ab      	cmp	r3, r5
 80103de:	dcf2      	bgt.n	80103c6 <_printf_i+0x21e>
 80103e0:	e7eb      	b.n	80103ba <_printf_i+0x212>
 80103e2:	2500      	movs	r5, #0
 80103e4:	f104 0619 	add.w	r6, r4, #25
 80103e8:	e7f5      	b.n	80103d6 <_printf_i+0x22e>
 80103ea:	bf00      	nop
 80103ec:	08010de5 	.word	0x08010de5
 80103f0:	08010df6 	.word	0x08010df6

080103f4 <_sbrk_r>:
 80103f4:	b538      	push	{r3, r4, r5, lr}
 80103f6:	4d06      	ldr	r5, [pc, #24]	; (8010410 <_sbrk_r+0x1c>)
 80103f8:	2300      	movs	r3, #0
 80103fa:	4604      	mov	r4, r0
 80103fc:	4608      	mov	r0, r1
 80103fe:	602b      	str	r3, [r5, #0]
 8010400:	f7f3 fdf6 	bl	8003ff0 <_sbrk>
 8010404:	1c43      	adds	r3, r0, #1
 8010406:	d102      	bne.n	801040e <_sbrk_r+0x1a>
 8010408:	682b      	ldr	r3, [r5, #0]
 801040a:	b103      	cbz	r3, 801040e <_sbrk_r+0x1a>
 801040c:	6023      	str	r3, [r4, #0]
 801040e:	bd38      	pop	{r3, r4, r5, pc}
 8010410:	240e007c 	.word	0x240e007c

08010414 <__sread>:
 8010414:	b510      	push	{r4, lr}
 8010416:	460c      	mov	r4, r1
 8010418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801041c:	f000 f960 	bl	80106e0 <_read_r>
 8010420:	2800      	cmp	r0, #0
 8010422:	bfab      	itete	ge
 8010424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010426:	89a3      	ldrhlt	r3, [r4, #12]
 8010428:	181b      	addge	r3, r3, r0
 801042a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801042e:	bfac      	ite	ge
 8010430:	6563      	strge	r3, [r4, #84]	; 0x54
 8010432:	81a3      	strhlt	r3, [r4, #12]
 8010434:	bd10      	pop	{r4, pc}

08010436 <__swrite>:
 8010436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801043a:	461f      	mov	r7, r3
 801043c:	898b      	ldrh	r3, [r1, #12]
 801043e:	05db      	lsls	r3, r3, #23
 8010440:	4605      	mov	r5, r0
 8010442:	460c      	mov	r4, r1
 8010444:	4616      	mov	r6, r2
 8010446:	d505      	bpl.n	8010454 <__swrite+0x1e>
 8010448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801044c:	2302      	movs	r3, #2
 801044e:	2200      	movs	r2, #0
 8010450:	f000 f928 	bl	80106a4 <_lseek_r>
 8010454:	89a3      	ldrh	r3, [r4, #12]
 8010456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801045a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801045e:	81a3      	strh	r3, [r4, #12]
 8010460:	4632      	mov	r2, r6
 8010462:	463b      	mov	r3, r7
 8010464:	4628      	mov	r0, r5
 8010466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801046a:	f000 b869 	b.w	8010540 <_write_r>

0801046e <__sseek>:
 801046e:	b510      	push	{r4, lr}
 8010470:	460c      	mov	r4, r1
 8010472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010476:	f000 f915 	bl	80106a4 <_lseek_r>
 801047a:	1c43      	adds	r3, r0, #1
 801047c:	89a3      	ldrh	r3, [r4, #12]
 801047e:	bf15      	itete	ne
 8010480:	6560      	strne	r0, [r4, #84]	; 0x54
 8010482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801048a:	81a3      	strheq	r3, [r4, #12]
 801048c:	bf18      	it	ne
 801048e:	81a3      	strhne	r3, [r4, #12]
 8010490:	bd10      	pop	{r4, pc}

08010492 <__sclose>:
 8010492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010496:	f000 b8d3 	b.w	8010640 <_close_r>
	...

0801049c <__swbuf_r>:
 801049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801049e:	460e      	mov	r6, r1
 80104a0:	4614      	mov	r4, r2
 80104a2:	4605      	mov	r5, r0
 80104a4:	b118      	cbz	r0, 80104ae <__swbuf_r+0x12>
 80104a6:	6983      	ldr	r3, [r0, #24]
 80104a8:	b90b      	cbnz	r3, 80104ae <__swbuf_r+0x12>
 80104aa:	f7ff fac7 	bl	800fa3c <__sinit>
 80104ae:	4b21      	ldr	r3, [pc, #132]	; (8010534 <__swbuf_r+0x98>)
 80104b0:	429c      	cmp	r4, r3
 80104b2:	d12b      	bne.n	801050c <__swbuf_r+0x70>
 80104b4:	686c      	ldr	r4, [r5, #4]
 80104b6:	69a3      	ldr	r3, [r4, #24]
 80104b8:	60a3      	str	r3, [r4, #8]
 80104ba:	89a3      	ldrh	r3, [r4, #12]
 80104bc:	071a      	lsls	r2, r3, #28
 80104be:	d52f      	bpl.n	8010520 <__swbuf_r+0x84>
 80104c0:	6923      	ldr	r3, [r4, #16]
 80104c2:	b36b      	cbz	r3, 8010520 <__swbuf_r+0x84>
 80104c4:	6923      	ldr	r3, [r4, #16]
 80104c6:	6820      	ldr	r0, [r4, #0]
 80104c8:	1ac0      	subs	r0, r0, r3
 80104ca:	6963      	ldr	r3, [r4, #20]
 80104cc:	b2f6      	uxtb	r6, r6
 80104ce:	4283      	cmp	r3, r0
 80104d0:	4637      	mov	r7, r6
 80104d2:	dc04      	bgt.n	80104de <__swbuf_r+0x42>
 80104d4:	4621      	mov	r1, r4
 80104d6:	4628      	mov	r0, r5
 80104d8:	f7ff fa1c 	bl	800f914 <_fflush_r>
 80104dc:	bb30      	cbnz	r0, 801052c <__swbuf_r+0x90>
 80104de:	68a3      	ldr	r3, [r4, #8]
 80104e0:	3b01      	subs	r3, #1
 80104e2:	60a3      	str	r3, [r4, #8]
 80104e4:	6823      	ldr	r3, [r4, #0]
 80104e6:	1c5a      	adds	r2, r3, #1
 80104e8:	6022      	str	r2, [r4, #0]
 80104ea:	701e      	strb	r6, [r3, #0]
 80104ec:	6963      	ldr	r3, [r4, #20]
 80104ee:	3001      	adds	r0, #1
 80104f0:	4283      	cmp	r3, r0
 80104f2:	d004      	beq.n	80104fe <__swbuf_r+0x62>
 80104f4:	89a3      	ldrh	r3, [r4, #12]
 80104f6:	07db      	lsls	r3, r3, #31
 80104f8:	d506      	bpl.n	8010508 <__swbuf_r+0x6c>
 80104fa:	2e0a      	cmp	r6, #10
 80104fc:	d104      	bne.n	8010508 <__swbuf_r+0x6c>
 80104fe:	4621      	mov	r1, r4
 8010500:	4628      	mov	r0, r5
 8010502:	f7ff fa07 	bl	800f914 <_fflush_r>
 8010506:	b988      	cbnz	r0, 801052c <__swbuf_r+0x90>
 8010508:	4638      	mov	r0, r7
 801050a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801050c:	4b0a      	ldr	r3, [pc, #40]	; (8010538 <__swbuf_r+0x9c>)
 801050e:	429c      	cmp	r4, r3
 8010510:	d101      	bne.n	8010516 <__swbuf_r+0x7a>
 8010512:	68ac      	ldr	r4, [r5, #8]
 8010514:	e7cf      	b.n	80104b6 <__swbuf_r+0x1a>
 8010516:	4b09      	ldr	r3, [pc, #36]	; (801053c <__swbuf_r+0xa0>)
 8010518:	429c      	cmp	r4, r3
 801051a:	bf08      	it	eq
 801051c:	68ec      	ldreq	r4, [r5, #12]
 801051e:	e7ca      	b.n	80104b6 <__swbuf_r+0x1a>
 8010520:	4621      	mov	r1, r4
 8010522:	4628      	mov	r0, r5
 8010524:	f000 f81e 	bl	8010564 <__swsetup_r>
 8010528:	2800      	cmp	r0, #0
 801052a:	d0cb      	beq.n	80104c4 <__swbuf_r+0x28>
 801052c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010530:	e7ea      	b.n	8010508 <__swbuf_r+0x6c>
 8010532:	bf00      	nop
 8010534:	08010d94 	.word	0x08010d94
 8010538:	08010db4 	.word	0x08010db4
 801053c:	08010d74 	.word	0x08010d74

08010540 <_write_r>:
 8010540:	b538      	push	{r3, r4, r5, lr}
 8010542:	4d07      	ldr	r5, [pc, #28]	; (8010560 <_write_r+0x20>)
 8010544:	4604      	mov	r4, r0
 8010546:	4608      	mov	r0, r1
 8010548:	4611      	mov	r1, r2
 801054a:	2200      	movs	r2, #0
 801054c:	602a      	str	r2, [r5, #0]
 801054e:	461a      	mov	r2, r3
 8010550:	f7f2 fdb2 	bl	80030b8 <_write>
 8010554:	1c43      	adds	r3, r0, #1
 8010556:	d102      	bne.n	801055e <_write_r+0x1e>
 8010558:	682b      	ldr	r3, [r5, #0]
 801055a:	b103      	cbz	r3, 801055e <_write_r+0x1e>
 801055c:	6023      	str	r3, [r4, #0]
 801055e:	bd38      	pop	{r3, r4, r5, pc}
 8010560:	240e007c 	.word	0x240e007c

08010564 <__swsetup_r>:
 8010564:	4b32      	ldr	r3, [pc, #200]	; (8010630 <__swsetup_r+0xcc>)
 8010566:	b570      	push	{r4, r5, r6, lr}
 8010568:	681d      	ldr	r5, [r3, #0]
 801056a:	4606      	mov	r6, r0
 801056c:	460c      	mov	r4, r1
 801056e:	b125      	cbz	r5, 801057a <__swsetup_r+0x16>
 8010570:	69ab      	ldr	r3, [r5, #24]
 8010572:	b913      	cbnz	r3, 801057a <__swsetup_r+0x16>
 8010574:	4628      	mov	r0, r5
 8010576:	f7ff fa61 	bl	800fa3c <__sinit>
 801057a:	4b2e      	ldr	r3, [pc, #184]	; (8010634 <__swsetup_r+0xd0>)
 801057c:	429c      	cmp	r4, r3
 801057e:	d10f      	bne.n	80105a0 <__swsetup_r+0x3c>
 8010580:	686c      	ldr	r4, [r5, #4]
 8010582:	89a3      	ldrh	r3, [r4, #12]
 8010584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010588:	0719      	lsls	r1, r3, #28
 801058a:	d42c      	bmi.n	80105e6 <__swsetup_r+0x82>
 801058c:	06dd      	lsls	r5, r3, #27
 801058e:	d411      	bmi.n	80105b4 <__swsetup_r+0x50>
 8010590:	2309      	movs	r3, #9
 8010592:	6033      	str	r3, [r6, #0]
 8010594:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010598:	81a3      	strh	r3, [r4, #12]
 801059a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801059e:	e03e      	b.n	801061e <__swsetup_r+0xba>
 80105a0:	4b25      	ldr	r3, [pc, #148]	; (8010638 <__swsetup_r+0xd4>)
 80105a2:	429c      	cmp	r4, r3
 80105a4:	d101      	bne.n	80105aa <__swsetup_r+0x46>
 80105a6:	68ac      	ldr	r4, [r5, #8]
 80105a8:	e7eb      	b.n	8010582 <__swsetup_r+0x1e>
 80105aa:	4b24      	ldr	r3, [pc, #144]	; (801063c <__swsetup_r+0xd8>)
 80105ac:	429c      	cmp	r4, r3
 80105ae:	bf08      	it	eq
 80105b0:	68ec      	ldreq	r4, [r5, #12]
 80105b2:	e7e6      	b.n	8010582 <__swsetup_r+0x1e>
 80105b4:	0758      	lsls	r0, r3, #29
 80105b6:	d512      	bpl.n	80105de <__swsetup_r+0x7a>
 80105b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105ba:	b141      	cbz	r1, 80105ce <__swsetup_r+0x6a>
 80105bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105c0:	4299      	cmp	r1, r3
 80105c2:	d002      	beq.n	80105ca <__swsetup_r+0x66>
 80105c4:	4630      	mov	r0, r6
 80105c6:	f7ff fb47 	bl	800fc58 <_free_r>
 80105ca:	2300      	movs	r3, #0
 80105cc:	6363      	str	r3, [r4, #52]	; 0x34
 80105ce:	89a3      	ldrh	r3, [r4, #12]
 80105d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80105d4:	81a3      	strh	r3, [r4, #12]
 80105d6:	2300      	movs	r3, #0
 80105d8:	6063      	str	r3, [r4, #4]
 80105da:	6923      	ldr	r3, [r4, #16]
 80105dc:	6023      	str	r3, [r4, #0]
 80105de:	89a3      	ldrh	r3, [r4, #12]
 80105e0:	f043 0308 	orr.w	r3, r3, #8
 80105e4:	81a3      	strh	r3, [r4, #12]
 80105e6:	6923      	ldr	r3, [r4, #16]
 80105e8:	b94b      	cbnz	r3, 80105fe <__swsetup_r+0x9a>
 80105ea:	89a3      	ldrh	r3, [r4, #12]
 80105ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80105f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105f4:	d003      	beq.n	80105fe <__swsetup_r+0x9a>
 80105f6:	4621      	mov	r1, r4
 80105f8:	4630      	mov	r0, r6
 80105fa:	f7ff fae5 	bl	800fbc8 <__smakebuf_r>
 80105fe:	89a0      	ldrh	r0, [r4, #12]
 8010600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010604:	f010 0301 	ands.w	r3, r0, #1
 8010608:	d00a      	beq.n	8010620 <__swsetup_r+0xbc>
 801060a:	2300      	movs	r3, #0
 801060c:	60a3      	str	r3, [r4, #8]
 801060e:	6963      	ldr	r3, [r4, #20]
 8010610:	425b      	negs	r3, r3
 8010612:	61a3      	str	r3, [r4, #24]
 8010614:	6923      	ldr	r3, [r4, #16]
 8010616:	b943      	cbnz	r3, 801062a <__swsetup_r+0xc6>
 8010618:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801061c:	d1ba      	bne.n	8010594 <__swsetup_r+0x30>
 801061e:	bd70      	pop	{r4, r5, r6, pc}
 8010620:	0781      	lsls	r1, r0, #30
 8010622:	bf58      	it	pl
 8010624:	6963      	ldrpl	r3, [r4, #20]
 8010626:	60a3      	str	r3, [r4, #8]
 8010628:	e7f4      	b.n	8010614 <__swsetup_r+0xb0>
 801062a:	2000      	movs	r0, #0
 801062c:	e7f7      	b.n	801061e <__swsetup_r+0xba>
 801062e:	bf00      	nop
 8010630:	24000054 	.word	0x24000054
 8010634:	08010d94 	.word	0x08010d94
 8010638:	08010db4 	.word	0x08010db4
 801063c:	08010d74 	.word	0x08010d74

08010640 <_close_r>:
 8010640:	b538      	push	{r3, r4, r5, lr}
 8010642:	4d06      	ldr	r5, [pc, #24]	; (801065c <_close_r+0x1c>)
 8010644:	2300      	movs	r3, #0
 8010646:	4604      	mov	r4, r0
 8010648:	4608      	mov	r0, r1
 801064a:	602b      	str	r3, [r5, #0]
 801064c:	f7f2 fd60 	bl	8003110 <_close>
 8010650:	1c43      	adds	r3, r0, #1
 8010652:	d102      	bne.n	801065a <_close_r+0x1a>
 8010654:	682b      	ldr	r3, [r5, #0]
 8010656:	b103      	cbz	r3, 801065a <_close_r+0x1a>
 8010658:	6023      	str	r3, [r4, #0]
 801065a:	bd38      	pop	{r3, r4, r5, pc}
 801065c:	240e007c 	.word	0x240e007c

08010660 <_fstat_r>:
 8010660:	b538      	push	{r3, r4, r5, lr}
 8010662:	4d07      	ldr	r5, [pc, #28]	; (8010680 <_fstat_r+0x20>)
 8010664:	2300      	movs	r3, #0
 8010666:	4604      	mov	r4, r0
 8010668:	4608      	mov	r0, r1
 801066a:	4611      	mov	r1, r2
 801066c:	602b      	str	r3, [r5, #0]
 801066e:	f7f2 fd8f 	bl	8003190 <_fstat>
 8010672:	1c43      	adds	r3, r0, #1
 8010674:	d102      	bne.n	801067c <_fstat_r+0x1c>
 8010676:	682b      	ldr	r3, [r5, #0]
 8010678:	b103      	cbz	r3, 801067c <_fstat_r+0x1c>
 801067a:	6023      	str	r3, [r4, #0]
 801067c:	bd38      	pop	{r3, r4, r5, pc}
 801067e:	bf00      	nop
 8010680:	240e007c 	.word	0x240e007c

08010684 <_isatty_r>:
 8010684:	b538      	push	{r3, r4, r5, lr}
 8010686:	4d06      	ldr	r5, [pc, #24]	; (80106a0 <_isatty_r+0x1c>)
 8010688:	2300      	movs	r3, #0
 801068a:	4604      	mov	r4, r0
 801068c:	4608      	mov	r0, r1
 801068e:	602b      	str	r3, [r5, #0]
 8010690:	f7f2 fcfc 	bl	800308c <_isatty>
 8010694:	1c43      	adds	r3, r0, #1
 8010696:	d102      	bne.n	801069e <_isatty_r+0x1a>
 8010698:	682b      	ldr	r3, [r5, #0]
 801069a:	b103      	cbz	r3, 801069e <_isatty_r+0x1a>
 801069c:	6023      	str	r3, [r4, #0]
 801069e:	bd38      	pop	{r3, r4, r5, pc}
 80106a0:	240e007c 	.word	0x240e007c

080106a4 <_lseek_r>:
 80106a4:	b538      	push	{r3, r4, r5, lr}
 80106a6:	4d07      	ldr	r5, [pc, #28]	; (80106c4 <_lseek_r+0x20>)
 80106a8:	4604      	mov	r4, r0
 80106aa:	4608      	mov	r0, r1
 80106ac:	4611      	mov	r1, r2
 80106ae:	2200      	movs	r2, #0
 80106b0:	602a      	str	r2, [r5, #0]
 80106b2:	461a      	mov	r2, r3
 80106b4:	f7f3 fc8e 	bl	8003fd4 <_lseek>
 80106b8:	1c43      	adds	r3, r0, #1
 80106ba:	d102      	bne.n	80106c2 <_lseek_r+0x1e>
 80106bc:	682b      	ldr	r3, [r5, #0]
 80106be:	b103      	cbz	r3, 80106c2 <_lseek_r+0x1e>
 80106c0:	6023      	str	r3, [r4, #0]
 80106c2:	bd38      	pop	{r3, r4, r5, pc}
 80106c4:	240e007c 	.word	0x240e007c

080106c8 <__malloc_lock>:
 80106c8:	4801      	ldr	r0, [pc, #4]	; (80106d0 <__malloc_lock+0x8>)
 80106ca:	f7ff ba55 	b.w	800fb78 <__retarget_lock_acquire_recursive>
 80106ce:	bf00      	nop
 80106d0:	240e0070 	.word	0x240e0070

080106d4 <__malloc_unlock>:
 80106d4:	4801      	ldr	r0, [pc, #4]	; (80106dc <__malloc_unlock+0x8>)
 80106d6:	f7ff ba50 	b.w	800fb7a <__retarget_lock_release_recursive>
 80106da:	bf00      	nop
 80106dc:	240e0070 	.word	0x240e0070

080106e0 <_read_r>:
 80106e0:	b538      	push	{r3, r4, r5, lr}
 80106e2:	4d07      	ldr	r5, [pc, #28]	; (8010700 <_read_r+0x20>)
 80106e4:	4604      	mov	r4, r0
 80106e6:	4608      	mov	r0, r1
 80106e8:	4611      	mov	r1, r2
 80106ea:	2200      	movs	r2, #0
 80106ec:	602a      	str	r2, [r5, #0]
 80106ee:	461a      	mov	r2, r3
 80106f0:	f7f2 fd26 	bl	8003140 <_read>
 80106f4:	1c43      	adds	r3, r0, #1
 80106f6:	d102      	bne.n	80106fe <_read_r+0x1e>
 80106f8:	682b      	ldr	r3, [r5, #0]
 80106fa:	b103      	cbz	r3, 80106fe <_read_r+0x1e>
 80106fc:	6023      	str	r3, [r4, #0]
 80106fe:	bd38      	pop	{r3, r4, r5, pc}
 8010700:	240e007c 	.word	0x240e007c

08010704 <_init>:
 8010704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010706:	bf00      	nop
 8010708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801070a:	bc08      	pop	{r3}
 801070c:	469e      	mov	lr, r3
 801070e:	4770      	bx	lr

08010710 <_fini>:
 8010710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010712:	bf00      	nop
 8010714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010716:	bc08      	pop	{r3}
 8010718:	469e      	mov	lr, r3
 801071a:	4770      	bx	lr
