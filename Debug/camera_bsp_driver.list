
camera_bsp_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d14  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  08010fc4  08010fc4  00020fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080116cc  080116cc  000216cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080116d4  080116d4  000216d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080116d8  080116d8  000216d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  24000000  080116dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000608ac  240000b8  08011794  000300b8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24060964  08011794  00030964  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000230e8  00000000  00000000  000300e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003e60  00000000  00000000  000531ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001790  00000000  00000000  00057030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001628  00000000  00000000  000587c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036443  00000000  00000000  00059de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020c9d  00000000  00000000  0009022b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014e6c1  00000000  00000000  000b0ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ff589  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006b18  00000000  00000000  001ff5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000b8 	.word	0x240000b8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08010fac 	.word	0x08010fac

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000bc 	.word	0x240000bc
 80002ec:	08010fac 	.word	0x08010fac

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08e      	sub	sp, #56	; 0x38
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f003 ff4f 	bl	800453c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f87d 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 fa91 	bl	8000bc8 <MX_GPIO_Init>
  MX_DMA_Init();
 80006a6:	f000 fa6f 	bl	8000b88 <MX_DMA_Init>
  MX_RTC_Init();
 80006aa:	f000 f9f7 	bl	8000a9c <MX_RTC_Init>
  MX_USART1_UART_Init();
 80006ae:	f000 fa1f 	bl	8000af0 <MX_USART1_UART_Init>
  MX_I2C4_Init();
 80006b2:	f000 f933 	bl	800091c <MX_I2C4_Init>
  //MX_DCMI_Init();
  MX_DMA2D_Init();
 80006b6:	f000 f8f7 	bl	80008a8 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80006ba:	f000 f96f 	bl	800099c <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 80006be:	4833      	ldr	r0, [pc, #204]	; (800078c <main+0xf8>)
 80006c0:	f002 f9b0 	bl	8002a24 <RetargetInit>

  printf("BUFFER RANDOM VALUE BEFORE CAPTURE: %d\n", buffer[5640]);
 80006c4:	4b32      	ldr	r3, [pc, #200]	; (8000790 <main+0xfc>)
 80006c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ca:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	4830      	ldr	r0, [pc, #192]	; (8000794 <main+0x100>)
 80006d4:	f00f fb98 	bl	800fe08 <iprintf>
  //camera init
  BSP_CAMERA_PwrDown(0);
 80006d8:	2000      	movs	r0, #0
 80006da:	f003 f836 	bl	800374a <BSP_CAMERA_PwrDown>

  if(BSP_CAMERA_Init(0, CAMERA_R480x272, CAMERA_PF_RGB888) != BSP_ERROR_NONE){
 80006de:	2201      	movs	r2, #1
 80006e0:	2102      	movs	r1, #2
 80006e2:	2000      	movs	r0, #0
 80006e4:	f002 feaa 	bl	800343c <BSP_CAMERA_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <main+0x5e>
	  Error_Handler();
 80006ee:	f000 fcf1 	bl	80010d4 <Error_Handler>
  }

  HAL_Delay(2000);
 80006f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006f6:	f003 ffb3 	bl	8004660 <HAL_Delay>
//  buffer[5460] = 255;
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2234      	movs	r2, #52	; 0x34
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f00f fb79 	bl	800fdf8 <memset>

  pLayerCfg.WindowX0 = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800070a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800070e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000714:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000718:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 800071a:	2301      	movs	r3, #1
 800071c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800071e:	23ff      	movs	r3, #255	; 0xff
 8000720:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800072c:	2305      	movs	r3, #5
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t) buffer;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <main+0xfc>)
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000734:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000738:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800073a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800073e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 800074c:	23ff      	movs	r3, #255	; 0xff
 800074e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	4619      	mov	r1, r3
 8000758:	480f      	ldr	r0, [pc, #60]	; (8000798 <main+0x104>)
 800075a:	f00a fa53 	bl	800ac04 <HAL_LTDC_ConfigLayer>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <main+0xd4>
  {
    Error_Handler();
 8000764:	f000 fcb6 	bl	80010d4 <Error_Handler>
//      o Call BSP_CAMERA_SetContrast()/BSP_CAMERA_GetContrast() to set/get the camera Contrast
//        Contrast is value between -4(Level 4 negative) and 4(Level 4 positive).
//
//      o Call BSP_CAMERA_SetHueDegree()/BSP_CAMERA_GetHueDegree() to set/get the camera Hue Degree
//        HueDegree is value between -4(180 degree negative) and 4(150 degree positive).
	BSP_CAMERA_SetLightMode(0, CAMERA_LIGHT_HOME);
 8000768:	2104      	movs	r1, #4
 800076a:	2000      	movs	r0, #0
 800076c:	f002 ff1a 	bl	80035a4 <BSP_CAMERA_SetLightMode>
	BSP_CAMERA_SetColorEffect(0, CAMERA_COLOR_EFFECT_NONE);
 8000770:	2100      	movs	r1, #0
 8000772:	2000      	movs	r0, #0
 8000774:	f002 ff54 	bl	8003620 <BSP_CAMERA_SetColorEffect>
	BSP_CAMERA_SetHueDegree(0, 4);
 8000778:	2104      	movs	r1, #4
 800077a:	2000      	movs	r0, #0
 800077c:	f002 ff8e 	bl	800369c <BSP_CAMERA_SetHueDegree>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BSP_CAMERA_Start(0, (uint8_t*)buffer, CAMERA_MODE_CONTINUOUS);
 8000780:	2200      	movs	r2, #0
 8000782:	4903      	ldr	r1, [pc, #12]	; (8000790 <main+0xfc>)
 8000784:	2000      	movs	r0, #0
 8000786:	f002 fecf 	bl	8003528 <BSP_CAMERA_Start>

  while (1)
 800078a:	e7fe      	b.n	800078a <main+0xf6>
 800078c:	24000328 	.word	0x24000328
 8000790:	240003c0 	.word	0x240003c0
 8000794:	08010fc4 	.word	0x08010fc4
 8000798:	24000258 	.word	0x24000258

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b09c      	sub	sp, #112	; 0x70
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a6:	224c      	movs	r2, #76	; 0x4c
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f00f fb24 	bl	800fdf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2220      	movs	r2, #32
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00f fb1e 	bl	800fdf8 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80007bc:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <SystemClock_Config+0x104>)
 80007be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007c6:	2004      	movs	r0, #4
 80007c8:	f00a fc04 	bl	800afd4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007cc:	2300      	movs	r3, #0
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	4b34      	ldr	r3, [pc, #208]	; (80008a4 <SystemClock_Config+0x108>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a33      	ldr	r2, [pc, #204]	; (80008a4 <SystemClock_Config+0x108>)
 80007d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <SystemClock_Config+0x108>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007e8:	bf00      	nop
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <SystemClock_Config+0x108>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007f6:	d1f8      	bne.n	80007ea <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007f8:	f00a fbdc 	bl	800afb4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007fc:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <SystemClock_Config+0x104>)
 80007fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000800:	4a27      	ldr	r2, [pc, #156]	; (80008a0 <SystemClock_Config+0x104>)
 8000802:	f023 0318 	bic.w	r3, r3, #24
 8000806:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000808:	2305      	movs	r3, #5
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000812:	2301      	movs	r3, #1
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081a:	2302      	movs	r3, #2
 800081c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800081e:	2302      	movs	r3, #2
 8000820:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000822:	2328      	movs	r3, #40	; 0x28
 8000824:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000826:	2302      	movs	r3, #2
 8000828:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800082a:	2303      	movs	r3, #3
 800082c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 800082e:	2304      	movs	r3, #4
 8000830:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000832:	230c      	movs	r3, #12
 8000834:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000836:	2300      	movs	r3, #0
 8000838:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 5462;
 800083a:	f241 5356 	movw	r3, #5462	; 0x1556
 800083e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000844:	4618      	mov	r0, r3
 8000846:	f00a fc1f 	bl	800b088 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000850:	f000 fc40 	bl	80010d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	233f      	movs	r3, #63	; 0x3f
 8000856:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	2303      	movs	r3, #3
 800085a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000864:	2340      	movs	r3, #64	; 0x40
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000868:	2340      	movs	r3, #64	; 0x40
 800086a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800086c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000870:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000872:	2340      	movs	r3, #64	; 0x40
 8000874:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2105      	movs	r1, #5
 800087a:	4618      	mov	r0, r3
 800087c:	f00b f836 	bl	800b8ec <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000886:	f000 fc25 	bl	80010d4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 800088a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800088e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8000892:	2000      	movs	r0, #0
 8000894:	f00b f9e0 	bl	800bc58 <HAL_RCC_MCOConfig>
}
 8000898:	bf00      	nop
 800089a:	3770      	adds	r7, #112	; 0x70
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	58024400 	.word	0x58024400
 80008a4:	58024800 	.word	0x58024800

080008a8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_DMA2D_Init+0x6c>)
 80008ae:	4a1a      	ldr	r2, [pc, #104]	; (8000918 <MX_DMA2D_Init+0x70>)
 80008b0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_DMA2D_Init+0x6c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_DMA2D_Init+0x6c>)
 80008ba:	2202      	movs	r2, #2
 80008bc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_DMA2D_Init+0x6c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_DMA2D_Init+0x6c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_DMA2D_Init+0x6c>)
 80008cc:	2202      	movs	r2, #2
 80008ce:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008d0:	4b10      	ldr	r3, [pc, #64]	; (8000914 <MX_DMA2D_Init+0x6c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_DMA2D_Init+0x6c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <MX_DMA2D_Init+0x6c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_DMA2D_Init+0x6c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <MX_DMA2D_Init+0x6c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008ee:	4809      	ldr	r0, [pc, #36]	; (8000914 <MX_DMA2D_Init+0x6c>)
 80008f0:	f007 f978 	bl	8007be4 <HAL_DMA2D_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008fa:	f000 fbeb 	bl	80010d4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008fe:	2101      	movs	r1, #1
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_DMA2D_Init+0x6c>)
 8000902:	f007 fae3 	bl	8007ecc <HAL_DMA2D_ConfigLayer>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 800090c:	f000 fbe2 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	2400019c 	.word	0x2400019c
 8000918:	52001000 	.word	0x52001000

0800091c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_I2C4_Init+0x74>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <MX_I2C4_Init+0x78>)
 8000924:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307077B4;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_I2C4_Init+0x74>)
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <MX_I2C4_Init+0x7c>)
 800092a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_I2C4_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_I2C4_Init+0x74>)
 8000934:	2201      	movs	r2, #1
 8000936:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_I2C4_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_I2C4_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_I2C4_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_I2C4_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_I2C4_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000956:	480e      	ldr	r0, [pc, #56]	; (8000990 <MX_I2C4_Init+0x74>)
 8000958:	f008 faea 	bl	8008f30 <HAL_I2C_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000962:	f000 fbb7 	bl	80010d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000966:	2100      	movs	r1, #0
 8000968:	4809      	ldr	r0, [pc, #36]	; (8000990 <MX_I2C4_Init+0x74>)
 800096a:	f009 ff21 	bl	800a7b0 <HAL_I2CEx_ConfigAnalogFilter>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000974:	f000 fbae 	bl	80010d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_I2C4_Init+0x74>)
 800097c:	f009 ff63 	bl	800a846 <HAL_I2CEx_ConfigDigitalFilter>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000986:	f000 fba5 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	24000204 	.word	0x24000204
 8000994:	58001c00 	.word	0x58001c00
 8000998:	307077b4 	.word	0x307077b4

0800099c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	; 0x38
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2234      	movs	r2, #52	; 0x34
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f00f fa25 	bl	800fdf8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80009ae:	4b39      	ldr	r3, [pc, #228]	; (8000a94 <MX_LTDC_Init+0xf8>)
 80009b0:	4a39      	ldr	r2, [pc, #228]	; (8000a98 <MX_LTDC_Init+0xfc>)
 80009b2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009b4:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <MX_LTDC_Init+0xf8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009ba:	4b36      	ldr	r3, [pc, #216]	; (8000a94 <MX_LTDC_Init+0xf8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 80009c0:	4b34      	ldr	r3, [pc, #208]	; (8000a94 <MX_LTDC_Init+0xf8>)
 80009c2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80009c6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009c8:	4b32      	ldr	r3, [pc, #200]	; (8000a94 <MX_LTDC_Init+0xf8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80009ce:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <MX_LTDC_Init+0xf8>)
 80009d0:	2207      	movs	r2, #7
 80009d2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80009d4:	4b2f      	ldr	r3, [pc, #188]	; (8000a94 <MX_LTDC_Init+0xf8>)
 80009d6:	2203      	movs	r2, #3
 80009d8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80009da:	4b2e      	ldr	r3, [pc, #184]	; (8000a94 <MX_LTDC_Init+0xf8>)
 80009dc:	220e      	movs	r2, #14
 80009de:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80009e0:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <MX_LTDC_Init+0xf8>)
 80009e2:	2205      	movs	r2, #5
 80009e4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80009e6:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <MX_LTDC_Init+0xf8>)
 80009e8:	f240 228e 	movw	r2, #654	; 0x28e
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80009ee:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_LTDC_Init+0xf8>)
 80009f0:	f240 12e5 	movw	r2, #485	; 0x1e5
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80009f6:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <MX_LTDC_Init+0xf8>)
 80009f8:	f44f 7225 	mov.w	r2, #660	; 0x294
 80009fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <MX_LTDC_Init+0xf8>)
 8000a00:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000a04:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a06:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <MX_LTDC_Init+0xf8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <MX_LTDC_Init+0xf8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_LTDC_Init+0xf8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a1e:	481d      	ldr	r0, [pc, #116]	; (8000a94 <MX_LTDC_Init+0xf8>)
 8000a20:	f009 ff5e 	bl	800a8e0 <HAL_LTDC_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 8000a2a:	f000 fb53 	bl	80010d4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 320;
 8000a32:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a36:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 240;
 8000a3c:	23f0      	movs	r3, #240	; 0xf0
 8000a3e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000a40:	2302      	movs	r3, #2
 8000a42:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a50:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a52:	2305      	movs	r3, #5
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <MX_LTDC_Init+0xf8>)
 8000a7c:	f00a f8c2 	bl	800ac04 <HAL_LTDC_ConfigLayer>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8000a86:	f000 fb25 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	3738      	adds	r7, #56	; 0x38
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	24000258 	.word	0x24000258
 8000a98:	50001000 	.word	0x50001000

08000a9c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_RTC_Init+0x4c>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <MX_RTC_Init+0x50>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_RTC_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_RTC_Init+0x4c>)
 8000aae:	227f      	movs	r2, #127	; 0x7f
 8000ab0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <MX_RTC_Init+0x4c>)
 8000ab4:	22ff      	movs	r2, #255	; 0xff
 8000ab6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_RTC_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <MX_RTC_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_RTC_Init+0x4c>)
 8000ac6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aca:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_RTC_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_RTC_Init+0x4c>)
 8000ad4:	f00d f8e0 	bl	800dc98 <HAL_RTC_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8000ade:	f000 faf9 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	24000300 	.word	0x24000300
 8000aec:	58004000 	.word	0x58004000

08000af0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <MX_USART1_UART_Init+0x90>)
 8000af6:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <MX_USART1_UART_Init+0x94>)
 8000af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_USART1_UART_Init+0x90>)
 8000afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_USART1_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_USART1_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_USART1_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_USART1_UART_Init+0x90>)
 8000b16:	220c      	movs	r2, #12
 8000b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_USART1_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_USART1_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_USART1_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_USART1_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_USART1_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b38:	4811      	ldr	r0, [pc, #68]	; (8000b80 <MX_USART1_UART_Init+0x90>)
 8000b3a:	f00d f9cb 	bl	800ded4 <HAL_UART_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b44:	f000 fac6 	bl	80010d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <MX_USART1_UART_Init+0x90>)
 8000b4c:	f00f f860 	bl	800fc10 <HAL_UARTEx_SetTxFifoThreshold>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b56:	f000 fabd 	bl	80010d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <MX_USART1_UART_Init+0x90>)
 8000b5e:	f00f f895 	bl	800fc8c <HAL_UARTEx_SetRxFifoThreshold>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b68:	f000 fab4 	bl	80010d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_USART1_UART_Init+0x90>)
 8000b6e:	f00f f816 	bl	800fb9e <HAL_UARTEx_DisableFifoMode>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b78:	f000 faac 	bl	80010d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	24000328 	.word	0x24000328
 8000b84:	40011000 	.word	0x40011000

08000b88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <MX_DMA_Init+0x3c>)
 8000b90:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b94:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <MX_DMA_Init+0x3c>)
 8000b96:	f043 0302 	orr.w	r3, r3, #2
 8000b9a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_DMA_Init+0x3c>)
 8000ba0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2039      	movs	r0, #57	; 0x39
 8000bb2:	f003 fe78 	bl	80048a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000bb6:	2039      	movs	r0, #57	; 0x39
 8000bb8:	f003 fe8f 	bl	80048da <HAL_NVIC_EnableIRQ>

}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	58024400 	.word	0x58024400

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b090      	sub	sp, #64	; 0x40
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000bde:	4bbf      	ldr	r3, [pc, #764]	; (8000edc <MX_GPIO_Init+0x314>)
 8000be0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000be4:	4abd      	ldr	r2, [pc, #756]	; (8000edc <MX_GPIO_Init+0x314>)
 8000be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bea:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bee:	4bbb      	ldr	r3, [pc, #748]	; (8000edc <MX_GPIO_Init+0x314>)
 8000bf0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfc:	4bb7      	ldr	r3, [pc, #732]	; (8000edc <MX_GPIO_Init+0x314>)
 8000bfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c02:	4ab6      	ldr	r2, [pc, #728]	; (8000edc <MX_GPIO_Init+0x314>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c0c:	4bb3      	ldr	r3, [pc, #716]	; (8000edc <MX_GPIO_Init+0x314>)
 8000c0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
 8000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c1a:	4bb0      	ldr	r3, [pc, #704]	; (8000edc <MX_GPIO_Init+0x314>)
 8000c1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c20:	4aae      	ldr	r2, [pc, #696]	; (8000edc <MX_GPIO_Init+0x314>)
 8000c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c26:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c2a:	4bac      	ldr	r3, [pc, #688]	; (8000edc <MX_GPIO_Init+0x314>)
 8000c2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c34:	623b      	str	r3, [r7, #32]
 8000c36:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c38:	4ba8      	ldr	r3, [pc, #672]	; (8000edc <MX_GPIO_Init+0x314>)
 8000c3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c3e:	4aa7      	ldr	r2, [pc, #668]	; (8000edc <MX_GPIO_Init+0x314>)
 8000c40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c44:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c48:	4ba4      	ldr	r3, [pc, #656]	; (8000edc <MX_GPIO_Init+0x314>)
 8000c4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c52:	61fb      	str	r3, [r7, #28]
 8000c54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c56:	4ba1      	ldr	r3, [pc, #644]	; (8000edc <MX_GPIO_Init+0x314>)
 8000c58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c5c:	4a9f      	ldr	r2, [pc, #636]	; (8000edc <MX_GPIO_Init+0x314>)
 8000c5e:	f043 0308 	orr.w	r3, r3, #8
 8000c62:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c66:	4b9d      	ldr	r3, [pc, #628]	; (8000edc <MX_GPIO_Init+0x314>)
 8000c68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c6c:	f003 0308 	and.w	r3, r3, #8
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c74:	4b99      	ldr	r3, [pc, #612]	; (8000edc <MX_GPIO_Init+0x314>)
 8000c76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c7a:	4a98      	ldr	r2, [pc, #608]	; (8000edc <MX_GPIO_Init+0x314>)
 8000c7c:	f043 0304 	orr.w	r3, r3, #4
 8000c80:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c84:	4b95      	ldr	r3, [pc, #596]	; (8000edc <MX_GPIO_Init+0x314>)
 8000c86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c92:	4b92      	ldr	r3, [pc, #584]	; (8000edc <MX_GPIO_Init+0x314>)
 8000c94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c98:	4a90      	ldr	r2, [pc, #576]	; (8000edc <MX_GPIO_Init+0x314>)
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ca2:	4b8e      	ldr	r3, [pc, #568]	; (8000edc <MX_GPIO_Init+0x314>)
 8000ca4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ca8:	f003 0310 	and.w	r3, r3, #16
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cb0:	4b8a      	ldr	r3, [pc, #552]	; (8000edc <MX_GPIO_Init+0x314>)
 8000cb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cb6:	4a89      	ldr	r2, [pc, #548]	; (8000edc <MX_GPIO_Init+0x314>)
 8000cb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cc0:	4b86      	ldr	r3, [pc, #536]	; (8000edc <MX_GPIO_Init+0x314>)
 8000cc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b83      	ldr	r3, [pc, #524]	; (8000edc <MX_GPIO_Init+0x314>)
 8000cd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cd4:	4a81      	ldr	r2, [pc, #516]	; (8000edc <MX_GPIO_Init+0x314>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cde:	4b7f      	ldr	r3, [pc, #508]	; (8000edc <MX_GPIO_Init+0x314>)
 8000ce0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cec:	4b7b      	ldr	r3, [pc, #492]	; (8000edc <MX_GPIO_Init+0x314>)
 8000cee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cf2:	4a7a      	ldr	r2, [pc, #488]	; (8000edc <MX_GPIO_Init+0x314>)
 8000cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cfc:	4b77      	ldr	r3, [pc, #476]	; (8000edc <MX_GPIO_Init+0x314>)
 8000cfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0a:	4b74      	ldr	r3, [pc, #464]	; (8000edc <MX_GPIO_Init+0x314>)
 8000d0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d10:	4a72      	ldr	r2, [pc, #456]	; (8000edc <MX_GPIO_Init+0x314>)
 8000d12:	f043 0320 	orr.w	r3, r3, #32
 8000d16:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d1a:	4b70      	ldr	r3, [pc, #448]	; (8000edc <MX_GPIO_Init+0x314>)
 8000d1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d20:	f003 0320 	and.w	r3, r3, #32
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	210e      	movs	r1, #14
 8000d2c:	486c      	ldr	r0, [pc, #432]	; (8000ee0 <MX_GPIO_Init+0x318>)
 8000d2e:	f008 f8e5 	bl	8008efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f640 0104 	movw	r1, #2052	; 0x804
 8000d38:	486a      	ldr	r0, [pc, #424]	; (8000ee4 <MX_GPIO_Init+0x31c>)
 8000d3a:	f008 f8df 	bl	8008efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d44:	4868      	ldr	r0, [pc, #416]	; (8000ee8 <MX_GPIO_Init+0x320>)
 8000d46:	f008 f8d9 	bl	8008efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2108      	movs	r1, #8
 8000d4e:	4865      	ldr	r0, [pc, #404]	; (8000ee4 <MX_GPIO_Init+0x31c>)
 8000d50:	f008 f8d4 	bl	8008efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	2106      	movs	r1, #6
 8000d58:	4863      	ldr	r0, [pc, #396]	; (8000ee8 <MX_GPIO_Init+0x320>)
 8000d5a:	f008 f8cf 	bl	8008efc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WIFI_GPIO_Pin WIFI_DATRDY_Pin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8000d5e:	2330      	movs	r3, #48	; 0x30
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d70:	4619      	mov	r1, r3
 8000d72:	485b      	ldr	r0, [pc, #364]	; (8000ee0 <MX_GPIO_Init+0x318>)
 8000d74:	f007 fe08 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNCAS_Pin SDCLK_Pin A15_Pin A14_Pin
                           A11_Pin A10_Pin */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000d78:	f248 1333 	movw	r3, #33075	; 0x8133
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d8a:	230c      	movs	r3, #12
 8000d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d92:	4619      	mov	r1, r3
 8000d94:	4853      	ldr	r0, [pc, #332]	; (8000ee4 <MX_GPIO_Init+0x31c>)
 8000d96:	f007 fdf7 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S6_SDO_Pin I2S6_SDI_Pin I2S6_CK_Pin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8000d9a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000dac:	2305      	movs	r3, #5
 8000dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db4:	4619      	mov	r1, r3
 8000db6:	484b      	ldr	r0, [pc, #300]	; (8000ee4 <MX_GPIO_Init+0x31c>)
 8000db8:	f007 fde6 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO6_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8000dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000dce:	2309      	movs	r3, #9
 8000dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8000dd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4842      	ldr	r0, [pc, #264]	; (8000ee4 <MX_GPIO_Init+0x31c>)
 8000dda:	f007 fdd5 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO7_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dea:	2303      	movs	r3, #3
 8000dec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000dee:	230a      	movs	r3, #10
 8000df0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df6:	4619      	mov	r1, r3
 8000df8:	483c      	ldr	r0, [pc, #240]	; (8000eec <MX_GPIO_Init+0x324>)
 8000dfa:	f007 fdc5 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_Pin D2_Pin D0_Pin D1_Pin
                           D13_Pin D15_Pin D14_Pin */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000dfe:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e10:	230c      	movs	r3, #12
 8000e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4834      	ldr	r0, [pc, #208]	; (8000eec <MX_GPIO_Init+0x324>)
 8000e1c:	f007 fdb4 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_CK_Pin SDIO1_D3_Pin SDIO1_D1_Pin
                           SDIO1_D0_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D1_Pin
 8000e20:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e32:	230c      	movs	r3, #12
 8000e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	482c      	ldr	r0, [pc, #176]	; (8000ef0 <MX_GPIO_Init+0x328>)
 8000e3e:	f007 fda3 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_BOOT_Pin WIFI_WKUP_Pin WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8000e42:	230e      	movs	r3, #14
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e56:	4619      	mov	r1, r3
 8000e58:	4821      	ldr	r0, [pc, #132]	; (8000ee0 <MX_GPIO_Init+0x318>)
 8000e5a:	f007 fd95 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL0_Pin FMC_NBL1_Pin D9_Pin D4_Pin
                           D10_Pin D11_Pin D7_Pin D6_Pin
                           D12_Pin D5_Pin D8_Pin */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000e5e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e70:	230c      	movs	r3, #12
 8000e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e78:	4619      	mov	r1, r3
 8000e7a:	481e      	ldr	r0, [pc, #120]	; (8000ef4 <MX_GPIO_Init+0x32c>)
 8000e7c:	f007 fd84 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED1_Pin AUDIO_NRST_Pin USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8000e80:	f640 030c 	movw	r3, #2060	; 0x80c
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e96:	4619      	mov	r1, r3
 8000e98:	4812      	ldr	r0, [pc, #72]	; (8000ee4 <MX_GPIO_Init+0x31c>)
 8000e9a:	f007 fd75 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000eae:	230c      	movs	r3, #12
 8000eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <MX_GPIO_Init+0x324>)
 8000eba:	f007 fd65 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000ebe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <MX_GPIO_Init+0x318>)
 8000ed6:	f007 fd57 	bl	8008988 <HAL_GPIO_Init>
 8000eda:	e00d      	b.n	8000ef8 <MX_GPIO_Init+0x330>
 8000edc:	58024400 	.word	0x58024400
 8000ee0:	58022000 	.word	0x58022000
 8000ee4:	58021800 	.word	0x58021800
 8000ee8:	58020000 	.word	0x58020000
 8000eec:	58020c00 	.word	0x58020c00
 8000ef0:	58020800 	.word	0x58020800
 8000ef4:	58021000 	.word	0x58021000

  /*Configure GPIO pin : SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8000ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f0a:	2305      	movs	r3, #5
 8000f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f12:	4619      	mov	r1, r3
 8000f14:	4861      	ldr	r0, [pc, #388]	; (800109c <MX_GPIO_Init+0x4d4>)
 8000f16:	f007 fd37 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LCD_BL_CTRL_Pin LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8000f1a:	f640 0306 	movw	r3, #2054	; 0x806
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f30:	4619      	mov	r1, r3
 8000f32:	485a      	ldr	r0, [pc, #360]	; (800109c <MX_GPIO_Init+0x4d4>)
 8000f34:	f007 fd28 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKEUP_Pin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8000f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4854      	ldr	r0, [pc, #336]	; (80010a0 <MX_GPIO_Init+0x4d8>)
 8000f50:	f007 fd1a 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin A0_Pin A2_Pin A4_Pin
                           A3_Pin A5_Pin A7_Pin SDNRAS_Pin
                           A9_Pin A8_Pin A6_Pin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000f54:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f66:	230c      	movs	r3, #12
 8000f68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6e:	4619      	mov	r1, r3
 8000f70:	484c      	ldr	r0, [pc, #304]	; (80010a4 <MX_GPIO_Init+0x4dc>)
 8000f72:	f007 fd09 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO_Pin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f90:	4619      	mov	r1, r3
 8000f92:	4842      	ldr	r0, [pc, #264]	; (800109c <MX_GPIO_Init+0x4d4>)
 8000f94:	f007 fcf8 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8000f98:	2340      	movs	r3, #64	; 0x40
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000fa8:	230a      	movs	r3, #10
 8000faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	483d      	ldr	r0, [pc, #244]	; (80010a8 <MX_GPIO_Init+0x4e0>)
 8000fb4:	f007 fce8 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000fb8:	230c      	movs	r3, #12
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fc8:	2305      	movs	r3, #5
 8000fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4833      	ldr	r0, [pc, #204]	; (80010a0 <MX_GPIO_Init+0x4d8>)
 8000fd4:	f007 fcd8 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO4_Pin OCSPI1_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 8000fd8:	2322      	movs	r3, #34	; 0x22
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000fe8:	230a      	movs	r3, #10
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	482b      	ldr	r0, [pc, #172]	; (80010a0 <MX_GPIO_Init+0x4d8>)
 8000ff4:	f007 fcc8 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ffc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100a:	4619      	mov	r1, r3
 800100c:	4827      	ldr	r0, [pc, #156]	; (80010ac <MX_GPIO_Init+0x4e4>)
 800100e:	f007 fcbb 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDNE1_Pin SDNWE_Pin SDCKE1_Pin */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8001012:	23e0      	movs	r3, #224	; 0xe0
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001022:	230c      	movs	r3, #12
 8001024:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102a:	4619      	mov	r1, r3
 800102c:	481f      	ldr	r0, [pc, #124]	; (80010ac <MX_GPIO_Init+0x4e4>)
 800102e:	f007 fcab 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO5_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 8001032:	2308      	movs	r3, #8
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001042:	2309      	movs	r3, #9
 8001044:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104a:	4619      	mov	r1, r3
 800104c:	4817      	ldr	r0, [pc, #92]	; (80010ac <MX_GPIO_Init+0x4e4>)
 800104e:	f007 fc9b 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S6_WS_Pin I2S6_MCK_Pin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 8001052:	2309      	movs	r3, #9
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001062:	2305      	movs	r3, #5
 8001064:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106a:	4619      	mov	r1, r3
 800106c:	480b      	ldr	r0, [pc, #44]	; (800109c <MX_GPIO_Init+0x4d4>)
 800106e:	f007 fc8b 	bl	8008988 <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_CLK_Pin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8001072:	2304      	movs	r3, #4
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001082:	2309      	movs	r3, #9
 8001084:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108a:	4619      	mov	r1, r3
 800108c:	4808      	ldr	r0, [pc, #32]	; (80010b0 <MX_GPIO_Init+0x4e8>)
 800108e:	f007 fc7b 	bl	8008988 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001092:	bf00      	nop
 8001094:	3740      	adds	r7, #64	; 0x40
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	58020000 	.word	0x58020000
 80010a0:	58020800 	.word	0x58020800
 80010a4:	58021400 	.word	0x58021400
 80010a8:	58021800 	.word	0x58021800
 80010ac:	58021c00 	.word	0x58021c00
 80010b0:	58020400 	.word	0x58020400

080010b4 <BSP_CAMERA_FrameEventCallback>:

/* USER CODE BEGIN 4 */

void BSP_CAMERA_FrameEventCallback(uint32_t Instance){
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	camera_frame_ready = 1;
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <BSP_CAMERA_FrameEventCallback+0x1c>)
 80010be:	2201      	movs	r2, #1
 80010c0:	601a      	str	r2, [r3, #0]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	240003bc 	.word	0x240003bc

080010d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010dc:	e7fe      	b.n	80010dc <Error_Handler+0x8>
	...

080010e0 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d103      	bne.n	80010f8 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	e02c      	b.n	8001152 <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	891a      	ldrh	r2, [r3, #8]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	695a      	ldr	r2, [r3, #20]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a0c      	ldr	r2, [pc, #48]	; (800115c <OV5640_RegisterBusIO+0x7c>)
 800112c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <OV5640_RegisterBusIO+0x80>)
 8001132:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d004      	beq.n	800114c <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4798      	blx	r3
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	e002      	b.n	8001152 <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 800114c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001150:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001152:	68fb      	ldr	r3, [r7, #12]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	08002963 	.word	0x08002963
 8001160:	08002995 	.word	0x08002995

08001164 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800117a:	2b00      	cmp	r3, #0
 800117c:	d165      	bne.n	800124a <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	2b04      	cmp	r3, #4
 8001182:	d80e      	bhi.n	80011a2 <OV5640_Init+0x3e>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00f      	beq.n	80011aa <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d00c      	beq.n	80011aa <OV5640_Init+0x46>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d009      	beq.n	80011aa <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b07      	cmp	r3, #7
 800119a:	d006      	beq.n	80011aa <OV5640_Init+0x46>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d003      	beq.n	80011aa <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011a6:	61bb      	str	r3, [r7, #24]
 80011a8:	e04f      	b.n	800124a <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	e01f      	b.n	80011f0 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011b6:	d018      	beq.n	80011ea <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 80011b8:	4a26      	ldr	r2, [pc, #152]	; (8001254 <OV5640_Init+0xf0>)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	885b      	ldrh	r3, [r3, #2]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f103 0018 	add.w	r0, r3, #24
 80011cc:	4a21      	ldr	r2, [pc, #132]	; (8001254 <OV5640_Init+0xf0>)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80011d4:	f107 0217 	add.w	r2, r7, #23
 80011d8:	2301      	movs	r3, #1
 80011da:	f001 fc0b 	bl	80029f4 <ov5640_write_reg>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011e8:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3301      	adds	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	2bfd      	cmp	r3, #253	; 0xfd
 80011f4:	d9dc      	bls.n	80011b0 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d126      	bne.n	800124a <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 f9e0 	bl	80015c4 <OV5640_SetResolution>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800120e:	61bb      	str	r3, [r7, #24]
 8001210:	e01b      	b.n	800124a <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 f833 	bl	8001280 <OV5640_SetPixelFormat>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8001220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001224:	61bb      	str	r3, [r7, #24]
 8001226:	e010      	b.n	800124a <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8001228:	2300      	movs	r3, #0
 800122a:	2201      	movs	r2, #1
 800122c:	2101      	movs	r1, #1
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f000 fb64 	bl	80018fc <OV5640_SetPolarities>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 800123a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800123e:	61bb      	str	r3, [r7, #24]
 8001240:	e003      	b.n	800124a <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 800124a:	69bb      	ldr	r3, [r7, #24]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	08011074 	.word	0x08011074

08001258 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001266:	2b01      	cmp	r3, #1
 8001268:	d103      	bne.n	8001272 <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00f      	beq.n	80012b4 <OV5640_SetPixelFormat+0x34>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d00c      	beq.n	80012b4 <OV5640_SetPixelFormat+0x34>
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d009      	beq.n	80012b4 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2b07      	cmp	r3, #7
 80012a4:	d006      	beq.n	80012b4 <OV5640_SetPixelFormat+0x34>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d003      	beq.n	80012b4 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	e16a      	b.n	800158a <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	2b07      	cmp	r3, #7
 80012ba:	f200 80c3 	bhi.w	8001444 <OV5640_SetPixelFormat+0x1c4>
 80012be:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <OV5640_SetPixelFormat+0x44>)
 80012c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c4:	0800133d 	.word	0x0800133d
 80012c8:	080012e5 	.word	0x080012e5
 80012cc:	08001445 	.word	0x08001445
 80012d0:	08001445 	.word	0x08001445
 80012d4:	08001445 	.word	0x08001445
 80012d8:	08001445 	.word	0x08001445
 80012dc:	08001395 	.word	0x08001395
 80012e0:	080013ed 	.word	0x080013ed
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	e024      	b.n	8001334 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012f0:	d01d      	beq.n	800132e <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 80012f2:	4aa8      	ldr	r2, [pc, #672]	; (8001594 <OV5640_SetPixelFormat+0x314>)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	885b      	ldrh	r3, [r3, #2]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f103 0018 	add.w	r0, r3, #24
 8001306:	4aa3      	ldr	r2, [pc, #652]	; (8001594 <OV5640_SetPixelFormat+0x314>)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800130e:	f107 020f 	add.w	r2, r7, #15
 8001312:	2301      	movs	r3, #1
 8001314:	f001 fb6e 	bl	80029f4 <ov5640_write_reg>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e003      	b.n	800132e <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001326:	2101      	movs	r1, #1
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f001 fb00 	bl	800292e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	3301      	adds	r3, #1
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d9d7      	bls.n	80012ea <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 800133a:	e0af      	b.n	800149c <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	e024      	b.n	800138c <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001348:	d01d      	beq.n	8001386 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 800134a:	4a93      	ldr	r2, [pc, #588]	; (8001598 <OV5640_SetPixelFormat+0x318>)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	885b      	ldrh	r3, [r3, #2]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f103 0018 	add.w	r0, r3, #24
 800135e:	4a8e      	ldr	r2, [pc, #568]	; (8001598 <OV5640_SetPixelFormat+0x318>)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001366:	f107 020f 	add.w	r2, r7, #15
 800136a:	2301      	movs	r3, #1
 800136c:	f001 fb42 	bl	80029f4 <ov5640_write_reg>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	e003      	b.n	8001386 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800137e:	2101      	movs	r1, #1
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f001 fad4 	bl	800292e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	3301      	adds	r3, #1
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d9d7      	bls.n	8001342 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8001392:	e083      	b.n	800149c <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001394:	2300      	movs	r3, #0
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	e024      	b.n	80013e4 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013a0:	d01d      	beq.n	80013de <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80013a2:	4a7e      	ldr	r2, [pc, #504]	; (800159c <OV5640_SetPixelFormat+0x31c>)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	885b      	ldrh	r3, [r3, #2]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f103 0018 	add.w	r0, r3, #24
 80013b6:	4a79      	ldr	r2, [pc, #484]	; (800159c <OV5640_SetPixelFormat+0x31c>)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80013be:	f107 020f 	add.w	r2, r7, #15
 80013c2:	2301      	movs	r3, #1
 80013c4:	f001 fb16 	bl	80029f4 <ov5640_write_reg>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	e003      	b.n	80013de <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80013d6:	2101      	movs	r1, #1
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f001 faa8 	bl	800292e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	3301      	adds	r3, #1
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d9d7      	bls.n	800139a <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 80013ea:	e057      	b.n	800149c <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	e024      	b.n	800143c <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013f8:	d01d      	beq.n	8001436 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80013fa:	4a69      	ldr	r2, [pc, #420]	; (80015a0 <OV5640_SetPixelFormat+0x320>)
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	885b      	ldrh	r3, [r3, #2]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f103 0018 	add.w	r0, r3, #24
 800140e:	4a64      	ldr	r2, [pc, #400]	; (80015a0 <OV5640_SetPixelFormat+0x320>)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001416:	f107 020f 	add.w	r2, r7, #15
 800141a:	2301      	movs	r3, #1
 800141c:	f001 faea 	bl	80029f4 <ov5640_write_reg>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e003      	b.n	8001436 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800142e:	2101      	movs	r1, #1
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f001 fa7c 	bl	800292e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	3301      	adds	r3, #1
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d9d7      	bls.n	80013f2 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8001442:	e02b      	b.n	800149c <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	e024      	b.n	8001494 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001450:	d01d      	beq.n	800148e <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8001452:	4a54      	ldr	r2, [pc, #336]	; (80015a4 <OV5640_SetPixelFormat+0x324>)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	885b      	ldrh	r3, [r3, #2]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f103 0018 	add.w	r0, r3, #24
 8001466:	4a4f      	ldr	r2, [pc, #316]	; (80015a4 <OV5640_SetPixelFormat+0x324>)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800146e:	f107 020f 	add.w	r2, r7, #15
 8001472:	2301      	movs	r3, #1
 8001474:	f001 fabe 	bl	80029f4 <ov5640_write_reg>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	e003      	b.n	800148e <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001486:	2101      	movs	r1, #1
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f001 fa50 	bl	800292e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	3301      	adds	r3, #1
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d9d7      	bls.n	800144a <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 800149a:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d173      	bne.n	800158a <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f103 0018 	add.w	r0, r3, #24
 80014a8:	f107 020f 	add.w	r2, r7, #15
 80014ac:	2301      	movs	r3, #1
 80014ae:	f643 0121 	movw	r1, #14369	; 0x3821
 80014b2:	f001 fa88 	bl	80029c6 <ov5640_read_reg>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e062      	b.n	800158a <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	f043 0320 	orr.w	r3, r3, #32
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f103 0018 	add.w	r0, r3, #24
 80014d4:	f107 020f 	add.w	r2, r7, #15
 80014d8:	2301      	movs	r3, #1
 80014da:	f643 0121 	movw	r1, #14369	; 0x3821
 80014de:	f001 fa89 	bl	80029f4 <ov5640_write_reg>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	e04c      	b.n	800158a <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f103 0018 	add.w	r0, r3, #24
 80014f6:	f107 020f 	add.w	r2, r7, #15
 80014fa:	2301      	movs	r3, #1
 80014fc:	f243 0102 	movw	r1, #12290	; 0x3002
 8001500:	f001 fa61 	bl	80029c6 <ov5640_read_reg>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	e03b      	b.n	800158a <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	f023 031c 	bic.w	r3, r3, #28
 8001518:	b2db      	uxtb	r3, r3
 800151a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f103 0018 	add.w	r0, r3, #24
 8001522:	f107 020f 	add.w	r2, r7, #15
 8001526:	2301      	movs	r3, #1
 8001528:	f243 0102 	movw	r1, #12290	; 0x3002
 800152c:	f001 fa62 	bl	80029f4 <ov5640_write_reg>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	e025      	b.n	800158a <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f103 0018 	add.w	r0, r3, #24
 8001544:	f107 020f 	add.w	r2, r7, #15
 8001548:	2301      	movs	r3, #1
 800154a:	f243 0106 	movw	r1, #12294	; 0x3006
 800154e:	f001 fa3a 	bl	80029c6 <ov5640_read_reg>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8001558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	e014      	b.n	800158a <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001566:	b2db      	uxtb	r3, r3
 8001568:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f103 0018 	add.w	r0, r3, #24
 8001570:	f107 020f 	add.w	r2, r7, #15
 8001574:	2301      	movs	r3, #1
 8001576:	f243 0106 	movw	r1, #12294	; 0x3006
 800157a:	f001 fa3b 	bl	80029f4 <ov5640_write_reg>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001588:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 800158a:	697b      	ldr	r3, [r7, #20]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	0801146c 	.word	0x0801146c
 8001598:	08011474 	.word	0x08011474
 800159c:	0801147c 	.word	0x0801147c
 80015a0:	08011484 	.word	0x08011484
 80015a4:	0801148c 	.word	0x0801148c

080015a8 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d903      	bls.n	80015e0 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e0d8      	b.n	8001792 <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	f200 80d1 	bhi.w	800178a <OV5640_SetResolution+0x1c6>
 80015e8:	a201      	add	r2, pc, #4	; (adr r2, 80015f0 <OV5640_SetResolution+0x2c>)
 80015ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ee:	bf00      	nop
 80015f0:	08001605 	.word	0x08001605
 80015f4:	08001653 	.word	0x08001653
 80015f8:	080016a1 	.word	0x080016a1
 80015fc:	080016ef 	.word	0x080016ef
 8001600:	0800173d 	.word	0x0800173d
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001604:	2300      	movs	r3, #0
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	e01f      	b.n	800164a <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001610:	d018      	beq.n	8001644 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8001612:	4a62      	ldr	r2, [pc, #392]	; (800179c <OV5640_SetResolution+0x1d8>)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	885b      	ldrh	r3, [r3, #2]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f103 0018 	add.w	r0, r3, #24
 8001626:	4a5d      	ldr	r2, [pc, #372]	; (800179c <OV5640_SetResolution+0x1d8>)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800162e:	f107 020f 	add.w	r2, r7, #15
 8001632:	2301      	movs	r3, #1
 8001634:	f001 f9de 	bl	80029f4 <ov5640_write_reg>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001642:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	3301      	adds	r3, #1
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	2b03      	cmp	r3, #3
 800164e:	d9dc      	bls.n	800160a <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001650:	e09f      	b.n	8001792 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	e01f      	b.n	8001698 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800165e:	d018      	beq.n	8001692 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8001660:	4a4f      	ldr	r2, [pc, #316]	; (80017a0 <OV5640_SetResolution+0x1dc>)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	4413      	add	r3, r2
 8001668:	885b      	ldrh	r3, [r3, #2]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f103 0018 	add.w	r0, r3, #24
 8001674:	4a4a      	ldr	r2, [pc, #296]	; (80017a0 <OV5640_SetResolution+0x1dc>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800167c:	f107 020f 	add.w	r2, r7, #15
 8001680:	2301      	movs	r3, #1
 8001682:	f001 f9b7 	bl	80029f4 <ov5640_write_reg>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 800168c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001690:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	3301      	adds	r3, #1
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	2b03      	cmp	r3, #3
 800169c:	d9dc      	bls.n	8001658 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 800169e:	e078      	b.n	8001792 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	e01f      	b.n	80016e6 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016ac:	d018      	beq.n	80016e0 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 80016ae:	4a3d      	ldr	r2, [pc, #244]	; (80017a4 <OV5640_SetResolution+0x1e0>)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	885b      	ldrh	r3, [r3, #2]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f103 0018 	add.w	r0, r3, #24
 80016c2:	4a38      	ldr	r2, [pc, #224]	; (80017a4 <OV5640_SetResolution+0x1e0>)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80016ca:	f107 020f 	add.w	r2, r7, #15
 80016ce:	2301      	movs	r3, #1
 80016d0:	f001 f990 	bl	80029f4 <ov5640_write_reg>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d002      	beq.n	80016e0 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016de:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	3301      	adds	r3, #1
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d9dc      	bls.n	80016a6 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 80016ec:	e051      	b.n	8001792 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	e01f      	b.n	8001734 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016fa:	d018      	beq.n	800172e <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 80016fc:	4a2a      	ldr	r2, [pc, #168]	; (80017a8 <OV5640_SetResolution+0x1e4>)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	885b      	ldrh	r3, [r3, #2]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f103 0018 	add.w	r0, r3, #24
 8001710:	4a25      	ldr	r2, [pc, #148]	; (80017a8 <OV5640_SetResolution+0x1e4>)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001718:	f107 020f 	add.w	r2, r7, #15
 800171c:	2301      	movs	r3, #1
 800171e:	f001 f969 	bl	80029f4 <ov5640_write_reg>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8001728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800172c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	3301      	adds	r3, #1
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	2b03      	cmp	r3, #3
 8001738:	d9dc      	bls.n	80016f4 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 800173a:	e02a      	b.n	8001792 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	e01f      	b.n	8001782 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001748:	d018      	beq.n	800177c <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 800174a:	4a18      	ldr	r2, [pc, #96]	; (80017ac <OV5640_SetResolution+0x1e8>)
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	885b      	ldrh	r3, [r3, #2]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f103 0018 	add.w	r0, r3, #24
 800175e:	4a13      	ldr	r2, [pc, #76]	; (80017ac <OV5640_SetResolution+0x1e8>)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001766:	f107 020f 	add.w	r2, r7, #15
 800176a:	2301      	movs	r3, #1
 800176c:	f001 f942 	bl	80029f4 <ov5640_write_reg>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d002      	beq.n	800177c <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800177a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	3301      	adds	r3, #1
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	2b03      	cmp	r3, #3
 8001786:	d9dc      	bls.n	8001742 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8001788:	e003      	b.n	8001792 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800178e:	617b      	str	r3, [r7, #20]
        break;
 8001790:	bf00      	nop
    }
  }

  return ret;
 8001792:	697b      	ldr	r3, [r7, #20]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	08011494 	.word	0x08011494
 80017a0:	080114a4 	.word	0x080114a4
 80017a4:	080114b4 	.word	0x080114b4
 80017a8:	080114c4 	.word	0x080114c4
 80017ac:	080114d4 	.word	0x080114d4

080017b0 <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f103 0018 	add.w	r0, r3, #24
 80017c0:	f107 020f 	add.w	r2, r7, #15
 80017c4:	2301      	movs	r3, #1
 80017c6:	f643 0108 	movw	r1, #14344	; 0x3808
 80017ca:	f001 f8fc 	bl	80029c6 <ov5640_read_reg>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e08a      	b.n	80018f2 <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f103 0018 	add.w	r0, r3, #24
 80017ea:	f107 020f 	add.w	r2, r7, #15
 80017ee:	2301      	movs	r3, #1
 80017f0:	f643 0109 	movw	r1, #14345	; 0x3809
 80017f4:	f001 f8e7 	bl	80029c6 <ov5640_read_reg>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	e075      	b.n	80018f2 <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	b29a      	uxth	r2, r3
 800180a:	8a7b      	ldrh	r3, [r7, #18]
 800180c:	4313      	orrs	r3, r2
 800180e:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f103 0018 	add.w	r0, r3, #24
 8001816:	f107 020f 	add.w	r2, r7, #15
 800181a:	2301      	movs	r3, #1
 800181c:	f643 010a 	movw	r1, #14346	; 0x380a
 8001820:	f001 f8d1 	bl	80029c6 <ov5640_read_reg>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 800182a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	e05f      	b.n	80018f2 <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	b29b      	uxth	r3, r3
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f103 0018 	add.w	r0, r3, #24
 8001840:	f107 020f 	add.w	r2, r7, #15
 8001844:	2301      	movs	r3, #1
 8001846:	f643 010b 	movw	r1, #14347	; 0x380b
 800184a:	f001 f8bc 	bl	80029c6 <ov5640_read_reg>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	e04a      	b.n	80018f2 <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	b29a      	uxth	r2, r3
 8001860:	8a3b      	ldrh	r3, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 8001866:	8a7b      	ldrh	r3, [r7, #18]
 8001868:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800186c:	d109      	bne.n	8001882 <OV5640_GetResolution+0xd2>
 800186e:	8a3b      	ldrh	r3, [r7, #16]
 8001870:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001874:	d105      	bne.n	8001882 <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	2204      	movs	r2, #4
 800187a:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	e037      	b.n	80018f2 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 8001882:	8a7b      	ldrh	r3, [r7, #18]
 8001884:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001888:	d109      	bne.n	800189e <OV5640_GetResolution+0xee>
 800188a:	8a3b      	ldrh	r3, [r7, #16]
 800188c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001890:	d105      	bne.n	800189e <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	2203      	movs	r2, #3
 8001896:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	e029      	b.n	80018f2 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 800189e:	8a7b      	ldrh	r3, [r7, #18]
 80018a0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80018a4:	d109      	bne.n	80018ba <OV5640_GetResolution+0x10a>
 80018a6:	8a3b      	ldrh	r3, [r7, #16]
 80018a8:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80018ac:	d105      	bne.n	80018ba <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2202      	movs	r2, #2
 80018b2:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e01b      	b.n	80018f2 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 80018ba:	8a7b      	ldrh	r3, [r7, #18]
 80018bc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80018c0:	d108      	bne.n	80018d4 <OV5640_GetResolution+0x124>
 80018c2:	8a3b      	ldrh	r3, [r7, #16]
 80018c4:	2bf0      	cmp	r3, #240	; 0xf0
 80018c6:	d105      	bne.n	80018d4 <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e00e      	b.n	80018f2 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 80018d4:	8a7b      	ldrh	r3, [r7, #18]
 80018d6:	2ba0      	cmp	r3, #160	; 0xa0
 80018d8:	d108      	bne.n	80018ec <OV5640_GetResolution+0x13c>
 80018da:	8a3b      	ldrh	r3, [r7, #16]
 80018dc:	2b78      	cmp	r3, #120	; 0x78
 80018de:	d105      	bne.n	80018ec <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	e002      	b.n	80018f2 <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018f0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 80018f2:	697b      	ldr	r3, [r7, #20]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d011      	beq.n	8001938 <OV5640_SetPolarities+0x3c>
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <OV5640_SetPolarities+0x24>
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d10b      	bne.n	8001938 <OV5640_SetPolarities+0x3c>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d105      	bne.n	8001938 <OV5640_SetPolarities+0x3c>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d006      	beq.n	8001940 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e01e      	b.n	800197e <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	015b      	lsls	r3, r3, #5
 8001946:	b2da      	uxtb	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	b2db      	uxtb	r3, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	b2da      	uxtb	r2, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	4313      	orrs	r3, r2
 800195a:	b2db      	uxtb	r3, r3
 800195c:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f103 0018 	add.w	r0, r3, #24
 8001964:	f107 0213 	add.w	r2, r7, #19
 8001968:	2301      	movs	r3, #1
 800196a:	f244 7140 	movw	r1, #18240	; 0x4740
 800196e:	f001 f841 	bl	80029f4 <ov5640_write_reg>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8001978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800197c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800197e:	697b      	ldr	r3, [r7, #20]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f103 0018 	add.w	r0, r3, #24
 80019a2:	f107 020b 	add.w	r2, r7, #11
 80019a6:	2301      	movs	r3, #1
 80019a8:	f243 0108 	movw	r1, #12296	; 0x3008
 80019ac:	f001 f822 	bl	80029f4 <ov5640_write_reg>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e032      	b.n	8001a24 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 80019be:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 ffb3 	bl	800292e <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f103 0018 	add.w	r0, r3, #24
 80019ce:	f107 020b 	add.w	r2, r7, #11
 80019d2:	2301      	movs	r3, #1
 80019d4:	f243 010a 	movw	r1, #12298	; 0x300a
 80019d8:	f000 fff5 	bl	80029c6 <ov5640_read_reg>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e01c      	b.n	8001a24 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 80019ea:	7afb      	ldrb	r3, [r7, #11]
 80019ec:	021a      	lsls	r2, r3, #8
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f103 0018 	add.w	r0, r3, #24
 80019f8:	f107 020b 	add.w	r2, r7, #11
 80019fc:	2301      	movs	r3, #1
 80019fe:	f243 010b 	movw	r1, #12299	; 0x300b
 8001a02:	f000 ffe0 	bl	80029c6 <ov5640_read_reg>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	e007      	b.n	8001a24 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	7afa      	ldrb	r2, [r7, #11]
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8001a24:	68fb      	ldr	r3, [r7, #12]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b085      	sub	sp, #20
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d103      	bne.n	8001a46 <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e01f      	b.n	8001a86 <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2201      	movs	r2, #1
 8001a56:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2201      	movs	r2, #1
 8001a62:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	2201      	movs	r2, #1
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2201      	movs	r2, #1
 8001a74:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001a86:	68fb      	ldr	r3, [r7, #12]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f103 0018 	add.w	r0, r3, #24
 8001aa8:	f107 020f 	add.w	r2, r7, #15
 8001aac:	2301      	movs	r3, #1
 8001aae:	f243 4106 	movw	r1, #13318	; 0x3406
 8001ab2:	f000 ff9f 	bl	80029f4 <ov5640_write_reg>
 8001ab6:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10c      	bne.n	8001ad8 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 8001abe:	2346      	movs	r3, #70	; 0x46
 8001ac0:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f103 0018 	add.w	r0, r3, #24
 8001ac8:	f107 020f 	add.w	r2, r7, #15
 8001acc:	2301      	movs	r3, #1
 8001ace:	f245 1190 	movw	r1, #20880	; 0x5190
 8001ad2:	f000 ff8f 	bl	80029f4 <ov5640_write_reg>
 8001ad6:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10c      	bne.n	8001af8 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 8001ade:	23f8      	movs	r3, #248	; 0xf8
 8001ae0:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f103 0018 	add.w	r0, r3, #24
 8001ae8:	f107 020f 	add.w	r2, r7, #15
 8001aec:	2301      	movs	r3, #1
 8001aee:	f245 1191 	movw	r1, #20881	; 0x5191
 8001af2:	f000 ff7f 	bl	80029f4 <ov5640_write_reg>
 8001af6:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10c      	bne.n	8001b18 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 8001afe:	2304      	movs	r3, #4
 8001b00:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f103 0018 	add.w	r0, r3, #24
 8001b08:	f107 020f 	add.w	r2, r7, #15
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f245 1192 	movw	r1, #20882	; 0x5192
 8001b12:	f000 ff6f 	bl	80029f4 <ov5640_write_reg>
 8001b16:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 80db 	bne.w	8001cd6 <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	2b07      	cmp	r3, #7
 8001b26:	f200 80af 	bhi.w	8001c88 <OV5640_SetLightMode+0x1f4>
 8001b2a:	a201      	add	r2, pc, #4	; (adr r2, 8001b30 <OV5640_SetLightMode+0x9c>)
 8001b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b30:	08001b51 	.word	0x08001b51
 8001b34:	08001b9f 	.word	0x08001b9f
 8001b38:	08001c89 	.word	0x08001c89
 8001b3c:	08001c3b 	.word	0x08001c3b
 8001b40:	08001c89 	.word	0x08001c89
 8001b44:	08001c89 	.word	0x08001c89
 8001b48:	08001c89 	.word	0x08001c89
 8001b4c:	08001bed 	.word	0x08001bed
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	e01f      	b.n	8001b96 <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b5c:	d018      	beq.n	8001b90 <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8001b5e:	4a61      	ldr	r2, [pc, #388]	; (8001ce4 <OV5640_SetLightMode+0x250>)
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	885b      	ldrh	r3, [r3, #2]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f103 0018 	add.w	r0, r3, #24
 8001b72:	4a5c      	ldr	r2, [pc, #368]	; (8001ce4 <OV5640_SetLightMode+0x250>)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001b7a:	f107 020f 	add.w	r2, r7, #15
 8001b7e:	2301      	movs	r3, #1
 8001b80:	f000 ff38 	bl	80029f4 <ov5640_write_reg>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b8e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	3301      	adds	r3, #1
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	2b06      	cmp	r3, #6
 8001b9a:	d9dc      	bls.n	8001b56 <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 8001b9c:	e09c      	b.n	8001cd8 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	e01f      	b.n	8001be4 <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001baa:	d018      	beq.n	8001bde <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8001bac:	4a4e      	ldr	r2, [pc, #312]	; (8001ce8 <OV5640_SetLightMode+0x254>)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	885b      	ldrh	r3, [r3, #2]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f103 0018 	add.w	r0, r3, #24
 8001bc0:	4a49      	ldr	r2, [pc, #292]	; (8001ce8 <OV5640_SetLightMode+0x254>)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001bc8:	f107 020f 	add.w	r2, r7, #15
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f000 ff11 	bl	80029f4 <ov5640_write_reg>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bdc:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	3301      	adds	r3, #1
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d9dc      	bls.n	8001ba4 <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 8001bea:	e075      	b.n	8001cd8 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	e01f      	b.n	8001c32 <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bf8:	d018      	beq.n	8001c2c <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8001bfa:	4a3c      	ldr	r2, [pc, #240]	; (8001cec <OV5640_SetLightMode+0x258>)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	885b      	ldrh	r3, [r3, #2]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f103 0018 	add.w	r0, r3, #24
 8001c0e:	4a37      	ldr	r2, [pc, #220]	; (8001cec <OV5640_SetLightMode+0x258>)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001c16:	f107 020f 	add.w	r2, r7, #15
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f000 feea 	bl	80029f4 <ov5640_write_reg>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c2a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b06      	cmp	r3, #6
 8001c36:	d9dc      	bls.n	8001bf2 <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 8001c38:	e04e      	b.n	8001cd8 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	e01f      	b.n	8001c80 <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c46:	d018      	beq.n	8001c7a <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8001c48:	4a29      	ldr	r2, [pc, #164]	; (8001cf0 <OV5640_SetLightMode+0x25c>)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	885b      	ldrh	r3, [r3, #2]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f103 0018 	add.w	r0, r3, #24
 8001c5c:	4a24      	ldr	r2, [pc, #144]	; (8001cf0 <OV5640_SetLightMode+0x25c>)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001c64:	f107 020f 	add.w	r2, r7, #15
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f000 fec3 	bl	80029f4 <ov5640_write_reg>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c78:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	2b06      	cmp	r3, #6
 8001c84:	d9dc      	bls.n	8001c40 <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 8001c86:	e027      	b.n	8001cd8 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	e01f      	b.n	8001cce <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c94:	d018      	beq.n	8001cc8 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8001c96:	4a17      	ldr	r2, [pc, #92]	; (8001cf4 <OV5640_SetLightMode+0x260>)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	885b      	ldrh	r3, [r3, #2]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f103 0018 	add.w	r0, r3, #24
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <OV5640_SetLightMode+0x260>)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001cb2:	f107 020f 	add.w	r2, r7, #15
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	f000 fe9c 	bl	80029f4 <ov5640_write_reg>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cc6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	2b06      	cmp	r3, #6
 8001cd2:	d9dc      	bls.n	8001c8e <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 8001cd4:	e000      	b.n	8001cd8 <OV5640_SetLightMode+0x244>
    }
  }
 8001cd6:	bf00      	nop
  return ret;
 8001cd8:	697b      	ldr	r3, [r7, #20]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	080114e4 	.word	0x080114e4
 8001ce8:	08011500 	.word	0x08011500
 8001cec:	0801151c 	.word	0x0801151c
 8001cf0:	08011538 	.word	0x08011538
 8001cf4:	08011554 	.word	0x08011554

08001cf8 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	2b1f      	cmp	r3, #31
 8001d08:	f200 81c0 	bhi.w	800208c <OV5640_SetColorEffect+0x394>
 8001d0c:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <OV5640_SetColorEffect+0x1c>)
 8001d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d12:	bf00      	nop
 8001d14:	08001d95 	.word	0x08001d95
 8001d18:	08001e1f 	.word	0x08001e1f
 8001d1c:	0800208d 	.word	0x0800208d
 8001d20:	08001ea9 	.word	0x08001ea9
 8001d24:	0800208d 	.word	0x0800208d
 8001d28:	0800208d 	.word	0x0800208d
 8001d2c:	0800208d 	.word	0x0800208d
 8001d30:	08001f33 	.word	0x08001f33
 8001d34:	0800208d 	.word	0x0800208d
 8001d38:	0800208d 	.word	0x0800208d
 8001d3c:	0800208d 	.word	0x0800208d
 8001d40:	0800208d 	.word	0x0800208d
 8001d44:	0800208d 	.word	0x0800208d
 8001d48:	0800208d 	.word	0x0800208d
 8001d4c:	0800208d 	.word	0x0800208d
 8001d50:	08001fbd 	.word	0x08001fbd
 8001d54:	0800208d 	.word	0x0800208d
 8001d58:	0800208d 	.word	0x0800208d
 8001d5c:	0800208d 	.word	0x0800208d
 8001d60:	0800208d 	.word	0x0800208d
 8001d64:	0800208d 	.word	0x0800208d
 8001d68:	0800208d 	.word	0x0800208d
 8001d6c:	0800208d 	.word	0x0800208d
 8001d70:	0800208d 	.word	0x0800208d
 8001d74:	0800208d 	.word	0x0800208d
 8001d78:	0800208d 	.word	0x0800208d
 8001d7c:	0800208d 	.word	0x0800208d
 8001d80:	0800208d 	.word	0x0800208d
 8001d84:	0800208d 	.word	0x0800208d
 8001d88:	0800208d 	.word	0x0800208d
 8001d8c:	0800208d 	.word	0x0800208d
 8001d90:	08002045 	.word	0x08002045
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 8001d94:	23ff      	movs	r3, #255	; 0xff
 8001d96:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f103 0018 	add.w	r0, r3, #24
 8001d9e:	f107 020b 	add.w	r2, r7, #11
 8001da2:	2301      	movs	r3, #1
 8001da4:	f245 0101 	movw	r1, #20481	; 0x5001
 8001da8:	f000 fe24 	bl	80029f4 <ov5640_write_reg>
 8001dac:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10c      	bne.n	8001dce <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 8001db4:	2318      	movs	r3, #24
 8001db6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f103 0018 	add.w	r0, r3, #24
 8001dbe:	f107 020b 	add.w	r2, r7, #11
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001dc8:	f000 fe14 	bl	80029f4 <ov5640_write_reg>
 8001dcc:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10c      	bne.n	8001dee <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 8001dd4:	23a0      	movs	r3, #160	; 0xa0
 8001dd6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f103 0018 	add.w	r0, r3, #24
 8001dde:	f107 020b 	add.w	r2, r7, #11
 8001de2:	2301      	movs	r3, #1
 8001de4:	f245 5183 	movw	r1, #21891	; 0x5583
 8001de8:	f000 fe04 	bl	80029f4 <ov5640_write_reg>
 8001dec:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10c      	bne.n	8001e0e <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 8001df4:	2340      	movs	r3, #64	; 0x40
 8001df6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f103 0018 	add.w	r0, r3, #24
 8001dfe:	f107 020b 	add.w	r2, r7, #11
 8001e02:	2301      	movs	r3, #1
 8001e04:	f245 5184 	movw	r1, #21892	; 0x5584
 8001e08:	f000 fdf4 	bl	80029f4 <ov5640_write_reg>
 8001e0c:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 815f 	beq.w	80020d4 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e1a:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001e1c:	e15a      	b.n	80020d4 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 8001e1e:	23ff      	movs	r3, #255	; 0xff
 8001e20:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f103 0018 	add.w	r0, r3, #24
 8001e28:	f107 020b 	add.w	r2, r7, #11
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f245 0101 	movw	r1, #20481	; 0x5001
 8001e32:	f000 fddf 	bl	80029f4 <ov5640_write_reg>
 8001e36:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10c      	bne.n	8001e58 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 8001e3e:	2318      	movs	r3, #24
 8001e40:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f103 0018 	add.w	r0, r3, #24
 8001e48:	f107 020b 	add.w	r2, r7, #11
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001e52:	f000 fdcf 	bl	80029f4 <ov5640_write_reg>
 8001e56:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10c      	bne.n	8001e78 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f103 0018 	add.w	r0, r3, #24
 8001e68:	f107 020b 	add.w	r2, r7, #11
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f245 5183 	movw	r1, #21891	; 0x5583
 8001e72:	f000 fdbf 	bl	80029f4 <ov5640_write_reg>
 8001e76:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10c      	bne.n	8001e98 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 8001e7e:	23c0      	movs	r3, #192	; 0xc0
 8001e80:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f103 0018 	add.w	r0, r3, #24
 8001e88:	f107 020b 	add.w	r2, r7, #11
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f245 5184 	movw	r1, #21892	; 0x5584
 8001e92:	f000 fdaf 	bl	80029f4 <ov5640_write_reg>
 8001e96:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 811c 	beq.w	80020d8 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 8001ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ea4:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001ea6:	e117      	b.n	80020d8 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 8001ea8:	23ff      	movs	r3, #255	; 0xff
 8001eaa:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f103 0018 	add.w	r0, r3, #24
 8001eb2:	f107 020b 	add.w	r2, r7, #11
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f245 0101 	movw	r1, #20481	; 0x5001
 8001ebc:	f000 fd9a 	bl	80029f4 <ov5640_write_reg>
 8001ec0:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10c      	bne.n	8001ee2 <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 8001ec8:	2318      	movs	r3, #24
 8001eca:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f103 0018 	add.w	r0, r3, #24
 8001ed2:	f107 020b 	add.w	r2, r7, #11
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001edc:	f000 fd8a 	bl	80029f4 <ov5640_write_reg>
 8001ee0:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10c      	bne.n	8001f02 <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 8001ee8:	2360      	movs	r3, #96	; 0x60
 8001eea:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f103 0018 	add.w	r0, r3, #24
 8001ef2:	f107 020b 	add.w	r2, r7, #11
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	f245 5183 	movw	r1, #21891	; 0x5583
 8001efc:	f000 fd7a 	bl	80029f4 <ov5640_write_reg>
 8001f00:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10c      	bne.n	8001f22 <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 8001f08:	2360      	movs	r3, #96	; 0x60
 8001f0a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f103 0018 	add.w	r0, r3, #24
 8001f12:	f107 020b 	add.w	r2, r7, #11
 8001f16:	2301      	movs	r3, #1
 8001f18:	f245 5184 	movw	r1, #21892	; 0x5584
 8001f1c:	f000 fd6a 	bl	80029f4 <ov5640_write_reg>
 8001f20:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80d9 	beq.w	80020dc <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f2e:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001f30:	e0d4      	b.n	80020dc <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 8001f32:	23ff      	movs	r3, #255	; 0xff
 8001f34:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f103 0018 	add.w	r0, r3, #24
 8001f3c:	f107 020b 	add.w	r2, r7, #11
 8001f40:	2301      	movs	r3, #1
 8001f42:	f245 0101 	movw	r1, #20481	; 0x5001
 8001f46:	f000 fd55 	bl	80029f4 <ov5640_write_reg>
 8001f4a:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10c      	bne.n	8001f6c <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 8001f52:	2318      	movs	r3, #24
 8001f54:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f103 0018 	add.w	r0, r3, #24
 8001f5c:	f107 020b 	add.w	r2, r7, #11
 8001f60:	2301      	movs	r3, #1
 8001f62:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001f66:	f000 fd45 	bl	80029f4 <ov5640_write_reg>
 8001f6a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f103 0018 	add.w	r0, r3, #24
 8001f7c:	f107 020b 	add.w	r2, r7, #11
 8001f80:	2301      	movs	r3, #1
 8001f82:	f245 5183 	movw	r1, #21891	; 0x5583
 8001f86:	f000 fd35 	bl	80029f4 <ov5640_write_reg>
 8001f8a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10c      	bne.n	8001fac <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f103 0018 	add.w	r0, r3, #24
 8001f9c:	f107 020b 	add.w	r2, r7, #11
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f245 5184 	movw	r1, #21892	; 0x5584
 8001fa6:	f000 fd25 	bl	80029f4 <ov5640_write_reg>
 8001faa:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8096 	beq.w	80020e0 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8001fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fb8:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001fba:	e091      	b.n	80020e0 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 8001fbc:	23ff      	movs	r3, #255	; 0xff
 8001fbe:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f103 0018 	add.w	r0, r3, #24
 8001fc6:	f107 020b 	add.w	r2, r7, #11
 8001fca:	2301      	movs	r3, #1
 8001fcc:	f245 0101 	movw	r1, #20481	; 0x5001
 8001fd0:	f000 fd10 	bl	80029f4 <ov5640_write_reg>
 8001fd4:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10c      	bne.n	8001ff6 <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 8001fdc:	2318      	movs	r3, #24
 8001fde:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f103 0018 	add.w	r0, r3, #24
 8001fe6:	f107 020b 	add.w	r2, r7, #11
 8001fea:	2301      	movs	r3, #1
 8001fec:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8001ff0:	f000 fd00 	bl	80029f4 <ov5640_write_reg>
 8001ff4:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10c      	bne.n	8002016 <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 8001ffc:	2340      	movs	r3, #64	; 0x40
 8001ffe:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f103 0018 	add.w	r0, r3, #24
 8002006:	f107 020b 	add.w	r2, r7, #11
 800200a:	2301      	movs	r3, #1
 800200c:	f245 5183 	movw	r1, #21891	; 0x5583
 8002010:	f000 fcf0 	bl	80029f4 <ov5640_write_reg>
 8002014:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10c      	bne.n	8002036 <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 800201c:	23a0      	movs	r3, #160	; 0xa0
 800201e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f103 0018 	add.w	r0, r3, #24
 8002026:	f107 020b 	add.w	r2, r7, #11
 800202a:	2301      	movs	r3, #1
 800202c:	f245 5184 	movw	r1, #21892	; 0x5584
 8002030:	f000 fce0 	bl	80029f4 <ov5640_write_reg>
 8002034:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d053      	beq.n	80020e4 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 800203c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002040:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002042:	e04f      	b.n	80020e4 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 8002044:	23ff      	movs	r3, #255	; 0xff
 8002046:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f103 0018 	add.w	r0, r3, #24
 800204e:	f107 020b 	add.w	r2, r7, #11
 8002052:	2301      	movs	r3, #1
 8002054:	f245 0101 	movw	r1, #20481	; 0x5001
 8002058:	f000 fccc 	bl	80029f4 <ov5640_write_reg>
 800205c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10c      	bne.n	800207e <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 8002064:	2340      	movs	r3, #64	; 0x40
 8002066:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f103 0018 	add.w	r0, r3, #24
 800206e:	f107 020b 	add.w	r2, r7, #11
 8002072:	2301      	movs	r3, #1
 8002074:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002078:	f000 fcbc 	bl	80029f4 <ov5640_write_reg>
 800207c:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d031      	beq.n	80020e8 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 8002084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002088:	60fb      	str	r3, [r7, #12]
      }
      break;
 800208a:	e02d      	b.n	80020e8 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 800208c:	237f      	movs	r3, #127	; 0x7f
 800208e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f103 0018 	add.w	r0, r3, #24
 8002096:	f107 020b 	add.w	r2, r7, #11
 800209a:	2301      	movs	r3, #1
 800209c:	f245 0101 	movw	r1, #20481	; 0x5001
 80020a0:	f000 fca8 	bl	80029f4 <ov5640_write_reg>
 80020a4:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10c      	bne.n	80020c6 <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 80020ac:	2300      	movs	r3, #0
 80020ae:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f103 0018 	add.w	r0, r3, #24
 80020b6:	f107 020b 	add.w	r2, r7, #11
 80020ba:	2301      	movs	r3, #1
 80020bc:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80020c0:	f000 fc98 	bl	80029f4 <ov5640_write_reg>
 80020c4:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00f      	beq.n	80020ec <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 80020cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020d0:	60fb      	str	r3, [r7, #12]
      }

      break;
 80020d2:	e00b      	b.n	80020ec <OV5640_SetColorEffect+0x3f4>
      break;
 80020d4:	bf00      	nop
 80020d6:	e00a      	b.n	80020ee <OV5640_SetColorEffect+0x3f6>
      break;
 80020d8:	bf00      	nop
 80020da:	e008      	b.n	80020ee <OV5640_SetColorEffect+0x3f6>
      break;
 80020dc:	bf00      	nop
 80020de:	e006      	b.n	80020ee <OV5640_SetColorEffect+0x3f6>
      break;
 80020e0:	bf00      	nop
 80020e2:	e004      	b.n	80020ee <OV5640_SetColorEffect+0x3f6>
      break;
 80020e4:	bf00      	nop
 80020e6:	e002      	b.n	80020ee <OV5640_SetColorEffect+0x3f6>
      break;
 80020e8:	bf00      	nop
 80020ea:	e000      	b.n	80020ee <OV5640_SetColorEffect+0x3f6>
      break;
 80020ec:	bf00      	nop
  }

  return ret;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8002102:	4a34      	ldr	r2, [pc, #208]	; (80021d4 <OV5640_SetBrightness+0xdc>)
 8002104:	f107 0310 	add.w	r3, r7, #16
 8002108:	ca07      	ldmia	r2, {r0, r1, r2}
 800210a:	c303      	stmia	r3!, {r0, r1}
 800210c:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800210e:	23ff      	movs	r3, #255	; 0xff
 8002110:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f103 0018 	add.w	r0, r3, #24
 8002118:	f107 020f 	add.w	r2, r7, #15
 800211c:	2301      	movs	r3, #1
 800211e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002122:	f000 fc67 	bl	80029f4 <ov5640_write_reg>
 8002126:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d111      	bne.n	8002152 <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	3304      	adds	r3, #4
 8002132:	3320      	adds	r3, #32
 8002134:	443b      	add	r3, r7
 8002136:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800213a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f103 0018 	add.w	r0, r3, #24
 8002142:	f107 020f 	add.w	r2, r7, #15
 8002146:	2301      	movs	r3, #1
 8002148:	f245 5187 	movw	r1, #21895	; 0x5587
 800214c:	f000 fc52 	bl	80029f4 <ov5640_write_reg>
 8002150:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10c      	bne.n	8002172 <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 8002158:	2304      	movs	r3, #4
 800215a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f103 0018 	add.w	r0, r3, #24
 8002162:	f107 020f 	add.w	r2, r7, #15
 8002166:	2301      	movs	r3, #1
 8002168:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800216c:	f000 fc42 	bl	80029f4 <ov5640_write_reg>
 8002170:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d127      	bne.n	80021c8 <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	da12      	bge.n	80021a4 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 800217e:	2301      	movs	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f103 0018 	add.w	r0, r3, #24
 8002188:	f107 020f 	add.w	r2, r7, #15
 800218c:	2301      	movs	r3, #1
 800218e:	f245 5188 	movw	r1, #21896	; 0x5588
 8002192:	f000 fc2f 	bl	80029f4 <ov5640_write_reg>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d015      	beq.n	80021c8 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 800219c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	e011      	b.n	80021c8 <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 80021a4:	2309      	movs	r3, #9
 80021a6:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f103 0018 	add.w	r0, r3, #24
 80021ae:	f107 020f 	add.w	r2, r7, #15
 80021b2:	2301      	movs	r3, #1
 80021b4:	f245 5188 	movw	r1, #21896	; 0x5588
 80021b8:	f000 fc1c 	bl	80029f4 <ov5640_write_reg>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021c6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 80021c8:	69fb      	ldr	r3, [r7, #28]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3720      	adds	r7, #32
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	08010fec 	.word	0x08010fec

080021d8 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80021e2:	4a30      	ldr	r2, [pc, #192]	; (80022a4 <OV5640_SetSaturation+0xcc>)
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80021ea:	c303      	stmia	r3!, {r0, r1}
 80021ec:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80021ee:	23ff      	movs	r3, #255	; 0xff
 80021f0:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f103 0018 	add.w	r0, r3, #24
 80021f8:	f107 020f 	add.w	r2, r7, #15
 80021fc:	2301      	movs	r3, #1
 80021fe:	f245 0101 	movw	r1, #20481	; 0x5001
 8002202:	f000 fbf7 	bl	80029f4 <ov5640_write_reg>
 8002206:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d111      	bne.n	8002232 <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	3304      	adds	r3, #4
 8002212:	3320      	adds	r3, #32
 8002214:	443b      	add	r3, r7
 8002216:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800221a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f103 0018 	add.w	r0, r3, #24
 8002222:	f107 020f 	add.w	r2, r7, #15
 8002226:	2301      	movs	r3, #1
 8002228:	f245 5183 	movw	r1, #21891	; 0x5583
 800222c:	f000 fbe2 	bl	80029f4 <ov5640_write_reg>
 8002230:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f103 0018 	add.w	r0, r3, #24
 800223e:	f107 020f 	add.w	r2, r7, #15
 8002242:	2301      	movs	r3, #1
 8002244:	f245 5184 	movw	r1, #21892	; 0x5584
 8002248:	f000 fbd4 	bl	80029f4 <ov5640_write_reg>
 800224c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10c      	bne.n	800226e <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 8002254:	2302      	movs	r3, #2
 8002256:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f103 0018 	add.w	r0, r3, #24
 800225e:	f107 020f 	add.w	r2, r7, #15
 8002262:	2301      	movs	r3, #1
 8002264:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002268:	f000 fbc4 	bl	80029f4 <ov5640_write_reg>
 800226c:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10c      	bne.n	800228e <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 8002274:	2341      	movs	r3, #65	; 0x41
 8002276:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f103 0018 	add.w	r0, r3, #24
 800227e:	f107 020f 	add.w	r2, r7, #15
 8002282:	2301      	movs	r3, #1
 8002284:	f245 5188 	movw	r1, #21896	; 0x5588
 8002288:	f000 fbb4 	bl	80029f4 <ov5640_write_reg>
 800228c:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 8002294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002298:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800229a:	69fb      	ldr	r3, [r7, #28]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3720      	adds	r7, #32
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	08010ff8 	.word	0x08010ff8

080022a8 <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 80022b2:	4a30      	ldr	r2, [pc, #192]	; (8002374 <OV5640_SetContrast+0xcc>)
 80022b4:	f107 0310 	add.w	r3, r7, #16
 80022b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80022ba:	c303      	stmia	r3!, {r0, r1}
 80022bc:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80022be:	23ff      	movs	r3, #255	; 0xff
 80022c0:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f103 0018 	add.w	r0, r3, #24
 80022c8:	f107 020f 	add.w	r2, r7, #15
 80022cc:	2301      	movs	r3, #1
 80022ce:	f245 0101 	movw	r1, #20481	; 0x5001
 80022d2:	f000 fb8f 	bl	80029f4 <ov5640_write_reg>
 80022d6:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10c      	bne.n	80022f8 <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 80022de:	2304      	movs	r3, #4
 80022e0:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f103 0018 	add.w	r0, r3, #24
 80022e8:	f107 020f 	add.w	r2, r7, #15
 80022ec:	2301      	movs	r3, #1
 80022ee:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80022f2:	f000 fb7f 	bl	80029f4 <ov5640_write_reg>
 80022f6:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d111      	bne.n	8002322 <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	3304      	adds	r3, #4
 8002302:	3320      	adds	r3, #32
 8002304:	443b      	add	r3, r7
 8002306:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800230a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f103 0018 	add.w	r0, r3, #24
 8002312:	f107 020f 	add.w	r2, r7, #15
 8002316:	2301      	movs	r3, #1
 8002318:	f245 5186 	movw	r1, #21894	; 0x5586
 800231c:	f000 fb6a 	bl	80029f4 <ov5640_write_reg>
 8002320:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10a      	bne.n	800233e <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f103 0018 	add.w	r0, r3, #24
 800232e:	f107 020f 	add.w	r2, r7, #15
 8002332:	2301      	movs	r3, #1
 8002334:	f245 5185 	movw	r1, #21893	; 0x5585
 8002338:	f000 fb5c 	bl	80029f4 <ov5640_write_reg>
 800233c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10c      	bne.n	800235e <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 8002344:	2341      	movs	r3, #65	; 0x41
 8002346:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f103 0018 	add.w	r0, r3, #24
 800234e:	f107 020f 	add.w	r2, r7, #15
 8002352:	2301      	movs	r3, #1
 8002354:	f245 5188 	movw	r1, #21896	; 0x5588
 8002358:	f000 fb4c 	bl	80029f4 <ov5640_write_reg>
 800235c:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 8002364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002368:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800236a:	69fb      	ldr	r3, [r7, #28]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3720      	adds	r7, #32
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	08011004 	.word	0x08011004

08002378 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08e      	sub	sp, #56	; 0x38
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8002382:	4a3c      	ldr	r2, [pc, #240]	; (8002474 <OV5640_SetHueDegree+0xfc>)
 8002384:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002388:	ca07      	ldmia	r2, {r0, r1, r2}
 800238a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 800238e:	4a3a      	ldr	r2, [pc, #232]	; (8002478 <OV5640_SetHueDegree+0x100>)
 8002390:	f107 031c 	add.w	r3, r7, #28
 8002394:	ca07      	ldmia	r2, {r0, r1, r2}
 8002396:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 800239a:	4a38      	ldr	r2, [pc, #224]	; (800247c <OV5640_SetHueDegree+0x104>)
 800239c:	f107 0310 	add.w	r3, r7, #16
 80023a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80023a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 80023a6:	23ff      	movs	r3, #255	; 0xff
 80023a8:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f103 0018 	add.w	r0, r3, #24
 80023b0:	f107 020f 	add.w	r2, r7, #15
 80023b4:	2301      	movs	r3, #1
 80023b6:	f245 0101 	movw	r1, #20481	; 0x5001
 80023ba:	f000 fb1b 	bl	80029f4 <ov5640_write_reg>
 80023be:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 80023c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10c      	bne.n	80023e0 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f103 0018 	add.w	r0, r3, #24
 80023d0:	f107 020f 	add.w	r2, r7, #15
 80023d4:	2301      	movs	r3, #1
 80023d6:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80023da:	f000 fb0b 	bl	80029f4 <ov5640_write_reg>
 80023de:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 80023e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d111      	bne.n	800240a <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	3306      	adds	r3, #6
 80023ea:	3338      	adds	r3, #56	; 0x38
 80023ec:	443b      	add	r3, r7
 80023ee:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80023f2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f103 0018 	add.w	r0, r3, #24
 80023fa:	f107 020f 	add.w	r2, r7, #15
 80023fe:	2301      	movs	r3, #1
 8002400:	f245 5181 	movw	r1, #21889	; 0x5581
 8002404:	f000 faf6 	bl	80029f4 <ov5640_write_reg>
 8002408:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 800240a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240c:	2b00      	cmp	r3, #0
 800240e:	d111      	bne.n	8002434 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	3306      	adds	r3, #6
 8002414:	3338      	adds	r3, #56	; 0x38
 8002416:	443b      	add	r3, r7
 8002418:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800241c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f103 0018 	add.w	r0, r3, #24
 8002424:	f107 020f 	add.w	r2, r7, #15
 8002428:	2301      	movs	r3, #1
 800242a:	f245 5182 	movw	r1, #21890	; 0x5582
 800242e:	f000 fae1 	bl	80029f4 <ov5640_write_reg>
 8002432:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002436:	2b00      	cmp	r3, #0
 8002438:	d111      	bne.n	800245e <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	3306      	adds	r3, #6
 800243e:	3338      	adds	r3, #56	; 0x38
 8002440:	443b      	add	r3, r7
 8002442:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002446:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f103 0018 	add.w	r0, r3, #24
 800244e:	f107 020f 	add.w	r2, r7, #15
 8002452:	2301      	movs	r3, #1
 8002454:	f245 5188 	movw	r1, #21896	; 0x5588
 8002458:	f000 facc 	bl	80029f4 <ov5640_write_reg>
 800245c:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 800245e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 8002464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002468:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 800246a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800246c:	4618      	mov	r0, r3
 800246e:	3738      	adds	r7, #56	; 0x38
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	08011010 	.word	0x08011010
 8002478:	0801101c 	.word	0x0801101c
 800247c:	08011028 	.word	0x08011028

08002480 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f103 0018 	add.w	r0, r3, #24
 8002494:	f107 020b 	add.w	r2, r7, #11
 8002498:	2301      	movs	r3, #1
 800249a:	f643 0120 	movw	r1, #14368	; 0x3820
 800249e:	f000 fa92 	bl	80029c6 <ov5640_read_reg>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	e0cb      	b.n	8002648 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 80024b0:	7afb      	ldrb	r3, [r7, #11]
 80024b2:	f023 0306 	bic.w	r3, r3, #6
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f103 0018 	add.w	r0, r3, #24
 80024c0:	f107 020a 	add.w	r2, r7, #10
 80024c4:	2301      	movs	r3, #1
 80024c6:	f643 0121 	movw	r1, #14369	; 0x3821
 80024ca:	f000 fa7c 	bl	80029c6 <ov5640_read_reg>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 80024d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	e0b5      	b.n	8002648 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 80024e0:	7abb      	ldrb	r3, [r7, #10]
 80024e2:	f023 0306 	bic.w	r3, r3, #6
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d056      	beq.n	800259e <OV5640_MirrorFlipConfig+0x11e>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d87f      	bhi.n	80025f6 <OV5640_MirrorFlipConfig+0x176>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d029      	beq.n	8002550 <OV5640_MirrorFlipConfig+0xd0>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d179      	bne.n	80025f6 <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f103 0018 	add.w	r0, r3, #24
 8002508:	f107 020b 	add.w	r2, r7, #11
 800250c:	2301      	movs	r3, #1
 800250e:	f643 0120 	movw	r1, #14368	; 0x3820
 8002512:	f000 fa6f 	bl	80029f4 <ov5640_write_reg>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 800251c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002520:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002522:	e08a      	b.n	800263a <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8002524:	7abb      	ldrb	r3, [r7, #10]
 8002526:	f043 0306 	orr.w	r3, r3, #6
 800252a:	b2db      	uxtb	r3, r3
 800252c:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f103 0018 	add.w	r0, r3, #24
 8002534:	f107 020a 	add.w	r2, r7, #10
 8002538:	2301      	movs	r3, #1
 800253a:	f643 0121 	movw	r1, #14369	; 0x3821
 800253e:	f000 fa59 	bl	80029f4 <ov5640_write_reg>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d078      	beq.n	800263a <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8002548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800254c:	60fb      	str	r3, [r7, #12]
          break;
 800254e:	e074      	b.n	800263a <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8002550:	7afb      	ldrb	r3, [r7, #11]
 8002552:	f043 0306 	orr.w	r3, r3, #6
 8002556:	b2db      	uxtb	r3, r3
 8002558:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f103 0018 	add.w	r0, r3, #24
 8002560:	f107 020b 	add.w	r2, r7, #11
 8002564:	2301      	movs	r3, #1
 8002566:	f643 0120 	movw	r1, #14368	; 0x3820
 800256a:	f000 fa43 	bl	80029f4 <ov5640_write_reg>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8002574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002578:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 800257a:	e060      	b.n	800263e <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f103 0018 	add.w	r0, r3, #24
 8002582:	f107 020a 	add.w	r2, r7, #10
 8002586:	2301      	movs	r3, #1
 8002588:	f643 0121 	movw	r1, #14369	; 0x3821
 800258c:	f000 fa32 	bl	80029f4 <ov5640_write_reg>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d053      	beq.n	800263e <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800259a:	60fb      	str	r3, [r7, #12]
          break;
 800259c:	e04f      	b.n	800263e <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 800259e:	7afb      	ldrb	r3, [r7, #11]
 80025a0:	f043 0306 	orr.w	r3, r3, #6
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f103 0018 	add.w	r0, r3, #24
 80025ae:	f107 020b 	add.w	r2, r7, #11
 80025b2:	2301      	movs	r3, #1
 80025b4:	f643 0120 	movw	r1, #14368	; 0x3820
 80025b8:	f000 fa1c 	bl	80029f4 <ov5640_write_reg>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 80025c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025c6:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80025c8:	e03b      	b.n	8002642 <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 80025ca:	7abb      	ldrb	r3, [r7, #10]
 80025cc:	f043 0306 	orr.w	r3, r3, #6
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f103 0018 	add.w	r0, r3, #24
 80025da:	f107 020a 	add.w	r2, r7, #10
 80025de:	2301      	movs	r3, #1
 80025e0:	f643 0121 	movw	r1, #14369	; 0x3821
 80025e4:	f000 fa06 	bl	80029f4 <ov5640_write_reg>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d029      	beq.n	8002642 <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025f2:	60fb      	str	r3, [r7, #12]
          break;
 80025f4:	e025      	b.n	8002642 <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f103 0018 	add.w	r0, r3, #24
 80025fc:	f107 020b 	add.w	r2, r7, #11
 8002600:	2301      	movs	r3, #1
 8002602:	f643 0120 	movw	r1, #14368	; 0x3820
 8002606:	f000 f9f5 	bl	80029f4 <ov5640_write_reg>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8002610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002614:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002616:	e016      	b.n	8002646 <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f103 0018 	add.w	r0, r3, #24
 800261e:	f107 020a 	add.w	r2, r7, #10
 8002622:	2301      	movs	r3, #1
 8002624:	f643 0121 	movw	r1, #14369	; 0x3821
 8002628:	f000 f9e4 	bl	80029f4 <ov5640_write_reg>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d009      	beq.n	8002646 <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 8002632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002636:	60fb      	str	r3, [r7, #12]
          break;
 8002638:	e005      	b.n	8002646 <OV5640_MirrorFlipConfig+0x1c6>
          break;
 800263a:	bf00      	nop
 800263c:	e004      	b.n	8002648 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 800263e:	bf00      	nop
 8002640:	e002      	b.n	8002648 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002642:	bf00      	nop
 8002644:	e000      	b.n	8002648 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002646:	bf00      	nop
      }
    }
  }

  return ret;
 8002648:	68fb      	ldr	r3, [r7, #12]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8002660:	f107 030c 	add.w	r3, r7, #12
 8002664:	4619      	mov	r1, r3
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff f8a2 	bl	80017b0 <OV5640_GetResolution>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 8002672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	e04e      	b.n	8002718 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	2b44      	cmp	r3, #68	; 0x44
 8002682:	d112      	bne.n	80026aa <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 8002684:	2310      	movs	r3, #16
 8002686:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f103 0018 	add.w	r0, r3, #24
 800268e:	f107 020b 	add.w	r2, r7, #11
 8002692:	2301      	movs	r3, #1
 8002694:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002698:	f000 f9ac 	bl	80029f4 <ov5640_write_reg>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d03a      	beq.n	8002718 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 80026a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	e036      	b.n	8002718 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d802      	bhi.n	80026b6 <OV5640_ZoomConfig+0x64>
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d103      	bne.n	80026bc <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 80026b4:	e00a      	b.n	80026cc <OV5640_ZoomConfig+0x7a>
      switch (res)
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d004      	beq.n	80026c4 <OV5640_ZoomConfig+0x72>
          break;
 80026ba:	e007      	b.n	80026cc <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	085b      	lsrs	r3, r3, #1
 80026c0:	613b      	str	r3, [r7, #16]
          break;
 80026c2:	e003      	b.n	80026cc <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	089b      	lsrs	r3, r3, #2
 80026c8:	613b      	str	r3, [r7, #16]
          break;
 80026ca:	bf00      	nop
      }

      tmp = 0x00;
 80026cc:	2300      	movs	r3, #0
 80026ce:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f103 0018 	add.w	r0, r3, #24
 80026d6:	f107 020b 	add.w	r2, r7, #11
 80026da:	2301      	movs	r3, #1
 80026dc:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 80026e0:	f000 f988 	bl	80029f4 <ov5640_write_reg>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	e012      	b.n	8002718 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f103 0018 	add.w	r0, r3, #24
 80026fe:	f107 020b 	add.w	r2, r7, #11
 8002702:	2301      	movs	r3, #1
 8002704:	f245 6101 	movw	r1, #22017	; 0x5601
 8002708:	f000 f974 	bl	80029f4 <ov5640_write_reg>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 8002712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002716:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002718:	697b      	ldr	r3, [r7, #20]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b01      	cmp	r3, #1
 8002734:	f040 80ce 	bne.w	80028d4 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f103 0018 	add.w	r0, r3, #24
 800273e:	f107 020b 	add.w	r2, r7, #11
 8002742:	2301      	movs	r3, #1
 8002744:	f243 0138 	movw	r1, #12344	; 0x3038
 8002748:	f000 f954 	bl	80029f4 <ov5640_write_reg>
 800274c:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f103 0018 	add.w	r0, r3, #24
 800275a:	f107 020b 	add.w	r2, r7, #11
 800275e:	2301      	movs	r3, #1
 8002760:	f243 0139 	movw	r1, #12345	; 0x3039
 8002764:	f000 f946 	bl	80029f4 <ov5640_write_reg>
 8002768:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10c      	bne.n	800278a <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 8002770:	237c      	movs	r3, #124	; 0x7c
 8002772:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f103 0018 	add.w	r0, r3, #24
 800277a:	f107 020b 	add.w	r2, r7, #11
 800277e:	2301      	movs	r3, #1
 8002780:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002784:	f000 f936 	bl	80029f4 <ov5640_write_reg>
 8002788:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10c      	bne.n	80027aa <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 8002790:	2301      	movs	r3, #1
 8002792:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f103 0018 	add.w	r0, r3, #24
 800279a:	f107 020b 	add.w	r2, r7, #11
 800279e:	2301      	movs	r3, #1
 80027a0:	f643 2108 	movw	r1, #14856	; 0x3a08
 80027a4:	f000 f926 	bl	80029f4 <ov5640_write_reg>
 80027a8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10c      	bne.n	80027ca <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 80027b0:	2327      	movs	r3, #39	; 0x27
 80027b2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f103 0018 	add.w	r0, r3, #24
 80027ba:	f107 020b 	add.w	r2, r7, #11
 80027be:	2301      	movs	r3, #1
 80027c0:	f643 2109 	movw	r1, #14857	; 0x3a09
 80027c4:	f000 f916 	bl	80029f4 <ov5640_write_reg>
 80027c8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10c      	bne.n	80027ea <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 80027d0:	2300      	movs	r3, #0
 80027d2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f103 0018 	add.w	r0, r3, #24
 80027da:	f107 020b 	add.w	r2, r7, #11
 80027de:	2301      	movs	r3, #1
 80027e0:	f643 210a 	movw	r1, #14858	; 0x3a0a
 80027e4:	f000 f906 	bl	80029f4 <ov5640_write_reg>
 80027e8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10c      	bne.n	800280a <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 80027f0:	23f6      	movs	r3, #246	; 0xf6
 80027f2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f103 0018 	add.w	r0, r3, #24
 80027fa:	f107 020b 	add.w	r2, r7, #11
 80027fe:	2301      	movs	r3, #1
 8002800:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8002804:	f000 f8f6 	bl	80029f4 <ov5640_write_reg>
 8002808:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10c      	bne.n	800282a <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 8002810:	2304      	movs	r3, #4
 8002812:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f103 0018 	add.w	r0, r3, #24
 800281a:	f107 020b 	add.w	r2, r7, #11
 800281e:	2301      	movs	r3, #1
 8002820:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8002824:	f000 f8e6 	bl	80029f4 <ov5640_write_reg>
 8002828:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f103 0018 	add.w	r0, r3, #24
 8002836:	f107 020b 	add.w	r2, r7, #11
 800283a:	2301      	movs	r3, #1
 800283c:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8002840:	f000 f8d8 	bl	80029f4 <ov5640_write_reg>
 8002844:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10c      	bne.n	8002866 <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 800284c:	230b      	movs	r3, #11
 800284e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f103 0018 	add.w	r0, r3, #24
 8002856:	f107 020b 	add.w	r2, r7, #11
 800285a:	2301      	movs	r3, #1
 800285c:	f643 2102 	movw	r1, #14850	; 0x3a02
 8002860:	f000 f8c8 	bl	80029f4 <ov5640_write_reg>
 8002864:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10c      	bne.n	8002886 <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 800286c:	2388      	movs	r3, #136	; 0x88
 800286e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f103 0018 	add.w	r0, r3, #24
 8002876:	f107 020b 	add.w	r2, r7, #11
 800287a:	2301      	movs	r3, #1
 800287c:	f643 2103 	movw	r1, #14851	; 0x3a03
 8002880:	f000 f8b8 	bl	80029f4 <ov5640_write_reg>
 8002884:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10c      	bne.n	80028a6 <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 800288c:	230b      	movs	r3, #11
 800288e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f103 0018 	add.w	r0, r3, #24
 8002896:	f107 020b 	add.w	r2, r7, #11
 800289a:	2301      	movs	r3, #1
 800289c:	f643 2114 	movw	r1, #14868	; 0x3a14
 80028a0:	f000 f8a8 	bl	80029f4 <ov5640_write_reg>
 80028a4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10c      	bne.n	80028c6 <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 80028ac:	2388      	movs	r3, #136	; 0x88
 80028ae:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f103 0018 	add.w	r0, r3, #24
 80028b6:	f107 020b 	add.w	r2, r7, #11
 80028ba:	2301      	movs	r3, #1
 80028bc:	f643 2115 	movw	r1, #14869	; 0x3a15
 80028c0:	f000 f898 	bl	80029f4 <ov5640_write_reg>
 80028c4:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d02b      	beq.n	8002924 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 80028cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	e027      	b.n	8002924 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f103 0018 	add.w	r0, r3, #24
 80028da:	f107 020b 	add.w	r2, r7, #11
 80028de:	2301      	movs	r3, #1
 80028e0:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 80028e4:	f000 f86f 	bl	80029c6 <ov5640_read_reg>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e016      	b.n	8002924 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 80028fa:	7afb      	ldrb	r3, [r7, #11]
 80028fc:	f023 0304 	bic.w	r3, r3, #4
 8002900:	b2db      	uxtb	r3, r3
 8002902:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f103 0018 	add.w	r0, r3, #24
 800290a:	f107 020b 	add.w	r2, r7, #11
 800290e:	2301      	movs	r3, #1
 8002910:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002914:	f000 f86e 	bl	80029f4 <ov5640_write_reg>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 800291e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002922:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002924:	68fb      	ldr	r3, [r7, #12]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	4798      	blx	r3
 800293e:	4603      	mov	r3, r0
 8002940:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8002942:	bf00      	nop
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	4798      	blx	r3
 800294a:	4603      	mov	r3, r0
 800294c:	461a      	mov	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d8f5      	bhi.n	8002944 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002962:	b590      	push	{r4, r7, lr}
 8002964:	b087      	sub	sp, #28
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	461a      	mov	r2, r3
 800296e:	460b      	mov	r3, r1
 8002970:	817b      	strh	r3, [r7, #10]
 8002972:	4613      	mov	r3, r2
 8002974:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	691c      	ldr	r4, [r3, #16]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	8918      	ldrh	r0, [r3, #8]
 8002982:	893b      	ldrh	r3, [r7, #8]
 8002984:	8979      	ldrh	r1, [r7, #10]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	47a0      	blx	r4
 800298a:	4603      	mov	r3, r0
}
 800298c:	4618      	mov	r0, r3
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	bd90      	pop	{r4, r7, pc}

08002994 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002994:	b590      	push	{r4, r7, lr}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	461a      	mov	r2, r3
 80029a0:	460b      	mov	r3, r1
 80029a2:	817b      	strh	r3, [r7, #10]
 80029a4:	4613      	mov	r3, r2
 80029a6:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	68dc      	ldr	r4, [r3, #12]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	8918      	ldrh	r0, [r3, #8]
 80029b4:	893b      	ldrh	r3, [r7, #8]
 80029b6:	8979      	ldrh	r1, [r7, #10]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	47a0      	blx	r4
 80029bc:	4603      	mov	r3, r0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	371c      	adds	r7, #28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd90      	pop	{r4, r7, pc}

080029c6 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80029c6:	b590      	push	{r4, r7, lr}
 80029c8:	b085      	sub	sp, #20
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	60f8      	str	r0, [r7, #12]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	461a      	mov	r2, r3
 80029d2:	460b      	mov	r3, r1
 80029d4:	817b      	strh	r3, [r7, #10]
 80029d6:	4613      	mov	r3, r2
 80029d8:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	685c      	ldr	r4, [r3, #4]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6898      	ldr	r0, [r3, #8]
 80029e2:	893b      	ldrh	r3, [r7, #8]
 80029e4:	8979      	ldrh	r1, [r7, #10]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	47a0      	blx	r4
 80029ea:	4603      	mov	r3, r0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd90      	pop	{r4, r7, pc}

080029f4 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	461a      	mov	r2, r3
 8002a00:	460b      	mov	r3, r1
 8002a02:	817b      	strh	r3, [r7, #10]
 8002a04:	4613      	mov	r3, r2
 8002a06:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681c      	ldr	r4, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6898      	ldr	r0, [r3, #8]
 8002a10:	893b      	ldrh	r3, [r7, #8]
 8002a12:	8979      	ldrh	r1, [r7, #10]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	47a0      	blx	r4
 8002a18:	4603      	mov	r3, r0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd90      	pop	{r4, r7, pc}
	...

08002a24 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002a2c:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <RetargetInit+0x28>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002a32:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <RetargetInit+0x2c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6898      	ldr	r0, [r3, #8]
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	f00d fa71 	bl	800ff24 <setvbuf>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	2405fdc0 	.word	0x2405fdc0
 8002a50:	24000054 	.word	0x24000054

08002a54 <_isatty>:

int _isatty(int fd) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	db04      	blt.n	8002a6c <_isatty+0x18>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	dc01      	bgt.n	8002a6c <_isatty+0x18>
    return 1;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e005      	b.n	8002a78 <_isatty+0x24>

  errno = EBADF;
 8002a6c:	f00d f99a 	bl	800fda4 <__errno>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2209      	movs	r2, #9
 8002a74:	601a      	str	r2, [r3, #0]
  return 0;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <_write>:

int _write(int fd, char* ptr, int len) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d002      	beq.n	8002a98 <_write+0x18>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d111      	bne.n	8002abc <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002a98:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <_write+0x54>)
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	f00b fa65 	bl	800df74 <HAL_UART_Transmit>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002aae:	7dfb      	ldrb	r3, [r7, #23]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <_write+0x38>
      return len;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	e008      	b.n	8002aca <_write+0x4a>
    else
      return EIO;
 8002ab8:	2305      	movs	r3, #5
 8002aba:	e006      	b.n	8002aca <_write+0x4a>
  }
  errno = EBADF;
 8002abc:	f00d f972 	bl	800fda4 <__errno>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2209      	movs	r2, #9
 8002ac4:	601a      	str	r2, [r3, #0]
  return -1;
 8002ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	2405fdc0 	.word	0x2405fdc0

08002ad8 <_close>:

int _close(int fd) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	db04      	blt.n	8002af0 <_close+0x18>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	dc01      	bgt.n	8002af0 <_close+0x18>
    return 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e006      	b.n	8002afe <_close+0x26>

  errno = EBADF;
 8002af0:	f00d f958 	bl	800fda4 <__errno>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2209      	movs	r2, #9
 8002af8:	601a      	str	r2, [r3, #0]
  return -1;
 8002afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <_read>:

int _read(int fd, char* ptr, int len) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d110      	bne.n	8002b3c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <_read+0x4c>)
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b22:	2201      	movs	r2, #1
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	f00b fab3 	bl	800e090 <HAL_UART_Receive>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002b2e:	7dfb      	ldrb	r3, [r7, #23]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <_read+0x30>
      return 1;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e008      	b.n	8002b4a <_read+0x42>
    else
      return EIO;
 8002b38:	2305      	movs	r3, #5
 8002b3a:	e006      	b.n	8002b4a <_read+0x42>
  }
  errno = EBADF;
 8002b3c:	f00d f932 	bl	800fda4 <__errno>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2209      	movs	r2, #9
 8002b44:	601a      	str	r2, [r3, #0]
  return -1;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	2405fdc0 	.word	0x2405fdc0

08002b58 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	db08      	blt.n	8002b7a <_fstat+0x22>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	dc05      	bgt.n	8002b7a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b74:	605a      	str	r2, [r3, #4]
    return 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e005      	b.n	8002b86 <_fstat+0x2e>
  }

  errno = EBADF;
 8002b7a:	f00d f913 	bl	800fda4 <__errno>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2209      	movs	r2, #9
 8002b82:	601a      	str	r2, [r3, #0]
  return 0;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8002b9a:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <BSP_I2C4_Init+0x64>)
 8002b9c:	4a16      	ldr	r2, [pc, #88]	; (8002bf8 <BSP_I2C4_Init+0x68>)
 8002b9e:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8002ba0:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <BSP_I2C4_Init+0x6c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d11f      	bne.n	8002be8 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8002ba8:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <BSP_I2C4_Init+0x6c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3301      	adds	r3, #1
 8002bae:	4a13      	ldr	r2, [pc, #76]	; (8002bfc <BSP_I2C4_Init+0x6c>)
 8002bb0:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8002bb2:	4810      	ldr	r0, [pc, #64]	; (8002bf4 <BSP_I2C4_Init+0x64>)
 8002bb4:	f006 fd65 	bl	8009682 <HAL_I2C_GetState>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d114      	bne.n	8002be8 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8002bbe:	480d      	ldr	r0, [pc, #52]	; (8002bf4 <BSP_I2C4_Init+0x64>)
 8002bc0:	f000 fb60 	bl	8003284 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8002bc4:	f009 fa72 	bl	800c0ac <HAL_RCC_GetPCLK2Freq>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	490d      	ldr	r1, [pc, #52]	; (8002c00 <BSP_I2C4_Init+0x70>)
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f8e3 	bl	8002d98 <I2C_GetTiming>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4807      	ldr	r0, [pc, #28]	; (8002bf4 <BSP_I2C4_Init+0x64>)
 8002bd8:	f000 f838 	bl	8002c4c <MX_I2C4_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002be2:	f06f 0307 	mvn.w	r3, #7
 8002be6:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8002be8:	687b      	ldr	r3, [r7, #4]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	240607cc 	.word	0x240607cc
 8002bf8:	58001c00 	.word	0x58001c00
 8002bfc:	2405fdc4 	.word	0x2405fdc4
 8002c00:	000186a0 	.word	0x000186a0

08002c04 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <BSP_I2C4_DeInit+0x40>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	4a0b      	ldr	r2, [pc, #44]	; (8002c44 <BSP_I2C4_DeInit+0x40>)
 8002c16:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <BSP_I2C4_DeInit+0x40>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10b      	bne.n	8002c38 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8002c20:	4809      	ldr	r0, [pc, #36]	; (8002c48 <BSP_I2C4_DeInit+0x44>)
 8002c22:	f000 fb9b 	bl	800335c <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8002c26:	4808      	ldr	r0, [pc, #32]	; (8002c48 <BSP_I2C4_DeInit+0x44>)
 8002c28:	f006 fa12 	bl	8009050 <HAL_I2C_DeInit>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8002c32:	f06f 0307 	mvn.w	r3, #7
 8002c36:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8002c38:	687b      	ldr	r3, [r7, #4]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	2405fdc4 	.word	0x2405fdc4
 8002c48:	240607cc 	.word	0x240607cc

08002c4c <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f006 f950 	bl	8008f30 <HAL_I2C_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
 8002c9a:	e014      	b.n	8002cc6 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8002ca0:	68b9      	ldr	r1, [r7, #8]
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f007 fd84 	bl	800a7b0 <HAL_I2CEx_ConfigAnalogFilter>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	73fb      	strb	r3, [r7, #15]
 8002cb2:	e008      	b.n	8002cc6 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f007 fdc5 	bl	800a846 <HAL_I2CEx_ConfigDigitalFilter>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60ba      	str	r2, [r7, #8]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4603      	mov	r3, r0
 8002cdc:	81fb      	strh	r3, [r7, #14]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	81bb      	strh	r3, [r7, #12]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8002ce6:	89b9      	ldrh	r1, [r7, #12]
 8002ce8:	89f8      	ldrh	r0, [r7, #14]
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	f000 fb57 	bl	80033a4 <I2C4_WriteReg>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	e00c      	b.n	8002d1c <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8002d02:	4809      	ldr	r0, [pc, #36]	; (8002d28 <BSP_I2C4_WriteReg16+0x58>)
 8002d04:	f006 fccb 	bl	800969e <HAL_I2C_GetError>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d103      	bne.n	8002d16 <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002d0e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	e002      	b.n	8002d1c <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002d16:	f06f 0303 	mvn.w	r3, #3
 8002d1a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002d1c:	697b      	ldr	r3, [r7, #20]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	240607cc 	.word	0x240607cc

08002d2c <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60ba      	str	r2, [r7, #8]
 8002d34:	461a      	mov	r2, r3
 8002d36:	4603      	mov	r3, r0
 8002d38:	81fb      	strh	r3, [r7, #14]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	81bb      	strh	r3, [r7, #12]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8002d42:	89b9      	ldrh	r1, [r7, #12]
 8002d44:	89f8      	ldrh	r0, [r7, #14]
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f000 fb4f 	bl	80033f0 <I2C4_ReadReg>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d102      	bne.n	8002d5e <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	e00c      	b.n	8002d78 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8002d5e:	4809      	ldr	r0, [pc, #36]	; (8002d84 <BSP_I2C4_ReadReg16+0x58>)
 8002d60:	f006 fc9d 	bl	800969e <HAL_I2C_GetError>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d103      	bne.n	8002d72 <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002d6a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	e002      	b.n	8002d78 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002d72:	f06f 0303 	mvn.w	r3, #3
 8002d76:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002d78:	697b      	ldr	r3, [r7, #20]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	240607cc 	.word	0x240607cc

08002d88 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8002d8c:	f001 fc5c 	bl	8004648 <HAL_GetTick>
 8002d90:	4603      	mov	r3, r0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d06b      	beq.n	8002e84 <I2C_GetTiming+0xec>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d068      	beq.n	8002e84 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	e060      	b.n	8002e7a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002db8:	4a35      	ldr	r2, [pc, #212]	; (8002e90 <I2C_GetTiming+0xf8>)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	212c      	movs	r1, #44	; 0x2c
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d352      	bcc.n	8002e74 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8002dce:	4a30      	ldr	r2, [pc, #192]	; (8002e90 <I2C_GetTiming+0xf8>)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	3308      	adds	r3, #8
 8002ddc:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d847      	bhi.n	8002e74 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8002de4:	6939      	ldr	r1, [r7, #16]
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f856 	bl	8002e98 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8002dec:	6939      	ldr	r1, [r7, #16]
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f940 	bl	8003074 <I2C_Compute_SCLL_SCLH>
 8002df4:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b7f      	cmp	r3, #127	; 0x7f
 8002dfa:	d842      	bhi.n	8002e82 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002dfc:	4925      	ldr	r1, [pc, #148]	; (8002e94 <I2C_GetTiming+0xfc>)
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002e0e:	4821      	ldr	r0, [pc, #132]	; (8002e94 <I2C_GetTiming+0xfc>)
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4403      	add	r3, r0
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	051b      	lsls	r3, r3, #20
 8002e22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002e26:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002e28:	481a      	ldr	r0, [pc, #104]	; (8002e94 <I2C_GetTiming+0xfc>)
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4403      	add	r3, r0
 8002e36:	3308      	adds	r3, #8
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	041b      	lsls	r3, r3, #16
 8002e3c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002e40:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8002e42:	4814      	ldr	r0, [pc, #80]	; (8002e94 <I2C_GetTiming+0xfc>)
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4403      	add	r3, r0
 8002e50:	330c      	adds	r3, #12
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002e58:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8002e5a:	480e      	ldr	r0, [pc, #56]	; (8002e94 <I2C_GetTiming+0xfc>)
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4403      	add	r3, r0
 8002e68:	3310      	adds	r3, #16
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	617b      	str	r3, [r7, #20]
        }
        break;
 8002e72:	e006      	b.n	8002e82 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	3301      	adds	r3, #1
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d99b      	bls.n	8002db8 <I2C_GetTiming+0x20>
 8002e80:	e000      	b.n	8002e84 <I2C_GetTiming+0xec>
        break;
 8002e82:	bf00      	nop
      }
    }
  }

  return ret;
 8002e84:	697b      	ldr	r3, [r7, #20]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	08011570 	.word	0x08011570
 8002e94:	2405fdc8 	.word	0x2405fdc8

08002e98 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b08f      	sub	sp, #60	; 0x3c
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8002ea2:	2310      	movs	r3, #16
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	085a      	lsrs	r2, r3, #1
 8002eaa:	4b6e      	ldr	r3, [pc, #440]	; (8003064 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8002eac:	4413      	add	r3, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002eb4:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002eb6:	2332      	movs	r3, #50	; 0x32
 8002eb8:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8002eba:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002ebe:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002ec0:	4a69      	ldr	r2, [pc, #420]	; (8003068 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	3324      	adds	r3, #36	; 0x24
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	4a65      	ldr	r2, [pc, #404]	; (8003068 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	330c      	adds	r3, #12
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002ee4:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002ee6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002ee8:	495f      	ldr	r1, [pc, #380]	; (8003068 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	202c      	movs	r0, #44	; 0x2c
 8002eee:	fb00 f303 	mul.w	r3, r0, r3
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3328      	adds	r3, #40	; 0x28
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3303      	adds	r3, #3
 8002efa:	69f9      	ldr	r1, [r7, #28]
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002f04:	4a58      	ldr	r2, [pc, #352]	; (8003068 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	3310      	adds	r3, #16
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4618      	mov	r0, r3
 8002f16:	4a54      	ldr	r2, [pc, #336]	; (8003068 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	3320      	adds	r3, #32
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002f28:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002f2a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002f2c:	494e      	ldr	r1, [pc, #312]	; (8003068 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	202c      	movs	r0, #44	; 0x2c
 8002f32:	fb00 f303 	mul.w	r3, r0, r3
 8002f36:	440b      	add	r3, r1
 8002f38:	3328      	adds	r3, #40	; 0x28
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	69f9      	ldr	r1, [r7, #28]
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8002f48:	4a47      	ldr	r2, [pc, #284]	; (8003068 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	212c      	movs	r1, #44	; 0x2c
 8002f4e:	fb01 f303 	mul.w	r3, r1, r3
 8002f52:	4413      	add	r3, r2
 8002f54:	3320      	adds	r3, #32
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	4a43      	ldr	r2, [pc, #268]	; (8003068 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	3314      	adds	r3, #20
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4403      	add	r3, r0
 8002f6c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	dc01      	bgt.n	8002f78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	dc01      	bgt.n	8002f82 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f86:	e062      	b.n	800304e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002f88:	2300      	movs	r3, #0
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8c:	e059      	b.n	8003042 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	3301      	adds	r3, #1
 8002f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f94:	3201      	adds	r2, #1
 8002f96:	fb03 f202 	mul.w	r2, r3, r2
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	fb02 f303 	mul.w	r3, r2, r3
 8002fa0:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d348      	bcc.n	800303c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	623b      	str	r3, [r7, #32]
 8002fae:	e042      	b.n	8003036 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	6a3a      	ldr	r2, [r7, #32]
 8002fb6:	fb03 f202 	mul.w	r2, r3, r2
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	fb02 f303 	mul.w	r3, r2, r3
 8002fc0:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d332      	bcc.n	8003030 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d82e      	bhi.n	8003030 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8002fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d02a      	beq.n	8003030 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8002fda:	4b24      	ldr	r3, [pc, #144]	; (800306c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4924      	ldr	r1, [pc, #144]	; (8003070 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fec:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8002fee:	4b1f      	ldr	r3, [pc, #124]	; (800306c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	491f      	ldr	r1, [pc, #124]	; (8003070 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3304      	adds	r3, #4
 8003000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003002:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4919      	ldr	r1, [pc, #100]	; (8003070 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	3308      	adds	r3, #8
 8003016:	6a3a      	ldr	r2, [r7, #32]
 8003018:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3301      	adds	r3, #1
 8003024:	4a11      	ldr	r2, [pc, #68]	; (800306c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003026:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003028:	4b10      	ldr	r3, [pc, #64]	; (800306c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b7f      	cmp	r3, #127	; 0x7f
 800302e:	d812      	bhi.n	8003056 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	3301      	adds	r3, #1
 8003034:	623b      	str	r3, [r7, #32]
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	2b0f      	cmp	r3, #15
 800303a:	d9b9      	bls.n	8002fb0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	3301      	adds	r3, #1
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	2b0f      	cmp	r3, #15
 8003046:	d9a2      	bls.n	8002f8e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304a:	3301      	adds	r3, #1
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	2b0f      	cmp	r3, #15
 8003052:	d999      	bls.n	8002f88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8003054:	e000      	b.n	8003058 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8003056:	bf00      	nop
          }
        }
      }
    }
  }
}
 8003058:	373c      	adds	r7, #60	; 0x3c
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	3b9aca00 	.word	0x3b9aca00
 8003068:	08011570 	.word	0x08011570
 800306c:	240607c8 	.word	0x240607c8
 8003070:	2405fdc8 	.word	0x2405fdc8

08003074 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003074:	b480      	push	{r7}
 8003076:	b093      	sub	sp, #76	; 0x4c
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003082:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	085a      	lsrs	r2, r3, #1
 8003088:	4b7a      	ldr	r3, [pc, #488]	; (8003274 <I2C_Compute_SCLL_SCLH+0x200>)
 800308a:	4413      	add	r3, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003094:	4a78      	ldr	r2, [pc, #480]	; (8003278 <I2C_Compute_SCLL_SCLH+0x204>)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	212c      	movs	r1, #44	; 0x2c
 800309a:	fb01 f303 	mul.w	r3, r1, r3
 800309e:	4413      	add	r3, r2
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	085a      	lsrs	r2, r3, #1
 80030a4:	4b73      	ldr	r3, [pc, #460]	; (8003274 <I2C_Compute_SCLL_SCLH+0x200>)
 80030a6:	4413      	add	r3, r2
 80030a8:	4973      	ldr	r1, [pc, #460]	; (8003278 <I2C_Compute_SCLL_SCLH+0x204>)
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	202c      	movs	r0, #44	; 0x2c
 80030ae:	fb00 f202 	mul.w	r2, r0, r2
 80030b2:	440a      	add	r2, r1
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 80030bc:	2332      	movs	r3, #50	; 0x32
 80030be:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 80030c0:	4a6d      	ldr	r2, [pc, #436]	; (8003278 <I2C_Compute_SCLL_SCLH+0x204>)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	212c      	movs	r1, #44	; 0x2c
 80030c6:	fb01 f303 	mul.w	r3, r1, r3
 80030ca:	4413      	add	r3, r2
 80030cc:	3328      	adds	r3, #40	; 0x28
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80030d8:	4a67      	ldr	r2, [pc, #412]	; (8003278 <I2C_Compute_SCLL_SCLH+0x204>)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	3304      	adds	r3, #4
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a62      	ldr	r2, [pc, #392]	; (8003274 <I2C_Compute_SCLL_SCLH+0x200>)
 80030ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ee:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80030f0:	4a61      	ldr	r2, [pc, #388]	; (8003278 <I2C_Compute_SCLL_SCLH+0x204>)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	212c      	movs	r1, #44	; 0x2c
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	4413      	add	r3, r2
 80030fc:	3308      	adds	r3, #8
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a5c      	ldr	r2, [pc, #368]	; (8003274 <I2C_Compute_SCLL_SCLH+0x200>)
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8003108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310a:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800310c:	2300      	movs	r3, #0
 800310e:	637b      	str	r3, [r7, #52]	; 0x34
 8003110:	e0a3      	b.n	800325a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003112:	495a      	ldr	r1, [pc, #360]	; (800327c <I2C_Compute_SCLL_SCLH+0x208>)
 8003114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003126:	fb02 f303 	mul.w	r3, r2, r3
 800312a:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800312c:	2300      	movs	r3, #0
 800312e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003130:	e08c      	b.n	800324c <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	441a      	add	r2, r3
 8003138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313a:	3301      	adds	r3, #1
 800313c:	6979      	ldr	r1, [r7, #20]
 800313e:	fb03 f101 	mul.w	r1, r3, r1
 8003142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	440b      	add	r3, r1
 8003148:	4413      	add	r3, r2
 800314a:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800314c:	4a4a      	ldr	r2, [pc, #296]	; (8003278 <I2C_Compute_SCLL_SCLH+0x204>)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3318      	adds	r3, #24
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	429a      	cmp	r2, r3
 8003160:	d971      	bls.n	8003246 <I2C_Compute_SCLL_SCLH+0x1d2>
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	1ad2      	subs	r2, r2, r3
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	089b      	lsrs	r3, r3, #2
 800316e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003170:	429a      	cmp	r2, r3
 8003172:	d268      	bcs.n	8003246 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003174:	2300      	movs	r3, #0
 8003176:	63bb      	str	r3, [r7, #56]	; 0x38
 8003178:	e062      	b.n	8003240 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800317a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	441a      	add	r2, r3
 8003180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003182:	3301      	adds	r3, #1
 8003184:	6979      	ldr	r1, [r7, #20]
 8003186:	fb03 f101 	mul.w	r1, r3, r1
 800318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	440b      	add	r3, r1
 8003190:	4413      	add	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	441a      	add	r2, r3
 800319a:	4937      	ldr	r1, [pc, #220]	; (8003278 <I2C_Compute_SCLL_SCLH+0x204>)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	202c      	movs	r0, #44	; 0x2c
 80031a0:	fb00 f303 	mul.w	r3, r0, r3
 80031a4:	440b      	add	r3, r1
 80031a6:	3320      	adds	r3, #32
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	441a      	add	r2, r3
 80031ac:	4932      	ldr	r1, [pc, #200]	; (8003278 <I2C_Compute_SCLL_SCLH+0x204>)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	202c      	movs	r0, #44	; 0x2c
 80031b2:	fb00 f303 	mul.w	r3, r0, r3
 80031b6:	440b      	add	r3, r1
 80031b8:	3324      	adds	r3, #36	; 0x24
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4413      	add	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d338      	bcc.n	800323a <I2C_Compute_SCLL_SCLH+0x1c6>
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d834      	bhi.n	800323a <I2C_Compute_SCLL_SCLH+0x1c6>
 80031d0:	4a29      	ldr	r2, [pc, #164]	; (8003278 <I2C_Compute_SCLL_SCLH+0x204>)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	212c      	movs	r1, #44	; 0x2c
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	4413      	add	r3, r2
 80031dc:	331c      	adds	r3, #28
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d329      	bcc.n	800323a <I2C_Compute_SCLL_SCLH+0x1c6>
 80031e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d225      	bcs.n	800323a <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	da02      	bge.n	8003202 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80031fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fe:	425b      	negs	r3, r3
 8003200:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003206:	429a      	cmp	r2, r3
 8003208:	d917      	bls.n	800323a <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800320e:	491b      	ldr	r1, [pc, #108]	; (800327c <I2C_Compute_SCLL_SCLH+0x208>)
 8003210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	3310      	adds	r3, #16
 800321e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003220:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8003222:	4916      	ldr	r1, [pc, #88]	; (800327c <I2C_Compute_SCLL_SCLH+0x208>)
 8003224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	330c      	adds	r3, #12
 8003232:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003234:	601a      	str	r2, [r3, #0]
              ret = count;
 8003236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003238:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800323a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323c:	3301      	adds	r3, #1
 800323e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003242:	2bff      	cmp	r3, #255	; 0xff
 8003244:	d999      	bls.n	800317a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003248:	3301      	adds	r3, #1
 800324a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800324c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324e:	2bff      	cmp	r3, #255	; 0xff
 8003250:	f67f af6f 	bls.w	8003132 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003256:	3301      	adds	r3, #1
 8003258:	637b      	str	r3, [r7, #52]	; 0x34
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <I2C_Compute_SCLL_SCLH+0x20c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003260:	429a      	cmp	r2, r3
 8003262:	f4ff af56 	bcc.w	8003112 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8003266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003268:	4618      	mov	r0, r3
 800326a:	374c      	adds	r7, #76	; 0x4c
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	3b9aca00 	.word	0x3b9aca00
 8003278:	08011570 	.word	0x08011570
 800327c:	2405fdc8 	.word	0x2405fdc8
 8003280:	240607c8 	.word	0x240607c8

08003284 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	; 0x28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800328c:	4b31      	ldr	r3, [pc, #196]	; (8003354 <I2C4_MspInit+0xd0>)
 800328e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003292:	4a30      	ldr	r2, [pc, #192]	; (8003354 <I2C4_MspInit+0xd0>)
 8003294:	f043 0308 	orr.w	r3, r3, #8
 8003298:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800329c:	4b2d      	ldr	r3, [pc, #180]	; (8003354 <I2C4_MspInit+0xd0>)
 800329e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80032aa:	4b2a      	ldr	r3, [pc, #168]	; (8003354 <I2C4_MspInit+0xd0>)
 80032ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80032b0:	4a28      	ldr	r2, [pc, #160]	; (8003354 <I2C4_MspInit+0xd0>)
 80032b2:	f043 0308 	orr.w	r3, r3, #8
 80032b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80032ba:	4b26      	ldr	r3, [pc, #152]	; (8003354 <I2C4_MspInit+0xd0>)
 80032bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80032c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032cc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80032ce:	2312      	movs	r3, #18
 80032d0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80032d6:	2302      	movs	r3, #2
 80032d8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80032da:	2304      	movs	r3, #4
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80032de:	f107 0314 	add.w	r3, r7, #20
 80032e2:	4619      	mov	r1, r3
 80032e4:	481c      	ldr	r0, [pc, #112]	; (8003358 <I2C4_MspInit+0xd4>)
 80032e6:	f005 fb4f 	bl	8008988 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80032ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ee:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80032f0:	2312      	movs	r3, #18
 80032f2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 80032f8:	2302      	movs	r3, #2
 80032fa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80032fc:	2304      	movs	r3, #4
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	4619      	mov	r1, r3
 8003306:	4814      	ldr	r0, [pc, #80]	; (8003358 <I2C4_MspInit+0xd4>)
 8003308:	f005 fb3e 	bl	8008988 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <I2C4_MspInit+0xd0>)
 800330e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003312:	4a10      	ldr	r2, [pc, #64]	; (8003354 <I2C4_MspInit+0xd0>)
 8003314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003318:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800331c:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <I2C4_MspInit+0xd0>)
 800331e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800332a:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <I2C4_MspInit+0xd0>)
 800332c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003330:	4a08      	ldr	r2, [pc, #32]	; (8003354 <I2C4_MspInit+0xd0>)
 8003332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003336:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <I2C4_MspInit+0xd0>)
 800333c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003340:	4a04      	ldr	r2, [pc, #16]	; (8003354 <I2C4_MspInit+0xd0>)
 8003342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003346:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800334a:	bf00      	nop
 800334c:	3728      	adds	r7, #40	; 0x28
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	58024400 	.word	0x58024400
 8003358:	58020c00 	.word	0x58020c00

0800335c <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8003364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003368:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	4619      	mov	r1, r3
 800336e:	480b      	ldr	r0, [pc, #44]	; (800339c <I2C4_MspDeInit+0x40>)
 8003370:	f005 fcba 	bl	8008ce8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003378:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4619      	mov	r1, r3
 800337e:	4807      	ldr	r0, [pc, #28]	; (800339c <I2C4_MspDeInit+0x40>)
 8003380:	f005 fcb2 	bl	8008ce8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <I2C4_MspDeInit+0x44>)
 8003386:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800338a:	4a05      	ldr	r2, [pc, #20]	; (80033a0 <I2C4_MspDeInit+0x44>)
 800338c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003390:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8003394:	bf00      	nop
 8003396:	3720      	adds	r7, #32
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	58020c00 	.word	0x58020c00
 80033a0:	58024400 	.word	0x58024400

080033a4 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af04      	add	r7, sp, #16
 80033aa:	607b      	str	r3, [r7, #4]
 80033ac:	4603      	mov	r3, r0
 80033ae:	81fb      	strh	r3, [r7, #14]
 80033b0:	460b      	mov	r3, r1
 80033b2:	81bb      	strh	r3, [r7, #12]
 80033b4:	4613      	mov	r3, r2
 80033b6:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80033b8:	8978      	ldrh	r0, [r7, #10]
 80033ba:	89ba      	ldrh	r2, [r7, #12]
 80033bc:	89f9      	ldrh	r1, [r7, #14]
 80033be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033c2:	9302      	str	r3, [sp, #8]
 80033c4:	8b3b      	ldrh	r3, [r7, #24]
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	4603      	mov	r3, r0
 80033ce:	4807      	ldr	r0, [pc, #28]	; (80033ec <I2C4_WriteReg+0x48>)
 80033d0:	f005 fe6e 	bl	80090b0 <HAL_I2C_Mem_Write>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80033da:	2300      	movs	r3, #0
 80033dc:	e001      	b.n	80033e2 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80033de:	f06f 0307 	mvn.w	r3, #7
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	240607cc 	.word	0x240607cc

080033f0 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af04      	add	r7, sp, #16
 80033f6:	607b      	str	r3, [r7, #4]
 80033f8:	4603      	mov	r3, r0
 80033fa:	81fb      	strh	r3, [r7, #14]
 80033fc:	460b      	mov	r3, r1
 80033fe:	81bb      	strh	r3, [r7, #12]
 8003400:	4613      	mov	r3, r2
 8003402:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003404:	8978      	ldrh	r0, [r7, #10]
 8003406:	89ba      	ldrh	r2, [r7, #12]
 8003408:	89f9      	ldrh	r1, [r7, #14]
 800340a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800340e:	9302      	str	r3, [sp, #8]
 8003410:	8b3b      	ldrh	r3, [r7, #24]
 8003412:	9301      	str	r3, [sp, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	4603      	mov	r3, r0
 800341a:	4807      	ldr	r0, [pc, #28]	; (8003438 <I2C4_ReadReg+0x48>)
 800341c:	f005 ff5c 	bl	80092d8 <HAL_I2C_Mem_Read>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003426:	2300      	movs	r3, #0
 8003428:	e001      	b.n	800342e <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800342a:	f06f 0307 	mvn.w	r3, #7
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	240607cc 	.word	0x240607cc

0800343c <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003452:	f06f 0301 	mvn.w	r3, #1
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	e035      	b.n	80034c6 <BSP_CAMERA_Init+0x8a>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    DCMI_MspInit(&hcamera_dcmi);
 800345a:	481d      	ldr	r0, [pc, #116]	; (80034d0 <BSP_CAMERA_Init+0x94>)
 800345c:	f000 fa24 	bl	80038a8 <DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 8003460:	481b      	ldr	r0, [pc, #108]	; (80034d0 <BSP_CAMERA_Init+0x94>)
 8003462:	f000 f839 	bl	80034d8 <MX_DCMI_Init>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <BSP_CAMERA_Init+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800346c:	f06f 0303 	mvn.w	r3, #3
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	e028      	b.n	80034c6 <BSP_CAMERA_Init+0x8a>
    }
    else if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 8003474:	2000      	movs	r0, #0
 8003476:	f000 f955 	bl	8003724 <BSP_CAMERA_HwReset>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <BSP_CAMERA_Init+0x4c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003480:	f06f 0307 	mvn.w	r3, #7
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e01e      	b.n	80034c6 <BSP_CAMERA_Init+0x8a>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	68b8      	ldr	r0, [r7, #8]
 800348c:	f000 fb12 	bl	8003ab4 <OV5640_Probe>
 8003490:	6178      	str	r0, [r7, #20]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <BSP_CAMERA_Init+0x64>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003498:	f06f 0306 	mvn.w	r3, #6
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	e012      	b.n	80034c6 <BSP_CAMERA_Init+0x8a>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 80034a0:	490c      	ldr	r1, [pc, #48]	; (80034d4 <BSP_CAMERA_Init+0x98>)
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	440b      	add	r3, r1
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 80034b2:	4908      	ldr	r1, [pc, #32]	; (80034d4 <BSP_CAMERA_Init+0x98>)
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4613      	mov	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	440b      	add	r3, r1
 80034c0:	3304      	adds	r3, #4
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 80034c6:	697b      	ldr	r3, [r7, #20]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	24060824 	.word	0x24060824
 80034d4:	24060874 	.word	0x24060874

080034d8 <MX_DCMI_Init>:
  * @param  hdcmi  DCMI handle
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_DCMI_Init(DCMI_HandleTypeDef* hdcmi)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /*** Configures the DCMI to interface with the camera module ***/
  /* DCMI configuration */
  hdcmi->Instance              = DCMI;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a10      	ldr	r2, [pc, #64]	; (8003524 <MX_DCMI_Init+0x4c>)
 80034e4:	601a      	str	r2, [r3, #0]
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	615a      	str	r2, [r3, #20]
  hdcmi->Init.HSPolarity       = DCMI_HSPOLARITY_HIGH;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2240      	movs	r2, #64	; 0x40
 80034f0:	611a      	str	r2, [r3, #16]
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	605a      	str	r2, [r3, #4]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2280      	movs	r2, #128	; 0x80
 80034fc:	60da      	str	r2, [r3, #12]
  hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	619a      	str	r2, [r3, #24]
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	609a      	str	r2, [r3, #8]

  if(HAL_DCMI_Init(hdcmi) != HAL_OK)
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f001 fa0e 	bl	800492c <HAL_DCMI_Init>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <MX_DCMI_Init+0x42>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <MX_DCMI_Init+0x44>
  }
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	48020000 	.word	0x48020000

08003528 <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 8003528:	b590      	push	{r4, r7, lr}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  printf("BSP_CAMERA_START_BEGIN\n");
 8003534:	4818      	ldr	r0, [pc, #96]	; (8003598 <BSP_CAMERA_Start+0x70>)
 8003536:	f00c fced 	bl	800ff14 <puts>
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <BSP_CAMERA_Start+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003540:	f06f 0301 	mvn.w	r3, #1
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e022      	b.n	800358e <BSP_CAMERA_Start+0x66>
  }
  else if(HAL_DCMI_Start_DMA(&hcamera_dcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 8003548:	68bc      	ldr	r4, [r7, #8]
 800354a:	4914      	ldr	r1, [pc, #80]	; (800359c <BSP_CAMERA_Start+0x74>)
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4613      	mov	r3, r2
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	4413      	add	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	440b      	add	r3, r1
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	4910      	ldr	r1, [pc, #64]	; (800359c <BSP_CAMERA_Start+0x74>)
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4613      	mov	r3, r2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	4413      	add	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	440b      	add	r3, r1
 8003568:	3304      	adds	r3, #4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4619      	mov	r1, r3
 800356e:	f000 f949 	bl	8003804 <GetSize>
 8003572:	4603      	mov	r3, r0
 8003574:	4622      	mov	r2, r4
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4809      	ldr	r0, [pc, #36]	; (80035a0 <BSP_CAMERA_Start+0x78>)
 800357a:	f001 fa51 	bl	8004a20 <HAL_DCMI_Start_DMA>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <BSP_CAMERA_Start+0x62>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8003584:	f06f 0303 	mvn.w	r3, #3
 8003588:	e002      	b.n	8003590 <BSP_CAMERA_Start+0x68>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 800358e:	697b      	ldr	r3, [r7, #20]
}
 8003590:	4618      	mov	r0, r3
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	bd90      	pop	{r4, r7, pc}
 8003598:	08011034 	.word	0x08011034
 800359c:	24060874 	.word	0x24060874
 80035a0:	24060824 	.word	0x24060824

080035a4 <BSP_CAMERA_SetLightMode>:
  * @param  Instance  Camera instance.
  * @param  LightMode Light Mode to be configured
  * @retval BSP status
  */
int32_t BSP_CAMERA_SetLightMode(uint32_t Instance, uint32_t LightMode)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <BSP_CAMERA_SetLightMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80035b4:	f06f 0301 	mvn.w	r3, #1
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	e023      	b.n	8003604 <BSP_CAMERA_SetLightMode+0x60>
  }
  else if(Camera_Cap->LightMode == 0U)
 80035bc:	4b14      	ldr	r3, [pc, #80]	; (8003610 <BSP_CAMERA_SetLightMode+0x6c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d103      	bne.n	80035ce <BSP_CAMERA_SetLightMode+0x2a>
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80035c6:	f06f 030a 	mvn.w	r3, #10
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	e01a      	b.n	8003604 <BSP_CAMERA_SetLightMode+0x60>
  }
  else if(Camera_Drv->SetLightMode(Camera_CompObj, LightMode) < 0)
 80035ce:	4b11      	ldr	r3, [pc, #68]	; (8003614 <BSP_CAMERA_SetLightMode+0x70>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	4a10      	ldr	r2, [pc, #64]	; (8003618 <BSP_CAMERA_SetLightMode+0x74>)
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	6839      	ldr	r1, [r7, #0]
 80035da:	4610      	mov	r0, r2
 80035dc:	4798      	blx	r3
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	da03      	bge.n	80035ec <BSP_CAMERA_SetLightMode+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80035e4:	f06f 0304 	mvn.w	r3, #4
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	e00b      	b.n	8003604 <BSP_CAMERA_SetLightMode+0x60>
  }
  else
  {
    Camera_Ctx[Instance].LightMode = LightMode;
 80035ec:	490b      	ldr	r1, [pc, #44]	; (800361c <BSP_CAMERA_SetLightMode+0x78>)
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	440b      	add	r3, r1
 80035fa:	3308      	adds	r3, #8
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_NONE;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8003604:	68fb      	ldr	r3, [r7, #12]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	240608a8 	.word	0x240608a8
 8003614:	240608a4 	.word	0x240608a4
 8003618:	24060820 	.word	0x24060820
 800361c:	24060874 	.word	0x24060874

08003620 <BSP_CAMERA_SetColorEffect>:
  * @param  Instance Camera instance.
  * @param  ColorEffect Effect to be configured
  * @retval BSP status
  */
int32_t BSP_CAMERA_SetColorEffect(uint32_t Instance, uint32_t ColorEffect)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <BSP_CAMERA_SetColorEffect+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003630:	f06f 0301 	mvn.w	r3, #1
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	e023      	b.n	8003680 <BSP_CAMERA_SetColorEffect+0x60>
  }
  else if(Camera_Cap->ColorEffect == 0U)
 8003638:	4b14      	ldr	r3, [pc, #80]	; (800368c <BSP_CAMERA_SetColorEffect+0x6c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <BSP_CAMERA_SetColorEffect+0x2a>
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003642:	f06f 030a 	mvn.w	r3, #10
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	e01a      	b.n	8003680 <BSP_CAMERA_SetColorEffect+0x60>
  }
  else if(Camera_Drv->SetColorEffect(Camera_CompObj, ColorEffect) < 0)
 800364a:	4b11      	ldr	r3, [pc, #68]	; (8003690 <BSP_CAMERA_SetColorEffect+0x70>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	4a10      	ldr	r2, [pc, #64]	; (8003694 <BSP_CAMERA_SetColorEffect+0x74>)
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	6839      	ldr	r1, [r7, #0]
 8003656:	4610      	mov	r0, r2
 8003658:	4798      	blx	r3
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	da03      	bge.n	8003668 <BSP_CAMERA_SetColorEffect+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003660:	f06f 0304 	mvn.w	r3, #4
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	e00b      	b.n	8003680 <BSP_CAMERA_SetColorEffect+0x60>
  }
  else
  {
    Camera_Ctx[Instance].ColorEffect = ColorEffect;
 8003668:	490b      	ldr	r1, [pc, #44]	; (8003698 <BSP_CAMERA_SetColorEffect+0x78>)
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4413      	add	r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	440b      	add	r3, r1
 8003676:	330c      	adds	r3, #12
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_NONE;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8003680:	68fb      	ldr	r3, [r7, #12]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	240608a8 	.word	0x240608a8
 8003690:	240608a4 	.word	0x240608a4
 8003694:	24060820 	.word	0x24060820
 8003698:	24060874 	.word	0x24060874

0800369c <BSP_CAMERA_SetHueDegree>:
  * @param  Instance   Camera instance.
  * @param  HueDegree  Hue Degree
  * @retval BSP status
  */
int32_t BSP_CAMERA_SetHueDegree(uint32_t Instance, int32_t HueDegree)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if((Instance >= CAMERA_INSTANCES_NBR) || ((HueDegree < CAMERA_HUEDEGREE_MIN) && (HueDegree > CAMERA_HUEDEGREE_MAX)))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d106      	bne.n	80036ba <BSP_CAMERA_SetHueDegree+0x1e>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	f113 0f06 	cmn.w	r3, #6
 80036b2:	da06      	bge.n	80036c2 <BSP_CAMERA_SetHueDegree+0x26>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b05      	cmp	r3, #5
 80036b8:	dd03      	ble.n	80036c2 <BSP_CAMERA_SetHueDegree+0x26>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80036ba:	f06f 0301 	mvn.w	r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e023      	b.n	800370a <BSP_CAMERA_SetHueDegree+0x6e>
  }
  else if(Camera_Cap->HueDegree == 0U)
 80036c2:	4b14      	ldr	r3, [pc, #80]	; (8003714 <BSP_CAMERA_SetHueDegree+0x78>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d103      	bne.n	80036d4 <BSP_CAMERA_SetHueDegree+0x38>
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80036cc:	f06f 030a 	mvn.w	r3, #10
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	e01a      	b.n	800370a <BSP_CAMERA_SetHueDegree+0x6e>
  }
  else if(Camera_Drv->SetHueDegree(Camera_CompObj, HueDegree) < 0)
 80036d4:	4b10      	ldr	r3, [pc, #64]	; (8003718 <BSP_CAMERA_SetHueDegree+0x7c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	4a10      	ldr	r2, [pc, #64]	; (800371c <BSP_CAMERA_SetHueDegree+0x80>)
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	6839      	ldr	r1, [r7, #0]
 80036e0:	4610      	mov	r0, r2
 80036e2:	4798      	blx	r3
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	da03      	bge.n	80036f2 <BSP_CAMERA_SetHueDegree+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80036ea:	f06f 0304 	mvn.w	r3, #4
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	e00b      	b.n	800370a <BSP_CAMERA_SetHueDegree+0x6e>
  }
  else
  {
    Camera_Ctx[Instance].HueDegree = HueDegree;
 80036f2:	490b      	ldr	r1, [pc, #44]	; (8003720 <BSP_CAMERA_SetHueDegree+0x84>)
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4413      	add	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	440b      	add	r3, r1
 8003700:	331c      	adds	r3, #28
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_NONE;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 800370a:	68fb      	ldr	r3, [r7, #12]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	240608a8 	.word	0x240608a8
 8003718:	240608a4 	.word	0x240608a4
 800371c:	24060820 	.word	0x24060820
 8003720:	24060874 	.word	0x24060874

08003724 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <BSP_CAMERA_HwReset+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003736:	f06f 0301 	mvn.w	r3, #1
 800373a:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 800373c:	68fb      	ldr	r3, [r7, #12]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <BSP_CAMERA_PwrDown+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800375c:	f06f 0301 	mvn.w	r3, #1
 8003760:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003762:	68fb      	ldr	r3, [r7, #12]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 80037b4:	2000      	movs	r0, #0
 80037b6:	f7ff ffdb 	bl	8003770 <BSP_CAMERA_LineEventCallback>
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 {
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 80037ca:	2000      	movs	r0, #0
 80037cc:	f7fd fc72 	bl	80010b4 <BSP_CAMERA_FrameEventCallback>
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 80037e0:	2000      	movs	r0, #0
 80037e2:	f7ff ffcf 	bl	8003784 <BSP_CAMERA_VsyncEventCallback>
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 80037f6:	2000      	movs	r0, #0
 80037f8:	f7ff ffce 	bl	8003798 <BSP_CAMERA_ErrorCallback>
}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d102      	bne.n	800381e <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 8003818:	2303      	movs	r3, #3
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	e001      	b.n	8003822 <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 800381e:	2302      	movs	r3, #2
 8003820:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b04      	cmp	r3, #4
 8003826:	d834      	bhi.n	8003892 <GetSize+0x8e>
 8003828:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <GetSize+0x2c>)
 800382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382e:	bf00      	nop
 8003830:	08003845 	.word	0x08003845
 8003834:	08003855 	.word	0x08003855
 8003838:	08003865 	.word	0x08003865
 800383c:	08003875 	.word	0x08003875
 8003840:	08003885 	.word	0x08003885
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800384a:	fb02 f303 	mul.w	r3, r2, r3
 800384e:	089b      	lsrs	r3, r3, #2
 8003850:	60fb      	str	r3, [r7, #12]
    break;
 8003852:	e01f      	b.n	8003894 <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 800385a:	fb02 f303 	mul.w	r3, r2, r3
 800385e:	089b      	lsrs	r3, r3, #2
 8003860:	60fb      	str	r3, [r7, #12]
    break;
 8003862:	e017      	b.n	8003894 <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	4613      	mov	r3, r2
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	025b      	lsls	r3, r3, #9
 800386e:	089b      	lsrs	r3, r3, #2
 8003870:	60fb      	str	r3, [r7, #12]
    break;
 8003872:	e00f      	b.n	8003894 <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	089b      	lsrs	r3, r3, #2
 8003880:	60fb      	str	r3, [r7, #12]
    break;
 8003882:	e007      	b.n	8003894 <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4a07      	ldr	r2, [pc, #28]	; (80038a4 <GetSize+0xa0>)
 8003888:	fb02 f303 	mul.w	r3, r2, r3
 800388c:	089b      	lsrs	r3, r3, #2
 800388e:	60fb      	str	r3, [r7, #12]
    break;
 8003890:	e000      	b.n	8003894 <GetSize+0x90>
  default:
    break;
 8003892:	bf00      	nop
  }

  return (int32_t)size;
 8003894:	68fb      	ldr	r3, [r7, #12]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	0005dc00 	.word	0x0005dc00

080038a8 <DCMI_MspInit>:
  * @brief  Initializes the DCMI MSP.
  * @param  hdcmi  DCMI handle
  * @retval None
  */
static void DCMI_MspInit(DCMI_HandleTypeDef *hdcmi)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08e      	sub	sp, #56	; 0x38
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  printf("Initializing DCMI\n");
 80038b0:	4876      	ldr	r0, [pc, #472]	; (8003a8c <DCMI_MspInit+0x1e4>)
 80038b2:	f00c fb2f 	bl	800ff14 <puts>
  static DMA_HandleTypeDef hdma_handler;
  GPIO_InitTypeDef gpio_init_structure;

  /*** Enable peripherals and GPIO clocks ***/
  /* Enable DCMI clock */
  __HAL_RCC_DCMI_CLK_ENABLE();
 80038b6:	4b76      	ldr	r3, [pc, #472]	; (8003a90 <DCMI_MspInit+0x1e8>)
 80038b8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80038bc:	4a74      	ldr	r2, [pc, #464]	; (8003a90 <DCMI_MspInit+0x1e8>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 80038c6:	4b72      	ldr	r3, [pc, #456]	; (8003a90 <DCMI_MspInit+0x1e8>)
 80038c8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	623b      	str	r3, [r7, #32]
 80038d2:	6a3b      	ldr	r3, [r7, #32]

  /* Enable DMA2 clock */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038d4:	4b6e      	ldr	r3, [pc, #440]	; (8003a90 <DCMI_MspInit+0x1e8>)
 80038d6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80038da:	4a6d      	ldr	r2, [pc, #436]	; (8003a90 <DCMI_MspInit+0x1e8>)
 80038dc:	f043 0302 	orr.w	r3, r3, #2
 80038e0:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80038e4:	4b6a      	ldr	r3, [pc, #424]	; (8003a90 <DCMI_MspInit+0x1e8>)
 80038e6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038f2:	4b67      	ldr	r3, [pc, #412]	; (8003a90 <DCMI_MspInit+0x1e8>)
 80038f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80038f8:	4a65      	ldr	r2, [pc, #404]	; (8003a90 <DCMI_MspInit+0x1e8>)
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003902:	4b63      	ldr	r3, [pc, #396]	; (8003a90 <DCMI_MspInit+0x1e8>)
 8003904:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003910:	4b5f      	ldr	r3, [pc, #380]	; (8003a90 <DCMI_MspInit+0x1e8>)
 8003912:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003916:	4a5e      	ldr	r2, [pc, #376]	; (8003a90 <DCMI_MspInit+0x1e8>)
 8003918:	f043 0302 	orr.w	r3, r3, #2
 800391c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003920:	4b5b      	ldr	r3, [pc, #364]	; (8003a90 <DCMI_MspInit+0x1e8>)
 8003922:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800392e:	4b58      	ldr	r3, [pc, #352]	; (8003a90 <DCMI_MspInit+0x1e8>)
 8003930:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003934:	4a56      	ldr	r2, [pc, #344]	; (8003a90 <DCMI_MspInit+0x1e8>)
 8003936:	f043 0304 	orr.w	r3, r3, #4
 800393a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800393e:	4b54      	ldr	r3, [pc, #336]	; (8003a90 <DCMI_MspInit+0x1e8>)
 8003940:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800394c:	4b50      	ldr	r3, [pc, #320]	; (8003a90 <DCMI_MspInit+0x1e8>)
 800394e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003952:	4a4f      	ldr	r2, [pc, #316]	; (8003a90 <DCMI_MspInit+0x1e8>)
 8003954:	f043 0308 	orr.w	r3, r3, #8
 8003958:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800395c:	4b4c      	ldr	r3, [pc, #304]	; (8003a90 <DCMI_MspInit+0x1e8>)
 800395e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800396a:	4b49      	ldr	r3, [pc, #292]	; (8003a90 <DCMI_MspInit+0x1e8>)
 800396c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003970:	4a47      	ldr	r2, [pc, #284]	; (8003a90 <DCMI_MspInit+0x1e8>)
 8003972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003976:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800397a:	4b45      	ldr	r3, [pc, #276]	; (8003a90 <DCMI_MspInit+0x1e8>)
 800397c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	68bb      	ldr	r3, [r7, #8]
 	 PG10	--->	DCMI_D2
   */

  /* Configure DCMI GPIO as alternate function */
  /* DCMI PIXCLK and HSYNC pins */
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8003988:	2350      	movs	r3, #80	; 0x50
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800398c:	2302      	movs	r3, #2
 800398e:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003990:	2301      	movs	r3, #1
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003994:	2303      	movs	r3, #3
 8003996:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8003998:	230d      	movs	r3, #13
 800399a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800399c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039a0:	4619      	mov	r1, r3
 80039a2:	483c      	ldr	r0, [pc, #240]	; (8003a94 <DCMI_MspInit+0x1ec>)
 80039a4:	f004 fff0 	bl	8008988 <HAL_GPIO_Init>

  /* DCMI D0, D1 pins */
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 80039a8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 80039ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039b2:	4619      	mov	r1, r3
 80039b4:	4838      	ldr	r0, [pc, #224]	; (8003a98 <DCMI_MspInit+0x1f0>)
 80039b6:	f004 ffe7 	bl	8008988 <HAL_GPIO_Init>

  /* DCMI VSYNC, D2, D3 pins */
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 80039ba:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80039c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039c4:	4619      	mov	r1, r3
 80039c6:	4835      	ldr	r0, [pc, #212]	; (8003a9c <DCMI_MspInit+0x1f4>)
 80039c8:	f004 ffde 	bl	8008988 <HAL_GPIO_Init>

  /* DCMI D5 pins */
  gpio_init_structure.Pin       = GPIO_PIN_3;
 80039cc:	2308      	movs	r3, #8
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80039d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d4:	4619      	mov	r1, r3
 80039d6:	4832      	ldr	r0, [pc, #200]	; (8003aa0 <DCMI_MspInit+0x1f8>)
 80039d8:	f004 ffd6 	bl	8008988 <HAL_GPIO_Init>

  /* DCMI D6, D7 pins */
  gpio_init_structure.Pin       = GPIO_PIN_10;
 80039dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80039e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039e6:	4619      	mov	r1, r3
 80039e8:	482e      	ldr	r0, [pc, #184]	; (8003aa4 <DCMI_MspInit+0x1fc>)
 80039ea:	f004 ffcd 	bl	8008988 <HAL_GPIO_Init>

  /*** Configure the DMA ***/
  /* Set the parameters to be configured */
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI_PSSI;
 80039ee:	4b2e      	ldr	r3, [pc, #184]	; (8003aa8 <DCMI_MspInit+0x200>)
 80039f0:	224b      	movs	r2, #75	; 0x4b
 80039f2:	605a      	str	r2, [r3, #4]
  hdma_handler.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80039f4:	4b2c      	ldr	r3, [pc, #176]	; (8003aa8 <DCMI_MspInit+0x200>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 80039fa:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <DCMI_MspInit+0x200>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	60da      	str	r2, [r3, #12]
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;
 8003a00:	4b29      	ldr	r3, [pc, #164]	; (8003aa8 <DCMI_MspInit+0x200>)
 8003a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a06:	611a      	str	r2, [r3, #16]
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a08:	4b27      	ldr	r3, [pc, #156]	; (8003aa8 <DCMI_MspInit+0x200>)
 8003a0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a0e:	615a      	str	r2, [r3, #20]
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003a10:	4b25      	ldr	r3, [pc, #148]	; (8003aa8 <DCMI_MspInit+0x200>)
 8003a12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a16:	619a      	str	r2, [r3, #24]
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 8003a18:	4b23      	ldr	r3, [pc, #140]	; (8003aa8 <DCMI_MspInit+0x200>)
 8003a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a1e:	61da      	str	r2, [r3, #28]
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 8003a20:	4b21      	ldr	r3, [pc, #132]	; (8003aa8 <DCMI_MspInit+0x200>)
 8003a22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a26:	621a      	str	r2, [r3, #32]
  hdma_handler.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003a28:	4b1f      	ldr	r3, [pc, #124]	; (8003aa8 <DCMI_MspInit+0x200>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003a2e:	4b1e      	ldr	r3, [pc, #120]	; (8003aa8 <DCMI_MspInit+0x200>)
 8003a30:	2203      	movs	r2, #3
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_handler.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003a34:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <DCMI_MspInit+0x200>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8003a3a:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <DCMI_MspInit+0x200>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30

  hdma_handler.Instance = DMA2_Stream1;
 8003a40:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <DCMI_MspInit+0x200>)
 8003a42:	4a1a      	ldr	r2, [pc, #104]	; (8003aac <DCMI_MspInit+0x204>)
 8003a44:	601a      	str	r2, [r3, #0]

  /* Associate the initialized DMA handle to the DCMI handle */
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a17      	ldr	r2, [pc, #92]	; (8003aa8 <DCMI_MspInit+0x200>)
 8003a4a:	649a      	str	r2, [r3, #72]	; 0x48
 8003a4c:	4a16      	ldr	r2, [pc, #88]	; (8003aa8 <DCMI_MspInit+0x200>)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6393      	str	r3, [r2, #56]	; 0x38

  /*** Configure the NVIC for DCMI and DMA ***/
  /* NVIC configuration for DCMI transfer complete interrupt */
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8003a52:	2200      	movs	r2, #0
 8003a54:	210f      	movs	r1, #15
 8003a56:	204e      	movs	r0, #78	; 0x4e
 8003a58:	f000 ff25 	bl	80048a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8003a5c:	204e      	movs	r0, #78	; 0x4e
 8003a5e:	f000 ff3c 	bl	80048da <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8003a62:	2200      	movs	r2, #0
 8003a64:	210f      	movs	r1, #15
 8003a66:	2039      	movs	r0, #57	; 0x39
 8003a68:	f000 ff1d 	bl	80048a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003a6c:	2039      	movs	r0, #57	; 0x39
 8003a6e:	f000 ff34 	bl	80048da <HAL_NVIC_EnableIRQ>

  /* Configure the DMA stream */
  (void)HAL_DMA_Init(hdcmi->DMA_Handle);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 f9c6 	bl	8004e08 <HAL_DMA_Init>
  printf("DCMI Initialized\n");
 8003a7c:	480c      	ldr	r0, [pc, #48]	; (8003ab0 <DCMI_MspInit+0x208>)
 8003a7e:	f00c fa49 	bl	800ff14 <puts>
}
 8003a82:	bf00      	nop
 8003a84:	3738      	adds	r7, #56	; 0x38
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	0801104c 	.word	0x0801104c
 8003a90:	58024400 	.word	0x58024400
 8003a94:	58020000 	.word	0x58020000
 8003a98:	58020400 	.word	0x58020400
 8003a9c:	58020800 	.word	0x58020800
 8003aa0:	58020c00 	.word	0x58020c00
 8003aa4:	58021800 	.word	0x58021800
 8003aa8:	240608ac 	.word	0x240608ac
 8003aac:	40020428 	.word	0x40020428
 8003ab0:	08011060 	.word	0x08011060

08003ab4 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	; 0x28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8003abe:	2378      	movs	r3, #120	; 0x78
 8003ac0:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003ac2:	4b2c      	ldr	r3, [pc, #176]	; (8003b74 <OV5640_Probe+0xc0>)
 8003ac4:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003ac6:	4b2c      	ldr	r3, [pc, #176]	; (8003b78 <OV5640_Probe+0xc4>)
 8003ac8:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8003aca:	4b2c      	ldr	r3, [pc, #176]	; (8003b7c <OV5640_Probe+0xc8>)
 8003acc:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8003ace:	4b2c      	ldr	r3, [pc, #176]	; (8003b80 <OV5640_Probe+0xcc>)
 8003ad0:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003ad2:	4b2c      	ldr	r3, [pc, #176]	; (8003b84 <OV5640_Probe+0xd0>)
 8003ad4:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8003ad6:	f107 030c 	add.w	r3, r7, #12
 8003ada:	4619      	mov	r1, r3
 8003adc:	482a      	ldr	r0, [pc, #168]	; (8003b88 <OV5640_Probe+0xd4>)
 8003ade:	f7fd faff 	bl	80010e0 <OV5640_RegisterBusIO>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003ae8:	f06f 0304 	mvn.w	r3, #4
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
 8003aee:	e03c      	b.n	8003b6a <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8003af0:	f107 0308 	add.w	r3, r7, #8
 8003af4:	4619      	mov	r1, r3
 8003af6:	4824      	ldr	r0, [pc, #144]	; (8003b88 <OV5640_Probe+0xd4>)
 8003af8:	f7fd ff46 	bl	8001988 <OV5640_ReadID>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003b02:	f06f 0304 	mvn.w	r3, #4
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
 8003b08:	e02f      	b.n	8003b6a <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f245 6240 	movw	r2, #22080	; 0x5640
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d003      	beq.n	8003b1c <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003b14:	f06f 0306 	mvn.w	r3, #6
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1a:	e026      	b.n	8003b6a <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <OV5640_Probe+0xd8>)
 8003b1e:	4a1c      	ldr	r2, [pc, #112]	; (8003b90 <OV5640_Probe+0xdc>)
 8003b20:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 8003b22:	4b1c      	ldr	r3, [pc, #112]	; (8003b94 <OV5640_Probe+0xe0>)
 8003b24:	4a18      	ldr	r2, [pc, #96]	; (8003b88 <OV5640_Probe+0xd4>)
 8003b26:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8003b28:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <OV5640_Probe+0xd8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a19      	ldr	r2, [pc, #100]	; (8003b94 <OV5640_Probe+0xe0>)
 8003b30:	6810      	ldr	r0, [r2, #0]
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4798      	blx	r3
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003b3e:	f06f 0304 	mvn.w	r3, #4
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
 8003b44:	e011      	b.n	8003b6a <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 8003b46:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <OV5640_Probe+0xd8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4a11      	ldr	r2, [pc, #68]	; (8003b94 <OV5640_Probe+0xe0>)
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	4911      	ldr	r1, [pc, #68]	; (8003b98 <OV5640_Probe+0xe4>)
 8003b52:	6809      	ldr	r1, [r1, #0]
 8003b54:	4610      	mov	r0, r2
 8003b56:	4798      	blx	r3
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003b5e:	f06f 0304 	mvn.w	r3, #4
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
 8003b64:	e001      	b.n	8003b6a <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003b66:	2300      	movs	r3, #0
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3728      	adds	r7, #40	; 0x28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	08002b91 	.word	0x08002b91
 8003b78:	08002c05 	.word	0x08002c05
 8003b7c:	08002d2d 	.word	0x08002d2d
 8003b80:	08002cd1 	.word	0x08002cd1
 8003b84:	08002d89 	.word	0x08002d89
 8003b88:	24060924 	.word	0x24060924
 8003b8c:	240608a4 	.word	0x240608a4
 8003b90:	24000000 	.word	0x24000000
 8003b94:	24060820 	.word	0x24060820
 8003b98:	240608a8 	.word	0x240608a8

08003b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <HAL_MspInit+0x30>)
 8003ba4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003ba8:	4a08      	ldr	r2, [pc, #32]	; (8003bcc <HAL_MspInit+0x30>)
 8003baa:	f043 0302 	orr.w	r3, r3, #2
 8003bae:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <HAL_MspInit+0x30>)
 8003bb4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	607b      	str	r3, [r7, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	58024400 	.word	0x58024400

08003bd0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08e      	sub	sp, #56	; 0x38
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	609a      	str	r2, [r3, #8]
 8003be4:	60da      	str	r2, [r3, #12]
 8003be6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a76      	ldr	r2, [pc, #472]	; (8003dc8 <HAL_DCMI_MspInit+0x1f8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	f040 80e5 	bne.w	8003dbe <HAL_DCMI_MspInit+0x1ee>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8003bf4:	4b75      	ldr	r3, [pc, #468]	; (8003dcc <HAL_DCMI_MspInit+0x1fc>)
 8003bf6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8003bfa:	4a74      	ldr	r2, [pc, #464]	; (8003dcc <HAL_DCMI_MspInit+0x1fc>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8003c04:	4b71      	ldr	r3, [pc, #452]	; (8003dcc <HAL_DCMI_MspInit+0x1fc>)
 8003c06:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	623b      	str	r3, [r7, #32]
 8003c10:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c12:	4b6e      	ldr	r3, [pc, #440]	; (8003dcc <HAL_DCMI_MspInit+0x1fc>)
 8003c14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003c18:	4a6c      	ldr	r2, [pc, #432]	; (8003dcc <HAL_DCMI_MspInit+0x1fc>)
 8003c1a:	f043 0302 	orr.w	r3, r3, #2
 8003c1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003c22:	4b6a      	ldr	r3, [pc, #424]	; (8003dcc <HAL_DCMI_MspInit+0x1fc>)
 8003c24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c30:	4b66      	ldr	r3, [pc, #408]	; (8003dcc <HAL_DCMI_MspInit+0x1fc>)
 8003c32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003c36:	4a65      	ldr	r2, [pc, #404]	; (8003dcc <HAL_DCMI_MspInit+0x1fc>)
 8003c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c3c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003c40:	4b62      	ldr	r3, [pc, #392]	; (8003dcc <HAL_DCMI_MspInit+0x1fc>)
 8003c42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c4e:	4b5f      	ldr	r3, [pc, #380]	; (8003dcc <HAL_DCMI_MspInit+0x1fc>)
 8003c50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003c54:	4a5d      	ldr	r2, [pc, #372]	; (8003dcc <HAL_DCMI_MspInit+0x1fc>)
 8003c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c5a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003c5e:	4b5b      	ldr	r3, [pc, #364]	; (8003dcc <HAL_DCMI_MspInit+0x1fc>)
 8003c60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6c:	4b57      	ldr	r3, [pc, #348]	; (8003dcc <HAL_DCMI_MspInit+0x1fc>)
 8003c6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003c72:	4a56      	ldr	r2, [pc, #344]	; (8003dcc <HAL_DCMI_MspInit+0x1fc>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003c7c:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <HAL_DCMI_MspInit+0x1fc>)
 8003c7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c8a:	4b50      	ldr	r3, [pc, #320]	; (8003dcc <HAL_DCMI_MspInit+0x1fc>)
 8003c8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003c90:	4a4e      	ldr	r2, [pc, #312]	; (8003dcc <HAL_DCMI_MspInit+0x1fc>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003c9a:	4b4c      	ldr	r3, [pc, #304]	; (8003dcc <HAL_DCMI_MspInit+0x1fc>)
 8003c9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PH12     ------> DCMI_D3
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_7;
 8003ca8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003cba:	230d      	movs	r3, #13
 8003cbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4842      	ldr	r0, [pc, #264]	; (8003dd0 <HAL_DCMI_MspInit+0x200>)
 8003cc6:	f004 fe5f 	bl	8008988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003cdc:	230d      	movs	r3, #13
 8003cde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	483b      	ldr	r0, [pc, #236]	; (8003dd4 <HAL_DCMI_MspInit+0x204>)
 8003ce8:	f004 fe4e 	bl	8008988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12;
 8003cec:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003cfe:	230d      	movs	r3, #13
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d06:	4619      	mov	r1, r3
 8003d08:	4833      	ldr	r0, [pc, #204]	; (8003dd8 <HAL_DCMI_MspInit+0x208>)
 8003d0a:	f004 fe3d 	bl	8008988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003d0e:	23c0      	movs	r3, #192	; 0xc0
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d12:	2302      	movs	r3, #2
 8003d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003d1e:	230d      	movs	r3, #13
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d26:	4619      	mov	r1, r3
 8003d28:	482c      	ldr	r0, [pc, #176]	; (8003ddc <HAL_DCMI_MspInit+0x20c>)
 8003d2a:	f004 fe2d 	bl	8008988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8003d2e:	2350      	movs	r3, #80	; 0x50
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d32:	2302      	movs	r3, #2
 8003d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003d3e:	230d      	movs	r3, #13
 8003d40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d46:	4619      	mov	r1, r3
 8003d48:	4825      	ldr	r0, [pc, #148]	; (8003de0 <HAL_DCMI_MspInit+0x210>)
 8003d4a:	f004 fe1d 	bl	8008988 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8003d4e:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <HAL_DCMI_MspInit+0x214>)
 8003d50:	4a25      	ldr	r2, [pc, #148]	; (8003de8 <HAL_DCMI_MspInit+0x218>)
 8003d52:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 8003d54:	4b23      	ldr	r3, [pc, #140]	; (8003de4 <HAL_DCMI_MspInit+0x214>)
 8003d56:	224b      	movs	r2, #75	; 0x4b
 8003d58:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d5a:	4b22      	ldr	r3, [pc, #136]	; (8003de4 <HAL_DCMI_MspInit+0x214>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d60:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <HAL_DCMI_MspInit+0x214>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8003d66:	4b1f      	ldr	r3, [pc, #124]	; (8003de4 <HAL_DCMI_MspInit+0x214>)
 8003d68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d6c:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d6e:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <HAL_DCMI_MspInit+0x214>)
 8003d70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d74:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d76:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <HAL_DCMI_MspInit+0x214>)
 8003d78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d7c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8003d7e:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <HAL_DCMI_MspInit+0x214>)
 8003d80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d84:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 8003d86:	4b17      	ldr	r3, [pc, #92]	; (8003de4 <HAL_DCMI_MspInit+0x214>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d8c:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <HAL_DCMI_MspInit+0x214>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8003d92:	4814      	ldr	r0, [pc, #80]	; (8003de4 <HAL_DCMI_MspInit+0x214>)
 8003d94:	f001 f838 	bl	8004e08 <HAL_DMA_Init>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_DCMI_MspInit+0x1d2>
    {
      Error_Handler();
 8003d9e:	f7fd f999 	bl	80010d4 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a0f      	ldr	r2, [pc, #60]	; (8003de4 <HAL_DCMI_MspInit+0x214>)
 8003da6:	649a      	str	r2, [r3, #72]	; 0x48
 8003da8:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <HAL_DCMI_MspInit+0x214>)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 8003dae:	2200      	movs	r2, #0
 8003db0:	2100      	movs	r1, #0
 8003db2:	204e      	movs	r0, #78	; 0x4e
 8003db4:	f000 fd77 	bl	80048a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8003db8:	204e      	movs	r0, #78	; 0x4e
 8003dba:	f000 fd8e 	bl	80048da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8003dbe:	bf00      	nop
 8003dc0:	3738      	adds	r7, #56	; 0x38
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	48020000 	.word	0x48020000
 8003dcc:	58024400 	.word	0x58024400
 8003dd0:	58020400 	.word	0x58020400
 8003dd4:	58021800 	.word	0x58021800
 8003dd8:	58021c00 	.word	0x58021c00
 8003ddc:	58020800 	.word	0x58020800
 8003de0:	58020000 	.word	0x58020000
 8003de4:	24000124 	.word	0x24000124
 8003de8:	40020428 	.word	0x40020428

08003dec <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a0e      	ldr	r2, [pc, #56]	; (8003e34 <HAL_DMA2D_MspInit+0x48>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d116      	bne.n	8003e2c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003dfe:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <HAL_DMA2D_MspInit+0x4c>)
 8003e00:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003e04:	4a0c      	ldr	r2, [pc, #48]	; (8003e38 <HAL_DMA2D_MspInit+0x4c>)
 8003e06:	f043 0310 	orr.w	r3, r3, #16
 8003e0a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <HAL_DMA2D_MspInit+0x4c>)
 8003e10:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2100      	movs	r1, #0
 8003e20:	205a      	movs	r0, #90	; 0x5a
 8003e22:	f000 fd40 	bl	80048a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003e26:	205a      	movs	r0, #90	; 0x5a
 8003e28:	f000 fd57 	bl	80048da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	52001000 	.word	0x52001000
 8003e38:	58024400 	.word	0x58024400

08003e3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b0ba      	sub	sp, #232	; 0xe8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
 8003e50:	60da      	str	r2, [r3, #12]
 8003e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e54:	f107 0310 	add.w	r3, r7, #16
 8003e58:	22c0      	movs	r2, #192	; 0xc0
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f00b ffcb 	bl	800fdf8 <memset>
  if(hi2c->Instance==I2C4)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a2f      	ldr	r2, [pc, #188]	; (8003f24 <HAL_I2C_MspInit+0xe8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d156      	bne.n	8003f1a <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8003e6c:	f04f 0210 	mov.w	r2, #16
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e7e:	f107 0310 	add.w	r3, r7, #16
 8003e82:	4618      	mov	r0, r3
 8003e84:	f008 f928 	bl	800c0d8 <HAL_RCCEx_PeriphCLKConfig>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003e8e:	f7fd f921 	bl	80010d4 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e92:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <HAL_I2C_MspInit+0xec>)
 8003e94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003e98:	4a23      	ldr	r2, [pc, #140]	; (8003f28 <HAL_I2C_MspInit+0xec>)
 8003e9a:	f043 0308 	orr.w	r3, r3, #8
 8003e9e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003ea2:	4b21      	ldr	r3, [pc, #132]	; (8003f28 <HAL_I2C_MspInit+0xec>)
 8003ea4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8003eb0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003eb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003eb8:	2312      	movs	r3, #18
 8003eba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003eca:	2304      	movs	r3, #4
 8003ecc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ed0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4815      	ldr	r0, [pc, #84]	; (8003f2c <HAL_I2C_MspInit+0xf0>)
 8003ed8:	f004 fd56 	bl	8008988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003edc:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <HAL_I2C_MspInit+0xec>)
 8003ede:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003ee2:	4a11      	ldr	r2, [pc, #68]	; (8003f28 <HAL_I2C_MspInit+0xec>)
 8003ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003eec:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <HAL_I2C_MspInit+0xec>)
 8003eee:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	60bb      	str	r3, [r7, #8]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8003efa:	2200      	movs	r2, #0
 8003efc:	2100      	movs	r1, #0
 8003efe:	205f      	movs	r0, #95	; 0x5f
 8003f00:	f000 fcd1 	bl	80048a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8003f04:	205f      	movs	r0, #95	; 0x5f
 8003f06:	f000 fce8 	bl	80048da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	2060      	movs	r0, #96	; 0x60
 8003f10:	f000 fcc9 	bl	80048a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8003f14:	2060      	movs	r0, #96	; 0x60
 8003f16:	f000 fce0 	bl	80048da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8003f1a:	bf00      	nop
 8003f1c:	37e8      	adds	r7, #232	; 0xe8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	58001c00 	.word	0x58001c00
 8003f28:	58024400 	.word	0x58024400
 8003f2c:	58020c00 	.word	0x58020c00

08003f30 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C4)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a0f      	ldr	r2, [pc, #60]	; (8003f7c <HAL_I2C_MspDeInit+0x4c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d117      	bne.n	8003f72 <HAL_I2C_MspDeInit+0x42>
  {
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C4_CLK_DISABLE();
 8003f42:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <HAL_I2C_MspDeInit+0x50>)
 8003f44:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003f48:	4a0d      	ldr	r2, [pc, #52]	; (8003f80 <HAL_I2C_MspDeInit+0x50>)
 8003f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f4e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154

    /**I2C4 GPIO Configuration
    PD13     ------> I2C4_SDA
    PD12     ------> I2C4_SCL
    */
    HAL_GPIO_DeInit(I2C4_SDA_GPIO_Port, I2C4_SDA_Pin);
 8003f52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f56:	480b      	ldr	r0, [pc, #44]	; (8003f84 <HAL_I2C_MspDeInit+0x54>)
 8003f58:	f004 fec6 	bl	8008ce8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C4_SCL_GPIO_Port, I2C4_SCL_Pin);
 8003f5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f60:	4808      	ldr	r0, [pc, #32]	; (8003f84 <HAL_I2C_MspDeInit+0x54>)
 8003f62:	f004 fec1 	bl	8008ce8 <HAL_GPIO_DeInit>

    /* I2C4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 8003f66:	205f      	movs	r0, #95	; 0x5f
 8003f68:	f000 fcc5 	bl	80048f6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 8003f6c:	2060      	movs	r0, #96	; 0x60
 8003f6e:	f000 fcc2 	bl	80048f6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	58001c00 	.word	0x58001c00
 8003f80:	58024400 	.word	0x58024400
 8003f84:	58020c00 	.word	0x58020c00

08003f88 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b0bc      	sub	sp, #240	; 0xf0
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f90:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fa0:	f107 0318 	add.w	r3, r7, #24
 8003fa4:	22c0      	movs	r2, #192	; 0xc0
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f00b ff25 	bl	800fdf8 <memset>
  if(hltdc->Instance==LTDC)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a5b      	ldr	r2, [pc, #364]	; (8004120 <HAL_LTDC_MspInit+0x198>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	f040 80ae 	bne.w	8004116 <HAL_LTDC_MspInit+0x18e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003fba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 11;
 8003fca:	230b      	movs	r3, #11
 8003fcc:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 8003fce:	2311      	movs	r3, #17
 8003fd0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 11;
 8003fd6:	230b      	movs	r3, #11
 8003fd8:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8003fda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003fde:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0.0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fe8:	f107 0318 	add.w	r3, r7, #24
 8003fec:	4618      	mov	r0, r3
 8003fee:	f008 f873 	bl	800c0d8 <HAL_RCCEx_PeriphCLKConfig>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8003ff8:	f7fd f86c 	bl	80010d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003ffc:	4b49      	ldr	r3, [pc, #292]	; (8004124 <HAL_LTDC_MspInit+0x19c>)
 8003ffe:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8004002:	4a48      	ldr	r2, [pc, #288]	; (8004124 <HAL_LTDC_MspInit+0x19c>)
 8004004:	f043 0308 	orr.w	r3, r3, #8
 8004008:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 800400c:	4b45      	ldr	r3, [pc, #276]	; (8004124 <HAL_LTDC_MspInit+0x19c>)
 800400e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800401a:	4b42      	ldr	r3, [pc, #264]	; (8004124 <HAL_LTDC_MspInit+0x19c>)
 800401c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004020:	4a40      	ldr	r2, [pc, #256]	; (8004124 <HAL_LTDC_MspInit+0x19c>)
 8004022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004026:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800402a:	4b3e      	ldr	r3, [pc, #248]	; (8004124 <HAL_LTDC_MspInit+0x19c>)
 800402c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004038:	4b3a      	ldr	r3, [pc, #232]	; (8004124 <HAL_LTDC_MspInit+0x19c>)
 800403a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800403e:	4a39      	ldr	r2, [pc, #228]	; (8004124 <HAL_LTDC_MspInit+0x19c>)
 8004040:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004044:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004048:	4b36      	ldr	r3, [pc, #216]	; (8004124 <HAL_LTDC_MspInit+0x19c>)
 800404a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800404e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004056:	4b33      	ldr	r3, [pc, #204]	; (8004124 <HAL_LTDC_MspInit+0x19c>)
 8004058:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800405c:	4a31      	ldr	r2, [pc, #196]	; (8004124 <HAL_LTDC_MspInit+0x19c>)
 800405e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004062:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004066:	4b2f      	ldr	r3, [pc, #188]	; (8004124 <HAL_LTDC_MspInit+0x19c>)
 8004068:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800406c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 8004074:	23ff      	movs	r3, #255	; 0xff
 8004076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407a:	2302      	movs	r3, #2
 800407c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004080:	2300      	movs	r3, #0
 8004082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004086:	2303      	movs	r3, #3
 8004088:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800408c:	230e      	movs	r3, #14
 800408e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004092:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004096:	4619      	mov	r1, r3
 8004098:	4823      	ldr	r0, [pc, #140]	; (8004128 <HAL_LTDC_MspInit+0x1a0>)
 800409a:	f004 fc75 	bl	8008988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 800409e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a6:	2302      	movs	r3, #2
 80040a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b2:	2303      	movs	r3, #3
 80040b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040b8:	230e      	movs	r3, #14
 80040ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80040be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80040c2:	4619      	mov	r1, r3
 80040c4:	4819      	ldr	r0, [pc, #100]	; (800412c <HAL_LTDC_MspInit+0x1a4>)
 80040c6:	f004 fc5f 	bl	8008988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 80040ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80040ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d2:	2302      	movs	r3, #2
 80040d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040de:	2303      	movs	r3, #3
 80040e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040e4:	230e      	movs	r3, #14
 80040e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80040ea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80040ee:	4619      	mov	r1, r3
 80040f0:	480f      	ldr	r0, [pc, #60]	; (8004130 <HAL_LTDC_MspInit+0x1a8>)
 80040f2:	f004 fc49 	bl	8008988 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80040f6:	2200      	movs	r2, #0
 80040f8:	2100      	movs	r1, #0
 80040fa:	2058      	movs	r0, #88	; 0x58
 80040fc:	f000 fbd3 	bl	80048a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004100:	2058      	movs	r0, #88	; 0x58
 8004102:	f000 fbea 	bl	80048da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8004106:	2200      	movs	r2, #0
 8004108:	2100      	movs	r1, #0
 800410a:	2059      	movs	r0, #89	; 0x59
 800410c:	f000 fbcb 	bl	80048a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8004110:	2059      	movs	r0, #89	; 0x59
 8004112:	f000 fbe2 	bl	80048da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004116:	bf00      	nop
 8004118:	37f0      	adds	r7, #240	; 0xf0
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	50001000 	.word	0x50001000
 8004124:	58024400 	.word	0x58024400
 8004128:	58022800 	.word	0x58022800
 800412c:	58022400 	.word	0x58022400
 8004130:	58022000 	.word	0x58022000

08004134 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b0b2      	sub	sp, #200	; 0xc8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800413c:	f107 0308 	add.w	r3, r7, #8
 8004140:	22c0      	movs	r2, #192	; 0xc0
 8004142:	2100      	movs	r1, #0
 8004144:	4618      	mov	r0, r3
 8004146:	f00b fe57 	bl	800fdf8 <memset>
  if(hrtc->Instance==RTC)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a10      	ldr	r2, [pc, #64]	; (8004190 <HAL_RTC_MspInit+0x5c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d119      	bne.n	8004188 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004154:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004158:	f04f 0300 	mov.w	r3, #0
 800415c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004160:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004164:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004168:	f107 0308 	add.w	r3, r7, #8
 800416c:	4618      	mov	r0, r3
 800416e:	f007 ffb3 	bl	800c0d8 <HAL_RCCEx_PeriphCLKConfig>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8004178:	f7fc ffac 	bl	80010d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_RTC_MspInit+0x60>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	4a04      	ldr	r2, [pc, #16]	; (8004194 <HAL_RTC_MspInit+0x60>)
 8004182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004186:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004188:	bf00      	nop
 800418a:	37c8      	adds	r7, #200	; 0xc8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	58004000 	.word	0x58004000
 8004194:	58024400 	.word	0x58024400

08004198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b0ba      	sub	sp, #232	; 0xe8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	609a      	str	r2, [r3, #8]
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041b0:	f107 0310 	add.w	r3, r7, #16
 80041b4:	22c0      	movs	r2, #192	; 0xc0
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f00b fe1d 	bl	800fdf8 <memset>
  if(huart->Instance==USART1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2b      	ldr	r2, [pc, #172]	; (8004270 <HAL_UART_MspInit+0xd8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d14e      	bne.n	8004266 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80041c8:	f04f 0201 	mov.w	r2, #1
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80041d4:	2300      	movs	r3, #0
 80041d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041da:	f107 0310 	add.w	r3, r7, #16
 80041de:	4618      	mov	r0, r3
 80041e0:	f007 ff7a 	bl	800c0d8 <HAL_RCCEx_PeriphCLKConfig>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80041ea:	f7fc ff73 	bl	80010d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041ee:	4b21      	ldr	r3, [pc, #132]	; (8004274 <HAL_UART_MspInit+0xdc>)
 80041f0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80041f4:	4a1f      	ldr	r2, [pc, #124]	; (8004274 <HAL_UART_MspInit+0xdc>)
 80041f6:	f043 0310 	orr.w	r3, r3, #16
 80041fa:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80041fe:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <HAL_UART_MspInit+0xdc>)
 8004200:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800420c:	4b19      	ldr	r3, [pc, #100]	; (8004274 <HAL_UART_MspInit+0xdc>)
 800420e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004212:	4a18      	ldr	r2, [pc, #96]	; (8004274 <HAL_UART_MspInit+0xdc>)
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800421c:	4b15      	ldr	r3, [pc, #84]	; (8004274 <HAL_UART_MspInit+0xdc>)
 800421e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 800422a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800422e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004232:	2302      	movs	r3, #2
 8004234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004238:	2300      	movs	r3, #0
 800423a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800423e:	2300      	movs	r3, #0
 8004240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004244:	2307      	movs	r3, #7
 8004246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800424a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800424e:	4619      	mov	r1, r3
 8004250:	4809      	ldr	r0, [pc, #36]	; (8004278 <HAL_UART_MspInit+0xe0>)
 8004252:	f004 fb99 	bl	8008988 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004256:	2200      	movs	r2, #0
 8004258:	2100      	movs	r1, #0
 800425a:	2025      	movs	r0, #37	; 0x25
 800425c:	f000 fb23 	bl	80048a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004260:	2025      	movs	r0, #37	; 0x25
 8004262:	f000 fb3a 	bl	80048da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004266:	bf00      	nop
 8004268:	37e8      	adds	r7, #232	; 0xe8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40011000 	.word	0x40011000
 8004274:	58024400 	.word	0x58024400
 8004278:	58020000 	.word	0x58020000

0800427c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004280:	e7fe      	b.n	8004280 <NMI_Handler+0x4>

08004282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004282:	b480      	push	{r7}
 8004284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004286:	e7fe      	b.n	8004286 <HardFault_Handler+0x4>

08004288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800428c:	e7fe      	b.n	800428c <MemManage_Handler+0x4>

0800428e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800428e:	b480      	push	{r7}
 8004290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004292:	e7fe      	b.n	8004292 <BusFault_Handler+0x4>

08004294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004298:	e7fe      	b.n	8004298 <UsageFault_Handler+0x4>

0800429a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800429a:	b480      	push	{r7}
 800429c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800429e:	bf00      	nop
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042ac:	bf00      	nop
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042b6:	b480      	push	{r7}
 80042b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042ba:	bf00      	nop
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042c8:	f000 f9aa 	bl	8004620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042cc:	bf00      	nop
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80042d4:	4802      	ldr	r0, [pc, #8]	; (80042e0 <USART1_IRQHandler+0x10>)
 80042d6:	f009 ffa3 	bl	800e220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	24000328 	.word	0x24000328

080042e4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80042e8:	4802      	ldr	r0, [pc, #8]	; (80042f4 <DMA2_Stream1_IRQHandler+0x10>)
 80042ea:	f002 f8eb 	bl	80064c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	24000124 	.word	0x24000124

080042f8 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80042fc:	4802      	ldr	r0, [pc, #8]	; (8004308 <DCMI_PSSI_IRQHandler+0x10>)
 80042fe:	f000 fc51 	bl	8004ba4 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	240000d4 	.word	0x240000d4

0800430c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004310:	4802      	ldr	r0, [pc, #8]	; (800431c <LTDC_IRQHandler+0x10>)
 8004312:	f006 fbb5 	bl	800aa80 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004316:	bf00      	nop
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	24000258 	.word	0x24000258

08004320 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC Error global Interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004324:	4802      	ldr	r0, [pc, #8]	; (8004330 <LTDC_ER_IRQHandler+0x10>)
 8004326:	f006 fbab 	bl	800aa80 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	24000258 	.word	0x24000258

08004334 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004338:	4802      	ldr	r0, [pc, #8]	; (8004344 <DMA2D_IRQHandler+0x10>)
 800433a:	f003 fcb7 	bl	8007cac <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	2400019c 	.word	0x2400019c

08004348 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 800434c:	4802      	ldr	r0, [pc, #8]	; (8004358 <I2C4_EV_IRQHandler+0x10>)
 800434e:	f005 f8dd 	bl	800950c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8004352:	bf00      	nop
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	24000204 	.word	0x24000204

0800435c <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8004360:	4802      	ldr	r0, [pc, #8]	; (800436c <I2C4_ER_IRQHandler+0x10>)
 8004362:	f005 f8ed 	bl	8009540 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8004366:	bf00      	nop
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	24000204 	.word	0x24000204

08004370 <_lseek>:
//  (void)file;
//  return 1;
//}

int _lseek(int file, int ptr, int dir)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004394:	4a14      	ldr	r2, [pc, #80]	; (80043e8 <_sbrk+0x5c>)
 8004396:	4b15      	ldr	r3, [pc, #84]	; (80043ec <_sbrk+0x60>)
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043a0:	4b13      	ldr	r3, [pc, #76]	; (80043f0 <_sbrk+0x64>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d102      	bne.n	80043ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043a8:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <_sbrk+0x64>)
 80043aa:	4a12      	ldr	r2, [pc, #72]	; (80043f4 <_sbrk+0x68>)
 80043ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043ae:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <_sbrk+0x64>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4413      	add	r3, r2
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d207      	bcs.n	80043cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043bc:	f00b fcf2 	bl	800fda4 <__errno>
 80043c0:	4603      	mov	r3, r0
 80043c2:	220c      	movs	r2, #12
 80043c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043ca:	e009      	b.n	80043e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043cc:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <_sbrk+0x64>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043d2:	4b07      	ldr	r3, [pc, #28]	; (80043f0 <_sbrk+0x64>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4413      	add	r3, r2
 80043da:	4a05      	ldr	r2, [pc, #20]	; (80043f0 <_sbrk+0x64>)
 80043dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043de:	68fb      	ldr	r3, [r7, #12]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	24100000 	.word	0x24100000
 80043ec:	00000400 	.word	0x00000400
 80043f0:	2406094c 	.word	0x2406094c
 80043f4:	24060968 	.word	0x24060968

080043f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043fc:	4b32      	ldr	r3, [pc, #200]	; (80044c8 <SystemInit+0xd0>)
 80043fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004402:	4a31      	ldr	r2, [pc, #196]	; (80044c8 <SystemInit+0xd0>)
 8004404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800440c:	4b2f      	ldr	r3, [pc, #188]	; (80044cc <SystemInit+0xd4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	2b02      	cmp	r3, #2
 8004416:	d807      	bhi.n	8004428 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004418:	4b2c      	ldr	r3, [pc, #176]	; (80044cc <SystemInit+0xd4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f023 030f 	bic.w	r3, r3, #15
 8004420:	4a2a      	ldr	r2, [pc, #168]	; (80044cc <SystemInit+0xd4>)
 8004422:	f043 0303 	orr.w	r3, r3, #3
 8004426:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004428:	4b29      	ldr	r3, [pc, #164]	; (80044d0 <SystemInit+0xd8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a28      	ldr	r2, [pc, #160]	; (80044d0 <SystemInit+0xd8>)
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004434:	4b26      	ldr	r3, [pc, #152]	; (80044d0 <SystemInit+0xd8>)
 8004436:	2200      	movs	r2, #0
 8004438:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800443a:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <SystemInit+0xd8>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	4924      	ldr	r1, [pc, #144]	; (80044d0 <SystemInit+0xd8>)
 8004440:	4b24      	ldr	r3, [pc, #144]	; (80044d4 <SystemInit+0xdc>)
 8004442:	4013      	ands	r3, r2
 8004444:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004446:	4b21      	ldr	r3, [pc, #132]	; (80044cc <SystemInit+0xd4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004452:	4b1e      	ldr	r3, [pc, #120]	; (80044cc <SystemInit+0xd4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f023 030f 	bic.w	r3, r3, #15
 800445a:	4a1c      	ldr	r2, [pc, #112]	; (80044cc <SystemInit+0xd4>)
 800445c:	f043 0303 	orr.w	r3, r3, #3
 8004460:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8004462:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <SystemInit+0xd8>)
 8004464:	2200      	movs	r2, #0
 8004466:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8004468:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <SystemInit+0xd8>)
 800446a:	2200      	movs	r2, #0
 800446c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800446e:	4b18      	ldr	r3, [pc, #96]	; (80044d0 <SystemInit+0xd8>)
 8004470:	2200      	movs	r2, #0
 8004472:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004474:	4b16      	ldr	r3, [pc, #88]	; (80044d0 <SystemInit+0xd8>)
 8004476:	4a18      	ldr	r2, [pc, #96]	; (80044d8 <SystemInit+0xe0>)
 8004478:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800447a:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <SystemInit+0xd8>)
 800447c:	4a17      	ldr	r2, [pc, #92]	; (80044dc <SystemInit+0xe4>)
 800447e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004480:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <SystemInit+0xd8>)
 8004482:	4a17      	ldr	r2, [pc, #92]	; (80044e0 <SystemInit+0xe8>)
 8004484:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <SystemInit+0xd8>)
 8004488:	2200      	movs	r2, #0
 800448a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800448c:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <SystemInit+0xd8>)
 800448e:	4a14      	ldr	r2, [pc, #80]	; (80044e0 <SystemInit+0xe8>)
 8004490:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004492:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <SystemInit+0xd8>)
 8004494:	2200      	movs	r2, #0
 8004496:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004498:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <SystemInit+0xd8>)
 800449a:	4a11      	ldr	r2, [pc, #68]	; (80044e0 <SystemInit+0xe8>)
 800449c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800449e:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <SystemInit+0xd8>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80044a4:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <SystemInit+0xd8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a09      	ldr	r2, [pc, #36]	; (80044d0 <SystemInit+0xd8>)
 80044aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80044b0:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <SystemInit+0xd8>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <SystemInit+0xec>)
 80044b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80044bc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80044be:	bf00      	nop
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	e000ed00 	.word	0xe000ed00
 80044cc:	52002000 	.word	0x52002000
 80044d0:	58024400 	.word	0x58024400
 80044d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80044d8:	02020200 	.word	0x02020200
 80044dc:	01ff0000 	.word	0x01ff0000
 80044e0:	01010280 	.word	0x01010280
 80044e4:	52004000 	.word	0x52004000

080044e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80044e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004520 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80044ec:	f7ff ff84 	bl	80043f8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044f0:	480c      	ldr	r0, [pc, #48]	; (8004524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80044f2:	490d      	ldr	r1, [pc, #52]	; (8004528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80044f4:	4a0d      	ldr	r2, [pc, #52]	; (800452c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80044f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044f8:	e002      	b.n	8004500 <LoopCopyDataInit>

080044fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044fe:	3304      	adds	r3, #4

08004500 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8004500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004504:	d3f9      	bcc.n	80044fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004506:	4a0a      	ldr	r2, [pc, #40]	; (8004530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004508:	4c0a      	ldr	r4, [pc, #40]	; (8004534 <LoopFillZerobss+0x22>)
  movs r3, #0
 800450a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800450c:	e001      	b.n	8004512 <LoopFillZerobss>

0800450e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800450e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004510:	3204      	adds	r2, #4

08004512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004514:	d3fb      	bcc.n	800450e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004516:	f00b fc4b 	bl	800fdb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800451a:	f7fc f8bb 	bl	8000694 <main>
  bx  lr
 800451e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004520:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8004524:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004528:	240000b8 	.word	0x240000b8
  ldr r2, =_sidata
 800452c:	080116dc 	.word	0x080116dc
  ldr r2, =_sbss
 8004530:	240000b8 	.word	0x240000b8
  ldr r4, =_ebss
 8004534:	24060964 	.word	0x24060964

08004538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004538:	e7fe      	b.n	8004538 <ADC_IRQHandler>
	...

0800453c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004542:	2003      	movs	r0, #3
 8004544:	f000 f9a4 	bl	8004890 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004548:	f007 fbf0 	bl	800bd2c <HAL_RCC_GetSysClockFreq>
 800454c:	4602      	mov	r2, r0
 800454e:	4b15      	ldr	r3, [pc, #84]	; (80045a4 <HAL_Init+0x68>)
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	4913      	ldr	r1, [pc, #76]	; (80045a8 <HAL_Init+0x6c>)
 800455a:	5ccb      	ldrb	r3, [r1, r3]
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
 8004564:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004566:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <HAL_Init+0x68>)
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	4a0e      	ldr	r2, [pc, #56]	; (80045a8 <HAL_Init+0x6c>)
 8004570:	5cd3      	ldrb	r3, [r2, r3]
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
 800457c:	4a0b      	ldr	r2, [pc, #44]	; (80045ac <HAL_Init+0x70>)
 800457e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004580:	4a0b      	ldr	r2, [pc, #44]	; (80045b0 <HAL_Init+0x74>)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004586:	2000      	movs	r0, #0
 8004588:	f000 f814 	bl	80045b4 <HAL_InitTick>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e002      	b.n	800459c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004596:	f7ff fb01 	bl	8003b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	58024400 	.word	0x58024400
 80045a8:	080115f4 	.word	0x080115f4
 80045ac:	24000048 	.word	0x24000048
 80045b0:	24000044 	.word	0x24000044

080045b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80045bc:	4b15      	ldr	r3, [pc, #84]	; (8004614 <HAL_InitTick+0x60>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e021      	b.n	800460c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80045c8:	4b13      	ldr	r3, [pc, #76]	; (8004618 <HAL_InitTick+0x64>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <HAL_InitTick+0x60>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	4619      	mov	r1, r3
 80045d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80045da:	fbb2 f3f3 	udiv	r3, r2, r3
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f997 	bl	8004912 <HAL_SYSTICK_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e00e      	b.n	800460c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b0f      	cmp	r3, #15
 80045f2:	d80a      	bhi.n	800460a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045f4:	2200      	movs	r2, #0
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045fc:	f000 f953 	bl	80048a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004600:	4a06      	ldr	r2, [pc, #24]	; (800461c <HAL_InitTick+0x68>)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	e000      	b.n	800460c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
}
 800460c:	4618      	mov	r0, r3
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	24000050 	.word	0x24000050
 8004618:	24000044 	.word	0x24000044
 800461c:	2400004c 	.word	0x2400004c

08004620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004624:	4b06      	ldr	r3, [pc, #24]	; (8004640 <HAL_IncTick+0x20>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	4b06      	ldr	r3, [pc, #24]	; (8004644 <HAL_IncTick+0x24>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4413      	add	r3, r2
 8004630:	4a04      	ldr	r2, [pc, #16]	; (8004644 <HAL_IncTick+0x24>)
 8004632:	6013      	str	r3, [r2, #0]
}
 8004634:	bf00      	nop
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	24000050 	.word	0x24000050
 8004644:	24060950 	.word	0x24060950

08004648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return uwTick;
 800464c:	4b03      	ldr	r3, [pc, #12]	; (800465c <HAL_GetTick+0x14>)
 800464e:	681b      	ldr	r3, [r3, #0]
}
 8004650:	4618      	mov	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	24060950 	.word	0x24060950

08004660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004668:	f7ff ffee 	bl	8004648 <HAL_GetTick>
 800466c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004678:	d005      	beq.n	8004686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800467a:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <HAL_Delay+0x44>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004686:	bf00      	nop
 8004688:	f7ff ffde 	bl	8004648 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	429a      	cmp	r2, r3
 8004696:	d8f7      	bhi.n	8004688 <HAL_Delay+0x28>
  {
  }
}
 8004698:	bf00      	nop
 800469a:	bf00      	nop
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	24000050 	.word	0x24000050

080046a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046b8:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <__NVIC_SetPriorityGrouping+0x40>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046c4:	4013      	ands	r3, r2
 80046c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80046d0:	4b06      	ldr	r3, [pc, #24]	; (80046ec <__NVIC_SetPriorityGrouping+0x44>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046d6:	4a04      	ldr	r2, [pc, #16]	; (80046e8 <__NVIC_SetPriorityGrouping+0x40>)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	60d3      	str	r3, [r2, #12]
}
 80046dc:	bf00      	nop
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	e000ed00 	.word	0xe000ed00
 80046ec:	05fa0000 	.word	0x05fa0000

080046f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046f4:	4b04      	ldr	r3, [pc, #16]	; (8004708 <__NVIC_GetPriorityGrouping+0x18>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	0a1b      	lsrs	r3, r3, #8
 80046fa:	f003 0307 	and.w	r3, r3, #7
}
 80046fe:	4618      	mov	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	e000ed00 	.word	0xe000ed00

0800470c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	4603      	mov	r3, r0
 8004714:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800471a:	2b00      	cmp	r3, #0
 800471c:	db0b      	blt.n	8004736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800471e:	88fb      	ldrh	r3, [r7, #6]
 8004720:	f003 021f 	and.w	r2, r3, #31
 8004724:	4907      	ldr	r1, [pc, #28]	; (8004744 <__NVIC_EnableIRQ+0x38>)
 8004726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	2001      	movs	r0, #1
 800472e:	fa00 f202 	lsl.w	r2, r0, r2
 8004732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	e000e100 	.word	0xe000e100

08004748 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004756:	2b00      	cmp	r3, #0
 8004758:	db12      	blt.n	8004780 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800475a:	88fb      	ldrh	r3, [r7, #6]
 800475c:	f003 021f 	and.w	r2, r3, #31
 8004760:	490a      	ldr	r1, [pc, #40]	; (800478c <__NVIC_DisableIRQ+0x44>)
 8004762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	2001      	movs	r0, #1
 800476a:	fa00 f202 	lsl.w	r2, r0, r2
 800476e:	3320      	adds	r3, #32
 8004770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004774:	f3bf 8f4f 	dsb	sy
}
 8004778:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800477a:	f3bf 8f6f 	isb	sy
}
 800477e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	e000e100 	.word	0xe000e100

08004790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	6039      	str	r1, [r7, #0]
 800479a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800479c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	db0a      	blt.n	80047ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	490c      	ldr	r1, [pc, #48]	; (80047dc <__NVIC_SetPriority+0x4c>)
 80047aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047ae:	0112      	lsls	r2, r2, #4
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	440b      	add	r3, r1
 80047b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047b8:	e00a      	b.n	80047d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	4908      	ldr	r1, [pc, #32]	; (80047e0 <__NVIC_SetPriority+0x50>)
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	3b04      	subs	r3, #4
 80047c8:	0112      	lsls	r2, r2, #4
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	440b      	add	r3, r1
 80047ce:	761a      	strb	r2, [r3, #24]
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	e000e100 	.word	0xe000e100
 80047e0:	e000ed00 	.word	0xe000ed00

080047e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b089      	sub	sp, #36	; 0x24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f1c3 0307 	rsb	r3, r3, #7
 80047fe:	2b04      	cmp	r3, #4
 8004800:	bf28      	it	cs
 8004802:	2304      	movcs	r3, #4
 8004804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	3304      	adds	r3, #4
 800480a:	2b06      	cmp	r3, #6
 800480c:	d902      	bls.n	8004814 <NVIC_EncodePriority+0x30>
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	3b03      	subs	r3, #3
 8004812:	e000      	b.n	8004816 <NVIC_EncodePriority+0x32>
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004818:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43da      	mvns	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	401a      	ands	r2, r3
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800482c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	fa01 f303 	lsl.w	r3, r1, r3
 8004836:	43d9      	mvns	r1, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800483c:	4313      	orrs	r3, r2
         );
}
 800483e:	4618      	mov	r0, r3
 8004840:	3724      	adds	r7, #36	; 0x24
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
	...

0800484c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3b01      	subs	r3, #1
 8004858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800485c:	d301      	bcc.n	8004862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800485e:	2301      	movs	r3, #1
 8004860:	e00f      	b.n	8004882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004862:	4a0a      	ldr	r2, [pc, #40]	; (800488c <SysTick_Config+0x40>)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3b01      	subs	r3, #1
 8004868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800486a:	210f      	movs	r1, #15
 800486c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004870:	f7ff ff8e 	bl	8004790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004874:	4b05      	ldr	r3, [pc, #20]	; (800488c <SysTick_Config+0x40>)
 8004876:	2200      	movs	r2, #0
 8004878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800487a:	4b04      	ldr	r3, [pc, #16]	; (800488c <SysTick_Config+0x40>)
 800487c:	2207      	movs	r2, #7
 800487e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	e000e010 	.word	0xe000e010

08004890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff ff05 	bl	80046a8 <__NVIC_SetPriorityGrouping>
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b086      	sub	sp, #24
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	4603      	mov	r3, r0
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
 80048b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048b4:	f7ff ff1c 	bl	80046f0 <__NVIC_GetPriorityGrouping>
 80048b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	6978      	ldr	r0, [r7, #20]
 80048c0:	f7ff ff90 	bl	80047e4 <NVIC_EncodePriority>
 80048c4:	4602      	mov	r2, r0
 80048c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048ca:	4611      	mov	r1, r2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff ff5f 	bl	8004790 <__NVIC_SetPriority>
}
 80048d2:	bf00      	nop
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	4603      	mov	r3, r0
 80048e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff ff0f 	bl	800470c <__NVIC_EnableIRQ>
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b082      	sub	sp, #8
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	4603      	mov	r3, r0
 80048fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004900:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff ff1f 	bl	8004748 <__NVIC_DisableIRQ>
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff ff96 	bl	800484c <SysTick_Config>
 8004920:	4603      	mov	r3, r0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
	...

0800492c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e069      	b.n	8004a12 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d102      	bne.n	8004950 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7ff f940 	bl	8003bd0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6819      	ldr	r1, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	4b2a      	ldr	r3, [pc, #168]	; (8004a1c <HAL_DCMI_Init+0xf0>)
 8004972:	400b      	ands	r3, r1
 8004974:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6819      	ldr	r1, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800498a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004996:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80049a2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80049ae:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80049ba:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b10      	cmp	r3, #16
 80049ca:	d112      	bne.n	80049f2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	7f1b      	ldrb	r3, [r3, #28]
 80049d0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	7f5b      	ldrb	r3, [r3, #29]
 80049d6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80049d8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	7f9b      	ldrb	r3, [r3, #30]
 80049de:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80049e0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	7fdb      	ldrb	r3, [r3, #31]
 80049e8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80049ee:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80049f0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 021e 	orr.w	r2, r2, #30
 8004a00:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	ffe0f007 	.word	0xffe0f007

08004a20 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_DCMI_Start_DMA+0x1c>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e0ab      	b.n	8004b94 <HAL_DCMI_Start_DMA+0x174>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a5a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0202 	bic.w	r2, r2, #2
 8004a6a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6819      	ldr	r1, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a80:	4a46      	ldr	r2, [pc, #280]	; (8004b9c <HAL_DCMI_Start_DMA+0x17c>)
 8004a82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a88:	4a45      	ldr	r2, [pc, #276]	; (8004ba0 <HAL_DCMI_Start_DMA+0x180>)
 8004a8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a90:	2200      	movs	r2, #0
 8004a92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab2:	d219      	bcs.n	8004ae8 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3328      	adds	r3, #40	; 0x28
 8004abe:	4619      	mov	r1, r3
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	f000 fd30 	bl	8005528 <HAL_DMA_Start_IT>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d055      	beq.n	8004b7a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2240      	movs	r2, #64	; 0x40
 8004ad2:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e055      	b.n	8004b94 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aec:	4a2b      	ldr	r2, [pc, #172]	; (8004b9c <HAL_DCMI_Start_DMA+0x17c>)
 8004aee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2201      	movs	r2, #1
 8004af4:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8004b02:	e009      	b.n	8004b18 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b08:	085a      	lsrs	r2, r3, #1
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	005a      	lsls	r2, r3, #1
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b20:	d2f0      	bcs.n	8004b04 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b26:	1e9a      	subs	r2, r3, #2
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3328      	adds	r3, #40	; 0x28
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	f003 fa67 	bl	8008028 <HAL_DMAEx_MultiBufferStart_IT>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00c      	beq.n	8004b7a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2240      	movs	r2, #64	; 0x40
 8004b64:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e00c      	b.n	8004b94 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0201 	orr.w	r2, r2, #1
 8004b88:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	08004ca9 	.word	0x08004ca9
 8004ba0:	08004dcf 	.word	0x08004dcf

08004ba4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d016      	beq.n	8004bec <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bca:	f043 0202 	orr.w	r2, r3, #2
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2204      	movs	r2, #4
 8004bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bde:	4a31      	ldr	r2, [pc, #196]	; (8004ca4 <HAL_DCMI_IRQHandler+0x100>)
 8004be0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be6:	4618      	mov	r0, r3
 8004be8:	f001 fa26 	bl	8006038 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d016      	beq.n	8004c24 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c02:	f043 0201 	orr.w	r2, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c16:	4a23      	ldr	r2, [pc, #140]	; (8004ca4 <HAL_DCMI_IRQHandler+0x100>)
 8004c18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f001 fa0a 	bl	8006038 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d006      	beq.n	8004c3c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2210      	movs	r2, #16
 8004c34:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fe fdb8 	bl	80037ac <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d006      	beq.n	8004c54 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2208      	movs	r2, #8
 8004c4c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fe fdc2 	bl	80037d8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d01d      	beq.n	8004c9a <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d107      	bne.n	8004c7c <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 021e 	bic.w	r2, r2, #30
 8004c7a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0201 	bic.w	r2, r2, #1
 8004c8a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2201      	movs	r2, #1
 8004c92:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7fe fd94 	bl	80037c2 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004c9a:	bf00      	nop
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	08004dcf 	.word	0x08004dcf

08004ca8 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d043      	beq.n	8004d46 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cca:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d118      	bne.n	8004d0a <DCMI_DMAXferCplt+0x62>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d015      	beq.n	8004d0a <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf0:	00da      	lsls	r2, r3, #3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	f003 fcf3 	bl	80086e4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	1e5a      	subs	r2, r3, #1
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38
 8004d08:	e044      	b.n	8004d94 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d13c      	bne.n	8004d94 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2c:	00da      	lsls	r2, r3, #3
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	4413      	add	r3, r2
 8004d32:	2201      	movs	r2, #1
 8004d34:	4619      	mov	r1, r3
 8004d36:	f003 fcd5 	bl	80086e4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3e:	1e5a      	subs	r2, r3, #1
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38
 8004d44:	e026      	b.n	8004d94 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d006      	beq.n	8004d64 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d60:	60da      	str	r2, [r3, #12]
 8004d62:	e017      	b.n	8004d94 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10f      	bne.n	8004d94 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d78:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7e:	0099      	lsls	r1, r3, #2
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	440a      	add	r2, r1
 8004d8a:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d112      	bne.n	8004dc6 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d103      	bne.n	8004dc6 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8004dc6:	bf00      	nop
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b084      	sub	sp, #16
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d009      	beq.n	8004dfa <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f7fe fcf7 	bl	80037ee <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8004e00:	bf00      	nop
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004e10:	f7ff fc1a 	bl	8004648 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e37f      	b.n	8005520 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a66      	ldr	r2, [pc, #408]	; (8004fc0 <HAL_DMA_Init+0x1b8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d04a      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a65      	ldr	r2, [pc, #404]	; (8004fc4 <HAL_DMA_Init+0x1bc>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d045      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a63      	ldr	r2, [pc, #396]	; (8004fc8 <HAL_DMA_Init+0x1c0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d040      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a62      	ldr	r2, [pc, #392]	; (8004fcc <HAL_DMA_Init+0x1c4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d03b      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a60      	ldr	r2, [pc, #384]	; (8004fd0 <HAL_DMA_Init+0x1c8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d036      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a5f      	ldr	r2, [pc, #380]	; (8004fd4 <HAL_DMA_Init+0x1cc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d031      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a5d      	ldr	r2, [pc, #372]	; (8004fd8 <HAL_DMA_Init+0x1d0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d02c      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a5c      	ldr	r2, [pc, #368]	; (8004fdc <HAL_DMA_Init+0x1d4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d027      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a5a      	ldr	r2, [pc, #360]	; (8004fe0 <HAL_DMA_Init+0x1d8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d022      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a59      	ldr	r2, [pc, #356]	; (8004fe4 <HAL_DMA_Init+0x1dc>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d01d      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a57      	ldr	r2, [pc, #348]	; (8004fe8 <HAL_DMA_Init+0x1e0>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d018      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a56      	ldr	r2, [pc, #344]	; (8004fec <HAL_DMA_Init+0x1e4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d013      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a54      	ldr	r2, [pc, #336]	; (8004ff0 <HAL_DMA_Init+0x1e8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00e      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a53      	ldr	r2, [pc, #332]	; (8004ff4 <HAL_DMA_Init+0x1ec>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d009      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a51      	ldr	r2, [pc, #324]	; (8004ff8 <HAL_DMA_Init+0x1f0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <HAL_DMA_Init+0xb8>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a50      	ldr	r2, [pc, #320]	; (8004ffc <HAL_DMA_Init+0x1f4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d101      	bne.n	8004ec4 <HAL_DMA_Init+0xbc>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <HAL_DMA_Init+0xbe>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 813c 	beq.w	8005144 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a37      	ldr	r2, [pc, #220]	; (8004fc0 <HAL_DMA_Init+0x1b8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d04a      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a36      	ldr	r2, [pc, #216]	; (8004fc4 <HAL_DMA_Init+0x1bc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d045      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a34      	ldr	r2, [pc, #208]	; (8004fc8 <HAL_DMA_Init+0x1c0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d040      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a33      	ldr	r2, [pc, #204]	; (8004fcc <HAL_DMA_Init+0x1c4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d03b      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a31      	ldr	r2, [pc, #196]	; (8004fd0 <HAL_DMA_Init+0x1c8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d036      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a30      	ldr	r2, [pc, #192]	; (8004fd4 <HAL_DMA_Init+0x1cc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d031      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a2e      	ldr	r2, [pc, #184]	; (8004fd8 <HAL_DMA_Init+0x1d0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d02c      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a2d      	ldr	r2, [pc, #180]	; (8004fdc <HAL_DMA_Init+0x1d4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d027      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a2b      	ldr	r2, [pc, #172]	; (8004fe0 <HAL_DMA_Init+0x1d8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d022      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a2a      	ldr	r2, [pc, #168]	; (8004fe4 <HAL_DMA_Init+0x1dc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d01d      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a28      	ldr	r2, [pc, #160]	; (8004fe8 <HAL_DMA_Init+0x1e0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d018      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a27      	ldr	r2, [pc, #156]	; (8004fec <HAL_DMA_Init+0x1e4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d013      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a25      	ldr	r2, [pc, #148]	; (8004ff0 <HAL_DMA_Init+0x1e8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00e      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a24      	ldr	r2, [pc, #144]	; (8004ff4 <HAL_DMA_Init+0x1ec>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d009      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a22      	ldr	r2, [pc, #136]	; (8004ff8 <HAL_DMA_Init+0x1f0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d004      	beq.n	8004f7c <HAL_DMA_Init+0x174>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a21      	ldr	r2, [pc, #132]	; (8004ffc <HAL_DMA_Init+0x1f4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d108      	bne.n	8004f8e <HAL_DMA_Init+0x186>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0201 	bic.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	e007      	b.n	8004f9e <HAL_DMA_Init+0x196>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0201 	bic.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f9e:	e02f      	b.n	8005000 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fa0:	f7ff fb52 	bl	8004648 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b05      	cmp	r3, #5
 8004fac:	d928      	bls.n	8005000 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2203      	movs	r2, #3
 8004fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e2af      	b.n	8005520 <HAL_DMA_Init+0x718>
 8004fc0:	40020010 	.word	0x40020010
 8004fc4:	40020028 	.word	0x40020028
 8004fc8:	40020040 	.word	0x40020040
 8004fcc:	40020058 	.word	0x40020058
 8004fd0:	40020070 	.word	0x40020070
 8004fd4:	40020088 	.word	0x40020088
 8004fd8:	400200a0 	.word	0x400200a0
 8004fdc:	400200b8 	.word	0x400200b8
 8004fe0:	40020410 	.word	0x40020410
 8004fe4:	40020428 	.word	0x40020428
 8004fe8:	40020440 	.word	0x40020440
 8004fec:	40020458 	.word	0x40020458
 8004ff0:	40020470 	.word	0x40020470
 8004ff4:	40020488 	.word	0x40020488
 8004ff8:	400204a0 	.word	0x400204a0
 8004ffc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1c8      	bne.n	8004fa0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4b73      	ldr	r3, [pc, #460]	; (80051e8 <HAL_DMA_Init+0x3e0>)
 800501a:	4013      	ands	r3, r2
 800501c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005026:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005032:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800503e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2b04      	cmp	r3, #4
 8005052:	d107      	bne.n	8005064 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	4313      	orrs	r3, r2
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b28      	cmp	r3, #40	; 0x28
 800506a:	d903      	bls.n	8005074 <HAL_DMA_Init+0x26c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b2e      	cmp	r3, #46	; 0x2e
 8005072:	d91f      	bls.n	80050b4 <HAL_DMA_Init+0x2ac>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b3e      	cmp	r3, #62	; 0x3e
 800507a:	d903      	bls.n	8005084 <HAL_DMA_Init+0x27c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b42      	cmp	r3, #66	; 0x42
 8005082:	d917      	bls.n	80050b4 <HAL_DMA_Init+0x2ac>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b46      	cmp	r3, #70	; 0x46
 800508a:	d903      	bls.n	8005094 <HAL_DMA_Init+0x28c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b48      	cmp	r3, #72	; 0x48
 8005092:	d90f      	bls.n	80050b4 <HAL_DMA_Init+0x2ac>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b4e      	cmp	r3, #78	; 0x4e
 800509a:	d903      	bls.n	80050a4 <HAL_DMA_Init+0x29c>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b52      	cmp	r3, #82	; 0x52
 80050a2:	d907      	bls.n	80050b4 <HAL_DMA_Init+0x2ac>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b73      	cmp	r3, #115	; 0x73
 80050aa:	d905      	bls.n	80050b8 <HAL_DMA_Init+0x2b0>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b77      	cmp	r3, #119	; 0x77
 80050b2:	d801      	bhi.n	80050b8 <HAL_DMA_Init+0x2b0>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <HAL_DMA_Init+0x2b2>
 80050b8:	2300      	movs	r3, #0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050c4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f023 0307 	bic.w	r3, r3, #7
 80050dc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d117      	bne.n	8005120 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00e      	beq.n	8005120 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f002 fbe4 	bl	80078d0 <DMA_CheckFifoParam>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d008      	beq.n	8005120 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2240      	movs	r2, #64	; 0x40
 8005112:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e1ff      	b.n	8005520 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f002 fb1f 	bl	800776c <DMA_CalcBaseAndBitshift>
 800512e:	4603      	mov	r3, r0
 8005130:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005136:	f003 031f 	and.w	r3, r3, #31
 800513a:	223f      	movs	r2, #63	; 0x3f
 800513c:	409a      	lsls	r2, r3
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	609a      	str	r2, [r3, #8]
 8005142:	e0fe      	b.n	8005342 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a28      	ldr	r2, [pc, #160]	; (80051ec <HAL_DMA_Init+0x3e4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d04a      	beq.n	80051e4 <HAL_DMA_Init+0x3dc>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a27      	ldr	r2, [pc, #156]	; (80051f0 <HAL_DMA_Init+0x3e8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d045      	beq.n	80051e4 <HAL_DMA_Init+0x3dc>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a25      	ldr	r2, [pc, #148]	; (80051f4 <HAL_DMA_Init+0x3ec>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d040      	beq.n	80051e4 <HAL_DMA_Init+0x3dc>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a24      	ldr	r2, [pc, #144]	; (80051f8 <HAL_DMA_Init+0x3f0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d03b      	beq.n	80051e4 <HAL_DMA_Init+0x3dc>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a22      	ldr	r2, [pc, #136]	; (80051fc <HAL_DMA_Init+0x3f4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d036      	beq.n	80051e4 <HAL_DMA_Init+0x3dc>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a21      	ldr	r2, [pc, #132]	; (8005200 <HAL_DMA_Init+0x3f8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d031      	beq.n	80051e4 <HAL_DMA_Init+0x3dc>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <HAL_DMA_Init+0x3fc>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d02c      	beq.n	80051e4 <HAL_DMA_Init+0x3dc>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1e      	ldr	r2, [pc, #120]	; (8005208 <HAL_DMA_Init+0x400>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d027      	beq.n	80051e4 <HAL_DMA_Init+0x3dc>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a1c      	ldr	r2, [pc, #112]	; (800520c <HAL_DMA_Init+0x404>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d022      	beq.n	80051e4 <HAL_DMA_Init+0x3dc>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a1b      	ldr	r2, [pc, #108]	; (8005210 <HAL_DMA_Init+0x408>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d01d      	beq.n	80051e4 <HAL_DMA_Init+0x3dc>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a19      	ldr	r2, [pc, #100]	; (8005214 <HAL_DMA_Init+0x40c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d018      	beq.n	80051e4 <HAL_DMA_Init+0x3dc>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a18      	ldr	r2, [pc, #96]	; (8005218 <HAL_DMA_Init+0x410>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d013      	beq.n	80051e4 <HAL_DMA_Init+0x3dc>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a16      	ldr	r2, [pc, #88]	; (800521c <HAL_DMA_Init+0x414>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00e      	beq.n	80051e4 <HAL_DMA_Init+0x3dc>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a15      	ldr	r2, [pc, #84]	; (8005220 <HAL_DMA_Init+0x418>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d009      	beq.n	80051e4 <HAL_DMA_Init+0x3dc>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a13      	ldr	r2, [pc, #76]	; (8005224 <HAL_DMA_Init+0x41c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d004      	beq.n	80051e4 <HAL_DMA_Init+0x3dc>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a12      	ldr	r2, [pc, #72]	; (8005228 <HAL_DMA_Init+0x420>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d123      	bne.n	800522c <HAL_DMA_Init+0x424>
 80051e4:	2301      	movs	r3, #1
 80051e6:	e022      	b.n	800522e <HAL_DMA_Init+0x426>
 80051e8:	fe10803f 	.word	0xfe10803f
 80051ec:	48022c08 	.word	0x48022c08
 80051f0:	48022c1c 	.word	0x48022c1c
 80051f4:	48022c30 	.word	0x48022c30
 80051f8:	48022c44 	.word	0x48022c44
 80051fc:	48022c58 	.word	0x48022c58
 8005200:	48022c6c 	.word	0x48022c6c
 8005204:	48022c80 	.word	0x48022c80
 8005208:	48022c94 	.word	0x48022c94
 800520c:	58025408 	.word	0x58025408
 8005210:	5802541c 	.word	0x5802541c
 8005214:	58025430 	.word	0x58025430
 8005218:	58025444 	.word	0x58025444
 800521c:	58025458 	.word	0x58025458
 8005220:	5802546c 	.word	0x5802546c
 8005224:	58025480 	.word	0x58025480
 8005228:	58025494 	.word	0x58025494
 800522c:	2300      	movs	r3, #0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d07e      	beq.n	8005330 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a80      	ldr	r2, [pc, #512]	; (8005438 <HAL_DMA_Init+0x630>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d021      	beq.n	8005280 <HAL_DMA_Init+0x478>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a7e      	ldr	r2, [pc, #504]	; (800543c <HAL_DMA_Init+0x634>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d01c      	beq.n	8005280 <HAL_DMA_Init+0x478>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a7d      	ldr	r2, [pc, #500]	; (8005440 <HAL_DMA_Init+0x638>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d017      	beq.n	8005280 <HAL_DMA_Init+0x478>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a7b      	ldr	r2, [pc, #492]	; (8005444 <HAL_DMA_Init+0x63c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d012      	beq.n	8005280 <HAL_DMA_Init+0x478>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a7a      	ldr	r2, [pc, #488]	; (8005448 <HAL_DMA_Init+0x640>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00d      	beq.n	8005280 <HAL_DMA_Init+0x478>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a78      	ldr	r2, [pc, #480]	; (800544c <HAL_DMA_Init+0x644>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d008      	beq.n	8005280 <HAL_DMA_Init+0x478>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a77      	ldr	r2, [pc, #476]	; (8005450 <HAL_DMA_Init+0x648>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <HAL_DMA_Init+0x478>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a75      	ldr	r2, [pc, #468]	; (8005454 <HAL_DMA_Init+0x64c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2202      	movs	r2, #2
 8005286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4b6e      	ldr	r3, [pc, #440]	; (8005458 <HAL_DMA_Init+0x650>)
 800529e:	4013      	ands	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b40      	cmp	r3, #64	; 0x40
 80052a8:	d008      	beq.n	80052bc <HAL_DMA_Init+0x4b4>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2b80      	cmp	r3, #128	; 0x80
 80052b0:	d102      	bne.n	80052b8 <HAL_DMA_Init+0x4b0>
 80052b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052b6:	e002      	b.n	80052be <HAL_DMA_Init+0x4b6>
 80052b8:	2300      	movs	r3, #0
 80052ba:	e000      	b.n	80052be <HAL_DMA_Init+0x4b6>
 80052bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	68d2      	ldr	r2, [r2, #12]
 80052c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80052cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80052d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80052dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80052e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80052ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	4b56      	ldr	r3, [pc, #344]	; (800545c <HAL_DMA_Init+0x654>)
 8005304:	4413      	add	r3, r2
 8005306:	4a56      	ldr	r2, [pc, #344]	; (8005460 <HAL_DMA_Init+0x658>)
 8005308:	fba2 2303 	umull	r2, r3, r2, r3
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	009a      	lsls	r2, r3, #2
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f002 fa29 	bl	800776c <DMA_CalcBaseAndBitshift>
 800531a:	4603      	mov	r3, r0
 800531c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005322:	f003 031f 	and.w	r3, r3, #31
 8005326:	2201      	movs	r2, #1
 8005328:	409a      	lsls	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	605a      	str	r2, [r3, #4]
 800532e:	e008      	b.n	8005342 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2240      	movs	r2, #64	; 0x40
 8005334:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2203      	movs	r2, #3
 800533a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e0ee      	b.n	8005520 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a47      	ldr	r2, [pc, #284]	; (8005464 <HAL_DMA_Init+0x65c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d072      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a45      	ldr	r2, [pc, #276]	; (8005468 <HAL_DMA_Init+0x660>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d06d      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a44      	ldr	r2, [pc, #272]	; (800546c <HAL_DMA_Init+0x664>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d068      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a42      	ldr	r2, [pc, #264]	; (8005470 <HAL_DMA_Init+0x668>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d063      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a41      	ldr	r2, [pc, #260]	; (8005474 <HAL_DMA_Init+0x66c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d05e      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a3f      	ldr	r2, [pc, #252]	; (8005478 <HAL_DMA_Init+0x670>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d059      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a3e      	ldr	r2, [pc, #248]	; (800547c <HAL_DMA_Init+0x674>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d054      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a3c      	ldr	r2, [pc, #240]	; (8005480 <HAL_DMA_Init+0x678>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d04f      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a3b      	ldr	r2, [pc, #236]	; (8005484 <HAL_DMA_Init+0x67c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d04a      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a39      	ldr	r2, [pc, #228]	; (8005488 <HAL_DMA_Init+0x680>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d045      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a38      	ldr	r2, [pc, #224]	; (800548c <HAL_DMA_Init+0x684>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d040      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a36      	ldr	r2, [pc, #216]	; (8005490 <HAL_DMA_Init+0x688>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d03b      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a35      	ldr	r2, [pc, #212]	; (8005494 <HAL_DMA_Init+0x68c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d036      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a33      	ldr	r2, [pc, #204]	; (8005498 <HAL_DMA_Init+0x690>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d031      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a32      	ldr	r2, [pc, #200]	; (800549c <HAL_DMA_Init+0x694>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d02c      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a30      	ldr	r2, [pc, #192]	; (80054a0 <HAL_DMA_Init+0x698>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d027      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a14      	ldr	r2, [pc, #80]	; (8005438 <HAL_DMA_Init+0x630>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d022      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a12      	ldr	r2, [pc, #72]	; (800543c <HAL_DMA_Init+0x634>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d01d      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a11      	ldr	r2, [pc, #68]	; (8005440 <HAL_DMA_Init+0x638>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d018      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a0f      	ldr	r2, [pc, #60]	; (8005444 <HAL_DMA_Init+0x63c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d013      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a0e      	ldr	r2, [pc, #56]	; (8005448 <HAL_DMA_Init+0x640>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00e      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a0c      	ldr	r2, [pc, #48]	; (800544c <HAL_DMA_Init+0x644>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d009      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a0b      	ldr	r2, [pc, #44]	; (8005450 <HAL_DMA_Init+0x648>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d004      	beq.n	8005432 <HAL_DMA_Init+0x62a>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a09      	ldr	r2, [pc, #36]	; (8005454 <HAL_DMA_Init+0x64c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d138      	bne.n	80054a4 <HAL_DMA_Init+0x69c>
 8005432:	2301      	movs	r3, #1
 8005434:	e037      	b.n	80054a6 <HAL_DMA_Init+0x69e>
 8005436:	bf00      	nop
 8005438:	58025408 	.word	0x58025408
 800543c:	5802541c 	.word	0x5802541c
 8005440:	58025430 	.word	0x58025430
 8005444:	58025444 	.word	0x58025444
 8005448:	58025458 	.word	0x58025458
 800544c:	5802546c 	.word	0x5802546c
 8005450:	58025480 	.word	0x58025480
 8005454:	58025494 	.word	0x58025494
 8005458:	fffe000f 	.word	0xfffe000f
 800545c:	a7fdabf8 	.word	0xa7fdabf8
 8005460:	cccccccd 	.word	0xcccccccd
 8005464:	40020010 	.word	0x40020010
 8005468:	40020028 	.word	0x40020028
 800546c:	40020040 	.word	0x40020040
 8005470:	40020058 	.word	0x40020058
 8005474:	40020070 	.word	0x40020070
 8005478:	40020088 	.word	0x40020088
 800547c:	400200a0 	.word	0x400200a0
 8005480:	400200b8 	.word	0x400200b8
 8005484:	40020410 	.word	0x40020410
 8005488:	40020428 	.word	0x40020428
 800548c:	40020440 	.word	0x40020440
 8005490:	40020458 	.word	0x40020458
 8005494:	40020470 	.word	0x40020470
 8005498:	40020488 	.word	0x40020488
 800549c:	400204a0 	.word	0x400204a0
 80054a0:	400204b8 	.word	0x400204b8
 80054a4:	2300      	movs	r3, #0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d032      	beq.n	8005510 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f002 fa8c 	bl	80079c8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	2b80      	cmp	r3, #128	; 0x80
 80054b6:	d102      	bne.n	80054be <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80054d2:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d010      	beq.n	80054fe <HAL_DMA_Init+0x6f6>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d80c      	bhi.n	80054fe <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f002 fb09 	bl	8007afc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054fa:	605a      	str	r2, [r3, #4]
 80054fc:	e008      	b.n	8005510 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e226      	b.n	8005992 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_DMA_Start_IT+0x2a>
 800554e:	2302      	movs	r3, #2
 8005550:	e21f      	b.n	8005992 <HAL_DMA_Start_IT+0x46a>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b01      	cmp	r3, #1
 8005564:	f040 820a 	bne.w	800597c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a68      	ldr	r2, [pc, #416]	; (800571c <HAL_DMA_Start_IT+0x1f4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d04a      	beq.n	8005616 <HAL_DMA_Start_IT+0xee>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a66      	ldr	r2, [pc, #408]	; (8005720 <HAL_DMA_Start_IT+0x1f8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d045      	beq.n	8005616 <HAL_DMA_Start_IT+0xee>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a65      	ldr	r2, [pc, #404]	; (8005724 <HAL_DMA_Start_IT+0x1fc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d040      	beq.n	8005616 <HAL_DMA_Start_IT+0xee>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a63      	ldr	r2, [pc, #396]	; (8005728 <HAL_DMA_Start_IT+0x200>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d03b      	beq.n	8005616 <HAL_DMA_Start_IT+0xee>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a62      	ldr	r2, [pc, #392]	; (800572c <HAL_DMA_Start_IT+0x204>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d036      	beq.n	8005616 <HAL_DMA_Start_IT+0xee>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a60      	ldr	r2, [pc, #384]	; (8005730 <HAL_DMA_Start_IT+0x208>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d031      	beq.n	8005616 <HAL_DMA_Start_IT+0xee>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a5f      	ldr	r2, [pc, #380]	; (8005734 <HAL_DMA_Start_IT+0x20c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d02c      	beq.n	8005616 <HAL_DMA_Start_IT+0xee>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a5d      	ldr	r2, [pc, #372]	; (8005738 <HAL_DMA_Start_IT+0x210>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d027      	beq.n	8005616 <HAL_DMA_Start_IT+0xee>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a5c      	ldr	r2, [pc, #368]	; (800573c <HAL_DMA_Start_IT+0x214>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d022      	beq.n	8005616 <HAL_DMA_Start_IT+0xee>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a5a      	ldr	r2, [pc, #360]	; (8005740 <HAL_DMA_Start_IT+0x218>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d01d      	beq.n	8005616 <HAL_DMA_Start_IT+0xee>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a59      	ldr	r2, [pc, #356]	; (8005744 <HAL_DMA_Start_IT+0x21c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d018      	beq.n	8005616 <HAL_DMA_Start_IT+0xee>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a57      	ldr	r2, [pc, #348]	; (8005748 <HAL_DMA_Start_IT+0x220>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d013      	beq.n	8005616 <HAL_DMA_Start_IT+0xee>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a56      	ldr	r2, [pc, #344]	; (800574c <HAL_DMA_Start_IT+0x224>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00e      	beq.n	8005616 <HAL_DMA_Start_IT+0xee>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a54      	ldr	r2, [pc, #336]	; (8005750 <HAL_DMA_Start_IT+0x228>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d009      	beq.n	8005616 <HAL_DMA_Start_IT+0xee>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a53      	ldr	r2, [pc, #332]	; (8005754 <HAL_DMA_Start_IT+0x22c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d004      	beq.n	8005616 <HAL_DMA_Start_IT+0xee>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a51      	ldr	r2, [pc, #324]	; (8005758 <HAL_DMA_Start_IT+0x230>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d108      	bne.n	8005628 <HAL_DMA_Start_IT+0x100>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0201 	bic.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	e007      	b.n	8005638 <HAL_DMA_Start_IT+0x110>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0201 	bic.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f001 feb0 	bl	80073a4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a34      	ldr	r2, [pc, #208]	; (800571c <HAL_DMA_Start_IT+0x1f4>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d04a      	beq.n	80056e4 <HAL_DMA_Start_IT+0x1bc>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a33      	ldr	r2, [pc, #204]	; (8005720 <HAL_DMA_Start_IT+0x1f8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d045      	beq.n	80056e4 <HAL_DMA_Start_IT+0x1bc>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a31      	ldr	r2, [pc, #196]	; (8005724 <HAL_DMA_Start_IT+0x1fc>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d040      	beq.n	80056e4 <HAL_DMA_Start_IT+0x1bc>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a30      	ldr	r2, [pc, #192]	; (8005728 <HAL_DMA_Start_IT+0x200>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d03b      	beq.n	80056e4 <HAL_DMA_Start_IT+0x1bc>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a2e      	ldr	r2, [pc, #184]	; (800572c <HAL_DMA_Start_IT+0x204>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d036      	beq.n	80056e4 <HAL_DMA_Start_IT+0x1bc>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a2d      	ldr	r2, [pc, #180]	; (8005730 <HAL_DMA_Start_IT+0x208>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d031      	beq.n	80056e4 <HAL_DMA_Start_IT+0x1bc>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a2b      	ldr	r2, [pc, #172]	; (8005734 <HAL_DMA_Start_IT+0x20c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d02c      	beq.n	80056e4 <HAL_DMA_Start_IT+0x1bc>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a2a      	ldr	r2, [pc, #168]	; (8005738 <HAL_DMA_Start_IT+0x210>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d027      	beq.n	80056e4 <HAL_DMA_Start_IT+0x1bc>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a28      	ldr	r2, [pc, #160]	; (800573c <HAL_DMA_Start_IT+0x214>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d022      	beq.n	80056e4 <HAL_DMA_Start_IT+0x1bc>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a27      	ldr	r2, [pc, #156]	; (8005740 <HAL_DMA_Start_IT+0x218>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d01d      	beq.n	80056e4 <HAL_DMA_Start_IT+0x1bc>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a25      	ldr	r2, [pc, #148]	; (8005744 <HAL_DMA_Start_IT+0x21c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d018      	beq.n	80056e4 <HAL_DMA_Start_IT+0x1bc>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a24      	ldr	r2, [pc, #144]	; (8005748 <HAL_DMA_Start_IT+0x220>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d013      	beq.n	80056e4 <HAL_DMA_Start_IT+0x1bc>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a22      	ldr	r2, [pc, #136]	; (800574c <HAL_DMA_Start_IT+0x224>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00e      	beq.n	80056e4 <HAL_DMA_Start_IT+0x1bc>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a21      	ldr	r2, [pc, #132]	; (8005750 <HAL_DMA_Start_IT+0x228>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d009      	beq.n	80056e4 <HAL_DMA_Start_IT+0x1bc>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1f      	ldr	r2, [pc, #124]	; (8005754 <HAL_DMA_Start_IT+0x22c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d004      	beq.n	80056e4 <HAL_DMA_Start_IT+0x1bc>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1e      	ldr	r2, [pc, #120]	; (8005758 <HAL_DMA_Start_IT+0x230>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d101      	bne.n	80056e8 <HAL_DMA_Start_IT+0x1c0>
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <HAL_DMA_Start_IT+0x1c2>
 80056e8:	2300      	movs	r3, #0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d036      	beq.n	800575c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f023 021e 	bic.w	r2, r3, #30
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f042 0216 	orr.w	r2, r2, #22
 8005700:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d03e      	beq.n	8005788 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f042 0208 	orr.w	r2, r2, #8
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	e035      	b.n	8005788 <HAL_DMA_Start_IT+0x260>
 800571c:	40020010 	.word	0x40020010
 8005720:	40020028 	.word	0x40020028
 8005724:	40020040 	.word	0x40020040
 8005728:	40020058 	.word	0x40020058
 800572c:	40020070 	.word	0x40020070
 8005730:	40020088 	.word	0x40020088
 8005734:	400200a0 	.word	0x400200a0
 8005738:	400200b8 	.word	0x400200b8
 800573c:	40020410 	.word	0x40020410
 8005740:	40020428 	.word	0x40020428
 8005744:	40020440 	.word	0x40020440
 8005748:	40020458 	.word	0x40020458
 800574c:	40020470 	.word	0x40020470
 8005750:	40020488 	.word	0x40020488
 8005754:	400204a0 	.word	0x400204a0
 8005758:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f023 020e 	bic.w	r2, r3, #14
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 020a 	orr.w	r2, r2, #10
 800576e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005774:	2b00      	cmp	r3, #0
 8005776:	d007      	beq.n	8005788 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0204 	orr.w	r2, r2, #4
 8005786:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a83      	ldr	r2, [pc, #524]	; (800599c <HAL_DMA_Start_IT+0x474>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d072      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a82      	ldr	r2, [pc, #520]	; (80059a0 <HAL_DMA_Start_IT+0x478>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d06d      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a80      	ldr	r2, [pc, #512]	; (80059a4 <HAL_DMA_Start_IT+0x47c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d068      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a7f      	ldr	r2, [pc, #508]	; (80059a8 <HAL_DMA_Start_IT+0x480>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d063      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a7d      	ldr	r2, [pc, #500]	; (80059ac <HAL_DMA_Start_IT+0x484>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d05e      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a7c      	ldr	r2, [pc, #496]	; (80059b0 <HAL_DMA_Start_IT+0x488>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d059      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a7a      	ldr	r2, [pc, #488]	; (80059b4 <HAL_DMA_Start_IT+0x48c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d054      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a79      	ldr	r2, [pc, #484]	; (80059b8 <HAL_DMA_Start_IT+0x490>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d04f      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a77      	ldr	r2, [pc, #476]	; (80059bc <HAL_DMA_Start_IT+0x494>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d04a      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a76      	ldr	r2, [pc, #472]	; (80059c0 <HAL_DMA_Start_IT+0x498>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d045      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a74      	ldr	r2, [pc, #464]	; (80059c4 <HAL_DMA_Start_IT+0x49c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d040      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a73      	ldr	r2, [pc, #460]	; (80059c8 <HAL_DMA_Start_IT+0x4a0>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d03b      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a71      	ldr	r2, [pc, #452]	; (80059cc <HAL_DMA_Start_IT+0x4a4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d036      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a70      	ldr	r2, [pc, #448]	; (80059d0 <HAL_DMA_Start_IT+0x4a8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d031      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a6e      	ldr	r2, [pc, #440]	; (80059d4 <HAL_DMA_Start_IT+0x4ac>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d02c      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a6d      	ldr	r2, [pc, #436]	; (80059d8 <HAL_DMA_Start_IT+0x4b0>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d027      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a6b      	ldr	r2, [pc, #428]	; (80059dc <HAL_DMA_Start_IT+0x4b4>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d022      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a6a      	ldr	r2, [pc, #424]	; (80059e0 <HAL_DMA_Start_IT+0x4b8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d01d      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a68      	ldr	r2, [pc, #416]	; (80059e4 <HAL_DMA_Start_IT+0x4bc>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d018      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a67      	ldr	r2, [pc, #412]	; (80059e8 <HAL_DMA_Start_IT+0x4c0>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d013      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a65      	ldr	r2, [pc, #404]	; (80059ec <HAL_DMA_Start_IT+0x4c4>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00e      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a64      	ldr	r2, [pc, #400]	; (80059f0 <HAL_DMA_Start_IT+0x4c8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d009      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a62      	ldr	r2, [pc, #392]	; (80059f4 <HAL_DMA_Start_IT+0x4cc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_DMA_Start_IT+0x350>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a61      	ldr	r2, [pc, #388]	; (80059f8 <HAL_DMA_Start_IT+0x4d0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d101      	bne.n	800587c <HAL_DMA_Start_IT+0x354>
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <HAL_DMA_Start_IT+0x356>
 800587c:	2300      	movs	r3, #0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01a      	beq.n	80058b8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800589a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800589e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d007      	beq.n	80058b8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058b6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a37      	ldr	r2, [pc, #220]	; (800599c <HAL_DMA_Start_IT+0x474>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d04a      	beq.n	8005958 <HAL_DMA_Start_IT+0x430>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a36      	ldr	r2, [pc, #216]	; (80059a0 <HAL_DMA_Start_IT+0x478>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d045      	beq.n	8005958 <HAL_DMA_Start_IT+0x430>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a34      	ldr	r2, [pc, #208]	; (80059a4 <HAL_DMA_Start_IT+0x47c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d040      	beq.n	8005958 <HAL_DMA_Start_IT+0x430>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a33      	ldr	r2, [pc, #204]	; (80059a8 <HAL_DMA_Start_IT+0x480>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d03b      	beq.n	8005958 <HAL_DMA_Start_IT+0x430>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a31      	ldr	r2, [pc, #196]	; (80059ac <HAL_DMA_Start_IT+0x484>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d036      	beq.n	8005958 <HAL_DMA_Start_IT+0x430>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a30      	ldr	r2, [pc, #192]	; (80059b0 <HAL_DMA_Start_IT+0x488>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d031      	beq.n	8005958 <HAL_DMA_Start_IT+0x430>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a2e      	ldr	r2, [pc, #184]	; (80059b4 <HAL_DMA_Start_IT+0x48c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d02c      	beq.n	8005958 <HAL_DMA_Start_IT+0x430>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a2d      	ldr	r2, [pc, #180]	; (80059b8 <HAL_DMA_Start_IT+0x490>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d027      	beq.n	8005958 <HAL_DMA_Start_IT+0x430>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a2b      	ldr	r2, [pc, #172]	; (80059bc <HAL_DMA_Start_IT+0x494>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d022      	beq.n	8005958 <HAL_DMA_Start_IT+0x430>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a2a      	ldr	r2, [pc, #168]	; (80059c0 <HAL_DMA_Start_IT+0x498>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d01d      	beq.n	8005958 <HAL_DMA_Start_IT+0x430>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a28      	ldr	r2, [pc, #160]	; (80059c4 <HAL_DMA_Start_IT+0x49c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d018      	beq.n	8005958 <HAL_DMA_Start_IT+0x430>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a27      	ldr	r2, [pc, #156]	; (80059c8 <HAL_DMA_Start_IT+0x4a0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d013      	beq.n	8005958 <HAL_DMA_Start_IT+0x430>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a25      	ldr	r2, [pc, #148]	; (80059cc <HAL_DMA_Start_IT+0x4a4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00e      	beq.n	8005958 <HAL_DMA_Start_IT+0x430>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a24      	ldr	r2, [pc, #144]	; (80059d0 <HAL_DMA_Start_IT+0x4a8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d009      	beq.n	8005958 <HAL_DMA_Start_IT+0x430>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a22      	ldr	r2, [pc, #136]	; (80059d4 <HAL_DMA_Start_IT+0x4ac>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d004      	beq.n	8005958 <HAL_DMA_Start_IT+0x430>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a21      	ldr	r2, [pc, #132]	; (80059d8 <HAL_DMA_Start_IT+0x4b0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d108      	bne.n	800596a <HAL_DMA_Start_IT+0x442>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	e012      	b.n	8005990 <HAL_DMA_Start_IT+0x468>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 0201 	orr.w	r2, r2, #1
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	e009      	b.n	8005990 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005982:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005990:	7dfb      	ldrb	r3, [r7, #23]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	40020010 	.word	0x40020010
 80059a0:	40020028 	.word	0x40020028
 80059a4:	40020040 	.word	0x40020040
 80059a8:	40020058 	.word	0x40020058
 80059ac:	40020070 	.word	0x40020070
 80059b0:	40020088 	.word	0x40020088
 80059b4:	400200a0 	.word	0x400200a0
 80059b8:	400200b8 	.word	0x400200b8
 80059bc:	40020410 	.word	0x40020410
 80059c0:	40020428 	.word	0x40020428
 80059c4:	40020440 	.word	0x40020440
 80059c8:	40020458 	.word	0x40020458
 80059cc:	40020470 	.word	0x40020470
 80059d0:	40020488 	.word	0x40020488
 80059d4:	400204a0 	.word	0x400204a0
 80059d8:	400204b8 	.word	0x400204b8
 80059dc:	58025408 	.word	0x58025408
 80059e0:	5802541c 	.word	0x5802541c
 80059e4:	58025430 	.word	0x58025430
 80059e8:	58025444 	.word	0x58025444
 80059ec:	58025458 	.word	0x58025458
 80059f0:	5802546c 	.word	0x5802546c
 80059f4:	58025480 	.word	0x58025480
 80059f8:	58025494 	.word	0x58025494

080059fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005a04:	f7fe fe20 	bl	8004648 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e2dc      	b.n	8005fce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d008      	beq.n	8005a32 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2280      	movs	r2, #128	; 0x80
 8005a24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e2cd      	b.n	8005fce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a76      	ldr	r2, [pc, #472]	; (8005c10 <HAL_DMA_Abort+0x214>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d04a      	beq.n	8005ad2 <HAL_DMA_Abort+0xd6>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a74      	ldr	r2, [pc, #464]	; (8005c14 <HAL_DMA_Abort+0x218>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d045      	beq.n	8005ad2 <HAL_DMA_Abort+0xd6>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a73      	ldr	r2, [pc, #460]	; (8005c18 <HAL_DMA_Abort+0x21c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d040      	beq.n	8005ad2 <HAL_DMA_Abort+0xd6>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a71      	ldr	r2, [pc, #452]	; (8005c1c <HAL_DMA_Abort+0x220>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d03b      	beq.n	8005ad2 <HAL_DMA_Abort+0xd6>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a70      	ldr	r2, [pc, #448]	; (8005c20 <HAL_DMA_Abort+0x224>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d036      	beq.n	8005ad2 <HAL_DMA_Abort+0xd6>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a6e      	ldr	r2, [pc, #440]	; (8005c24 <HAL_DMA_Abort+0x228>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d031      	beq.n	8005ad2 <HAL_DMA_Abort+0xd6>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a6d      	ldr	r2, [pc, #436]	; (8005c28 <HAL_DMA_Abort+0x22c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d02c      	beq.n	8005ad2 <HAL_DMA_Abort+0xd6>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a6b      	ldr	r2, [pc, #428]	; (8005c2c <HAL_DMA_Abort+0x230>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d027      	beq.n	8005ad2 <HAL_DMA_Abort+0xd6>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a6a      	ldr	r2, [pc, #424]	; (8005c30 <HAL_DMA_Abort+0x234>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d022      	beq.n	8005ad2 <HAL_DMA_Abort+0xd6>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a68      	ldr	r2, [pc, #416]	; (8005c34 <HAL_DMA_Abort+0x238>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d01d      	beq.n	8005ad2 <HAL_DMA_Abort+0xd6>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a67      	ldr	r2, [pc, #412]	; (8005c38 <HAL_DMA_Abort+0x23c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d018      	beq.n	8005ad2 <HAL_DMA_Abort+0xd6>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a65      	ldr	r2, [pc, #404]	; (8005c3c <HAL_DMA_Abort+0x240>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <HAL_DMA_Abort+0xd6>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a64      	ldr	r2, [pc, #400]	; (8005c40 <HAL_DMA_Abort+0x244>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00e      	beq.n	8005ad2 <HAL_DMA_Abort+0xd6>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a62      	ldr	r2, [pc, #392]	; (8005c44 <HAL_DMA_Abort+0x248>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d009      	beq.n	8005ad2 <HAL_DMA_Abort+0xd6>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a61      	ldr	r2, [pc, #388]	; (8005c48 <HAL_DMA_Abort+0x24c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d004      	beq.n	8005ad2 <HAL_DMA_Abort+0xd6>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a5f      	ldr	r2, [pc, #380]	; (8005c4c <HAL_DMA_Abort+0x250>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d101      	bne.n	8005ad6 <HAL_DMA_Abort+0xda>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e000      	b.n	8005ad8 <HAL_DMA_Abort+0xdc>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d013      	beq.n	8005b04 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 021e 	bic.w	r2, r2, #30
 8005aea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695a      	ldr	r2, [r3, #20]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005afa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	e00a      	b.n	8005b1a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 020e 	bic.w	r2, r2, #14
 8005b12:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a3c      	ldr	r2, [pc, #240]	; (8005c10 <HAL_DMA_Abort+0x214>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d072      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a3a      	ldr	r2, [pc, #232]	; (8005c14 <HAL_DMA_Abort+0x218>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d06d      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a39      	ldr	r2, [pc, #228]	; (8005c18 <HAL_DMA_Abort+0x21c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d068      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a37      	ldr	r2, [pc, #220]	; (8005c1c <HAL_DMA_Abort+0x220>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d063      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a36      	ldr	r2, [pc, #216]	; (8005c20 <HAL_DMA_Abort+0x224>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d05e      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a34      	ldr	r2, [pc, #208]	; (8005c24 <HAL_DMA_Abort+0x228>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d059      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a33      	ldr	r2, [pc, #204]	; (8005c28 <HAL_DMA_Abort+0x22c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d054      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a31      	ldr	r2, [pc, #196]	; (8005c2c <HAL_DMA_Abort+0x230>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d04f      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a30      	ldr	r2, [pc, #192]	; (8005c30 <HAL_DMA_Abort+0x234>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d04a      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a2e      	ldr	r2, [pc, #184]	; (8005c34 <HAL_DMA_Abort+0x238>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d045      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a2d      	ldr	r2, [pc, #180]	; (8005c38 <HAL_DMA_Abort+0x23c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d040      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a2b      	ldr	r2, [pc, #172]	; (8005c3c <HAL_DMA_Abort+0x240>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d03b      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a2a      	ldr	r2, [pc, #168]	; (8005c40 <HAL_DMA_Abort+0x244>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d036      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a28      	ldr	r2, [pc, #160]	; (8005c44 <HAL_DMA_Abort+0x248>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d031      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a27      	ldr	r2, [pc, #156]	; (8005c48 <HAL_DMA_Abort+0x24c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d02c      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a25      	ldr	r2, [pc, #148]	; (8005c4c <HAL_DMA_Abort+0x250>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d027      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a24      	ldr	r2, [pc, #144]	; (8005c50 <HAL_DMA_Abort+0x254>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d022      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a22      	ldr	r2, [pc, #136]	; (8005c54 <HAL_DMA_Abort+0x258>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d01d      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a21      	ldr	r2, [pc, #132]	; (8005c58 <HAL_DMA_Abort+0x25c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d018      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a1f      	ldr	r2, [pc, #124]	; (8005c5c <HAL_DMA_Abort+0x260>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d013      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a1e      	ldr	r2, [pc, #120]	; (8005c60 <HAL_DMA_Abort+0x264>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00e      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1c      	ldr	r2, [pc, #112]	; (8005c64 <HAL_DMA_Abort+0x268>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d009      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a1b      	ldr	r2, [pc, #108]	; (8005c68 <HAL_DMA_Abort+0x26c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d004      	beq.n	8005c0a <HAL_DMA_Abort+0x20e>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a19      	ldr	r2, [pc, #100]	; (8005c6c <HAL_DMA_Abort+0x270>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d132      	bne.n	8005c70 <HAL_DMA_Abort+0x274>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e031      	b.n	8005c72 <HAL_DMA_Abort+0x276>
 8005c0e:	bf00      	nop
 8005c10:	40020010 	.word	0x40020010
 8005c14:	40020028 	.word	0x40020028
 8005c18:	40020040 	.word	0x40020040
 8005c1c:	40020058 	.word	0x40020058
 8005c20:	40020070 	.word	0x40020070
 8005c24:	40020088 	.word	0x40020088
 8005c28:	400200a0 	.word	0x400200a0
 8005c2c:	400200b8 	.word	0x400200b8
 8005c30:	40020410 	.word	0x40020410
 8005c34:	40020428 	.word	0x40020428
 8005c38:	40020440 	.word	0x40020440
 8005c3c:	40020458 	.word	0x40020458
 8005c40:	40020470 	.word	0x40020470
 8005c44:	40020488 	.word	0x40020488
 8005c48:	400204a0 	.word	0x400204a0
 8005c4c:	400204b8 	.word	0x400204b8
 8005c50:	58025408 	.word	0x58025408
 8005c54:	5802541c 	.word	0x5802541c
 8005c58:	58025430 	.word	0x58025430
 8005c5c:	58025444 	.word	0x58025444
 8005c60:	58025458 	.word	0x58025458
 8005c64:	5802546c 	.word	0x5802546c
 8005c68:	58025480 	.word	0x58025480
 8005c6c:	58025494 	.word	0x58025494
 8005c70:	2300      	movs	r3, #0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c84:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a6d      	ldr	r2, [pc, #436]	; (8005e40 <HAL_DMA_Abort+0x444>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d04a      	beq.n	8005d26 <HAL_DMA_Abort+0x32a>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a6b      	ldr	r2, [pc, #428]	; (8005e44 <HAL_DMA_Abort+0x448>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d045      	beq.n	8005d26 <HAL_DMA_Abort+0x32a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a6a      	ldr	r2, [pc, #424]	; (8005e48 <HAL_DMA_Abort+0x44c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d040      	beq.n	8005d26 <HAL_DMA_Abort+0x32a>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a68      	ldr	r2, [pc, #416]	; (8005e4c <HAL_DMA_Abort+0x450>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d03b      	beq.n	8005d26 <HAL_DMA_Abort+0x32a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a67      	ldr	r2, [pc, #412]	; (8005e50 <HAL_DMA_Abort+0x454>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d036      	beq.n	8005d26 <HAL_DMA_Abort+0x32a>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a65      	ldr	r2, [pc, #404]	; (8005e54 <HAL_DMA_Abort+0x458>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d031      	beq.n	8005d26 <HAL_DMA_Abort+0x32a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a64      	ldr	r2, [pc, #400]	; (8005e58 <HAL_DMA_Abort+0x45c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d02c      	beq.n	8005d26 <HAL_DMA_Abort+0x32a>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a62      	ldr	r2, [pc, #392]	; (8005e5c <HAL_DMA_Abort+0x460>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d027      	beq.n	8005d26 <HAL_DMA_Abort+0x32a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a61      	ldr	r2, [pc, #388]	; (8005e60 <HAL_DMA_Abort+0x464>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d022      	beq.n	8005d26 <HAL_DMA_Abort+0x32a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a5f      	ldr	r2, [pc, #380]	; (8005e64 <HAL_DMA_Abort+0x468>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d01d      	beq.n	8005d26 <HAL_DMA_Abort+0x32a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a5e      	ldr	r2, [pc, #376]	; (8005e68 <HAL_DMA_Abort+0x46c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d018      	beq.n	8005d26 <HAL_DMA_Abort+0x32a>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a5c      	ldr	r2, [pc, #368]	; (8005e6c <HAL_DMA_Abort+0x470>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d013      	beq.n	8005d26 <HAL_DMA_Abort+0x32a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a5b      	ldr	r2, [pc, #364]	; (8005e70 <HAL_DMA_Abort+0x474>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00e      	beq.n	8005d26 <HAL_DMA_Abort+0x32a>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a59      	ldr	r2, [pc, #356]	; (8005e74 <HAL_DMA_Abort+0x478>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d009      	beq.n	8005d26 <HAL_DMA_Abort+0x32a>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a58      	ldr	r2, [pc, #352]	; (8005e78 <HAL_DMA_Abort+0x47c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d004      	beq.n	8005d26 <HAL_DMA_Abort+0x32a>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a56      	ldr	r2, [pc, #344]	; (8005e7c <HAL_DMA_Abort+0x480>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d108      	bne.n	8005d38 <HAL_DMA_Abort+0x33c>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0201 	bic.w	r2, r2, #1
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	e007      	b.n	8005d48 <HAL_DMA_Abort+0x34c>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0201 	bic.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005d48:	e013      	b.n	8005d72 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d4a:	f7fe fc7d 	bl	8004648 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b05      	cmp	r3, #5
 8005d56:	d90c      	bls.n	8005d72 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2203      	movs	r2, #3
 8005d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e12d      	b.n	8005fce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1e5      	bne.n	8005d4a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a2f      	ldr	r2, [pc, #188]	; (8005e40 <HAL_DMA_Abort+0x444>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d04a      	beq.n	8005e1e <HAL_DMA_Abort+0x422>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a2d      	ldr	r2, [pc, #180]	; (8005e44 <HAL_DMA_Abort+0x448>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d045      	beq.n	8005e1e <HAL_DMA_Abort+0x422>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a2c      	ldr	r2, [pc, #176]	; (8005e48 <HAL_DMA_Abort+0x44c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d040      	beq.n	8005e1e <HAL_DMA_Abort+0x422>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a2a      	ldr	r2, [pc, #168]	; (8005e4c <HAL_DMA_Abort+0x450>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d03b      	beq.n	8005e1e <HAL_DMA_Abort+0x422>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a29      	ldr	r2, [pc, #164]	; (8005e50 <HAL_DMA_Abort+0x454>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d036      	beq.n	8005e1e <HAL_DMA_Abort+0x422>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a27      	ldr	r2, [pc, #156]	; (8005e54 <HAL_DMA_Abort+0x458>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d031      	beq.n	8005e1e <HAL_DMA_Abort+0x422>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a26      	ldr	r2, [pc, #152]	; (8005e58 <HAL_DMA_Abort+0x45c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d02c      	beq.n	8005e1e <HAL_DMA_Abort+0x422>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a24      	ldr	r2, [pc, #144]	; (8005e5c <HAL_DMA_Abort+0x460>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d027      	beq.n	8005e1e <HAL_DMA_Abort+0x422>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a23      	ldr	r2, [pc, #140]	; (8005e60 <HAL_DMA_Abort+0x464>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d022      	beq.n	8005e1e <HAL_DMA_Abort+0x422>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a21      	ldr	r2, [pc, #132]	; (8005e64 <HAL_DMA_Abort+0x468>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d01d      	beq.n	8005e1e <HAL_DMA_Abort+0x422>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a20      	ldr	r2, [pc, #128]	; (8005e68 <HAL_DMA_Abort+0x46c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d018      	beq.n	8005e1e <HAL_DMA_Abort+0x422>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1e      	ldr	r2, [pc, #120]	; (8005e6c <HAL_DMA_Abort+0x470>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d013      	beq.n	8005e1e <HAL_DMA_Abort+0x422>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a1d      	ldr	r2, [pc, #116]	; (8005e70 <HAL_DMA_Abort+0x474>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00e      	beq.n	8005e1e <HAL_DMA_Abort+0x422>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a1b      	ldr	r2, [pc, #108]	; (8005e74 <HAL_DMA_Abort+0x478>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d009      	beq.n	8005e1e <HAL_DMA_Abort+0x422>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a1a      	ldr	r2, [pc, #104]	; (8005e78 <HAL_DMA_Abort+0x47c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d004      	beq.n	8005e1e <HAL_DMA_Abort+0x422>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a18      	ldr	r2, [pc, #96]	; (8005e7c <HAL_DMA_Abort+0x480>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d101      	bne.n	8005e22 <HAL_DMA_Abort+0x426>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <HAL_DMA_Abort+0x428>
 8005e22:	2300      	movs	r3, #0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d02b      	beq.n	8005e80 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e32:	f003 031f 	and.w	r3, r3, #31
 8005e36:	223f      	movs	r2, #63	; 0x3f
 8005e38:	409a      	lsls	r2, r3
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	609a      	str	r2, [r3, #8]
 8005e3e:	e02a      	b.n	8005e96 <HAL_DMA_Abort+0x49a>
 8005e40:	40020010 	.word	0x40020010
 8005e44:	40020028 	.word	0x40020028
 8005e48:	40020040 	.word	0x40020040
 8005e4c:	40020058 	.word	0x40020058
 8005e50:	40020070 	.word	0x40020070
 8005e54:	40020088 	.word	0x40020088
 8005e58:	400200a0 	.word	0x400200a0
 8005e5c:	400200b8 	.word	0x400200b8
 8005e60:	40020410 	.word	0x40020410
 8005e64:	40020428 	.word	0x40020428
 8005e68:	40020440 	.word	0x40020440
 8005e6c:	40020458 	.word	0x40020458
 8005e70:	40020470 	.word	0x40020470
 8005e74:	40020488 	.word	0x40020488
 8005e78:	400204a0 	.word	0x400204a0
 8005e7c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e84:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e8a:	f003 031f 	and.w	r3, r3, #31
 8005e8e:	2201      	movs	r2, #1
 8005e90:	409a      	lsls	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a4f      	ldr	r2, [pc, #316]	; (8005fd8 <HAL_DMA_Abort+0x5dc>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d072      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a4d      	ldr	r2, [pc, #308]	; (8005fdc <HAL_DMA_Abort+0x5e0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d06d      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a4c      	ldr	r2, [pc, #304]	; (8005fe0 <HAL_DMA_Abort+0x5e4>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d068      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a4a      	ldr	r2, [pc, #296]	; (8005fe4 <HAL_DMA_Abort+0x5e8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d063      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a49      	ldr	r2, [pc, #292]	; (8005fe8 <HAL_DMA_Abort+0x5ec>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d05e      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a47      	ldr	r2, [pc, #284]	; (8005fec <HAL_DMA_Abort+0x5f0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d059      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a46      	ldr	r2, [pc, #280]	; (8005ff0 <HAL_DMA_Abort+0x5f4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d054      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a44      	ldr	r2, [pc, #272]	; (8005ff4 <HAL_DMA_Abort+0x5f8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d04f      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a43      	ldr	r2, [pc, #268]	; (8005ff8 <HAL_DMA_Abort+0x5fc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d04a      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a41      	ldr	r2, [pc, #260]	; (8005ffc <HAL_DMA_Abort+0x600>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d045      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a40      	ldr	r2, [pc, #256]	; (8006000 <HAL_DMA_Abort+0x604>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d040      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a3e      	ldr	r2, [pc, #248]	; (8006004 <HAL_DMA_Abort+0x608>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d03b      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a3d      	ldr	r2, [pc, #244]	; (8006008 <HAL_DMA_Abort+0x60c>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d036      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a3b      	ldr	r2, [pc, #236]	; (800600c <HAL_DMA_Abort+0x610>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d031      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a3a      	ldr	r2, [pc, #232]	; (8006010 <HAL_DMA_Abort+0x614>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d02c      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a38      	ldr	r2, [pc, #224]	; (8006014 <HAL_DMA_Abort+0x618>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d027      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a37      	ldr	r2, [pc, #220]	; (8006018 <HAL_DMA_Abort+0x61c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d022      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a35      	ldr	r2, [pc, #212]	; (800601c <HAL_DMA_Abort+0x620>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d01d      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a34      	ldr	r2, [pc, #208]	; (8006020 <HAL_DMA_Abort+0x624>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d018      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a32      	ldr	r2, [pc, #200]	; (8006024 <HAL_DMA_Abort+0x628>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d013      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a31      	ldr	r2, [pc, #196]	; (8006028 <HAL_DMA_Abort+0x62c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00e      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a2f      	ldr	r2, [pc, #188]	; (800602c <HAL_DMA_Abort+0x630>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d009      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a2e      	ldr	r2, [pc, #184]	; (8006030 <HAL_DMA_Abort+0x634>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d004      	beq.n	8005f86 <HAL_DMA_Abort+0x58a>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a2c      	ldr	r2, [pc, #176]	; (8006034 <HAL_DMA_Abort+0x638>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d101      	bne.n	8005f8a <HAL_DMA_Abort+0x58e>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <HAL_DMA_Abort+0x590>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d015      	beq.n	8005fbc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f98:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00c      	beq.n	8005fbc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fb0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005fba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	40020010 	.word	0x40020010
 8005fdc:	40020028 	.word	0x40020028
 8005fe0:	40020040 	.word	0x40020040
 8005fe4:	40020058 	.word	0x40020058
 8005fe8:	40020070 	.word	0x40020070
 8005fec:	40020088 	.word	0x40020088
 8005ff0:	400200a0 	.word	0x400200a0
 8005ff4:	400200b8 	.word	0x400200b8
 8005ff8:	40020410 	.word	0x40020410
 8005ffc:	40020428 	.word	0x40020428
 8006000:	40020440 	.word	0x40020440
 8006004:	40020458 	.word	0x40020458
 8006008:	40020470 	.word	0x40020470
 800600c:	40020488 	.word	0x40020488
 8006010:	400204a0 	.word	0x400204a0
 8006014:	400204b8 	.word	0x400204b8
 8006018:	58025408 	.word	0x58025408
 800601c:	5802541c 	.word	0x5802541c
 8006020:	58025430 	.word	0x58025430
 8006024:	58025444 	.word	0x58025444
 8006028:	58025458 	.word	0x58025458
 800602c:	5802546c 	.word	0x5802546c
 8006030:	58025480 	.word	0x58025480
 8006034:	58025494 	.word	0x58025494

08006038 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e237      	b.n	80064ba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d004      	beq.n	8006060 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2280      	movs	r2, #128	; 0x80
 800605a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e22c      	b.n	80064ba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a5c      	ldr	r2, [pc, #368]	; (80061d8 <HAL_DMA_Abort_IT+0x1a0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d04a      	beq.n	8006100 <HAL_DMA_Abort_IT+0xc8>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a5b      	ldr	r2, [pc, #364]	; (80061dc <HAL_DMA_Abort_IT+0x1a4>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d045      	beq.n	8006100 <HAL_DMA_Abort_IT+0xc8>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a59      	ldr	r2, [pc, #356]	; (80061e0 <HAL_DMA_Abort_IT+0x1a8>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d040      	beq.n	8006100 <HAL_DMA_Abort_IT+0xc8>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a58      	ldr	r2, [pc, #352]	; (80061e4 <HAL_DMA_Abort_IT+0x1ac>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d03b      	beq.n	8006100 <HAL_DMA_Abort_IT+0xc8>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a56      	ldr	r2, [pc, #344]	; (80061e8 <HAL_DMA_Abort_IT+0x1b0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d036      	beq.n	8006100 <HAL_DMA_Abort_IT+0xc8>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a55      	ldr	r2, [pc, #340]	; (80061ec <HAL_DMA_Abort_IT+0x1b4>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d031      	beq.n	8006100 <HAL_DMA_Abort_IT+0xc8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a53      	ldr	r2, [pc, #332]	; (80061f0 <HAL_DMA_Abort_IT+0x1b8>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d02c      	beq.n	8006100 <HAL_DMA_Abort_IT+0xc8>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a52      	ldr	r2, [pc, #328]	; (80061f4 <HAL_DMA_Abort_IT+0x1bc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d027      	beq.n	8006100 <HAL_DMA_Abort_IT+0xc8>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a50      	ldr	r2, [pc, #320]	; (80061f8 <HAL_DMA_Abort_IT+0x1c0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d022      	beq.n	8006100 <HAL_DMA_Abort_IT+0xc8>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a4f      	ldr	r2, [pc, #316]	; (80061fc <HAL_DMA_Abort_IT+0x1c4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d01d      	beq.n	8006100 <HAL_DMA_Abort_IT+0xc8>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a4d      	ldr	r2, [pc, #308]	; (8006200 <HAL_DMA_Abort_IT+0x1c8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d018      	beq.n	8006100 <HAL_DMA_Abort_IT+0xc8>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a4c      	ldr	r2, [pc, #304]	; (8006204 <HAL_DMA_Abort_IT+0x1cc>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d013      	beq.n	8006100 <HAL_DMA_Abort_IT+0xc8>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a4a      	ldr	r2, [pc, #296]	; (8006208 <HAL_DMA_Abort_IT+0x1d0>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00e      	beq.n	8006100 <HAL_DMA_Abort_IT+0xc8>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a49      	ldr	r2, [pc, #292]	; (800620c <HAL_DMA_Abort_IT+0x1d4>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d009      	beq.n	8006100 <HAL_DMA_Abort_IT+0xc8>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a47      	ldr	r2, [pc, #284]	; (8006210 <HAL_DMA_Abort_IT+0x1d8>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d004      	beq.n	8006100 <HAL_DMA_Abort_IT+0xc8>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a46      	ldr	r2, [pc, #280]	; (8006214 <HAL_DMA_Abort_IT+0x1dc>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d101      	bne.n	8006104 <HAL_DMA_Abort_IT+0xcc>
 8006100:	2301      	movs	r3, #1
 8006102:	e000      	b.n	8006106 <HAL_DMA_Abort_IT+0xce>
 8006104:	2300      	movs	r3, #0
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 8086 	beq.w	8006218 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2204      	movs	r2, #4
 8006110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a2f      	ldr	r2, [pc, #188]	; (80061d8 <HAL_DMA_Abort_IT+0x1a0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d04a      	beq.n	80061b4 <HAL_DMA_Abort_IT+0x17c>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a2e      	ldr	r2, [pc, #184]	; (80061dc <HAL_DMA_Abort_IT+0x1a4>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d045      	beq.n	80061b4 <HAL_DMA_Abort_IT+0x17c>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a2c      	ldr	r2, [pc, #176]	; (80061e0 <HAL_DMA_Abort_IT+0x1a8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d040      	beq.n	80061b4 <HAL_DMA_Abort_IT+0x17c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a2b      	ldr	r2, [pc, #172]	; (80061e4 <HAL_DMA_Abort_IT+0x1ac>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d03b      	beq.n	80061b4 <HAL_DMA_Abort_IT+0x17c>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a29      	ldr	r2, [pc, #164]	; (80061e8 <HAL_DMA_Abort_IT+0x1b0>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d036      	beq.n	80061b4 <HAL_DMA_Abort_IT+0x17c>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a28      	ldr	r2, [pc, #160]	; (80061ec <HAL_DMA_Abort_IT+0x1b4>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d031      	beq.n	80061b4 <HAL_DMA_Abort_IT+0x17c>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a26      	ldr	r2, [pc, #152]	; (80061f0 <HAL_DMA_Abort_IT+0x1b8>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d02c      	beq.n	80061b4 <HAL_DMA_Abort_IT+0x17c>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a25      	ldr	r2, [pc, #148]	; (80061f4 <HAL_DMA_Abort_IT+0x1bc>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d027      	beq.n	80061b4 <HAL_DMA_Abort_IT+0x17c>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a23      	ldr	r2, [pc, #140]	; (80061f8 <HAL_DMA_Abort_IT+0x1c0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d022      	beq.n	80061b4 <HAL_DMA_Abort_IT+0x17c>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a22      	ldr	r2, [pc, #136]	; (80061fc <HAL_DMA_Abort_IT+0x1c4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d01d      	beq.n	80061b4 <HAL_DMA_Abort_IT+0x17c>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a20      	ldr	r2, [pc, #128]	; (8006200 <HAL_DMA_Abort_IT+0x1c8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d018      	beq.n	80061b4 <HAL_DMA_Abort_IT+0x17c>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1f      	ldr	r2, [pc, #124]	; (8006204 <HAL_DMA_Abort_IT+0x1cc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d013      	beq.n	80061b4 <HAL_DMA_Abort_IT+0x17c>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a1d      	ldr	r2, [pc, #116]	; (8006208 <HAL_DMA_Abort_IT+0x1d0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00e      	beq.n	80061b4 <HAL_DMA_Abort_IT+0x17c>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1c      	ldr	r2, [pc, #112]	; (800620c <HAL_DMA_Abort_IT+0x1d4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d009      	beq.n	80061b4 <HAL_DMA_Abort_IT+0x17c>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a1a      	ldr	r2, [pc, #104]	; (8006210 <HAL_DMA_Abort_IT+0x1d8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d004      	beq.n	80061b4 <HAL_DMA_Abort_IT+0x17c>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a19      	ldr	r2, [pc, #100]	; (8006214 <HAL_DMA_Abort_IT+0x1dc>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d108      	bne.n	80061c6 <HAL_DMA_Abort_IT+0x18e>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0201 	bic.w	r2, r2, #1
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	e178      	b.n	80064b8 <HAL_DMA_Abort_IT+0x480>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0201 	bic.w	r2, r2, #1
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	e16f      	b.n	80064b8 <HAL_DMA_Abort_IT+0x480>
 80061d8:	40020010 	.word	0x40020010
 80061dc:	40020028 	.word	0x40020028
 80061e0:	40020040 	.word	0x40020040
 80061e4:	40020058 	.word	0x40020058
 80061e8:	40020070 	.word	0x40020070
 80061ec:	40020088 	.word	0x40020088
 80061f0:	400200a0 	.word	0x400200a0
 80061f4:	400200b8 	.word	0x400200b8
 80061f8:	40020410 	.word	0x40020410
 80061fc:	40020428 	.word	0x40020428
 8006200:	40020440 	.word	0x40020440
 8006204:	40020458 	.word	0x40020458
 8006208:	40020470 	.word	0x40020470
 800620c:	40020488 	.word	0x40020488
 8006210:	400204a0 	.word	0x400204a0
 8006214:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 020e 	bic.w	r2, r2, #14
 8006226:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a6c      	ldr	r2, [pc, #432]	; (80063e0 <HAL_DMA_Abort_IT+0x3a8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d04a      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x290>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a6b      	ldr	r2, [pc, #428]	; (80063e4 <HAL_DMA_Abort_IT+0x3ac>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d045      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x290>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a69      	ldr	r2, [pc, #420]	; (80063e8 <HAL_DMA_Abort_IT+0x3b0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d040      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x290>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a68      	ldr	r2, [pc, #416]	; (80063ec <HAL_DMA_Abort_IT+0x3b4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d03b      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x290>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a66      	ldr	r2, [pc, #408]	; (80063f0 <HAL_DMA_Abort_IT+0x3b8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d036      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x290>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a65      	ldr	r2, [pc, #404]	; (80063f4 <HAL_DMA_Abort_IT+0x3bc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d031      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x290>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a63      	ldr	r2, [pc, #396]	; (80063f8 <HAL_DMA_Abort_IT+0x3c0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d02c      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x290>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a62      	ldr	r2, [pc, #392]	; (80063fc <HAL_DMA_Abort_IT+0x3c4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d027      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x290>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a60      	ldr	r2, [pc, #384]	; (8006400 <HAL_DMA_Abort_IT+0x3c8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d022      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x290>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a5f      	ldr	r2, [pc, #380]	; (8006404 <HAL_DMA_Abort_IT+0x3cc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d01d      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x290>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a5d      	ldr	r2, [pc, #372]	; (8006408 <HAL_DMA_Abort_IT+0x3d0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d018      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x290>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a5c      	ldr	r2, [pc, #368]	; (800640c <HAL_DMA_Abort_IT+0x3d4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d013      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x290>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a5a      	ldr	r2, [pc, #360]	; (8006410 <HAL_DMA_Abort_IT+0x3d8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00e      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x290>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a59      	ldr	r2, [pc, #356]	; (8006414 <HAL_DMA_Abort_IT+0x3dc>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d009      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x290>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a57      	ldr	r2, [pc, #348]	; (8006418 <HAL_DMA_Abort_IT+0x3e0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d004      	beq.n	80062c8 <HAL_DMA_Abort_IT+0x290>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a56      	ldr	r2, [pc, #344]	; (800641c <HAL_DMA_Abort_IT+0x3e4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d108      	bne.n	80062da <HAL_DMA_Abort_IT+0x2a2>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0201 	bic.w	r2, r2, #1
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	e007      	b.n	80062ea <HAL_DMA_Abort_IT+0x2b2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0201 	bic.w	r2, r2, #1
 80062e8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a3c      	ldr	r2, [pc, #240]	; (80063e0 <HAL_DMA_Abort_IT+0x3a8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d072      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a3a      	ldr	r2, [pc, #232]	; (80063e4 <HAL_DMA_Abort_IT+0x3ac>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d06d      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a39      	ldr	r2, [pc, #228]	; (80063e8 <HAL_DMA_Abort_IT+0x3b0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d068      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a37      	ldr	r2, [pc, #220]	; (80063ec <HAL_DMA_Abort_IT+0x3b4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d063      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a36      	ldr	r2, [pc, #216]	; (80063f0 <HAL_DMA_Abort_IT+0x3b8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d05e      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a34      	ldr	r2, [pc, #208]	; (80063f4 <HAL_DMA_Abort_IT+0x3bc>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d059      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a33      	ldr	r2, [pc, #204]	; (80063f8 <HAL_DMA_Abort_IT+0x3c0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d054      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a31      	ldr	r2, [pc, #196]	; (80063fc <HAL_DMA_Abort_IT+0x3c4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d04f      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a30      	ldr	r2, [pc, #192]	; (8006400 <HAL_DMA_Abort_IT+0x3c8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d04a      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a2e      	ldr	r2, [pc, #184]	; (8006404 <HAL_DMA_Abort_IT+0x3cc>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d045      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a2d      	ldr	r2, [pc, #180]	; (8006408 <HAL_DMA_Abort_IT+0x3d0>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d040      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a2b      	ldr	r2, [pc, #172]	; (800640c <HAL_DMA_Abort_IT+0x3d4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d03b      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a2a      	ldr	r2, [pc, #168]	; (8006410 <HAL_DMA_Abort_IT+0x3d8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d036      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a28      	ldr	r2, [pc, #160]	; (8006414 <HAL_DMA_Abort_IT+0x3dc>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d031      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a27      	ldr	r2, [pc, #156]	; (8006418 <HAL_DMA_Abort_IT+0x3e0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d02c      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a25      	ldr	r2, [pc, #148]	; (800641c <HAL_DMA_Abort_IT+0x3e4>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d027      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a24      	ldr	r2, [pc, #144]	; (8006420 <HAL_DMA_Abort_IT+0x3e8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d022      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a22      	ldr	r2, [pc, #136]	; (8006424 <HAL_DMA_Abort_IT+0x3ec>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d01d      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a21      	ldr	r2, [pc, #132]	; (8006428 <HAL_DMA_Abort_IT+0x3f0>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d018      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a1f      	ldr	r2, [pc, #124]	; (800642c <HAL_DMA_Abort_IT+0x3f4>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d013      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1e      	ldr	r2, [pc, #120]	; (8006430 <HAL_DMA_Abort_IT+0x3f8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00e      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a1c      	ldr	r2, [pc, #112]	; (8006434 <HAL_DMA_Abort_IT+0x3fc>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d009      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a1b      	ldr	r2, [pc, #108]	; (8006438 <HAL_DMA_Abort_IT+0x400>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d004      	beq.n	80063da <HAL_DMA_Abort_IT+0x3a2>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a19      	ldr	r2, [pc, #100]	; (800643c <HAL_DMA_Abort_IT+0x404>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d132      	bne.n	8006440 <HAL_DMA_Abort_IT+0x408>
 80063da:	2301      	movs	r3, #1
 80063dc:	e031      	b.n	8006442 <HAL_DMA_Abort_IT+0x40a>
 80063de:	bf00      	nop
 80063e0:	40020010 	.word	0x40020010
 80063e4:	40020028 	.word	0x40020028
 80063e8:	40020040 	.word	0x40020040
 80063ec:	40020058 	.word	0x40020058
 80063f0:	40020070 	.word	0x40020070
 80063f4:	40020088 	.word	0x40020088
 80063f8:	400200a0 	.word	0x400200a0
 80063fc:	400200b8 	.word	0x400200b8
 8006400:	40020410 	.word	0x40020410
 8006404:	40020428 	.word	0x40020428
 8006408:	40020440 	.word	0x40020440
 800640c:	40020458 	.word	0x40020458
 8006410:	40020470 	.word	0x40020470
 8006414:	40020488 	.word	0x40020488
 8006418:	400204a0 	.word	0x400204a0
 800641c:	400204b8 	.word	0x400204b8
 8006420:	58025408 	.word	0x58025408
 8006424:	5802541c 	.word	0x5802541c
 8006428:	58025430 	.word	0x58025430
 800642c:	58025444 	.word	0x58025444
 8006430:	58025458 	.word	0x58025458
 8006434:	5802546c 	.word	0x5802546c
 8006438:	58025480 	.word	0x58025480
 800643c:	58025494 	.word	0x58025494
 8006440:	2300      	movs	r3, #0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d028      	beq.n	8006498 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006454:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800645a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006460:	f003 031f 	and.w	r3, r3, #31
 8006464:	2201      	movs	r2, #1
 8006466:	409a      	lsls	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006474:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00c      	beq.n	8006498 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800648c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006496:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop

080064c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b08a      	sub	sp, #40	; 0x28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80064d0:	4b67      	ldr	r3, [pc, #412]	; (8006670 <HAL_DMA_IRQHandler+0x1ac>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a67      	ldr	r2, [pc, #412]	; (8006674 <HAL_DMA_IRQHandler+0x1b0>)
 80064d6:	fba2 2303 	umull	r2, r3, r2, r3
 80064da:	0a9b      	lsrs	r3, r3, #10
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a5f      	ldr	r2, [pc, #380]	; (8006678 <HAL_DMA_IRQHandler+0x1b4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d04a      	beq.n	8006596 <HAL_DMA_IRQHandler+0xd2>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a5d      	ldr	r2, [pc, #372]	; (800667c <HAL_DMA_IRQHandler+0x1b8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d045      	beq.n	8006596 <HAL_DMA_IRQHandler+0xd2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a5c      	ldr	r2, [pc, #368]	; (8006680 <HAL_DMA_IRQHandler+0x1bc>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d040      	beq.n	8006596 <HAL_DMA_IRQHandler+0xd2>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a5a      	ldr	r2, [pc, #360]	; (8006684 <HAL_DMA_IRQHandler+0x1c0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d03b      	beq.n	8006596 <HAL_DMA_IRQHandler+0xd2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a59      	ldr	r2, [pc, #356]	; (8006688 <HAL_DMA_IRQHandler+0x1c4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d036      	beq.n	8006596 <HAL_DMA_IRQHandler+0xd2>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a57      	ldr	r2, [pc, #348]	; (800668c <HAL_DMA_IRQHandler+0x1c8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d031      	beq.n	8006596 <HAL_DMA_IRQHandler+0xd2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a56      	ldr	r2, [pc, #344]	; (8006690 <HAL_DMA_IRQHandler+0x1cc>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d02c      	beq.n	8006596 <HAL_DMA_IRQHandler+0xd2>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a54      	ldr	r2, [pc, #336]	; (8006694 <HAL_DMA_IRQHandler+0x1d0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d027      	beq.n	8006596 <HAL_DMA_IRQHandler+0xd2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a53      	ldr	r2, [pc, #332]	; (8006698 <HAL_DMA_IRQHandler+0x1d4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d022      	beq.n	8006596 <HAL_DMA_IRQHandler+0xd2>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a51      	ldr	r2, [pc, #324]	; (800669c <HAL_DMA_IRQHandler+0x1d8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d01d      	beq.n	8006596 <HAL_DMA_IRQHandler+0xd2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a50      	ldr	r2, [pc, #320]	; (80066a0 <HAL_DMA_IRQHandler+0x1dc>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d018      	beq.n	8006596 <HAL_DMA_IRQHandler+0xd2>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a4e      	ldr	r2, [pc, #312]	; (80066a4 <HAL_DMA_IRQHandler+0x1e0>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d013      	beq.n	8006596 <HAL_DMA_IRQHandler+0xd2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a4d      	ldr	r2, [pc, #308]	; (80066a8 <HAL_DMA_IRQHandler+0x1e4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00e      	beq.n	8006596 <HAL_DMA_IRQHandler+0xd2>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a4b      	ldr	r2, [pc, #300]	; (80066ac <HAL_DMA_IRQHandler+0x1e8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d009      	beq.n	8006596 <HAL_DMA_IRQHandler+0xd2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a4a      	ldr	r2, [pc, #296]	; (80066b0 <HAL_DMA_IRQHandler+0x1ec>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d004      	beq.n	8006596 <HAL_DMA_IRQHandler+0xd2>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a48      	ldr	r2, [pc, #288]	; (80066b4 <HAL_DMA_IRQHandler+0x1f0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d101      	bne.n	800659a <HAL_DMA_IRQHandler+0xd6>
 8006596:	2301      	movs	r3, #1
 8006598:	e000      	b.n	800659c <HAL_DMA_IRQHandler+0xd8>
 800659a:	2300      	movs	r3, #0
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 842b 	beq.w	8006df8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a6:	f003 031f 	and.w	r3, r3, #31
 80065aa:	2208      	movs	r2, #8
 80065ac:	409a      	lsls	r2, r3
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	4013      	ands	r3, r2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 80a2 	beq.w	80066fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a2e      	ldr	r2, [pc, #184]	; (8006678 <HAL_DMA_IRQHandler+0x1b4>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d04a      	beq.n	8006658 <HAL_DMA_IRQHandler+0x194>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a2d      	ldr	r2, [pc, #180]	; (800667c <HAL_DMA_IRQHandler+0x1b8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d045      	beq.n	8006658 <HAL_DMA_IRQHandler+0x194>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a2b      	ldr	r2, [pc, #172]	; (8006680 <HAL_DMA_IRQHandler+0x1bc>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d040      	beq.n	8006658 <HAL_DMA_IRQHandler+0x194>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a2a      	ldr	r2, [pc, #168]	; (8006684 <HAL_DMA_IRQHandler+0x1c0>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d03b      	beq.n	8006658 <HAL_DMA_IRQHandler+0x194>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a28      	ldr	r2, [pc, #160]	; (8006688 <HAL_DMA_IRQHandler+0x1c4>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d036      	beq.n	8006658 <HAL_DMA_IRQHandler+0x194>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a27      	ldr	r2, [pc, #156]	; (800668c <HAL_DMA_IRQHandler+0x1c8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d031      	beq.n	8006658 <HAL_DMA_IRQHandler+0x194>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a25      	ldr	r2, [pc, #148]	; (8006690 <HAL_DMA_IRQHandler+0x1cc>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d02c      	beq.n	8006658 <HAL_DMA_IRQHandler+0x194>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a24      	ldr	r2, [pc, #144]	; (8006694 <HAL_DMA_IRQHandler+0x1d0>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d027      	beq.n	8006658 <HAL_DMA_IRQHandler+0x194>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a22      	ldr	r2, [pc, #136]	; (8006698 <HAL_DMA_IRQHandler+0x1d4>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d022      	beq.n	8006658 <HAL_DMA_IRQHandler+0x194>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a21      	ldr	r2, [pc, #132]	; (800669c <HAL_DMA_IRQHandler+0x1d8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d01d      	beq.n	8006658 <HAL_DMA_IRQHandler+0x194>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a1f      	ldr	r2, [pc, #124]	; (80066a0 <HAL_DMA_IRQHandler+0x1dc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d018      	beq.n	8006658 <HAL_DMA_IRQHandler+0x194>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a1e      	ldr	r2, [pc, #120]	; (80066a4 <HAL_DMA_IRQHandler+0x1e0>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d013      	beq.n	8006658 <HAL_DMA_IRQHandler+0x194>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a1c      	ldr	r2, [pc, #112]	; (80066a8 <HAL_DMA_IRQHandler+0x1e4>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d00e      	beq.n	8006658 <HAL_DMA_IRQHandler+0x194>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a1b      	ldr	r2, [pc, #108]	; (80066ac <HAL_DMA_IRQHandler+0x1e8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d009      	beq.n	8006658 <HAL_DMA_IRQHandler+0x194>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a19      	ldr	r2, [pc, #100]	; (80066b0 <HAL_DMA_IRQHandler+0x1ec>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d004      	beq.n	8006658 <HAL_DMA_IRQHandler+0x194>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a18      	ldr	r2, [pc, #96]	; (80066b4 <HAL_DMA_IRQHandler+0x1f0>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d12f      	bne.n	80066b8 <HAL_DMA_IRQHandler+0x1f4>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0304 	and.w	r3, r3, #4
 8006662:	2b00      	cmp	r3, #0
 8006664:	bf14      	ite	ne
 8006666:	2301      	movne	r3, #1
 8006668:	2300      	moveq	r3, #0
 800666a:	b2db      	uxtb	r3, r3
 800666c:	e02e      	b.n	80066cc <HAL_DMA_IRQHandler+0x208>
 800666e:	bf00      	nop
 8006670:	24000044 	.word	0x24000044
 8006674:	1b4e81b5 	.word	0x1b4e81b5
 8006678:	40020010 	.word	0x40020010
 800667c:	40020028 	.word	0x40020028
 8006680:	40020040 	.word	0x40020040
 8006684:	40020058 	.word	0x40020058
 8006688:	40020070 	.word	0x40020070
 800668c:	40020088 	.word	0x40020088
 8006690:	400200a0 	.word	0x400200a0
 8006694:	400200b8 	.word	0x400200b8
 8006698:	40020410 	.word	0x40020410
 800669c:	40020428 	.word	0x40020428
 80066a0:	40020440 	.word	0x40020440
 80066a4:	40020458 	.word	0x40020458
 80066a8:	40020470 	.word	0x40020470
 80066ac:	40020488 	.word	0x40020488
 80066b0:	400204a0 	.word	0x400204a0
 80066b4:	400204b8 	.word	0x400204b8
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	bf14      	ite	ne
 80066c6:	2301      	movne	r3, #1
 80066c8:	2300      	moveq	r3, #0
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d015      	beq.n	80066fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 0204 	bic.w	r2, r2, #4
 80066de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e4:	f003 031f 	and.w	r3, r3, #31
 80066e8:	2208      	movs	r2, #8
 80066ea:	409a      	lsls	r2, r3
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f4:	f043 0201 	orr.w	r2, r3, #1
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006700:	f003 031f 	and.w	r3, r3, #31
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	fa22 f303 	lsr.w	r3, r2, r3
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d06e      	beq.n	80067f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a69      	ldr	r2, [pc, #420]	; (80068bc <HAL_DMA_IRQHandler+0x3f8>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d04a      	beq.n	80067b2 <HAL_DMA_IRQHandler+0x2ee>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a67      	ldr	r2, [pc, #412]	; (80068c0 <HAL_DMA_IRQHandler+0x3fc>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d045      	beq.n	80067b2 <HAL_DMA_IRQHandler+0x2ee>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a66      	ldr	r2, [pc, #408]	; (80068c4 <HAL_DMA_IRQHandler+0x400>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d040      	beq.n	80067b2 <HAL_DMA_IRQHandler+0x2ee>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a64      	ldr	r2, [pc, #400]	; (80068c8 <HAL_DMA_IRQHandler+0x404>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d03b      	beq.n	80067b2 <HAL_DMA_IRQHandler+0x2ee>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a63      	ldr	r2, [pc, #396]	; (80068cc <HAL_DMA_IRQHandler+0x408>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d036      	beq.n	80067b2 <HAL_DMA_IRQHandler+0x2ee>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a61      	ldr	r2, [pc, #388]	; (80068d0 <HAL_DMA_IRQHandler+0x40c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d031      	beq.n	80067b2 <HAL_DMA_IRQHandler+0x2ee>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a60      	ldr	r2, [pc, #384]	; (80068d4 <HAL_DMA_IRQHandler+0x410>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d02c      	beq.n	80067b2 <HAL_DMA_IRQHandler+0x2ee>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a5e      	ldr	r2, [pc, #376]	; (80068d8 <HAL_DMA_IRQHandler+0x414>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d027      	beq.n	80067b2 <HAL_DMA_IRQHandler+0x2ee>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a5d      	ldr	r2, [pc, #372]	; (80068dc <HAL_DMA_IRQHandler+0x418>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d022      	beq.n	80067b2 <HAL_DMA_IRQHandler+0x2ee>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a5b      	ldr	r2, [pc, #364]	; (80068e0 <HAL_DMA_IRQHandler+0x41c>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d01d      	beq.n	80067b2 <HAL_DMA_IRQHandler+0x2ee>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a5a      	ldr	r2, [pc, #360]	; (80068e4 <HAL_DMA_IRQHandler+0x420>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d018      	beq.n	80067b2 <HAL_DMA_IRQHandler+0x2ee>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a58      	ldr	r2, [pc, #352]	; (80068e8 <HAL_DMA_IRQHandler+0x424>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d013      	beq.n	80067b2 <HAL_DMA_IRQHandler+0x2ee>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a57      	ldr	r2, [pc, #348]	; (80068ec <HAL_DMA_IRQHandler+0x428>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d00e      	beq.n	80067b2 <HAL_DMA_IRQHandler+0x2ee>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a55      	ldr	r2, [pc, #340]	; (80068f0 <HAL_DMA_IRQHandler+0x42c>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d009      	beq.n	80067b2 <HAL_DMA_IRQHandler+0x2ee>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a54      	ldr	r2, [pc, #336]	; (80068f4 <HAL_DMA_IRQHandler+0x430>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d004      	beq.n	80067b2 <HAL_DMA_IRQHandler+0x2ee>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a52      	ldr	r2, [pc, #328]	; (80068f8 <HAL_DMA_IRQHandler+0x434>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d10a      	bne.n	80067c8 <HAL_DMA_IRQHandler+0x304>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067bc:	2b00      	cmp	r3, #0
 80067be:	bf14      	ite	ne
 80067c0:	2301      	movne	r3, #1
 80067c2:	2300      	moveq	r3, #0
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	e003      	b.n	80067d0 <HAL_DMA_IRQHandler+0x30c>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2300      	movs	r3, #0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00d      	beq.n	80067f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d8:	f003 031f 	and.w	r3, r3, #31
 80067dc:	2201      	movs	r2, #1
 80067de:	409a      	lsls	r2, r3
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e8:	f043 0202 	orr.w	r2, r3, #2
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f4:	f003 031f 	and.w	r3, r3, #31
 80067f8:	2204      	movs	r2, #4
 80067fa:	409a      	lsls	r2, r3
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	4013      	ands	r3, r2
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 808f 	beq.w	8006924 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a2c      	ldr	r2, [pc, #176]	; (80068bc <HAL_DMA_IRQHandler+0x3f8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d04a      	beq.n	80068a6 <HAL_DMA_IRQHandler+0x3e2>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a2a      	ldr	r2, [pc, #168]	; (80068c0 <HAL_DMA_IRQHandler+0x3fc>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d045      	beq.n	80068a6 <HAL_DMA_IRQHandler+0x3e2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a29      	ldr	r2, [pc, #164]	; (80068c4 <HAL_DMA_IRQHandler+0x400>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d040      	beq.n	80068a6 <HAL_DMA_IRQHandler+0x3e2>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a27      	ldr	r2, [pc, #156]	; (80068c8 <HAL_DMA_IRQHandler+0x404>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d03b      	beq.n	80068a6 <HAL_DMA_IRQHandler+0x3e2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a26      	ldr	r2, [pc, #152]	; (80068cc <HAL_DMA_IRQHandler+0x408>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d036      	beq.n	80068a6 <HAL_DMA_IRQHandler+0x3e2>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a24      	ldr	r2, [pc, #144]	; (80068d0 <HAL_DMA_IRQHandler+0x40c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d031      	beq.n	80068a6 <HAL_DMA_IRQHandler+0x3e2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a23      	ldr	r2, [pc, #140]	; (80068d4 <HAL_DMA_IRQHandler+0x410>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d02c      	beq.n	80068a6 <HAL_DMA_IRQHandler+0x3e2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a21      	ldr	r2, [pc, #132]	; (80068d8 <HAL_DMA_IRQHandler+0x414>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d027      	beq.n	80068a6 <HAL_DMA_IRQHandler+0x3e2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a20      	ldr	r2, [pc, #128]	; (80068dc <HAL_DMA_IRQHandler+0x418>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d022      	beq.n	80068a6 <HAL_DMA_IRQHandler+0x3e2>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a1e      	ldr	r2, [pc, #120]	; (80068e0 <HAL_DMA_IRQHandler+0x41c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d01d      	beq.n	80068a6 <HAL_DMA_IRQHandler+0x3e2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a1d      	ldr	r2, [pc, #116]	; (80068e4 <HAL_DMA_IRQHandler+0x420>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d018      	beq.n	80068a6 <HAL_DMA_IRQHandler+0x3e2>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a1b      	ldr	r2, [pc, #108]	; (80068e8 <HAL_DMA_IRQHandler+0x424>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d013      	beq.n	80068a6 <HAL_DMA_IRQHandler+0x3e2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a1a      	ldr	r2, [pc, #104]	; (80068ec <HAL_DMA_IRQHandler+0x428>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00e      	beq.n	80068a6 <HAL_DMA_IRQHandler+0x3e2>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a18      	ldr	r2, [pc, #96]	; (80068f0 <HAL_DMA_IRQHandler+0x42c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d009      	beq.n	80068a6 <HAL_DMA_IRQHandler+0x3e2>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a17      	ldr	r2, [pc, #92]	; (80068f4 <HAL_DMA_IRQHandler+0x430>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d004      	beq.n	80068a6 <HAL_DMA_IRQHandler+0x3e2>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a15      	ldr	r2, [pc, #84]	; (80068f8 <HAL_DMA_IRQHandler+0x434>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d12a      	bne.n	80068fc <HAL_DMA_IRQHandler+0x438>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	bf14      	ite	ne
 80068b4:	2301      	movne	r3, #1
 80068b6:	2300      	moveq	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	e023      	b.n	8006904 <HAL_DMA_IRQHandler+0x440>
 80068bc:	40020010 	.word	0x40020010
 80068c0:	40020028 	.word	0x40020028
 80068c4:	40020040 	.word	0x40020040
 80068c8:	40020058 	.word	0x40020058
 80068cc:	40020070 	.word	0x40020070
 80068d0:	40020088 	.word	0x40020088
 80068d4:	400200a0 	.word	0x400200a0
 80068d8:	400200b8 	.word	0x400200b8
 80068dc:	40020410 	.word	0x40020410
 80068e0:	40020428 	.word	0x40020428
 80068e4:	40020440 	.word	0x40020440
 80068e8:	40020458 	.word	0x40020458
 80068ec:	40020470 	.word	0x40020470
 80068f0:	40020488 	.word	0x40020488
 80068f4:	400204a0 	.word	0x400204a0
 80068f8:	400204b8 	.word	0x400204b8
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2300      	movs	r3, #0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00d      	beq.n	8006924 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690c:	f003 031f 	and.w	r3, r3, #31
 8006910:	2204      	movs	r2, #4
 8006912:	409a      	lsls	r2, r3
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691c:	f043 0204 	orr.w	r2, r3, #4
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006928:	f003 031f 	and.w	r3, r3, #31
 800692c:	2210      	movs	r2, #16
 800692e:	409a      	lsls	r2, r3
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	4013      	ands	r3, r2
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 80a6 	beq.w	8006a86 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a85      	ldr	r2, [pc, #532]	; (8006b54 <HAL_DMA_IRQHandler+0x690>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d04a      	beq.n	80069da <HAL_DMA_IRQHandler+0x516>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a83      	ldr	r2, [pc, #524]	; (8006b58 <HAL_DMA_IRQHandler+0x694>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d045      	beq.n	80069da <HAL_DMA_IRQHandler+0x516>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a82      	ldr	r2, [pc, #520]	; (8006b5c <HAL_DMA_IRQHandler+0x698>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d040      	beq.n	80069da <HAL_DMA_IRQHandler+0x516>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a80      	ldr	r2, [pc, #512]	; (8006b60 <HAL_DMA_IRQHandler+0x69c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d03b      	beq.n	80069da <HAL_DMA_IRQHandler+0x516>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a7f      	ldr	r2, [pc, #508]	; (8006b64 <HAL_DMA_IRQHandler+0x6a0>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d036      	beq.n	80069da <HAL_DMA_IRQHandler+0x516>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a7d      	ldr	r2, [pc, #500]	; (8006b68 <HAL_DMA_IRQHandler+0x6a4>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d031      	beq.n	80069da <HAL_DMA_IRQHandler+0x516>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a7c      	ldr	r2, [pc, #496]	; (8006b6c <HAL_DMA_IRQHandler+0x6a8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d02c      	beq.n	80069da <HAL_DMA_IRQHandler+0x516>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a7a      	ldr	r2, [pc, #488]	; (8006b70 <HAL_DMA_IRQHandler+0x6ac>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d027      	beq.n	80069da <HAL_DMA_IRQHandler+0x516>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a79      	ldr	r2, [pc, #484]	; (8006b74 <HAL_DMA_IRQHandler+0x6b0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d022      	beq.n	80069da <HAL_DMA_IRQHandler+0x516>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a77      	ldr	r2, [pc, #476]	; (8006b78 <HAL_DMA_IRQHandler+0x6b4>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d01d      	beq.n	80069da <HAL_DMA_IRQHandler+0x516>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a76      	ldr	r2, [pc, #472]	; (8006b7c <HAL_DMA_IRQHandler+0x6b8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d018      	beq.n	80069da <HAL_DMA_IRQHandler+0x516>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a74      	ldr	r2, [pc, #464]	; (8006b80 <HAL_DMA_IRQHandler+0x6bc>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d013      	beq.n	80069da <HAL_DMA_IRQHandler+0x516>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a73      	ldr	r2, [pc, #460]	; (8006b84 <HAL_DMA_IRQHandler+0x6c0>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00e      	beq.n	80069da <HAL_DMA_IRQHandler+0x516>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a71      	ldr	r2, [pc, #452]	; (8006b88 <HAL_DMA_IRQHandler+0x6c4>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d009      	beq.n	80069da <HAL_DMA_IRQHandler+0x516>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a70      	ldr	r2, [pc, #448]	; (8006b8c <HAL_DMA_IRQHandler+0x6c8>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d004      	beq.n	80069da <HAL_DMA_IRQHandler+0x516>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a6e      	ldr	r2, [pc, #440]	; (8006b90 <HAL_DMA_IRQHandler+0x6cc>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d10a      	bne.n	80069f0 <HAL_DMA_IRQHandler+0x52c>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0308 	and.w	r3, r3, #8
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	bf14      	ite	ne
 80069e8:	2301      	movne	r3, #1
 80069ea:	2300      	moveq	r3, #0
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	e009      	b.n	8006a04 <HAL_DMA_IRQHandler+0x540>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0304 	and.w	r3, r3, #4
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	bf14      	ite	ne
 80069fe:	2301      	movne	r3, #1
 8006a00:	2300      	moveq	r3, #0
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d03e      	beq.n	8006a86 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a0c:	f003 031f 	and.w	r3, r3, #31
 8006a10:	2210      	movs	r2, #16
 8006a12:	409a      	lsls	r2, r3
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d018      	beq.n	8006a58 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d108      	bne.n	8006a46 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d024      	beq.n	8006a86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	4798      	blx	r3
 8006a44:	e01f      	b.n	8006a86 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d01b      	beq.n	8006a86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	4798      	blx	r3
 8006a56:	e016      	b.n	8006a86 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d107      	bne.n	8006a76 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0208 	bic.w	r2, r2, #8
 8006a74:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a8a:	f003 031f 	and.w	r3, r3, #31
 8006a8e:	2220      	movs	r2, #32
 8006a90:	409a      	lsls	r2, r3
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	4013      	ands	r3, r2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f000 8110 	beq.w	8006cbc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a2c      	ldr	r2, [pc, #176]	; (8006b54 <HAL_DMA_IRQHandler+0x690>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d04a      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x678>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a2b      	ldr	r2, [pc, #172]	; (8006b58 <HAL_DMA_IRQHandler+0x694>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d045      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x678>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a29      	ldr	r2, [pc, #164]	; (8006b5c <HAL_DMA_IRQHandler+0x698>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d040      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x678>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a28      	ldr	r2, [pc, #160]	; (8006b60 <HAL_DMA_IRQHandler+0x69c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d03b      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x678>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a26      	ldr	r2, [pc, #152]	; (8006b64 <HAL_DMA_IRQHandler+0x6a0>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d036      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x678>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a25      	ldr	r2, [pc, #148]	; (8006b68 <HAL_DMA_IRQHandler+0x6a4>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d031      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x678>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a23      	ldr	r2, [pc, #140]	; (8006b6c <HAL_DMA_IRQHandler+0x6a8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d02c      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x678>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a22      	ldr	r2, [pc, #136]	; (8006b70 <HAL_DMA_IRQHandler+0x6ac>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d027      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x678>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a20      	ldr	r2, [pc, #128]	; (8006b74 <HAL_DMA_IRQHandler+0x6b0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d022      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x678>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a1f      	ldr	r2, [pc, #124]	; (8006b78 <HAL_DMA_IRQHandler+0x6b4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d01d      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x678>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a1d      	ldr	r2, [pc, #116]	; (8006b7c <HAL_DMA_IRQHandler+0x6b8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d018      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x678>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a1c      	ldr	r2, [pc, #112]	; (8006b80 <HAL_DMA_IRQHandler+0x6bc>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d013      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x678>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a1a      	ldr	r2, [pc, #104]	; (8006b84 <HAL_DMA_IRQHandler+0x6c0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d00e      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x678>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a19      	ldr	r2, [pc, #100]	; (8006b88 <HAL_DMA_IRQHandler+0x6c4>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d009      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x678>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a17      	ldr	r2, [pc, #92]	; (8006b8c <HAL_DMA_IRQHandler+0x6c8>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d004      	beq.n	8006b3c <HAL_DMA_IRQHandler+0x678>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a16      	ldr	r2, [pc, #88]	; (8006b90 <HAL_DMA_IRQHandler+0x6cc>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d12b      	bne.n	8006b94 <HAL_DMA_IRQHandler+0x6d0>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0310 	and.w	r3, r3, #16
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	bf14      	ite	ne
 8006b4a:	2301      	movne	r3, #1
 8006b4c:	2300      	moveq	r3, #0
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	e02a      	b.n	8006ba8 <HAL_DMA_IRQHandler+0x6e4>
 8006b52:	bf00      	nop
 8006b54:	40020010 	.word	0x40020010
 8006b58:	40020028 	.word	0x40020028
 8006b5c:	40020040 	.word	0x40020040
 8006b60:	40020058 	.word	0x40020058
 8006b64:	40020070 	.word	0x40020070
 8006b68:	40020088 	.word	0x40020088
 8006b6c:	400200a0 	.word	0x400200a0
 8006b70:	400200b8 	.word	0x400200b8
 8006b74:	40020410 	.word	0x40020410
 8006b78:	40020428 	.word	0x40020428
 8006b7c:	40020440 	.word	0x40020440
 8006b80:	40020458 	.word	0x40020458
 8006b84:	40020470 	.word	0x40020470
 8006b88:	40020488 	.word	0x40020488
 8006b8c:	400204a0 	.word	0x400204a0
 8006b90:	400204b8 	.word	0x400204b8
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	bf14      	ite	ne
 8006ba2:	2301      	movne	r3, #1
 8006ba4:	2300      	moveq	r3, #0
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 8087 	beq.w	8006cbc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb2:	f003 031f 	and.w	r3, r3, #31
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	409a      	lsls	r2, r3
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d139      	bne.n	8006c3e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0216 	bic.w	r2, r2, #22
 8006bd8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	695a      	ldr	r2, [r3, #20]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006be8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d103      	bne.n	8006bfa <HAL_DMA_IRQHandler+0x736>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d007      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f022 0208 	bic.w	r2, r2, #8
 8006c08:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c0e:	f003 031f 	and.w	r3, r3, #31
 8006c12:	223f      	movs	r2, #63	; 0x3f
 8006c14:	409a      	lsls	r2, r3
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 8382 	beq.w	8007338 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	4798      	blx	r3
          }
          return;
 8006c3c:	e37c      	b.n	8007338 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d018      	beq.n	8006c7e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d108      	bne.n	8006c6c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d02c      	beq.n	8006cbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	4798      	blx	r3
 8006c6a:	e027      	b.n	8006cbc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d023      	beq.n	8006cbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	4798      	blx	r3
 8006c7c:	e01e      	b.n	8006cbc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10f      	bne.n	8006cac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 0210 	bic.w	r2, r2, #16
 8006c9a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 833e 	beq.w	8007342 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 8088 	beq.w	8006de4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2204      	movs	r2, #4
 8006cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a89      	ldr	r2, [pc, #548]	; (8006f08 <HAL_DMA_IRQHandler+0xa44>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d04a      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x8b8>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a88      	ldr	r2, [pc, #544]	; (8006f0c <HAL_DMA_IRQHandler+0xa48>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d045      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x8b8>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a86      	ldr	r2, [pc, #536]	; (8006f10 <HAL_DMA_IRQHandler+0xa4c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d040      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x8b8>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a85      	ldr	r2, [pc, #532]	; (8006f14 <HAL_DMA_IRQHandler+0xa50>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d03b      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x8b8>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a83      	ldr	r2, [pc, #524]	; (8006f18 <HAL_DMA_IRQHandler+0xa54>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d036      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x8b8>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a82      	ldr	r2, [pc, #520]	; (8006f1c <HAL_DMA_IRQHandler+0xa58>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d031      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x8b8>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a80      	ldr	r2, [pc, #512]	; (8006f20 <HAL_DMA_IRQHandler+0xa5c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d02c      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x8b8>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a7f      	ldr	r2, [pc, #508]	; (8006f24 <HAL_DMA_IRQHandler+0xa60>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d027      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x8b8>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a7d      	ldr	r2, [pc, #500]	; (8006f28 <HAL_DMA_IRQHandler+0xa64>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d022      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x8b8>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a7c      	ldr	r2, [pc, #496]	; (8006f2c <HAL_DMA_IRQHandler+0xa68>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d01d      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x8b8>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a7a      	ldr	r2, [pc, #488]	; (8006f30 <HAL_DMA_IRQHandler+0xa6c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d018      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x8b8>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a79      	ldr	r2, [pc, #484]	; (8006f34 <HAL_DMA_IRQHandler+0xa70>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d013      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x8b8>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a77      	ldr	r2, [pc, #476]	; (8006f38 <HAL_DMA_IRQHandler+0xa74>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00e      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x8b8>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a76      	ldr	r2, [pc, #472]	; (8006f3c <HAL_DMA_IRQHandler+0xa78>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d009      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x8b8>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a74      	ldr	r2, [pc, #464]	; (8006f40 <HAL_DMA_IRQHandler+0xa7c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d004      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x8b8>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a73      	ldr	r2, [pc, #460]	; (8006f44 <HAL_DMA_IRQHandler+0xa80>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d108      	bne.n	8006d8e <HAL_DMA_IRQHandler+0x8ca>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 0201 	bic.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	e007      	b.n	8006d9e <HAL_DMA_IRQHandler+0x8da>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 0201 	bic.w	r2, r2, #1
 8006d9c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3301      	adds	r3, #1
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d307      	bcc.n	8006dba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1f2      	bne.n	8006d9e <HAL_DMA_IRQHandler+0x8da>
 8006db8:	e000      	b.n	8006dbc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006dba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d004      	beq.n	8006dd4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2203      	movs	r2, #3
 8006dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006dd2:	e003      	b.n	8006ddc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 82aa 	beq.w	8007342 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	4798      	blx	r3
 8006df6:	e2a4      	b.n	8007342 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a52      	ldr	r2, [pc, #328]	; (8006f48 <HAL_DMA_IRQHandler+0xa84>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d04a      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x9d4>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a51      	ldr	r2, [pc, #324]	; (8006f4c <HAL_DMA_IRQHandler+0xa88>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d045      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x9d4>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a4f      	ldr	r2, [pc, #316]	; (8006f50 <HAL_DMA_IRQHandler+0xa8c>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d040      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x9d4>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a4e      	ldr	r2, [pc, #312]	; (8006f54 <HAL_DMA_IRQHandler+0xa90>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d03b      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x9d4>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a4c      	ldr	r2, [pc, #304]	; (8006f58 <HAL_DMA_IRQHandler+0xa94>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d036      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x9d4>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a4b      	ldr	r2, [pc, #300]	; (8006f5c <HAL_DMA_IRQHandler+0xa98>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d031      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x9d4>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a49      	ldr	r2, [pc, #292]	; (8006f60 <HAL_DMA_IRQHandler+0xa9c>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d02c      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x9d4>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a48      	ldr	r2, [pc, #288]	; (8006f64 <HAL_DMA_IRQHandler+0xaa0>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d027      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x9d4>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a46      	ldr	r2, [pc, #280]	; (8006f68 <HAL_DMA_IRQHandler+0xaa4>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d022      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x9d4>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a45      	ldr	r2, [pc, #276]	; (8006f6c <HAL_DMA_IRQHandler+0xaa8>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d01d      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x9d4>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a43      	ldr	r2, [pc, #268]	; (8006f70 <HAL_DMA_IRQHandler+0xaac>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d018      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x9d4>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a42      	ldr	r2, [pc, #264]	; (8006f74 <HAL_DMA_IRQHandler+0xab0>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d013      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x9d4>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a40      	ldr	r2, [pc, #256]	; (8006f78 <HAL_DMA_IRQHandler+0xab4>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d00e      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x9d4>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a3f      	ldr	r2, [pc, #252]	; (8006f7c <HAL_DMA_IRQHandler+0xab8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d009      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x9d4>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a3d      	ldr	r2, [pc, #244]	; (8006f80 <HAL_DMA_IRQHandler+0xabc>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d004      	beq.n	8006e98 <HAL_DMA_IRQHandler+0x9d4>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a3c      	ldr	r2, [pc, #240]	; (8006f84 <HAL_DMA_IRQHandler+0xac0>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d101      	bne.n	8006e9c <HAL_DMA_IRQHandler+0x9d8>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e000      	b.n	8006e9e <HAL_DMA_IRQHandler+0x9da>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 824f 	beq.w	8007342 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb0:	f003 031f 	and.w	r3, r3, #31
 8006eb4:	2204      	movs	r2, #4
 8006eb6:	409a      	lsls	r2, r3
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 80dd 	beq.w	800707c <HAL_DMA_IRQHandler+0xbb8>
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 80d7 	beq.w	800707c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed2:	f003 031f 	and.w	r3, r3, #31
 8006ed6:	2204      	movs	r2, #4
 8006ed8:	409a      	lsls	r2, r3
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d059      	beq.n	8006f9c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d14a      	bne.n	8006f88 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 8220 	beq.w	800733c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f04:	e21a      	b.n	800733c <HAL_DMA_IRQHandler+0xe78>
 8006f06:	bf00      	nop
 8006f08:	40020010 	.word	0x40020010
 8006f0c:	40020028 	.word	0x40020028
 8006f10:	40020040 	.word	0x40020040
 8006f14:	40020058 	.word	0x40020058
 8006f18:	40020070 	.word	0x40020070
 8006f1c:	40020088 	.word	0x40020088
 8006f20:	400200a0 	.word	0x400200a0
 8006f24:	400200b8 	.word	0x400200b8
 8006f28:	40020410 	.word	0x40020410
 8006f2c:	40020428 	.word	0x40020428
 8006f30:	40020440 	.word	0x40020440
 8006f34:	40020458 	.word	0x40020458
 8006f38:	40020470 	.word	0x40020470
 8006f3c:	40020488 	.word	0x40020488
 8006f40:	400204a0 	.word	0x400204a0
 8006f44:	400204b8 	.word	0x400204b8
 8006f48:	48022c08 	.word	0x48022c08
 8006f4c:	48022c1c 	.word	0x48022c1c
 8006f50:	48022c30 	.word	0x48022c30
 8006f54:	48022c44 	.word	0x48022c44
 8006f58:	48022c58 	.word	0x48022c58
 8006f5c:	48022c6c 	.word	0x48022c6c
 8006f60:	48022c80 	.word	0x48022c80
 8006f64:	48022c94 	.word	0x48022c94
 8006f68:	58025408 	.word	0x58025408
 8006f6c:	5802541c 	.word	0x5802541c
 8006f70:	58025430 	.word	0x58025430
 8006f74:	58025444 	.word	0x58025444
 8006f78:	58025458 	.word	0x58025458
 8006f7c:	5802546c 	.word	0x5802546c
 8006f80:	58025480 	.word	0x58025480
 8006f84:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 81d5 	beq.w	800733c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f9a:	e1cf      	b.n	800733c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f003 0320 	and.w	r3, r3, #32
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d160      	bne.n	8007068 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a7f      	ldr	r2, [pc, #508]	; (80071a8 <HAL_DMA_IRQHandler+0xce4>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d04a      	beq.n	8007046 <HAL_DMA_IRQHandler+0xb82>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a7d      	ldr	r2, [pc, #500]	; (80071ac <HAL_DMA_IRQHandler+0xce8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d045      	beq.n	8007046 <HAL_DMA_IRQHandler+0xb82>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a7c      	ldr	r2, [pc, #496]	; (80071b0 <HAL_DMA_IRQHandler+0xcec>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d040      	beq.n	8007046 <HAL_DMA_IRQHandler+0xb82>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a7a      	ldr	r2, [pc, #488]	; (80071b4 <HAL_DMA_IRQHandler+0xcf0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d03b      	beq.n	8007046 <HAL_DMA_IRQHandler+0xb82>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a79      	ldr	r2, [pc, #484]	; (80071b8 <HAL_DMA_IRQHandler+0xcf4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d036      	beq.n	8007046 <HAL_DMA_IRQHandler+0xb82>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a77      	ldr	r2, [pc, #476]	; (80071bc <HAL_DMA_IRQHandler+0xcf8>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d031      	beq.n	8007046 <HAL_DMA_IRQHandler+0xb82>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a76      	ldr	r2, [pc, #472]	; (80071c0 <HAL_DMA_IRQHandler+0xcfc>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d02c      	beq.n	8007046 <HAL_DMA_IRQHandler+0xb82>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a74      	ldr	r2, [pc, #464]	; (80071c4 <HAL_DMA_IRQHandler+0xd00>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d027      	beq.n	8007046 <HAL_DMA_IRQHandler+0xb82>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a73      	ldr	r2, [pc, #460]	; (80071c8 <HAL_DMA_IRQHandler+0xd04>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d022      	beq.n	8007046 <HAL_DMA_IRQHandler+0xb82>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a71      	ldr	r2, [pc, #452]	; (80071cc <HAL_DMA_IRQHandler+0xd08>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d01d      	beq.n	8007046 <HAL_DMA_IRQHandler+0xb82>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a70      	ldr	r2, [pc, #448]	; (80071d0 <HAL_DMA_IRQHandler+0xd0c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d018      	beq.n	8007046 <HAL_DMA_IRQHandler+0xb82>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a6e      	ldr	r2, [pc, #440]	; (80071d4 <HAL_DMA_IRQHandler+0xd10>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d013      	beq.n	8007046 <HAL_DMA_IRQHandler+0xb82>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a6d      	ldr	r2, [pc, #436]	; (80071d8 <HAL_DMA_IRQHandler+0xd14>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d00e      	beq.n	8007046 <HAL_DMA_IRQHandler+0xb82>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a6b      	ldr	r2, [pc, #428]	; (80071dc <HAL_DMA_IRQHandler+0xd18>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d009      	beq.n	8007046 <HAL_DMA_IRQHandler+0xb82>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a6a      	ldr	r2, [pc, #424]	; (80071e0 <HAL_DMA_IRQHandler+0xd1c>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d004      	beq.n	8007046 <HAL_DMA_IRQHandler+0xb82>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a68      	ldr	r2, [pc, #416]	; (80071e4 <HAL_DMA_IRQHandler+0xd20>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d108      	bne.n	8007058 <HAL_DMA_IRQHandler+0xb94>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0208 	bic.w	r2, r2, #8
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	e007      	b.n	8007068 <HAL_DMA_IRQHandler+0xba4>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f022 0204 	bic.w	r2, r2, #4
 8007066:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 8165 	beq.w	800733c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800707a:	e15f      	b.n	800733c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007080:	f003 031f 	and.w	r3, r3, #31
 8007084:	2202      	movs	r2, #2
 8007086:	409a      	lsls	r2, r3
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	4013      	ands	r3, r2
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 80c5 	beq.w	800721c <HAL_DMA_IRQHandler+0xd58>
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	f000 80bf 	beq.w	800721c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a2:	f003 031f 	and.w	r3, r3, #31
 80070a6:	2202      	movs	r2, #2
 80070a8:	409a      	lsls	r2, r3
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d018      	beq.n	80070ea <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d109      	bne.n	80070d6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 813a 	beq.w	8007340 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070d4:	e134      	b.n	8007340 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 8130 	beq.w	8007340 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070e8:	e12a      	b.n	8007340 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f003 0320 	and.w	r3, r3, #32
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f040 8089 	bne.w	8007208 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a2b      	ldr	r2, [pc, #172]	; (80071a8 <HAL_DMA_IRQHandler+0xce4>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d04a      	beq.n	8007196 <HAL_DMA_IRQHandler+0xcd2>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a29      	ldr	r2, [pc, #164]	; (80071ac <HAL_DMA_IRQHandler+0xce8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d045      	beq.n	8007196 <HAL_DMA_IRQHandler+0xcd2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a28      	ldr	r2, [pc, #160]	; (80071b0 <HAL_DMA_IRQHandler+0xcec>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d040      	beq.n	8007196 <HAL_DMA_IRQHandler+0xcd2>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a26      	ldr	r2, [pc, #152]	; (80071b4 <HAL_DMA_IRQHandler+0xcf0>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d03b      	beq.n	8007196 <HAL_DMA_IRQHandler+0xcd2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a25      	ldr	r2, [pc, #148]	; (80071b8 <HAL_DMA_IRQHandler+0xcf4>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d036      	beq.n	8007196 <HAL_DMA_IRQHandler+0xcd2>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a23      	ldr	r2, [pc, #140]	; (80071bc <HAL_DMA_IRQHandler+0xcf8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d031      	beq.n	8007196 <HAL_DMA_IRQHandler+0xcd2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a22      	ldr	r2, [pc, #136]	; (80071c0 <HAL_DMA_IRQHandler+0xcfc>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d02c      	beq.n	8007196 <HAL_DMA_IRQHandler+0xcd2>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a20      	ldr	r2, [pc, #128]	; (80071c4 <HAL_DMA_IRQHandler+0xd00>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d027      	beq.n	8007196 <HAL_DMA_IRQHandler+0xcd2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a1f      	ldr	r2, [pc, #124]	; (80071c8 <HAL_DMA_IRQHandler+0xd04>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d022      	beq.n	8007196 <HAL_DMA_IRQHandler+0xcd2>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a1d      	ldr	r2, [pc, #116]	; (80071cc <HAL_DMA_IRQHandler+0xd08>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d01d      	beq.n	8007196 <HAL_DMA_IRQHandler+0xcd2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a1c      	ldr	r2, [pc, #112]	; (80071d0 <HAL_DMA_IRQHandler+0xd0c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d018      	beq.n	8007196 <HAL_DMA_IRQHandler+0xcd2>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a1a      	ldr	r2, [pc, #104]	; (80071d4 <HAL_DMA_IRQHandler+0xd10>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d013      	beq.n	8007196 <HAL_DMA_IRQHandler+0xcd2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a19      	ldr	r2, [pc, #100]	; (80071d8 <HAL_DMA_IRQHandler+0xd14>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d00e      	beq.n	8007196 <HAL_DMA_IRQHandler+0xcd2>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a17      	ldr	r2, [pc, #92]	; (80071dc <HAL_DMA_IRQHandler+0xd18>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d009      	beq.n	8007196 <HAL_DMA_IRQHandler+0xcd2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a16      	ldr	r2, [pc, #88]	; (80071e0 <HAL_DMA_IRQHandler+0xd1c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d004      	beq.n	8007196 <HAL_DMA_IRQHandler+0xcd2>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a14      	ldr	r2, [pc, #80]	; (80071e4 <HAL_DMA_IRQHandler+0xd20>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d128      	bne.n	80071e8 <HAL_DMA_IRQHandler+0xd24>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0214 	bic.w	r2, r2, #20
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	e027      	b.n	80071f8 <HAL_DMA_IRQHandler+0xd34>
 80071a8:	40020010 	.word	0x40020010
 80071ac:	40020028 	.word	0x40020028
 80071b0:	40020040 	.word	0x40020040
 80071b4:	40020058 	.word	0x40020058
 80071b8:	40020070 	.word	0x40020070
 80071bc:	40020088 	.word	0x40020088
 80071c0:	400200a0 	.word	0x400200a0
 80071c4:	400200b8 	.word	0x400200b8
 80071c8:	40020410 	.word	0x40020410
 80071cc:	40020428 	.word	0x40020428
 80071d0:	40020440 	.word	0x40020440
 80071d4:	40020458 	.word	0x40020458
 80071d8:	40020470 	.word	0x40020470
 80071dc:	40020488 	.word	0x40020488
 80071e0:	400204a0 	.word	0x400204a0
 80071e4:	400204b8 	.word	0x400204b8
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 020a 	bic.w	r2, r2, #10
 80071f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 8097 	beq.w	8007340 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800721a:	e091      	b.n	8007340 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007220:	f003 031f 	and.w	r3, r3, #31
 8007224:	2208      	movs	r2, #8
 8007226:	409a      	lsls	r2, r3
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	4013      	ands	r3, r2
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 8088 	beq.w	8007342 <HAL_DMA_IRQHandler+0xe7e>
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f003 0308 	and.w	r3, r3, #8
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 8082 	beq.w	8007342 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a41      	ldr	r2, [pc, #260]	; (8007348 <HAL_DMA_IRQHandler+0xe84>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d04a      	beq.n	80072de <HAL_DMA_IRQHandler+0xe1a>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a3f      	ldr	r2, [pc, #252]	; (800734c <HAL_DMA_IRQHandler+0xe88>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d045      	beq.n	80072de <HAL_DMA_IRQHandler+0xe1a>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a3e      	ldr	r2, [pc, #248]	; (8007350 <HAL_DMA_IRQHandler+0xe8c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d040      	beq.n	80072de <HAL_DMA_IRQHandler+0xe1a>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a3c      	ldr	r2, [pc, #240]	; (8007354 <HAL_DMA_IRQHandler+0xe90>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d03b      	beq.n	80072de <HAL_DMA_IRQHandler+0xe1a>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a3b      	ldr	r2, [pc, #236]	; (8007358 <HAL_DMA_IRQHandler+0xe94>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d036      	beq.n	80072de <HAL_DMA_IRQHandler+0xe1a>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a39      	ldr	r2, [pc, #228]	; (800735c <HAL_DMA_IRQHandler+0xe98>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d031      	beq.n	80072de <HAL_DMA_IRQHandler+0xe1a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a38      	ldr	r2, [pc, #224]	; (8007360 <HAL_DMA_IRQHandler+0xe9c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d02c      	beq.n	80072de <HAL_DMA_IRQHandler+0xe1a>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a36      	ldr	r2, [pc, #216]	; (8007364 <HAL_DMA_IRQHandler+0xea0>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d027      	beq.n	80072de <HAL_DMA_IRQHandler+0xe1a>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a35      	ldr	r2, [pc, #212]	; (8007368 <HAL_DMA_IRQHandler+0xea4>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d022      	beq.n	80072de <HAL_DMA_IRQHandler+0xe1a>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a33      	ldr	r2, [pc, #204]	; (800736c <HAL_DMA_IRQHandler+0xea8>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d01d      	beq.n	80072de <HAL_DMA_IRQHandler+0xe1a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a32      	ldr	r2, [pc, #200]	; (8007370 <HAL_DMA_IRQHandler+0xeac>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d018      	beq.n	80072de <HAL_DMA_IRQHandler+0xe1a>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a30      	ldr	r2, [pc, #192]	; (8007374 <HAL_DMA_IRQHandler+0xeb0>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d013      	beq.n	80072de <HAL_DMA_IRQHandler+0xe1a>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a2f      	ldr	r2, [pc, #188]	; (8007378 <HAL_DMA_IRQHandler+0xeb4>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00e      	beq.n	80072de <HAL_DMA_IRQHandler+0xe1a>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a2d      	ldr	r2, [pc, #180]	; (800737c <HAL_DMA_IRQHandler+0xeb8>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d009      	beq.n	80072de <HAL_DMA_IRQHandler+0xe1a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a2c      	ldr	r2, [pc, #176]	; (8007380 <HAL_DMA_IRQHandler+0xebc>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d004      	beq.n	80072de <HAL_DMA_IRQHandler+0xe1a>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a2a      	ldr	r2, [pc, #168]	; (8007384 <HAL_DMA_IRQHandler+0xec0>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d108      	bne.n	80072f0 <HAL_DMA_IRQHandler+0xe2c>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f022 021c 	bic.w	r2, r2, #28
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	e007      	b.n	8007300 <HAL_DMA_IRQHandler+0xe3c>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 020e 	bic.w	r2, r2, #14
 80072fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007304:	f003 031f 	and.w	r3, r3, #31
 8007308:	2201      	movs	r2, #1
 800730a:	409a      	lsls	r2, r3
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800732a:	2b00      	cmp	r3, #0
 800732c:	d009      	beq.n	8007342 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	4798      	blx	r3
 8007336:	e004      	b.n	8007342 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8007338:	bf00      	nop
 800733a:	e002      	b.n	8007342 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800733c:	bf00      	nop
 800733e:	e000      	b.n	8007342 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007340:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007342:	3728      	adds	r7, #40	; 0x28
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	40020010 	.word	0x40020010
 800734c:	40020028 	.word	0x40020028
 8007350:	40020040 	.word	0x40020040
 8007354:	40020058 	.word	0x40020058
 8007358:	40020070 	.word	0x40020070
 800735c:	40020088 	.word	0x40020088
 8007360:	400200a0 	.word	0x400200a0
 8007364:	400200b8 	.word	0x400200b8
 8007368:	40020410 	.word	0x40020410
 800736c:	40020428 	.word	0x40020428
 8007370:	40020440 	.word	0x40020440
 8007374:	40020458 	.word	0x40020458
 8007378:	40020470 	.word	0x40020470
 800737c:	40020488 	.word	0x40020488
 8007380:	400204a0 	.word	0x400204a0
 8007384:	400204b8 	.word	0x400204b8

08007388 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007396:	b2db      	uxtb	r3, r3
}
 8007398:	4618      	mov	r0, r3
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
 80073b0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073bc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a7f      	ldr	r2, [pc, #508]	; (80075c0 <DMA_SetConfig+0x21c>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d072      	beq.n	80074ae <DMA_SetConfig+0x10a>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a7d      	ldr	r2, [pc, #500]	; (80075c4 <DMA_SetConfig+0x220>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d06d      	beq.n	80074ae <DMA_SetConfig+0x10a>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a7c      	ldr	r2, [pc, #496]	; (80075c8 <DMA_SetConfig+0x224>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d068      	beq.n	80074ae <DMA_SetConfig+0x10a>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a7a      	ldr	r2, [pc, #488]	; (80075cc <DMA_SetConfig+0x228>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d063      	beq.n	80074ae <DMA_SetConfig+0x10a>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a79      	ldr	r2, [pc, #484]	; (80075d0 <DMA_SetConfig+0x22c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d05e      	beq.n	80074ae <DMA_SetConfig+0x10a>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a77      	ldr	r2, [pc, #476]	; (80075d4 <DMA_SetConfig+0x230>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d059      	beq.n	80074ae <DMA_SetConfig+0x10a>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a76      	ldr	r2, [pc, #472]	; (80075d8 <DMA_SetConfig+0x234>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d054      	beq.n	80074ae <DMA_SetConfig+0x10a>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a74      	ldr	r2, [pc, #464]	; (80075dc <DMA_SetConfig+0x238>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d04f      	beq.n	80074ae <DMA_SetConfig+0x10a>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a73      	ldr	r2, [pc, #460]	; (80075e0 <DMA_SetConfig+0x23c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d04a      	beq.n	80074ae <DMA_SetConfig+0x10a>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a71      	ldr	r2, [pc, #452]	; (80075e4 <DMA_SetConfig+0x240>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d045      	beq.n	80074ae <DMA_SetConfig+0x10a>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a70      	ldr	r2, [pc, #448]	; (80075e8 <DMA_SetConfig+0x244>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d040      	beq.n	80074ae <DMA_SetConfig+0x10a>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a6e      	ldr	r2, [pc, #440]	; (80075ec <DMA_SetConfig+0x248>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d03b      	beq.n	80074ae <DMA_SetConfig+0x10a>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a6d      	ldr	r2, [pc, #436]	; (80075f0 <DMA_SetConfig+0x24c>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d036      	beq.n	80074ae <DMA_SetConfig+0x10a>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a6b      	ldr	r2, [pc, #428]	; (80075f4 <DMA_SetConfig+0x250>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d031      	beq.n	80074ae <DMA_SetConfig+0x10a>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a6a      	ldr	r2, [pc, #424]	; (80075f8 <DMA_SetConfig+0x254>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d02c      	beq.n	80074ae <DMA_SetConfig+0x10a>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a68      	ldr	r2, [pc, #416]	; (80075fc <DMA_SetConfig+0x258>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d027      	beq.n	80074ae <DMA_SetConfig+0x10a>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a67      	ldr	r2, [pc, #412]	; (8007600 <DMA_SetConfig+0x25c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d022      	beq.n	80074ae <DMA_SetConfig+0x10a>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a65      	ldr	r2, [pc, #404]	; (8007604 <DMA_SetConfig+0x260>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d01d      	beq.n	80074ae <DMA_SetConfig+0x10a>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a64      	ldr	r2, [pc, #400]	; (8007608 <DMA_SetConfig+0x264>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d018      	beq.n	80074ae <DMA_SetConfig+0x10a>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a62      	ldr	r2, [pc, #392]	; (800760c <DMA_SetConfig+0x268>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d013      	beq.n	80074ae <DMA_SetConfig+0x10a>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a61      	ldr	r2, [pc, #388]	; (8007610 <DMA_SetConfig+0x26c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d00e      	beq.n	80074ae <DMA_SetConfig+0x10a>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a5f      	ldr	r2, [pc, #380]	; (8007614 <DMA_SetConfig+0x270>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d009      	beq.n	80074ae <DMA_SetConfig+0x10a>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a5e      	ldr	r2, [pc, #376]	; (8007618 <DMA_SetConfig+0x274>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d004      	beq.n	80074ae <DMA_SetConfig+0x10a>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a5c      	ldr	r2, [pc, #368]	; (800761c <DMA_SetConfig+0x278>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d101      	bne.n	80074b2 <DMA_SetConfig+0x10e>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e000      	b.n	80074b4 <DMA_SetConfig+0x110>
 80074b2:	2300      	movs	r3, #0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00d      	beq.n	80074d4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80074c0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d004      	beq.n	80074d4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80074d2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a39      	ldr	r2, [pc, #228]	; (80075c0 <DMA_SetConfig+0x21c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d04a      	beq.n	8007574 <DMA_SetConfig+0x1d0>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a38      	ldr	r2, [pc, #224]	; (80075c4 <DMA_SetConfig+0x220>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d045      	beq.n	8007574 <DMA_SetConfig+0x1d0>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a36      	ldr	r2, [pc, #216]	; (80075c8 <DMA_SetConfig+0x224>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d040      	beq.n	8007574 <DMA_SetConfig+0x1d0>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a35      	ldr	r2, [pc, #212]	; (80075cc <DMA_SetConfig+0x228>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d03b      	beq.n	8007574 <DMA_SetConfig+0x1d0>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a33      	ldr	r2, [pc, #204]	; (80075d0 <DMA_SetConfig+0x22c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d036      	beq.n	8007574 <DMA_SetConfig+0x1d0>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a32      	ldr	r2, [pc, #200]	; (80075d4 <DMA_SetConfig+0x230>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d031      	beq.n	8007574 <DMA_SetConfig+0x1d0>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a30      	ldr	r2, [pc, #192]	; (80075d8 <DMA_SetConfig+0x234>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d02c      	beq.n	8007574 <DMA_SetConfig+0x1d0>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a2f      	ldr	r2, [pc, #188]	; (80075dc <DMA_SetConfig+0x238>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d027      	beq.n	8007574 <DMA_SetConfig+0x1d0>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a2d      	ldr	r2, [pc, #180]	; (80075e0 <DMA_SetConfig+0x23c>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d022      	beq.n	8007574 <DMA_SetConfig+0x1d0>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a2c      	ldr	r2, [pc, #176]	; (80075e4 <DMA_SetConfig+0x240>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d01d      	beq.n	8007574 <DMA_SetConfig+0x1d0>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a2a      	ldr	r2, [pc, #168]	; (80075e8 <DMA_SetConfig+0x244>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d018      	beq.n	8007574 <DMA_SetConfig+0x1d0>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a29      	ldr	r2, [pc, #164]	; (80075ec <DMA_SetConfig+0x248>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d013      	beq.n	8007574 <DMA_SetConfig+0x1d0>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a27      	ldr	r2, [pc, #156]	; (80075f0 <DMA_SetConfig+0x24c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00e      	beq.n	8007574 <DMA_SetConfig+0x1d0>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a26      	ldr	r2, [pc, #152]	; (80075f4 <DMA_SetConfig+0x250>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d009      	beq.n	8007574 <DMA_SetConfig+0x1d0>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a24      	ldr	r2, [pc, #144]	; (80075f8 <DMA_SetConfig+0x254>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d004      	beq.n	8007574 <DMA_SetConfig+0x1d0>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a23      	ldr	r2, [pc, #140]	; (80075fc <DMA_SetConfig+0x258>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d101      	bne.n	8007578 <DMA_SetConfig+0x1d4>
 8007574:	2301      	movs	r3, #1
 8007576:	e000      	b.n	800757a <DMA_SetConfig+0x1d6>
 8007578:	2300      	movs	r3, #0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d059      	beq.n	8007632 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007582:	f003 031f 	and.w	r3, r3, #31
 8007586:	223f      	movs	r2, #63	; 0x3f
 8007588:	409a      	lsls	r2, r3
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800759c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	2b40      	cmp	r3, #64	; 0x40
 80075ac:	d138      	bne.n	8007620 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80075be:	e0ae      	b.n	800771e <DMA_SetConfig+0x37a>
 80075c0:	40020010 	.word	0x40020010
 80075c4:	40020028 	.word	0x40020028
 80075c8:	40020040 	.word	0x40020040
 80075cc:	40020058 	.word	0x40020058
 80075d0:	40020070 	.word	0x40020070
 80075d4:	40020088 	.word	0x40020088
 80075d8:	400200a0 	.word	0x400200a0
 80075dc:	400200b8 	.word	0x400200b8
 80075e0:	40020410 	.word	0x40020410
 80075e4:	40020428 	.word	0x40020428
 80075e8:	40020440 	.word	0x40020440
 80075ec:	40020458 	.word	0x40020458
 80075f0:	40020470 	.word	0x40020470
 80075f4:	40020488 	.word	0x40020488
 80075f8:	400204a0 	.word	0x400204a0
 80075fc:	400204b8 	.word	0x400204b8
 8007600:	58025408 	.word	0x58025408
 8007604:	5802541c 	.word	0x5802541c
 8007608:	58025430 	.word	0x58025430
 800760c:	58025444 	.word	0x58025444
 8007610:	58025458 	.word	0x58025458
 8007614:	5802546c 	.word	0x5802546c
 8007618:	58025480 	.word	0x58025480
 800761c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	60da      	str	r2, [r3, #12]
}
 8007630:	e075      	b.n	800771e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a3d      	ldr	r2, [pc, #244]	; (800772c <DMA_SetConfig+0x388>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d04a      	beq.n	80076d2 <DMA_SetConfig+0x32e>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a3b      	ldr	r2, [pc, #236]	; (8007730 <DMA_SetConfig+0x38c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d045      	beq.n	80076d2 <DMA_SetConfig+0x32e>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a3a      	ldr	r2, [pc, #232]	; (8007734 <DMA_SetConfig+0x390>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d040      	beq.n	80076d2 <DMA_SetConfig+0x32e>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a38      	ldr	r2, [pc, #224]	; (8007738 <DMA_SetConfig+0x394>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d03b      	beq.n	80076d2 <DMA_SetConfig+0x32e>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a37      	ldr	r2, [pc, #220]	; (800773c <DMA_SetConfig+0x398>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d036      	beq.n	80076d2 <DMA_SetConfig+0x32e>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a35      	ldr	r2, [pc, #212]	; (8007740 <DMA_SetConfig+0x39c>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d031      	beq.n	80076d2 <DMA_SetConfig+0x32e>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a34      	ldr	r2, [pc, #208]	; (8007744 <DMA_SetConfig+0x3a0>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d02c      	beq.n	80076d2 <DMA_SetConfig+0x32e>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a32      	ldr	r2, [pc, #200]	; (8007748 <DMA_SetConfig+0x3a4>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d027      	beq.n	80076d2 <DMA_SetConfig+0x32e>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a31      	ldr	r2, [pc, #196]	; (800774c <DMA_SetConfig+0x3a8>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d022      	beq.n	80076d2 <DMA_SetConfig+0x32e>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a2f      	ldr	r2, [pc, #188]	; (8007750 <DMA_SetConfig+0x3ac>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d01d      	beq.n	80076d2 <DMA_SetConfig+0x32e>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a2e      	ldr	r2, [pc, #184]	; (8007754 <DMA_SetConfig+0x3b0>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d018      	beq.n	80076d2 <DMA_SetConfig+0x32e>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a2c      	ldr	r2, [pc, #176]	; (8007758 <DMA_SetConfig+0x3b4>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d013      	beq.n	80076d2 <DMA_SetConfig+0x32e>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a2b      	ldr	r2, [pc, #172]	; (800775c <DMA_SetConfig+0x3b8>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d00e      	beq.n	80076d2 <DMA_SetConfig+0x32e>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a29      	ldr	r2, [pc, #164]	; (8007760 <DMA_SetConfig+0x3bc>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d009      	beq.n	80076d2 <DMA_SetConfig+0x32e>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a28      	ldr	r2, [pc, #160]	; (8007764 <DMA_SetConfig+0x3c0>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d004      	beq.n	80076d2 <DMA_SetConfig+0x32e>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a26      	ldr	r2, [pc, #152]	; (8007768 <DMA_SetConfig+0x3c4>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d101      	bne.n	80076d6 <DMA_SetConfig+0x332>
 80076d2:	2301      	movs	r3, #1
 80076d4:	e000      	b.n	80076d8 <DMA_SetConfig+0x334>
 80076d6:	2300      	movs	r3, #0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d020      	beq.n	800771e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076e0:	f003 031f 	and.w	r3, r3, #31
 80076e4:	2201      	movs	r2, #1
 80076e6:	409a      	lsls	r2, r3
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	2b40      	cmp	r3, #64	; 0x40
 80076fa:	d108      	bne.n	800770e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	60da      	str	r2, [r3, #12]
}
 800770c:	e007      	b.n	800771e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	60da      	str	r2, [r3, #12]
}
 800771e:	bf00      	nop
 8007720:	371c      	adds	r7, #28
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	48022c08 	.word	0x48022c08
 8007730:	48022c1c 	.word	0x48022c1c
 8007734:	48022c30 	.word	0x48022c30
 8007738:	48022c44 	.word	0x48022c44
 800773c:	48022c58 	.word	0x48022c58
 8007740:	48022c6c 	.word	0x48022c6c
 8007744:	48022c80 	.word	0x48022c80
 8007748:	48022c94 	.word	0x48022c94
 800774c:	58025408 	.word	0x58025408
 8007750:	5802541c 	.word	0x5802541c
 8007754:	58025430 	.word	0x58025430
 8007758:	58025444 	.word	0x58025444
 800775c:	58025458 	.word	0x58025458
 8007760:	5802546c 	.word	0x5802546c
 8007764:	58025480 	.word	0x58025480
 8007768:	58025494 	.word	0x58025494

0800776c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a42      	ldr	r2, [pc, #264]	; (8007884 <DMA_CalcBaseAndBitshift+0x118>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d04a      	beq.n	8007814 <DMA_CalcBaseAndBitshift+0xa8>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a41      	ldr	r2, [pc, #260]	; (8007888 <DMA_CalcBaseAndBitshift+0x11c>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d045      	beq.n	8007814 <DMA_CalcBaseAndBitshift+0xa8>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a3f      	ldr	r2, [pc, #252]	; (800788c <DMA_CalcBaseAndBitshift+0x120>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d040      	beq.n	8007814 <DMA_CalcBaseAndBitshift+0xa8>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a3e      	ldr	r2, [pc, #248]	; (8007890 <DMA_CalcBaseAndBitshift+0x124>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d03b      	beq.n	8007814 <DMA_CalcBaseAndBitshift+0xa8>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a3c      	ldr	r2, [pc, #240]	; (8007894 <DMA_CalcBaseAndBitshift+0x128>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d036      	beq.n	8007814 <DMA_CalcBaseAndBitshift+0xa8>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a3b      	ldr	r2, [pc, #236]	; (8007898 <DMA_CalcBaseAndBitshift+0x12c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d031      	beq.n	8007814 <DMA_CalcBaseAndBitshift+0xa8>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a39      	ldr	r2, [pc, #228]	; (800789c <DMA_CalcBaseAndBitshift+0x130>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d02c      	beq.n	8007814 <DMA_CalcBaseAndBitshift+0xa8>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a38      	ldr	r2, [pc, #224]	; (80078a0 <DMA_CalcBaseAndBitshift+0x134>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d027      	beq.n	8007814 <DMA_CalcBaseAndBitshift+0xa8>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a36      	ldr	r2, [pc, #216]	; (80078a4 <DMA_CalcBaseAndBitshift+0x138>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d022      	beq.n	8007814 <DMA_CalcBaseAndBitshift+0xa8>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a35      	ldr	r2, [pc, #212]	; (80078a8 <DMA_CalcBaseAndBitshift+0x13c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d01d      	beq.n	8007814 <DMA_CalcBaseAndBitshift+0xa8>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a33      	ldr	r2, [pc, #204]	; (80078ac <DMA_CalcBaseAndBitshift+0x140>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d018      	beq.n	8007814 <DMA_CalcBaseAndBitshift+0xa8>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a32      	ldr	r2, [pc, #200]	; (80078b0 <DMA_CalcBaseAndBitshift+0x144>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d013      	beq.n	8007814 <DMA_CalcBaseAndBitshift+0xa8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a30      	ldr	r2, [pc, #192]	; (80078b4 <DMA_CalcBaseAndBitshift+0x148>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d00e      	beq.n	8007814 <DMA_CalcBaseAndBitshift+0xa8>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a2f      	ldr	r2, [pc, #188]	; (80078b8 <DMA_CalcBaseAndBitshift+0x14c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d009      	beq.n	8007814 <DMA_CalcBaseAndBitshift+0xa8>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a2d      	ldr	r2, [pc, #180]	; (80078bc <DMA_CalcBaseAndBitshift+0x150>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d004      	beq.n	8007814 <DMA_CalcBaseAndBitshift+0xa8>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a2c      	ldr	r2, [pc, #176]	; (80078c0 <DMA_CalcBaseAndBitshift+0x154>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d101      	bne.n	8007818 <DMA_CalcBaseAndBitshift+0xac>
 8007814:	2301      	movs	r3, #1
 8007816:	e000      	b.n	800781a <DMA_CalcBaseAndBitshift+0xae>
 8007818:	2300      	movs	r3, #0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d024      	beq.n	8007868 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	3b10      	subs	r3, #16
 8007826:	4a27      	ldr	r2, [pc, #156]	; (80078c4 <DMA_CalcBaseAndBitshift+0x158>)
 8007828:	fba2 2303 	umull	r2, r3, r2, r3
 800782c:	091b      	lsrs	r3, r3, #4
 800782e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f003 0307 	and.w	r3, r3, #7
 8007836:	4a24      	ldr	r2, [pc, #144]	; (80078c8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007838:	5cd3      	ldrb	r3, [r2, r3]
 800783a:	461a      	mov	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b03      	cmp	r3, #3
 8007844:	d908      	bls.n	8007858 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	461a      	mov	r2, r3
 800784c:	4b1f      	ldr	r3, [pc, #124]	; (80078cc <DMA_CalcBaseAndBitshift+0x160>)
 800784e:	4013      	ands	r3, r2
 8007850:	1d1a      	adds	r2, r3, #4
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	659a      	str	r2, [r3, #88]	; 0x58
 8007856:	e00d      	b.n	8007874 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	461a      	mov	r2, r3
 800785e:	4b1b      	ldr	r3, [pc, #108]	; (80078cc <DMA_CalcBaseAndBitshift+0x160>)
 8007860:	4013      	ands	r3, r2
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	6593      	str	r3, [r2, #88]	; 0x58
 8007866:	e005      	b.n	8007874 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007878:	4618      	mov	r0, r3
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	40020010 	.word	0x40020010
 8007888:	40020028 	.word	0x40020028
 800788c:	40020040 	.word	0x40020040
 8007890:	40020058 	.word	0x40020058
 8007894:	40020070 	.word	0x40020070
 8007898:	40020088 	.word	0x40020088
 800789c:	400200a0 	.word	0x400200a0
 80078a0:	400200b8 	.word	0x400200b8
 80078a4:	40020410 	.word	0x40020410
 80078a8:	40020428 	.word	0x40020428
 80078ac:	40020440 	.word	0x40020440
 80078b0:	40020458 	.word	0x40020458
 80078b4:	40020470 	.word	0x40020470
 80078b8:	40020488 	.word	0x40020488
 80078bc:	400204a0 	.word	0x400204a0
 80078c0:	400204b8 	.word	0x400204b8
 80078c4:	aaaaaaab 	.word	0xaaaaaaab
 80078c8:	08011604 	.word	0x08011604
 80078cc:	fffffc00 	.word	0xfffffc00

080078d0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d120      	bne.n	8007926 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d858      	bhi.n	800799e <DMA_CheckFifoParam+0xce>
 80078ec:	a201      	add	r2, pc, #4	; (adr r2, 80078f4 <DMA_CheckFifoParam+0x24>)
 80078ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f2:	bf00      	nop
 80078f4:	08007905 	.word	0x08007905
 80078f8:	08007917 	.word	0x08007917
 80078fc:	08007905 	.word	0x08007905
 8007900:	0800799f 	.word	0x0800799f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d048      	beq.n	80079a2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007914:	e045      	b.n	80079a2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800791e:	d142      	bne.n	80079a6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007924:	e03f      	b.n	80079a6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800792e:	d123      	bne.n	8007978 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007934:	2b03      	cmp	r3, #3
 8007936:	d838      	bhi.n	80079aa <DMA_CheckFifoParam+0xda>
 8007938:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <DMA_CheckFifoParam+0x70>)
 800793a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793e:	bf00      	nop
 8007940:	08007951 	.word	0x08007951
 8007944:	08007957 	.word	0x08007957
 8007948:	08007951 	.word	0x08007951
 800794c:	08007969 	.word	0x08007969
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	73fb      	strb	r3, [r7, #15]
        break;
 8007954:	e030      	b.n	80079b8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d025      	beq.n	80079ae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007966:	e022      	b.n	80079ae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007970:	d11f      	bne.n	80079b2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007976:	e01c      	b.n	80079b2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797c:	2b02      	cmp	r3, #2
 800797e:	d902      	bls.n	8007986 <DMA_CheckFifoParam+0xb6>
 8007980:	2b03      	cmp	r3, #3
 8007982:	d003      	beq.n	800798c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007984:	e018      	b.n	80079b8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	73fb      	strb	r3, [r7, #15]
        break;
 800798a:	e015      	b.n	80079b8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00e      	beq.n	80079b6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	73fb      	strb	r3, [r7, #15]
    break;
 800799c:	e00b      	b.n	80079b6 <DMA_CheckFifoParam+0xe6>
        break;
 800799e:	bf00      	nop
 80079a0:	e00a      	b.n	80079b8 <DMA_CheckFifoParam+0xe8>
        break;
 80079a2:	bf00      	nop
 80079a4:	e008      	b.n	80079b8 <DMA_CheckFifoParam+0xe8>
        break;
 80079a6:	bf00      	nop
 80079a8:	e006      	b.n	80079b8 <DMA_CheckFifoParam+0xe8>
        break;
 80079aa:	bf00      	nop
 80079ac:	e004      	b.n	80079b8 <DMA_CheckFifoParam+0xe8>
        break;
 80079ae:	bf00      	nop
 80079b0:	e002      	b.n	80079b8 <DMA_CheckFifoParam+0xe8>
        break;
 80079b2:	bf00      	nop
 80079b4:	e000      	b.n	80079b8 <DMA_CheckFifoParam+0xe8>
    break;
 80079b6:	bf00      	nop
    }
  }

  return status;
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop

080079c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a38      	ldr	r2, [pc, #224]	; (8007abc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d022      	beq.n	8007a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a36      	ldr	r2, [pc, #216]	; (8007ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d01d      	beq.n	8007a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a35      	ldr	r2, [pc, #212]	; (8007ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d018      	beq.n	8007a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a33      	ldr	r2, [pc, #204]	; (8007ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d013      	beq.n	8007a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a32      	ldr	r2, [pc, #200]	; (8007acc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d00e      	beq.n	8007a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a30      	ldr	r2, [pc, #192]	; (8007ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d009      	beq.n	8007a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a2f      	ldr	r2, [pc, #188]	; (8007ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d004      	beq.n	8007a26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a2d      	ldr	r2, [pc, #180]	; (8007ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d101      	bne.n	8007a2a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007a26:	2301      	movs	r3, #1
 8007a28:	e000      	b.n	8007a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d01a      	beq.n	8007a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	3b08      	subs	r3, #8
 8007a38:	4a28      	ldr	r2, [pc, #160]	; (8007adc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3e:	091b      	lsrs	r3, r3, #4
 8007a40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	4b26      	ldr	r3, [pc, #152]	; (8007ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007a46:	4413      	add	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a24      	ldr	r2, [pc, #144]	; (8007ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007a54:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f003 031f 	and.w	r3, r3, #31
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	409a      	lsls	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007a64:	e024      	b.n	8007ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	3b10      	subs	r3, #16
 8007a6e:	4a1e      	ldr	r2, [pc, #120]	; (8007ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007a70:	fba2 2303 	umull	r2, r3, r2, r3
 8007a74:	091b      	lsrs	r3, r3, #4
 8007a76:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	4a1c      	ldr	r2, [pc, #112]	; (8007aec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d806      	bhi.n	8007a8e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	4a1b      	ldr	r2, [pc, #108]	; (8007af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d902      	bls.n	8007a8e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4b18      	ldr	r3, [pc, #96]	; (8007af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007a92:	4413      	add	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	461a      	mov	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a16      	ldr	r2, [pc, #88]	; (8007af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007aa0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f003 031f 	and.w	r3, r3, #31
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	409a      	lsls	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007ab0:	bf00      	nop
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	58025408 	.word	0x58025408
 8007ac0:	5802541c 	.word	0x5802541c
 8007ac4:	58025430 	.word	0x58025430
 8007ac8:	58025444 	.word	0x58025444
 8007acc:	58025458 	.word	0x58025458
 8007ad0:	5802546c 	.word	0x5802546c
 8007ad4:	58025480 	.word	0x58025480
 8007ad8:	58025494 	.word	0x58025494
 8007adc:	cccccccd 	.word	0xcccccccd
 8007ae0:	16009600 	.word	0x16009600
 8007ae4:	58025880 	.word	0x58025880
 8007ae8:	aaaaaaab 	.word	0xaaaaaaab
 8007aec:	400204b8 	.word	0x400204b8
 8007af0:	4002040f 	.word	0x4002040f
 8007af4:	10008200 	.word	0x10008200
 8007af8:	40020880 	.word	0x40020880

08007afc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d04a      	beq.n	8007ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2b08      	cmp	r3, #8
 8007b16:	d847      	bhi.n	8007ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a25      	ldr	r2, [pc, #148]	; (8007bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d022      	beq.n	8007b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a24      	ldr	r2, [pc, #144]	; (8007bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d01d      	beq.n	8007b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a22      	ldr	r2, [pc, #136]	; (8007bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d018      	beq.n	8007b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a21      	ldr	r2, [pc, #132]	; (8007bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d013      	beq.n	8007b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a1f      	ldr	r2, [pc, #124]	; (8007bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d00e      	beq.n	8007b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a1e      	ldr	r2, [pc, #120]	; (8007bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d009      	beq.n	8007b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a1c      	ldr	r2, [pc, #112]	; (8007bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d004      	beq.n	8007b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a1b      	ldr	r2, [pc, #108]	; (8007bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d101      	bne.n	8007b6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e000      	b.n	8007b6e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00a      	beq.n	8007b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	4b17      	ldr	r3, [pc, #92]	; (8007bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007b76:	4413      	add	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a15      	ldr	r2, [pc, #84]	; (8007bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007b84:	671a      	str	r2, [r3, #112]	; 0x70
 8007b86:	e009      	b.n	8007b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	4b14      	ldr	r3, [pc, #80]	; (8007bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007b8c:	4413      	add	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	461a      	mov	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a11      	ldr	r2, [pc, #68]	; (8007be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007b9a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	409a      	lsls	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007ba8:	bf00      	nop
 8007baa:	3714      	adds	r7, #20
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	58025408 	.word	0x58025408
 8007bb8:	5802541c 	.word	0x5802541c
 8007bbc:	58025430 	.word	0x58025430
 8007bc0:	58025444 	.word	0x58025444
 8007bc4:	58025458 	.word	0x58025458
 8007bc8:	5802546c 	.word	0x5802546c
 8007bcc:	58025480 	.word	0x58025480
 8007bd0:	58025494 	.word	0x58025494
 8007bd4:	1600963f 	.word	0x1600963f
 8007bd8:	58025940 	.word	0x58025940
 8007bdc:	1000823f 	.word	0x1000823f
 8007be0:	40020940 	.word	0x40020940

08007be4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e04f      	b.n	8007c96 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d106      	bne.n	8007c10 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7fc f8ee 	bl	8003dec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	4b20      	ldr	r3, [pc, #128]	; (8007ca0 <HAL_DMA2D_Init+0xbc>)
 8007c20:	4013      	ands	r3, r2
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	6851      	ldr	r1, [r2, #4]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	69d2      	ldr	r2, [r2, #28]
 8007c2a:	4311      	orrs	r1, r2
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	6812      	ldr	r2, [r2, #0]
 8007c30:	430b      	orrs	r3, r1
 8007c32:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c3a:	4b1a      	ldr	r3, [pc, #104]	; (8007ca4 <HAL_DMA2D_Init+0xc0>)
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	6891      	ldr	r1, [r2, #8]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	6992      	ldr	r2, [r2, #24]
 8007c46:	4311      	orrs	r1, r2
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	6812      	ldr	r2, [r2, #0]
 8007c4c:	430b      	orrs	r3, r1
 8007c4e:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c56:	4b14      	ldr	r3, [pc, #80]	; (8007ca8 <HAL_DMA2D_Init+0xc4>)
 8007c58:	4013      	ands	r3, r2
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	68d1      	ldr	r1, [r2, #12]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	6812      	ldr	r2, [r2, #0]
 8007c62:	430b      	orrs	r3, r1
 8007c64:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c6c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	051a      	lsls	r2, r3, #20
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	055b      	lsls	r3, r3, #21
 8007c7c:	431a      	orrs	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	430a      	orrs	r2, r1
 8007c84:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	fff8ffbf 	.word	0xfff8ffbf
 8007ca4:	fffffef8 	.word	0xfffffef8
 8007ca8:	ffff0000 	.word	0xffff0000

08007cac <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d026      	beq.n	8007d1c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d021      	beq.n	8007d1c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ce6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cec:	f043 0201 	orr.w	r2, r3, #1
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2204      	movs	r2, #4
 8007d00:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f003 0320 	and.w	r3, r3, #32
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d026      	beq.n	8007d74 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d021      	beq.n	8007d74 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d3e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2220      	movs	r2, #32
 8007d46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d4c:	f043 0202 	orr.w	r2, r3, #2
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2204      	movs	r2, #4
 8007d58:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f003 0308 	and.w	r3, r3, #8
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d026      	beq.n	8007dcc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d021      	beq.n	8007dcc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d96:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2208      	movs	r2, #8
 8007d9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007da4:	f043 0204 	orr.w	r2, r3, #4
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2204      	movs	r2, #4
 8007db0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d003      	beq.n	8007dcc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f003 0304 	and.w	r3, r3, #4
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d013      	beq.n	8007dfe <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00e      	beq.n	8007dfe <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dee:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2204      	movs	r2, #4
 8007df6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f853 	bl	8007ea4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f003 0302 	and.w	r3, r3, #2
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d024      	beq.n	8007e52 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d01f      	beq.n	8007e52 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007e20:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2202      	movs	r2, #2
 8007e28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d003      	beq.n	8007e52 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f003 0310 	and.w	r3, r3, #16
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d01f      	beq.n	8007e9c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d01a      	beq.n	8007e9c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e74:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2210      	movs	r2, #16
 8007e7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f80e 	bl	8007eb8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007e9c:	bf00      	nop
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d101      	bne.n	8007ef0 <HAL_DMA2D_ConfigLayer+0x24>
 8007eec:	2302      	movs	r3, #2
 8007eee:	e092      	b.n	8008016 <HAL_DMA2D_ConfigLayer+0x14a>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	4613      	mov	r3, r2
 8007f04:	00db      	lsls	r3, r3, #3
 8007f06:	1a9b      	subs	r3, r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	3328      	adds	r3, #40	; 0x28
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	4413      	add	r3, r2
 8007f10:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	041b      	lsls	r3, r3, #16
 8007f1c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007f24:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007f30:	4b3c      	ldr	r3, [pc, #240]	; (8008024 <HAL_DMA2D_ConfigLayer+0x158>)
 8007f32:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	2b0a      	cmp	r3, #10
 8007f3a:	d003      	beq.n	8007f44 <HAL_DMA2D_ConfigLayer+0x78>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	2b09      	cmp	r3, #9
 8007f42:	d107      	bne.n	8007f54 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	613b      	str	r3, [r7, #16]
 8007f52:	e005      	b.n	8007f60 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	061b      	lsls	r3, r3, #24
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d120      	bne.n	8007fa8 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	43db      	mvns	r3, r3
 8007f70:	ea02 0103 	and.w	r1, r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	6812      	ldr	r2, [r2, #0]
 8007f86:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	2b0a      	cmp	r3, #10
 8007f8e:	d003      	beq.n	8007f98 <HAL_DMA2D_ConfigLayer+0xcc>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	2b09      	cmp	r3, #9
 8007f96:	d135      	bne.n	8008004 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	68da      	ldr	r2, [r3, #12]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007fa4:	629a      	str	r2, [r3, #40]	; 0x28
 8007fa6:	e02d      	b.n	8008004 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	2b0b      	cmp	r3, #11
 8007fae:	d109      	bne.n	8007fc4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	049b      	lsls	r3, r3, #18
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8007fc2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	69da      	ldr	r2, [r3, #28]
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	43db      	mvns	r3, r3
 8007fce:	ea02 0103 	and.w	r1, r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	6812      	ldr	r2, [r2, #0]
 8007fe4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	2b0a      	cmp	r3, #10
 8007fec:	d003      	beq.n	8007ff6 <HAL_DMA2D_ConfigLayer+0x12a>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	2b09      	cmp	r3, #9
 8007ff4:	d106      	bne.n	8008004 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	68da      	ldr	r2, [r3, #12]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008002:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	371c      	adds	r7, #28
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	ff33000f 	.word	0xff33000f

08008028 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	2b80      	cmp	r3, #128	; 0x80
 8008040:	d105      	bne.n	800804e <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008048:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e315      	b.n	800867a <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008054:	2b01      	cmp	r3, #1
 8008056:	d101      	bne.n	800805c <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8008058:	2302      	movs	r3, #2
 800805a:	e30e      	b.n	800867a <HAL_DMAEx_MultiBufferStart_IT+0x652>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b01      	cmp	r3, #1
 800806e:	f040 82fd 	bne.w	800866c <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2202      	movs	r2, #2
 8008076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a82      	ldr	r2, [pc, #520]	; (8008290 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d04a      	beq.n	8008120 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a81      	ldr	r2, [pc, #516]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d045      	beq.n	8008120 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a7f      	ldr	r2, [pc, #508]	; (8008298 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d040      	beq.n	8008120 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a7e      	ldr	r2, [pc, #504]	; (800829c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d03b      	beq.n	8008120 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a7c      	ldr	r2, [pc, #496]	; (80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d036      	beq.n	8008120 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a7b      	ldr	r2, [pc, #492]	; (80082a4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d031      	beq.n	8008120 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a79      	ldr	r2, [pc, #484]	; (80082a8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d02c      	beq.n	8008120 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a78      	ldr	r2, [pc, #480]	; (80082ac <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d027      	beq.n	8008120 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a76      	ldr	r2, [pc, #472]	; (80082b0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d022      	beq.n	8008120 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a75      	ldr	r2, [pc, #468]	; (80082b4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d01d      	beq.n	8008120 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a73      	ldr	r2, [pc, #460]	; (80082b8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d018      	beq.n	8008120 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a72      	ldr	r2, [pc, #456]	; (80082bc <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d013      	beq.n	8008120 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a70      	ldr	r2, [pc, #448]	; (80082c0 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d00e      	beq.n	8008120 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a6f      	ldr	r2, [pc, #444]	; (80082c4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d009      	beq.n	8008120 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a6d      	ldr	r2, [pc, #436]	; (80082c8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d004      	beq.n	8008120 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a6c      	ldr	r2, [pc, #432]	; (80082cc <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d101      	bne.n	8008124 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8008120:	2301      	movs	r3, #1
 8008122:	e000      	b.n	8008126 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8008124:	2300      	movs	r3, #0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d018      	beq.n	800815c <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008138:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008146:	3308      	adds	r3, #8
 8008148:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800814e:	f003 031f 	and.w	r3, r3, #31
 8008152:	223f      	movs	r2, #63	; 0x3f
 8008154:	409a      	lsls	r2, r3
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	e018      	b.n	800818e <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6819      	ldr	r1, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	f248 0320 	movw	r3, #32800	; 0x8020
 800816a:	430b      	orrs	r3, r1
 800816c:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800817a:	3304      	adds	r3, #4
 800817c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008182:	f003 031f 	and.w	r3, r3, #31
 8008186:	2201      	movs	r2, #1
 8008188:	409a      	lsls	r2, r3
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	68b9      	ldr	r1, [r7, #8]
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f000 fb41 	bl	800881c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a3c      	ldr	r2, [pc, #240]	; (8008290 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d072      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a3a      	ldr	r2, [pc, #232]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d06d      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a39      	ldr	r2, [pc, #228]	; (8008298 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d068      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a37      	ldr	r2, [pc, #220]	; (800829c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d063      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a36      	ldr	r2, [pc, #216]	; (80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d05e      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a34      	ldr	r2, [pc, #208]	; (80082a4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d059      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a33      	ldr	r2, [pc, #204]	; (80082a8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d054      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a31      	ldr	r2, [pc, #196]	; (80082ac <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d04f      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a30      	ldr	r2, [pc, #192]	; (80082b0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d04a      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a2e      	ldr	r2, [pc, #184]	; (80082b4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d045      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a2d      	ldr	r2, [pc, #180]	; (80082b8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d040      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a2b      	ldr	r2, [pc, #172]	; (80082bc <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d03b      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a2a      	ldr	r2, [pc, #168]	; (80082c0 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d036      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a28      	ldr	r2, [pc, #160]	; (80082c4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d031      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a27      	ldr	r2, [pc, #156]	; (80082c8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d02c      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a25      	ldr	r2, [pc, #148]	; (80082cc <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d027      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a24      	ldr	r2, [pc, #144]	; (80082d0 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d022      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a22      	ldr	r2, [pc, #136]	; (80082d4 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d01d      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a21      	ldr	r2, [pc, #132]	; (80082d8 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d018      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a1f      	ldr	r2, [pc, #124]	; (80082dc <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d013      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a1e      	ldr	r2, [pc, #120]	; (80082e0 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d00e      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a1c      	ldr	r2, [pc, #112]	; (80082e4 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d009      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a1b      	ldr	r2, [pc, #108]	; (80082e8 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d004      	beq.n	800828a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a19      	ldr	r2, [pc, #100]	; (80082ec <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d132      	bne.n	80082f0 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 800828a:	2301      	movs	r3, #1
 800828c:	e031      	b.n	80082f2 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 800828e:	bf00      	nop
 8008290:	40020010 	.word	0x40020010
 8008294:	40020028 	.word	0x40020028
 8008298:	40020040 	.word	0x40020040
 800829c:	40020058 	.word	0x40020058
 80082a0:	40020070 	.word	0x40020070
 80082a4:	40020088 	.word	0x40020088
 80082a8:	400200a0 	.word	0x400200a0
 80082ac:	400200b8 	.word	0x400200b8
 80082b0:	40020410 	.word	0x40020410
 80082b4:	40020428 	.word	0x40020428
 80082b8:	40020440 	.word	0x40020440
 80082bc:	40020458 	.word	0x40020458
 80082c0:	40020470 	.word	0x40020470
 80082c4:	40020488 	.word	0x40020488
 80082c8:	400204a0 	.word	0x400204a0
 80082cc:	400204b8 	.word	0x400204b8
 80082d0:	58025408 	.word	0x58025408
 80082d4:	5802541c 	.word	0x5802541c
 80082d8:	58025430 	.word	0x58025430
 80082dc:	58025444 	.word	0x58025444
 80082e0:	58025458 	.word	0x58025458
 80082e4:	5802546c 	.word	0x5802546c
 80082e8:	58025480 	.word	0x58025480
 80082ec:	58025494 	.word	0x58025494
 80082f0:	2300      	movs	r3, #0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00d      	beq.n	8008312 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80082fe:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d004      	beq.n	8008312 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008310:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a3b      	ldr	r2, [pc, #236]	; (8008404 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d04a      	beq.n	80083b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a39      	ldr	r2, [pc, #228]	; (8008408 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d045      	beq.n	80083b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a38      	ldr	r2, [pc, #224]	; (800840c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d040      	beq.n	80083b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a36      	ldr	r2, [pc, #216]	; (8008410 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d03b      	beq.n	80083b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a35      	ldr	r2, [pc, #212]	; (8008414 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d036      	beq.n	80083b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a33      	ldr	r2, [pc, #204]	; (8008418 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d031      	beq.n	80083b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a32      	ldr	r2, [pc, #200]	; (800841c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d02c      	beq.n	80083b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a30      	ldr	r2, [pc, #192]	; (8008420 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d027      	beq.n	80083b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a2f      	ldr	r2, [pc, #188]	; (8008424 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d022      	beq.n	80083b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a2d      	ldr	r2, [pc, #180]	; (8008428 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d01d      	beq.n	80083b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a2c      	ldr	r2, [pc, #176]	; (800842c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d018      	beq.n	80083b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a2a      	ldr	r2, [pc, #168]	; (8008430 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d013      	beq.n	80083b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a29      	ldr	r2, [pc, #164]	; (8008434 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d00e      	beq.n	80083b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a27      	ldr	r2, [pc, #156]	; (8008438 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d009      	beq.n	80083b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a26      	ldr	r2, [pc, #152]	; (800843c <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d004      	beq.n	80083b2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a24      	ldr	r2, [pc, #144]	; (8008440 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d101      	bne.n	80083b6 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e000      	b.n	80083b8 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80083b6:	2300      	movs	r3, #0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d043      	beq.n	8008444 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f023 021e 	bic.w	r2, r3, #30
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f042 0216 	orr.w	r2, r2, #22
 80083ce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	695a      	ldr	r2, [r3, #20]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083de:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d103      	bne.n	80083f0 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d043      	beq.n	8008478 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f042 0208 	orr.w	r2, r2, #8
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	e03a      	b.n	8008478 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8008402:	bf00      	nop
 8008404:	40020010 	.word	0x40020010
 8008408:	40020028 	.word	0x40020028
 800840c:	40020040 	.word	0x40020040
 8008410:	40020058 	.word	0x40020058
 8008414:	40020070 	.word	0x40020070
 8008418:	40020088 	.word	0x40020088
 800841c:	400200a0 	.word	0x400200a0
 8008420:	400200b8 	.word	0x400200b8
 8008424:	40020410 	.word	0x40020410
 8008428:	40020428 	.word	0x40020428
 800842c:	40020440 	.word	0x40020440
 8008430:	40020458 	.word	0x40020458
 8008434:	40020470 	.word	0x40020470
 8008438:	40020488 	.word	0x40020488
 800843c:	400204a0 	.word	0x400204a0
 8008440:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f023 020e 	bic.w	r2, r3, #14
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f042 020a 	orr.w	r2, r2, #10
 8008456:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845c:	2b00      	cmp	r3, #0
 800845e:	d103      	bne.n	8008468 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008464:	2b00      	cmp	r3, #0
 8008466:	d007      	beq.n	8008478 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f042 0204 	orr.w	r2, r2, #4
 8008476:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a81      	ldr	r2, [pc, #516]	; (8008684 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d072      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a80      	ldr	r2, [pc, #512]	; (8008688 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d06d      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a7e      	ldr	r2, [pc, #504]	; (800868c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d068      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a7d      	ldr	r2, [pc, #500]	; (8008690 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d063      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a7b      	ldr	r2, [pc, #492]	; (8008694 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d05e      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a7a      	ldr	r2, [pc, #488]	; (8008698 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d059      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a78      	ldr	r2, [pc, #480]	; (800869c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d054      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a77      	ldr	r2, [pc, #476]	; (80086a0 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d04f      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a75      	ldr	r2, [pc, #468]	; (80086a4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d04a      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a74      	ldr	r2, [pc, #464]	; (80086a8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d045      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a72      	ldr	r2, [pc, #456]	; (80086ac <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d040      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a71      	ldr	r2, [pc, #452]	; (80086b0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d03b      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a6f      	ldr	r2, [pc, #444]	; (80086b4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d036      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a6e      	ldr	r2, [pc, #440]	; (80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d031      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a6c      	ldr	r2, [pc, #432]	; (80086bc <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d02c      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a6b      	ldr	r2, [pc, #428]	; (80086c0 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d027      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a69      	ldr	r2, [pc, #420]	; (80086c4 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d022      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a68      	ldr	r2, [pc, #416]	; (80086c8 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d01d      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a66      	ldr	r2, [pc, #408]	; (80086cc <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d018      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a65      	ldr	r2, [pc, #404]	; (80086d0 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d013      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a63      	ldr	r2, [pc, #396]	; (80086d4 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d00e      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a62      	ldr	r2, [pc, #392]	; (80086d8 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d009      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a60      	ldr	r2, [pc, #384]	; (80086dc <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d004      	beq.n	8008568 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a5f      	ldr	r2, [pc, #380]	; (80086e0 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d101      	bne.n	800856c <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8008568:	2301      	movs	r3, #1
 800856a:	e000      	b.n	800856e <HAL_DMAEx_MultiBufferStart_IT+0x546>
 800856c:	2300      	movs	r3, #0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d01a      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d007      	beq.n	8008590 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800858a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800858e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008594:	2b00      	cmp	r3, #0
 8008596:	d007      	beq.n	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085a6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a35      	ldr	r2, [pc, #212]	; (8008684 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d04a      	beq.n	8008648 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a34      	ldr	r2, [pc, #208]	; (8008688 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d045      	beq.n	8008648 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a32      	ldr	r2, [pc, #200]	; (800868c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d040      	beq.n	8008648 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a31      	ldr	r2, [pc, #196]	; (8008690 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d03b      	beq.n	8008648 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a2f      	ldr	r2, [pc, #188]	; (8008694 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d036      	beq.n	8008648 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a2e      	ldr	r2, [pc, #184]	; (8008698 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d031      	beq.n	8008648 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a2c      	ldr	r2, [pc, #176]	; (800869c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d02c      	beq.n	8008648 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a2b      	ldr	r2, [pc, #172]	; (80086a0 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d027      	beq.n	8008648 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a29      	ldr	r2, [pc, #164]	; (80086a4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d022      	beq.n	8008648 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a28      	ldr	r2, [pc, #160]	; (80086a8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d01d      	beq.n	8008648 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a26      	ldr	r2, [pc, #152]	; (80086ac <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d018      	beq.n	8008648 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a25      	ldr	r2, [pc, #148]	; (80086b0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d013      	beq.n	8008648 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a23      	ldr	r2, [pc, #140]	; (80086b4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d00e      	beq.n	8008648 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a22      	ldr	r2, [pc, #136]	; (80086b8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d009      	beq.n	8008648 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a20      	ldr	r2, [pc, #128]	; (80086bc <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d004      	beq.n	8008648 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a1f      	ldr	r2, [pc, #124]	; (80086c0 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d108      	bne.n	800865a <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f042 0201 	orr.w	r2, r2, #1
 8008656:	601a      	str	r2, [r3, #0]
 8008658:	e00e      	b.n	8008678 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f042 0201 	orr.w	r2, r2, #1
 8008668:	601a      	str	r2, [r3, #0]
 800866a:	e005      	b.n	8008678 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008672:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008678:	7dfb      	ldrb	r3, [r7, #23]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	40020010 	.word	0x40020010
 8008688:	40020028 	.word	0x40020028
 800868c:	40020040 	.word	0x40020040
 8008690:	40020058 	.word	0x40020058
 8008694:	40020070 	.word	0x40020070
 8008698:	40020088 	.word	0x40020088
 800869c:	400200a0 	.word	0x400200a0
 80086a0:	400200b8 	.word	0x400200b8
 80086a4:	40020410 	.word	0x40020410
 80086a8:	40020428 	.word	0x40020428
 80086ac:	40020440 	.word	0x40020440
 80086b0:	40020458 	.word	0x40020458
 80086b4:	40020470 	.word	0x40020470
 80086b8:	40020488 	.word	0x40020488
 80086bc:	400204a0 	.word	0x400204a0
 80086c0:	400204b8 	.word	0x400204b8
 80086c4:	58025408 	.word	0x58025408
 80086c8:	5802541c 	.word	0x5802541c
 80086cc:	58025430 	.word	0x58025430
 80086d0:	58025444 	.word	0x58025444
 80086d4:	58025458 	.word	0x58025458
 80086d8:	5802546c 	.word	0x5802546c
 80086dc:	58025480 	.word	0x58025480
 80086e0:	58025494 	.word	0x58025494

080086e4 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	4613      	mov	r3, r2
 80086f0:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a39      	ldr	r2, [pc, #228]	; (80087dc <HAL_DMAEx_ChangeMemory+0xf8>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d04a      	beq.n	8008792 <HAL_DMAEx_ChangeMemory+0xae>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a37      	ldr	r2, [pc, #220]	; (80087e0 <HAL_DMAEx_ChangeMemory+0xfc>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d045      	beq.n	8008792 <HAL_DMAEx_ChangeMemory+0xae>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a36      	ldr	r2, [pc, #216]	; (80087e4 <HAL_DMAEx_ChangeMemory+0x100>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d040      	beq.n	8008792 <HAL_DMAEx_ChangeMemory+0xae>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a34      	ldr	r2, [pc, #208]	; (80087e8 <HAL_DMAEx_ChangeMemory+0x104>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d03b      	beq.n	8008792 <HAL_DMAEx_ChangeMemory+0xae>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a33      	ldr	r2, [pc, #204]	; (80087ec <HAL_DMAEx_ChangeMemory+0x108>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d036      	beq.n	8008792 <HAL_DMAEx_ChangeMemory+0xae>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a31      	ldr	r2, [pc, #196]	; (80087f0 <HAL_DMAEx_ChangeMemory+0x10c>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d031      	beq.n	8008792 <HAL_DMAEx_ChangeMemory+0xae>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a30      	ldr	r2, [pc, #192]	; (80087f4 <HAL_DMAEx_ChangeMemory+0x110>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d02c      	beq.n	8008792 <HAL_DMAEx_ChangeMemory+0xae>
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a2e      	ldr	r2, [pc, #184]	; (80087f8 <HAL_DMAEx_ChangeMemory+0x114>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d027      	beq.n	8008792 <HAL_DMAEx_ChangeMemory+0xae>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a2d      	ldr	r2, [pc, #180]	; (80087fc <HAL_DMAEx_ChangeMemory+0x118>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d022      	beq.n	8008792 <HAL_DMAEx_ChangeMemory+0xae>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a2b      	ldr	r2, [pc, #172]	; (8008800 <HAL_DMAEx_ChangeMemory+0x11c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d01d      	beq.n	8008792 <HAL_DMAEx_ChangeMemory+0xae>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a2a      	ldr	r2, [pc, #168]	; (8008804 <HAL_DMAEx_ChangeMemory+0x120>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d018      	beq.n	8008792 <HAL_DMAEx_ChangeMemory+0xae>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a28      	ldr	r2, [pc, #160]	; (8008808 <HAL_DMAEx_ChangeMemory+0x124>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d013      	beq.n	8008792 <HAL_DMAEx_ChangeMemory+0xae>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a27      	ldr	r2, [pc, #156]	; (800880c <HAL_DMAEx_ChangeMemory+0x128>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d00e      	beq.n	8008792 <HAL_DMAEx_ChangeMemory+0xae>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a25      	ldr	r2, [pc, #148]	; (8008810 <HAL_DMAEx_ChangeMemory+0x12c>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d009      	beq.n	8008792 <HAL_DMAEx_ChangeMemory+0xae>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a24      	ldr	r2, [pc, #144]	; (8008814 <HAL_DMAEx_ChangeMemory+0x130>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d004      	beq.n	8008792 <HAL_DMAEx_ChangeMemory+0xae>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a22      	ldr	r2, [pc, #136]	; (8008818 <HAL_DMAEx_ChangeMemory+0x134>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d101      	bne.n	8008796 <HAL_DMAEx_ChangeMemory+0xb2>
 8008792:	2301      	movs	r3, #1
 8008794:	e000      	b.n	8008798 <HAL_DMAEx_ChangeMemory+0xb4>
 8008796:	2300      	movs	r3, #0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00c      	beq.n	80087b6 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 800879c:	79fb      	ldrb	r3, [r7, #7]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d104      	bne.n	80087ac <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	60da      	str	r2, [r3, #12]
 80087aa:	e010      	b.n	80087ce <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	611a      	str	r2, [r3, #16]
 80087b4:	e00b      	b.n	80087ce <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80087b6:	79fb      	ldrb	r3, [r7, #7]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d104      	bne.n	80087c6 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	60da      	str	r2, [r3, #12]
 80087c4:	e003      	b.n	80087ce <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr
 80087dc:	40020010 	.word	0x40020010
 80087e0:	40020028 	.word	0x40020028
 80087e4:	40020040 	.word	0x40020040
 80087e8:	40020058 	.word	0x40020058
 80087ec:	40020070 	.word	0x40020070
 80087f0:	40020088 	.word	0x40020088
 80087f4:	400200a0 	.word	0x400200a0
 80087f8:	400200b8 	.word	0x400200b8
 80087fc:	40020410 	.word	0x40020410
 8008800:	40020428 	.word	0x40020428
 8008804:	40020440 	.word	0x40020440
 8008808:	40020458 	.word	0x40020458
 800880c:	40020470 	.word	0x40020470
 8008810:	40020488 	.word	0x40020488
 8008814:	400204a0 	.word	0x400204a0
 8008818:	400204b8 	.word	0x400204b8

0800881c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
 8008828:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a46      	ldr	r2, [pc, #280]	; (8008948 <DMA_MultiBufferSetConfig+0x12c>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d04a      	beq.n	80088ca <DMA_MultiBufferSetConfig+0xae>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a44      	ldr	r2, [pc, #272]	; (800894c <DMA_MultiBufferSetConfig+0x130>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d045      	beq.n	80088ca <DMA_MultiBufferSetConfig+0xae>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a43      	ldr	r2, [pc, #268]	; (8008950 <DMA_MultiBufferSetConfig+0x134>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d040      	beq.n	80088ca <DMA_MultiBufferSetConfig+0xae>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a41      	ldr	r2, [pc, #260]	; (8008954 <DMA_MultiBufferSetConfig+0x138>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d03b      	beq.n	80088ca <DMA_MultiBufferSetConfig+0xae>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a40      	ldr	r2, [pc, #256]	; (8008958 <DMA_MultiBufferSetConfig+0x13c>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d036      	beq.n	80088ca <DMA_MultiBufferSetConfig+0xae>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a3e      	ldr	r2, [pc, #248]	; (800895c <DMA_MultiBufferSetConfig+0x140>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d031      	beq.n	80088ca <DMA_MultiBufferSetConfig+0xae>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a3d      	ldr	r2, [pc, #244]	; (8008960 <DMA_MultiBufferSetConfig+0x144>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d02c      	beq.n	80088ca <DMA_MultiBufferSetConfig+0xae>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a3b      	ldr	r2, [pc, #236]	; (8008964 <DMA_MultiBufferSetConfig+0x148>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d027      	beq.n	80088ca <DMA_MultiBufferSetConfig+0xae>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a3a      	ldr	r2, [pc, #232]	; (8008968 <DMA_MultiBufferSetConfig+0x14c>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d022      	beq.n	80088ca <DMA_MultiBufferSetConfig+0xae>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a38      	ldr	r2, [pc, #224]	; (800896c <DMA_MultiBufferSetConfig+0x150>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d01d      	beq.n	80088ca <DMA_MultiBufferSetConfig+0xae>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a37      	ldr	r2, [pc, #220]	; (8008970 <DMA_MultiBufferSetConfig+0x154>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d018      	beq.n	80088ca <DMA_MultiBufferSetConfig+0xae>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a35      	ldr	r2, [pc, #212]	; (8008974 <DMA_MultiBufferSetConfig+0x158>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d013      	beq.n	80088ca <DMA_MultiBufferSetConfig+0xae>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a34      	ldr	r2, [pc, #208]	; (8008978 <DMA_MultiBufferSetConfig+0x15c>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d00e      	beq.n	80088ca <DMA_MultiBufferSetConfig+0xae>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a32      	ldr	r2, [pc, #200]	; (800897c <DMA_MultiBufferSetConfig+0x160>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d009      	beq.n	80088ca <DMA_MultiBufferSetConfig+0xae>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a31      	ldr	r2, [pc, #196]	; (8008980 <DMA_MultiBufferSetConfig+0x164>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d004      	beq.n	80088ca <DMA_MultiBufferSetConfig+0xae>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a2f      	ldr	r2, [pc, #188]	; (8008984 <DMA_MultiBufferSetConfig+0x168>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d101      	bne.n	80088ce <DMA_MultiBufferSetConfig+0xb2>
 80088ca:	2301      	movs	r3, #1
 80088cc:	e000      	b.n	80088d0 <DMA_MultiBufferSetConfig+0xb4>
 80088ce:	2300      	movs	r3, #0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d019      	beq.n	8008908 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	2b40      	cmp	r3, #64	; 0x40
 80088e2:	d108      	bne.n	80088f6 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 80088f4:	e021      	b.n	800893a <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	60da      	str	r2, [r3, #12]
}
 8008906:	e018      	b.n	800893a <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	2b40      	cmp	r3, #64	; 0x40
 8008916:	d108      	bne.n	800892a <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	60da      	str	r2, [r3, #12]
}
 8008928:	e007      	b.n	800893a <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	60da      	str	r2, [r3, #12]
}
 800893a:	bf00      	nop
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	40020010 	.word	0x40020010
 800894c:	40020028 	.word	0x40020028
 8008950:	40020040 	.word	0x40020040
 8008954:	40020058 	.word	0x40020058
 8008958:	40020070 	.word	0x40020070
 800895c:	40020088 	.word	0x40020088
 8008960:	400200a0 	.word	0x400200a0
 8008964:	400200b8 	.word	0x400200b8
 8008968:	40020410 	.word	0x40020410
 800896c:	40020428 	.word	0x40020428
 8008970:	40020440 	.word	0x40020440
 8008974:	40020458 	.word	0x40020458
 8008978:	40020470 	.word	0x40020470
 800897c:	40020488 	.word	0x40020488
 8008980:	400204a0 	.word	0x400204a0
 8008984:	400204b8 	.word	0x400204b8

08008988 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008988:	b480      	push	{r7}
 800898a:	b089      	sub	sp, #36	; 0x24
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008992:	2300      	movs	r3, #0
 8008994:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008996:	4b89      	ldr	r3, [pc, #548]	; (8008bbc <HAL_GPIO_Init+0x234>)
 8008998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800899a:	e194      	b.n	8008cc6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	2101      	movs	r1, #1
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	fa01 f303 	lsl.w	r3, r1, r3
 80089a8:	4013      	ands	r3, r2
 80089aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 8186 	beq.w	8008cc0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f003 0303 	and.w	r3, r3, #3
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d005      	beq.n	80089cc <HAL_GPIO_Init+0x44>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f003 0303 	and.w	r3, r3, #3
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d130      	bne.n	8008a2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	2203      	movs	r2, #3
 80089d8:	fa02 f303 	lsl.w	r3, r2, r3
 80089dc:	43db      	mvns	r3, r3
 80089de:	69ba      	ldr	r2, [r7, #24]
 80089e0:	4013      	ands	r3, r2
 80089e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	68da      	ldr	r2, [r3, #12]
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	005b      	lsls	r3, r3, #1
 80089ec:	fa02 f303 	lsl.w	r3, r2, r3
 80089f0:	69ba      	ldr	r2, [r7, #24]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a02:	2201      	movs	r2, #1
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0a:	43db      	mvns	r3, r3
 8008a0c:	69ba      	ldr	r2, [r7, #24]
 8008a0e:	4013      	ands	r3, r2
 8008a10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	091b      	lsrs	r3, r3, #4
 8008a18:	f003 0201 	and.w	r2, r3, #1
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	69ba      	ldr	r2, [r7, #24]
 8008a2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f003 0303 	and.w	r3, r3, #3
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d017      	beq.n	8008a6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	005b      	lsls	r3, r3, #1
 8008a44:	2203      	movs	r2, #3
 8008a46:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4a:	43db      	mvns	r3, r3
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	4013      	ands	r3, r2
 8008a50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	689a      	ldr	r2, [r3, #8]
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	005b      	lsls	r3, r3, #1
 8008a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5e:	69ba      	ldr	r2, [r7, #24]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	69ba      	ldr	r2, [r7, #24]
 8008a68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f003 0303 	and.w	r3, r3, #3
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d123      	bne.n	8008abe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	08da      	lsrs	r2, r3, #3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	3208      	adds	r2, #8
 8008a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	f003 0307 	and.w	r3, r3, #7
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	220f      	movs	r2, #15
 8008a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a92:	43db      	mvns	r3, r3
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	4013      	ands	r3, r2
 8008a98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	691a      	ldr	r2, [r3, #16]
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	f003 0307 	and.w	r3, r3, #7
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aaa:	69ba      	ldr	r2, [r7, #24]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	08da      	lsrs	r2, r3, #3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3208      	adds	r2, #8
 8008ab8:	69b9      	ldr	r1, [r7, #24]
 8008aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	005b      	lsls	r3, r3, #1
 8008ac8:	2203      	movs	r2, #3
 8008aca:	fa02 f303 	lsl.w	r3, r2, r3
 8008ace:	43db      	mvns	r3, r3
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	4013      	ands	r3, r2
 8008ad4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f003 0203 	and.w	r2, r3, #3
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	005b      	lsls	r3, r3, #1
 8008ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae6:	69ba      	ldr	r2, [r7, #24]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 80e0 	beq.w	8008cc0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b00:	4b2f      	ldr	r3, [pc, #188]	; (8008bc0 <HAL_GPIO_Init+0x238>)
 8008b02:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008b06:	4a2e      	ldr	r2, [pc, #184]	; (8008bc0 <HAL_GPIO_Init+0x238>)
 8008b08:	f043 0302 	orr.w	r3, r3, #2
 8008b0c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8008b10:	4b2b      	ldr	r3, [pc, #172]	; (8008bc0 <HAL_GPIO_Init+0x238>)
 8008b12:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008b16:	f003 0302 	and.w	r3, r3, #2
 8008b1a:	60fb      	str	r3, [r7, #12]
 8008b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b1e:	4a29      	ldr	r2, [pc, #164]	; (8008bc4 <HAL_GPIO_Init+0x23c>)
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	089b      	lsrs	r3, r3, #2
 8008b24:	3302      	adds	r3, #2
 8008b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	f003 0303 	and.w	r3, r3, #3
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	220f      	movs	r2, #15
 8008b36:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3a:	43db      	mvns	r3, r3
 8008b3c:	69ba      	ldr	r2, [r7, #24]
 8008b3e:	4013      	ands	r3, r2
 8008b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a20      	ldr	r2, [pc, #128]	; (8008bc8 <HAL_GPIO_Init+0x240>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d052      	beq.n	8008bf0 <HAL_GPIO_Init+0x268>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a1f      	ldr	r2, [pc, #124]	; (8008bcc <HAL_GPIO_Init+0x244>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d031      	beq.n	8008bb6 <HAL_GPIO_Init+0x22e>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a1e      	ldr	r2, [pc, #120]	; (8008bd0 <HAL_GPIO_Init+0x248>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d02b      	beq.n	8008bb2 <HAL_GPIO_Init+0x22a>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a1d      	ldr	r2, [pc, #116]	; (8008bd4 <HAL_GPIO_Init+0x24c>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d025      	beq.n	8008bae <HAL_GPIO_Init+0x226>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a1c      	ldr	r2, [pc, #112]	; (8008bd8 <HAL_GPIO_Init+0x250>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d01f      	beq.n	8008baa <HAL_GPIO_Init+0x222>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a1b      	ldr	r2, [pc, #108]	; (8008bdc <HAL_GPIO_Init+0x254>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d019      	beq.n	8008ba6 <HAL_GPIO_Init+0x21e>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a1a      	ldr	r2, [pc, #104]	; (8008be0 <HAL_GPIO_Init+0x258>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d013      	beq.n	8008ba2 <HAL_GPIO_Init+0x21a>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a19      	ldr	r2, [pc, #100]	; (8008be4 <HAL_GPIO_Init+0x25c>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d00d      	beq.n	8008b9e <HAL_GPIO_Init+0x216>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a18      	ldr	r2, [pc, #96]	; (8008be8 <HAL_GPIO_Init+0x260>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d007      	beq.n	8008b9a <HAL_GPIO_Init+0x212>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a17      	ldr	r2, [pc, #92]	; (8008bec <HAL_GPIO_Init+0x264>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d101      	bne.n	8008b96 <HAL_GPIO_Init+0x20e>
 8008b92:	2309      	movs	r3, #9
 8008b94:	e02d      	b.n	8008bf2 <HAL_GPIO_Init+0x26a>
 8008b96:	230a      	movs	r3, #10
 8008b98:	e02b      	b.n	8008bf2 <HAL_GPIO_Init+0x26a>
 8008b9a:	2308      	movs	r3, #8
 8008b9c:	e029      	b.n	8008bf2 <HAL_GPIO_Init+0x26a>
 8008b9e:	2307      	movs	r3, #7
 8008ba0:	e027      	b.n	8008bf2 <HAL_GPIO_Init+0x26a>
 8008ba2:	2306      	movs	r3, #6
 8008ba4:	e025      	b.n	8008bf2 <HAL_GPIO_Init+0x26a>
 8008ba6:	2305      	movs	r3, #5
 8008ba8:	e023      	b.n	8008bf2 <HAL_GPIO_Init+0x26a>
 8008baa:	2304      	movs	r3, #4
 8008bac:	e021      	b.n	8008bf2 <HAL_GPIO_Init+0x26a>
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e01f      	b.n	8008bf2 <HAL_GPIO_Init+0x26a>
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	e01d      	b.n	8008bf2 <HAL_GPIO_Init+0x26a>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e01b      	b.n	8008bf2 <HAL_GPIO_Init+0x26a>
 8008bba:	bf00      	nop
 8008bbc:	58000080 	.word	0x58000080
 8008bc0:	58024400 	.word	0x58024400
 8008bc4:	58000400 	.word	0x58000400
 8008bc8:	58020000 	.word	0x58020000
 8008bcc:	58020400 	.word	0x58020400
 8008bd0:	58020800 	.word	0x58020800
 8008bd4:	58020c00 	.word	0x58020c00
 8008bd8:	58021000 	.word	0x58021000
 8008bdc:	58021400 	.word	0x58021400
 8008be0:	58021800 	.word	0x58021800
 8008be4:	58021c00 	.word	0x58021c00
 8008be8:	58022000 	.word	0x58022000
 8008bec:	58022400 	.word	0x58022400
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	f002 0203 	and.w	r2, r2, #3
 8008bf8:	0092      	lsls	r2, r2, #2
 8008bfa:	4093      	lsls	r3, r2
 8008bfc:	69ba      	ldr	r2, [r7, #24]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c02:	4938      	ldr	r1, [pc, #224]	; (8008ce4 <HAL_GPIO_Init+0x35c>)
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	089b      	lsrs	r3, r3, #2
 8008c08:	3302      	adds	r3, #2
 8008c0a:	69ba      	ldr	r2, [r7, #24]
 8008c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	43db      	mvns	r3, r3
 8008c1c:	69ba      	ldr	r2, [r7, #24]
 8008c1e:	4013      	ands	r3, r2
 8008c20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	43db      	mvns	r3, r3
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d003      	beq.n	8008c64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	43db      	mvns	r3, r3
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	4013      	ands	r3, r2
 8008c7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d003      	beq.n	8008c90 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008c88:	69ba      	ldr	r2, [r7, #24]
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	69ba      	ldr	r2, [r7, #24]
 8008c94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	43db      	mvns	r3, r3
 8008ca0:	69ba      	ldr	r2, [r7, #24]
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d003      	beq.n	8008cba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008cb2:	69ba      	ldr	r2, [r7, #24]
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f47f ae63 	bne.w	800899c <HAL_GPIO_Init+0x14>
  }
}
 8008cd6:	bf00      	nop
 8008cd8:	bf00      	nop
 8008cda:	3724      	adds	r7, #36	; 0x24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr
 8008ce4:	58000400 	.word	0x58000400

08008ce8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008cf6:	4b75      	ldr	r3, [pc, #468]	; (8008ecc <HAL_GPIO_DeInit+0x1e4>)
 8008cf8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008cfa:	e0d9      	b.n	8008eb0 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	fa02 f303 	lsl.w	r3, r2, r3
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	4013      	ands	r3, r2
 8008d08:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 80cc 	beq.w	8008eaa <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008d12:	4a6f      	ldr	r2, [pc, #444]	; (8008ed0 <HAL_GPIO_DeInit+0x1e8>)
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	089b      	lsrs	r3, r3, #2
 8008d18:	3302      	adds	r3, #2
 8008d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d1e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f003 0303 	and.w	r3, r3, #3
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	220f      	movs	r2, #15
 8008d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	4013      	ands	r3, r2
 8008d32:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a67      	ldr	r2, [pc, #412]	; (8008ed4 <HAL_GPIO_DeInit+0x1ec>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d037      	beq.n	8008dac <HAL_GPIO_DeInit+0xc4>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a66      	ldr	r2, [pc, #408]	; (8008ed8 <HAL_GPIO_DeInit+0x1f0>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d031      	beq.n	8008da8 <HAL_GPIO_DeInit+0xc0>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a65      	ldr	r2, [pc, #404]	; (8008edc <HAL_GPIO_DeInit+0x1f4>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d02b      	beq.n	8008da4 <HAL_GPIO_DeInit+0xbc>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a64      	ldr	r2, [pc, #400]	; (8008ee0 <HAL_GPIO_DeInit+0x1f8>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d025      	beq.n	8008da0 <HAL_GPIO_DeInit+0xb8>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a63      	ldr	r2, [pc, #396]	; (8008ee4 <HAL_GPIO_DeInit+0x1fc>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d01f      	beq.n	8008d9c <HAL_GPIO_DeInit+0xb4>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a62      	ldr	r2, [pc, #392]	; (8008ee8 <HAL_GPIO_DeInit+0x200>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d019      	beq.n	8008d98 <HAL_GPIO_DeInit+0xb0>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a61      	ldr	r2, [pc, #388]	; (8008eec <HAL_GPIO_DeInit+0x204>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d013      	beq.n	8008d94 <HAL_GPIO_DeInit+0xac>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a60      	ldr	r2, [pc, #384]	; (8008ef0 <HAL_GPIO_DeInit+0x208>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d00d      	beq.n	8008d90 <HAL_GPIO_DeInit+0xa8>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a5f      	ldr	r2, [pc, #380]	; (8008ef4 <HAL_GPIO_DeInit+0x20c>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d007      	beq.n	8008d8c <HAL_GPIO_DeInit+0xa4>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a5e      	ldr	r2, [pc, #376]	; (8008ef8 <HAL_GPIO_DeInit+0x210>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d101      	bne.n	8008d88 <HAL_GPIO_DeInit+0xa0>
 8008d84:	2309      	movs	r3, #9
 8008d86:	e012      	b.n	8008dae <HAL_GPIO_DeInit+0xc6>
 8008d88:	230a      	movs	r3, #10
 8008d8a:	e010      	b.n	8008dae <HAL_GPIO_DeInit+0xc6>
 8008d8c:	2308      	movs	r3, #8
 8008d8e:	e00e      	b.n	8008dae <HAL_GPIO_DeInit+0xc6>
 8008d90:	2307      	movs	r3, #7
 8008d92:	e00c      	b.n	8008dae <HAL_GPIO_DeInit+0xc6>
 8008d94:	2306      	movs	r3, #6
 8008d96:	e00a      	b.n	8008dae <HAL_GPIO_DeInit+0xc6>
 8008d98:	2305      	movs	r3, #5
 8008d9a:	e008      	b.n	8008dae <HAL_GPIO_DeInit+0xc6>
 8008d9c:	2304      	movs	r3, #4
 8008d9e:	e006      	b.n	8008dae <HAL_GPIO_DeInit+0xc6>
 8008da0:	2303      	movs	r3, #3
 8008da2:	e004      	b.n	8008dae <HAL_GPIO_DeInit+0xc6>
 8008da4:	2302      	movs	r3, #2
 8008da6:	e002      	b.n	8008dae <HAL_GPIO_DeInit+0xc6>
 8008da8:	2301      	movs	r3, #1
 8008daa:	e000      	b.n	8008dae <HAL_GPIO_DeInit+0xc6>
 8008dac:	2300      	movs	r3, #0
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	f002 0203 	and.w	r2, r2, #3
 8008db4:	0092      	lsls	r2, r2, #2
 8008db6:	4093      	lsls	r3, r2
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d136      	bne.n	8008e2c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	43db      	mvns	r3, r3
 8008dc6:	401a      	ands	r2, r3
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	685a      	ldr	r2, [r3, #4]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	43db      	mvns	r3, r3
 8008dd4:	401a      	ands	r2, r3
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dde:	685a      	ldr	r2, [r3, #4]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	43db      	mvns	r3, r3
 8008de4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008de8:	4013      	ands	r3, r2
 8008dea:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	43db      	mvns	r3, r3
 8008df6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f003 0303 	and.w	r3, r3, #3
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	220f      	movs	r2, #15
 8008e08:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008e0e:	4a30      	ldr	r2, [pc, #192]	; (8008ed0 <HAL_GPIO_DeInit+0x1e8>)
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	089b      	lsrs	r3, r3, #2
 8008e14:	3302      	adds	r3, #2
 8008e16:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	43da      	mvns	r2, r3
 8008e1e:	482c      	ldr	r0, [pc, #176]	; (8008ed0 <HAL_GPIO_DeInit+0x1e8>)
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	089b      	lsrs	r3, r3, #2
 8008e24:	400a      	ands	r2, r1
 8008e26:	3302      	adds	r3, #2
 8008e28:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	005b      	lsls	r3, r3, #1
 8008e34:	2103      	movs	r1, #3
 8008e36:	fa01 f303 	lsl.w	r3, r1, r3
 8008e3a:	431a      	orrs	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	08da      	lsrs	r2, r3, #3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	3208      	adds	r2, #8
 8008e48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f003 0307 	and.w	r3, r3, #7
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	220f      	movs	r2, #15
 8008e56:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5a:	43db      	mvns	r3, r3
 8008e5c:	697a      	ldr	r2, [r7, #20]
 8008e5e:	08d2      	lsrs	r2, r2, #3
 8008e60:	4019      	ands	r1, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	3208      	adds	r2, #8
 8008e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68da      	ldr	r2, [r3, #12]
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	2103      	movs	r1, #3
 8008e74:	fa01 f303 	lsl.w	r3, r1, r3
 8008e78:	43db      	mvns	r3, r3
 8008e7a:	401a      	ands	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	2101      	movs	r1, #1
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	fa01 f303 	lsl.w	r3, r1, r3
 8008e8c:	43db      	mvns	r3, r3
 8008e8e:	401a      	ands	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	689a      	ldr	r2, [r3, #8]
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	2103      	movs	r1, #3
 8008e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008ea2:	43db      	mvns	r3, r3
 8008ea4:	401a      	ands	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	3301      	adds	r3, #1
 8008eae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008eb0:	683a      	ldr	r2, [r7, #0]
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f47f af1f 	bne.w	8008cfc <HAL_GPIO_DeInit+0x14>
  }
}
 8008ebe:	bf00      	nop
 8008ec0:	bf00      	nop
 8008ec2:	371c      	adds	r7, #28
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	58000080 	.word	0x58000080
 8008ed0:	58000400 	.word	0x58000400
 8008ed4:	58020000 	.word	0x58020000
 8008ed8:	58020400 	.word	0x58020400
 8008edc:	58020800 	.word	0x58020800
 8008ee0:	58020c00 	.word	0x58020c00
 8008ee4:	58021000 	.word	0x58021000
 8008ee8:	58021400 	.word	0x58021400
 8008eec:	58021800 	.word	0x58021800
 8008ef0:	58021c00 	.word	0x58021c00
 8008ef4:	58022000 	.word	0x58022000
 8008ef8:	58022400 	.word	0x58022400

08008efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	807b      	strh	r3, [r7, #2]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f0c:	787b      	ldrb	r3, [r7, #1]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d003      	beq.n	8008f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f12:	887a      	ldrh	r2, [r7, #2]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008f18:	e003      	b.n	8008f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008f1a:	887b      	ldrh	r3, [r7, #2]
 8008f1c:	041a      	lsls	r2, r3, #16
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	619a      	str	r2, [r3, #24]
}
 8008f22:	bf00      	nop
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
	...

08008f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d101      	bne.n	8008f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e07f      	b.n	8009042 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d106      	bne.n	8008f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7fa ff70 	bl	8003e3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2224      	movs	r2, #36	; 0x24
 8008f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f022 0201 	bic.w	r2, r2, #1
 8008f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685a      	ldr	r2, [r3, #4]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008f80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d107      	bne.n	8008faa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	689a      	ldr	r2, [r3, #8]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fa6:	609a      	str	r2, [r3, #8]
 8008fa8:	e006      	b.n	8008fb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	689a      	ldr	r2, [r3, #8]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008fb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d104      	bne.n	8008fca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	6859      	ldr	r1, [r3, #4]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	4b1d      	ldr	r3, [pc, #116]	; (800904c <HAL_I2C_Init+0x11c>)
 8008fd6:	430b      	orrs	r3, r1
 8008fd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68da      	ldr	r2, [r3, #12]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fe8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691a      	ldr	r2, [r3, #16]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	430a      	orrs	r2, r1
 8009002:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	69d9      	ldr	r1, [r3, #28]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6a1a      	ldr	r2, [r3, #32]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	430a      	orrs	r2, r1
 8009012:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f042 0201 	orr.w	r2, r2, #1
 8009022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2220      	movs	r2, #32
 800902e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	02008000 	.word	0x02008000

08009050 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d101      	bne.n	8009062 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e021      	b.n	80090a6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2224      	movs	r2, #36	; 0x24
 8009066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f022 0201 	bic.w	r2, r2, #1
 8009078:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7fa ff58 	bl	8003f30 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
	...

080090b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b088      	sub	sp, #32
 80090b4:	af02      	add	r7, sp, #8
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	4608      	mov	r0, r1
 80090ba:	4611      	mov	r1, r2
 80090bc:	461a      	mov	r2, r3
 80090be:	4603      	mov	r3, r0
 80090c0:	817b      	strh	r3, [r7, #10]
 80090c2:	460b      	mov	r3, r1
 80090c4:	813b      	strh	r3, [r7, #8]
 80090c6:	4613      	mov	r3, r2
 80090c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b20      	cmp	r3, #32
 80090d4:	f040 80f9 	bne.w	80092ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d002      	beq.n	80090e4 <HAL_I2C_Mem_Write+0x34>
 80090de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d105      	bne.n	80090f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e0ed      	b.n	80092cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d101      	bne.n	80090fe <HAL_I2C_Mem_Write+0x4e>
 80090fa:	2302      	movs	r3, #2
 80090fc:	e0e6      	b.n	80092cc <HAL_I2C_Mem_Write+0x21c>
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009106:	f7fb fa9f 	bl	8004648 <HAL_GetTick>
 800910a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	2319      	movs	r3, #25
 8009112:	2201      	movs	r2, #1
 8009114:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f001 f900 	bl	800a31e <I2C_WaitOnFlagUntilTimeout>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d001      	beq.n	8009128 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	e0d1      	b.n	80092cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2221      	movs	r2, #33	; 0x21
 800912c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2240      	movs	r2, #64	; 0x40
 8009134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6a3a      	ldr	r2, [r7, #32]
 8009142:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009148:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009150:	88f8      	ldrh	r0, [r7, #6]
 8009152:	893a      	ldrh	r2, [r7, #8]
 8009154:	8979      	ldrh	r1, [r7, #10]
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915c:	9300      	str	r3, [sp, #0]
 800915e:	4603      	mov	r3, r0
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f000 fbab 	bl	80098bc <I2C_RequestMemoryWrite>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d005      	beq.n	8009178 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e0a9      	b.n	80092cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800917c:	b29b      	uxth	r3, r3
 800917e:	2bff      	cmp	r3, #255	; 0xff
 8009180:	d90e      	bls.n	80091a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	22ff      	movs	r2, #255	; 0xff
 8009186:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800918c:	b2da      	uxtb	r2, r3
 800918e:	8979      	ldrh	r1, [r7, #10]
 8009190:	2300      	movs	r3, #0
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f001 fa79 	bl	800a690 <I2C_TransferConfig>
 800919e:	e00f      	b.n	80091c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ae:	b2da      	uxtb	r2, r3
 80091b0:	8979      	ldrh	r1, [r7, #10]
 80091b2:	2300      	movs	r3, #0
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f001 fa68 	bl	800a690 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f001 f8f9 	bl	800a3bc <I2C_WaitOnTXISFlagUntilTimeout>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e07b      	b.n	80092cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d8:	781a      	ldrb	r2, [r3, #0]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e4:	1c5a      	adds	r2, r3, #1
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	3b01      	subs	r3, #1
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091fc:	3b01      	subs	r3, #1
 80091fe:	b29a      	uxth	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009208:	b29b      	uxth	r3, r3
 800920a:	2b00      	cmp	r3, #0
 800920c:	d034      	beq.n	8009278 <HAL_I2C_Mem_Write+0x1c8>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009212:	2b00      	cmp	r3, #0
 8009214:	d130      	bne.n	8009278 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	9300      	str	r3, [sp, #0]
 800921a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921c:	2200      	movs	r2, #0
 800921e:	2180      	movs	r1, #128	; 0x80
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f001 f87c 	bl	800a31e <I2C_WaitOnFlagUntilTimeout>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d001      	beq.n	8009230 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e04d      	b.n	80092cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009234:	b29b      	uxth	r3, r3
 8009236:	2bff      	cmp	r3, #255	; 0xff
 8009238:	d90e      	bls.n	8009258 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	22ff      	movs	r2, #255	; 0xff
 800923e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009244:	b2da      	uxtb	r2, r3
 8009246:	8979      	ldrh	r1, [r7, #10]
 8009248:	2300      	movs	r3, #0
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f001 fa1d 	bl	800a690 <I2C_TransferConfig>
 8009256:	e00f      	b.n	8009278 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800925c:	b29a      	uxth	r2, r3
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009266:	b2da      	uxtb	r2, r3
 8009268:	8979      	ldrh	r1, [r7, #10]
 800926a:	2300      	movs	r3, #0
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f001 fa0c 	bl	800a690 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800927c:	b29b      	uxth	r3, r3
 800927e:	2b00      	cmp	r3, #0
 8009280:	d19e      	bne.n	80091c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f001 f8df 	bl	800a44a <I2C_WaitOnSTOPFlagUntilTimeout>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e01a      	b.n	80092cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	2220      	movs	r2, #32
 800929c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	6859      	ldr	r1, [r3, #4]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	4b0a      	ldr	r3, [pc, #40]	; (80092d4 <HAL_I2C_Mem_Write+0x224>)
 80092aa:	400b      	ands	r3, r1
 80092ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2220      	movs	r2, #32
 80092b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	e000      	b.n	80092cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80092ca:	2302      	movs	r3, #2
  }
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	fe00e800 	.word	0xfe00e800

080092d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b088      	sub	sp, #32
 80092dc:	af02      	add	r7, sp, #8
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	4608      	mov	r0, r1
 80092e2:	4611      	mov	r1, r2
 80092e4:	461a      	mov	r2, r3
 80092e6:	4603      	mov	r3, r0
 80092e8:	817b      	strh	r3, [r7, #10]
 80092ea:	460b      	mov	r3, r1
 80092ec:	813b      	strh	r3, [r7, #8]
 80092ee:	4613      	mov	r3, r2
 80092f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	2b20      	cmp	r3, #32
 80092fc:	f040 80fd 	bne.w	80094fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009300:	6a3b      	ldr	r3, [r7, #32]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d002      	beq.n	800930c <HAL_I2C_Mem_Read+0x34>
 8009306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009308:	2b00      	cmp	r3, #0
 800930a:	d105      	bne.n	8009318 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009312:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e0f1      	b.n	80094fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800931e:	2b01      	cmp	r3, #1
 8009320:	d101      	bne.n	8009326 <HAL_I2C_Mem_Read+0x4e>
 8009322:	2302      	movs	r3, #2
 8009324:	e0ea      	b.n	80094fc <HAL_I2C_Mem_Read+0x224>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2201      	movs	r2, #1
 800932a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800932e:	f7fb f98b 	bl	8004648 <HAL_GetTick>
 8009332:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	2319      	movs	r3, #25
 800933a:	2201      	movs	r2, #1
 800933c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 ffec 	bl	800a31e <I2C_WaitOnFlagUntilTimeout>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e0d5      	b.n	80094fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2222      	movs	r2, #34	; 0x22
 8009354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2240      	movs	r2, #64	; 0x40
 800935c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6a3a      	ldr	r2, [r7, #32]
 800936a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009370:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009378:	88f8      	ldrh	r0, [r7, #6]
 800937a:	893a      	ldrh	r2, [r7, #8]
 800937c:	8979      	ldrh	r1, [r7, #10]
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	9301      	str	r3, [sp, #4]
 8009382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	4603      	mov	r3, r0
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 faeb 	bl	8009964 <I2C_RequestMemoryRead>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d005      	beq.n	80093a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	e0ad      	b.n	80094fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	2bff      	cmp	r3, #255	; 0xff
 80093a8:	d90e      	bls.n	80093c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	22ff      	movs	r2, #255	; 0xff
 80093ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	8979      	ldrh	r1, [r7, #10]
 80093b8:	4b52      	ldr	r3, [pc, #328]	; (8009504 <HAL_I2C_Mem_Read+0x22c>)
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f001 f965 	bl	800a690 <I2C_TransferConfig>
 80093c6:	e00f      	b.n	80093e8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	8979      	ldrh	r1, [r7, #10]
 80093da:	4b4a      	ldr	r3, [pc, #296]	; (8009504 <HAL_I2C_Mem_Read+0x22c>)
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f001 f954 	bl	800a690 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ee:	2200      	movs	r2, #0
 80093f0:	2104      	movs	r1, #4
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f000 ff93 	bl	800a31e <I2C_WaitOnFlagUntilTimeout>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e07c      	b.n	80094fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940c:	b2d2      	uxtb	r2, r2
 800940e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009414:	1c5a      	adds	r2, r3, #1
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800941e:	3b01      	subs	r3, #1
 8009420:	b29a      	uxth	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800942a:	b29b      	uxth	r3, r3
 800942c:	3b01      	subs	r3, #1
 800942e:	b29a      	uxth	r2, r3
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009438:	b29b      	uxth	r3, r3
 800943a:	2b00      	cmp	r3, #0
 800943c:	d034      	beq.n	80094a8 <HAL_I2C_Mem_Read+0x1d0>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009442:	2b00      	cmp	r3, #0
 8009444:	d130      	bne.n	80094a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944c:	2200      	movs	r2, #0
 800944e:	2180      	movs	r1, #128	; 0x80
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 ff64 	bl	800a31e <I2C_WaitOnFlagUntilTimeout>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	e04d      	b.n	80094fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009464:	b29b      	uxth	r3, r3
 8009466:	2bff      	cmp	r3, #255	; 0xff
 8009468:	d90e      	bls.n	8009488 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	22ff      	movs	r2, #255	; 0xff
 800946e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009474:	b2da      	uxtb	r2, r3
 8009476:	8979      	ldrh	r1, [r7, #10]
 8009478:	2300      	movs	r3, #0
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f001 f905 	bl	800a690 <I2C_TransferConfig>
 8009486:	e00f      	b.n	80094a8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800948c:	b29a      	uxth	r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009496:	b2da      	uxtb	r2, r3
 8009498:	8979      	ldrh	r1, [r7, #10]
 800949a:	2300      	movs	r3, #0
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f001 f8f4 	bl	800a690 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d19a      	bne.n	80093e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f000 ffc7 	bl	800a44a <I2C_WaitOnSTOPFlagUntilTimeout>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e01a      	b.n	80094fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2220      	movs	r2, #32
 80094cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	6859      	ldr	r1, [r3, #4]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	4b0b      	ldr	r3, [pc, #44]	; (8009508 <HAL_I2C_Mem_Read+0x230>)
 80094da:	400b      	ands	r3, r1
 80094dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2220      	movs	r2, #32
 80094e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	e000      	b.n	80094fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80094fa:	2302      	movs	r3, #2
  }
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	80002400 	.word	0x80002400
 8009508:	fe00e800 	.word	0xfe00e800

0800950c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009528:	2b00      	cmp	r3, #0
 800952a:	d005      	beq.n	8009538 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	68f9      	ldr	r1, [r7, #12]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	4798      	blx	r3
  }
}
 8009538:	bf00      	nop
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	699b      	ldr	r3, [r3, #24]
 800954e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	0a1b      	lsrs	r3, r3, #8
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	2b00      	cmp	r3, #0
 8009562:	d010      	beq.n	8009586 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	09db      	lsrs	r3, r3, #7
 8009568:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00a      	beq.n	8009586 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009574:	f043 0201 	orr.w	r2, r3, #1
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009584:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	0a9b      	lsrs	r3, r3, #10
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	2b00      	cmp	r3, #0
 8009590:	d010      	beq.n	80095b4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	09db      	lsrs	r3, r3, #7
 8009596:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00a      	beq.n	80095b4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a2:	f043 0208 	orr.w	r2, r3, #8
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80095b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	0a5b      	lsrs	r3, r3, #9
 80095b8:	f003 0301 	and.w	r3, r3, #1
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d010      	beq.n	80095e2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	09db      	lsrs	r3, r3, #7
 80095c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d00a      	beq.n	80095e2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d0:	f043 0202 	orr.w	r2, r3, #2
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095e0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f003 030b 	and.w	r3, r3, #11
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d003      	beq.n	80095fa <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80095f2:	68f9      	ldr	r1, [r7, #12]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fd39 	bl	800a06c <I2C_ITError>
  }
}
 80095fa:	bf00      	nop
 80095fc:	3718      	adds	r7, #24
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009602:	b480      	push	{r7}
 8009604:	b083      	sub	sp, #12
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800960a:	bf00      	nop
 800960c:	370c      	adds	r7, #12
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr

08009616 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009616:	b480      	push	{r7}
 8009618:	b083      	sub	sp, #12
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800961e:	bf00      	nop
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800962a:	b480      	push	{r7}
 800962c:	b083      	sub	sp, #12
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	460b      	mov	r3, r1
 8009634:	70fb      	strb	r3, [r7, #3]
 8009636:	4613      	mov	r3, r2
 8009638:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800963a:	bf00      	nop
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009646:	b480      	push	{r7}
 8009648:	b083      	sub	sp, #12
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800964e:	bf00      	nop
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800965a:	b480      	push	{r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009662:	bf00      	nop
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr

0800966e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800966e:	b480      	push	{r7}
 8009670:	b083      	sub	sp, #12
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009676:	bf00      	nop
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009682:	b480      	push	{r7}
 8009684:	b083      	sub	sp, #12
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009690:	b2db      	uxtb	r3, r3
}
 8009692:	4618      	mov	r0, r3
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr

0800969e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800969e:	b480      	push	{r7}
 80096a0:	b083      	sub	sp, #12
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b086      	sub	sp, #24
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	60f8      	str	r0, [r7, #12]
 80096be:	60b9      	str	r1, [r7, #8]
 80096c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d101      	bne.n	80096da <I2C_Slave_ISR_IT+0x24>
 80096d6:	2302      	movs	r3, #2
 80096d8:	e0ec      	b.n	80098b4 <I2C_Slave_ISR_IT+0x1fe>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	095b      	lsrs	r3, r3, #5
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d009      	beq.n	8009702 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	095b      	lsrs	r3, r3, #5
 80096f2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80096fa:	6939      	ldr	r1, [r7, #16]
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f000 fa67 	bl	8009bd0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	091b      	lsrs	r3, r3, #4
 8009706:	f003 0301 	and.w	r3, r3, #1
 800970a:	2b00      	cmp	r3, #0
 800970c:	d04d      	beq.n	80097aa <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	091b      	lsrs	r3, r3, #4
 8009712:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009716:	2b00      	cmp	r3, #0
 8009718:	d047      	beq.n	80097aa <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800971e:	b29b      	uxth	r3, r3
 8009720:	2b00      	cmp	r3, #0
 8009722:	d128      	bne.n	8009776 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b28      	cmp	r3, #40	; 0x28
 800972e:	d108      	bne.n	8009742 <I2C_Slave_ISR_IT+0x8c>
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009736:	d104      	bne.n	8009742 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009738:	6939      	ldr	r1, [r7, #16]
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f000 fc40 	bl	8009fc0 <I2C_ITListenCplt>
 8009740:	e032      	b.n	80097a8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b29      	cmp	r3, #41	; 0x29
 800974c:	d10e      	bne.n	800976c <I2C_Slave_ISR_IT+0xb6>
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009754:	d00a      	beq.n	800976c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2210      	movs	r2, #16
 800975c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f000 fd9b 	bl	800a29a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f000 f9d5 	bl	8009b14 <I2C_ITSlaveSeqCplt>
 800976a:	e01d      	b.n	80097a8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2210      	movs	r2, #16
 8009772:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8009774:	e096      	b.n	80098a4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2210      	movs	r2, #16
 800977c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009782:	f043 0204 	orr.w	r2, r3, #4
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d004      	beq.n	800979a <I2C_Slave_ISR_IT+0xe4>
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009796:	f040 8085 	bne.w	80098a4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800979e:	4619      	mov	r1, r3
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f000 fc63 	bl	800a06c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80097a6:	e07d      	b.n	80098a4 <I2C_Slave_ISR_IT+0x1ee>
 80097a8:	e07c      	b.n	80098a4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	089b      	lsrs	r3, r3, #2
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d030      	beq.n	8009818 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	089b      	lsrs	r3, r3, #2
 80097ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d02a      	beq.n	8009818 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d018      	beq.n	80097fe <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d6:	b2d2      	uxtb	r2, r2
 80097d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097e8:	3b01      	subs	r3, #1
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	3b01      	subs	r3, #1
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009802:	b29b      	uxth	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	d14f      	bne.n	80098a8 <I2C_Slave_ISR_IT+0x1f2>
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800980e:	d04b      	beq.n	80098a8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f000 f97f 	bl	8009b14 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009816:	e047      	b.n	80098a8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	08db      	lsrs	r3, r3, #3
 800981c:	f003 0301 	and.w	r3, r3, #1
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00a      	beq.n	800983a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	08db      	lsrs	r3, r3, #3
 8009828:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800982c:	2b00      	cmp	r3, #0
 800982e:	d004      	beq.n	800983a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009830:	6939      	ldr	r1, [r7, #16]
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f000 f8ea 	bl	8009a0c <I2C_ITAddrCplt>
 8009838:	e037      	b.n	80098aa <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	085b      	lsrs	r3, r3, #1
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	2b00      	cmp	r3, #0
 8009844:	d031      	beq.n	80098aa <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	085b      	lsrs	r3, r3, #1
 800984a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800984e:	2b00      	cmp	r3, #0
 8009850:	d02b      	beq.n	80098aa <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009856:	b29b      	uxth	r3, r3
 8009858:	2b00      	cmp	r3, #0
 800985a:	d018      	beq.n	800988e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009860:	781a      	ldrb	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	1c5a      	adds	r2, r3, #1
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009876:	b29b      	uxth	r3, r3
 8009878:	3b01      	subs	r3, #1
 800987a:	b29a      	uxth	r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009884:	3b01      	subs	r3, #1
 8009886:	b29a      	uxth	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	851a      	strh	r2, [r3, #40]	; 0x28
 800988c:	e00d      	b.n	80098aa <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009894:	d002      	beq.n	800989c <I2C_Slave_ISR_IT+0x1e6>
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d106      	bne.n	80098aa <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f000 f939 	bl	8009b14 <I2C_ITSlaveSeqCplt>
 80098a2:	e002      	b.n	80098aa <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80098a4:	bf00      	nop
 80098a6:	e000      	b.n	80098aa <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80098a8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3718      	adds	r7, #24
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af02      	add	r7, sp, #8
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	4608      	mov	r0, r1
 80098c6:	4611      	mov	r1, r2
 80098c8:	461a      	mov	r2, r3
 80098ca:	4603      	mov	r3, r0
 80098cc:	817b      	strh	r3, [r7, #10]
 80098ce:	460b      	mov	r3, r1
 80098d0:	813b      	strh	r3, [r7, #8]
 80098d2:	4613      	mov	r3, r2
 80098d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80098d6:	88fb      	ldrh	r3, [r7, #6]
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	8979      	ldrh	r1, [r7, #10]
 80098dc:	4b20      	ldr	r3, [pc, #128]	; (8009960 <I2C_RequestMemoryWrite+0xa4>)
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f000 fed3 	bl	800a690 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098ea:	69fa      	ldr	r2, [r7, #28]
 80098ec:	69b9      	ldr	r1, [r7, #24]
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f000 fd64 	bl	800a3bc <I2C_WaitOnTXISFlagUntilTimeout>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e02c      	b.n	8009958 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80098fe:	88fb      	ldrh	r3, [r7, #6]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d105      	bne.n	8009910 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009904:	893b      	ldrh	r3, [r7, #8]
 8009906:	b2da      	uxtb	r2, r3
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	629a      	str	r2, [r3, #40]	; 0x28
 800990e:	e015      	b.n	800993c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009910:	893b      	ldrh	r3, [r7, #8]
 8009912:	0a1b      	lsrs	r3, r3, #8
 8009914:	b29b      	uxth	r3, r3
 8009916:	b2da      	uxtb	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800991e:	69fa      	ldr	r2, [r7, #28]
 8009920:	69b9      	ldr	r1, [r7, #24]
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f000 fd4a 	bl	800a3bc <I2C_WaitOnTXISFlagUntilTimeout>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e012      	b.n	8009958 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009932:	893b      	ldrh	r3, [r7, #8]
 8009934:	b2da      	uxtb	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	2200      	movs	r2, #0
 8009944:	2180      	movs	r1, #128	; 0x80
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f000 fce9 	bl	800a31e <I2C_WaitOnFlagUntilTimeout>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d001      	beq.n	8009956 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	e000      	b.n	8009958 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	80002000 	.word	0x80002000

08009964 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af02      	add	r7, sp, #8
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	4608      	mov	r0, r1
 800996e:	4611      	mov	r1, r2
 8009970:	461a      	mov	r2, r3
 8009972:	4603      	mov	r3, r0
 8009974:	817b      	strh	r3, [r7, #10]
 8009976:	460b      	mov	r3, r1
 8009978:	813b      	strh	r3, [r7, #8]
 800997a:	4613      	mov	r3, r2
 800997c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800997e:	88fb      	ldrh	r3, [r7, #6]
 8009980:	b2da      	uxtb	r2, r3
 8009982:	8979      	ldrh	r1, [r7, #10]
 8009984:	4b20      	ldr	r3, [pc, #128]	; (8009a08 <I2C_RequestMemoryRead+0xa4>)
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	2300      	movs	r3, #0
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 fe80 	bl	800a690 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009990:	69fa      	ldr	r2, [r7, #28]
 8009992:	69b9      	ldr	r1, [r7, #24]
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 fd11 	bl	800a3bc <I2C_WaitOnTXISFlagUntilTimeout>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	e02c      	b.n	80099fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80099a4:	88fb      	ldrh	r3, [r7, #6]
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d105      	bne.n	80099b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80099aa:	893b      	ldrh	r3, [r7, #8]
 80099ac:	b2da      	uxtb	r2, r3
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	629a      	str	r2, [r3, #40]	; 0x28
 80099b4:	e015      	b.n	80099e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80099b6:	893b      	ldrh	r3, [r7, #8]
 80099b8:	0a1b      	lsrs	r3, r3, #8
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	b2da      	uxtb	r2, r3
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099c4:	69fa      	ldr	r2, [r7, #28]
 80099c6:	69b9      	ldr	r1, [r7, #24]
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 fcf7 	bl	800a3bc <I2C_WaitOnTXISFlagUntilTimeout>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	e012      	b.n	80099fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80099d8:	893b      	ldrh	r3, [r7, #8]
 80099da:	b2da      	uxtb	r2, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	2200      	movs	r2, #0
 80099ea:	2140      	movs	r1, #64	; 0x40
 80099ec:	68f8      	ldr	r0, [r7, #12]
 80099ee:	f000 fc96 	bl	800a31e <I2C_WaitOnFlagUntilTimeout>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d001      	beq.n	80099fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e000      	b.n	80099fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	80002000 	.word	0x80002000

08009a0c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a22:	2b28      	cmp	r3, #40	; 0x28
 8009a24:	d16a      	bne.n	8009afc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	0c1b      	lsrs	r3, r3, #16
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	f003 0301 	and.w	r3, r3, #1
 8009a34:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	0c1b      	lsrs	r3, r3, #16
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009a44:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a52:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009a60:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d138      	bne.n	8009adc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8009a6a:	897b      	ldrh	r3, [r7, #10]
 8009a6c:	09db      	lsrs	r3, r3, #7
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	89bb      	ldrh	r3, [r7, #12]
 8009a72:	4053      	eors	r3, r2
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	f003 0306 	and.w	r3, r3, #6
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d11c      	bne.n	8009ab8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8009a7e:	897b      	ldrh	r3, [r7, #10]
 8009a80:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a86:	1c5a      	adds	r2, r3, #1
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d13b      	bne.n	8009b0c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2208      	movs	r2, #8
 8009aa0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009aaa:	89ba      	ldrh	r2, [r7, #12]
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	4619      	mov	r1, r3
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f7ff fdba 	bl	800962a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009ab6:	e029      	b.n	8009b0c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8009ab8:	893b      	ldrh	r3, [r7, #8]
 8009aba:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fe17 	bl	800a6f4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009ace:	89ba      	ldrh	r2, [r7, #12]
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7ff fda8 	bl	800962a <HAL_I2C_AddrCallback>
}
 8009ada:	e017      	b.n	8009b0c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009adc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fe07 	bl	800a6f4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009aee:	89ba      	ldrh	r2, [r7, #12]
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f7ff fd98 	bl	800962a <HAL_I2C_AddrCallback>
}
 8009afa:	e007      	b.n	8009b0c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2208      	movs	r2, #8
 8009b02:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8009b0c:	bf00      	nop
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	0b9b      	lsrs	r3, r3, #14
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d008      	beq.n	8009b4a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009b46:	601a      	str	r2, [r3, #0]
 8009b48:	e00d      	b.n	8009b66 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	0bdb      	lsrs	r3, r3, #15
 8009b4e:	f003 0301 	and.w	r3, r3, #1
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d007      	beq.n	8009b66 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b64:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	2b29      	cmp	r3, #41	; 0x29
 8009b70:	d112      	bne.n	8009b98 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2228      	movs	r2, #40	; 0x28
 8009b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2221      	movs	r2, #33	; 0x21
 8009b7e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009b80:	2101      	movs	r1, #1
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fdb6 	bl	800a6f4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f7ff fd36 	bl	8009602 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009b96:	e017      	b.n	8009bc8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ba2:	d111      	bne.n	8009bc8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2228      	movs	r2, #40	; 0x28
 8009ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2222      	movs	r2, #34	; 0x22
 8009bb0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009bb2:	2102      	movs	r1, #2
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fd9d 	bl	800a6f4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7ff fd27 	bl	8009616 <HAL_I2C_SlaveRxCpltCallback>
}
 8009bc8:	bf00      	nop
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bec:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009bf6:	7bfb      	ldrb	r3, [r7, #15]
 8009bf8:	2b21      	cmp	r3, #33	; 0x21
 8009bfa:	d002      	beq.n	8009c02 <I2C_ITSlaveCplt+0x32>
 8009bfc:	7bfb      	ldrb	r3, [r7, #15]
 8009bfe:	2b29      	cmp	r3, #41	; 0x29
 8009c00:	d108      	bne.n	8009c14 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009c02:	f248 0101 	movw	r1, #32769	; 0x8001
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fd74 	bl	800a6f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2221      	movs	r2, #33	; 0x21
 8009c10:	631a      	str	r2, [r3, #48]	; 0x30
 8009c12:	e00d      	b.n	8009c30 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009c14:	7bfb      	ldrb	r3, [r7, #15]
 8009c16:	2b22      	cmp	r3, #34	; 0x22
 8009c18:	d002      	beq.n	8009c20 <I2C_ITSlaveCplt+0x50>
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
 8009c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c1e:	d107      	bne.n	8009c30 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009c20:	f248 0102 	movw	r1, #32770	; 0x8002
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fd65 	bl	800a6f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2222      	movs	r2, #34	; 0x22
 8009c2e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	685a      	ldr	r2, [r3, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c3e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6859      	ldr	r1, [r3, #4]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	4b80      	ldr	r3, [pc, #512]	; (8009e4c <I2C_ITSlaveCplt+0x27c>)
 8009c4c:	400b      	ands	r3, r1
 8009c4e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fb22 	bl	800a29a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	0b9b      	lsrs	r3, r3, #14
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d07a      	beq.n	8009d58 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009c70:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f000 8111 	beq.w	8009e9e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a73      	ldr	r2, [pc, #460]	; (8009e50 <I2C_ITSlaveCplt+0x280>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d059      	beq.n	8009d3c <I2C_ITSlaveCplt+0x16c>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a71      	ldr	r2, [pc, #452]	; (8009e54 <I2C_ITSlaveCplt+0x284>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d053      	beq.n	8009d3c <I2C_ITSlaveCplt+0x16c>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a6f      	ldr	r2, [pc, #444]	; (8009e58 <I2C_ITSlaveCplt+0x288>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d04d      	beq.n	8009d3c <I2C_ITSlaveCplt+0x16c>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a6d      	ldr	r2, [pc, #436]	; (8009e5c <I2C_ITSlaveCplt+0x28c>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d047      	beq.n	8009d3c <I2C_ITSlaveCplt+0x16c>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a6b      	ldr	r2, [pc, #428]	; (8009e60 <I2C_ITSlaveCplt+0x290>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d041      	beq.n	8009d3c <I2C_ITSlaveCplt+0x16c>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a69      	ldr	r2, [pc, #420]	; (8009e64 <I2C_ITSlaveCplt+0x294>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d03b      	beq.n	8009d3c <I2C_ITSlaveCplt+0x16c>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a67      	ldr	r2, [pc, #412]	; (8009e68 <I2C_ITSlaveCplt+0x298>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d035      	beq.n	8009d3c <I2C_ITSlaveCplt+0x16c>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a65      	ldr	r2, [pc, #404]	; (8009e6c <I2C_ITSlaveCplt+0x29c>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d02f      	beq.n	8009d3c <I2C_ITSlaveCplt+0x16c>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a63      	ldr	r2, [pc, #396]	; (8009e70 <I2C_ITSlaveCplt+0x2a0>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d029      	beq.n	8009d3c <I2C_ITSlaveCplt+0x16c>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a61      	ldr	r2, [pc, #388]	; (8009e74 <I2C_ITSlaveCplt+0x2a4>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d023      	beq.n	8009d3c <I2C_ITSlaveCplt+0x16c>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a5f      	ldr	r2, [pc, #380]	; (8009e78 <I2C_ITSlaveCplt+0x2a8>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d01d      	beq.n	8009d3c <I2C_ITSlaveCplt+0x16c>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a5d      	ldr	r2, [pc, #372]	; (8009e7c <I2C_ITSlaveCplt+0x2ac>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d017      	beq.n	8009d3c <I2C_ITSlaveCplt+0x16c>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a5b      	ldr	r2, [pc, #364]	; (8009e80 <I2C_ITSlaveCplt+0x2b0>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d011      	beq.n	8009d3c <I2C_ITSlaveCplt+0x16c>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a59      	ldr	r2, [pc, #356]	; (8009e84 <I2C_ITSlaveCplt+0x2b4>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d00b      	beq.n	8009d3c <I2C_ITSlaveCplt+0x16c>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a57      	ldr	r2, [pc, #348]	; (8009e88 <I2C_ITSlaveCplt+0x2b8>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d005      	beq.n	8009d3c <I2C_ITSlaveCplt+0x16c>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a55      	ldr	r2, [pc, #340]	; (8009e8c <I2C_ITSlaveCplt+0x2bc>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d105      	bne.n	8009d48 <I2C_ITSlaveCplt+0x178>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	e004      	b.n	8009d52 <I2C_ITSlaveCplt+0x182>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	8553      	strh	r3, [r2, #42]	; 0x2a
 8009d56:	e0a2      	b.n	8009e9e <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	0bdb      	lsrs	r3, r3, #15
 8009d5c:	f003 0301 	and.w	r3, r3, #1
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 809c 	beq.w	8009e9e <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d74:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f000 808f 	beq.w	8009e9e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a32      	ldr	r2, [pc, #200]	; (8009e50 <I2C_ITSlaveCplt+0x280>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d059      	beq.n	8009e40 <I2C_ITSlaveCplt+0x270>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a30      	ldr	r2, [pc, #192]	; (8009e54 <I2C_ITSlaveCplt+0x284>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d053      	beq.n	8009e40 <I2C_ITSlaveCplt+0x270>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a2e      	ldr	r2, [pc, #184]	; (8009e58 <I2C_ITSlaveCplt+0x288>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d04d      	beq.n	8009e40 <I2C_ITSlaveCplt+0x270>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a2c      	ldr	r2, [pc, #176]	; (8009e5c <I2C_ITSlaveCplt+0x28c>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d047      	beq.n	8009e40 <I2C_ITSlaveCplt+0x270>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a2a      	ldr	r2, [pc, #168]	; (8009e60 <I2C_ITSlaveCplt+0x290>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d041      	beq.n	8009e40 <I2C_ITSlaveCplt+0x270>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a28      	ldr	r2, [pc, #160]	; (8009e64 <I2C_ITSlaveCplt+0x294>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d03b      	beq.n	8009e40 <I2C_ITSlaveCplt+0x270>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a26      	ldr	r2, [pc, #152]	; (8009e68 <I2C_ITSlaveCplt+0x298>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d035      	beq.n	8009e40 <I2C_ITSlaveCplt+0x270>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a24      	ldr	r2, [pc, #144]	; (8009e6c <I2C_ITSlaveCplt+0x29c>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d02f      	beq.n	8009e40 <I2C_ITSlaveCplt+0x270>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a22      	ldr	r2, [pc, #136]	; (8009e70 <I2C_ITSlaveCplt+0x2a0>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d029      	beq.n	8009e40 <I2C_ITSlaveCplt+0x270>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a20      	ldr	r2, [pc, #128]	; (8009e74 <I2C_ITSlaveCplt+0x2a4>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d023      	beq.n	8009e40 <I2C_ITSlaveCplt+0x270>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a1e      	ldr	r2, [pc, #120]	; (8009e78 <I2C_ITSlaveCplt+0x2a8>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d01d      	beq.n	8009e40 <I2C_ITSlaveCplt+0x270>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a1c      	ldr	r2, [pc, #112]	; (8009e7c <I2C_ITSlaveCplt+0x2ac>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d017      	beq.n	8009e40 <I2C_ITSlaveCplt+0x270>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a1a      	ldr	r2, [pc, #104]	; (8009e80 <I2C_ITSlaveCplt+0x2b0>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d011      	beq.n	8009e40 <I2C_ITSlaveCplt+0x270>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a18      	ldr	r2, [pc, #96]	; (8009e84 <I2C_ITSlaveCplt+0x2b4>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d00b      	beq.n	8009e40 <I2C_ITSlaveCplt+0x270>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a16      	ldr	r2, [pc, #88]	; (8009e88 <I2C_ITSlaveCplt+0x2b8>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d005      	beq.n	8009e40 <I2C_ITSlaveCplt+0x270>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a14      	ldr	r2, [pc, #80]	; (8009e8c <I2C_ITSlaveCplt+0x2bc>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d127      	bne.n	8009e90 <I2C_ITSlaveCplt+0x2c0>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	e026      	b.n	8009e9a <I2C_ITSlaveCplt+0x2ca>
 8009e4c:	fe00e800 	.word	0xfe00e800
 8009e50:	40020010 	.word	0x40020010
 8009e54:	40020028 	.word	0x40020028
 8009e58:	40020040 	.word	0x40020040
 8009e5c:	40020058 	.word	0x40020058
 8009e60:	40020070 	.word	0x40020070
 8009e64:	40020088 	.word	0x40020088
 8009e68:	400200a0 	.word	0x400200a0
 8009e6c:	400200b8 	.word	0x400200b8
 8009e70:	40020410 	.word	0x40020410
 8009e74:	40020428 	.word	0x40020428
 8009e78:	40020440 	.word	0x40020440
 8009e7c:	40020458 	.word	0x40020458
 8009e80:	40020470 	.word	0x40020470
 8009e84:	40020488 	.word	0x40020488
 8009e88:	400204a0 	.word	0x400204a0
 8009e8c:	400204b8 	.word	0x400204b8
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	089b      	lsrs	r3, r3, #2
 8009ea2:	f003 0301 	and.w	r3, r3, #1
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d020      	beq.n	8009eec <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	f023 0304 	bic.w	r3, r3, #4
 8009eb0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebc:	b2d2      	uxtb	r2, r2
 8009ebe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec4:	1c5a      	adds	r2, r3, #1
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00c      	beq.n	8009eec <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d005      	beq.n	8009f02 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009efa:	f043 0204 	orr.w	r2, r3, #4
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d010      	beq.n	8009f3a <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f8a4 	bl	800a06c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	2b28      	cmp	r3, #40	; 0x28
 8009f2e:	d141      	bne.n	8009fb4 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009f30:	6979      	ldr	r1, [r7, #20]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f844 	bl	8009fc0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009f38:	e03c      	b.n	8009fb4 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009f42:	d014      	beq.n	8009f6e <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f7ff fde5 	bl	8009b14 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a1b      	ldr	r2, [pc, #108]	; (8009fbc <I2C_ITSlaveCplt+0x3ec>)
 8009f4e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2220      	movs	r2, #32
 8009f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7ff fb6d 	bl	8009646 <HAL_I2C_ListenCpltCallback>
}
 8009f6c:	e022      	b.n	8009fb4 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	2b22      	cmp	r3, #34	; 0x22
 8009f78:	d10e      	bne.n	8009f98 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2220      	movs	r2, #32
 8009f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7ff fb40 	bl	8009616 <HAL_I2C_SlaveRxCpltCallback>
}
 8009f96:	e00d      	b.n	8009fb4 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2220      	movs	r2, #32
 8009f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7ff fb27 	bl	8009602 <HAL_I2C_SlaveTxCpltCallback>
}
 8009fb4:	bf00      	nop
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	ffff0000 	.word	0xffff0000

08009fc0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a26      	ldr	r2, [pc, #152]	; (800a068 <I2C_ITListenCplt+0xa8>)
 8009fce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2220      	movs	r2, #32
 8009fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	089b      	lsrs	r3, r3, #2
 8009ff0:	f003 0301 	and.w	r3, r3, #1
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d022      	beq.n	800a03e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a002:	b2d2      	uxtb	r2, r2
 800a004:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00a:	1c5a      	adds	r2, r3, #1
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a014:	2b00      	cmp	r3, #0
 800a016:	d012      	beq.n	800a03e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a01c:	3b01      	subs	r3, #1
 800a01e:	b29a      	uxth	r2, r3
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a028:	b29b      	uxth	r3, r3
 800a02a:	3b01      	subs	r3, #1
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a036:	f043 0204 	orr.w	r2, r3, #4
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a03e:	f248 0103 	movw	r1, #32771	; 0x8003
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 fb56 	bl	800a6f4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2210      	movs	r2, #16
 800a04e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f7ff faf4 	bl	8009646 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a05e:	bf00      	nop
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	ffff0000 	.word	0xffff0000

0800a06c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a07c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a6d      	ldr	r2, [pc, #436]	; (800a240 <I2C_ITError+0x1d4>)
 800a08a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	431a      	orrs	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
 800a0a0:	2b28      	cmp	r3, #40	; 0x28
 800a0a2:	d005      	beq.n	800a0b0 <I2C_ITError+0x44>
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
 800a0a6:	2b29      	cmp	r3, #41	; 0x29
 800a0a8:	d002      	beq.n	800a0b0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a0aa:	7bfb      	ldrb	r3, [r7, #15]
 800a0ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ae:	d10b      	bne.n	800a0c8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a0b0:	2103      	movs	r1, #3
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 fb1e 	bl	800a6f4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2228      	movs	r2, #40	; 0x28
 800a0bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4a60      	ldr	r2, [pc, #384]	; (800a244 <I2C_ITError+0x1d8>)
 800a0c4:	635a      	str	r2, [r3, #52]	; 0x34
 800a0c6:	e030      	b.n	800a12a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a0c8:	f248 0103 	movw	r1, #32771	; 0x8003
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 fb11 	bl	800a6f4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f8e1 	bl	800a29a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b60      	cmp	r3, #96	; 0x60
 800a0e2:	d01f      	beq.n	800a124 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2220      	movs	r2, #32
 800a0e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	f003 0320 	and.w	r3, r3, #32
 800a0f6:	2b20      	cmp	r3, #32
 800a0f8:	d114      	bne.n	800a124 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	f003 0310 	and.w	r3, r3, #16
 800a104:	2b10      	cmp	r3, #16
 800a106:	d109      	bne.n	800a11c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2210      	movs	r2, #16
 800a10e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a114:	f043 0204 	orr.w	r2, r3, #4
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2220      	movs	r2, #32
 800a122:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a134:	2b00      	cmp	r3, #0
 800a136:	d039      	beq.n	800a1ac <I2C_ITError+0x140>
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	2b11      	cmp	r3, #17
 800a13c:	d002      	beq.n	800a144 <I2C_ITError+0xd8>
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	2b21      	cmp	r3, #33	; 0x21
 800a142:	d133      	bne.n	800a1ac <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a14e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a152:	d107      	bne.n	800a164 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a162:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a168:	4618      	mov	r0, r3
 800a16a:	f7fd f90d 	bl	8007388 <HAL_DMA_GetState>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b01      	cmp	r3, #1
 800a172:	d017      	beq.n	800a1a4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a178:	4a33      	ldr	r2, [pc, #204]	; (800a248 <I2C_ITError+0x1dc>)
 800a17a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a188:	4618      	mov	r0, r3
 800a18a:	f7fb ff55 	bl	8006038 <HAL_DMA_Abort_IT>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d04d      	beq.n	800a230 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a19e:	4610      	mov	r0, r2
 800a1a0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a1a2:	e045      	b.n	800a230 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 f851 	bl	800a24c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a1aa:	e041      	b.n	800a230 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d039      	beq.n	800a228 <I2C_ITError+0x1bc>
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2b12      	cmp	r3, #18
 800a1b8:	d002      	beq.n	800a1c0 <I2C_ITError+0x154>
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	2b22      	cmp	r3, #34	; 0x22
 800a1be:	d133      	bne.n	800a228 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1ce:	d107      	bne.n	800a1e0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a1de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7fd f8cf 	bl	8007388 <HAL_DMA_GetState>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d017      	beq.n	800a220 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1f4:	4a14      	ldr	r2, [pc, #80]	; (800a248 <I2C_ITError+0x1dc>)
 800a1f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a204:	4618      	mov	r0, r3
 800a206:	f7fb ff17 	bl	8006038 <HAL_DMA_Abort_IT>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d011      	beq.n	800a234 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a21a:	4610      	mov	r0, r2
 800a21c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a21e:	e009      	b.n	800a234 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 f813 	bl	800a24c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a226:	e005      	b.n	800a234 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 f80f 	bl	800a24c <I2C_TreatErrorCallback>
  }
}
 800a22e:	e002      	b.n	800a236 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a230:	bf00      	nop
 800a232:	e000      	b.n	800a236 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a234:	bf00      	nop
}
 800a236:	bf00      	nop
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	ffff0000 	.word	0xffff0000
 800a244:	080096b7 	.word	0x080096b7
 800a248:	0800a2e3 	.word	0x0800a2e3

0800a24c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b60      	cmp	r3, #96	; 0x60
 800a25e:	d10e      	bne.n	800a27e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2220      	movs	r2, #32
 800a264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f7ff f9f9 	bl	800966e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a27c:	e009      	b.n	800a292 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f7ff f9e4 	bl	800965a <HAL_I2C_ErrorCallback>
}
 800a292:	bf00      	nop
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a29a:	b480      	push	{r7}
 800a29c:	b083      	sub	sp, #12
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	f003 0302 	and.w	r3, r3, #2
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d103      	bne.n	800a2b8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	699b      	ldr	r3, [r3, #24]
 800a2be:	f003 0301 	and.w	r3, r3, #1
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d007      	beq.n	800a2d6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	699a      	ldr	r2, [r3, #24]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f042 0201 	orr.w	r2, r2, #1
 800a2d4:	619a      	str	r2, [r3, #24]
  }
}
 800a2d6:	bf00      	nop
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b084      	sub	sp, #16
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ee:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d003      	beq.n	800a300 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a304:	2b00      	cmp	r3, #0
 800a306:	d003      	beq.n	800a310 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a30c:	2200      	movs	r2, #0
 800a30e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f7ff ff9b 	bl	800a24c <I2C_TreatErrorCallback>
}
 800a316:	bf00      	nop
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b084      	sub	sp, #16
 800a322:	af00      	add	r7, sp, #0
 800a324:	60f8      	str	r0, [r7, #12]
 800a326:	60b9      	str	r1, [r7, #8]
 800a328:	603b      	str	r3, [r7, #0]
 800a32a:	4613      	mov	r3, r2
 800a32c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a32e:	e031      	b.n	800a394 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a336:	d02d      	beq.n	800a394 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a338:	f7fa f986 	bl	8004648 <HAL_GetTick>
 800a33c:	4602      	mov	r2, r0
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	429a      	cmp	r2, r3
 800a346:	d302      	bcc.n	800a34e <I2C_WaitOnFlagUntilTimeout+0x30>
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d122      	bne.n	800a394 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	699a      	ldr	r2, [r3, #24]
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	4013      	ands	r3, r2
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	bf0c      	ite	eq
 800a35e:	2301      	moveq	r3, #1
 800a360:	2300      	movne	r3, #0
 800a362:	b2db      	uxtb	r3, r3
 800a364:	461a      	mov	r2, r3
 800a366:	79fb      	ldrb	r3, [r7, #7]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d113      	bne.n	800a394 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a370:	f043 0220 	orr.w	r2, r3, #32
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2220      	movs	r2, #32
 800a37c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	e00f      	b.n	800a3b4 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	699a      	ldr	r2, [r3, #24]
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	4013      	ands	r3, r2
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	bf0c      	ite	eq
 800a3a4:	2301      	moveq	r3, #1
 800a3a6:	2300      	movne	r3, #0
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	79fb      	ldrb	r3, [r7, #7]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d0be      	beq.n	800a330 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a3c8:	e033      	b.n	800a432 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	68b9      	ldr	r1, [r7, #8]
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f000 f87e 	bl	800a4d0 <I2C_IsErrorOccurred>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e031      	b.n	800a442 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3e4:	d025      	beq.n	800a432 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3e6:	f7fa f92f 	bl	8004648 <HAL_GetTick>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	1ad3      	subs	r3, r2, r3
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d302      	bcc.n	800a3fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d11a      	bne.n	800a432 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	f003 0302 	and.w	r3, r3, #2
 800a406:	2b02      	cmp	r3, #2
 800a408:	d013      	beq.n	800a432 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a40e:	f043 0220 	orr.w	r2, r3, #32
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2220      	movs	r2, #32
 800a41a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2200      	movs	r2, #0
 800a422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e007      	b.n	800a442 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	699b      	ldr	r3, [r3, #24]
 800a438:	f003 0302 	and.w	r3, r3, #2
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d1c4      	bne.n	800a3ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3710      	adds	r7, #16
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	60f8      	str	r0, [r7, #12]
 800a452:	60b9      	str	r1, [r7, #8]
 800a454:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a456:	e02f      	b.n	800a4b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	68b9      	ldr	r1, [r7, #8]
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f000 f837 	bl	800a4d0 <I2C_IsErrorOccurred>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e02d      	b.n	800a4c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a46c:	f7fa f8ec 	bl	8004648 <HAL_GetTick>
 800a470:	4602      	mov	r2, r0
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d302      	bcc.n	800a482 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d11a      	bne.n	800a4b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	f003 0320 	and.w	r3, r3, #32
 800a48c:	2b20      	cmp	r3, #32
 800a48e:	d013      	beq.n	800a4b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a494:	f043 0220 	orr.w	r2, r3, #32
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2220      	movs	r2, #32
 800a4a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e007      	b.n	800a4c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	699b      	ldr	r3, [r3, #24]
 800a4be:	f003 0320 	and.w	r3, r3, #32
 800a4c2:	2b20      	cmp	r3, #32
 800a4c4:	d1c8      	bne.n	800a458 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08a      	sub	sp, #40	; 0x28
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	699b      	ldr	r3, [r3, #24]
 800a4e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	f003 0310 	and.w	r3, r3, #16
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d068      	beq.n	800a5ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2210      	movs	r2, #16
 800a502:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a504:	e049      	b.n	800a59a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a50c:	d045      	beq.n	800a59a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a50e:	f7fa f89b 	bl	8004648 <HAL_GetTick>
 800a512:	4602      	mov	r2, r0
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d302      	bcc.n	800a524 <I2C_IsErrorOccurred+0x54>
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d13a      	bne.n	800a59a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a52e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a536:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a546:	d121      	bne.n	800a58c <I2C_IsErrorOccurred+0xbc>
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a54e:	d01d      	beq.n	800a58c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a550:	7cfb      	ldrb	r3, [r7, #19]
 800a552:	2b20      	cmp	r3, #32
 800a554:	d01a      	beq.n	800a58c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a564:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a566:	f7fa f86f 	bl	8004648 <HAL_GetTick>
 800a56a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a56c:	e00e      	b.n	800a58c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a56e:	f7fa f86b 	bl	8004648 <HAL_GetTick>
 800a572:	4602      	mov	r2, r0
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	1ad3      	subs	r3, r2, r3
 800a578:	2b19      	cmp	r3, #25
 800a57a:	d907      	bls.n	800a58c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a57c:	6a3b      	ldr	r3, [r7, #32]
 800a57e:	f043 0320 	orr.w	r3, r3, #32
 800a582:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800a58a:	e006      	b.n	800a59a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	f003 0320 	and.w	r3, r3, #32
 800a596:	2b20      	cmp	r3, #32
 800a598:	d1e9      	bne.n	800a56e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	f003 0320 	and.w	r3, r3, #32
 800a5a4:	2b20      	cmp	r3, #32
 800a5a6:	d003      	beq.n	800a5b0 <I2C_IsErrorOccurred+0xe0>
 800a5a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d0aa      	beq.n	800a506 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a5b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d103      	bne.n	800a5c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2220      	movs	r2, #32
 800a5be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a5c0:	6a3b      	ldr	r3, [r7, #32]
 800a5c2:	f043 0304 	orr.w	r3, r3, #4
 800a5c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00b      	beq.n	800a5f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a5e0:	6a3b      	ldr	r3, [r7, #32]
 800a5e2:	f043 0301 	orr.w	r3, r3, #1
 800a5e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00b      	beq.n	800a61a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a602:	6a3b      	ldr	r3, [r7, #32]
 800a604:	f043 0308 	orr.w	r3, r3, #8
 800a608:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a612:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00b      	beq.n	800a63c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a624:	6a3b      	ldr	r3, [r7, #32]
 800a626:	f043 0302 	orr.w	r3, r3, #2
 800a62a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a634:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a63c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a640:	2b00      	cmp	r3, #0
 800a642:	d01c      	beq.n	800a67e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f7ff fe28 	bl	800a29a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	6859      	ldr	r1, [r3, #4]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	4b0d      	ldr	r3, [pc, #52]	; (800a68c <I2C_IsErrorOccurred+0x1bc>)
 800a656:	400b      	ands	r3, r1
 800a658:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a65e:	6a3b      	ldr	r3, [r7, #32]
 800a660:	431a      	orrs	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2220      	movs	r2, #32
 800a66a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a67e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a682:	4618      	mov	r0, r3
 800a684:	3728      	adds	r7, #40	; 0x28
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	fe00e800 	.word	0xfe00e800

0800a690 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a690:	b480      	push	{r7}
 800a692:	b087      	sub	sp, #28
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	607b      	str	r3, [r7, #4]
 800a69a:	460b      	mov	r3, r1
 800a69c:	817b      	strh	r3, [r7, #10]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a6a2:	897b      	ldrh	r3, [r7, #10]
 800a6a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a6a8:	7a7b      	ldrb	r3, [r7, #9]
 800a6aa:	041b      	lsls	r3, r3, #16
 800a6ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a6b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a6b6:	6a3b      	ldr	r3, [r7, #32]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	685a      	ldr	r2, [r3, #4]
 800a6c6:	6a3b      	ldr	r3, [r7, #32]
 800a6c8:	0d5b      	lsrs	r3, r3, #21
 800a6ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a6ce:	4b08      	ldr	r3, [pc, #32]	; (800a6f0 <I2C_TransferConfig+0x60>)
 800a6d0:	430b      	orrs	r3, r1
 800a6d2:	43db      	mvns	r3, r3
 800a6d4:	ea02 0103 	and.w	r1, r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	697a      	ldr	r2, [r7, #20]
 800a6de:	430a      	orrs	r2, r1
 800a6e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a6e2:	bf00      	nop
 800a6e4:	371c      	adds	r7, #28
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	03ff63ff 	.word	0x03ff63ff

0800a6f4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a700:	2300      	movs	r3, #0
 800a702:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a704:	887b      	ldrh	r3, [r7, #2]
 800a706:	f003 0301 	and.w	r3, r3, #1
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00f      	beq.n	800a72e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800a714:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a722:	2b28      	cmp	r3, #40	; 0x28
 800a724:	d003      	beq.n	800a72e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a72c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a72e:	887b      	ldrh	r3, [r7, #2]
 800a730:	f003 0302 	and.w	r3, r3, #2
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00f      	beq.n	800a758 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a73e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a746:	b2db      	uxtb	r3, r3
 800a748:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a74c:	2b28      	cmp	r3, #40	; 0x28
 800a74e:	d003      	beq.n	800a758 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a756:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a758:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	da03      	bge.n	800a768 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a766:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a768:	887b      	ldrh	r3, [r7, #2]
 800a76a:	2b10      	cmp	r3, #16
 800a76c:	d103      	bne.n	800a776 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a774:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a776:	887b      	ldrh	r3, [r7, #2]
 800a778:	2b20      	cmp	r3, #32
 800a77a:	d103      	bne.n	800a784 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f043 0320 	orr.w	r3, r3, #32
 800a782:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a784:	887b      	ldrh	r3, [r7, #2]
 800a786:	2b40      	cmp	r3, #64	; 0x40
 800a788:	d103      	bne.n	800a792 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a790:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	6819      	ldr	r1, [r3, #0]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	43da      	mvns	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	400a      	ands	r2, r1
 800a7a2:	601a      	str	r2, [r3, #0]
}
 800a7a4:	bf00      	nop
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	2b20      	cmp	r3, #32
 800a7c4:	d138      	bne.n	800a838 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d101      	bne.n	800a7d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	e032      	b.n	800a83a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2224      	movs	r2, #36	; 0x24
 800a7e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f022 0201 	bic.w	r2, r2, #1
 800a7f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a802:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6819      	ldr	r1, [r3, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	430a      	orrs	r2, r1
 800a812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f042 0201 	orr.w	r2, r2, #1
 800a822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2220      	movs	r2, #32
 800a828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a834:	2300      	movs	r3, #0
 800a836:	e000      	b.n	800a83a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a838:	2302      	movs	r3, #2
  }
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	370c      	adds	r7, #12
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a846:	b480      	push	{r7}
 800a848:	b085      	sub	sp, #20
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
 800a84e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a856:	b2db      	uxtb	r3, r3
 800a858:	2b20      	cmp	r3, #32
 800a85a:	d139      	bne.n	800a8d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a862:	2b01      	cmp	r3, #1
 800a864:	d101      	bne.n	800a86a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a866:	2302      	movs	r3, #2
 800a868:	e033      	b.n	800a8d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2224      	movs	r2, #36	; 0x24
 800a876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f022 0201 	bic.w	r2, r2, #1
 800a888:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a898:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	021b      	lsls	r3, r3, #8
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f042 0201 	orr.w	r2, r2, #1
 800a8ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2220      	movs	r2, #32
 800a8c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	e000      	b.n	800a8d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a8d0:	2302      	movs	r3, #2
  }
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3714      	adds	r7, #20
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
	...

0800a8e0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d101      	bne.n	800a8f2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e0bf      	b.n	800aa72 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d106      	bne.n	800a90c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7f9 fb3e 	bl	8003f88 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2202      	movs	r2, #2
 800a910:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	699a      	ldr	r2, [r3, #24]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800a922:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	6999      	ldr	r1, [r3, #24]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685a      	ldr	r2, [r3, #4]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a938:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	430a      	orrs	r2, r1
 800a946:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	6899      	ldr	r1, [r3, #8]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	4b4a      	ldr	r3, [pc, #296]	; (800aa7c <HAL_LTDC_Init+0x19c>)
 800a954:	400b      	ands	r3, r1
 800a956:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	695b      	ldr	r3, [r3, #20]
 800a95c:	041b      	lsls	r3, r3, #16
 800a95e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6899      	ldr	r1, [r3, #8]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	699a      	ldr	r2, [r3, #24]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	431a      	orrs	r2, r3
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	430a      	orrs	r2, r1
 800a974:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68d9      	ldr	r1, [r3, #12]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	4b3e      	ldr	r3, [pc, #248]	; (800aa7c <HAL_LTDC_Init+0x19c>)
 800a982:	400b      	ands	r3, r1
 800a984:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	69db      	ldr	r3, [r3, #28]
 800a98a:	041b      	lsls	r3, r3, #16
 800a98c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	68d9      	ldr	r1, [r3, #12]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a1a      	ldr	r2, [r3, #32]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	431a      	orrs	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	430a      	orrs	r2, r1
 800a9a2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6919      	ldr	r1, [r3, #16]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	4b33      	ldr	r3, [pc, #204]	; (800aa7c <HAL_LTDC_Init+0x19c>)
 800a9b0:	400b      	ands	r3, r1
 800a9b2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b8:	041b      	lsls	r3, r3, #16
 800a9ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6919      	ldr	r1, [r3, #16]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	431a      	orrs	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	430a      	orrs	r2, r1
 800a9d0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	6959      	ldr	r1, [r3, #20]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	4b27      	ldr	r3, [pc, #156]	; (800aa7c <HAL_LTDC_Init+0x19c>)
 800a9de:	400b      	ands	r3, r1
 800a9e0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e6:	041b      	lsls	r3, r3, #16
 800a9e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	6959      	ldr	r1, [r3, #20]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	431a      	orrs	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	430a      	orrs	r2, r1
 800a9fe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa06:	021b      	lsls	r3, r3, #8
 800aa08:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800aa10:	041b      	lsls	r3, r3, #16
 800aa12:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800aa22:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800aa36:	431a      	orrs	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	430a      	orrs	r2, r1
 800aa3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f042 0206 	orr.w	r2, r2, #6
 800aa4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	699a      	ldr	r2, [r3, #24]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f042 0201 	orr.w	r2, r2, #1
 800aa5e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	f000f800 	.word	0xf000f800

0800aa80 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa96:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f003 0304 	and.w	r3, r3, #4
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d023      	beq.n	800aaea <HAL_LTDC_IRQHandler+0x6a>
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	f003 0304 	and.w	r3, r3, #4
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d01e      	beq.n	800aaea <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f022 0204 	bic.w	r2, r2, #4
 800aaba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2204      	movs	r2, #4
 800aac2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aaca:	f043 0201 	orr.w	r2, r3, #1
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2204      	movs	r2, #4
 800aad8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f86f 	bl	800abc8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f003 0302 	and.w	r3, r3, #2
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d023      	beq.n	800ab3c <HAL_LTDC_IRQHandler+0xbc>
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	f003 0302 	and.w	r3, r3, #2
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d01e      	beq.n	800ab3c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f022 0202 	bic.w	r2, r2, #2
 800ab0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2202      	movs	r2, #2
 800ab14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab1c:	f043 0202 	orr.w	r2, r3, #2
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2204      	movs	r2, #4
 800ab2a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f846 	bl	800abc8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f003 0301 	and.w	r3, r3, #1
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d01b      	beq.n	800ab7e <HAL_LTDC_IRQHandler+0xfe>
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	f003 0301 	and.w	r3, r3, #1
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d016      	beq.n	800ab7e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f022 0201 	bic.w	r2, r2, #1
 800ab5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2201      	movs	r2, #1
 800ab66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f82f 	bl	800abdc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f003 0308 	and.w	r3, r3, #8
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d01b      	beq.n	800abc0 <HAL_LTDC_IRQHandler+0x140>
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	f003 0308 	and.w	r3, r3, #8
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d016      	beq.n	800abc0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f022 0208 	bic.w	r2, r2, #8
 800aba0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2208      	movs	r2, #8
 800aba8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2201      	movs	r2, #1
 800abae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f818 	bl	800abf0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800abc0:	bf00      	nop
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800abd0:	bf00      	nop
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800abf8:	bf00      	nop
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ac04:	b5b0      	push	{r4, r5, r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d101      	bne.n	800ac1e <HAL_LTDC_ConfigLayer+0x1a>
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	e02c      	b.n	800ac78 <HAL_LTDC_ConfigLayer+0x74>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2202      	movs	r2, #2
 800ac2a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2134      	movs	r1, #52	; 0x34
 800ac34:	fb01 f303 	mul.w	r3, r1, r3
 800ac38:	4413      	add	r3, r2
 800ac3a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	4614      	mov	r4, r2
 800ac42:	461d      	mov	r5, r3
 800ac44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac50:	682b      	ldr	r3, [r5, #0]
 800ac52:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	68b9      	ldr	r1, [r7, #8]
 800ac58:	68f8      	ldr	r0, [r7, #12]
 800ac5a:	f000 f811 	bl	800ac80 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2201      	movs	r2, #1
 800ac64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3710      	adds	r7, #16
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bdb0      	pop	{r4, r5, r7, pc}

0800ac80 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b089      	sub	sp, #36	; 0x24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	685a      	ldr	r2, [r3, #4]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	0c1b      	lsrs	r3, r3, #16
 800ac98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac9c:	4413      	add	r3, r2
 800ac9e:	041b      	lsls	r3, r3, #16
 800aca0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	461a      	mov	r2, r3
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	01db      	lsls	r3, r3, #7
 800acac:	4413      	add	r3, r2
 800acae:	3384      	adds	r3, #132	; 0x84
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	68fa      	ldr	r2, [r7, #12]
 800acb4:	6812      	ldr	r2, [r2, #0]
 800acb6:	4611      	mov	r1, r2
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	01d2      	lsls	r2, r2, #7
 800acbc:	440a      	add	r2, r1
 800acbe:	3284      	adds	r2, #132	; 0x84
 800acc0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800acc4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	68db      	ldr	r3, [r3, #12]
 800acd0:	0c1b      	lsrs	r3, r3, #16
 800acd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800acd6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800acd8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4619      	mov	r1, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	01db      	lsls	r3, r3, #7
 800ace4:	440b      	add	r3, r1
 800ace6:	3384      	adds	r3, #132	; 0x84
 800ace8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800acee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	68da      	ldr	r2, [r3, #12]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800acfe:	4413      	add	r3, r2
 800ad00:	041b      	lsls	r3, r3, #16
 800ad02:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	461a      	mov	r2, r3
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	01db      	lsls	r3, r3, #7
 800ad0e:	4413      	add	r3, r2
 800ad10:	3384      	adds	r3, #132	; 0x84
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	6812      	ldr	r2, [r2, #0]
 800ad18:	4611      	mov	r1, r2
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	01d2      	lsls	r2, r2, #7
 800ad1e:	440a      	add	r2, r1
 800ad20:	3284      	adds	r2, #132	; 0x84
 800ad22:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800ad26:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	689a      	ldr	r2, [r3, #8]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad36:	4413      	add	r3, r2
 800ad38:	1c5a      	adds	r2, r3, #1
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4619      	mov	r1, r3
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	01db      	lsls	r3, r3, #7
 800ad44:	440b      	add	r3, r1
 800ad46:	3384      	adds	r3, #132	; 0x84
 800ad48:	4619      	mov	r1, r3
 800ad4a:	69fb      	ldr	r3, [r7, #28]
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	461a      	mov	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	01db      	lsls	r3, r3, #7
 800ad5a:	4413      	add	r3, r2
 800ad5c:	3384      	adds	r3, #132	; 0x84
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	6812      	ldr	r2, [r2, #0]
 800ad64:	4611      	mov	r1, r2
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	01d2      	lsls	r2, r2, #7
 800ad6a:	440a      	add	r2, r1
 800ad6c:	3284      	adds	r2, #132	; 0x84
 800ad6e:	f023 0307 	bic.w	r3, r3, #7
 800ad72:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	461a      	mov	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	01db      	lsls	r3, r3, #7
 800ad7e:	4413      	add	r3, r2
 800ad80:	3384      	adds	r3, #132	; 0x84
 800ad82:	461a      	mov	r2, r3
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad90:	021b      	lsls	r3, r3, #8
 800ad92:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ad9a:	041b      	lsls	r3, r3, #16
 800ad9c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	699b      	ldr	r3, [r3, #24]
 800ada2:	061b      	lsls	r3, r3, #24
 800ada4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	461a      	mov	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	01db      	lsls	r3, r3, #7
 800adb0:	4413      	add	r3, r2
 800adb2:	3384      	adds	r3, #132	; 0x84
 800adb4:	699b      	ldr	r3, [r3, #24]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	461a      	mov	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	01db      	lsls	r3, r3, #7
 800adc0:	4413      	add	r3, r2
 800adc2:	3384      	adds	r3, #132	; 0x84
 800adc4:	461a      	mov	r2, r3
 800adc6:	2300      	movs	r3, #0
 800adc8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800add0:	461a      	mov	r2, r3
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	431a      	orrs	r2, r3
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	431a      	orrs	r2, r3
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4619      	mov	r1, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	01db      	lsls	r3, r3, #7
 800ade4:	440b      	add	r3, r1
 800ade6:	3384      	adds	r3, #132	; 0x84
 800ade8:	4619      	mov	r1, r3
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	4313      	orrs	r3, r2
 800adee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	461a      	mov	r2, r3
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	01db      	lsls	r3, r3, #7
 800adfa:	4413      	add	r3, r2
 800adfc:	3384      	adds	r3, #132	; 0x84
 800adfe:	695b      	ldr	r3, [r3, #20]
 800ae00:	68fa      	ldr	r2, [r7, #12]
 800ae02:	6812      	ldr	r2, [r2, #0]
 800ae04:	4611      	mov	r1, r2
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	01d2      	lsls	r2, r2, #7
 800ae0a:	440a      	add	r2, r1
 800ae0c:	3284      	adds	r2, #132	; 0x84
 800ae0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ae12:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	01db      	lsls	r3, r3, #7
 800ae1e:	4413      	add	r3, r2
 800ae20:	3384      	adds	r3, #132	; 0x84
 800ae22:	461a      	mov	r2, r3
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	695b      	ldr	r3, [r3, #20]
 800ae28:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	461a      	mov	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	01db      	lsls	r3, r3, #7
 800ae34:	4413      	add	r3, r2
 800ae36:	3384      	adds	r3, #132	; 0x84
 800ae38:	69da      	ldr	r2, [r3, #28]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	01db      	lsls	r3, r3, #7
 800ae44:	440b      	add	r3, r1
 800ae46:	3384      	adds	r3, #132	; 0x84
 800ae48:	4619      	mov	r1, r3
 800ae4a:	4b58      	ldr	r3, [pc, #352]	; (800afac <LTDC_SetConfig+0x32c>)
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	69da      	ldr	r2, [r3, #28]
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	6a1b      	ldr	r3, [r3, #32]
 800ae58:	68f9      	ldr	r1, [r7, #12]
 800ae5a:	6809      	ldr	r1, [r1, #0]
 800ae5c:	4608      	mov	r0, r1
 800ae5e:	6879      	ldr	r1, [r7, #4]
 800ae60:	01c9      	lsls	r1, r1, #7
 800ae62:	4401      	add	r1, r0
 800ae64:	3184      	adds	r1, #132	; 0x84
 800ae66:	4313      	orrs	r3, r2
 800ae68:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	461a      	mov	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	01db      	lsls	r3, r3, #7
 800ae74:	4413      	add	r3, r2
 800ae76:	3384      	adds	r3, #132	; 0x84
 800ae78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	461a      	mov	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	01db      	lsls	r3, r3, #7
 800ae84:	4413      	add	r3, r2
 800ae86:	3384      	adds	r3, #132	; 0x84
 800ae88:	461a      	mov	r2, r3
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	461a      	mov	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	01db      	lsls	r3, r3, #7
 800ae98:	4413      	add	r3, r2
 800ae9a:	3384      	adds	r3, #132	; 0x84
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d102      	bne.n	800aeb2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800aeac:	2304      	movs	r3, #4
 800aeae:	61fb      	str	r3, [r7, #28]
 800aeb0:	e01b      	b.n	800aeea <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d102      	bne.n	800aec0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800aeba:	2303      	movs	r3, #3
 800aebc:	61fb      	str	r3, [r7, #28]
 800aebe:	e014      	b.n	800aeea <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	691b      	ldr	r3, [r3, #16]
 800aec4:	2b04      	cmp	r3, #4
 800aec6:	d00b      	beq.n	800aee0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d007      	beq.n	800aee0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800aed4:	2b03      	cmp	r3, #3
 800aed6:	d003      	beq.n	800aee0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800aedc:	2b07      	cmp	r3, #7
 800aede:	d102      	bne.n	800aee6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800aee0:	2302      	movs	r3, #2
 800aee2:	61fb      	str	r3, [r7, #28]
 800aee4:	e001      	b.n	800aeea <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800aee6:	2301      	movs	r3, #1
 800aee8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	461a      	mov	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	01db      	lsls	r3, r3, #7
 800aef4:	4413      	add	r3, r2
 800aef6:	3384      	adds	r3, #132	; 0x84
 800aef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefa:	68fa      	ldr	r2, [r7, #12]
 800aefc:	6812      	ldr	r2, [r2, #0]
 800aefe:	4611      	mov	r1, r2
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	01d2      	lsls	r2, r2, #7
 800af04:	440a      	add	r2, r1
 800af06:	3284      	adds	r2, #132	; 0x84
 800af08:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800af0c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af12:	69fa      	ldr	r2, [r7, #28]
 800af14:	fb02 f303 	mul.w	r3, r2, r3
 800af18:	041a      	lsls	r2, r3, #16
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	6859      	ldr	r1, [r3, #4]
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	1acb      	subs	r3, r1, r3
 800af24:	69f9      	ldr	r1, [r7, #28]
 800af26:	fb01 f303 	mul.w	r3, r1, r3
 800af2a:	3307      	adds	r3, #7
 800af2c:	68f9      	ldr	r1, [r7, #12]
 800af2e:	6809      	ldr	r1, [r1, #0]
 800af30:	4608      	mov	r0, r1
 800af32:	6879      	ldr	r1, [r7, #4]
 800af34:	01c9      	lsls	r1, r1, #7
 800af36:	4401      	add	r1, r0
 800af38:	3184      	adds	r1, #132	; 0x84
 800af3a:	4313      	orrs	r3, r2
 800af3c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	461a      	mov	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	01db      	lsls	r3, r3, #7
 800af48:	4413      	add	r3, r2
 800af4a:	3384      	adds	r3, #132	; 0x84
 800af4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4619      	mov	r1, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	01db      	lsls	r3, r3, #7
 800af58:	440b      	add	r3, r1
 800af5a:	3384      	adds	r3, #132	; 0x84
 800af5c:	4619      	mov	r1, r3
 800af5e:	4b14      	ldr	r3, [pc, #80]	; (800afb0 <LTDC_SetConfig+0x330>)
 800af60:	4013      	ands	r3, r2
 800af62:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	461a      	mov	r2, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	01db      	lsls	r3, r3, #7
 800af6e:	4413      	add	r3, r2
 800af70:	3384      	adds	r3, #132	; 0x84
 800af72:	461a      	mov	r2, r3
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af78:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	461a      	mov	r2, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	01db      	lsls	r3, r3, #7
 800af84:	4413      	add	r3, r2
 800af86:	3384      	adds	r3, #132	; 0x84
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	6812      	ldr	r2, [r2, #0]
 800af8e:	4611      	mov	r1, r2
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	01d2      	lsls	r2, r2, #7
 800af94:	440a      	add	r2, r1
 800af96:	3284      	adds	r2, #132	; 0x84
 800af98:	f043 0301 	orr.w	r3, r3, #1
 800af9c:	6013      	str	r3, [r2, #0]
}
 800af9e:	bf00      	nop
 800afa0:	3724      	adds	r7, #36	; 0x24
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	fffff8f8 	.word	0xfffff8f8
 800afb0:	fffff800 	.word	0xfffff800

0800afb4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800afb4:	b480      	push	{r7}
 800afb6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800afb8:	4b05      	ldr	r3, [pc, #20]	; (800afd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a04      	ldr	r2, [pc, #16]	; (800afd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800afbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afc2:	6013      	str	r3, [r2, #0]
}
 800afc4:	bf00      	nop
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	58024800 	.word	0x58024800

0800afd4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800afdc:	4b29      	ldr	r3, [pc, #164]	; (800b084 <HAL_PWREx_ConfigSupply+0xb0>)
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	f003 0307 	and.w	r3, r3, #7
 800afe4:	2b06      	cmp	r3, #6
 800afe6:	d00a      	beq.n	800affe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800afe8:	4b26      	ldr	r3, [pc, #152]	; (800b084 <HAL_PWREx_ConfigSupply+0xb0>)
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d001      	beq.n	800affa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e040      	b.n	800b07c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800affa:	2300      	movs	r3, #0
 800affc:	e03e      	b.n	800b07c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800affe:	4b21      	ldr	r3, [pc, #132]	; (800b084 <HAL_PWREx_ConfigSupply+0xb0>)
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800b006:	491f      	ldr	r1, [pc, #124]	; (800b084 <HAL_PWREx_ConfigSupply+0xb0>)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b00e:	f7f9 fb1b 	bl	8004648 <HAL_GetTick>
 800b012:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b014:	e009      	b.n	800b02a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b016:	f7f9 fb17 	bl	8004648 <HAL_GetTick>
 800b01a:	4602      	mov	r2, r0
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b024:	d901      	bls.n	800b02a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b026:	2301      	movs	r3, #1
 800b028:	e028      	b.n	800b07c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b02a:	4b16      	ldr	r3, [pc, #88]	; (800b084 <HAL_PWREx_ConfigSupply+0xb0>)
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b036:	d1ee      	bne.n	800b016 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b1e      	cmp	r3, #30
 800b03c:	d008      	beq.n	800b050 <HAL_PWREx_ConfigSupply+0x7c>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2b2e      	cmp	r3, #46	; 0x2e
 800b042:	d005      	beq.n	800b050 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b1d      	cmp	r3, #29
 800b048:	d002      	beq.n	800b050 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2b2d      	cmp	r3, #45	; 0x2d
 800b04e:	d114      	bne.n	800b07a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800b050:	f7f9 fafa 	bl	8004648 <HAL_GetTick>
 800b054:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b056:	e009      	b.n	800b06c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b058:	f7f9 faf6 	bl	8004648 <HAL_GetTick>
 800b05c:	4602      	mov	r2, r0
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	1ad3      	subs	r3, r2, r3
 800b062:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b066:	d901      	bls.n	800b06c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	e007      	b.n	800b07c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b06c:	4b05      	ldr	r3, [pc, #20]	; (800b084 <HAL_PWREx_ConfigSupply+0xb0>)
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b078:	d1ee      	bne.n	800b058 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3710      	adds	r7, #16
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	58024800 	.word	0x58024800

0800b088 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b08c      	sub	sp, #48	; 0x30
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d102      	bne.n	800b09c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	f000 bc1f 	b.w	800b8da <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f003 0301 	and.w	r3, r3, #1
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 80b3 	beq.w	800b210 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b0aa:	4b95      	ldr	r3, [pc, #596]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b0b4:	4b92      	ldr	r3, [pc, #584]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0bc:	2b10      	cmp	r3, #16
 800b0be:	d007      	beq.n	800b0d0 <HAL_RCC_OscConfig+0x48>
 800b0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c2:	2b18      	cmp	r3, #24
 800b0c4:	d112      	bne.n	800b0ec <HAL_RCC_OscConfig+0x64>
 800b0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c8:	f003 0303 	and.w	r3, r3, #3
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d10d      	bne.n	800b0ec <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b0d0:	4b8b      	ldr	r3, [pc, #556]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f000 8098 	beq.w	800b20e <HAL_RCC_OscConfig+0x186>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f040 8093 	bne.w	800b20e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	e3f6      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0f4:	d106      	bne.n	800b104 <HAL_RCC_OscConfig+0x7c>
 800b0f6:	4b82      	ldr	r3, [pc, #520]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a81      	ldr	r2, [pc, #516]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b0fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b100:	6013      	str	r3, [r2, #0]
 800b102:	e058      	b.n	800b1b6 <HAL_RCC_OscConfig+0x12e>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d112      	bne.n	800b132 <HAL_RCC_OscConfig+0xaa>
 800b10c:	4b7c      	ldr	r3, [pc, #496]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a7b      	ldr	r2, [pc, #492]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b116:	6013      	str	r3, [r2, #0]
 800b118:	4b79      	ldr	r3, [pc, #484]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a78      	ldr	r2, [pc, #480]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b11e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b122:	6013      	str	r3, [r2, #0]
 800b124:	4b76      	ldr	r3, [pc, #472]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a75      	ldr	r2, [pc, #468]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b12a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b12e:	6013      	str	r3, [r2, #0]
 800b130:	e041      	b.n	800b1b6 <HAL_RCC_OscConfig+0x12e>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b13a:	d112      	bne.n	800b162 <HAL_RCC_OscConfig+0xda>
 800b13c:	4b70      	ldr	r3, [pc, #448]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a6f      	ldr	r2, [pc, #444]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b142:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b146:	6013      	str	r3, [r2, #0]
 800b148:	4b6d      	ldr	r3, [pc, #436]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a6c      	ldr	r2, [pc, #432]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b14e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b152:	6013      	str	r3, [r2, #0]
 800b154:	4b6a      	ldr	r3, [pc, #424]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a69      	ldr	r2, [pc, #420]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b15a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b15e:	6013      	str	r3, [r2, #0]
 800b160:	e029      	b.n	800b1b6 <HAL_RCC_OscConfig+0x12e>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800b16a:	d112      	bne.n	800b192 <HAL_RCC_OscConfig+0x10a>
 800b16c:	4b64      	ldr	r3, [pc, #400]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a63      	ldr	r2, [pc, #396]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b172:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b176:	6013      	str	r3, [r2, #0]
 800b178:	4b61      	ldr	r3, [pc, #388]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a60      	ldr	r2, [pc, #384]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b17e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b182:	6013      	str	r3, [r2, #0]
 800b184:	4b5e      	ldr	r3, [pc, #376]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a5d      	ldr	r2, [pc, #372]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b18a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b18e:	6013      	str	r3, [r2, #0]
 800b190:	e011      	b.n	800b1b6 <HAL_RCC_OscConfig+0x12e>
 800b192:	4b5b      	ldr	r3, [pc, #364]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a5a      	ldr	r2, [pc, #360]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b19c:	6013      	str	r3, [r2, #0]
 800b19e:	4b58      	ldr	r3, [pc, #352]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a57      	ldr	r2, [pc, #348]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b1a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1a8:	6013      	str	r3, [r2, #0]
 800b1aa:	4b55      	ldr	r3, [pc, #340]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a54      	ldr	r2, [pc, #336]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b1b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b1b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d013      	beq.n	800b1e6 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1be:	f7f9 fa43 	bl	8004648 <HAL_GetTick>
 800b1c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b1c4:	e008      	b.n	800b1d8 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1c6:	f7f9 fa3f 	bl	8004648 <HAL_GetTick>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	2b64      	cmp	r3, #100	; 0x64
 800b1d2:	d901      	bls.n	800b1d8 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800b1d4:	2303      	movs	r3, #3
 800b1d6:	e380      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b1d8:	4b49      	ldr	r3, [pc, #292]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d0f0      	beq.n	800b1c6 <HAL_RCC_OscConfig+0x13e>
 800b1e4:	e014      	b.n	800b210 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1e6:	f7f9 fa2f 	bl	8004648 <HAL_GetTick>
 800b1ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b1ec:	e008      	b.n	800b200 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b1ee:	f7f9 fa2b 	bl	8004648 <HAL_GetTick>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f6:	1ad3      	subs	r3, r2, r3
 800b1f8:	2b64      	cmp	r3, #100	; 0x64
 800b1fa:	d901      	bls.n	800b200 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	e36c      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b200:	4b3f      	ldr	r3, [pc, #252]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d1f0      	bne.n	800b1ee <HAL_RCC_OscConfig+0x166>
 800b20c:	e000      	b.n	800b210 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b20e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 0302 	and.w	r3, r3, #2
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f000 808c 	beq.w	800b336 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b21e:	4b38      	ldr	r3, [pc, #224]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b226:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b228:	4b35      	ldr	r3, [pc, #212]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b22c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b22e:	6a3b      	ldr	r3, [r7, #32]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d007      	beq.n	800b244 <HAL_RCC_OscConfig+0x1bc>
 800b234:	6a3b      	ldr	r3, [r7, #32]
 800b236:	2b18      	cmp	r3, #24
 800b238:	d137      	bne.n	800b2aa <HAL_RCC_OscConfig+0x222>
 800b23a:	69fb      	ldr	r3, [r7, #28]
 800b23c:	f003 0303 	and.w	r3, r3, #3
 800b240:	2b00      	cmp	r3, #0
 800b242:	d132      	bne.n	800b2aa <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b244:	4b2e      	ldr	r3, [pc, #184]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f003 0304 	and.w	r3, r3, #4
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d005      	beq.n	800b25c <HAL_RCC_OscConfig+0x1d4>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d101      	bne.n	800b25c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	e33e      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b25c:	4b28      	ldr	r3, [pc, #160]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f023 0219 	bic.w	r2, r3, #25
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	4925      	ldr	r1, [pc, #148]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b26a:	4313      	orrs	r3, r2
 800b26c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b26e:	f7f9 f9eb 	bl	8004648 <HAL_GetTick>
 800b272:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b274:	e008      	b.n	800b288 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b276:	f7f9 f9e7 	bl	8004648 <HAL_GetTick>
 800b27a:	4602      	mov	r2, r0
 800b27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27e:	1ad3      	subs	r3, r2, r3
 800b280:	2b02      	cmp	r3, #2
 800b282:	d901      	bls.n	800b288 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800b284:	2303      	movs	r3, #3
 800b286:	e328      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b288:	4b1d      	ldr	r3, [pc, #116]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f003 0304 	and.w	r3, r3, #4
 800b290:	2b00      	cmp	r3, #0
 800b292:	d0f0      	beq.n	800b276 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b294:	4b1a      	ldr	r3, [pc, #104]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	061b      	lsls	r3, r3, #24
 800b2a2:	4917      	ldr	r1, [pc, #92]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b2a8:	e045      	b.n	800b336 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d028      	beq.n	800b304 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b2b2:	4b13      	ldr	r3, [pc, #76]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f023 0219 	bic.w	r2, r3, #25
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	68db      	ldr	r3, [r3, #12]
 800b2be:	4910      	ldr	r1, [pc, #64]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2c4:	f7f9 f9c0 	bl	8004648 <HAL_GetTick>
 800b2c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b2ca:	e008      	b.n	800b2de <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2cc:	f7f9 f9bc 	bl	8004648 <HAL_GetTick>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d4:	1ad3      	subs	r3, r2, r3
 800b2d6:	2b02      	cmp	r3, #2
 800b2d8:	d901      	bls.n	800b2de <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800b2da:	2303      	movs	r3, #3
 800b2dc:	e2fd      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b2de:	4b08      	ldr	r3, [pc, #32]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f003 0304 	and.w	r3, r3, #4
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d0f0      	beq.n	800b2cc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2ea:	4b05      	ldr	r3, [pc, #20]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	061b      	lsls	r3, r3, #24
 800b2f8:	4901      	ldr	r1, [pc, #4]	; (800b300 <HAL_RCC_OscConfig+0x278>)
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	604b      	str	r3, [r1, #4]
 800b2fe:	e01a      	b.n	800b336 <HAL_RCC_OscConfig+0x2ae>
 800b300:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b304:	4b97      	ldr	r3, [pc, #604]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a96      	ldr	r2, [pc, #600]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b30a:	f023 0301 	bic.w	r3, r3, #1
 800b30e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b310:	f7f9 f99a 	bl	8004648 <HAL_GetTick>
 800b314:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b316:	e008      	b.n	800b32a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b318:	f7f9 f996 	bl	8004648 <HAL_GetTick>
 800b31c:	4602      	mov	r2, r0
 800b31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	2b02      	cmp	r3, #2
 800b324:	d901      	bls.n	800b32a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800b326:	2303      	movs	r3, #3
 800b328:	e2d7      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b32a:	4b8e      	ldr	r3, [pc, #568]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f003 0304 	and.w	r3, r3, #4
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1f0      	bne.n	800b318 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f003 0310 	and.w	r3, r3, #16
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d06a      	beq.n	800b418 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b342:	4b88      	ldr	r3, [pc, #544]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b344:	691b      	ldr	r3, [r3, #16]
 800b346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b34a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b34c:	4b85      	ldr	r3, [pc, #532]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b350:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	2b08      	cmp	r3, #8
 800b356:	d007      	beq.n	800b368 <HAL_RCC_OscConfig+0x2e0>
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	2b18      	cmp	r3, #24
 800b35c:	d11b      	bne.n	800b396 <HAL_RCC_OscConfig+0x30e>
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	f003 0303 	and.w	r3, r3, #3
 800b364:	2b01      	cmp	r3, #1
 800b366:	d116      	bne.n	800b396 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b368:	4b7e      	ldr	r3, [pc, #504]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b370:	2b00      	cmp	r3, #0
 800b372:	d005      	beq.n	800b380 <HAL_RCC_OscConfig+0x2f8>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	69db      	ldr	r3, [r3, #28]
 800b378:	2b80      	cmp	r3, #128	; 0x80
 800b37a:	d001      	beq.n	800b380 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	e2ac      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b380:	4b78      	ldr	r3, [pc, #480]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a1b      	ldr	r3, [r3, #32]
 800b38c:	061b      	lsls	r3, r3, #24
 800b38e:	4975      	ldr	r1, [pc, #468]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b390:	4313      	orrs	r3, r2
 800b392:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b394:	e040      	b.n	800b418 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	69db      	ldr	r3, [r3, #28]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d023      	beq.n	800b3e6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b39e:	4b71      	ldr	r3, [pc, #452]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a70      	ldr	r2, [pc, #448]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b3a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3aa:	f7f9 f94d 	bl	8004648 <HAL_GetTick>
 800b3ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b3b0:	e008      	b.n	800b3c4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b3b2:	f7f9 f949 	bl	8004648 <HAL_GetTick>
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ba:	1ad3      	subs	r3, r2, r3
 800b3bc:	2b02      	cmp	r3, #2
 800b3be:	d901      	bls.n	800b3c4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800b3c0:	2303      	movs	r3, #3
 800b3c2:	e28a      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b3c4:	4b67      	ldr	r3, [pc, #412]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d0f0      	beq.n	800b3b2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b3d0:	4b64      	ldr	r3, [pc, #400]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6a1b      	ldr	r3, [r3, #32]
 800b3dc:	061b      	lsls	r3, r3, #24
 800b3de:	4961      	ldr	r1, [pc, #388]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	60cb      	str	r3, [r1, #12]
 800b3e4:	e018      	b.n	800b418 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b3e6:	4b5f      	ldr	r3, [pc, #380]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a5e      	ldr	r2, [pc, #376]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b3ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3f2:	f7f9 f929 	bl	8004648 <HAL_GetTick>
 800b3f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b3f8:	e008      	b.n	800b40c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b3fa:	f7f9 f925 	bl	8004648 <HAL_GetTick>
 800b3fe:	4602      	mov	r2, r0
 800b400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	2b02      	cmp	r3, #2
 800b406:	d901      	bls.n	800b40c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800b408:	2303      	movs	r3, #3
 800b40a:	e266      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b40c:	4b55      	ldr	r3, [pc, #340]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1f0      	bne.n	800b3fa <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f003 0308 	and.w	r3, r3, #8
 800b420:	2b00      	cmp	r3, #0
 800b422:	d036      	beq.n	800b492 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	695b      	ldr	r3, [r3, #20]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d019      	beq.n	800b460 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b42c:	4b4d      	ldr	r3, [pc, #308]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b42e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b430:	4a4c      	ldr	r2, [pc, #304]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b432:	f043 0301 	orr.w	r3, r3, #1
 800b436:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b438:	f7f9 f906 	bl	8004648 <HAL_GetTick>
 800b43c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b43e:	e008      	b.n	800b452 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b440:	f7f9 f902 	bl	8004648 <HAL_GetTick>
 800b444:	4602      	mov	r2, r0
 800b446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	2b02      	cmp	r3, #2
 800b44c:	d901      	bls.n	800b452 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800b44e:	2303      	movs	r3, #3
 800b450:	e243      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b452:	4b44      	ldr	r3, [pc, #272]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b456:	f003 0302 	and.w	r3, r3, #2
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d0f0      	beq.n	800b440 <HAL_RCC_OscConfig+0x3b8>
 800b45e:	e018      	b.n	800b492 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b460:	4b40      	ldr	r3, [pc, #256]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b464:	4a3f      	ldr	r2, [pc, #252]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b466:	f023 0301 	bic.w	r3, r3, #1
 800b46a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b46c:	f7f9 f8ec 	bl	8004648 <HAL_GetTick>
 800b470:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b472:	e008      	b.n	800b486 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b474:	f7f9 f8e8 	bl	8004648 <HAL_GetTick>
 800b478:	4602      	mov	r2, r0
 800b47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47c:	1ad3      	subs	r3, r2, r3
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d901      	bls.n	800b486 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b482:	2303      	movs	r3, #3
 800b484:	e229      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b486:	4b37      	ldr	r3, [pc, #220]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b48a:	f003 0302 	and.w	r3, r3, #2
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1f0      	bne.n	800b474 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 0320 	and.w	r3, r3, #32
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d036      	beq.n	800b50c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	699b      	ldr	r3, [r3, #24]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d019      	beq.n	800b4da <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b4a6:	4b2f      	ldr	r3, [pc, #188]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a2e      	ldr	r2, [pc, #184]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b4ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b4b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b4b2:	f7f9 f8c9 	bl	8004648 <HAL_GetTick>
 800b4b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b4b8:	e008      	b.n	800b4cc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b4ba:	f7f9 f8c5 	bl	8004648 <HAL_GetTick>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c2:	1ad3      	subs	r3, r2, r3
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d901      	bls.n	800b4cc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	e206      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b4cc:	4b25      	ldr	r3, [pc, #148]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d0f0      	beq.n	800b4ba <HAL_RCC_OscConfig+0x432>
 800b4d8:	e018      	b.n	800b50c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b4da:	4b22      	ldr	r3, [pc, #136]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a21      	ldr	r2, [pc, #132]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b4e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b4e6:	f7f9 f8af 	bl	8004648 <HAL_GetTick>
 800b4ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b4ec:	e008      	b.n	800b500 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b4ee:	f7f9 f8ab 	bl	8004648 <HAL_GetTick>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f6:	1ad3      	subs	r3, r2, r3
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	d901      	bls.n	800b500 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e1ec      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b500:	4b18      	ldr	r3, [pc, #96]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d1f0      	bne.n	800b4ee <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f003 0304 	and.w	r3, r3, #4
 800b514:	2b00      	cmp	r3, #0
 800b516:	f000 80af 	beq.w	800b678 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b51a:	4b13      	ldr	r3, [pc, #76]	; (800b568 <HAL_RCC_OscConfig+0x4e0>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a12      	ldr	r2, [pc, #72]	; (800b568 <HAL_RCC_OscConfig+0x4e0>)
 800b520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b524:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b526:	f7f9 f88f 	bl	8004648 <HAL_GetTick>
 800b52a:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b52c:	e008      	b.n	800b540 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b52e:	f7f9 f88b 	bl	8004648 <HAL_GetTick>
 800b532:	4602      	mov	r2, r0
 800b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b536:	1ad3      	subs	r3, r2, r3
 800b538:	2b64      	cmp	r3, #100	; 0x64
 800b53a:	d901      	bls.n	800b540 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800b53c:	2303      	movs	r3, #3
 800b53e:	e1cc      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b540:	4b09      	ldr	r3, [pc, #36]	; (800b568 <HAL_RCC_OscConfig+0x4e0>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d0f0      	beq.n	800b52e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	2b01      	cmp	r3, #1
 800b552:	d10b      	bne.n	800b56c <HAL_RCC_OscConfig+0x4e4>
 800b554:	4b03      	ldr	r3, [pc, #12]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b558:	4a02      	ldr	r2, [pc, #8]	; (800b564 <HAL_RCC_OscConfig+0x4dc>)
 800b55a:	f043 0301 	orr.w	r3, r3, #1
 800b55e:	6713      	str	r3, [r2, #112]	; 0x70
 800b560:	e05b      	b.n	800b61a <HAL_RCC_OscConfig+0x592>
 800b562:	bf00      	nop
 800b564:	58024400 	.word	0x58024400
 800b568:	58024800 	.word	0x58024800
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d112      	bne.n	800b59a <HAL_RCC_OscConfig+0x512>
 800b574:	4b9d      	ldr	r3, [pc, #628]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b578:	4a9c      	ldr	r2, [pc, #624]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b57a:	f023 0301 	bic.w	r3, r3, #1
 800b57e:	6713      	str	r3, [r2, #112]	; 0x70
 800b580:	4b9a      	ldr	r3, [pc, #616]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b584:	4a99      	ldr	r2, [pc, #612]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b58a:	6713      	str	r3, [r2, #112]	; 0x70
 800b58c:	4b97      	ldr	r3, [pc, #604]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b58e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b590:	4a96      	ldr	r2, [pc, #600]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b592:	f023 0304 	bic.w	r3, r3, #4
 800b596:	6713      	str	r3, [r2, #112]	; 0x70
 800b598:	e03f      	b.n	800b61a <HAL_RCC_OscConfig+0x592>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	2b05      	cmp	r3, #5
 800b5a0:	d112      	bne.n	800b5c8 <HAL_RCC_OscConfig+0x540>
 800b5a2:	4b92      	ldr	r3, [pc, #584]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b5a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5a6:	4a91      	ldr	r2, [pc, #580]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b5a8:	f043 0304 	orr.w	r3, r3, #4
 800b5ac:	6713      	str	r3, [r2, #112]	; 0x70
 800b5ae:	4b8f      	ldr	r3, [pc, #572]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5b2:	4a8e      	ldr	r2, [pc, #568]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b5b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5b8:	6713      	str	r3, [r2, #112]	; 0x70
 800b5ba:	4b8c      	ldr	r3, [pc, #560]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5be:	4a8b      	ldr	r2, [pc, #556]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b5c0:	f043 0301 	orr.w	r3, r3, #1
 800b5c4:	6713      	str	r3, [r2, #112]	; 0x70
 800b5c6:	e028      	b.n	800b61a <HAL_RCC_OscConfig+0x592>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	2b85      	cmp	r3, #133	; 0x85
 800b5ce:	d112      	bne.n	800b5f6 <HAL_RCC_OscConfig+0x56e>
 800b5d0:	4b86      	ldr	r3, [pc, #536]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b5d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5d4:	4a85      	ldr	r2, [pc, #532]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b5d6:	f043 0304 	orr.w	r3, r3, #4
 800b5da:	6713      	str	r3, [r2, #112]	; 0x70
 800b5dc:	4b83      	ldr	r3, [pc, #524]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b5de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5e0:	4a82      	ldr	r2, [pc, #520]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b5e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5e6:	6713      	str	r3, [r2, #112]	; 0x70
 800b5e8:	4b80      	ldr	r3, [pc, #512]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b5ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ec:	4a7f      	ldr	r2, [pc, #508]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b5ee:	f043 0301 	orr.w	r3, r3, #1
 800b5f2:	6713      	str	r3, [r2, #112]	; 0x70
 800b5f4:	e011      	b.n	800b61a <HAL_RCC_OscConfig+0x592>
 800b5f6:	4b7d      	ldr	r3, [pc, #500]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5fa:	4a7c      	ldr	r2, [pc, #496]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b5fc:	f023 0301 	bic.w	r3, r3, #1
 800b600:	6713      	str	r3, [r2, #112]	; 0x70
 800b602:	4b7a      	ldr	r3, [pc, #488]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b606:	4a79      	ldr	r2, [pc, #484]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b608:	f023 0304 	bic.w	r3, r3, #4
 800b60c:	6713      	str	r3, [r2, #112]	; 0x70
 800b60e:	4b77      	ldr	r3, [pc, #476]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b612:	4a76      	ldr	r2, [pc, #472]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b618:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d015      	beq.n	800b64e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b622:	f7f9 f811 	bl	8004648 <HAL_GetTick>
 800b626:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b628:	e00a      	b.n	800b640 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b62a:	f7f9 f80d 	bl	8004648 <HAL_GetTick>
 800b62e:	4602      	mov	r2, r0
 800b630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b632:	1ad3      	subs	r3, r2, r3
 800b634:	f241 3288 	movw	r2, #5000	; 0x1388
 800b638:	4293      	cmp	r3, r2
 800b63a:	d901      	bls.n	800b640 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800b63c:	2303      	movs	r3, #3
 800b63e:	e14c      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b640:	4b6a      	ldr	r3, [pc, #424]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b644:	f003 0302 	and.w	r3, r3, #2
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d0ee      	beq.n	800b62a <HAL_RCC_OscConfig+0x5a2>
 800b64c:	e014      	b.n	800b678 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b64e:	f7f8 fffb 	bl	8004648 <HAL_GetTick>
 800b652:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b654:	e00a      	b.n	800b66c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b656:	f7f8 fff7 	bl	8004648 <HAL_GetTick>
 800b65a:	4602      	mov	r2, r0
 800b65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	f241 3288 	movw	r2, #5000	; 0x1388
 800b664:	4293      	cmp	r3, r2
 800b666:	d901      	bls.n	800b66c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800b668:	2303      	movs	r3, #3
 800b66a:	e136      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b66c:	4b5f      	ldr	r3, [pc, #380]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b66e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b670:	f003 0302 	and.w	r3, r3, #2
 800b674:	2b00      	cmp	r3, #0
 800b676:	d1ee      	bne.n	800b656 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	f000 812b 	beq.w	800b8d8 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b682:	4b5a      	ldr	r3, [pc, #360]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b68a:	2b18      	cmp	r3, #24
 800b68c:	f000 80bb 	beq.w	800b806 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b694:	2b02      	cmp	r3, #2
 800b696:	f040 8095 	bne.w	800b7c4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b69a:	4b54      	ldr	r3, [pc, #336]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a53      	ldr	r2, [pc, #332]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b6a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b6a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6a6:	f7f8 ffcf 	bl	8004648 <HAL_GetTick>
 800b6aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b6ac:	e008      	b.n	800b6c0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6ae:	f7f8 ffcb 	bl	8004648 <HAL_GetTick>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b6:	1ad3      	subs	r3, r2, r3
 800b6b8:	2b02      	cmp	r3, #2
 800b6ba:	d901      	bls.n	800b6c0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800b6bc:	2303      	movs	r3, #3
 800b6be:	e10c      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b6c0:	4b4a      	ldr	r3, [pc, #296]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1f0      	bne.n	800b6ae <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b6cc:	4b47      	ldr	r3, [pc, #284]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b6ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b6d0:	4b47      	ldr	r3, [pc, #284]	; (800b7f0 <HAL_RCC_OscConfig+0x768>)
 800b6d2:	4013      	ands	r3, r2
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b6dc:	0112      	lsls	r2, r2, #4
 800b6de:	430a      	orrs	r2, r1
 800b6e0:	4942      	ldr	r1, [pc, #264]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	628b      	str	r3, [r1, #40]	; 0x28
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ea:	3b01      	subs	r3, #1
 800b6ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f4:	3b01      	subs	r3, #1
 800b6f6:	025b      	lsls	r3, r3, #9
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	431a      	orrs	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b700:	3b01      	subs	r3, #1
 800b702:	041b      	lsls	r3, r3, #16
 800b704:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b708:	431a      	orrs	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b70e:	3b01      	subs	r3, #1
 800b710:	061b      	lsls	r3, r3, #24
 800b712:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b716:	4935      	ldr	r1, [pc, #212]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b718:	4313      	orrs	r3, r2
 800b71a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b71c:	4b33      	ldr	r3, [pc, #204]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b720:	4a32      	ldr	r2, [pc, #200]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b722:	f023 0301 	bic.w	r3, r3, #1
 800b726:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b728:	4b30      	ldr	r3, [pc, #192]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b72a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b72c:	4b31      	ldr	r3, [pc, #196]	; (800b7f4 <HAL_RCC_OscConfig+0x76c>)
 800b72e:	4013      	ands	r3, r2
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b734:	00d2      	lsls	r2, r2, #3
 800b736:	492d      	ldr	r1, [pc, #180]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b738:	4313      	orrs	r3, r2
 800b73a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b73c:	4b2b      	ldr	r3, [pc, #172]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b740:	f023 020c 	bic.w	r2, r3, #12
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b748:	4928      	ldr	r1, [pc, #160]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b74a:	4313      	orrs	r3, r2
 800b74c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b74e:	4b27      	ldr	r3, [pc, #156]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b752:	f023 0202 	bic.w	r2, r3, #2
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b75a:	4924      	ldr	r1, [pc, #144]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b75c:	4313      	orrs	r3, r2
 800b75e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b760:	4b22      	ldr	r3, [pc, #136]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b764:	4a21      	ldr	r2, [pc, #132]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b76a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b76c:	4b1f      	ldr	r3, [pc, #124]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b770:	4a1e      	ldr	r2, [pc, #120]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b776:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b778:	4b1c      	ldr	r3, [pc, #112]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b77c:	4a1b      	ldr	r2, [pc, #108]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b77e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b782:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b784:	4b19      	ldr	r3, [pc, #100]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b788:	4a18      	ldr	r2, [pc, #96]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b78a:	f043 0301 	orr.w	r3, r3, #1
 800b78e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b790:	4b16      	ldr	r3, [pc, #88]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a15      	ldr	r2, [pc, #84]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b79a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b79c:	f7f8 ff54 	bl	8004648 <HAL_GetTick>
 800b7a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b7a2:	e008      	b.n	800b7b6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7a4:	f7f8 ff50 	bl	8004648 <HAL_GetTick>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ac:	1ad3      	subs	r3, r2, r3
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	d901      	bls.n	800b7b6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	e091      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b7b6:	4b0d      	ldr	r3, [pc, #52]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d0f0      	beq.n	800b7a4 <HAL_RCC_OscConfig+0x71c>
 800b7c2:	e089      	b.n	800b8d8 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7c4:	4b09      	ldr	r3, [pc, #36]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a08      	ldr	r2, [pc, #32]	; (800b7ec <HAL_RCC_OscConfig+0x764>)
 800b7ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b7ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7d0:	f7f8 ff3a 	bl	8004648 <HAL_GetTick>
 800b7d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b7d6:	e00f      	b.n	800b7f8 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7d8:	f7f8 ff36 	bl	8004648 <HAL_GetTick>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d908      	bls.n	800b7f8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800b7e6:	2303      	movs	r3, #3
 800b7e8:	e077      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
 800b7ea:	bf00      	nop
 800b7ec:	58024400 	.word	0x58024400
 800b7f0:	fffffc0c 	.word	0xfffffc0c
 800b7f4:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b7f8:	4b3a      	ldr	r3, [pc, #232]	; (800b8e4 <HAL_RCC_OscConfig+0x85c>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b800:	2b00      	cmp	r3, #0
 800b802:	d1e9      	bne.n	800b7d8 <HAL_RCC_OscConfig+0x750>
 800b804:	e068      	b.n	800b8d8 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b806:	4b37      	ldr	r3, [pc, #220]	; (800b8e4 <HAL_RCC_OscConfig+0x85c>)
 800b808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b80a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b80c:	4b35      	ldr	r3, [pc, #212]	; (800b8e4 <HAL_RCC_OscConfig+0x85c>)
 800b80e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b810:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b816:	2b01      	cmp	r3, #1
 800b818:	d031      	beq.n	800b87e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	f003 0203 	and.w	r2, r3, #3
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b824:	429a      	cmp	r2, r3
 800b826:	d12a      	bne.n	800b87e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	091b      	lsrs	r3, r3, #4
 800b82c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b834:	429a      	cmp	r2, r3
 800b836:	d122      	bne.n	800b87e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b842:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b844:	429a      	cmp	r2, r3
 800b846:	d11a      	bne.n	800b87e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	0a5b      	lsrs	r3, r3, #9
 800b84c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b854:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b856:	429a      	cmp	r2, r3
 800b858:	d111      	bne.n	800b87e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	0c1b      	lsrs	r3, r3, #16
 800b85e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b866:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b868:	429a      	cmp	r2, r3
 800b86a:	d108      	bne.n	800b87e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	0e1b      	lsrs	r3, r3, #24
 800b870:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b878:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d001      	beq.n	800b882 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	e02b      	b.n	800b8da <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b882:	4b18      	ldr	r3, [pc, #96]	; (800b8e4 <HAL_RCC_OscConfig+0x85c>)
 800b884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b886:	08db      	lsrs	r3, r3, #3
 800b888:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b88c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b892:	693a      	ldr	r2, [r7, #16]
 800b894:	429a      	cmp	r2, r3
 800b896:	d01f      	beq.n	800b8d8 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b898:	4b12      	ldr	r3, [pc, #72]	; (800b8e4 <HAL_RCC_OscConfig+0x85c>)
 800b89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b89c:	4a11      	ldr	r2, [pc, #68]	; (800b8e4 <HAL_RCC_OscConfig+0x85c>)
 800b89e:	f023 0301 	bic.w	r3, r3, #1
 800b8a2:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b8a4:	f7f8 fed0 	bl	8004648 <HAL_GetTick>
 800b8a8:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b8aa:	bf00      	nop
 800b8ac:	f7f8 fecc 	bl	8004648 <HAL_GetTick>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d0f9      	beq.n	800b8ac <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b8b8:	4b0a      	ldr	r3, [pc, #40]	; (800b8e4 <HAL_RCC_OscConfig+0x85c>)
 800b8ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8bc:	4b0a      	ldr	r3, [pc, #40]	; (800b8e8 <HAL_RCC_OscConfig+0x860>)
 800b8be:	4013      	ands	r3, r2
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b8c4:	00d2      	lsls	r2, r2, #3
 800b8c6:	4907      	ldr	r1, [pc, #28]	; (800b8e4 <HAL_RCC_OscConfig+0x85c>)
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b8cc:	4b05      	ldr	r3, [pc, #20]	; (800b8e4 <HAL_RCC_OscConfig+0x85c>)
 800b8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d0:	4a04      	ldr	r2, [pc, #16]	; (800b8e4 <HAL_RCC_OscConfig+0x85c>)
 800b8d2:	f043 0301 	orr.w	r3, r3, #1
 800b8d6:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3730      	adds	r7, #48	; 0x30
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	58024400 	.word	0x58024400
 800b8e8:	ffff0007 	.word	0xffff0007

0800b8ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b086      	sub	sp, #24
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d101      	bne.n	800b900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e19c      	b.n	800bc3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b900:	4b8a      	ldr	r3, [pc, #552]	; (800bb2c <HAL_RCC_ClockConfig+0x240>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f003 030f 	and.w	r3, r3, #15
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d910      	bls.n	800b930 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b90e:	4b87      	ldr	r3, [pc, #540]	; (800bb2c <HAL_RCC_ClockConfig+0x240>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f023 020f 	bic.w	r2, r3, #15
 800b916:	4985      	ldr	r1, [pc, #532]	; (800bb2c <HAL_RCC_ClockConfig+0x240>)
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	4313      	orrs	r3, r2
 800b91c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b91e:	4b83      	ldr	r3, [pc, #524]	; (800bb2c <HAL_RCC_ClockConfig+0x240>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f003 030f 	and.w	r3, r3, #15
 800b926:	683a      	ldr	r2, [r7, #0]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d001      	beq.n	800b930 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b92c:	2301      	movs	r3, #1
 800b92e:	e184      	b.n	800bc3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f003 0304 	and.w	r3, r3, #4
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d010      	beq.n	800b95e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	691a      	ldr	r2, [r3, #16]
 800b940:	4b7b      	ldr	r3, [pc, #492]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800b942:	699b      	ldr	r3, [r3, #24]
 800b944:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b948:	429a      	cmp	r2, r3
 800b94a:	d908      	bls.n	800b95e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b94c:	4b78      	ldr	r3, [pc, #480]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	691b      	ldr	r3, [r3, #16]
 800b958:	4975      	ldr	r1, [pc, #468]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800b95a:	4313      	orrs	r3, r2
 800b95c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f003 0308 	and.w	r3, r3, #8
 800b966:	2b00      	cmp	r3, #0
 800b968:	d010      	beq.n	800b98c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	695a      	ldr	r2, [r3, #20]
 800b96e:	4b70      	ldr	r3, [pc, #448]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800b970:	69db      	ldr	r3, [r3, #28]
 800b972:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b976:	429a      	cmp	r2, r3
 800b978:	d908      	bls.n	800b98c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b97a:	4b6d      	ldr	r3, [pc, #436]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800b97c:	69db      	ldr	r3, [r3, #28]
 800b97e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	695b      	ldr	r3, [r3, #20]
 800b986:	496a      	ldr	r1, [pc, #424]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800b988:	4313      	orrs	r3, r2
 800b98a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f003 0310 	and.w	r3, r3, #16
 800b994:	2b00      	cmp	r3, #0
 800b996:	d010      	beq.n	800b9ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	699a      	ldr	r2, [r3, #24]
 800b99c:	4b64      	ldr	r3, [pc, #400]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800b99e:	69db      	ldr	r3, [r3, #28]
 800b9a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d908      	bls.n	800b9ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b9a8:	4b61      	ldr	r3, [pc, #388]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800b9aa:	69db      	ldr	r3, [r3, #28]
 800b9ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	699b      	ldr	r3, [r3, #24]
 800b9b4:	495e      	ldr	r1, [pc, #376]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f003 0320 	and.w	r3, r3, #32
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d010      	beq.n	800b9e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	69da      	ldr	r2, [r3, #28]
 800b9ca:	4b59      	ldr	r3, [pc, #356]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800b9cc:	6a1b      	ldr	r3, [r3, #32]
 800b9ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d908      	bls.n	800b9e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b9d6:	4b56      	ldr	r3, [pc, #344]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800b9d8:	6a1b      	ldr	r3, [r3, #32]
 800b9da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	69db      	ldr	r3, [r3, #28]
 800b9e2:	4953      	ldr	r1, [pc, #332]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f003 0302 	and.w	r3, r3, #2
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d010      	beq.n	800ba16 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	68da      	ldr	r2, [r3, #12]
 800b9f8:	4b4d      	ldr	r3, [pc, #308]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	f003 030f 	and.w	r3, r3, #15
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d908      	bls.n	800ba16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ba04:	4b4a      	ldr	r3, [pc, #296]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800ba06:	699b      	ldr	r3, [r3, #24]
 800ba08:	f023 020f 	bic.w	r2, r3, #15
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	4947      	ldr	r1, [pc, #284]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800ba12:	4313      	orrs	r3, r2
 800ba14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f003 0301 	and.w	r3, r3, #1
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d055      	beq.n	800bace <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ba22:	4b43      	ldr	r3, [pc, #268]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800ba24:	699b      	ldr	r3, [r3, #24]
 800ba26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	4940      	ldr	r1, [pc, #256]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800ba30:	4313      	orrs	r3, r2
 800ba32:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	2b02      	cmp	r3, #2
 800ba3a:	d107      	bne.n	800ba4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ba3c:	4b3c      	ldr	r3, [pc, #240]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d121      	bne.n	800ba8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e0f6      	b.n	800bc3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	2b03      	cmp	r3, #3
 800ba52:	d107      	bne.n	800ba64 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ba54:	4b36      	ldr	r3, [pc, #216]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d115      	bne.n	800ba8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	e0ea      	b.n	800bc3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d107      	bne.n	800ba7c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ba6c:	4b30      	ldr	r3, [pc, #192]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d109      	bne.n	800ba8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e0de      	b.n	800bc3a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ba7c:	4b2c      	ldr	r3, [pc, #176]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f003 0304 	and.w	r3, r3, #4
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d101      	bne.n	800ba8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e0d6      	b.n	800bc3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ba8c:	4b28      	ldr	r3, [pc, #160]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800ba8e:	691b      	ldr	r3, [r3, #16]
 800ba90:	f023 0207 	bic.w	r2, r3, #7
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	4925      	ldr	r1, [pc, #148]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba9e:	f7f8 fdd3 	bl	8004648 <HAL_GetTick>
 800baa2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800baa4:	e00a      	b.n	800babc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800baa6:	f7f8 fdcf 	bl	8004648 <HAL_GetTick>
 800baaa:	4602      	mov	r2, r0
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	1ad3      	subs	r3, r2, r3
 800bab0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d901      	bls.n	800babc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800bab8:	2303      	movs	r3, #3
 800baba:	e0be      	b.n	800bc3a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800babc:	4b1c      	ldr	r3, [pc, #112]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	00db      	lsls	r3, r3, #3
 800baca:	429a      	cmp	r2, r3
 800bacc:	d1eb      	bne.n	800baa6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f003 0302 	and.w	r3, r3, #2
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d010      	beq.n	800bafc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	68da      	ldr	r2, [r3, #12]
 800bade:	4b14      	ldr	r3, [pc, #80]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800bae0:	699b      	ldr	r3, [r3, #24]
 800bae2:	f003 030f 	and.w	r3, r3, #15
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d208      	bcs.n	800bafc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800baea:	4b11      	ldr	r3, [pc, #68]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800baec:	699b      	ldr	r3, [r3, #24]
 800baee:	f023 020f 	bic.w	r2, r3, #15
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	490e      	ldr	r1, [pc, #56]	; (800bb30 <HAL_RCC_ClockConfig+0x244>)
 800baf8:	4313      	orrs	r3, r2
 800bafa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bafc:	4b0b      	ldr	r3, [pc, #44]	; (800bb2c <HAL_RCC_ClockConfig+0x240>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f003 030f 	and.w	r3, r3, #15
 800bb04:	683a      	ldr	r2, [r7, #0]
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d214      	bcs.n	800bb34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb0a:	4b08      	ldr	r3, [pc, #32]	; (800bb2c <HAL_RCC_ClockConfig+0x240>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f023 020f 	bic.w	r2, r3, #15
 800bb12:	4906      	ldr	r1, [pc, #24]	; (800bb2c <HAL_RCC_ClockConfig+0x240>)
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	4313      	orrs	r3, r2
 800bb18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb1a:	4b04      	ldr	r3, [pc, #16]	; (800bb2c <HAL_RCC_ClockConfig+0x240>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f003 030f 	and.w	r3, r3, #15
 800bb22:	683a      	ldr	r2, [r7, #0]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d005      	beq.n	800bb34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e086      	b.n	800bc3a <HAL_RCC_ClockConfig+0x34e>
 800bb2c:	52002000 	.word	0x52002000
 800bb30:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 0304 	and.w	r3, r3, #4
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d010      	beq.n	800bb62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	691a      	ldr	r2, [r3, #16]
 800bb44:	4b3f      	ldr	r3, [pc, #252]	; (800bc44 <HAL_RCC_ClockConfig+0x358>)
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d208      	bcs.n	800bb62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bb50:	4b3c      	ldr	r3, [pc, #240]	; (800bc44 <HAL_RCC_ClockConfig+0x358>)
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	691b      	ldr	r3, [r3, #16]
 800bb5c:	4939      	ldr	r1, [pc, #228]	; (800bc44 <HAL_RCC_ClockConfig+0x358>)
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f003 0308 	and.w	r3, r3, #8
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d010      	beq.n	800bb90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	695a      	ldr	r2, [r3, #20]
 800bb72:	4b34      	ldr	r3, [pc, #208]	; (800bc44 <HAL_RCC_ClockConfig+0x358>)
 800bb74:	69db      	ldr	r3, [r3, #28]
 800bb76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d208      	bcs.n	800bb90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bb7e:	4b31      	ldr	r3, [pc, #196]	; (800bc44 <HAL_RCC_ClockConfig+0x358>)
 800bb80:	69db      	ldr	r3, [r3, #28]
 800bb82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	695b      	ldr	r3, [r3, #20]
 800bb8a:	492e      	ldr	r1, [pc, #184]	; (800bc44 <HAL_RCC_ClockConfig+0x358>)
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 0310 	and.w	r3, r3, #16
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d010      	beq.n	800bbbe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	699a      	ldr	r2, [r3, #24]
 800bba0:	4b28      	ldr	r3, [pc, #160]	; (800bc44 <HAL_RCC_ClockConfig+0x358>)
 800bba2:	69db      	ldr	r3, [r3, #28]
 800bba4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d208      	bcs.n	800bbbe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bbac:	4b25      	ldr	r3, [pc, #148]	; (800bc44 <HAL_RCC_ClockConfig+0x358>)
 800bbae:	69db      	ldr	r3, [r3, #28]
 800bbb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	699b      	ldr	r3, [r3, #24]
 800bbb8:	4922      	ldr	r1, [pc, #136]	; (800bc44 <HAL_RCC_ClockConfig+0x358>)
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f003 0320 	and.w	r3, r3, #32
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d010      	beq.n	800bbec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	69da      	ldr	r2, [r3, #28]
 800bbce:	4b1d      	ldr	r3, [pc, #116]	; (800bc44 <HAL_RCC_ClockConfig+0x358>)
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d208      	bcs.n	800bbec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bbda:	4b1a      	ldr	r3, [pc, #104]	; (800bc44 <HAL_RCC_ClockConfig+0x358>)
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	69db      	ldr	r3, [r3, #28]
 800bbe6:	4917      	ldr	r1, [pc, #92]	; (800bc44 <HAL_RCC_ClockConfig+0x358>)
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800bbec:	f000 f89e 	bl	800bd2c <HAL_RCC_GetSysClockFreq>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	4b14      	ldr	r3, [pc, #80]	; (800bc44 <HAL_RCC_ClockConfig+0x358>)
 800bbf4:	699b      	ldr	r3, [r3, #24]
 800bbf6:	0a1b      	lsrs	r3, r3, #8
 800bbf8:	f003 030f 	and.w	r3, r3, #15
 800bbfc:	4912      	ldr	r1, [pc, #72]	; (800bc48 <HAL_RCC_ClockConfig+0x35c>)
 800bbfe:	5ccb      	ldrb	r3, [r1, r3]
 800bc00:	f003 031f 	and.w	r3, r3, #31
 800bc04:	fa22 f303 	lsr.w	r3, r2, r3
 800bc08:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800bc0a:	4b0e      	ldr	r3, [pc, #56]	; (800bc44 <HAL_RCC_ClockConfig+0x358>)
 800bc0c:	699b      	ldr	r3, [r3, #24]
 800bc0e:	f003 030f 	and.w	r3, r3, #15
 800bc12:	4a0d      	ldr	r2, [pc, #52]	; (800bc48 <HAL_RCC_ClockConfig+0x35c>)
 800bc14:	5cd3      	ldrb	r3, [r2, r3]
 800bc16:	f003 031f 	and.w	r3, r3, #31
 800bc1a:	693a      	ldr	r2, [r7, #16]
 800bc1c:	fa22 f303 	lsr.w	r3, r2, r3
 800bc20:	4a0a      	ldr	r2, [pc, #40]	; (800bc4c <HAL_RCC_ClockConfig+0x360>)
 800bc22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bc24:	4a0a      	ldr	r2, [pc, #40]	; (800bc50 <HAL_RCC_ClockConfig+0x364>)
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800bc2a:	4b0a      	ldr	r3, [pc, #40]	; (800bc54 <HAL_RCC_ClockConfig+0x368>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7f8 fcc0 	bl	80045b4 <HAL_InitTick>
 800bc34:	4603      	mov	r3, r0
 800bc36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800bc38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3718      	adds	r7, #24
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	58024400 	.word	0x58024400
 800bc48:	080115f4 	.word	0x080115f4
 800bc4c:	24000048 	.word	0x24000048
 800bc50:	24000044 	.word	0x24000044
 800bc54:	2400004c 	.word	0x2400004c

0800bc58 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b08c      	sub	sp, #48	; 0x30
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d12a      	bne.n	800bcc0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800bc6a:	4b2d      	ldr	r3, [pc, #180]	; (800bd20 <HAL_RCC_MCOConfig+0xc8>)
 800bc6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bc70:	4a2b      	ldr	r2, [pc, #172]	; (800bd20 <HAL_RCC_MCOConfig+0xc8>)
 800bc72:	f043 0301 	orr.w	r3, r3, #1
 800bc76:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800bc7a:	4b29      	ldr	r3, [pc, #164]	; (800bd20 <HAL_RCC_MCOConfig+0xc8>)
 800bc7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bc80:	f003 0301 	and.w	r3, r3, #1
 800bc84:	61bb      	str	r3, [r7, #24]
 800bc86:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800bc88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc8e:	2302      	movs	r3, #2
 800bc90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc92:	2303      	movs	r3, #3
 800bc94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc96:	2300      	movs	r3, #0
 800bc98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800bc9e:	f107 031c 	add.w	r3, r7, #28
 800bca2:	4619      	mov	r1, r3
 800bca4:	481f      	ldr	r0, [pc, #124]	; (800bd24 <HAL_RCC_MCOConfig+0xcc>)
 800bca6:	f7fc fe6f 	bl	8008988 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800bcaa:	4b1d      	ldr	r3, [pc, #116]	; (800bd20 <HAL_RCC_MCOConfig+0xc8>)
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800bcb2:	68b9      	ldr	r1, [r7, #8]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	430b      	orrs	r3, r1
 800bcb8:	4919      	ldr	r1, [pc, #100]	; (800bd20 <HAL_RCC_MCOConfig+0xc8>)
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800bcbe:	e02a      	b.n	800bd16 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800bcc0:	4b17      	ldr	r3, [pc, #92]	; (800bd20 <HAL_RCC_MCOConfig+0xc8>)
 800bcc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bcc6:	4a16      	ldr	r2, [pc, #88]	; (800bd20 <HAL_RCC_MCOConfig+0xc8>)
 800bcc8:	f043 0304 	orr.w	r3, r3, #4
 800bccc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800bcd0:	4b13      	ldr	r3, [pc, #76]	; (800bd20 <HAL_RCC_MCOConfig+0xc8>)
 800bcd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800bcd6:	f003 0304 	and.w	r3, r3, #4
 800bcda:	617b      	str	r3, [r7, #20]
 800bcdc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800bcde:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bce4:	2302      	movs	r3, #2
 800bce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bce8:	2303      	movs	r3, #3
 800bcea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcec:	2300      	movs	r3, #0
 800bcee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800bcf4:	f107 031c 	add.w	r3, r7, #28
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	480b      	ldr	r0, [pc, #44]	; (800bd28 <HAL_RCC_MCOConfig+0xd0>)
 800bcfc:	f7fc fe44 	bl	8008988 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800bd00:	4b07      	ldr	r3, [pc, #28]	; (800bd20 <HAL_RCC_MCOConfig+0xc8>)
 800bd02:	691b      	ldr	r3, [r3, #16]
 800bd04:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	01d9      	lsls	r1, r3, #7
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	430b      	orrs	r3, r1
 800bd10:	4903      	ldr	r1, [pc, #12]	; (800bd20 <HAL_RCC_MCOConfig+0xc8>)
 800bd12:	4313      	orrs	r3, r2
 800bd14:	610b      	str	r3, [r1, #16]
}
 800bd16:	bf00      	nop
 800bd18:	3730      	adds	r7, #48	; 0x30
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	58024400 	.word	0x58024400
 800bd24:	58020000 	.word	0x58020000
 800bd28:	58020800 	.word	0x58020800

0800bd2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b089      	sub	sp, #36	; 0x24
 800bd30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bd32:	4bb3      	ldr	r3, [pc, #716]	; (800c000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd3a:	2b18      	cmp	r3, #24
 800bd3c:	f200 8155 	bhi.w	800bfea <HAL_RCC_GetSysClockFreq+0x2be>
 800bd40:	a201      	add	r2, pc, #4	; (adr r2, 800bd48 <HAL_RCC_GetSysClockFreq+0x1c>)
 800bd42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd46:	bf00      	nop
 800bd48:	0800bdad 	.word	0x0800bdad
 800bd4c:	0800bfeb 	.word	0x0800bfeb
 800bd50:	0800bfeb 	.word	0x0800bfeb
 800bd54:	0800bfeb 	.word	0x0800bfeb
 800bd58:	0800bfeb 	.word	0x0800bfeb
 800bd5c:	0800bfeb 	.word	0x0800bfeb
 800bd60:	0800bfeb 	.word	0x0800bfeb
 800bd64:	0800bfeb 	.word	0x0800bfeb
 800bd68:	0800bdd3 	.word	0x0800bdd3
 800bd6c:	0800bfeb 	.word	0x0800bfeb
 800bd70:	0800bfeb 	.word	0x0800bfeb
 800bd74:	0800bfeb 	.word	0x0800bfeb
 800bd78:	0800bfeb 	.word	0x0800bfeb
 800bd7c:	0800bfeb 	.word	0x0800bfeb
 800bd80:	0800bfeb 	.word	0x0800bfeb
 800bd84:	0800bfeb 	.word	0x0800bfeb
 800bd88:	0800bdd9 	.word	0x0800bdd9
 800bd8c:	0800bfeb 	.word	0x0800bfeb
 800bd90:	0800bfeb 	.word	0x0800bfeb
 800bd94:	0800bfeb 	.word	0x0800bfeb
 800bd98:	0800bfeb 	.word	0x0800bfeb
 800bd9c:	0800bfeb 	.word	0x0800bfeb
 800bda0:	0800bfeb 	.word	0x0800bfeb
 800bda4:	0800bfeb 	.word	0x0800bfeb
 800bda8:	0800bddf 	.word	0x0800bddf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdac:	4b94      	ldr	r3, [pc, #592]	; (800c000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f003 0320 	and.w	r3, r3, #32
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d009      	beq.n	800bdcc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdb8:	4b91      	ldr	r3, [pc, #580]	; (800c000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	08db      	lsrs	r3, r3, #3
 800bdbe:	f003 0303 	and.w	r3, r3, #3
 800bdc2:	4a90      	ldr	r2, [pc, #576]	; (800c004 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bdc4:	fa22 f303 	lsr.w	r3, r2, r3
 800bdc8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800bdca:	e111      	b.n	800bff0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bdcc:	4b8d      	ldr	r3, [pc, #564]	; (800c004 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bdce:	61bb      	str	r3, [r7, #24]
      break;
 800bdd0:	e10e      	b.n	800bff0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800bdd2:	4b8d      	ldr	r3, [pc, #564]	; (800c008 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bdd4:	61bb      	str	r3, [r7, #24]
      break;
 800bdd6:	e10b      	b.n	800bff0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800bdd8:	4b8c      	ldr	r3, [pc, #560]	; (800c00c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800bdda:	61bb      	str	r3, [r7, #24]
      break;
 800bddc:	e108      	b.n	800bff0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bdde:	4b88      	ldr	r3, [pc, #544]	; (800c000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bde0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde2:	f003 0303 	and.w	r3, r3, #3
 800bde6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800bde8:	4b85      	ldr	r3, [pc, #532]	; (800c000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bdea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdec:	091b      	lsrs	r3, r3, #4
 800bdee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdf2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bdf4:	4b82      	ldr	r3, [pc, #520]	; (800c000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bdf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf8:	f003 0301 	and.w	r3, r3, #1
 800bdfc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bdfe:	4b80      	ldr	r3, [pc, #512]	; (800c000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be02:	08db      	lsrs	r3, r3, #3
 800be04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	fb02 f303 	mul.w	r3, r2, r3
 800be0e:	ee07 3a90 	vmov	s15, r3
 800be12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f000 80e1 	beq.w	800bfe4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	2b02      	cmp	r3, #2
 800be26:	f000 8083 	beq.w	800bf30 <HAL_RCC_GetSysClockFreq+0x204>
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	2b02      	cmp	r3, #2
 800be2e:	f200 80a1 	bhi.w	800bf74 <HAL_RCC_GetSysClockFreq+0x248>
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d003      	beq.n	800be40 <HAL_RCC_GetSysClockFreq+0x114>
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d056      	beq.n	800beec <HAL_RCC_GetSysClockFreq+0x1c0>
 800be3e:	e099      	b.n	800bf74 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be40:	4b6f      	ldr	r3, [pc, #444]	; (800c000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f003 0320 	and.w	r3, r3, #32
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d02d      	beq.n	800bea8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be4c:	4b6c      	ldr	r3, [pc, #432]	; (800c000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	08db      	lsrs	r3, r3, #3
 800be52:	f003 0303 	and.w	r3, r3, #3
 800be56:	4a6b      	ldr	r2, [pc, #428]	; (800c004 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800be58:	fa22 f303 	lsr.w	r3, r2, r3
 800be5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	ee07 3a90 	vmov	s15, r3
 800be64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	ee07 3a90 	vmov	s15, r3
 800be6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be76:	4b62      	ldr	r3, [pc, #392]	; (800c000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be7e:	ee07 3a90 	vmov	s15, r3
 800be82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be86:	ed97 6a02 	vldr	s12, [r7, #8]
 800be8a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c010 <HAL_RCC_GetSysClockFreq+0x2e4>
 800be8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bea2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800bea6:	e087      	b.n	800bfb8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	ee07 3a90 	vmov	s15, r3
 800beae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beb2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c014 <HAL_RCC_GetSysClockFreq+0x2e8>
 800beb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beba:	4b51      	ldr	r3, [pc, #324]	; (800c000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bec2:	ee07 3a90 	vmov	s15, r3
 800bec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beca:	ed97 6a02 	vldr	s12, [r7, #8]
 800bece:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c010 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bee6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800beea:	e065      	b.n	800bfb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	ee07 3a90 	vmov	s15, r3
 800bef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bef6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c018 <HAL_RCC_GetSysClockFreq+0x2ec>
 800befa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800befe:	4b40      	ldr	r3, [pc, #256]	; (800c000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf06:	ee07 3a90 	vmov	s15, r3
 800bf0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf12:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c010 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bf16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bf2e:	e043      	b.n	800bfb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	ee07 3a90 	vmov	s15, r3
 800bf36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf3a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c01c <HAL_RCC_GetSysClockFreq+0x2f0>
 800bf3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf42:	4b2f      	ldr	r3, [pc, #188]	; (800c000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf4a:	ee07 3a90 	vmov	s15, r3
 800bf4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf52:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf56:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c010 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bf5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bf72:	e021      	b.n	800bfb8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	ee07 3a90 	vmov	s15, r3
 800bf7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf7e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c018 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bf82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf86:	4b1e      	ldr	r3, [pc, #120]	; (800c000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf8e:	ee07 3a90 	vmov	s15, r3
 800bf92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf96:	ed97 6a02 	vldr	s12, [r7, #8]
 800bf9a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c010 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bf9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800bfb6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800bfb8:	4b11      	ldr	r3, [pc, #68]	; (800c000 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfbc:	0a5b      	lsrs	r3, r3, #9
 800bfbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	ee07 3a90 	vmov	s15, r3
 800bfcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bfd0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfdc:	ee17 3a90 	vmov	r3, s15
 800bfe0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800bfe2:	e005      	b.n	800bff0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	61bb      	str	r3, [r7, #24]
      break;
 800bfe8:	e002      	b.n	800bff0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800bfea:	4b07      	ldr	r3, [pc, #28]	; (800c008 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bfec:	61bb      	str	r3, [r7, #24]
      break;
 800bfee:	bf00      	nop
  }

  return sysclockfreq;
 800bff0:	69bb      	ldr	r3, [r7, #24]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3724      	adds	r7, #36	; 0x24
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop
 800c000:	58024400 	.word	0x58024400
 800c004:	03d09000 	.word	0x03d09000
 800c008:	003d0900 	.word	0x003d0900
 800c00c:	016e3600 	.word	0x016e3600
 800c010:	46000000 	.word	0x46000000
 800c014:	4c742400 	.word	0x4c742400
 800c018:	4a742400 	.word	0x4a742400
 800c01c:	4bb71b00 	.word	0x4bb71b00

0800c020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800c026:	f7ff fe81 	bl	800bd2c <HAL_RCC_GetSysClockFreq>
 800c02a:	4602      	mov	r2, r0
 800c02c:	4b10      	ldr	r3, [pc, #64]	; (800c070 <HAL_RCC_GetHCLKFreq+0x50>)
 800c02e:	699b      	ldr	r3, [r3, #24]
 800c030:	0a1b      	lsrs	r3, r3, #8
 800c032:	f003 030f 	and.w	r3, r3, #15
 800c036:	490f      	ldr	r1, [pc, #60]	; (800c074 <HAL_RCC_GetHCLKFreq+0x54>)
 800c038:	5ccb      	ldrb	r3, [r1, r3]
 800c03a:	f003 031f 	and.w	r3, r3, #31
 800c03e:	fa22 f303 	lsr.w	r3, r2, r3
 800c042:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800c044:	4b0a      	ldr	r3, [pc, #40]	; (800c070 <HAL_RCC_GetHCLKFreq+0x50>)
 800c046:	699b      	ldr	r3, [r3, #24]
 800c048:	f003 030f 	and.w	r3, r3, #15
 800c04c:	4a09      	ldr	r2, [pc, #36]	; (800c074 <HAL_RCC_GetHCLKFreq+0x54>)
 800c04e:	5cd3      	ldrb	r3, [r2, r3]
 800c050:	f003 031f 	and.w	r3, r3, #31
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	fa22 f303 	lsr.w	r3, r2, r3
 800c05a:	4a07      	ldr	r2, [pc, #28]	; (800c078 <HAL_RCC_GetHCLKFreq+0x58>)
 800c05c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c05e:	4a07      	ldr	r2, [pc, #28]	; (800c07c <HAL_RCC_GetHCLKFreq+0x5c>)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c064:	4b04      	ldr	r3, [pc, #16]	; (800c078 <HAL_RCC_GetHCLKFreq+0x58>)
 800c066:	681b      	ldr	r3, [r3, #0]
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	58024400 	.word	0x58024400
 800c074:	080115f4 	.word	0x080115f4
 800c078:	24000048 	.word	0x24000048
 800c07c:	24000044 	.word	0x24000044

0800c080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800c084:	f7ff ffcc 	bl	800c020 <HAL_RCC_GetHCLKFreq>
 800c088:	4602      	mov	r2, r0
 800c08a:	4b06      	ldr	r3, [pc, #24]	; (800c0a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c08c:	69db      	ldr	r3, [r3, #28]
 800c08e:	091b      	lsrs	r3, r3, #4
 800c090:	f003 0307 	and.w	r3, r3, #7
 800c094:	4904      	ldr	r1, [pc, #16]	; (800c0a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c096:	5ccb      	ldrb	r3, [r1, r3]
 800c098:	f003 031f 	and.w	r3, r3, #31
 800c09c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	58024400 	.word	0x58024400
 800c0a8:	080115f4 	.word	0x080115f4

0800c0ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800c0b0:	f7ff ffb6 	bl	800c020 <HAL_RCC_GetHCLKFreq>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	4b06      	ldr	r3, [pc, #24]	; (800c0d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c0b8:	69db      	ldr	r3, [r3, #28]
 800c0ba:	0a1b      	lsrs	r3, r3, #8
 800c0bc:	f003 0307 	and.w	r3, r3, #7
 800c0c0:	4904      	ldr	r1, [pc, #16]	; (800c0d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c0c2:	5ccb      	ldrb	r3, [r1, r3]
 800c0c4:	f003 031f 	and.w	r3, r3, #31
 800c0c8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	58024400 	.word	0x58024400
 800c0d4:	080115f4 	.word	0x080115f4

0800c0d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c0d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0dc:	b0c8      	sub	sp, #288	; 0x120
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c0f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800c0fc:	2500      	movs	r5, #0
 800c0fe:	ea54 0305 	orrs.w	r3, r4, r5
 800c102:	d049      	beq.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c10a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c10e:	d02f      	beq.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c110:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c114:	d828      	bhi.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c116:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c11a:	d01a      	beq.n	800c152 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c11c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c120:	d822      	bhi.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c122:	2b00      	cmp	r3, #0
 800c124:	d003      	beq.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c12a:	d007      	beq.n	800c13c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c12c:	e01c      	b.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c12e:	4ba7      	ldr	r3, [pc, #668]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c132:	4aa6      	ldr	r2, [pc, #664]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c138:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c13a:	e01a      	b.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c13c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c140:	3308      	adds	r3, #8
 800c142:	2102      	movs	r1, #2
 800c144:	4618      	mov	r0, r3
 800c146:	f001 fc43 	bl	800d9d0 <RCCEx_PLL2_Config>
 800c14a:	4603      	mov	r3, r0
 800c14c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c150:	e00f      	b.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c156:	3328      	adds	r3, #40	; 0x28
 800c158:	2102      	movs	r1, #2
 800c15a:	4618      	mov	r0, r3
 800c15c:	f001 fcea 	bl	800db34 <RCCEx_PLL3_Config>
 800c160:	4603      	mov	r3, r0
 800c162:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c166:	e004      	b.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c168:	2301      	movs	r3, #1
 800c16a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c16e:	e000      	b.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c170:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c172:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c176:	2b00      	cmp	r3, #0
 800c178:	d10a      	bne.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c17a:	4b94      	ldr	r3, [pc, #592]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c17e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c188:	4a90      	ldr	r2, [pc, #576]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c18a:	430b      	orrs	r3, r1
 800c18c:	6513      	str	r3, [r2, #80]	; 0x50
 800c18e:	e003      	b.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c190:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c194:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800c1a4:	f04f 0900 	mov.w	r9, #0
 800c1a8:	ea58 0309 	orrs.w	r3, r8, r9
 800c1ac:	d047      	beq.n	800c23e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c1ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1b4:	2b04      	cmp	r3, #4
 800c1b6:	d82a      	bhi.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c1b8:	a201      	add	r2, pc, #4	; (adr r2, 800c1c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1be:	bf00      	nop
 800c1c0:	0800c1d5 	.word	0x0800c1d5
 800c1c4:	0800c1e3 	.word	0x0800c1e3
 800c1c8:	0800c1f9 	.word	0x0800c1f9
 800c1cc:	0800c217 	.word	0x0800c217
 800c1d0:	0800c217 	.word	0x0800c217
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1d4:	4b7d      	ldr	r3, [pc, #500]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d8:	4a7c      	ldr	r2, [pc, #496]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c1da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c1e0:	e01a      	b.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1e6:	3308      	adds	r3, #8
 800c1e8:	2100      	movs	r1, #0
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f001 fbf0 	bl	800d9d0 <RCCEx_PLL2_Config>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c1f6:	e00f      	b.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c1f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1fc:	3328      	adds	r3, #40	; 0x28
 800c1fe:	2100      	movs	r1, #0
 800c200:	4618      	mov	r0, r3
 800c202:	f001 fc97 	bl	800db34 <RCCEx_PLL3_Config>
 800c206:	4603      	mov	r3, r0
 800c208:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c20c:	e004      	b.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c214:	e000      	b.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c216:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c218:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d10a      	bne.n	800c236 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c220:	4b6a      	ldr	r3, [pc, #424]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c224:	f023 0107 	bic.w	r1, r3, #7
 800c228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c22c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c22e:	4a67      	ldr	r2, [pc, #412]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c230:	430b      	orrs	r3, r1
 800c232:	6513      	str	r3, [r2, #80]	; 0x50
 800c234:	e003      	b.n	800c23e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c236:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c23a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800c23e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c246:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800c24a:	f04f 0b00 	mov.w	fp, #0
 800c24e:	ea5a 030b 	orrs.w	r3, sl, fp
 800c252:	d054      	beq.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800c254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c25a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800c25e:	d036      	beq.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800c260:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800c264:	d82f      	bhi.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c26a:	d032      	beq.n	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c26c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c270:	d829      	bhi.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c272:	2bc0      	cmp	r3, #192	; 0xc0
 800c274:	d02f      	beq.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800c276:	2bc0      	cmp	r3, #192	; 0xc0
 800c278:	d825      	bhi.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c27a:	2b80      	cmp	r3, #128	; 0x80
 800c27c:	d018      	beq.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800c27e:	2b80      	cmp	r3, #128	; 0x80
 800c280:	d821      	bhi.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800c282:	2b00      	cmp	r3, #0
 800c284:	d002      	beq.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c286:	2b40      	cmp	r3, #64	; 0x40
 800c288:	d007      	beq.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800c28a:	e01c      	b.n	800c2c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c28c:	4b4f      	ldr	r3, [pc, #316]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c290:	4a4e      	ldr	r2, [pc, #312]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c296:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800c298:	e01e      	b.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c29a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c29e:	3308      	adds	r3, #8
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f001 fb94 	bl	800d9d0 <RCCEx_PLL2_Config>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800c2ae:	e013      	b.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c2b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2b4:	3328      	adds	r3, #40	; 0x28
 800c2b6:	2100      	movs	r1, #0
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f001 fc3b 	bl	800db34 <RCCEx_PLL3_Config>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800c2c4:	e008      	b.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c2cc:	e004      	b.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800c2ce:	bf00      	nop
 800c2d0:	e002      	b.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800c2d2:	bf00      	nop
 800c2d4:	e000      	b.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800c2d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d10a      	bne.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800c2e0:	4b3a      	ldr	r3, [pc, #232]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c2e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2e4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800c2e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2ee:	4a37      	ldr	r2, [pc, #220]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c2f0:	430b      	orrs	r3, r1
 800c2f2:	6513      	str	r3, [r2, #80]	; 0x50
 800c2f4:	e003      	b.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c2fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800c2fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c306:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800c30a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c30e:	2300      	movs	r3, #0
 800c310:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c314:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800c318:	460b      	mov	r3, r1
 800c31a:	4313      	orrs	r3, r2
 800c31c:	d05c      	beq.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800c31e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c324:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800c328:	d03b      	beq.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c32a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800c32e:	d834      	bhi.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800c330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c334:	d037      	beq.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800c336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c33a:	d82e      	bhi.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800c33c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c340:	d033      	beq.n	800c3aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c342:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c346:	d828      	bhi.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800c348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c34c:	d01a      	beq.n	800c384 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800c34e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c352:	d822      	bhi.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800c354:	2b00      	cmp	r3, #0
 800c356:	d003      	beq.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800c358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c35c:	d007      	beq.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x296>
 800c35e:	e01c      	b.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c360:	4b1a      	ldr	r3, [pc, #104]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c364:	4a19      	ldr	r2, [pc, #100]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c36a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800c36c:	e01e      	b.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c36e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c372:	3308      	adds	r3, #8
 800c374:	2100      	movs	r1, #0
 800c376:	4618      	mov	r0, r3
 800c378:	f001 fb2a 	bl	800d9d0 <RCCEx_PLL2_Config>
 800c37c:	4603      	mov	r3, r0
 800c37e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800c382:	e013      	b.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c384:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c388:	3328      	adds	r3, #40	; 0x28
 800c38a:	2100      	movs	r1, #0
 800c38c:	4618      	mov	r0, r3
 800c38e:	f001 fbd1 	bl	800db34 <RCCEx_PLL3_Config>
 800c392:	4603      	mov	r3, r0
 800c394:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800c398:	e008      	b.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c39a:	2301      	movs	r3, #1
 800c39c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c3a0:	e004      	b.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800c3a2:	bf00      	nop
 800c3a4:	e002      	b.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800c3a6:	bf00      	nop
 800c3a8:	e000      	b.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800c3aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d10d      	bne.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800c3b4:	4b05      	ldr	r3, [pc, #20]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c3b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3b8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800c3bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3c2:	4a02      	ldr	r2, [pc, #8]	; (800c3cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c3c4:	430b      	orrs	r3, r1
 800c3c6:	6513      	str	r3, [r2, #80]	; 0x50
 800c3c8:	e006      	b.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800c3ca:	bf00      	nop
 800c3cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c3d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800c3e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c3ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	d03a      	beq.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800c3f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3fe:	2b30      	cmp	r3, #48	; 0x30
 800c400:	d01f      	beq.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800c402:	2b30      	cmp	r3, #48	; 0x30
 800c404:	d819      	bhi.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800c406:	2b20      	cmp	r3, #32
 800c408:	d00c      	beq.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800c40a:	2b20      	cmp	r3, #32
 800c40c:	d815      	bhi.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0x362>
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d019      	beq.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800c412:	2b10      	cmp	r3, #16
 800c414:	d111      	bne.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c416:	4bae      	ldr	r3, [pc, #696]	; (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41a:	4aad      	ldr	r2, [pc, #692]	; (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c41c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c420:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c422:	e011      	b.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c428:	3308      	adds	r3, #8
 800c42a:	2102      	movs	r1, #2
 800c42c:	4618      	mov	r0, r3
 800c42e:	f001 facf 	bl	800d9d0 <RCCEx_PLL2_Config>
 800c432:	4603      	mov	r3, r0
 800c434:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c438:	e006      	b.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c440:	e002      	b.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800c442:	bf00      	nop
 800c444:	e000      	b.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800c446:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c448:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d10a      	bne.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c450:	4b9f      	ldr	r3, [pc, #636]	; (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c454:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800c458:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c45c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c45e:	4a9c      	ldr	r2, [pc, #624]	; (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c460:	430b      	orrs	r3, r1
 800c462:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c464:	e003      	b.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c466:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c46a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c46e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c476:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800c47a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c47e:	2300      	movs	r3, #0
 800c480:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c484:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800c488:	460b      	mov	r3, r1
 800c48a:	4313      	orrs	r3, r2
 800c48c:	d051      	beq.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c48e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c498:	d035      	beq.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800c49a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c49e:	d82e      	bhi.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0x426>
 800c4a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c4a4:	d031      	beq.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0x432>
 800c4a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c4aa:	d828      	bhi.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0x426>
 800c4ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4b0:	d01a      	beq.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800c4b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4b6:	d822      	bhi.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0x426>
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d003      	beq.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800c4bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4c0:	d007      	beq.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800c4c2:	e01c      	b.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4c4:	4b82      	ldr	r3, [pc, #520]	; (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c8:	4a81      	ldr	r2, [pc, #516]	; (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c4ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c4d0:	e01c      	b.n	800c50c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4d6:	3308      	adds	r3, #8
 800c4d8:	2100      	movs	r1, #0
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f001 fa78 	bl	800d9d0 <RCCEx_PLL2_Config>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c4e6:	e011      	b.n	800c50c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c4e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4ec:	3328      	adds	r3, #40	; 0x28
 800c4ee:	2100      	movs	r1, #0
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f001 fb1f 	bl	800db34 <RCCEx_PLL3_Config>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c4fc:	e006      	b.n	800c50c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4fe:	2301      	movs	r3, #1
 800c500:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c504:	e002      	b.n	800c50c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800c506:	bf00      	nop
 800c508:	e000      	b.n	800c50c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800c50a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c50c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c510:	2b00      	cmp	r3, #0
 800c512:	d10a      	bne.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c514:	4b6e      	ldr	r3, [pc, #440]	; (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c518:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800c51c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c522:	4a6b      	ldr	r2, [pc, #428]	; (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c524:	430b      	orrs	r3, r1
 800c526:	6513      	str	r3, [r2, #80]	; 0x50
 800c528:	e003      	b.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c52a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c52e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c532:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800c53e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c542:	2300      	movs	r3, #0
 800c544:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c548:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800c54c:	460b      	mov	r3, r1
 800c54e:	4313      	orrs	r3, r2
 800c550:	d053      	beq.n	800c5fa <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c55c:	d033      	beq.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800c55e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c562:	d82c      	bhi.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800c564:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c568:	d02f      	beq.n	800c5ca <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800c56a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c56e:	d826      	bhi.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800c570:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c574:	d02b      	beq.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c576:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c57a:	d820      	bhi.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800c57c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c580:	d012      	beq.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800c582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c586:	d81a      	bhi.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d022      	beq.n	800c5d2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800c58c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c590:	d115      	bne.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c596:	3308      	adds	r3, #8
 800c598:	2101      	movs	r1, #1
 800c59a:	4618      	mov	r0, r3
 800c59c:	f001 fa18 	bl	800d9d0 <RCCEx_PLL2_Config>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c5a6:	e015      	b.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c5a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5ac:	3328      	adds	r3, #40	; 0x28
 800c5ae:	2101      	movs	r1, #1
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f001 fabf 	bl	800db34 <RCCEx_PLL3_Config>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c5bc:	e00a      	b.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c5c4:	e006      	b.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800c5c6:	bf00      	nop
 800c5c8:	e004      	b.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800c5ca:	bf00      	nop
 800c5cc:	e002      	b.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800c5ce:	bf00      	nop
 800c5d0:	e000      	b.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800c5d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d10a      	bne.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c5dc:	4b3c      	ldr	r3, [pc, #240]	; (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c5de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5e0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800c5e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c5ea:	4a39      	ldr	r2, [pc, #228]	; (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c5ec:	430b      	orrs	r3, r1
 800c5ee:	6513      	str	r3, [r2, #80]	; 0x50
 800c5f0:	e003      	b.n	800c5fa <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5f6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c5fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c602:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800c606:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c60a:	2300      	movs	r3, #0
 800c60c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c610:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800c614:	460b      	mov	r3, r1
 800c616:	4313      	orrs	r3, r2
 800c618:	d060      	beq.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c61a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c61e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c622:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800c626:	d039      	beq.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800c628:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800c62c:	d832      	bhi.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c62e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c632:	d035      	beq.n	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c638:	d82c      	bhi.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c63a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c63e:	d031      	beq.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c644:	d826      	bhi.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c646:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c64a:	d02d      	beq.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c64c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c650:	d820      	bhi.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c656:	d012      	beq.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800c658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c65c:	d81a      	bhi.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d024      	beq.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c666:	d115      	bne.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c66c:	3308      	adds	r3, #8
 800c66e:	2101      	movs	r1, #1
 800c670:	4618      	mov	r0, r3
 800c672:	f001 f9ad 	bl	800d9d0 <RCCEx_PLL2_Config>
 800c676:	4603      	mov	r3, r0
 800c678:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c67c:	e017      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c67e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c682:	3328      	adds	r3, #40	; 0x28
 800c684:	2101      	movs	r1, #1
 800c686:	4618      	mov	r0, r3
 800c688:	f001 fa54 	bl	800db34 <RCCEx_PLL3_Config>
 800c68c:	4603      	mov	r3, r0
 800c68e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c692:	e00c      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c694:	2301      	movs	r3, #1
 800c696:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c69a:	e008      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c69c:	bf00      	nop
 800c69e:	e006      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c6a0:	bf00      	nop
 800c6a2:	e004      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c6a4:	bf00      	nop
 800c6a6:	e002      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c6a8:	bf00      	nop
 800c6aa:	e000      	b.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c6ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d10e      	bne.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c6b6:	4b06      	ldr	r3, [pc, #24]	; (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c6b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6ba:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c6be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c6c6:	4a02      	ldr	r2, [pc, #8]	; (800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c6c8:	430b      	orrs	r3, r1
 800c6ca:	6593      	str	r3, [r2, #88]	; 0x58
 800c6cc:	e006      	b.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c6ce:	bf00      	nop
 800c6d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c6dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800c6e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c6f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	d037      	beq.n	800c76c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c6fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c706:	d00e      	beq.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c70c:	d816      	bhi.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d018      	beq.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c716:	d111      	bne.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c718:	4bc4      	ldr	r3, [pc, #784]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71c:	4ac3      	ldr	r2, [pc, #780]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c71e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c722:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c724:	e00f      	b.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c72a:	3308      	adds	r3, #8
 800c72c:	2101      	movs	r1, #1
 800c72e:	4618      	mov	r0, r3
 800c730:	f001 f94e 	bl	800d9d0 <RCCEx_PLL2_Config>
 800c734:	4603      	mov	r3, r0
 800c736:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c73a:	e004      	b.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c73c:	2301      	movs	r3, #1
 800c73e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c742:	e000      	b.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c744:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c746:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10a      	bne.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c74e:	4bb7      	ldr	r3, [pc, #732]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c752:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c75a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c75c:	4ab3      	ldr	r2, [pc, #716]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c75e:	430b      	orrs	r3, r1
 800c760:	6513      	str	r3, [r2, #80]	; 0x50
 800c762:	e003      	b.n	800c76c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c764:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c768:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c76c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c774:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800c778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c77c:	2300      	movs	r3, #0
 800c77e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c782:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800c786:	460b      	mov	r3, r1
 800c788:	4313      	orrs	r3, r2
 800c78a:	d039      	beq.n	800c800 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c78c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c792:	2b03      	cmp	r3, #3
 800c794:	d81c      	bhi.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c796:	a201      	add	r2, pc, #4	; (adr r2, 800c79c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c79c:	0800c7d9 	.word	0x0800c7d9
 800c7a0:	0800c7ad 	.word	0x0800c7ad
 800c7a4:	0800c7bb 	.word	0x0800c7bb
 800c7a8:	0800c7d9 	.word	0x0800c7d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7ac:	4b9f      	ldr	r3, [pc, #636]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b0:	4a9e      	ldr	r2, [pc, #632]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c7b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c7b8:	e00f      	b.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c7ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7be:	3308      	adds	r3, #8
 800c7c0:	2102      	movs	r1, #2
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f001 f904 	bl	800d9d0 <RCCEx_PLL2_Config>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c7ce:	e004      	b.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c7d6:	e000      	b.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c7d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d10a      	bne.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c7e2:	4b92      	ldr	r3, [pc, #584]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c7e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7e6:	f023 0103 	bic.w	r1, r3, #3
 800c7ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7f0:	4a8e      	ldr	r2, [pc, #568]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c7f2:	430b      	orrs	r3, r1
 800c7f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c7f6:	e003      	b.n	800c800 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7fc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c808:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800c80c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c810:	2300      	movs	r3, #0
 800c812:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c816:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800c81a:	460b      	mov	r3, r1
 800c81c:	4313      	orrs	r3, r2
 800c81e:	f000 8099 	beq.w	800c954 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c822:	4b83      	ldr	r3, [pc, #524]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a82      	ldr	r2, [pc, #520]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c82c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c82e:	f7f7 ff0b 	bl	8004648 <HAL_GetTick>
 800c832:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c836:	e00b      	b.n	800c850 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c838:	f7f7 ff06 	bl	8004648 <HAL_GetTick>
 800c83c:	4602      	mov	r2, r0
 800c83e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c842:	1ad3      	subs	r3, r2, r3
 800c844:	2b64      	cmp	r3, #100	; 0x64
 800c846:	d903      	bls.n	800c850 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c848:	2303      	movs	r3, #3
 800c84a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c84e:	e005      	b.n	800c85c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c850:	4b77      	ldr	r3, [pc, #476]	; (800ca30 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d0ed      	beq.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c85c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c860:	2b00      	cmp	r3, #0
 800c862:	d173      	bne.n	800c94c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c864:	4b71      	ldr	r3, [pc, #452]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c866:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c86c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c870:	4053      	eors	r3, r2
 800c872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c876:	2b00      	cmp	r3, #0
 800c878:	d015      	beq.n	800c8a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c87a:	4b6c      	ldr	r3, [pc, #432]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c87c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c87e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c882:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c886:	4b69      	ldr	r3, [pc, #420]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c88a:	4a68      	ldr	r2, [pc, #416]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c88c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c890:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c892:	4b66      	ldr	r3, [pc, #408]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c896:	4a65      	ldr	r2, [pc, #404]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c89c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c89e:	4a63      	ldr	r2, [pc, #396]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c8a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c8a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c8a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c8ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8b2:	d118      	bne.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8b4:	f7f7 fec8 	bl	8004648 <HAL_GetTick>
 800c8b8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c8bc:	e00d      	b.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8be:	f7f7 fec3 	bl	8004648 <HAL_GetTick>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c8c8:	1ad2      	subs	r2, r2, r3
 800c8ca:	f241 3388 	movw	r3, #5000	; 0x1388
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d903      	bls.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c8d2:	2303      	movs	r3, #3
 800c8d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800c8d8:	e005      	b.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c8da:	4b54      	ldr	r3, [pc, #336]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8de:	f003 0302 	and.w	r3, r3, #2
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d0eb      	beq.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c8e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d129      	bne.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c8ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c8f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c8fe:	d10e      	bne.n	800c91e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c900:	4b4a      	ldr	r3, [pc, #296]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c902:	691b      	ldr	r3, [r3, #16]
 800c904:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800c908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c90c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c910:	091a      	lsrs	r2, r3, #4
 800c912:	4b48      	ldr	r3, [pc, #288]	; (800ca34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c914:	4013      	ands	r3, r2
 800c916:	4a45      	ldr	r2, [pc, #276]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c918:	430b      	orrs	r3, r1
 800c91a:	6113      	str	r3, [r2, #16]
 800c91c:	e005      	b.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c91e:	4b43      	ldr	r3, [pc, #268]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c920:	691b      	ldr	r3, [r3, #16]
 800c922:	4a42      	ldr	r2, [pc, #264]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c924:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c928:	6113      	str	r3, [r2, #16]
 800c92a:	4b40      	ldr	r3, [pc, #256]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c92c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c92e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c932:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c93a:	4a3c      	ldr	r2, [pc, #240]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c93c:	430b      	orrs	r3, r1
 800c93e:	6713      	str	r3, [r2, #112]	; 0x70
 800c940:	e008      	b.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c942:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c946:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800c94a:	e003      	b.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c94c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c950:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c954:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95c:	f002 0301 	and.w	r3, r2, #1
 800c960:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c964:	2300      	movs	r3, #0
 800c966:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c96a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c96e:	460b      	mov	r3, r1
 800c970:	4313      	orrs	r3, r2
 800c972:	f000 8090 	beq.w	800ca96 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c97a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c97e:	2b28      	cmp	r3, #40	; 0x28
 800c980:	d870      	bhi.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c982:	a201      	add	r2, pc, #4	; (adr r2, 800c988 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c988:	0800ca6d 	.word	0x0800ca6d
 800c98c:	0800ca65 	.word	0x0800ca65
 800c990:	0800ca65 	.word	0x0800ca65
 800c994:	0800ca65 	.word	0x0800ca65
 800c998:	0800ca65 	.word	0x0800ca65
 800c99c:	0800ca65 	.word	0x0800ca65
 800c9a0:	0800ca65 	.word	0x0800ca65
 800c9a4:	0800ca65 	.word	0x0800ca65
 800c9a8:	0800ca39 	.word	0x0800ca39
 800c9ac:	0800ca65 	.word	0x0800ca65
 800c9b0:	0800ca65 	.word	0x0800ca65
 800c9b4:	0800ca65 	.word	0x0800ca65
 800c9b8:	0800ca65 	.word	0x0800ca65
 800c9bc:	0800ca65 	.word	0x0800ca65
 800c9c0:	0800ca65 	.word	0x0800ca65
 800c9c4:	0800ca65 	.word	0x0800ca65
 800c9c8:	0800ca4f 	.word	0x0800ca4f
 800c9cc:	0800ca65 	.word	0x0800ca65
 800c9d0:	0800ca65 	.word	0x0800ca65
 800c9d4:	0800ca65 	.word	0x0800ca65
 800c9d8:	0800ca65 	.word	0x0800ca65
 800c9dc:	0800ca65 	.word	0x0800ca65
 800c9e0:	0800ca65 	.word	0x0800ca65
 800c9e4:	0800ca65 	.word	0x0800ca65
 800c9e8:	0800ca6d 	.word	0x0800ca6d
 800c9ec:	0800ca65 	.word	0x0800ca65
 800c9f0:	0800ca65 	.word	0x0800ca65
 800c9f4:	0800ca65 	.word	0x0800ca65
 800c9f8:	0800ca65 	.word	0x0800ca65
 800c9fc:	0800ca65 	.word	0x0800ca65
 800ca00:	0800ca65 	.word	0x0800ca65
 800ca04:	0800ca65 	.word	0x0800ca65
 800ca08:	0800ca6d 	.word	0x0800ca6d
 800ca0c:	0800ca65 	.word	0x0800ca65
 800ca10:	0800ca65 	.word	0x0800ca65
 800ca14:	0800ca65 	.word	0x0800ca65
 800ca18:	0800ca65 	.word	0x0800ca65
 800ca1c:	0800ca65 	.word	0x0800ca65
 800ca20:	0800ca65 	.word	0x0800ca65
 800ca24:	0800ca65 	.word	0x0800ca65
 800ca28:	0800ca6d 	.word	0x0800ca6d
 800ca2c:	58024400 	.word	0x58024400
 800ca30:	58024800 	.word	0x58024800
 800ca34:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ca38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca3c:	3308      	adds	r3, #8
 800ca3e:	2101      	movs	r1, #1
 800ca40:	4618      	mov	r0, r3
 800ca42:	f000 ffc5 	bl	800d9d0 <RCCEx_PLL2_Config>
 800ca46:	4603      	mov	r3, r0
 800ca48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ca4c:	e00f      	b.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca52:	3328      	adds	r3, #40	; 0x28
 800ca54:	2101      	movs	r1, #1
 800ca56:	4618      	mov	r0, r3
 800ca58:	f001 f86c 	bl	800db34 <RCCEx_PLL3_Config>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ca62:	e004      	b.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca64:	2301      	movs	r3, #1
 800ca66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ca6a:	e000      	b.n	800ca6e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800ca6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d10b      	bne.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ca76:	4bc0      	ldr	r3, [pc, #768]	; (800cd78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ca78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca7a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800ca7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca86:	4abc      	ldr	r2, [pc, #752]	; (800cd78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800ca88:	430b      	orrs	r3, r1
 800ca8a:	6553      	str	r3, [r2, #84]	; 0x54
 800ca8c:	e003      	b.n	800ca96 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ca92:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ca96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ca9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9e:	f002 0302 	and.w	r3, r2, #2
 800caa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800caa6:	2300      	movs	r3, #0
 800caa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800caac:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800cab0:	460b      	mov	r3, r1
 800cab2:	4313      	orrs	r3, r2
 800cab4:	d043      	beq.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800caba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cabe:	2b05      	cmp	r3, #5
 800cac0:	d824      	bhi.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800cac2:	a201      	add	r2, pc, #4	; (adr r2, 800cac8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800cac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac8:	0800cb15 	.word	0x0800cb15
 800cacc:	0800cae1 	.word	0x0800cae1
 800cad0:	0800caf7 	.word	0x0800caf7
 800cad4:	0800cb15 	.word	0x0800cb15
 800cad8:	0800cb15 	.word	0x0800cb15
 800cadc:	0800cb15 	.word	0x0800cb15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cae4:	3308      	adds	r3, #8
 800cae6:	2101      	movs	r1, #1
 800cae8:	4618      	mov	r0, r3
 800caea:	f000 ff71 	bl	800d9d0 <RCCEx_PLL2_Config>
 800caee:	4603      	mov	r3, r0
 800caf0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800caf4:	e00f      	b.n	800cb16 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800caf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cafa:	3328      	adds	r3, #40	; 0x28
 800cafc:	2101      	movs	r1, #1
 800cafe:	4618      	mov	r0, r3
 800cb00:	f001 f818 	bl	800db34 <RCCEx_PLL3_Config>
 800cb04:	4603      	mov	r3, r0
 800cb06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cb0a:	e004      	b.n	800cb16 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cb12:	e000      	b.n	800cb16 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800cb14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d10b      	bne.n	800cb36 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cb1e:	4b96      	ldr	r3, [pc, #600]	; (800cd78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800cb20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb22:	f023 0107 	bic.w	r1, r3, #7
 800cb26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb2e:	4a92      	ldr	r2, [pc, #584]	; (800cd78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800cb30:	430b      	orrs	r3, r1
 800cb32:	6553      	str	r3, [r2, #84]	; 0x54
 800cb34:	e003      	b.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cb3a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cb3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb46:	f002 0304 	and.w	r3, r2, #4
 800cb4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cb4e:	2300      	movs	r3, #0
 800cb50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cb54:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800cb58:	460b      	mov	r3, r1
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	d043      	beq.n	800cbe6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800cb5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cb66:	2b05      	cmp	r3, #5
 800cb68:	d824      	bhi.n	800cbb4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800cb6a:	a201      	add	r2, pc, #4	; (adr r2, 800cb70 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800cb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb70:	0800cbbd 	.word	0x0800cbbd
 800cb74:	0800cb89 	.word	0x0800cb89
 800cb78:	0800cb9f 	.word	0x0800cb9f
 800cb7c:	0800cbbd 	.word	0x0800cbbd
 800cb80:	0800cbbd 	.word	0x0800cbbd
 800cb84:	0800cbbd 	.word	0x0800cbbd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cb8c:	3308      	adds	r3, #8
 800cb8e:	2101      	movs	r1, #1
 800cb90:	4618      	mov	r0, r3
 800cb92:	f000 ff1d 	bl	800d9d0 <RCCEx_PLL2_Config>
 800cb96:	4603      	mov	r3, r0
 800cb98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800cb9c:	e00f      	b.n	800cbbe <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cba2:	3328      	adds	r3, #40	; 0x28
 800cba4:	2101      	movs	r1, #1
 800cba6:	4618      	mov	r0, r3
 800cba8:	f000 ffc4 	bl	800db34 <RCCEx_PLL3_Config>
 800cbac:	4603      	mov	r3, r0
 800cbae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800cbb2:	e004      	b.n	800cbbe <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cbba:	e000      	b.n	800cbbe <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800cbbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbbe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d10b      	bne.n	800cbde <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cbc6:	4b6c      	ldr	r3, [pc, #432]	; (800cd78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800cbc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbca:	f023 0107 	bic.w	r1, r3, #7
 800cbce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cbd6:	4a68      	ldr	r2, [pc, #416]	; (800cd78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800cbd8:	430b      	orrs	r3, r1
 800cbda:	6593      	str	r3, [r2, #88]	; 0x58
 800cbdc:	e003      	b.n	800cbe6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbde:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cbe2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cbe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbee:	f002 0320 	and.w	r3, r2, #32
 800cbf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cbfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cc00:	460b      	mov	r3, r1
 800cc02:	4313      	orrs	r3, r2
 800cc04:	d055      	beq.n	800ccb2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800cc06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cc0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc12:	d033      	beq.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800cc14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc18:	d82c      	bhi.n	800cc74 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800cc1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc1e:	d02f      	beq.n	800cc80 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800cc20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc24:	d826      	bhi.n	800cc74 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800cc26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cc2a:	d02b      	beq.n	800cc84 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800cc2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cc30:	d820      	bhi.n	800cc74 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800cc32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc36:	d012      	beq.n	800cc5e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800cc38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc3c:	d81a      	bhi.n	800cc74 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d022      	beq.n	800cc88 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800cc42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc46:	d115      	bne.n	800cc74 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cc48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc4c:	3308      	adds	r3, #8
 800cc4e:	2100      	movs	r1, #0
 800cc50:	4618      	mov	r0, r3
 800cc52:	f000 febd 	bl	800d9d0 <RCCEx_PLL2_Config>
 800cc56:	4603      	mov	r3, r0
 800cc58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800cc5c:	e015      	b.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cc5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc62:	3328      	adds	r3, #40	; 0x28
 800cc64:	2102      	movs	r1, #2
 800cc66:	4618      	mov	r0, r3
 800cc68:	f000 ff64 	bl	800db34 <RCCEx_PLL3_Config>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800cc72:	e00a      	b.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc74:	2301      	movs	r3, #1
 800cc76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cc7a:	e006      	b.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800cc7c:	bf00      	nop
 800cc7e:	e004      	b.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800cc80:	bf00      	nop
 800cc82:	e002      	b.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800cc84:	bf00      	nop
 800cc86:	e000      	b.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800cc88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc8a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d10b      	bne.n	800ccaa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cc92:	4b39      	ldr	r3, [pc, #228]	; (800cd78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800cc94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc96:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800cc9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cc9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cca2:	4a35      	ldr	r2, [pc, #212]	; (800cd78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800cca4:	430b      	orrs	r3, r1
 800cca6:	6553      	str	r3, [r2, #84]	; 0x54
 800cca8:	e003      	b.n	800ccb2 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccaa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ccae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ccb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccba:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800ccbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ccc8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800cccc:	460b      	mov	r3, r1
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	d058      	beq.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ccd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ccd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ccda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ccde:	d033      	beq.n	800cd48 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800cce0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cce4:	d82c      	bhi.n	800cd40 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800cce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccea:	d02f      	beq.n	800cd4c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800ccec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccf0:	d826      	bhi.n	800cd40 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800ccf2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ccf6:	d02b      	beq.n	800cd50 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ccf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ccfc:	d820      	bhi.n	800cd40 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800ccfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd02:	d012      	beq.n	800cd2a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800cd04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd08:	d81a      	bhi.n	800cd40 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d022      	beq.n	800cd54 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800cd0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd12:	d115      	bne.n	800cd40 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd18:	3308      	adds	r3, #8
 800cd1a:	2100      	movs	r1, #0
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f000 fe57 	bl	800d9d0 <RCCEx_PLL2_Config>
 800cd22:	4603      	mov	r3, r0
 800cd24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800cd28:	e015      	b.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cd2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd2e:	3328      	adds	r3, #40	; 0x28
 800cd30:	2102      	movs	r1, #2
 800cd32:	4618      	mov	r0, r3
 800cd34:	f000 fefe 	bl	800db34 <RCCEx_PLL3_Config>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800cd3e:	e00a      	b.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd40:	2301      	movs	r3, #1
 800cd42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cd46:	e006      	b.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800cd48:	bf00      	nop
 800cd4a:	e004      	b.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800cd4c:	bf00      	nop
 800cd4e:	e002      	b.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800cd50:	bf00      	nop
 800cd52:	e000      	b.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800cd54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d10e      	bne.n	800cd7c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cd5e:	4b06      	ldr	r3, [pc, #24]	; (800cd78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800cd60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd62:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800cd66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cd6e:	4a02      	ldr	r2, [pc, #8]	; (800cd78 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800cd70:	430b      	orrs	r3, r1
 800cd72:	6593      	str	r3, [r2, #88]	; 0x58
 800cd74:	e006      	b.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800cd76:	bf00      	nop
 800cd78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cd80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cd84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800cd90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cd94:	2300      	movs	r3, #0
 800cd96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cd9a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800cd9e:	460b      	mov	r3, r1
 800cda0:	4313      	orrs	r3, r2
 800cda2:	d055      	beq.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800cda4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cda8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cdac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cdb0:	d033      	beq.n	800ce1a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800cdb2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cdb6:	d82c      	bhi.n	800ce12 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800cdb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cdbc:	d02f      	beq.n	800ce1e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800cdbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cdc2:	d826      	bhi.n	800ce12 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800cdc4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cdc8:	d02b      	beq.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800cdca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cdce:	d820      	bhi.n	800ce12 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800cdd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cdd4:	d012      	beq.n	800cdfc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800cdd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cdda:	d81a      	bhi.n	800ce12 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d022      	beq.n	800ce26 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800cde0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cde4:	d115      	bne.n	800ce12 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cde6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cdea:	3308      	adds	r3, #8
 800cdec:	2100      	movs	r1, #0
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f000 fdee 	bl	800d9d0 <RCCEx_PLL2_Config>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800cdfa:	e015      	b.n	800ce28 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cdfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce00:	3328      	adds	r3, #40	; 0x28
 800ce02:	2102      	movs	r1, #2
 800ce04:	4618      	mov	r0, r3
 800ce06:	f000 fe95 	bl	800db34 <RCCEx_PLL3_Config>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ce10:	e00a      	b.n	800ce28 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce12:	2301      	movs	r3, #1
 800ce14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ce18:	e006      	b.n	800ce28 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800ce1a:	bf00      	nop
 800ce1c:	e004      	b.n	800ce28 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800ce1e:	bf00      	nop
 800ce20:	e002      	b.n	800ce28 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800ce22:	bf00      	nop
 800ce24:	e000      	b.n	800ce28 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800ce26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d10b      	bne.n	800ce48 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ce30:	4ba1      	ldr	r3, [pc, #644]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ce32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce34:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800ce38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ce40:	4a9d      	ldr	r2, [pc, #628]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ce42:	430b      	orrs	r3, r1
 800ce44:	6593      	str	r3, [r2, #88]	; 0x58
 800ce46:	e003      	b.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ce4c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ce50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce58:	f002 0308 	and.w	r3, r2, #8
 800ce5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ce60:	2300      	movs	r3, #0
 800ce62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ce66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	d01e      	beq.n	800ceae <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ce70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce7c:	d10c      	bne.n	800ce98 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ce7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ce82:	3328      	adds	r3, #40	; 0x28
 800ce84:	2102      	movs	r1, #2
 800ce86:	4618      	mov	r0, r3
 800ce88:	f000 fe54 	bl	800db34 <RCCEx_PLL3_Config>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d002      	beq.n	800ce98 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800ce92:	2301      	movs	r3, #1
 800ce94:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ce98:	4b87      	ldr	r3, [pc, #540]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ce9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cea0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cea8:	4a83      	ldr	r2, [pc, #524]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ceaa:	430b      	orrs	r3, r1
 800ceac:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ceae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ceb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb6:	f002 0310 	and.w	r3, r2, #16
 800ceba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cebe:	2300      	movs	r3, #0
 800cec0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cec4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800cec8:	460b      	mov	r3, r1
 800ceca:	4313      	orrs	r3, r2
 800cecc:	d01e      	beq.n	800cf0c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800cece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ced2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ced6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ceda:	d10c      	bne.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cedc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cee0:	3328      	adds	r3, #40	; 0x28
 800cee2:	2102      	movs	r1, #2
 800cee4:	4618      	mov	r0, r3
 800cee6:	f000 fe25 	bl	800db34 <RCCEx_PLL3_Config>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d002      	beq.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800cef0:	2301      	movs	r3, #1
 800cef2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cef6:	4b70      	ldr	r3, [pc, #448]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800cef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cefa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cefe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cf06:	4a6c      	ldr	r2, [pc, #432]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800cf08:	430b      	orrs	r3, r1
 800cf0a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cf0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf14:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800cf18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cf22:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800cf26:	460b      	mov	r3, r1
 800cf28:	4313      	orrs	r3, r2
 800cf2a:	d03e      	beq.n	800cfaa <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800cf2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cf34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf38:	d022      	beq.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800cf3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf3e:	d81b      	bhi.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d003      	beq.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800cf44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf48:	d00b      	beq.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800cf4a:	e015      	b.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf50:	3308      	adds	r3, #8
 800cf52:	2100      	movs	r1, #0
 800cf54:	4618      	mov	r0, r3
 800cf56:	f000 fd3b 	bl	800d9d0 <RCCEx_PLL2_Config>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800cf60:	e00f      	b.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cf62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf66:	3328      	adds	r3, #40	; 0x28
 800cf68:	2102      	movs	r1, #2
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f000 fde2 	bl	800db34 <RCCEx_PLL3_Config>
 800cf70:	4603      	mov	r3, r0
 800cf72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800cf76:	e004      	b.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf78:	2301      	movs	r3, #1
 800cf7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800cf7e:	e000      	b.n	800cf82 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800cf80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d10b      	bne.n	800cfa2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cf8a:	4b4b      	ldr	r3, [pc, #300]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800cf8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf8e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800cf92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cf96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cf9a:	4a47      	ldr	r2, [pc, #284]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800cf9c:	430b      	orrs	r3, r1
 800cf9e:	6593      	str	r3, [r2, #88]	; 0x58
 800cfa0:	e003      	b.n	800cfaa <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfa2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800cfa6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cfaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800cfb6:	67bb      	str	r3, [r7, #120]	; 0x78
 800cfb8:	2300      	movs	r3, #0
 800cfba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cfbc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	d03b      	beq.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800cfc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cfca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cfd2:	d01f      	beq.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800cfd4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cfd8:	d818      	bhi.n	800d00c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800cfda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfde:	d003      	beq.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800cfe0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cfe4:	d007      	beq.n	800cff6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800cfe6:	e011      	b.n	800d00c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cfe8:	4b33      	ldr	r3, [pc, #204]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800cfea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfec:	4a32      	ldr	r2, [pc, #200]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800cfee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cff2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800cff4:	e00f      	b.n	800d016 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800cffa:	3328      	adds	r3, #40	; 0x28
 800cffc:	2101      	movs	r1, #1
 800cffe:	4618      	mov	r0, r3
 800d000:	f000 fd98 	bl	800db34 <RCCEx_PLL3_Config>
 800d004:	4603      	mov	r3, r0
 800d006:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800d00a:	e004      	b.n	800d016 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d00c:	2301      	movs	r3, #1
 800d00e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d012:	e000      	b.n	800d016 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800d014:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d016:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d10b      	bne.n	800d036 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d01e:	4b26      	ldr	r3, [pc, #152]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d022:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d02a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d02e:	4a22      	ldr	r2, [pc, #136]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d030:	430b      	orrs	r3, r1
 800d032:	6553      	str	r3, [r2, #84]	; 0x54
 800d034:	e003      	b.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d036:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d03a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d03e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d046:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800d04a:	673b      	str	r3, [r7, #112]	; 0x70
 800d04c:	2300      	movs	r3, #0
 800d04e:	677b      	str	r3, [r7, #116]	; 0x74
 800d050:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800d054:	460b      	mov	r3, r1
 800d056:	4313      	orrs	r3, r2
 800d058:	d034      	beq.n	800d0c4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d05a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d05e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d060:	2b00      	cmp	r3, #0
 800d062:	d003      	beq.n	800d06c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800d064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d068:	d007      	beq.n	800d07a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800d06a:	e011      	b.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d06c:	4b12      	ldr	r3, [pc, #72]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d070:	4a11      	ldr	r2, [pc, #68]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d076:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d078:	e00e      	b.n	800d098 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d07a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d07e:	3308      	adds	r3, #8
 800d080:	2102      	movs	r1, #2
 800d082:	4618      	mov	r0, r3
 800d084:	f000 fca4 	bl	800d9d0 <RCCEx_PLL2_Config>
 800d088:	4603      	mov	r3, r0
 800d08a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d08e:	e003      	b.n	800d098 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800d090:	2301      	movs	r3, #1
 800d092:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d096:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d098:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d10d      	bne.n	800d0bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d0a0:	4b05      	ldr	r3, [pc, #20]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d0a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d0a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0ae:	4a02      	ldr	r2, [pc, #8]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d0b0:	430b      	orrs	r3, r1
 800d0b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d0b4:	e006      	b.n	800d0c4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800d0b6:	bf00      	nop
 800d0b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d0c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d0c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0cc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800d0d0:	66bb      	str	r3, [r7, #104]	; 0x68
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d0d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800d0da:	460b      	mov	r3, r1
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	d00c      	beq.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d0e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0e4:	3328      	adds	r3, #40	; 0x28
 800d0e6:	2102      	movs	r1, #2
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f000 fd23 	bl	800db34 <RCCEx_PLL3_Config>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d002      	beq.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d0fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d102:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800d106:	663b      	str	r3, [r7, #96]	; 0x60
 800d108:	2300      	movs	r3, #0
 800d10a:	667b      	str	r3, [r7, #100]	; 0x64
 800d10c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d110:	460b      	mov	r3, r1
 800d112:	4313      	orrs	r3, r2
 800d114:	d038      	beq.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d11a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d11e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d122:	d018      	beq.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800d124:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d128:	d811      	bhi.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800d12a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d12e:	d014      	beq.n	800d15a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800d130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d134:	d80b      	bhi.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800d136:	2b00      	cmp	r3, #0
 800d138:	d011      	beq.n	800d15e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800d13a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d13e:	d106      	bne.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d140:	4bc3      	ldr	r3, [pc, #780]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d144:	4ac2      	ldr	r2, [pc, #776]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d14a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d14c:	e008      	b.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d14e:	2301      	movs	r3, #1
 800d150:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d154:	e004      	b.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800d156:	bf00      	nop
 800d158:	e002      	b.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800d15a:	bf00      	nop
 800d15c:	e000      	b.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800d15e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d160:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d164:	2b00      	cmp	r3, #0
 800d166:	d10b      	bne.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d168:	4bb9      	ldr	r3, [pc, #740]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d16a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d16c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d178:	4ab5      	ldr	r2, [pc, #724]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d17a:	430b      	orrs	r3, r1
 800d17c:	6553      	str	r3, [r2, #84]	; 0x54
 800d17e:	e003      	b.n	800d188 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d180:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d184:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d188:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d190:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800d194:	65bb      	str	r3, [r7, #88]	; 0x58
 800d196:	2300      	movs	r3, #0
 800d198:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d19a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800d19e:	460b      	mov	r3, r1
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	d009      	beq.n	800d1b8 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d1a4:	4baa      	ldr	r3, [pc, #680]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d1a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d1ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1b2:	4aa7      	ldr	r2, [pc, #668]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d1b4:	430b      	orrs	r3, r1
 800d1b6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d1b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800d1c4:	653b      	str	r3, [r7, #80]	; 0x50
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	657b      	str	r3, [r7, #84]	; 0x54
 800d1ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800d1ce:	460b      	mov	r3, r1
 800d1d0:	4313      	orrs	r3, r2
 800d1d2:	d009      	beq.n	800d1e8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d1d4:	4b9e      	ldr	r3, [pc, #632]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d1d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1d8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800d1dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1e2:	4a9b      	ldr	r2, [pc, #620]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d1e4:	430b      	orrs	r3, r1
 800d1e6:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800d1e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800d1f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d1fa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800d1fe:	460b      	mov	r3, r1
 800d200:	4313      	orrs	r3, r2
 800d202:	d009      	beq.n	800d218 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800d204:	4b92      	ldr	r3, [pc, #584]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d208:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800d20c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d212:	4a8f      	ldr	r2, [pc, #572]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d214:	430b      	orrs	r3, r1
 800d216:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d218:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d220:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800d224:	643b      	str	r3, [r7, #64]	; 0x40
 800d226:	2300      	movs	r3, #0
 800d228:	647b      	str	r3, [r7, #68]	; 0x44
 800d22a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d22e:	460b      	mov	r3, r1
 800d230:	4313      	orrs	r3, r2
 800d232:	d00e      	beq.n	800d252 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d234:	4b86      	ldr	r3, [pc, #536]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d236:	691b      	ldr	r3, [r3, #16]
 800d238:	4a85      	ldr	r2, [pc, #532]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d23a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d23e:	6113      	str	r3, [r2, #16]
 800d240:	4b83      	ldr	r3, [pc, #524]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d242:	6919      	ldr	r1, [r3, #16]
 800d244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d248:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d24c:	4a80      	ldr	r2, [pc, #512]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d24e:	430b      	orrs	r3, r1
 800d250:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800d25e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d260:	2300      	movs	r3, #0
 800d262:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d264:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800d268:	460b      	mov	r3, r1
 800d26a:	4313      	orrs	r3, r2
 800d26c:	d009      	beq.n	800d282 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d26e:	4b78      	ldr	r3, [pc, #480]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d272:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d27a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d27c:	4a74      	ldr	r2, [pc, #464]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d27e:	430b      	orrs	r3, r1
 800d280:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800d28e:	633b      	str	r3, [r7, #48]	; 0x30
 800d290:	2300      	movs	r3, #0
 800d292:	637b      	str	r3, [r7, #52]	; 0x34
 800d294:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800d298:	460b      	mov	r3, r1
 800d29a:	4313      	orrs	r3, r2
 800d29c:	d00a      	beq.n	800d2b4 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d29e:	4b6c      	ldr	r3, [pc, #432]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2a2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800d2a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d2ae:	4a68      	ldr	r2, [pc, #416]	; (800d450 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800d2b0:	430b      	orrs	r3, r1
 800d2b2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d2b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2bc:	2100      	movs	r1, #0
 800d2be:	62b9      	str	r1, [r7, #40]	; 0x28
 800d2c0:	f003 0301 	and.w	r3, r3, #1
 800d2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2c6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800d2ca:	460b      	mov	r3, r1
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	d011      	beq.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d2d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2d4:	3308      	adds	r3, #8
 800d2d6:	2100      	movs	r1, #0
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f000 fb79 	bl	800d9d0 <RCCEx_PLL2_Config>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800d2e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d003      	beq.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d2f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d2f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	6239      	str	r1, [r7, #32]
 800d300:	f003 0302 	and.w	r3, r3, #2
 800d304:	627b      	str	r3, [r7, #36]	; 0x24
 800d306:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d30a:	460b      	mov	r3, r1
 800d30c:	4313      	orrs	r3, r2
 800d30e:	d011      	beq.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d314:	3308      	adds	r3, #8
 800d316:	2101      	movs	r1, #1
 800d318:	4618      	mov	r0, r3
 800d31a:	f000 fb59 	bl	800d9d0 <RCCEx_PLL2_Config>
 800d31e:	4603      	mov	r3, r0
 800d320:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800d324:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d003      	beq.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d32c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d330:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33c:	2100      	movs	r1, #0
 800d33e:	61b9      	str	r1, [r7, #24]
 800d340:	f003 0304 	and.w	r3, r3, #4
 800d344:	61fb      	str	r3, [r7, #28]
 800d346:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d34a:	460b      	mov	r3, r1
 800d34c:	4313      	orrs	r3, r2
 800d34e:	d011      	beq.n	800d374 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d350:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d354:	3308      	adds	r3, #8
 800d356:	2102      	movs	r1, #2
 800d358:	4618      	mov	r0, r3
 800d35a:	f000 fb39 	bl	800d9d0 <RCCEx_PLL2_Config>
 800d35e:	4603      	mov	r3, r0
 800d360:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800d364:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d003      	beq.n	800d374 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d36c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d370:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37c:	2100      	movs	r1, #0
 800d37e:	6139      	str	r1, [r7, #16]
 800d380:	f003 0308 	and.w	r3, r3, #8
 800d384:	617b      	str	r3, [r7, #20]
 800d386:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d38a:	460b      	mov	r3, r1
 800d38c:	4313      	orrs	r3, r2
 800d38e:	d011      	beq.n	800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d394:	3328      	adds	r3, #40	; 0x28
 800d396:	2100      	movs	r1, #0
 800d398:	4618      	mov	r0, r3
 800d39a:	f000 fbcb 	bl	800db34 <RCCEx_PLL3_Config>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800d3a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d003      	beq.n	800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d3b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d3b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3bc:	2100      	movs	r1, #0
 800d3be:	60b9      	str	r1, [r7, #8]
 800d3c0:	f003 0310 	and.w	r3, r3, #16
 800d3c4:	60fb      	str	r3, [r7, #12]
 800d3c6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	d011      	beq.n	800d3f4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d3d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3d4:	3328      	adds	r3, #40	; 0x28
 800d3d6:	2101      	movs	r1, #1
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f000 fbab 	bl	800db34 <RCCEx_PLL3_Config>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800d3e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d003      	beq.n	800d3f4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d3f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d3f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3fc:	2100      	movs	r1, #0
 800d3fe:	6039      	str	r1, [r7, #0]
 800d400:	f003 0320 	and.w	r3, r3, #32
 800d404:	607b      	str	r3, [r7, #4]
 800d406:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d40a:	460b      	mov	r3, r1
 800d40c:	4313      	orrs	r3, r2
 800d40e:	d011      	beq.n	800d434 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d414:	3328      	adds	r3, #40	; 0x28
 800d416:	2102      	movs	r1, #2
 800d418:	4618      	mov	r0, r3
 800d41a:	f000 fb8b 	bl	800db34 <RCCEx_PLL3_Config>
 800d41e:	4603      	mov	r3, r0
 800d420:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800d424:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d003      	beq.n	800d434 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d42c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d430:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800d434:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d101      	bne.n	800d440 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800d43c:	2300      	movs	r3, #0
 800d43e:	e000      	b.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800d440:	2301      	movs	r3, #1
}
 800d442:	4618      	mov	r0, r3
 800d444:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800d448:	46bd      	mov	sp, r7
 800d44a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d44e:	bf00      	nop
 800d450:	58024400 	.word	0x58024400

0800d454 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800d458:	f7fe fde2 	bl	800c020 <HAL_RCC_GetHCLKFreq>
 800d45c:	4602      	mov	r2, r0
 800d45e:	4b06      	ldr	r3, [pc, #24]	; (800d478 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d460:	6a1b      	ldr	r3, [r3, #32]
 800d462:	091b      	lsrs	r3, r3, #4
 800d464:	f003 0307 	and.w	r3, r3, #7
 800d468:	4904      	ldr	r1, [pc, #16]	; (800d47c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d46a:	5ccb      	ldrb	r3, [r1, r3]
 800d46c:	f003 031f 	and.w	r3, r3, #31
 800d470:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800d474:	4618      	mov	r0, r3
 800d476:	bd80      	pop	{r7, pc}
 800d478:	58024400 	.word	0x58024400
 800d47c:	080115f4 	.word	0x080115f4

0800d480 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d480:	b480      	push	{r7}
 800d482:	b089      	sub	sp, #36	; 0x24
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d488:	4ba1      	ldr	r3, [pc, #644]	; (800d710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d48c:	f003 0303 	and.w	r3, r3, #3
 800d490:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d492:	4b9f      	ldr	r3, [pc, #636]	; (800d710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d496:	0b1b      	lsrs	r3, r3, #12
 800d498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d49c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d49e:	4b9c      	ldr	r3, [pc, #624]	; (800d710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a2:	091b      	lsrs	r3, r3, #4
 800d4a4:	f003 0301 	and.w	r3, r3, #1
 800d4a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d4aa:	4b99      	ldr	r3, [pc, #612]	; (800d710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ae:	08db      	lsrs	r3, r3, #3
 800d4b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d4b4:	693a      	ldr	r2, [r7, #16]
 800d4b6:	fb02 f303 	mul.w	r3, r2, r3
 800d4ba:	ee07 3a90 	vmov	s15, r3
 800d4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	f000 8111 	beq.w	800d6f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d4ce:	69bb      	ldr	r3, [r7, #24]
 800d4d0:	2b02      	cmp	r3, #2
 800d4d2:	f000 8083 	beq.w	800d5dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d4d6:	69bb      	ldr	r3, [r7, #24]
 800d4d8:	2b02      	cmp	r3, #2
 800d4da:	f200 80a1 	bhi.w	800d620 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d003      	beq.n	800d4ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d4e4:	69bb      	ldr	r3, [r7, #24]
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	d056      	beq.n	800d598 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d4ea:	e099      	b.n	800d620 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4ec:	4b88      	ldr	r3, [pc, #544]	; (800d710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f003 0320 	and.w	r3, r3, #32
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d02d      	beq.n	800d554 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d4f8:	4b85      	ldr	r3, [pc, #532]	; (800d710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	08db      	lsrs	r3, r3, #3
 800d4fe:	f003 0303 	and.w	r3, r3, #3
 800d502:	4a84      	ldr	r2, [pc, #528]	; (800d714 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d504:	fa22 f303 	lsr.w	r3, r2, r3
 800d508:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	ee07 3a90 	vmov	s15, r3
 800d510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	ee07 3a90 	vmov	s15, r3
 800d51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d51e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d522:	4b7b      	ldr	r3, [pc, #492]	; (800d710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d52a:	ee07 3a90 	vmov	s15, r3
 800d52e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d532:	ed97 6a03 	vldr	s12, [r7, #12]
 800d536:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d53a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d53e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d54a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d54e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d552:	e087      	b.n	800d664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	ee07 3a90 	vmov	s15, r3
 800d55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d55e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d71c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d566:	4b6a      	ldr	r3, [pc, #424]	; (800d710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d56a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d56e:	ee07 3a90 	vmov	s15, r3
 800d572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d576:	ed97 6a03 	vldr	s12, [r7, #12]
 800d57a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d57e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d58a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d58e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d596:	e065      	b.n	800d664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	ee07 3a90 	vmov	s15, r3
 800d59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d720 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d5a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5aa:	4b59      	ldr	r3, [pc, #356]	; (800d710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5b2:	ee07 3a90 	vmov	s15, r3
 800d5b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5be:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d5c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5da:	e043      	b.n	800d664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	ee07 3a90 	vmov	s15, r3
 800d5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d724 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5ee:	4b48      	ldr	r3, [pc, #288]	; (800d710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5f6:	ee07 3a90 	vmov	s15, r3
 800d5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800d602:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d60e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d61a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d61e:	e021      	b.n	800d664 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	ee07 3a90 	vmov	s15, r3
 800d626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d62a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d720 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d632:	4b37      	ldr	r3, [pc, #220]	; (800d710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d63a:	ee07 3a90 	vmov	s15, r3
 800d63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d642:	ed97 6a03 	vldr	s12, [r7, #12]
 800d646:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d718 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d65e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d662:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d664:	4b2a      	ldr	r3, [pc, #168]	; (800d710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d668:	0a5b      	lsrs	r3, r3, #9
 800d66a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d66e:	ee07 3a90 	vmov	s15, r3
 800d672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d676:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d67a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d67e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d68a:	ee17 2a90 	vmov	r2, s15
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d692:	4b1f      	ldr	r3, [pc, #124]	; (800d710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d696:	0c1b      	lsrs	r3, r3, #16
 800d698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d69c:	ee07 3a90 	vmov	s15, r3
 800d6a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6b8:	ee17 2a90 	vmov	r2, s15
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d6c0:	4b13      	ldr	r3, [pc, #76]	; (800d710 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6c4:	0e1b      	lsrs	r3, r3, #24
 800d6c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6ca:	ee07 3a90 	vmov	s15, r3
 800d6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6da:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6e6:	ee17 2a90 	vmov	r2, s15
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d6ee:	e008      	b.n	800d702 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2200      	movs	r2, #0
 800d700:	609a      	str	r2, [r3, #8]
}
 800d702:	bf00      	nop
 800d704:	3724      	adds	r7, #36	; 0x24
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop
 800d710:	58024400 	.word	0x58024400
 800d714:	03d09000 	.word	0x03d09000
 800d718:	46000000 	.word	0x46000000
 800d71c:	4c742400 	.word	0x4c742400
 800d720:	4a742400 	.word	0x4a742400
 800d724:	4bb71b00 	.word	0x4bb71b00

0800d728 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d728:	b480      	push	{r7}
 800d72a:	b089      	sub	sp, #36	; 0x24
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d730:	4ba1      	ldr	r3, [pc, #644]	; (800d9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d734:	f003 0303 	and.w	r3, r3, #3
 800d738:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d73a:	4b9f      	ldr	r3, [pc, #636]	; (800d9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d73e:	0d1b      	lsrs	r3, r3, #20
 800d740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d744:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d746:	4b9c      	ldr	r3, [pc, #624]	; (800d9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d74a:	0a1b      	lsrs	r3, r3, #8
 800d74c:	f003 0301 	and.w	r3, r3, #1
 800d750:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d752:	4b99      	ldr	r3, [pc, #612]	; (800d9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d756:	08db      	lsrs	r3, r3, #3
 800d758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d75c:	693a      	ldr	r2, [r7, #16]
 800d75e:	fb02 f303 	mul.w	r3, r2, r3
 800d762:	ee07 3a90 	vmov	s15, r3
 800d766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d76a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	2b00      	cmp	r3, #0
 800d772:	f000 8111 	beq.w	800d998 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d776:	69bb      	ldr	r3, [r7, #24]
 800d778:	2b02      	cmp	r3, #2
 800d77a:	f000 8083 	beq.w	800d884 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d77e:	69bb      	ldr	r3, [r7, #24]
 800d780:	2b02      	cmp	r3, #2
 800d782:	f200 80a1 	bhi.w	800d8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d003      	beq.n	800d794 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	2b01      	cmp	r3, #1
 800d790:	d056      	beq.n	800d840 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d792:	e099      	b.n	800d8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d794:	4b88      	ldr	r3, [pc, #544]	; (800d9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f003 0320 	and.w	r3, r3, #32
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d02d      	beq.n	800d7fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d7a0:	4b85      	ldr	r3, [pc, #532]	; (800d9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	08db      	lsrs	r3, r3, #3
 800d7a6:	f003 0303 	and.w	r3, r3, #3
 800d7aa:	4a84      	ldr	r2, [pc, #528]	; (800d9bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d7ac:	fa22 f303 	lsr.w	r3, r2, r3
 800d7b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	ee07 3a90 	vmov	s15, r3
 800d7b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	ee07 3a90 	vmov	s15, r3
 800d7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7ca:	4b7b      	ldr	r3, [pc, #492]	; (800d9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7d2:	ee07 3a90 	vmov	s15, r3
 800d7d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7da:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7de:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d7e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d7fa:	e087      	b.n	800d90c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	ee07 3a90 	vmov	s15, r3
 800d802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d806:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d80a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d80e:	4b6a      	ldr	r3, [pc, #424]	; (800d9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d816:	ee07 3a90 	vmov	s15, r3
 800d81a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d81e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d822:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d82a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d82e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d83a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d83e:	e065      	b.n	800d90c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	ee07 3a90 	vmov	s15, r3
 800d846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d84a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d84e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d852:	4b59      	ldr	r3, [pc, #356]	; (800d9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d85a:	ee07 3a90 	vmov	s15, r3
 800d85e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d862:	ed97 6a03 	vldr	s12, [r7, #12]
 800d866:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d86a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d86e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d87a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d87e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d882:	e043      	b.n	800d90c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	ee07 3a90 	vmov	s15, r3
 800d88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d88e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d9cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d896:	4b48      	ldr	r3, [pc, #288]	; (800d9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d89e:	ee07 3a90 	vmov	s15, r3
 800d8a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d8ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d8c6:	e021      	b.n	800d90c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	ee07 3a90 	vmov	s15, r3
 800d8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d8d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8da:	4b37      	ldr	r3, [pc, #220]	; (800d9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8e2:	ee07 3a90 	vmov	s15, r3
 800d8e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d8f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d902:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d90a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d90c:	4b2a      	ldr	r3, [pc, #168]	; (800d9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d910:	0a5b      	lsrs	r3, r3, #9
 800d912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d916:	ee07 3a90 	vmov	s15, r3
 800d91a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d91e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d922:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d926:	edd7 6a07 	vldr	s13, [r7, #28]
 800d92a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d92e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d932:	ee17 2a90 	vmov	r2, s15
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d93a:	4b1f      	ldr	r3, [pc, #124]	; (800d9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d93e:	0c1b      	lsrs	r3, r3, #16
 800d940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d944:	ee07 3a90 	vmov	s15, r3
 800d948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d94c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d950:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d954:	edd7 6a07 	vldr	s13, [r7, #28]
 800d958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d95c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d960:	ee17 2a90 	vmov	r2, s15
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d968:	4b13      	ldr	r3, [pc, #76]	; (800d9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d96c:	0e1b      	lsrs	r3, r3, #24
 800d96e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d972:	ee07 3a90 	vmov	s15, r3
 800d976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d97a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d97e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d982:	edd7 6a07 	vldr	s13, [r7, #28]
 800d986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d98a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d98e:	ee17 2a90 	vmov	r2, s15
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d996:	e008      	b.n	800d9aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2200      	movs	r2, #0
 800d99c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	609a      	str	r2, [r3, #8]
}
 800d9aa:	bf00      	nop
 800d9ac:	3724      	adds	r7, #36	; 0x24
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr
 800d9b6:	bf00      	nop
 800d9b8:	58024400 	.word	0x58024400
 800d9bc:	03d09000 	.word	0x03d09000
 800d9c0:	46000000 	.word	0x46000000
 800d9c4:	4c742400 	.word	0x4c742400
 800d9c8:	4a742400 	.word	0x4a742400
 800d9cc:	4bb71b00 	.word	0x4bb71b00

0800d9d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d9de:	4b53      	ldr	r3, [pc, #332]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800d9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9e2:	f003 0303 	and.w	r3, r3, #3
 800d9e6:	2b03      	cmp	r3, #3
 800d9e8:	d101      	bne.n	800d9ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	e099      	b.n	800db22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d9ee:	4b4f      	ldr	r3, [pc, #316]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4a4e      	ldr	r2, [pc, #312]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800d9f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d9f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9fa:	f7f6 fe25 	bl	8004648 <HAL_GetTick>
 800d9fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800da00:	e008      	b.n	800da14 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800da02:	f7f6 fe21 	bl	8004648 <HAL_GetTick>
 800da06:	4602      	mov	r2, r0
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	1ad3      	subs	r3, r2, r3
 800da0c:	2b02      	cmp	r3, #2
 800da0e:	d901      	bls.n	800da14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800da10:	2303      	movs	r3, #3
 800da12:	e086      	b.n	800db22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800da14:	4b45      	ldr	r3, [pc, #276]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d1f0      	bne.n	800da02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800da20:	4b42      	ldr	r3, [pc, #264]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800da22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da24:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	031b      	lsls	r3, r3, #12
 800da2e:	493f      	ldr	r1, [pc, #252]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800da30:	4313      	orrs	r3, r2
 800da32:	628b      	str	r3, [r1, #40]	; 0x28
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	3b01      	subs	r3, #1
 800da3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	689b      	ldr	r3, [r3, #8]
 800da42:	3b01      	subs	r3, #1
 800da44:	025b      	lsls	r3, r3, #9
 800da46:	b29b      	uxth	r3, r3
 800da48:	431a      	orrs	r2, r3
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	3b01      	subs	r3, #1
 800da50:	041b      	lsls	r3, r3, #16
 800da52:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800da56:	431a      	orrs	r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	691b      	ldr	r3, [r3, #16]
 800da5c:	3b01      	subs	r3, #1
 800da5e:	061b      	lsls	r3, r3, #24
 800da60:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800da64:	4931      	ldr	r1, [pc, #196]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800da66:	4313      	orrs	r3, r2
 800da68:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800da6a:	4b30      	ldr	r3, [pc, #192]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800da6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	695b      	ldr	r3, [r3, #20]
 800da76:	492d      	ldr	r1, [pc, #180]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800da78:	4313      	orrs	r3, r2
 800da7a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800da7c:	4b2b      	ldr	r3, [pc, #172]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800da7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da80:	f023 0220 	bic.w	r2, r3, #32
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	699b      	ldr	r3, [r3, #24]
 800da88:	4928      	ldr	r1, [pc, #160]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800da8a:	4313      	orrs	r3, r2
 800da8c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800da8e:	4b27      	ldr	r3, [pc, #156]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800da90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da92:	4a26      	ldr	r2, [pc, #152]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800da94:	f023 0310 	bic.w	r3, r3, #16
 800da98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800da9a:	4b24      	ldr	r3, [pc, #144]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800da9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da9e:	4b24      	ldr	r3, [pc, #144]	; (800db30 <RCCEx_PLL2_Config+0x160>)
 800daa0:	4013      	ands	r3, r2
 800daa2:	687a      	ldr	r2, [r7, #4]
 800daa4:	69d2      	ldr	r2, [r2, #28]
 800daa6:	00d2      	lsls	r2, r2, #3
 800daa8:	4920      	ldr	r1, [pc, #128]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800daaa:	4313      	orrs	r3, r2
 800daac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800daae:	4b1f      	ldr	r3, [pc, #124]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800dab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab2:	4a1e      	ldr	r2, [pc, #120]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800dab4:	f043 0310 	orr.w	r3, r3, #16
 800dab8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d106      	bne.n	800dace <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dac0:	4b1a      	ldr	r3, [pc, #104]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800dac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac4:	4a19      	ldr	r2, [pc, #100]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800dac6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800daca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dacc:	e00f      	b.n	800daee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d106      	bne.n	800dae2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dad4:	4b15      	ldr	r3, [pc, #84]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800dad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad8:	4a14      	ldr	r2, [pc, #80]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800dada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dade:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dae0:	e005      	b.n	800daee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dae2:	4b12      	ldr	r3, [pc, #72]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800dae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae6:	4a11      	ldr	r2, [pc, #68]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800dae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800daec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800daee:	4b0f      	ldr	r3, [pc, #60]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4a0e      	ldr	r2, [pc, #56]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800daf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800daf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dafa:	f7f6 fda5 	bl	8004648 <HAL_GetTick>
 800dafe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800db00:	e008      	b.n	800db14 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800db02:	f7f6 fda1 	bl	8004648 <HAL_GetTick>
 800db06:	4602      	mov	r2, r0
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	1ad3      	subs	r3, r2, r3
 800db0c:	2b02      	cmp	r3, #2
 800db0e:	d901      	bls.n	800db14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800db10:	2303      	movs	r3, #3
 800db12:	e006      	b.n	800db22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800db14:	4b05      	ldr	r3, [pc, #20]	; (800db2c <RCCEx_PLL2_Config+0x15c>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d0f0      	beq.n	800db02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800db20:	7bfb      	ldrb	r3, [r7, #15]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	58024400 	.word	0x58024400
 800db30:	ffff0007 	.word	0xffff0007

0800db34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db3e:	2300      	movs	r3, #0
 800db40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800db42:	4b53      	ldr	r3, [pc, #332]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800db44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db46:	f003 0303 	and.w	r3, r3, #3
 800db4a:	2b03      	cmp	r3, #3
 800db4c:	d101      	bne.n	800db52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800db4e:	2301      	movs	r3, #1
 800db50:	e099      	b.n	800dc86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800db52:	4b4f      	ldr	r3, [pc, #316]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4a4e      	ldr	r2, [pc, #312]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800db58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800db5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db5e:	f7f6 fd73 	bl	8004648 <HAL_GetTick>
 800db62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800db64:	e008      	b.n	800db78 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800db66:	f7f6 fd6f 	bl	8004648 <HAL_GetTick>
 800db6a:	4602      	mov	r2, r0
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	1ad3      	subs	r3, r2, r3
 800db70:	2b02      	cmp	r3, #2
 800db72:	d901      	bls.n	800db78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800db74:	2303      	movs	r3, #3
 800db76:	e086      	b.n	800dc86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800db78:	4b45      	ldr	r3, [pc, #276]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db80:	2b00      	cmp	r3, #0
 800db82:	d1f0      	bne.n	800db66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800db84:	4b42      	ldr	r3, [pc, #264]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800db86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db88:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	051b      	lsls	r3, r3, #20
 800db92:	493f      	ldr	r1, [pc, #252]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800db94:	4313      	orrs	r3, r2
 800db96:	628b      	str	r3, [r1, #40]	; 0x28
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	3b01      	subs	r3, #1
 800db9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	689b      	ldr	r3, [r3, #8]
 800dba6:	3b01      	subs	r3, #1
 800dba8:	025b      	lsls	r3, r3, #9
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	431a      	orrs	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	68db      	ldr	r3, [r3, #12]
 800dbb2:	3b01      	subs	r3, #1
 800dbb4:	041b      	lsls	r3, r3, #16
 800dbb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dbba:	431a      	orrs	r2, r3
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	691b      	ldr	r3, [r3, #16]
 800dbc0:	3b01      	subs	r3, #1
 800dbc2:	061b      	lsls	r3, r3, #24
 800dbc4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dbc8:	4931      	ldr	r1, [pc, #196]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dbce:	4b30      	ldr	r3, [pc, #192]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	695b      	ldr	r3, [r3, #20]
 800dbda:	492d      	ldr	r1, [pc, #180]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dbe0:	4b2b      	ldr	r3, [pc, #172]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	699b      	ldr	r3, [r3, #24]
 800dbec:	4928      	ldr	r1, [pc, #160]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dbf2:	4b27      	ldr	r3, [pc, #156]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf6:	4a26      	ldr	r2, [pc, #152]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dbf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dbfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dbfe:	4b24      	ldr	r3, [pc, #144]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dc00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc02:	4b24      	ldr	r3, [pc, #144]	; (800dc94 <RCCEx_PLL3_Config+0x160>)
 800dc04:	4013      	ands	r3, r2
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	69d2      	ldr	r2, [r2, #28]
 800dc0a:	00d2      	lsls	r2, r2, #3
 800dc0c:	4920      	ldr	r1, [pc, #128]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dc12:	4b1f      	ldr	r3, [pc, #124]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc16:	4a1e      	ldr	r2, [pc, #120]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dc18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d106      	bne.n	800dc32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dc24:	4b1a      	ldr	r3, [pc, #104]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc28:	4a19      	ldr	r2, [pc, #100]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dc2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dc2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dc30:	e00f      	b.n	800dc52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d106      	bne.n	800dc46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dc38:	4b15      	ldr	r3, [pc, #84]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc3c:	4a14      	ldr	r2, [pc, #80]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dc3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dc42:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dc44:	e005      	b.n	800dc52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dc46:	4b12      	ldr	r3, [pc, #72]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4a:	4a11      	ldr	r2, [pc, #68]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dc4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dc50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dc52:	4b0f      	ldr	r3, [pc, #60]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4a0e      	ldr	r2, [pc, #56]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dc58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc5e:	f7f6 fcf3 	bl	8004648 <HAL_GetTick>
 800dc62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dc64:	e008      	b.n	800dc78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dc66:	f7f6 fcef 	bl	8004648 <HAL_GetTick>
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	1ad3      	subs	r3, r2, r3
 800dc70:	2b02      	cmp	r3, #2
 800dc72:	d901      	bls.n	800dc78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dc74:	2303      	movs	r3, #3
 800dc76:	e006      	b.n	800dc86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dc78:	4b05      	ldr	r3, [pc, #20]	; (800dc90 <RCCEx_PLL3_Config+0x15c>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d0f0      	beq.n	800dc66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dc84:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	58024400 	.word	0x58024400
 800dc94:	ffff0007 	.word	0xffff0007

0800dc98 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d074      	beq.n	800dd94 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800dcb0:	b2db      	uxtb	r3, r3
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d106      	bne.n	800dcc4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f7f6 fa38 	bl	8004134 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2202      	movs	r2, #2
 800dcc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	68db      	ldr	r3, [r3, #12]
 800dcd2:	f003 0310 	and.w	r3, r3, #16
 800dcd6:	2b10      	cmp	r3, #16
 800dcd8:	d053      	beq.n	800dd82 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	22ca      	movs	r2, #202	; 0xca
 800dce0:	625a      	str	r2, [r3, #36]	; 0x24
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2253      	movs	r2, #83	; 0x53
 800dce8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 f87e 	bl	800ddec <RTC_EnterInitMode>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800dcf4:	7bfb      	ldrb	r3, [r7, #15]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d124      	bne.n	800dd44 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	6999      	ldr	r1, [r3, #24]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	4b26      	ldr	r3, [pc, #152]	; (800dda0 <HAL_RTC_Init+0x108>)
 800dd06:	400b      	ands	r3, r1
 800dd08:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	6999      	ldr	r1, [r3, #24]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	685a      	ldr	r2, [r3, #4]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	691b      	ldr	r3, [r3, #16]
 800dd18:	431a      	orrs	r2, r3
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	699b      	ldr	r3, [r3, #24]
 800dd1e:	431a      	orrs	r2, r3
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	430a      	orrs	r2, r1
 800dd26:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	0419      	lsls	r1, r3, #16
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	68da      	ldr	r2, [r3, #12]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	430a      	orrs	r2, r1
 800dd38:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f000 f88c 	bl	800de58 <RTC_ExitInitMode>
 800dd40:	4603      	mov	r3, r0
 800dd42:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800dd44:	7bfb      	ldrb	r3, [r7, #15]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d116      	bne.n	800dd78 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	699a      	ldr	r2, [r3, #24]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800dd58:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	6999      	ldr	r1, [r3, #24]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	6a1a      	ldr	r2, [r3, #32]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	69db      	ldr	r3, [r3, #28]
 800dd68:	431a      	orrs	r2, r3
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	695b      	ldr	r3, [r3, #20]
 800dd6e:	431a      	orrs	r2, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	430a      	orrs	r2, r1
 800dd76:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	22ff      	movs	r2, #255	; 0xff
 800dd7e:	625a      	str	r2, [r3, #36]	; 0x24
 800dd80:	e001      	b.n	800dd86 <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800dd82:	2300      	movs	r3, #0
 800dd84:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800dd86:	7bfb      	ldrb	r3, [r7, #15]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d103      	bne.n	800dd94 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2201      	movs	r2, #1
 800dd90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800dd94:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3710      	adds	r7, #16
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	bf00      	nop
 800dda0:	fb8fffbf 	.word	0xfb8fffbf

0800dda4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a0d      	ldr	r2, [pc, #52]	; (800dde8 <HAL_RTC_WaitForSynchro+0x44>)
 800ddb2:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800ddb4:	f7f6 fc48 	bl	8004648 <HAL_GetTick>
 800ddb8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800ddba:	e009      	b.n	800ddd0 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ddbc:	f7f6 fc44 	bl	8004648 <HAL_GetTick>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	1ad3      	subs	r3, r2, r3
 800ddc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ddca:	d901      	bls.n	800ddd0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800ddcc:	2303      	movs	r3, #3
 800ddce:	e007      	b.n	800dde0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	f003 0320 	and.w	r3, r3, #32
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d0ee      	beq.n	800ddbc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800ddde:	2300      	movs	r3, #0
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3710      	adds	r7, #16
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	0001005f 	.word	0x0001005f

0800ddec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b084      	sub	sp, #16
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	68db      	ldr	r3, [r3, #12]
 800ddfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de02:	2b00      	cmp	r3, #0
 800de04:	d123      	bne.n	800de4e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	68da      	ldr	r2, [r3, #12]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800de14:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800de16:	f7f6 fc17 	bl	8004648 <HAL_GetTick>
 800de1a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800de1c:	e00d      	b.n	800de3a <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800de1e:	f7f6 fc13 	bl	8004648 <HAL_GetTick>
 800de22:	4602      	mov	r2, r0
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de2c:	d905      	bls.n	800de3a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800de2e:	2303      	movs	r3, #3
 800de30:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2203      	movs	r2, #3
 800de36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de44:	2b00      	cmp	r3, #0
 800de46:	d102      	bne.n	800de4e <RTC_EnterInitMode+0x62>
 800de48:	7bfb      	ldrb	r3, [r7, #15]
 800de4a:	2b03      	cmp	r3, #3
 800de4c:	d1e7      	bne.n	800de1e <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800de4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de50:	4618      	mov	r0, r3
 800de52:	3710      	adds	r7, #16
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b084      	sub	sp, #16
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800de60:	2300      	movs	r3, #0
 800de62:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800de64:	4b1a      	ldr	r3, [pc, #104]	; (800ded0 <RTC_ExitInitMode+0x78>)
 800de66:	68db      	ldr	r3, [r3, #12]
 800de68:	4a19      	ldr	r2, [pc, #100]	; (800ded0 <RTC_ExitInitMode+0x78>)
 800de6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de6e:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800de70:	4b17      	ldr	r3, [pc, #92]	; (800ded0 <RTC_ExitInitMode+0x78>)
 800de72:	699b      	ldr	r3, [r3, #24]
 800de74:	f003 0320 	and.w	r3, r3, #32
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d10c      	bne.n	800de96 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f7ff ff91 	bl	800dda4 <HAL_RTC_WaitForSynchro>
 800de82:	4603      	mov	r3, r0
 800de84:	2b00      	cmp	r3, #0
 800de86:	d01e      	beq.n	800dec6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2203      	movs	r2, #3
 800de8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800de90:	2303      	movs	r3, #3
 800de92:	73fb      	strb	r3, [r7, #15]
 800de94:	e017      	b.n	800dec6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800de96:	4b0e      	ldr	r3, [pc, #56]	; (800ded0 <RTC_ExitInitMode+0x78>)
 800de98:	699b      	ldr	r3, [r3, #24]
 800de9a:	4a0d      	ldr	r2, [pc, #52]	; (800ded0 <RTC_ExitInitMode+0x78>)
 800de9c:	f023 0320 	bic.w	r3, r3, #32
 800dea0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f7ff ff7e 	bl	800dda4 <HAL_RTC_WaitForSynchro>
 800dea8:	4603      	mov	r3, r0
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d005      	beq.n	800deba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2203      	movs	r2, #3
 800deb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800deb6:	2303      	movs	r3, #3
 800deb8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800deba:	4b05      	ldr	r3, [pc, #20]	; (800ded0 <RTC_ExitInitMode+0x78>)
 800debc:	699b      	ldr	r3, [r3, #24]
 800debe:	4a04      	ldr	r2, [pc, #16]	; (800ded0 <RTC_ExitInitMode+0x78>)
 800dec0:	f043 0320 	orr.w	r3, r3, #32
 800dec4:	6193      	str	r3, [r2, #24]
  }

  return status;
 800dec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3710      	adds	r7, #16
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	58004000 	.word	0x58004000

0800ded4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d101      	bne.n	800dee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dee2:	2301      	movs	r3, #1
 800dee4:	e042      	b.n	800df6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800deec:	2b00      	cmp	r3, #0
 800deee:	d106      	bne.n	800defe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2200      	movs	r2, #0
 800def4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f7f6 f94d 	bl	8004198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2224      	movs	r2, #36	; 0x24
 800df02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f022 0201 	bic.w	r2, r2, #1
 800df14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 fd5c 	bl	800e9d4 <UART_SetConfig>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d101      	bne.n	800df26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800df22:	2301      	movs	r3, #1
 800df24:	e022      	b.n	800df6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d002      	beq.n	800df34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f001 fbbc 	bl	800f6ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	685a      	ldr	r2, [r3, #4]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800df42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	689a      	ldr	r2, [r3, #8]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800df52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	681a      	ldr	r2, [r3, #0]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f042 0201 	orr.w	r2, r2, #1
 800df62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f001 fc43 	bl	800f7f0 <UART_CheckIdleState>
 800df6a:	4603      	mov	r3, r0
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3708      	adds	r7, #8
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b08a      	sub	sp, #40	; 0x28
 800df78:	af02      	add	r7, sp, #8
 800df7a:	60f8      	str	r0, [r7, #12]
 800df7c:	60b9      	str	r1, [r7, #8]
 800df7e:	603b      	str	r3, [r7, #0]
 800df80:	4613      	mov	r3, r2
 800df82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800df8a:	2b20      	cmp	r3, #32
 800df8c:	d17b      	bne.n	800e086 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d002      	beq.n	800df9a <HAL_UART_Transmit+0x26>
 800df94:	88fb      	ldrh	r3, [r7, #6]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d101      	bne.n	800df9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800df9a:	2301      	movs	r3, #1
 800df9c:	e074      	b.n	800e088 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2221      	movs	r2, #33	; 0x21
 800dfaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dfae:	f7f6 fb4b 	bl	8004648 <HAL_GetTick>
 800dfb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	88fa      	ldrh	r2, [r7, #6]
 800dfb8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	88fa      	ldrh	r2, [r7, #6]
 800dfc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	689b      	ldr	r3, [r3, #8]
 800dfc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfcc:	d108      	bne.n	800dfe0 <HAL_UART_Transmit+0x6c>
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	691b      	ldr	r3, [r3, #16]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d104      	bne.n	800dfe0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	61bb      	str	r3, [r7, #24]
 800dfde:	e003      	b.n	800dfe8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dfe8:	e030      	b.n	800e04c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	9300      	str	r3, [sp, #0]
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	2200      	movs	r2, #0
 800dff2:	2180      	movs	r1, #128	; 0x80
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	f001 fca5 	bl	800f944 <UART_WaitOnFlagUntilTimeout>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d005      	beq.n	800e00c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2220      	movs	r2, #32
 800e004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e008:	2303      	movs	r3, #3
 800e00a:	e03d      	b.n	800e088 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d10b      	bne.n	800e02a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e012:	69bb      	ldr	r3, [r7, #24]
 800e014:	881b      	ldrh	r3, [r3, #0]
 800e016:	461a      	mov	r2, r3
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e020:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e022:	69bb      	ldr	r3, [r7, #24]
 800e024:	3302      	adds	r3, #2
 800e026:	61bb      	str	r3, [r7, #24]
 800e028:	e007      	b.n	800e03a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e02a:	69fb      	ldr	r3, [r7, #28]
 800e02c:	781a      	ldrb	r2, [r3, #0]
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e034:	69fb      	ldr	r3, [r7, #28]
 800e036:	3301      	adds	r3, #1
 800e038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e040:	b29b      	uxth	r3, r3
 800e042:	3b01      	subs	r3, #1
 800e044:	b29a      	uxth	r2, r3
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e052:	b29b      	uxth	r3, r3
 800e054:	2b00      	cmp	r3, #0
 800e056:	d1c8      	bne.n	800dfea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	9300      	str	r3, [sp, #0]
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	2200      	movs	r2, #0
 800e060:	2140      	movs	r1, #64	; 0x40
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	f001 fc6e 	bl	800f944 <UART_WaitOnFlagUntilTimeout>
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d005      	beq.n	800e07a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2220      	movs	r2, #32
 800e072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e076:	2303      	movs	r3, #3
 800e078:	e006      	b.n	800e088 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2220      	movs	r2, #32
 800e07e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e082:	2300      	movs	r3, #0
 800e084:	e000      	b.n	800e088 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e086:	2302      	movs	r3, #2
  }
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3720      	adds	r7, #32
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b08a      	sub	sp, #40	; 0x28
 800e094:	af02      	add	r7, sp, #8
 800e096:	60f8      	str	r0, [r7, #12]
 800e098:	60b9      	str	r1, [r7, #8]
 800e09a:	603b      	str	r3, [r7, #0]
 800e09c:	4613      	mov	r3, r2
 800e09e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0a6:	2b20      	cmp	r3, #32
 800e0a8:	f040 80b5 	bne.w	800e216 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d002      	beq.n	800e0b8 <HAL_UART_Receive+0x28>
 800e0b2:	88fb      	ldrh	r3, [r7, #6]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d101      	bne.n	800e0bc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	e0ad      	b.n	800e218 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2222      	movs	r2, #34	; 0x22
 800e0c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e0d2:	f7f6 fab9 	bl	8004648 <HAL_GetTick>
 800e0d6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	88fa      	ldrh	r2, [r7, #6]
 800e0dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	88fa      	ldrh	r2, [r7, #6]
 800e0e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	689b      	ldr	r3, [r3, #8]
 800e0ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0f0:	d10e      	bne.n	800e110 <HAL_UART_Receive+0x80>
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	691b      	ldr	r3, [r3, #16]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d105      	bne.n	800e106 <HAL_UART_Receive+0x76>
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e100:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e104:	e02d      	b.n	800e162 <HAL_UART_Receive+0xd2>
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	22ff      	movs	r2, #255	; 0xff
 800e10a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e10e:	e028      	b.n	800e162 <HAL_UART_Receive+0xd2>
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	689b      	ldr	r3, [r3, #8]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d10d      	bne.n	800e134 <HAL_UART_Receive+0xa4>
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	691b      	ldr	r3, [r3, #16]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d104      	bne.n	800e12a <HAL_UART_Receive+0x9a>
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	22ff      	movs	r2, #255	; 0xff
 800e124:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e128:	e01b      	b.n	800e162 <HAL_UART_Receive+0xd2>
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	227f      	movs	r2, #127	; 0x7f
 800e12e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e132:	e016      	b.n	800e162 <HAL_UART_Receive+0xd2>
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	689b      	ldr	r3, [r3, #8]
 800e138:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e13c:	d10d      	bne.n	800e15a <HAL_UART_Receive+0xca>
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	691b      	ldr	r3, [r3, #16]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d104      	bne.n	800e150 <HAL_UART_Receive+0xc0>
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	227f      	movs	r2, #127	; 0x7f
 800e14a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e14e:	e008      	b.n	800e162 <HAL_UART_Receive+0xd2>
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	223f      	movs	r2, #63	; 0x3f
 800e154:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e158:	e003      	b.n	800e162 <HAL_UART_Receive+0xd2>
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2200      	movs	r2, #0
 800e15e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e168:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e172:	d108      	bne.n	800e186 <HAL_UART_Receive+0xf6>
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	691b      	ldr	r3, [r3, #16]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d104      	bne.n	800e186 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800e17c:	2300      	movs	r3, #0
 800e17e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	61bb      	str	r3, [r7, #24]
 800e184:	e003      	b.n	800e18e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e18a:	2300      	movs	r3, #0
 800e18c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800e18e:	e036      	b.n	800e1fe <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	9300      	str	r3, [sp, #0]
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	2200      	movs	r2, #0
 800e198:	2120      	movs	r1, #32
 800e19a:	68f8      	ldr	r0, [r7, #12]
 800e19c:	f001 fbd2 	bl	800f944 <UART_WaitOnFlagUntilTimeout>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d005      	beq.n	800e1b2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2220      	movs	r2, #32
 800e1aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800e1ae:	2303      	movs	r3, #3
 800e1b0:	e032      	b.n	800e218 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800e1b2:	69fb      	ldr	r3, [r7, #28]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d10c      	bne.n	800e1d2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1be:	b29a      	uxth	r2, r3
 800e1c0:	8a7b      	ldrh	r3, [r7, #18]
 800e1c2:	4013      	ands	r3, r2
 800e1c4:	b29a      	uxth	r2, r3
 800e1c6:	69bb      	ldr	r3, [r7, #24]
 800e1c8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e1ca:	69bb      	ldr	r3, [r7, #24]
 800e1cc:	3302      	adds	r3, #2
 800e1ce:	61bb      	str	r3, [r7, #24]
 800e1d0:	e00c      	b.n	800e1ec <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1d8:	b2da      	uxtb	r2, r3
 800e1da:	8a7b      	ldrh	r3, [r7, #18]
 800e1dc:	b2db      	uxtb	r3, r3
 800e1de:	4013      	ands	r3, r2
 800e1e0:	b2da      	uxtb	r2, r3
 800e1e2:	69fb      	ldr	r3, [r7, #28]
 800e1e4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	3b01      	subs	r3, #1
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e204:	b29b      	uxth	r3, r3
 800e206:	2b00      	cmp	r3, #0
 800e208:	d1c2      	bne.n	800e190 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	2220      	movs	r2, #32
 800e20e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800e212:	2300      	movs	r3, #0
 800e214:	e000      	b.n	800e218 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800e216:	2302      	movs	r3, #2
  }
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3720      	adds	r7, #32
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b0ba      	sub	sp, #232	; 0xe8
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	69db      	ldr	r3, [r3, #28]
 800e22e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	689b      	ldr	r3, [r3, #8]
 800e242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e246:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e24a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e24e:	4013      	ands	r3, r2
 800e250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d11b      	bne.n	800e294 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e25c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e260:	f003 0320 	and.w	r3, r3, #32
 800e264:	2b00      	cmp	r3, #0
 800e266:	d015      	beq.n	800e294 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e26c:	f003 0320 	and.w	r3, r3, #32
 800e270:	2b00      	cmp	r3, #0
 800e272:	d105      	bne.n	800e280 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d009      	beq.n	800e294 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e284:	2b00      	cmp	r3, #0
 800e286:	f000 8377 	beq.w	800e978 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	4798      	blx	r3
      }
      return;
 800e292:	e371      	b.n	800e978 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e298:	2b00      	cmp	r3, #0
 800e29a:	f000 8123 	beq.w	800e4e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e29e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e2a2:	4b8d      	ldr	r3, [pc, #564]	; (800e4d8 <HAL_UART_IRQHandler+0x2b8>)
 800e2a4:	4013      	ands	r3, r2
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d106      	bne.n	800e2b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e2aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e2ae:	4b8b      	ldr	r3, [pc, #556]	; (800e4dc <HAL_UART_IRQHandler+0x2bc>)
 800e2b0:	4013      	ands	r3, r2
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	f000 8116 	beq.w	800e4e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e2b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2bc:	f003 0301 	and.w	r3, r3, #1
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d011      	beq.n	800e2e8 <HAL_UART_IRQHandler+0xc8>
 800e2c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d00b      	beq.n	800e2e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2de:	f043 0201 	orr.w	r2, r3, #1
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e2e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2ec:	f003 0302 	and.w	r3, r3, #2
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d011      	beq.n	800e318 <HAL_UART_IRQHandler+0xf8>
 800e2f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2f8:	f003 0301 	and.w	r3, r3, #1
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d00b      	beq.n	800e318 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2202      	movs	r2, #2
 800e306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e30e:	f043 0204 	orr.w	r2, r3, #4
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e31c:	f003 0304 	and.w	r3, r3, #4
 800e320:	2b00      	cmp	r3, #0
 800e322:	d011      	beq.n	800e348 <HAL_UART_IRQHandler+0x128>
 800e324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e328:	f003 0301 	and.w	r3, r3, #1
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d00b      	beq.n	800e348 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	2204      	movs	r2, #4
 800e336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e33e:	f043 0202 	orr.w	r2, r3, #2
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e34c:	f003 0308 	and.w	r3, r3, #8
 800e350:	2b00      	cmp	r3, #0
 800e352:	d017      	beq.n	800e384 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e358:	f003 0320 	and.w	r3, r3, #32
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d105      	bne.n	800e36c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e360:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e364:	4b5c      	ldr	r3, [pc, #368]	; (800e4d8 <HAL_UART_IRQHandler+0x2b8>)
 800e366:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d00b      	beq.n	800e384 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	2208      	movs	r2, #8
 800e372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e37a:	f043 0208 	orr.w	r2, r3, #8
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d012      	beq.n	800e3b6 <HAL_UART_IRQHandler+0x196>
 800e390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d00c      	beq.n	800e3b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e3a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3ac:	f043 0220 	orr.w	r2, r3, #32
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	f000 82dd 	beq.w	800e97c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e3c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3c6:	f003 0320 	and.w	r3, r3, #32
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d013      	beq.n	800e3f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e3ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3d2:	f003 0320 	and.w	r3, r3, #32
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d105      	bne.n	800e3e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e3da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e3de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d007      	beq.n	800e3f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d003      	beq.n	800e3f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	689b      	ldr	r3, [r3, #8]
 800e406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e40a:	2b40      	cmp	r3, #64	; 0x40
 800e40c:	d005      	beq.n	800e41a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e40e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e412:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e416:	2b00      	cmp	r3, #0
 800e418:	d054      	beq.n	800e4c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f001 fafa 	bl	800fa14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	689b      	ldr	r3, [r3, #8]
 800e426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e42a:	2b40      	cmp	r3, #64	; 0x40
 800e42c:	d146      	bne.n	800e4bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	3308      	adds	r3, #8
 800e434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e438:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e43c:	e853 3f00 	ldrex	r3, [r3]
 800e440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e444:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e44c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	3308      	adds	r3, #8
 800e456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e45a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e45e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e46a:	e841 2300 	strex	r3, r2, [r1]
 800e46e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e476:	2b00      	cmp	r3, #0
 800e478:	d1d9      	bne.n	800e42e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e480:	2b00      	cmp	r3, #0
 800e482:	d017      	beq.n	800e4b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e48a:	4a15      	ldr	r2, [pc, #84]	; (800e4e0 <HAL_UART_IRQHandler+0x2c0>)
 800e48c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e494:	4618      	mov	r0, r3
 800e496:	f7f7 fdcf 	bl	8006038 <HAL_DMA_Abort_IT>
 800e49a:	4603      	mov	r3, r0
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d019      	beq.n	800e4d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4a8:	687a      	ldr	r2, [r7, #4]
 800e4aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e4ae:	4610      	mov	r0, r2
 800e4b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4b2:	e00f      	b.n	800e4d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f000 fa77 	bl	800e9a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4ba:	e00b      	b.n	800e4d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f000 fa73 	bl	800e9a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4c2:	e007      	b.n	800e4d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f000 fa6f 	bl	800e9a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e4d2:	e253      	b.n	800e97c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4d4:	bf00      	nop
    return;
 800e4d6:	e251      	b.n	800e97c <HAL_UART_IRQHandler+0x75c>
 800e4d8:	10000001 	.word	0x10000001
 800e4dc:	04000120 	.word	0x04000120
 800e4e0:	0800fae1 	.word	0x0800fae1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	f040 81e7 	bne.w	800e8bc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4f2:	f003 0310 	and.w	r3, r3, #16
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	f000 81e0 	beq.w	800e8bc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e4fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e500:	f003 0310 	and.w	r3, r3, #16
 800e504:	2b00      	cmp	r3, #0
 800e506:	f000 81d9 	beq.w	800e8bc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2210      	movs	r2, #16
 800e510:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	689b      	ldr	r3, [r3, #8]
 800e518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e51c:	2b40      	cmp	r3, #64	; 0x40
 800e51e:	f040 8151 	bne.w	800e7c4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	4a96      	ldr	r2, [pc, #600]	; (800e784 <HAL_UART_IRQHandler+0x564>)
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d068      	beq.n	800e602 <HAL_UART_IRQHandler+0x3e2>
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4a93      	ldr	r2, [pc, #588]	; (800e788 <HAL_UART_IRQHandler+0x568>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d061      	beq.n	800e602 <HAL_UART_IRQHandler+0x3e2>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4a91      	ldr	r2, [pc, #580]	; (800e78c <HAL_UART_IRQHandler+0x56c>)
 800e548:	4293      	cmp	r3, r2
 800e54a:	d05a      	beq.n	800e602 <HAL_UART_IRQHandler+0x3e2>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	4a8e      	ldr	r2, [pc, #568]	; (800e790 <HAL_UART_IRQHandler+0x570>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d053      	beq.n	800e602 <HAL_UART_IRQHandler+0x3e2>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	4a8c      	ldr	r2, [pc, #560]	; (800e794 <HAL_UART_IRQHandler+0x574>)
 800e564:	4293      	cmp	r3, r2
 800e566:	d04c      	beq.n	800e602 <HAL_UART_IRQHandler+0x3e2>
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4a89      	ldr	r2, [pc, #548]	; (800e798 <HAL_UART_IRQHandler+0x578>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d045      	beq.n	800e602 <HAL_UART_IRQHandler+0x3e2>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	4a87      	ldr	r2, [pc, #540]	; (800e79c <HAL_UART_IRQHandler+0x57c>)
 800e580:	4293      	cmp	r3, r2
 800e582:	d03e      	beq.n	800e602 <HAL_UART_IRQHandler+0x3e2>
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4a84      	ldr	r2, [pc, #528]	; (800e7a0 <HAL_UART_IRQHandler+0x580>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d037      	beq.n	800e602 <HAL_UART_IRQHandler+0x3e2>
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	4a82      	ldr	r2, [pc, #520]	; (800e7a4 <HAL_UART_IRQHandler+0x584>)
 800e59c:	4293      	cmp	r3, r2
 800e59e:	d030      	beq.n	800e602 <HAL_UART_IRQHandler+0x3e2>
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4a7f      	ldr	r2, [pc, #508]	; (800e7a8 <HAL_UART_IRQHandler+0x588>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d029      	beq.n	800e602 <HAL_UART_IRQHandler+0x3e2>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	4a7d      	ldr	r2, [pc, #500]	; (800e7ac <HAL_UART_IRQHandler+0x58c>)
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	d022      	beq.n	800e602 <HAL_UART_IRQHandler+0x3e2>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4a7a      	ldr	r2, [pc, #488]	; (800e7b0 <HAL_UART_IRQHandler+0x590>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d01b      	beq.n	800e602 <HAL_UART_IRQHandler+0x3e2>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	4a78      	ldr	r2, [pc, #480]	; (800e7b4 <HAL_UART_IRQHandler+0x594>)
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	d014      	beq.n	800e602 <HAL_UART_IRQHandler+0x3e2>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4a75      	ldr	r2, [pc, #468]	; (800e7b8 <HAL_UART_IRQHandler+0x598>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d00d      	beq.n	800e602 <HAL_UART_IRQHandler+0x3e2>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	4a73      	ldr	r2, [pc, #460]	; (800e7bc <HAL_UART_IRQHandler+0x59c>)
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d006      	beq.n	800e602 <HAL_UART_IRQHandler+0x3e2>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	4a70      	ldr	r2, [pc, #448]	; (800e7c0 <HAL_UART_IRQHandler+0x5a0>)
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d106      	bne.n	800e610 <HAL_UART_IRQHandler+0x3f0>
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	b29b      	uxth	r3, r3
 800e60e:	e005      	b.n	800e61c <HAL_UART_IRQHandler+0x3fc>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e620:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e624:	2b00      	cmp	r3, #0
 800e626:	f000 81ab 	beq.w	800e980 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e630:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e634:	429a      	cmp	r2, r3
 800e636:	f080 81a3 	bcs.w	800e980 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e640:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e64a:	69db      	ldr	r3, [r3, #28]
 800e64c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e650:	f000 8087 	beq.w	800e762 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e65c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e660:	e853 3f00 	ldrex	r3, [r3]
 800e664:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e668:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e66c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e670:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	461a      	mov	r2, r3
 800e67a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e67e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e682:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e686:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e68a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e68e:	e841 2300 	strex	r3, r2, [r1]
 800e692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e696:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1da      	bne.n	800e654 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	3308      	adds	r3, #8
 800e6a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e6a8:	e853 3f00 	ldrex	r3, [r3]
 800e6ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e6ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e6b0:	f023 0301 	bic.w	r3, r3, #1
 800e6b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	3308      	adds	r3, #8
 800e6be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e6c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e6c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e6ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e6ce:	e841 2300 	strex	r3, r2, [r1]
 800e6d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e6d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d1e1      	bne.n	800e69e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	3308      	adds	r3, #8
 800e6e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e6e4:	e853 3f00 	ldrex	r3, [r3]
 800e6e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e6ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	3308      	adds	r3, #8
 800e6fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e6fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e700:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e702:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e704:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e706:	e841 2300 	strex	r3, r2, [r1]
 800e70a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e70c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d1e3      	bne.n	800e6da <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2220      	movs	r2, #32
 800e716:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2200      	movs	r2, #0
 800e71e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e728:	e853 3f00 	ldrex	r3, [r3]
 800e72c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e72e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e730:	f023 0310 	bic.w	r3, r3, #16
 800e734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	461a      	mov	r2, r3
 800e73e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e742:	65bb      	str	r3, [r7, #88]	; 0x58
 800e744:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e746:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e748:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e74a:	e841 2300 	strex	r3, r2, [r1]
 800e74e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e752:	2b00      	cmp	r3, #0
 800e754:	d1e4      	bne.n	800e720 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7f7 f94d 	bl	80059fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2202      	movs	r2, #2
 800e766:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e774:	b29b      	uxth	r3, r3
 800e776:	1ad3      	subs	r3, r2, r3
 800e778:	b29b      	uxth	r3, r3
 800e77a:	4619      	mov	r1, r3
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f000 f91d 	bl	800e9bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e782:	e0fd      	b.n	800e980 <HAL_UART_IRQHandler+0x760>
 800e784:	40020010 	.word	0x40020010
 800e788:	40020028 	.word	0x40020028
 800e78c:	40020040 	.word	0x40020040
 800e790:	40020058 	.word	0x40020058
 800e794:	40020070 	.word	0x40020070
 800e798:	40020088 	.word	0x40020088
 800e79c:	400200a0 	.word	0x400200a0
 800e7a0:	400200b8 	.word	0x400200b8
 800e7a4:	40020410 	.word	0x40020410
 800e7a8:	40020428 	.word	0x40020428
 800e7ac:	40020440 	.word	0x40020440
 800e7b0:	40020458 	.word	0x40020458
 800e7b4:	40020470 	.word	0x40020470
 800e7b8:	40020488 	.word	0x40020488
 800e7bc:	400204a0 	.word	0x400204a0
 800e7c0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	1ad3      	subs	r3, r2, r3
 800e7d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	f000 80cf 	beq.w	800e984 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e7e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	f000 80ca 	beq.w	800e984 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f8:	e853 3f00 	ldrex	r3, [r3]
 800e7fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e7fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e800:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e804:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	461a      	mov	r2, r3
 800e80e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e812:	647b      	str	r3, [r7, #68]	; 0x44
 800e814:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e816:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e81a:	e841 2300 	strex	r3, r2, [r1]
 800e81e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e822:	2b00      	cmp	r3, #0
 800e824:	d1e4      	bne.n	800e7f0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	3308      	adds	r3, #8
 800e82c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e830:	e853 3f00 	ldrex	r3, [r3]
 800e834:	623b      	str	r3, [r7, #32]
   return(result);
 800e836:	6a3a      	ldr	r2, [r7, #32]
 800e838:	4b55      	ldr	r3, [pc, #340]	; (800e990 <HAL_UART_IRQHandler+0x770>)
 800e83a:	4013      	ands	r3, r2
 800e83c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	3308      	adds	r3, #8
 800e846:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e84a:	633a      	str	r2, [r7, #48]	; 0x30
 800e84c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e84e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e852:	e841 2300 	strex	r3, r2, [r1]
 800e856:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d1e3      	bne.n	800e826 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2220      	movs	r2, #32
 800e862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2200      	movs	r2, #0
 800e86a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2200      	movs	r2, #0
 800e870:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	e853 3f00 	ldrex	r3, [r3]
 800e87e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f023 0310 	bic.w	r3, r3, #16
 800e886:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	461a      	mov	r2, r3
 800e890:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e894:	61fb      	str	r3, [r7, #28]
 800e896:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e898:	69b9      	ldr	r1, [r7, #24]
 800e89a:	69fa      	ldr	r2, [r7, #28]
 800e89c:	e841 2300 	strex	r3, r2, [r1]
 800e8a0:	617b      	str	r3, [r7, #20]
   return(result);
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d1e4      	bne.n	800e872 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2202      	movs	r2, #2
 800e8ac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e8ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e8b2:	4619      	mov	r1, r3
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f000 f881 	bl	800e9bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e8ba:	e063      	b.n	800e984 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e8bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d00e      	beq.n	800e8e6 <HAL_UART_IRQHandler+0x6c6>
 800e8c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e8cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d008      	beq.n	800e8e6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e8dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f001 f93f 	bl	800fb62 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e8e4:	e051      	b.n	800e98a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e8e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d014      	beq.n	800e91c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e8f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d105      	bne.n	800e90a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e8fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e902:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e906:	2b00      	cmp	r3, #0
 800e908:	d008      	beq.n	800e91c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d03a      	beq.n	800e988 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	4798      	blx	r3
    }
    return;
 800e91a:	e035      	b.n	800e988 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e91c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e924:	2b00      	cmp	r3, #0
 800e926:	d009      	beq.n	800e93c <HAL_UART_IRQHandler+0x71c>
 800e928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e92c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e930:	2b00      	cmp	r3, #0
 800e932:	d003      	beq.n	800e93c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f001 f8e9 	bl	800fb0c <UART_EndTransmit_IT>
    return;
 800e93a:	e026      	b.n	800e98a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e93c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e940:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e944:	2b00      	cmp	r3, #0
 800e946:	d009      	beq.n	800e95c <HAL_UART_IRQHandler+0x73c>
 800e948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e94c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e950:	2b00      	cmp	r3, #0
 800e952:	d003      	beq.n	800e95c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f001 f918 	bl	800fb8a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e95a:	e016      	b.n	800e98a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e95c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e964:	2b00      	cmp	r3, #0
 800e966:	d010      	beq.n	800e98a <HAL_UART_IRQHandler+0x76a>
 800e968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	da0c      	bge.n	800e98a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f001 f900 	bl	800fb76 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e976:	e008      	b.n	800e98a <HAL_UART_IRQHandler+0x76a>
      return;
 800e978:	bf00      	nop
 800e97a:	e006      	b.n	800e98a <HAL_UART_IRQHandler+0x76a>
    return;
 800e97c:	bf00      	nop
 800e97e:	e004      	b.n	800e98a <HAL_UART_IRQHandler+0x76a>
      return;
 800e980:	bf00      	nop
 800e982:	e002      	b.n	800e98a <HAL_UART_IRQHandler+0x76a>
      return;
 800e984:	bf00      	nop
 800e986:	e000      	b.n	800e98a <HAL_UART_IRQHandler+0x76a>
    return;
 800e988:	bf00      	nop
  }
}
 800e98a:	37e8      	adds	r7, #232	; 0xe8
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	effffffe 	.word	0xeffffffe

0800e994 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e994:	b480      	push	{r7}
 800e996:	b083      	sub	sp, #12
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e99c:	bf00      	nop
 800e99e:	370c      	adds	r7, #12
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a6:	4770      	bx	lr

0800e9a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e9b0:	bf00      	nop
 800e9b2:	370c      	adds	r7, #12
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr

0800e9bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b083      	sub	sp, #12
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e9c8:	bf00      	nop
 800e9ca:	370c      	adds	r7, #12
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr

0800e9d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e9d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e9d8:	b092      	sub	sp, #72	; 0x48
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	689a      	ldr	r2, [r3, #8]
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	691b      	ldr	r3, [r3, #16]
 800e9ec:	431a      	orrs	r2, r3
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	695b      	ldr	r3, [r3, #20]
 800e9f2:	431a      	orrs	r2, r3
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	69db      	ldr	r3, [r3, #28]
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	4bbe      	ldr	r3, [pc, #760]	; (800ecfc <UART_SetConfig+0x328>)
 800ea04:	4013      	ands	r3, r2
 800ea06:	697a      	ldr	r2, [r7, #20]
 800ea08:	6812      	ldr	r2, [r2, #0]
 800ea0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea0c:	430b      	orrs	r3, r1
 800ea0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	68da      	ldr	r2, [r3, #12]
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	430a      	orrs	r2, r1
 800ea24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	699b      	ldr	r3, [r3, #24]
 800ea2a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	4ab3      	ldr	r2, [pc, #716]	; (800ed00 <UART_SetConfig+0x32c>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d004      	beq.n	800ea40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	6a1b      	ldr	r3, [r3, #32]
 800ea3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea3c:	4313      	orrs	r3, r2
 800ea3e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	689a      	ldr	r2, [r3, #8]
 800ea46:	4baf      	ldr	r3, [pc, #700]	; (800ed04 <UART_SetConfig+0x330>)
 800ea48:	4013      	ands	r3, r2
 800ea4a:	697a      	ldr	r2, [r7, #20]
 800ea4c:	6812      	ldr	r2, [r2, #0]
 800ea4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea50:	430b      	orrs	r3, r1
 800ea52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea5a:	f023 010f 	bic.w	r1, r3, #15
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	430a      	orrs	r2, r1
 800ea68:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	4aa6      	ldr	r2, [pc, #664]	; (800ed08 <UART_SetConfig+0x334>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d177      	bne.n	800eb64 <UART_SetConfig+0x190>
 800ea74:	4ba5      	ldr	r3, [pc, #660]	; (800ed0c <UART_SetConfig+0x338>)
 800ea76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea7c:	2b28      	cmp	r3, #40	; 0x28
 800ea7e:	d86d      	bhi.n	800eb5c <UART_SetConfig+0x188>
 800ea80:	a201      	add	r2, pc, #4	; (adr r2, 800ea88 <UART_SetConfig+0xb4>)
 800ea82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea86:	bf00      	nop
 800ea88:	0800eb2d 	.word	0x0800eb2d
 800ea8c:	0800eb5d 	.word	0x0800eb5d
 800ea90:	0800eb5d 	.word	0x0800eb5d
 800ea94:	0800eb5d 	.word	0x0800eb5d
 800ea98:	0800eb5d 	.word	0x0800eb5d
 800ea9c:	0800eb5d 	.word	0x0800eb5d
 800eaa0:	0800eb5d 	.word	0x0800eb5d
 800eaa4:	0800eb5d 	.word	0x0800eb5d
 800eaa8:	0800eb35 	.word	0x0800eb35
 800eaac:	0800eb5d 	.word	0x0800eb5d
 800eab0:	0800eb5d 	.word	0x0800eb5d
 800eab4:	0800eb5d 	.word	0x0800eb5d
 800eab8:	0800eb5d 	.word	0x0800eb5d
 800eabc:	0800eb5d 	.word	0x0800eb5d
 800eac0:	0800eb5d 	.word	0x0800eb5d
 800eac4:	0800eb5d 	.word	0x0800eb5d
 800eac8:	0800eb3d 	.word	0x0800eb3d
 800eacc:	0800eb5d 	.word	0x0800eb5d
 800ead0:	0800eb5d 	.word	0x0800eb5d
 800ead4:	0800eb5d 	.word	0x0800eb5d
 800ead8:	0800eb5d 	.word	0x0800eb5d
 800eadc:	0800eb5d 	.word	0x0800eb5d
 800eae0:	0800eb5d 	.word	0x0800eb5d
 800eae4:	0800eb5d 	.word	0x0800eb5d
 800eae8:	0800eb45 	.word	0x0800eb45
 800eaec:	0800eb5d 	.word	0x0800eb5d
 800eaf0:	0800eb5d 	.word	0x0800eb5d
 800eaf4:	0800eb5d 	.word	0x0800eb5d
 800eaf8:	0800eb5d 	.word	0x0800eb5d
 800eafc:	0800eb5d 	.word	0x0800eb5d
 800eb00:	0800eb5d 	.word	0x0800eb5d
 800eb04:	0800eb5d 	.word	0x0800eb5d
 800eb08:	0800eb4d 	.word	0x0800eb4d
 800eb0c:	0800eb5d 	.word	0x0800eb5d
 800eb10:	0800eb5d 	.word	0x0800eb5d
 800eb14:	0800eb5d 	.word	0x0800eb5d
 800eb18:	0800eb5d 	.word	0x0800eb5d
 800eb1c:	0800eb5d 	.word	0x0800eb5d
 800eb20:	0800eb5d 	.word	0x0800eb5d
 800eb24:	0800eb5d 	.word	0x0800eb5d
 800eb28:	0800eb55 	.word	0x0800eb55
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb32:	e326      	b.n	800f182 <UART_SetConfig+0x7ae>
 800eb34:	2304      	movs	r3, #4
 800eb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb3a:	e322      	b.n	800f182 <UART_SetConfig+0x7ae>
 800eb3c:	2308      	movs	r3, #8
 800eb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb42:	e31e      	b.n	800f182 <UART_SetConfig+0x7ae>
 800eb44:	2310      	movs	r3, #16
 800eb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb4a:	e31a      	b.n	800f182 <UART_SetConfig+0x7ae>
 800eb4c:	2320      	movs	r3, #32
 800eb4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb52:	e316      	b.n	800f182 <UART_SetConfig+0x7ae>
 800eb54:	2340      	movs	r3, #64	; 0x40
 800eb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb5a:	e312      	b.n	800f182 <UART_SetConfig+0x7ae>
 800eb5c:	2380      	movs	r3, #128	; 0x80
 800eb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb62:	e30e      	b.n	800f182 <UART_SetConfig+0x7ae>
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	4a69      	ldr	r2, [pc, #420]	; (800ed10 <UART_SetConfig+0x33c>)
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d130      	bne.n	800ebd0 <UART_SetConfig+0x1fc>
 800eb6e:	4b67      	ldr	r3, [pc, #412]	; (800ed0c <UART_SetConfig+0x338>)
 800eb70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb72:	f003 0307 	and.w	r3, r3, #7
 800eb76:	2b05      	cmp	r3, #5
 800eb78:	d826      	bhi.n	800ebc8 <UART_SetConfig+0x1f4>
 800eb7a:	a201      	add	r2, pc, #4	; (adr r2, 800eb80 <UART_SetConfig+0x1ac>)
 800eb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb80:	0800eb99 	.word	0x0800eb99
 800eb84:	0800eba1 	.word	0x0800eba1
 800eb88:	0800eba9 	.word	0x0800eba9
 800eb8c:	0800ebb1 	.word	0x0800ebb1
 800eb90:	0800ebb9 	.word	0x0800ebb9
 800eb94:	0800ebc1 	.word	0x0800ebc1
 800eb98:	2300      	movs	r3, #0
 800eb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb9e:	e2f0      	b.n	800f182 <UART_SetConfig+0x7ae>
 800eba0:	2304      	movs	r3, #4
 800eba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eba6:	e2ec      	b.n	800f182 <UART_SetConfig+0x7ae>
 800eba8:	2308      	movs	r3, #8
 800ebaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebae:	e2e8      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ebb0:	2310      	movs	r3, #16
 800ebb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebb6:	e2e4      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ebb8:	2320      	movs	r3, #32
 800ebba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebbe:	e2e0      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ebc0:	2340      	movs	r3, #64	; 0x40
 800ebc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebc6:	e2dc      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ebc8:	2380      	movs	r3, #128	; 0x80
 800ebca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebce:	e2d8      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	4a4f      	ldr	r2, [pc, #316]	; (800ed14 <UART_SetConfig+0x340>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d130      	bne.n	800ec3c <UART_SetConfig+0x268>
 800ebda:	4b4c      	ldr	r3, [pc, #304]	; (800ed0c <UART_SetConfig+0x338>)
 800ebdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebde:	f003 0307 	and.w	r3, r3, #7
 800ebe2:	2b05      	cmp	r3, #5
 800ebe4:	d826      	bhi.n	800ec34 <UART_SetConfig+0x260>
 800ebe6:	a201      	add	r2, pc, #4	; (adr r2, 800ebec <UART_SetConfig+0x218>)
 800ebe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebec:	0800ec05 	.word	0x0800ec05
 800ebf0:	0800ec0d 	.word	0x0800ec0d
 800ebf4:	0800ec15 	.word	0x0800ec15
 800ebf8:	0800ec1d 	.word	0x0800ec1d
 800ebfc:	0800ec25 	.word	0x0800ec25
 800ec00:	0800ec2d 	.word	0x0800ec2d
 800ec04:	2300      	movs	r3, #0
 800ec06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec0a:	e2ba      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ec0c:	2304      	movs	r3, #4
 800ec0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec12:	e2b6      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ec14:	2308      	movs	r3, #8
 800ec16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec1a:	e2b2      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ec1c:	2310      	movs	r3, #16
 800ec1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec22:	e2ae      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ec24:	2320      	movs	r3, #32
 800ec26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec2a:	e2aa      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ec2c:	2340      	movs	r3, #64	; 0x40
 800ec2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec32:	e2a6      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ec34:	2380      	movs	r3, #128	; 0x80
 800ec36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec3a:	e2a2      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4a35      	ldr	r2, [pc, #212]	; (800ed18 <UART_SetConfig+0x344>)
 800ec42:	4293      	cmp	r3, r2
 800ec44:	d130      	bne.n	800eca8 <UART_SetConfig+0x2d4>
 800ec46:	4b31      	ldr	r3, [pc, #196]	; (800ed0c <UART_SetConfig+0x338>)
 800ec48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec4a:	f003 0307 	and.w	r3, r3, #7
 800ec4e:	2b05      	cmp	r3, #5
 800ec50:	d826      	bhi.n	800eca0 <UART_SetConfig+0x2cc>
 800ec52:	a201      	add	r2, pc, #4	; (adr r2, 800ec58 <UART_SetConfig+0x284>)
 800ec54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec58:	0800ec71 	.word	0x0800ec71
 800ec5c:	0800ec79 	.word	0x0800ec79
 800ec60:	0800ec81 	.word	0x0800ec81
 800ec64:	0800ec89 	.word	0x0800ec89
 800ec68:	0800ec91 	.word	0x0800ec91
 800ec6c:	0800ec99 	.word	0x0800ec99
 800ec70:	2300      	movs	r3, #0
 800ec72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec76:	e284      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ec78:	2304      	movs	r3, #4
 800ec7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec7e:	e280      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ec80:	2308      	movs	r3, #8
 800ec82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec86:	e27c      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ec88:	2310      	movs	r3, #16
 800ec8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec8e:	e278      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ec90:	2320      	movs	r3, #32
 800ec92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec96:	e274      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ec98:	2340      	movs	r3, #64	; 0x40
 800ec9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec9e:	e270      	b.n	800f182 <UART_SetConfig+0x7ae>
 800eca0:	2380      	movs	r3, #128	; 0x80
 800eca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eca6:	e26c      	b.n	800f182 <UART_SetConfig+0x7ae>
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	4a1b      	ldr	r2, [pc, #108]	; (800ed1c <UART_SetConfig+0x348>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d142      	bne.n	800ed38 <UART_SetConfig+0x364>
 800ecb2:	4b16      	ldr	r3, [pc, #88]	; (800ed0c <UART_SetConfig+0x338>)
 800ecb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecb6:	f003 0307 	and.w	r3, r3, #7
 800ecba:	2b05      	cmp	r3, #5
 800ecbc:	d838      	bhi.n	800ed30 <UART_SetConfig+0x35c>
 800ecbe:	a201      	add	r2, pc, #4	; (adr r2, 800ecc4 <UART_SetConfig+0x2f0>)
 800ecc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecc4:	0800ecdd 	.word	0x0800ecdd
 800ecc8:	0800ece5 	.word	0x0800ece5
 800eccc:	0800eced 	.word	0x0800eced
 800ecd0:	0800ecf5 	.word	0x0800ecf5
 800ecd4:	0800ed21 	.word	0x0800ed21
 800ecd8:	0800ed29 	.word	0x0800ed29
 800ecdc:	2300      	movs	r3, #0
 800ecde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ece2:	e24e      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ece4:	2304      	movs	r3, #4
 800ece6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecea:	e24a      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ecec:	2308      	movs	r3, #8
 800ecee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecf2:	e246      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ecf4:	2310      	movs	r3, #16
 800ecf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecfa:	e242      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ecfc:	cfff69f3 	.word	0xcfff69f3
 800ed00:	58000c00 	.word	0x58000c00
 800ed04:	11fff4ff 	.word	0x11fff4ff
 800ed08:	40011000 	.word	0x40011000
 800ed0c:	58024400 	.word	0x58024400
 800ed10:	40004400 	.word	0x40004400
 800ed14:	40004800 	.word	0x40004800
 800ed18:	40004c00 	.word	0x40004c00
 800ed1c:	40005000 	.word	0x40005000
 800ed20:	2320      	movs	r3, #32
 800ed22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed26:	e22c      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ed28:	2340      	movs	r3, #64	; 0x40
 800ed2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed2e:	e228      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ed30:	2380      	movs	r3, #128	; 0x80
 800ed32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed36:	e224      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	4ab1      	ldr	r2, [pc, #708]	; (800f004 <UART_SetConfig+0x630>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d176      	bne.n	800ee30 <UART_SetConfig+0x45c>
 800ed42:	4bb1      	ldr	r3, [pc, #708]	; (800f008 <UART_SetConfig+0x634>)
 800ed44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ed4a:	2b28      	cmp	r3, #40	; 0x28
 800ed4c:	d86c      	bhi.n	800ee28 <UART_SetConfig+0x454>
 800ed4e:	a201      	add	r2, pc, #4	; (adr r2, 800ed54 <UART_SetConfig+0x380>)
 800ed50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed54:	0800edf9 	.word	0x0800edf9
 800ed58:	0800ee29 	.word	0x0800ee29
 800ed5c:	0800ee29 	.word	0x0800ee29
 800ed60:	0800ee29 	.word	0x0800ee29
 800ed64:	0800ee29 	.word	0x0800ee29
 800ed68:	0800ee29 	.word	0x0800ee29
 800ed6c:	0800ee29 	.word	0x0800ee29
 800ed70:	0800ee29 	.word	0x0800ee29
 800ed74:	0800ee01 	.word	0x0800ee01
 800ed78:	0800ee29 	.word	0x0800ee29
 800ed7c:	0800ee29 	.word	0x0800ee29
 800ed80:	0800ee29 	.word	0x0800ee29
 800ed84:	0800ee29 	.word	0x0800ee29
 800ed88:	0800ee29 	.word	0x0800ee29
 800ed8c:	0800ee29 	.word	0x0800ee29
 800ed90:	0800ee29 	.word	0x0800ee29
 800ed94:	0800ee09 	.word	0x0800ee09
 800ed98:	0800ee29 	.word	0x0800ee29
 800ed9c:	0800ee29 	.word	0x0800ee29
 800eda0:	0800ee29 	.word	0x0800ee29
 800eda4:	0800ee29 	.word	0x0800ee29
 800eda8:	0800ee29 	.word	0x0800ee29
 800edac:	0800ee29 	.word	0x0800ee29
 800edb0:	0800ee29 	.word	0x0800ee29
 800edb4:	0800ee11 	.word	0x0800ee11
 800edb8:	0800ee29 	.word	0x0800ee29
 800edbc:	0800ee29 	.word	0x0800ee29
 800edc0:	0800ee29 	.word	0x0800ee29
 800edc4:	0800ee29 	.word	0x0800ee29
 800edc8:	0800ee29 	.word	0x0800ee29
 800edcc:	0800ee29 	.word	0x0800ee29
 800edd0:	0800ee29 	.word	0x0800ee29
 800edd4:	0800ee19 	.word	0x0800ee19
 800edd8:	0800ee29 	.word	0x0800ee29
 800eddc:	0800ee29 	.word	0x0800ee29
 800ede0:	0800ee29 	.word	0x0800ee29
 800ede4:	0800ee29 	.word	0x0800ee29
 800ede8:	0800ee29 	.word	0x0800ee29
 800edec:	0800ee29 	.word	0x0800ee29
 800edf0:	0800ee29 	.word	0x0800ee29
 800edf4:	0800ee21 	.word	0x0800ee21
 800edf8:	2301      	movs	r3, #1
 800edfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edfe:	e1c0      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ee00:	2304      	movs	r3, #4
 800ee02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee06:	e1bc      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ee08:	2308      	movs	r3, #8
 800ee0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee0e:	e1b8      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ee10:	2310      	movs	r3, #16
 800ee12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee16:	e1b4      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ee18:	2320      	movs	r3, #32
 800ee1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee1e:	e1b0      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ee20:	2340      	movs	r3, #64	; 0x40
 800ee22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee26:	e1ac      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ee28:	2380      	movs	r3, #128	; 0x80
 800ee2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee2e:	e1a8      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4a75      	ldr	r2, [pc, #468]	; (800f00c <UART_SetConfig+0x638>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d130      	bne.n	800ee9c <UART_SetConfig+0x4c8>
 800ee3a:	4b73      	ldr	r3, [pc, #460]	; (800f008 <UART_SetConfig+0x634>)
 800ee3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee3e:	f003 0307 	and.w	r3, r3, #7
 800ee42:	2b05      	cmp	r3, #5
 800ee44:	d826      	bhi.n	800ee94 <UART_SetConfig+0x4c0>
 800ee46:	a201      	add	r2, pc, #4	; (adr r2, 800ee4c <UART_SetConfig+0x478>)
 800ee48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee4c:	0800ee65 	.word	0x0800ee65
 800ee50:	0800ee6d 	.word	0x0800ee6d
 800ee54:	0800ee75 	.word	0x0800ee75
 800ee58:	0800ee7d 	.word	0x0800ee7d
 800ee5c:	0800ee85 	.word	0x0800ee85
 800ee60:	0800ee8d 	.word	0x0800ee8d
 800ee64:	2300      	movs	r3, #0
 800ee66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee6a:	e18a      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ee6c:	2304      	movs	r3, #4
 800ee6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee72:	e186      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ee74:	2308      	movs	r3, #8
 800ee76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee7a:	e182      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ee7c:	2310      	movs	r3, #16
 800ee7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee82:	e17e      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ee84:	2320      	movs	r3, #32
 800ee86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee8a:	e17a      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ee8c:	2340      	movs	r3, #64	; 0x40
 800ee8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee92:	e176      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ee94:	2380      	movs	r3, #128	; 0x80
 800ee96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee9a:	e172      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	4a5b      	ldr	r2, [pc, #364]	; (800f010 <UART_SetConfig+0x63c>)
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d130      	bne.n	800ef08 <UART_SetConfig+0x534>
 800eea6:	4b58      	ldr	r3, [pc, #352]	; (800f008 <UART_SetConfig+0x634>)
 800eea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eeaa:	f003 0307 	and.w	r3, r3, #7
 800eeae:	2b05      	cmp	r3, #5
 800eeb0:	d826      	bhi.n	800ef00 <UART_SetConfig+0x52c>
 800eeb2:	a201      	add	r2, pc, #4	; (adr r2, 800eeb8 <UART_SetConfig+0x4e4>)
 800eeb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb8:	0800eed1 	.word	0x0800eed1
 800eebc:	0800eed9 	.word	0x0800eed9
 800eec0:	0800eee1 	.word	0x0800eee1
 800eec4:	0800eee9 	.word	0x0800eee9
 800eec8:	0800eef1 	.word	0x0800eef1
 800eecc:	0800eef9 	.word	0x0800eef9
 800eed0:	2300      	movs	r3, #0
 800eed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eed6:	e154      	b.n	800f182 <UART_SetConfig+0x7ae>
 800eed8:	2304      	movs	r3, #4
 800eeda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eede:	e150      	b.n	800f182 <UART_SetConfig+0x7ae>
 800eee0:	2308      	movs	r3, #8
 800eee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eee6:	e14c      	b.n	800f182 <UART_SetConfig+0x7ae>
 800eee8:	2310      	movs	r3, #16
 800eeea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeee:	e148      	b.n	800f182 <UART_SetConfig+0x7ae>
 800eef0:	2320      	movs	r3, #32
 800eef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eef6:	e144      	b.n	800f182 <UART_SetConfig+0x7ae>
 800eef8:	2340      	movs	r3, #64	; 0x40
 800eefa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eefe:	e140      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ef00:	2380      	movs	r3, #128	; 0x80
 800ef02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef06:	e13c      	b.n	800f182 <UART_SetConfig+0x7ae>
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4a41      	ldr	r2, [pc, #260]	; (800f014 <UART_SetConfig+0x640>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	f040 8082 	bne.w	800f018 <UART_SetConfig+0x644>
 800ef14:	4b3c      	ldr	r3, [pc, #240]	; (800f008 <UART_SetConfig+0x634>)
 800ef16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef1c:	2b28      	cmp	r3, #40	; 0x28
 800ef1e:	d86d      	bhi.n	800effc <UART_SetConfig+0x628>
 800ef20:	a201      	add	r2, pc, #4	; (adr r2, 800ef28 <UART_SetConfig+0x554>)
 800ef22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef26:	bf00      	nop
 800ef28:	0800efcd 	.word	0x0800efcd
 800ef2c:	0800effd 	.word	0x0800effd
 800ef30:	0800effd 	.word	0x0800effd
 800ef34:	0800effd 	.word	0x0800effd
 800ef38:	0800effd 	.word	0x0800effd
 800ef3c:	0800effd 	.word	0x0800effd
 800ef40:	0800effd 	.word	0x0800effd
 800ef44:	0800effd 	.word	0x0800effd
 800ef48:	0800efd5 	.word	0x0800efd5
 800ef4c:	0800effd 	.word	0x0800effd
 800ef50:	0800effd 	.word	0x0800effd
 800ef54:	0800effd 	.word	0x0800effd
 800ef58:	0800effd 	.word	0x0800effd
 800ef5c:	0800effd 	.word	0x0800effd
 800ef60:	0800effd 	.word	0x0800effd
 800ef64:	0800effd 	.word	0x0800effd
 800ef68:	0800efdd 	.word	0x0800efdd
 800ef6c:	0800effd 	.word	0x0800effd
 800ef70:	0800effd 	.word	0x0800effd
 800ef74:	0800effd 	.word	0x0800effd
 800ef78:	0800effd 	.word	0x0800effd
 800ef7c:	0800effd 	.word	0x0800effd
 800ef80:	0800effd 	.word	0x0800effd
 800ef84:	0800effd 	.word	0x0800effd
 800ef88:	0800efe5 	.word	0x0800efe5
 800ef8c:	0800effd 	.word	0x0800effd
 800ef90:	0800effd 	.word	0x0800effd
 800ef94:	0800effd 	.word	0x0800effd
 800ef98:	0800effd 	.word	0x0800effd
 800ef9c:	0800effd 	.word	0x0800effd
 800efa0:	0800effd 	.word	0x0800effd
 800efa4:	0800effd 	.word	0x0800effd
 800efa8:	0800efed 	.word	0x0800efed
 800efac:	0800effd 	.word	0x0800effd
 800efb0:	0800effd 	.word	0x0800effd
 800efb4:	0800effd 	.word	0x0800effd
 800efb8:	0800effd 	.word	0x0800effd
 800efbc:	0800effd 	.word	0x0800effd
 800efc0:	0800effd 	.word	0x0800effd
 800efc4:	0800effd 	.word	0x0800effd
 800efc8:	0800eff5 	.word	0x0800eff5
 800efcc:	2301      	movs	r3, #1
 800efce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efd2:	e0d6      	b.n	800f182 <UART_SetConfig+0x7ae>
 800efd4:	2304      	movs	r3, #4
 800efd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efda:	e0d2      	b.n	800f182 <UART_SetConfig+0x7ae>
 800efdc:	2308      	movs	r3, #8
 800efde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efe2:	e0ce      	b.n	800f182 <UART_SetConfig+0x7ae>
 800efe4:	2310      	movs	r3, #16
 800efe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efea:	e0ca      	b.n	800f182 <UART_SetConfig+0x7ae>
 800efec:	2320      	movs	r3, #32
 800efee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eff2:	e0c6      	b.n	800f182 <UART_SetConfig+0x7ae>
 800eff4:	2340      	movs	r3, #64	; 0x40
 800eff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800effa:	e0c2      	b.n	800f182 <UART_SetConfig+0x7ae>
 800effc:	2380      	movs	r3, #128	; 0x80
 800effe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f002:	e0be      	b.n	800f182 <UART_SetConfig+0x7ae>
 800f004:	40011400 	.word	0x40011400
 800f008:	58024400 	.word	0x58024400
 800f00c:	40007800 	.word	0x40007800
 800f010:	40007c00 	.word	0x40007c00
 800f014:	40011800 	.word	0x40011800
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	4aad      	ldr	r2, [pc, #692]	; (800f2d4 <UART_SetConfig+0x900>)
 800f01e:	4293      	cmp	r3, r2
 800f020:	d176      	bne.n	800f110 <UART_SetConfig+0x73c>
 800f022:	4bad      	ldr	r3, [pc, #692]	; (800f2d8 <UART_SetConfig+0x904>)
 800f024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f026:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f02a:	2b28      	cmp	r3, #40	; 0x28
 800f02c:	d86c      	bhi.n	800f108 <UART_SetConfig+0x734>
 800f02e:	a201      	add	r2, pc, #4	; (adr r2, 800f034 <UART_SetConfig+0x660>)
 800f030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f034:	0800f0d9 	.word	0x0800f0d9
 800f038:	0800f109 	.word	0x0800f109
 800f03c:	0800f109 	.word	0x0800f109
 800f040:	0800f109 	.word	0x0800f109
 800f044:	0800f109 	.word	0x0800f109
 800f048:	0800f109 	.word	0x0800f109
 800f04c:	0800f109 	.word	0x0800f109
 800f050:	0800f109 	.word	0x0800f109
 800f054:	0800f0e1 	.word	0x0800f0e1
 800f058:	0800f109 	.word	0x0800f109
 800f05c:	0800f109 	.word	0x0800f109
 800f060:	0800f109 	.word	0x0800f109
 800f064:	0800f109 	.word	0x0800f109
 800f068:	0800f109 	.word	0x0800f109
 800f06c:	0800f109 	.word	0x0800f109
 800f070:	0800f109 	.word	0x0800f109
 800f074:	0800f0e9 	.word	0x0800f0e9
 800f078:	0800f109 	.word	0x0800f109
 800f07c:	0800f109 	.word	0x0800f109
 800f080:	0800f109 	.word	0x0800f109
 800f084:	0800f109 	.word	0x0800f109
 800f088:	0800f109 	.word	0x0800f109
 800f08c:	0800f109 	.word	0x0800f109
 800f090:	0800f109 	.word	0x0800f109
 800f094:	0800f0f1 	.word	0x0800f0f1
 800f098:	0800f109 	.word	0x0800f109
 800f09c:	0800f109 	.word	0x0800f109
 800f0a0:	0800f109 	.word	0x0800f109
 800f0a4:	0800f109 	.word	0x0800f109
 800f0a8:	0800f109 	.word	0x0800f109
 800f0ac:	0800f109 	.word	0x0800f109
 800f0b0:	0800f109 	.word	0x0800f109
 800f0b4:	0800f0f9 	.word	0x0800f0f9
 800f0b8:	0800f109 	.word	0x0800f109
 800f0bc:	0800f109 	.word	0x0800f109
 800f0c0:	0800f109 	.word	0x0800f109
 800f0c4:	0800f109 	.word	0x0800f109
 800f0c8:	0800f109 	.word	0x0800f109
 800f0cc:	0800f109 	.word	0x0800f109
 800f0d0:	0800f109 	.word	0x0800f109
 800f0d4:	0800f101 	.word	0x0800f101
 800f0d8:	2301      	movs	r3, #1
 800f0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0de:	e050      	b.n	800f182 <UART_SetConfig+0x7ae>
 800f0e0:	2304      	movs	r3, #4
 800f0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0e6:	e04c      	b.n	800f182 <UART_SetConfig+0x7ae>
 800f0e8:	2308      	movs	r3, #8
 800f0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ee:	e048      	b.n	800f182 <UART_SetConfig+0x7ae>
 800f0f0:	2310      	movs	r3, #16
 800f0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0f6:	e044      	b.n	800f182 <UART_SetConfig+0x7ae>
 800f0f8:	2320      	movs	r3, #32
 800f0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0fe:	e040      	b.n	800f182 <UART_SetConfig+0x7ae>
 800f100:	2340      	movs	r3, #64	; 0x40
 800f102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f106:	e03c      	b.n	800f182 <UART_SetConfig+0x7ae>
 800f108:	2380      	movs	r3, #128	; 0x80
 800f10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f10e:	e038      	b.n	800f182 <UART_SetConfig+0x7ae>
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	4a71      	ldr	r2, [pc, #452]	; (800f2dc <UART_SetConfig+0x908>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d130      	bne.n	800f17c <UART_SetConfig+0x7a8>
 800f11a:	4b6f      	ldr	r3, [pc, #444]	; (800f2d8 <UART_SetConfig+0x904>)
 800f11c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f11e:	f003 0307 	and.w	r3, r3, #7
 800f122:	2b05      	cmp	r3, #5
 800f124:	d826      	bhi.n	800f174 <UART_SetConfig+0x7a0>
 800f126:	a201      	add	r2, pc, #4	; (adr r2, 800f12c <UART_SetConfig+0x758>)
 800f128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f12c:	0800f145 	.word	0x0800f145
 800f130:	0800f14d 	.word	0x0800f14d
 800f134:	0800f155 	.word	0x0800f155
 800f138:	0800f15d 	.word	0x0800f15d
 800f13c:	0800f165 	.word	0x0800f165
 800f140:	0800f16d 	.word	0x0800f16d
 800f144:	2302      	movs	r3, #2
 800f146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f14a:	e01a      	b.n	800f182 <UART_SetConfig+0x7ae>
 800f14c:	2304      	movs	r3, #4
 800f14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f152:	e016      	b.n	800f182 <UART_SetConfig+0x7ae>
 800f154:	2308      	movs	r3, #8
 800f156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f15a:	e012      	b.n	800f182 <UART_SetConfig+0x7ae>
 800f15c:	2310      	movs	r3, #16
 800f15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f162:	e00e      	b.n	800f182 <UART_SetConfig+0x7ae>
 800f164:	2320      	movs	r3, #32
 800f166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f16a:	e00a      	b.n	800f182 <UART_SetConfig+0x7ae>
 800f16c:	2340      	movs	r3, #64	; 0x40
 800f16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f172:	e006      	b.n	800f182 <UART_SetConfig+0x7ae>
 800f174:	2380      	movs	r3, #128	; 0x80
 800f176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f17a:	e002      	b.n	800f182 <UART_SetConfig+0x7ae>
 800f17c:	2380      	movs	r3, #128	; 0x80
 800f17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	4a55      	ldr	r2, [pc, #340]	; (800f2dc <UART_SetConfig+0x908>)
 800f188:	4293      	cmp	r3, r2
 800f18a:	f040 80f8 	bne.w	800f37e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f18e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f192:	2b20      	cmp	r3, #32
 800f194:	dc46      	bgt.n	800f224 <UART_SetConfig+0x850>
 800f196:	2b02      	cmp	r3, #2
 800f198:	db75      	blt.n	800f286 <UART_SetConfig+0x8b2>
 800f19a:	3b02      	subs	r3, #2
 800f19c:	2b1e      	cmp	r3, #30
 800f19e:	d872      	bhi.n	800f286 <UART_SetConfig+0x8b2>
 800f1a0:	a201      	add	r2, pc, #4	; (adr r2, 800f1a8 <UART_SetConfig+0x7d4>)
 800f1a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a6:	bf00      	nop
 800f1a8:	0800f22b 	.word	0x0800f22b
 800f1ac:	0800f287 	.word	0x0800f287
 800f1b0:	0800f233 	.word	0x0800f233
 800f1b4:	0800f287 	.word	0x0800f287
 800f1b8:	0800f287 	.word	0x0800f287
 800f1bc:	0800f287 	.word	0x0800f287
 800f1c0:	0800f243 	.word	0x0800f243
 800f1c4:	0800f287 	.word	0x0800f287
 800f1c8:	0800f287 	.word	0x0800f287
 800f1cc:	0800f287 	.word	0x0800f287
 800f1d0:	0800f287 	.word	0x0800f287
 800f1d4:	0800f287 	.word	0x0800f287
 800f1d8:	0800f287 	.word	0x0800f287
 800f1dc:	0800f287 	.word	0x0800f287
 800f1e0:	0800f253 	.word	0x0800f253
 800f1e4:	0800f287 	.word	0x0800f287
 800f1e8:	0800f287 	.word	0x0800f287
 800f1ec:	0800f287 	.word	0x0800f287
 800f1f0:	0800f287 	.word	0x0800f287
 800f1f4:	0800f287 	.word	0x0800f287
 800f1f8:	0800f287 	.word	0x0800f287
 800f1fc:	0800f287 	.word	0x0800f287
 800f200:	0800f287 	.word	0x0800f287
 800f204:	0800f287 	.word	0x0800f287
 800f208:	0800f287 	.word	0x0800f287
 800f20c:	0800f287 	.word	0x0800f287
 800f210:	0800f287 	.word	0x0800f287
 800f214:	0800f287 	.word	0x0800f287
 800f218:	0800f287 	.word	0x0800f287
 800f21c:	0800f287 	.word	0x0800f287
 800f220:	0800f279 	.word	0x0800f279
 800f224:	2b40      	cmp	r3, #64	; 0x40
 800f226:	d02a      	beq.n	800f27e <UART_SetConfig+0x8aa>
 800f228:	e02d      	b.n	800f286 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f22a:	f7fe f913 	bl	800d454 <HAL_RCCEx_GetD3PCLK1Freq>
 800f22e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f230:	e02f      	b.n	800f292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f236:	4618      	mov	r0, r3
 800f238:	f7fe f922 	bl	800d480 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f240:	e027      	b.n	800f292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f242:	f107 0318 	add.w	r3, r7, #24
 800f246:	4618      	mov	r0, r3
 800f248:	f7fe fa6e 	bl	800d728 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f24c:	69fb      	ldr	r3, [r7, #28]
 800f24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f250:	e01f      	b.n	800f292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f252:	4b21      	ldr	r3, [pc, #132]	; (800f2d8 <UART_SetConfig+0x904>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f003 0320 	and.w	r3, r3, #32
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d009      	beq.n	800f272 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f25e:	4b1e      	ldr	r3, [pc, #120]	; (800f2d8 <UART_SetConfig+0x904>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	08db      	lsrs	r3, r3, #3
 800f264:	f003 0303 	and.w	r3, r3, #3
 800f268:	4a1d      	ldr	r2, [pc, #116]	; (800f2e0 <UART_SetConfig+0x90c>)
 800f26a:	fa22 f303 	lsr.w	r3, r2, r3
 800f26e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f270:	e00f      	b.n	800f292 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f272:	4b1b      	ldr	r3, [pc, #108]	; (800f2e0 <UART_SetConfig+0x90c>)
 800f274:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f276:	e00c      	b.n	800f292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f278:	4b1a      	ldr	r3, [pc, #104]	; (800f2e4 <UART_SetConfig+0x910>)
 800f27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f27c:	e009      	b.n	800f292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f27e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f284:	e005      	b.n	800f292 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f286:	2300      	movs	r3, #0
 800f288:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f28a:	2301      	movs	r3, #1
 800f28c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f290:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f294:	2b00      	cmp	r3, #0
 800f296:	f000 81ee 	beq.w	800f676 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f29e:	4a12      	ldr	r2, [pc, #72]	; (800f2e8 <UART_SetConfig+0x914>)
 800f2a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2ac:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	685a      	ldr	r2, [r3, #4]
 800f2b2:	4613      	mov	r3, r2
 800f2b4:	005b      	lsls	r3, r3, #1
 800f2b6:	4413      	add	r3, r2
 800f2b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d305      	bcc.n	800f2ca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f2c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d910      	bls.n	800f2ec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f2d0:	e1d1      	b.n	800f676 <UART_SetConfig+0xca2>
 800f2d2:	bf00      	nop
 800f2d4:	40011c00 	.word	0x40011c00
 800f2d8:	58024400 	.word	0x58024400
 800f2dc:	58000c00 	.word	0x58000c00
 800f2e0:	03d09000 	.word	0x03d09000
 800f2e4:	003d0900 	.word	0x003d0900
 800f2e8:	0801160c 	.word	0x0801160c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	60bb      	str	r3, [r7, #8]
 800f2f2:	60fa      	str	r2, [r7, #12]
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2f8:	4ac0      	ldr	r2, [pc, #768]	; (800f5fc <UART_SetConfig+0xc28>)
 800f2fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2fe:	b29b      	uxth	r3, r3
 800f300:	2200      	movs	r2, #0
 800f302:	603b      	str	r3, [r7, #0]
 800f304:	607a      	str	r2, [r7, #4]
 800f306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f30a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f30e:	f7f1 f83f 	bl	8000390 <__aeabi_uldivmod>
 800f312:	4602      	mov	r2, r0
 800f314:	460b      	mov	r3, r1
 800f316:	4610      	mov	r0, r2
 800f318:	4619      	mov	r1, r3
 800f31a:	f04f 0200 	mov.w	r2, #0
 800f31e:	f04f 0300 	mov.w	r3, #0
 800f322:	020b      	lsls	r3, r1, #8
 800f324:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f328:	0202      	lsls	r2, r0, #8
 800f32a:	6979      	ldr	r1, [r7, #20]
 800f32c:	6849      	ldr	r1, [r1, #4]
 800f32e:	0849      	lsrs	r1, r1, #1
 800f330:	2000      	movs	r0, #0
 800f332:	460c      	mov	r4, r1
 800f334:	4605      	mov	r5, r0
 800f336:	eb12 0804 	adds.w	r8, r2, r4
 800f33a:	eb43 0905 	adc.w	r9, r3, r5
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	2200      	movs	r2, #0
 800f344:	469a      	mov	sl, r3
 800f346:	4693      	mov	fp, r2
 800f348:	4652      	mov	r2, sl
 800f34a:	465b      	mov	r3, fp
 800f34c:	4640      	mov	r0, r8
 800f34e:	4649      	mov	r1, r9
 800f350:	f7f1 f81e 	bl	8000390 <__aeabi_uldivmod>
 800f354:	4602      	mov	r2, r0
 800f356:	460b      	mov	r3, r1
 800f358:	4613      	mov	r3, r2
 800f35a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f35e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f362:	d308      	bcc.n	800f376 <UART_SetConfig+0x9a2>
 800f364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f36a:	d204      	bcs.n	800f376 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f372:	60da      	str	r2, [r3, #12]
 800f374:	e17f      	b.n	800f676 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f376:	2301      	movs	r3, #1
 800f378:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f37c:	e17b      	b.n	800f676 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	69db      	ldr	r3, [r3, #28]
 800f382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f386:	f040 80bd 	bne.w	800f504 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f38a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f38e:	2b20      	cmp	r3, #32
 800f390:	dc48      	bgt.n	800f424 <UART_SetConfig+0xa50>
 800f392:	2b00      	cmp	r3, #0
 800f394:	db7b      	blt.n	800f48e <UART_SetConfig+0xaba>
 800f396:	2b20      	cmp	r3, #32
 800f398:	d879      	bhi.n	800f48e <UART_SetConfig+0xaba>
 800f39a:	a201      	add	r2, pc, #4	; (adr r2, 800f3a0 <UART_SetConfig+0x9cc>)
 800f39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a0:	0800f42b 	.word	0x0800f42b
 800f3a4:	0800f433 	.word	0x0800f433
 800f3a8:	0800f48f 	.word	0x0800f48f
 800f3ac:	0800f48f 	.word	0x0800f48f
 800f3b0:	0800f43b 	.word	0x0800f43b
 800f3b4:	0800f48f 	.word	0x0800f48f
 800f3b8:	0800f48f 	.word	0x0800f48f
 800f3bc:	0800f48f 	.word	0x0800f48f
 800f3c0:	0800f44b 	.word	0x0800f44b
 800f3c4:	0800f48f 	.word	0x0800f48f
 800f3c8:	0800f48f 	.word	0x0800f48f
 800f3cc:	0800f48f 	.word	0x0800f48f
 800f3d0:	0800f48f 	.word	0x0800f48f
 800f3d4:	0800f48f 	.word	0x0800f48f
 800f3d8:	0800f48f 	.word	0x0800f48f
 800f3dc:	0800f48f 	.word	0x0800f48f
 800f3e0:	0800f45b 	.word	0x0800f45b
 800f3e4:	0800f48f 	.word	0x0800f48f
 800f3e8:	0800f48f 	.word	0x0800f48f
 800f3ec:	0800f48f 	.word	0x0800f48f
 800f3f0:	0800f48f 	.word	0x0800f48f
 800f3f4:	0800f48f 	.word	0x0800f48f
 800f3f8:	0800f48f 	.word	0x0800f48f
 800f3fc:	0800f48f 	.word	0x0800f48f
 800f400:	0800f48f 	.word	0x0800f48f
 800f404:	0800f48f 	.word	0x0800f48f
 800f408:	0800f48f 	.word	0x0800f48f
 800f40c:	0800f48f 	.word	0x0800f48f
 800f410:	0800f48f 	.word	0x0800f48f
 800f414:	0800f48f 	.word	0x0800f48f
 800f418:	0800f48f 	.word	0x0800f48f
 800f41c:	0800f48f 	.word	0x0800f48f
 800f420:	0800f481 	.word	0x0800f481
 800f424:	2b40      	cmp	r3, #64	; 0x40
 800f426:	d02e      	beq.n	800f486 <UART_SetConfig+0xab2>
 800f428:	e031      	b.n	800f48e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f42a:	f7fc fe29 	bl	800c080 <HAL_RCC_GetPCLK1Freq>
 800f42e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f430:	e033      	b.n	800f49a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f432:	f7fc fe3b 	bl	800c0ac <HAL_RCC_GetPCLK2Freq>
 800f436:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f438:	e02f      	b.n	800f49a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f43a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f43e:	4618      	mov	r0, r3
 800f440:	f7fe f81e 	bl	800d480 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f448:	e027      	b.n	800f49a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f44a:	f107 0318 	add.w	r3, r7, #24
 800f44e:	4618      	mov	r0, r3
 800f450:	f7fe f96a 	bl	800d728 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f454:	69fb      	ldr	r3, [r7, #28]
 800f456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f458:	e01f      	b.n	800f49a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f45a:	4b69      	ldr	r3, [pc, #420]	; (800f600 <UART_SetConfig+0xc2c>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f003 0320 	and.w	r3, r3, #32
 800f462:	2b00      	cmp	r3, #0
 800f464:	d009      	beq.n	800f47a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f466:	4b66      	ldr	r3, [pc, #408]	; (800f600 <UART_SetConfig+0xc2c>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	08db      	lsrs	r3, r3, #3
 800f46c:	f003 0303 	and.w	r3, r3, #3
 800f470:	4a64      	ldr	r2, [pc, #400]	; (800f604 <UART_SetConfig+0xc30>)
 800f472:	fa22 f303 	lsr.w	r3, r2, r3
 800f476:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f478:	e00f      	b.n	800f49a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f47a:	4b62      	ldr	r3, [pc, #392]	; (800f604 <UART_SetConfig+0xc30>)
 800f47c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f47e:	e00c      	b.n	800f49a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f480:	4b61      	ldr	r3, [pc, #388]	; (800f608 <UART_SetConfig+0xc34>)
 800f482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f484:	e009      	b.n	800f49a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f48c:	e005      	b.n	800f49a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f48e:	2300      	movs	r3, #0
 800f490:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f492:	2301      	movs	r3, #1
 800f494:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f498:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	f000 80ea 	beq.w	800f676 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4a6:	4a55      	ldr	r2, [pc, #340]	; (800f5fc <UART_SetConfig+0xc28>)
 800f4a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f4ac:	461a      	mov	r2, r3
 800f4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4b4:	005a      	lsls	r2, r3, #1
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	685b      	ldr	r3, [r3, #4]
 800f4ba:	085b      	lsrs	r3, r3, #1
 800f4bc:	441a      	add	r2, r3
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	685b      	ldr	r3, [r3, #4]
 800f4c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ca:	2b0f      	cmp	r3, #15
 800f4cc:	d916      	bls.n	800f4fc <UART_SetConfig+0xb28>
 800f4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4d4:	d212      	bcs.n	800f4fc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d8:	b29b      	uxth	r3, r3
 800f4da:	f023 030f 	bic.w	r3, r3, #15
 800f4de:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e2:	085b      	lsrs	r3, r3, #1
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	f003 0307 	and.w	r3, r3, #7
 800f4ea:	b29a      	uxth	r2, r3
 800f4ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f4f8:	60da      	str	r2, [r3, #12]
 800f4fa:	e0bc      	b.n	800f676 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f502:	e0b8      	b.n	800f676 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f504:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f508:	2b20      	cmp	r3, #32
 800f50a:	dc4b      	bgt.n	800f5a4 <UART_SetConfig+0xbd0>
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	f2c0 8087 	blt.w	800f620 <UART_SetConfig+0xc4c>
 800f512:	2b20      	cmp	r3, #32
 800f514:	f200 8084 	bhi.w	800f620 <UART_SetConfig+0xc4c>
 800f518:	a201      	add	r2, pc, #4	; (adr r2, 800f520 <UART_SetConfig+0xb4c>)
 800f51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f51e:	bf00      	nop
 800f520:	0800f5ab 	.word	0x0800f5ab
 800f524:	0800f5b3 	.word	0x0800f5b3
 800f528:	0800f621 	.word	0x0800f621
 800f52c:	0800f621 	.word	0x0800f621
 800f530:	0800f5bb 	.word	0x0800f5bb
 800f534:	0800f621 	.word	0x0800f621
 800f538:	0800f621 	.word	0x0800f621
 800f53c:	0800f621 	.word	0x0800f621
 800f540:	0800f5cb 	.word	0x0800f5cb
 800f544:	0800f621 	.word	0x0800f621
 800f548:	0800f621 	.word	0x0800f621
 800f54c:	0800f621 	.word	0x0800f621
 800f550:	0800f621 	.word	0x0800f621
 800f554:	0800f621 	.word	0x0800f621
 800f558:	0800f621 	.word	0x0800f621
 800f55c:	0800f621 	.word	0x0800f621
 800f560:	0800f5db 	.word	0x0800f5db
 800f564:	0800f621 	.word	0x0800f621
 800f568:	0800f621 	.word	0x0800f621
 800f56c:	0800f621 	.word	0x0800f621
 800f570:	0800f621 	.word	0x0800f621
 800f574:	0800f621 	.word	0x0800f621
 800f578:	0800f621 	.word	0x0800f621
 800f57c:	0800f621 	.word	0x0800f621
 800f580:	0800f621 	.word	0x0800f621
 800f584:	0800f621 	.word	0x0800f621
 800f588:	0800f621 	.word	0x0800f621
 800f58c:	0800f621 	.word	0x0800f621
 800f590:	0800f621 	.word	0x0800f621
 800f594:	0800f621 	.word	0x0800f621
 800f598:	0800f621 	.word	0x0800f621
 800f59c:	0800f621 	.word	0x0800f621
 800f5a0:	0800f613 	.word	0x0800f613
 800f5a4:	2b40      	cmp	r3, #64	; 0x40
 800f5a6:	d037      	beq.n	800f618 <UART_SetConfig+0xc44>
 800f5a8:	e03a      	b.n	800f620 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f5aa:	f7fc fd69 	bl	800c080 <HAL_RCC_GetPCLK1Freq>
 800f5ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f5b0:	e03c      	b.n	800f62c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5b2:	f7fc fd7b 	bl	800c0ac <HAL_RCC_GetPCLK2Freq>
 800f5b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f5b8:	e038      	b.n	800f62c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7fd ff5e 	bl	800d480 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5c8:	e030      	b.n	800f62c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5ca:	f107 0318 	add.w	r3, r7, #24
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7fe f8aa 	bl	800d728 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f5d4:	69fb      	ldr	r3, [r7, #28]
 800f5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5d8:	e028      	b.n	800f62c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5da:	4b09      	ldr	r3, [pc, #36]	; (800f600 <UART_SetConfig+0xc2c>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f003 0320 	and.w	r3, r3, #32
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d012      	beq.n	800f60c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f5e6:	4b06      	ldr	r3, [pc, #24]	; (800f600 <UART_SetConfig+0xc2c>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	08db      	lsrs	r3, r3, #3
 800f5ec:	f003 0303 	and.w	r3, r3, #3
 800f5f0:	4a04      	ldr	r2, [pc, #16]	; (800f604 <UART_SetConfig+0xc30>)
 800f5f2:	fa22 f303 	lsr.w	r3, r2, r3
 800f5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f5f8:	e018      	b.n	800f62c <UART_SetConfig+0xc58>
 800f5fa:	bf00      	nop
 800f5fc:	0801160c 	.word	0x0801160c
 800f600:	58024400 	.word	0x58024400
 800f604:	03d09000 	.word	0x03d09000
 800f608:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f60c:	4b24      	ldr	r3, [pc, #144]	; (800f6a0 <UART_SetConfig+0xccc>)
 800f60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f610:	e00c      	b.n	800f62c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f612:	4b24      	ldr	r3, [pc, #144]	; (800f6a4 <UART_SetConfig+0xcd0>)
 800f614:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f616:	e009      	b.n	800f62c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f618:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f61c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f61e:	e005      	b.n	800f62c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f620:	2300      	movs	r3, #0
 800f622:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f624:	2301      	movs	r3, #1
 800f626:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f62a:	bf00      	nop
    }

    if (pclk != 0U)
 800f62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d021      	beq.n	800f676 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f636:	4a1c      	ldr	r2, [pc, #112]	; (800f6a8 <UART_SetConfig+0xcd4>)
 800f638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f63c:	461a      	mov	r2, r3
 800f63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f640:	fbb3 f2f2 	udiv	r2, r3, r2
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	085b      	lsrs	r3, r3, #1
 800f64a:	441a      	add	r2, r3
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	685b      	ldr	r3, [r3, #4]
 800f650:	fbb2 f3f3 	udiv	r3, r2, r3
 800f654:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f658:	2b0f      	cmp	r3, #15
 800f65a:	d909      	bls.n	800f670 <UART_SetConfig+0xc9c>
 800f65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f662:	d205      	bcs.n	800f670 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f666:	b29a      	uxth	r2, r3
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	60da      	str	r2, [r3, #12]
 800f66e:	e002      	b.n	800f676 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f670:	2301      	movs	r3, #1
 800f672:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	2201      	movs	r2, #1
 800f67a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	2201      	movs	r2, #1
 800f682:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	2200      	movs	r2, #0
 800f68a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	2200      	movs	r2, #0
 800f690:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f692:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f696:	4618      	mov	r0, r3
 800f698:	3748      	adds	r7, #72	; 0x48
 800f69a:	46bd      	mov	sp, r7
 800f69c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f6a0:	03d09000 	.word	0x03d09000
 800f6a4:	003d0900 	.word	0x003d0900
 800f6a8:	0801160c 	.word	0x0801160c

0800f6ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6b8:	f003 0301 	and.w	r3, r3, #1
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d00a      	beq.n	800f6d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	430a      	orrs	r2, r1
 800f6d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6da:	f003 0302 	and.w	r3, r3, #2
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d00a      	beq.n	800f6f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	685b      	ldr	r3, [r3, #4]
 800f6e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	430a      	orrs	r2, r1
 800f6f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6fc:	f003 0304 	and.w	r3, r3, #4
 800f700:	2b00      	cmp	r3, #0
 800f702:	d00a      	beq.n	800f71a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	430a      	orrs	r2, r1
 800f718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f71e:	f003 0308 	and.w	r3, r3, #8
 800f722:	2b00      	cmp	r3, #0
 800f724:	d00a      	beq.n	800f73c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	685b      	ldr	r3, [r3, #4]
 800f72c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	430a      	orrs	r2, r1
 800f73a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f740:	f003 0310 	and.w	r3, r3, #16
 800f744:	2b00      	cmp	r3, #0
 800f746:	d00a      	beq.n	800f75e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	430a      	orrs	r2, r1
 800f75c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f762:	f003 0320 	and.w	r3, r3, #32
 800f766:	2b00      	cmp	r3, #0
 800f768:	d00a      	beq.n	800f780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	689b      	ldr	r3, [r3, #8]
 800f770:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	430a      	orrs	r2, r1
 800f77e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d01a      	beq.n	800f7c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	430a      	orrs	r2, r1
 800f7a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f7aa:	d10a      	bne.n	800f7c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	430a      	orrs	r2, r1
 800f7c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d00a      	beq.n	800f7e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	685b      	ldr	r3, [r3, #4]
 800f7d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	430a      	orrs	r2, r1
 800f7e2:	605a      	str	r2, [r3, #4]
  }
}
 800f7e4:	bf00      	nop
 800f7e6:	370c      	adds	r7, #12
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ee:	4770      	bx	lr

0800f7f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b098      	sub	sp, #96	; 0x60
 800f7f4:	af02      	add	r7, sp, #8
 800f7f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f800:	f7f4 ff22 	bl	8004648 <HAL_GetTick>
 800f804:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	f003 0308 	and.w	r3, r3, #8
 800f810:	2b08      	cmp	r3, #8
 800f812:	d12f      	bne.n	800f874 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f818:	9300      	str	r3, [sp, #0]
 800f81a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f81c:	2200      	movs	r2, #0
 800f81e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f000 f88e 	bl	800f944 <UART_WaitOnFlagUntilTimeout>
 800f828:	4603      	mov	r3, r0
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d022      	beq.n	800f874 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f836:	e853 3f00 	ldrex	r3, [r3]
 800f83a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f83c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f83e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f842:	653b      	str	r3, [r7, #80]	; 0x50
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	461a      	mov	r2, r3
 800f84a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f84c:	647b      	str	r3, [r7, #68]	; 0x44
 800f84e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f850:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f854:	e841 2300 	strex	r3, r2, [r1]
 800f858:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d1e6      	bne.n	800f82e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2220      	movs	r2, #32
 800f864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2200      	movs	r2, #0
 800f86c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f870:	2303      	movs	r3, #3
 800f872:	e063      	b.n	800f93c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f003 0304 	and.w	r3, r3, #4
 800f87e:	2b04      	cmp	r3, #4
 800f880:	d149      	bne.n	800f916 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f882:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f886:	9300      	str	r3, [sp, #0]
 800f888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f88a:	2200      	movs	r2, #0
 800f88c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 f857 	bl	800f944 <UART_WaitOnFlagUntilTimeout>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d03c      	beq.n	800f916 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a4:	e853 3f00 	ldrex	r3, [r3]
 800f8a8:	623b      	str	r3, [r7, #32]
   return(result);
 800f8aa:	6a3b      	ldr	r3, [r7, #32]
 800f8ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f8b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8ba:	633b      	str	r3, [r7, #48]	; 0x30
 800f8bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8c2:	e841 2300 	strex	r3, r2, [r1]
 800f8c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d1e6      	bne.n	800f89c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	3308      	adds	r3, #8
 800f8d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	e853 3f00 	ldrex	r3, [r3]
 800f8dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	f023 0301 	bic.w	r3, r3, #1
 800f8e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	3308      	adds	r3, #8
 800f8ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8ee:	61fa      	str	r2, [r7, #28]
 800f8f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8f2:	69b9      	ldr	r1, [r7, #24]
 800f8f4:	69fa      	ldr	r2, [r7, #28]
 800f8f6:	e841 2300 	strex	r3, r2, [r1]
 800f8fa:	617b      	str	r3, [r7, #20]
   return(result);
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d1e5      	bne.n	800f8ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2220      	movs	r2, #32
 800f906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2200      	movs	r2, #0
 800f90e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f912:	2303      	movs	r3, #3
 800f914:	e012      	b.n	800f93c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2220      	movs	r2, #32
 800f91a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2220      	movs	r2, #32
 800f922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2200      	movs	r2, #0
 800f92a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2200      	movs	r2, #0
 800f930:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2200      	movs	r2, #0
 800f936:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f93a:	2300      	movs	r3, #0
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3758      	adds	r7, #88	; 0x58
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b084      	sub	sp, #16
 800f948:	af00      	add	r7, sp, #0
 800f94a:	60f8      	str	r0, [r7, #12]
 800f94c:	60b9      	str	r1, [r7, #8]
 800f94e:	603b      	str	r3, [r7, #0]
 800f950:	4613      	mov	r3, r2
 800f952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f954:	e049      	b.n	800f9ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f956:	69bb      	ldr	r3, [r7, #24]
 800f958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f95c:	d045      	beq.n	800f9ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f95e:	f7f4 fe73 	bl	8004648 <HAL_GetTick>
 800f962:	4602      	mov	r2, r0
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	1ad3      	subs	r3, r2, r3
 800f968:	69ba      	ldr	r2, [r7, #24]
 800f96a:	429a      	cmp	r2, r3
 800f96c:	d302      	bcc.n	800f974 <UART_WaitOnFlagUntilTimeout+0x30>
 800f96e:	69bb      	ldr	r3, [r7, #24]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d101      	bne.n	800f978 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f974:	2303      	movs	r3, #3
 800f976:	e048      	b.n	800fa0a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	f003 0304 	and.w	r3, r3, #4
 800f982:	2b00      	cmp	r3, #0
 800f984:	d031      	beq.n	800f9ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	69db      	ldr	r3, [r3, #28]
 800f98c:	f003 0308 	and.w	r3, r3, #8
 800f990:	2b08      	cmp	r3, #8
 800f992:	d110      	bne.n	800f9b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2208      	movs	r2, #8
 800f99a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f99c:	68f8      	ldr	r0, [r7, #12]
 800f99e:	f000 f839 	bl	800fa14 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	2208      	movs	r2, #8
 800f9a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	e029      	b.n	800fa0a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	69db      	ldr	r3, [r3, #28]
 800f9bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f9c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f9c4:	d111      	bne.n	800f9ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f9ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f9d0:	68f8      	ldr	r0, [r7, #12]
 800f9d2:	f000 f81f 	bl	800fa14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	2220      	movs	r2, #32
 800f9da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f9e6:	2303      	movs	r3, #3
 800f9e8:	e00f      	b.n	800fa0a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	69da      	ldr	r2, [r3, #28]
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	4013      	ands	r3, r2
 800f9f4:	68ba      	ldr	r2, [r7, #8]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	bf0c      	ite	eq
 800f9fa:	2301      	moveq	r3, #1
 800f9fc:	2300      	movne	r3, #0
 800f9fe:	b2db      	uxtb	r3, r3
 800fa00:	461a      	mov	r2, r3
 800fa02:	79fb      	ldrb	r3, [r7, #7]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d0a6      	beq.n	800f956 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fa08:	2300      	movs	r3, #0
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3710      	adds	r7, #16
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
	...

0800fa14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fa14:	b480      	push	{r7}
 800fa16:	b095      	sub	sp, #84	; 0x54
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa24:	e853 3f00 	ldrex	r3, [r3]
 800fa28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fa30:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	461a      	mov	r2, r3
 800fa38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa3a:	643b      	str	r3, [r7, #64]	; 0x40
 800fa3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fa40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fa42:	e841 2300 	strex	r3, r2, [r1]
 800fa46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fa48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d1e6      	bne.n	800fa1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	3308      	adds	r3, #8
 800fa54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa56:	6a3b      	ldr	r3, [r7, #32]
 800fa58:	e853 3f00 	ldrex	r3, [r3]
 800fa5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800fa5e:	69fa      	ldr	r2, [r7, #28]
 800fa60:	4b1e      	ldr	r3, [pc, #120]	; (800fadc <UART_EndRxTransfer+0xc8>)
 800fa62:	4013      	ands	r3, r2
 800fa64:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	3308      	adds	r3, #8
 800fa6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fa70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fa74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa76:	e841 2300 	strex	r3, r2, [r1]
 800fa7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d1e5      	bne.n	800fa4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa86:	2b01      	cmp	r3, #1
 800fa88:	d118      	bne.n	800fabc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	e853 3f00 	ldrex	r3, [r3]
 800fa96:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	f023 0310 	bic.w	r3, r3, #16
 800fa9e:	647b      	str	r3, [r7, #68]	; 0x44
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	461a      	mov	r2, r3
 800faa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faa8:	61bb      	str	r3, [r7, #24]
 800faaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faac:	6979      	ldr	r1, [r7, #20]
 800faae:	69ba      	ldr	r2, [r7, #24]
 800fab0:	e841 2300 	strex	r3, r2, [r1]
 800fab4:	613b      	str	r3, [r7, #16]
   return(result);
 800fab6:	693b      	ldr	r3, [r7, #16]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d1e6      	bne.n	800fa8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2220      	movs	r2, #32
 800fac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2200      	movs	r2, #0
 800fac8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2200      	movs	r2, #0
 800face:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fad0:	bf00      	nop
 800fad2:	3754      	adds	r7, #84	; 0x54
 800fad4:	46bd      	mov	sp, r7
 800fad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fada:	4770      	bx	lr
 800fadc:	effffffe 	.word	0xeffffffe

0800fae0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b084      	sub	sp, #16
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	2200      	movs	r2, #0
 800faf2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	2200      	movs	r2, #0
 800fafa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fafe:	68f8      	ldr	r0, [r7, #12]
 800fb00:	f7fe ff52 	bl	800e9a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb04:	bf00      	nop
 800fb06:	3710      	adds	r7, #16
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b088      	sub	sp, #32
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	e853 3f00 	ldrex	r3, [r3]
 800fb20:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb28:	61fb      	str	r3, [r7, #28]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	461a      	mov	r2, r3
 800fb30:	69fb      	ldr	r3, [r7, #28]
 800fb32:	61bb      	str	r3, [r7, #24]
 800fb34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb36:	6979      	ldr	r1, [r7, #20]
 800fb38:	69ba      	ldr	r2, [r7, #24]
 800fb3a:	e841 2300 	strex	r3, r2, [r1]
 800fb3e:	613b      	str	r3, [r7, #16]
   return(result);
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d1e6      	bne.n	800fb14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2220      	movs	r2, #32
 800fb4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2200      	movs	r2, #0
 800fb52:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f7fe ff1d 	bl	800e994 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb5a:	bf00      	nop
 800fb5c:	3720      	adds	r7, #32
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}

0800fb62 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fb62:	b480      	push	{r7}
 800fb64:	b083      	sub	sp, #12
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fb6a:	bf00      	nop
 800fb6c:	370c      	adds	r7, #12
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb74:	4770      	bx	lr

0800fb76 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fb76:	b480      	push	{r7}
 800fb78:	b083      	sub	sp, #12
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fb7e:	bf00      	nop
 800fb80:	370c      	adds	r7, #12
 800fb82:	46bd      	mov	sp, r7
 800fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb88:	4770      	bx	lr

0800fb8a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fb8a:	b480      	push	{r7}
 800fb8c:	b083      	sub	sp, #12
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fb92:	bf00      	nop
 800fb94:	370c      	adds	r7, #12
 800fb96:	46bd      	mov	sp, r7
 800fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9c:	4770      	bx	lr

0800fb9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fb9e:	b480      	push	{r7}
 800fba0:	b085      	sub	sp, #20
 800fba2:	af00      	add	r7, sp, #0
 800fba4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d101      	bne.n	800fbb4 <HAL_UARTEx_DisableFifoMode+0x16>
 800fbb0:	2302      	movs	r3, #2
 800fbb2:	e027      	b.n	800fc04 <HAL_UARTEx_DisableFifoMode+0x66>
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2224      	movs	r2, #36	; 0x24
 800fbc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	681a      	ldr	r2, [r3, #0]
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	f022 0201 	bic.w	r2, r2, #1
 800fbda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fbe2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	68fa      	ldr	r2, [r7, #12]
 800fbf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2220      	movs	r2, #32
 800fbf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2200      	movs	r2, #0
 800fbfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fc02:	2300      	movs	r3, #0
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3714      	adds	r7, #20
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0e:	4770      	bx	lr

0800fc10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b084      	sub	sp, #16
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d101      	bne.n	800fc28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fc24:	2302      	movs	r3, #2
 800fc26:	e02d      	b.n	800fc84 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2201      	movs	r2, #1
 800fc2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2224      	movs	r2, #36	; 0x24
 800fc34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	681a      	ldr	r2, [r3, #0]
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	f022 0201 	bic.w	r2, r2, #1
 800fc4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	689b      	ldr	r3, [r3, #8]
 800fc56:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	683a      	ldr	r2, [r7, #0]
 800fc60:	430a      	orrs	r2, r1
 800fc62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f000 f84f 	bl	800fd08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	68fa      	ldr	r2, [r7, #12]
 800fc70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2220      	movs	r2, #32
 800fc76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fc82:	2300      	movs	r3, #0
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3710      	adds	r7, #16
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b084      	sub	sp, #16
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	d101      	bne.n	800fca4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fca0:	2302      	movs	r3, #2
 800fca2:	e02d      	b.n	800fd00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2201      	movs	r2, #1
 800fca8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2224      	movs	r2, #36	; 0x24
 800fcb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	681a      	ldr	r2, [r3, #0]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	f022 0201 	bic.w	r2, r2, #1
 800fcca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	689b      	ldr	r3, [r3, #8]
 800fcd2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	683a      	ldr	r2, [r7, #0]
 800fcdc:	430a      	orrs	r2, r1
 800fcde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f000 f811 	bl	800fd08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	68fa      	ldr	r2, [r7, #12]
 800fcec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	2220      	movs	r2, #32
 800fcf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fcfe:	2300      	movs	r3, #0
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3710      	adds	r7, #16
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}

0800fd08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b085      	sub	sp, #20
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d108      	bne.n	800fd2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2201      	movs	r2, #1
 800fd1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2201      	movs	r2, #1
 800fd24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fd28:	e031      	b.n	800fd8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fd2a:	2310      	movs	r3, #16
 800fd2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fd2e:	2310      	movs	r3, #16
 800fd30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	689b      	ldr	r3, [r3, #8]
 800fd38:	0e5b      	lsrs	r3, r3, #25
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	f003 0307 	and.w	r3, r3, #7
 800fd40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	689b      	ldr	r3, [r3, #8]
 800fd48:	0f5b      	lsrs	r3, r3, #29
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	f003 0307 	and.w	r3, r3, #7
 800fd50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd52:	7bbb      	ldrb	r3, [r7, #14]
 800fd54:	7b3a      	ldrb	r2, [r7, #12]
 800fd56:	4911      	ldr	r1, [pc, #68]	; (800fd9c <UARTEx_SetNbDataToProcess+0x94>)
 800fd58:	5c8a      	ldrb	r2, [r1, r2]
 800fd5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fd5e:	7b3a      	ldrb	r2, [r7, #12]
 800fd60:	490f      	ldr	r1, [pc, #60]	; (800fda0 <UARTEx_SetNbDataToProcess+0x98>)
 800fd62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd64:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd68:	b29a      	uxth	r2, r3
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd70:	7bfb      	ldrb	r3, [r7, #15]
 800fd72:	7b7a      	ldrb	r2, [r7, #13]
 800fd74:	4909      	ldr	r1, [pc, #36]	; (800fd9c <UARTEx_SetNbDataToProcess+0x94>)
 800fd76:	5c8a      	ldrb	r2, [r1, r2]
 800fd78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fd7c:	7b7a      	ldrb	r2, [r7, #13]
 800fd7e:	4908      	ldr	r1, [pc, #32]	; (800fda0 <UARTEx_SetNbDataToProcess+0x98>)
 800fd80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd82:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd86:	b29a      	uxth	r2, r3
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fd8e:	bf00      	nop
 800fd90:	3714      	adds	r7, #20
 800fd92:	46bd      	mov	sp, r7
 800fd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd98:	4770      	bx	lr
 800fd9a:	bf00      	nop
 800fd9c:	08011624 	.word	0x08011624
 800fda0:	0801162c 	.word	0x0801162c

0800fda4 <__errno>:
 800fda4:	4b01      	ldr	r3, [pc, #4]	; (800fdac <__errno+0x8>)
 800fda6:	6818      	ldr	r0, [r3, #0]
 800fda8:	4770      	bx	lr
 800fdaa:	bf00      	nop
 800fdac:	24000054 	.word	0x24000054

0800fdb0 <__libc_init_array>:
 800fdb0:	b570      	push	{r4, r5, r6, lr}
 800fdb2:	4d0d      	ldr	r5, [pc, #52]	; (800fde8 <__libc_init_array+0x38>)
 800fdb4:	4c0d      	ldr	r4, [pc, #52]	; (800fdec <__libc_init_array+0x3c>)
 800fdb6:	1b64      	subs	r4, r4, r5
 800fdb8:	10a4      	asrs	r4, r4, #2
 800fdba:	2600      	movs	r6, #0
 800fdbc:	42a6      	cmp	r6, r4
 800fdbe:	d109      	bne.n	800fdd4 <__libc_init_array+0x24>
 800fdc0:	4d0b      	ldr	r5, [pc, #44]	; (800fdf0 <__libc_init_array+0x40>)
 800fdc2:	4c0c      	ldr	r4, [pc, #48]	; (800fdf4 <__libc_init_array+0x44>)
 800fdc4:	f001 f8f2 	bl	8010fac <_init>
 800fdc8:	1b64      	subs	r4, r4, r5
 800fdca:	10a4      	asrs	r4, r4, #2
 800fdcc:	2600      	movs	r6, #0
 800fdce:	42a6      	cmp	r6, r4
 800fdd0:	d105      	bne.n	800fdde <__libc_init_array+0x2e>
 800fdd2:	bd70      	pop	{r4, r5, r6, pc}
 800fdd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800fdd8:	4798      	blx	r3
 800fdda:	3601      	adds	r6, #1
 800fddc:	e7ee      	b.n	800fdbc <__libc_init_array+0xc>
 800fdde:	f855 3b04 	ldr.w	r3, [r5], #4
 800fde2:	4798      	blx	r3
 800fde4:	3601      	adds	r6, #1
 800fde6:	e7f2      	b.n	800fdce <__libc_init_array+0x1e>
 800fde8:	080116d4 	.word	0x080116d4
 800fdec:	080116d4 	.word	0x080116d4
 800fdf0:	080116d4 	.word	0x080116d4
 800fdf4:	080116d8 	.word	0x080116d8

0800fdf8 <memset>:
 800fdf8:	4402      	add	r2, r0
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	4293      	cmp	r3, r2
 800fdfe:	d100      	bne.n	800fe02 <memset+0xa>
 800fe00:	4770      	bx	lr
 800fe02:	f803 1b01 	strb.w	r1, [r3], #1
 800fe06:	e7f9      	b.n	800fdfc <memset+0x4>

0800fe08 <iprintf>:
 800fe08:	b40f      	push	{r0, r1, r2, r3}
 800fe0a:	4b0a      	ldr	r3, [pc, #40]	; (800fe34 <iprintf+0x2c>)
 800fe0c:	b513      	push	{r0, r1, r4, lr}
 800fe0e:	681c      	ldr	r4, [r3, #0]
 800fe10:	b124      	cbz	r4, 800fe1c <iprintf+0x14>
 800fe12:	69a3      	ldr	r3, [r4, #24]
 800fe14:	b913      	cbnz	r3, 800fe1c <iprintf+0x14>
 800fe16:	4620      	mov	r0, r4
 800fe18:	f000 fb24 	bl	8010464 <__sinit>
 800fe1c:	ab05      	add	r3, sp, #20
 800fe1e:	9a04      	ldr	r2, [sp, #16]
 800fe20:	68a1      	ldr	r1, [r4, #8]
 800fe22:	9301      	str	r3, [sp, #4]
 800fe24:	4620      	mov	r0, r4
 800fe26:	f000 fd35 	bl	8010894 <_vfiprintf_r>
 800fe2a:	b002      	add	sp, #8
 800fe2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe30:	b004      	add	sp, #16
 800fe32:	4770      	bx	lr
 800fe34:	24000054 	.word	0x24000054

0800fe38 <_puts_r>:
 800fe38:	b570      	push	{r4, r5, r6, lr}
 800fe3a:	460e      	mov	r6, r1
 800fe3c:	4605      	mov	r5, r0
 800fe3e:	b118      	cbz	r0, 800fe48 <_puts_r+0x10>
 800fe40:	6983      	ldr	r3, [r0, #24]
 800fe42:	b90b      	cbnz	r3, 800fe48 <_puts_r+0x10>
 800fe44:	f000 fb0e 	bl	8010464 <__sinit>
 800fe48:	69ab      	ldr	r3, [r5, #24]
 800fe4a:	68ac      	ldr	r4, [r5, #8]
 800fe4c:	b913      	cbnz	r3, 800fe54 <_puts_r+0x1c>
 800fe4e:	4628      	mov	r0, r5
 800fe50:	f000 fb08 	bl	8010464 <__sinit>
 800fe54:	4b2c      	ldr	r3, [pc, #176]	; (800ff08 <_puts_r+0xd0>)
 800fe56:	429c      	cmp	r4, r3
 800fe58:	d120      	bne.n	800fe9c <_puts_r+0x64>
 800fe5a:	686c      	ldr	r4, [r5, #4]
 800fe5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe5e:	07db      	lsls	r3, r3, #31
 800fe60:	d405      	bmi.n	800fe6e <_puts_r+0x36>
 800fe62:	89a3      	ldrh	r3, [r4, #12]
 800fe64:	0598      	lsls	r0, r3, #22
 800fe66:	d402      	bmi.n	800fe6e <_puts_r+0x36>
 800fe68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe6a:	f000 fb99 	bl	80105a0 <__retarget_lock_acquire_recursive>
 800fe6e:	89a3      	ldrh	r3, [r4, #12]
 800fe70:	0719      	lsls	r1, r3, #28
 800fe72:	d51d      	bpl.n	800feb0 <_puts_r+0x78>
 800fe74:	6923      	ldr	r3, [r4, #16]
 800fe76:	b1db      	cbz	r3, 800feb0 <_puts_r+0x78>
 800fe78:	3e01      	subs	r6, #1
 800fe7a:	68a3      	ldr	r3, [r4, #8]
 800fe7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fe80:	3b01      	subs	r3, #1
 800fe82:	60a3      	str	r3, [r4, #8]
 800fe84:	bb39      	cbnz	r1, 800fed6 <_puts_r+0x9e>
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	da38      	bge.n	800fefc <_puts_r+0xc4>
 800fe8a:	4622      	mov	r2, r4
 800fe8c:	210a      	movs	r1, #10
 800fe8e:	4628      	mov	r0, r5
 800fe90:	f000 f90e 	bl	80100b0 <__swbuf_r>
 800fe94:	3001      	adds	r0, #1
 800fe96:	d011      	beq.n	800febc <_puts_r+0x84>
 800fe98:	250a      	movs	r5, #10
 800fe9a:	e011      	b.n	800fec0 <_puts_r+0x88>
 800fe9c:	4b1b      	ldr	r3, [pc, #108]	; (800ff0c <_puts_r+0xd4>)
 800fe9e:	429c      	cmp	r4, r3
 800fea0:	d101      	bne.n	800fea6 <_puts_r+0x6e>
 800fea2:	68ac      	ldr	r4, [r5, #8]
 800fea4:	e7da      	b.n	800fe5c <_puts_r+0x24>
 800fea6:	4b1a      	ldr	r3, [pc, #104]	; (800ff10 <_puts_r+0xd8>)
 800fea8:	429c      	cmp	r4, r3
 800feaa:	bf08      	it	eq
 800feac:	68ec      	ldreq	r4, [r5, #12]
 800feae:	e7d5      	b.n	800fe5c <_puts_r+0x24>
 800feb0:	4621      	mov	r1, r4
 800feb2:	4628      	mov	r0, r5
 800feb4:	f000 f94e 	bl	8010154 <__swsetup_r>
 800feb8:	2800      	cmp	r0, #0
 800feba:	d0dd      	beq.n	800fe78 <_puts_r+0x40>
 800febc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800fec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fec2:	07da      	lsls	r2, r3, #31
 800fec4:	d405      	bmi.n	800fed2 <_puts_r+0x9a>
 800fec6:	89a3      	ldrh	r3, [r4, #12]
 800fec8:	059b      	lsls	r3, r3, #22
 800feca:	d402      	bmi.n	800fed2 <_puts_r+0x9a>
 800fecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fece:	f000 fb68 	bl	80105a2 <__retarget_lock_release_recursive>
 800fed2:	4628      	mov	r0, r5
 800fed4:	bd70      	pop	{r4, r5, r6, pc}
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	da04      	bge.n	800fee4 <_puts_r+0xac>
 800feda:	69a2      	ldr	r2, [r4, #24]
 800fedc:	429a      	cmp	r2, r3
 800fede:	dc06      	bgt.n	800feee <_puts_r+0xb6>
 800fee0:	290a      	cmp	r1, #10
 800fee2:	d004      	beq.n	800feee <_puts_r+0xb6>
 800fee4:	6823      	ldr	r3, [r4, #0]
 800fee6:	1c5a      	adds	r2, r3, #1
 800fee8:	6022      	str	r2, [r4, #0]
 800feea:	7019      	strb	r1, [r3, #0]
 800feec:	e7c5      	b.n	800fe7a <_puts_r+0x42>
 800feee:	4622      	mov	r2, r4
 800fef0:	4628      	mov	r0, r5
 800fef2:	f000 f8dd 	bl	80100b0 <__swbuf_r>
 800fef6:	3001      	adds	r0, #1
 800fef8:	d1bf      	bne.n	800fe7a <_puts_r+0x42>
 800fefa:	e7df      	b.n	800febc <_puts_r+0x84>
 800fefc:	6823      	ldr	r3, [r4, #0]
 800fefe:	250a      	movs	r5, #10
 800ff00:	1c5a      	adds	r2, r3, #1
 800ff02:	6022      	str	r2, [r4, #0]
 800ff04:	701d      	strb	r5, [r3, #0]
 800ff06:	e7db      	b.n	800fec0 <_puts_r+0x88>
 800ff08:	08011658 	.word	0x08011658
 800ff0c:	08011678 	.word	0x08011678
 800ff10:	08011638 	.word	0x08011638

0800ff14 <puts>:
 800ff14:	4b02      	ldr	r3, [pc, #8]	; (800ff20 <puts+0xc>)
 800ff16:	4601      	mov	r1, r0
 800ff18:	6818      	ldr	r0, [r3, #0]
 800ff1a:	f7ff bf8d 	b.w	800fe38 <_puts_r>
 800ff1e:	bf00      	nop
 800ff20:	24000054 	.word	0x24000054

0800ff24 <setvbuf>:
 800ff24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ff28:	461d      	mov	r5, r3
 800ff2a:	4b5d      	ldr	r3, [pc, #372]	; (80100a0 <setvbuf+0x17c>)
 800ff2c:	681f      	ldr	r7, [r3, #0]
 800ff2e:	4604      	mov	r4, r0
 800ff30:	460e      	mov	r6, r1
 800ff32:	4690      	mov	r8, r2
 800ff34:	b127      	cbz	r7, 800ff40 <setvbuf+0x1c>
 800ff36:	69bb      	ldr	r3, [r7, #24]
 800ff38:	b913      	cbnz	r3, 800ff40 <setvbuf+0x1c>
 800ff3a:	4638      	mov	r0, r7
 800ff3c:	f000 fa92 	bl	8010464 <__sinit>
 800ff40:	4b58      	ldr	r3, [pc, #352]	; (80100a4 <setvbuf+0x180>)
 800ff42:	429c      	cmp	r4, r3
 800ff44:	d167      	bne.n	8010016 <setvbuf+0xf2>
 800ff46:	687c      	ldr	r4, [r7, #4]
 800ff48:	f1b8 0f02 	cmp.w	r8, #2
 800ff4c:	d006      	beq.n	800ff5c <setvbuf+0x38>
 800ff4e:	f1b8 0f01 	cmp.w	r8, #1
 800ff52:	f200 809f 	bhi.w	8010094 <setvbuf+0x170>
 800ff56:	2d00      	cmp	r5, #0
 800ff58:	f2c0 809c 	blt.w	8010094 <setvbuf+0x170>
 800ff5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff5e:	07db      	lsls	r3, r3, #31
 800ff60:	d405      	bmi.n	800ff6e <setvbuf+0x4a>
 800ff62:	89a3      	ldrh	r3, [r4, #12]
 800ff64:	0598      	lsls	r0, r3, #22
 800ff66:	d402      	bmi.n	800ff6e <setvbuf+0x4a>
 800ff68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff6a:	f000 fb19 	bl	80105a0 <__retarget_lock_acquire_recursive>
 800ff6e:	4621      	mov	r1, r4
 800ff70:	4638      	mov	r0, r7
 800ff72:	f000 f9e3 	bl	801033c <_fflush_r>
 800ff76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff78:	b141      	cbz	r1, 800ff8c <setvbuf+0x68>
 800ff7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff7e:	4299      	cmp	r1, r3
 800ff80:	d002      	beq.n	800ff88 <setvbuf+0x64>
 800ff82:	4638      	mov	r0, r7
 800ff84:	f000 fb7c 	bl	8010680 <_free_r>
 800ff88:	2300      	movs	r3, #0
 800ff8a:	6363      	str	r3, [r4, #52]	; 0x34
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	61a3      	str	r3, [r4, #24]
 800ff90:	6063      	str	r3, [r4, #4]
 800ff92:	89a3      	ldrh	r3, [r4, #12]
 800ff94:	0619      	lsls	r1, r3, #24
 800ff96:	d503      	bpl.n	800ffa0 <setvbuf+0x7c>
 800ff98:	6921      	ldr	r1, [r4, #16]
 800ff9a:	4638      	mov	r0, r7
 800ff9c:	f000 fb70 	bl	8010680 <_free_r>
 800ffa0:	89a3      	ldrh	r3, [r4, #12]
 800ffa2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800ffa6:	f023 0303 	bic.w	r3, r3, #3
 800ffaa:	f1b8 0f02 	cmp.w	r8, #2
 800ffae:	81a3      	strh	r3, [r4, #12]
 800ffb0:	d06c      	beq.n	801008c <setvbuf+0x168>
 800ffb2:	ab01      	add	r3, sp, #4
 800ffb4:	466a      	mov	r2, sp
 800ffb6:	4621      	mov	r1, r4
 800ffb8:	4638      	mov	r0, r7
 800ffba:	f000 faf3 	bl	80105a4 <__swhatbuf_r>
 800ffbe:	89a3      	ldrh	r3, [r4, #12]
 800ffc0:	4318      	orrs	r0, r3
 800ffc2:	81a0      	strh	r0, [r4, #12]
 800ffc4:	2d00      	cmp	r5, #0
 800ffc6:	d130      	bne.n	801002a <setvbuf+0x106>
 800ffc8:	9d00      	ldr	r5, [sp, #0]
 800ffca:	4628      	mov	r0, r5
 800ffcc:	f000 fb50 	bl	8010670 <malloc>
 800ffd0:	4606      	mov	r6, r0
 800ffd2:	2800      	cmp	r0, #0
 800ffd4:	d155      	bne.n	8010082 <setvbuf+0x15e>
 800ffd6:	f8dd 9000 	ldr.w	r9, [sp]
 800ffda:	45a9      	cmp	r9, r5
 800ffdc:	d14a      	bne.n	8010074 <setvbuf+0x150>
 800ffde:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	60a2      	str	r2, [r4, #8]
 800ffe6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800ffea:	6022      	str	r2, [r4, #0]
 800ffec:	6122      	str	r2, [r4, #16]
 800ffee:	2201      	movs	r2, #1
 800fff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fff4:	6162      	str	r2, [r4, #20]
 800fff6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fff8:	f043 0302 	orr.w	r3, r3, #2
 800fffc:	07d2      	lsls	r2, r2, #31
 800fffe:	81a3      	strh	r3, [r4, #12]
 8010000:	d405      	bmi.n	801000e <setvbuf+0xea>
 8010002:	f413 7f00 	tst.w	r3, #512	; 0x200
 8010006:	d102      	bne.n	801000e <setvbuf+0xea>
 8010008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801000a:	f000 faca 	bl	80105a2 <__retarget_lock_release_recursive>
 801000e:	4628      	mov	r0, r5
 8010010:	b003      	add	sp, #12
 8010012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010016:	4b24      	ldr	r3, [pc, #144]	; (80100a8 <setvbuf+0x184>)
 8010018:	429c      	cmp	r4, r3
 801001a:	d101      	bne.n	8010020 <setvbuf+0xfc>
 801001c:	68bc      	ldr	r4, [r7, #8]
 801001e:	e793      	b.n	800ff48 <setvbuf+0x24>
 8010020:	4b22      	ldr	r3, [pc, #136]	; (80100ac <setvbuf+0x188>)
 8010022:	429c      	cmp	r4, r3
 8010024:	bf08      	it	eq
 8010026:	68fc      	ldreq	r4, [r7, #12]
 8010028:	e78e      	b.n	800ff48 <setvbuf+0x24>
 801002a:	2e00      	cmp	r6, #0
 801002c:	d0cd      	beq.n	800ffca <setvbuf+0xa6>
 801002e:	69bb      	ldr	r3, [r7, #24]
 8010030:	b913      	cbnz	r3, 8010038 <setvbuf+0x114>
 8010032:	4638      	mov	r0, r7
 8010034:	f000 fa16 	bl	8010464 <__sinit>
 8010038:	f1b8 0f01 	cmp.w	r8, #1
 801003c:	bf08      	it	eq
 801003e:	89a3      	ldrheq	r3, [r4, #12]
 8010040:	6026      	str	r6, [r4, #0]
 8010042:	bf04      	itt	eq
 8010044:	f043 0301 	orreq.w	r3, r3, #1
 8010048:	81a3      	strheq	r3, [r4, #12]
 801004a:	89a2      	ldrh	r2, [r4, #12]
 801004c:	f012 0308 	ands.w	r3, r2, #8
 8010050:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8010054:	d01c      	beq.n	8010090 <setvbuf+0x16c>
 8010056:	07d3      	lsls	r3, r2, #31
 8010058:	bf41      	itttt	mi
 801005a:	2300      	movmi	r3, #0
 801005c:	426d      	negmi	r5, r5
 801005e:	60a3      	strmi	r3, [r4, #8]
 8010060:	61a5      	strmi	r5, [r4, #24]
 8010062:	bf58      	it	pl
 8010064:	60a5      	strpl	r5, [r4, #8]
 8010066:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8010068:	f015 0501 	ands.w	r5, r5, #1
 801006c:	d115      	bne.n	801009a <setvbuf+0x176>
 801006e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8010072:	e7c8      	b.n	8010006 <setvbuf+0xe2>
 8010074:	4648      	mov	r0, r9
 8010076:	f000 fafb 	bl	8010670 <malloc>
 801007a:	4606      	mov	r6, r0
 801007c:	2800      	cmp	r0, #0
 801007e:	d0ae      	beq.n	800ffde <setvbuf+0xba>
 8010080:	464d      	mov	r5, r9
 8010082:	89a3      	ldrh	r3, [r4, #12]
 8010084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010088:	81a3      	strh	r3, [r4, #12]
 801008a:	e7d0      	b.n	801002e <setvbuf+0x10a>
 801008c:	2500      	movs	r5, #0
 801008e:	e7a8      	b.n	800ffe2 <setvbuf+0xbe>
 8010090:	60a3      	str	r3, [r4, #8]
 8010092:	e7e8      	b.n	8010066 <setvbuf+0x142>
 8010094:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010098:	e7b9      	b.n	801000e <setvbuf+0xea>
 801009a:	2500      	movs	r5, #0
 801009c:	e7b7      	b.n	801000e <setvbuf+0xea>
 801009e:	bf00      	nop
 80100a0:	24000054 	.word	0x24000054
 80100a4:	08011658 	.word	0x08011658
 80100a8:	08011678 	.word	0x08011678
 80100ac:	08011638 	.word	0x08011638

080100b0 <__swbuf_r>:
 80100b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100b2:	460e      	mov	r6, r1
 80100b4:	4614      	mov	r4, r2
 80100b6:	4605      	mov	r5, r0
 80100b8:	b118      	cbz	r0, 80100c2 <__swbuf_r+0x12>
 80100ba:	6983      	ldr	r3, [r0, #24]
 80100bc:	b90b      	cbnz	r3, 80100c2 <__swbuf_r+0x12>
 80100be:	f000 f9d1 	bl	8010464 <__sinit>
 80100c2:	4b21      	ldr	r3, [pc, #132]	; (8010148 <__swbuf_r+0x98>)
 80100c4:	429c      	cmp	r4, r3
 80100c6:	d12b      	bne.n	8010120 <__swbuf_r+0x70>
 80100c8:	686c      	ldr	r4, [r5, #4]
 80100ca:	69a3      	ldr	r3, [r4, #24]
 80100cc:	60a3      	str	r3, [r4, #8]
 80100ce:	89a3      	ldrh	r3, [r4, #12]
 80100d0:	071a      	lsls	r2, r3, #28
 80100d2:	d52f      	bpl.n	8010134 <__swbuf_r+0x84>
 80100d4:	6923      	ldr	r3, [r4, #16]
 80100d6:	b36b      	cbz	r3, 8010134 <__swbuf_r+0x84>
 80100d8:	6923      	ldr	r3, [r4, #16]
 80100da:	6820      	ldr	r0, [r4, #0]
 80100dc:	1ac0      	subs	r0, r0, r3
 80100de:	6963      	ldr	r3, [r4, #20]
 80100e0:	b2f6      	uxtb	r6, r6
 80100e2:	4283      	cmp	r3, r0
 80100e4:	4637      	mov	r7, r6
 80100e6:	dc04      	bgt.n	80100f2 <__swbuf_r+0x42>
 80100e8:	4621      	mov	r1, r4
 80100ea:	4628      	mov	r0, r5
 80100ec:	f000 f926 	bl	801033c <_fflush_r>
 80100f0:	bb30      	cbnz	r0, 8010140 <__swbuf_r+0x90>
 80100f2:	68a3      	ldr	r3, [r4, #8]
 80100f4:	3b01      	subs	r3, #1
 80100f6:	60a3      	str	r3, [r4, #8]
 80100f8:	6823      	ldr	r3, [r4, #0]
 80100fa:	1c5a      	adds	r2, r3, #1
 80100fc:	6022      	str	r2, [r4, #0]
 80100fe:	701e      	strb	r6, [r3, #0]
 8010100:	6963      	ldr	r3, [r4, #20]
 8010102:	3001      	adds	r0, #1
 8010104:	4283      	cmp	r3, r0
 8010106:	d004      	beq.n	8010112 <__swbuf_r+0x62>
 8010108:	89a3      	ldrh	r3, [r4, #12]
 801010a:	07db      	lsls	r3, r3, #31
 801010c:	d506      	bpl.n	801011c <__swbuf_r+0x6c>
 801010e:	2e0a      	cmp	r6, #10
 8010110:	d104      	bne.n	801011c <__swbuf_r+0x6c>
 8010112:	4621      	mov	r1, r4
 8010114:	4628      	mov	r0, r5
 8010116:	f000 f911 	bl	801033c <_fflush_r>
 801011a:	b988      	cbnz	r0, 8010140 <__swbuf_r+0x90>
 801011c:	4638      	mov	r0, r7
 801011e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010120:	4b0a      	ldr	r3, [pc, #40]	; (801014c <__swbuf_r+0x9c>)
 8010122:	429c      	cmp	r4, r3
 8010124:	d101      	bne.n	801012a <__swbuf_r+0x7a>
 8010126:	68ac      	ldr	r4, [r5, #8]
 8010128:	e7cf      	b.n	80100ca <__swbuf_r+0x1a>
 801012a:	4b09      	ldr	r3, [pc, #36]	; (8010150 <__swbuf_r+0xa0>)
 801012c:	429c      	cmp	r4, r3
 801012e:	bf08      	it	eq
 8010130:	68ec      	ldreq	r4, [r5, #12]
 8010132:	e7ca      	b.n	80100ca <__swbuf_r+0x1a>
 8010134:	4621      	mov	r1, r4
 8010136:	4628      	mov	r0, r5
 8010138:	f000 f80c 	bl	8010154 <__swsetup_r>
 801013c:	2800      	cmp	r0, #0
 801013e:	d0cb      	beq.n	80100d8 <__swbuf_r+0x28>
 8010140:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010144:	e7ea      	b.n	801011c <__swbuf_r+0x6c>
 8010146:	bf00      	nop
 8010148:	08011658 	.word	0x08011658
 801014c:	08011678 	.word	0x08011678
 8010150:	08011638 	.word	0x08011638

08010154 <__swsetup_r>:
 8010154:	4b32      	ldr	r3, [pc, #200]	; (8010220 <__swsetup_r+0xcc>)
 8010156:	b570      	push	{r4, r5, r6, lr}
 8010158:	681d      	ldr	r5, [r3, #0]
 801015a:	4606      	mov	r6, r0
 801015c:	460c      	mov	r4, r1
 801015e:	b125      	cbz	r5, 801016a <__swsetup_r+0x16>
 8010160:	69ab      	ldr	r3, [r5, #24]
 8010162:	b913      	cbnz	r3, 801016a <__swsetup_r+0x16>
 8010164:	4628      	mov	r0, r5
 8010166:	f000 f97d 	bl	8010464 <__sinit>
 801016a:	4b2e      	ldr	r3, [pc, #184]	; (8010224 <__swsetup_r+0xd0>)
 801016c:	429c      	cmp	r4, r3
 801016e:	d10f      	bne.n	8010190 <__swsetup_r+0x3c>
 8010170:	686c      	ldr	r4, [r5, #4]
 8010172:	89a3      	ldrh	r3, [r4, #12]
 8010174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010178:	0719      	lsls	r1, r3, #28
 801017a:	d42c      	bmi.n	80101d6 <__swsetup_r+0x82>
 801017c:	06dd      	lsls	r5, r3, #27
 801017e:	d411      	bmi.n	80101a4 <__swsetup_r+0x50>
 8010180:	2309      	movs	r3, #9
 8010182:	6033      	str	r3, [r6, #0]
 8010184:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010188:	81a3      	strh	r3, [r4, #12]
 801018a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801018e:	e03e      	b.n	801020e <__swsetup_r+0xba>
 8010190:	4b25      	ldr	r3, [pc, #148]	; (8010228 <__swsetup_r+0xd4>)
 8010192:	429c      	cmp	r4, r3
 8010194:	d101      	bne.n	801019a <__swsetup_r+0x46>
 8010196:	68ac      	ldr	r4, [r5, #8]
 8010198:	e7eb      	b.n	8010172 <__swsetup_r+0x1e>
 801019a:	4b24      	ldr	r3, [pc, #144]	; (801022c <__swsetup_r+0xd8>)
 801019c:	429c      	cmp	r4, r3
 801019e:	bf08      	it	eq
 80101a0:	68ec      	ldreq	r4, [r5, #12]
 80101a2:	e7e6      	b.n	8010172 <__swsetup_r+0x1e>
 80101a4:	0758      	lsls	r0, r3, #29
 80101a6:	d512      	bpl.n	80101ce <__swsetup_r+0x7a>
 80101a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101aa:	b141      	cbz	r1, 80101be <__swsetup_r+0x6a>
 80101ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101b0:	4299      	cmp	r1, r3
 80101b2:	d002      	beq.n	80101ba <__swsetup_r+0x66>
 80101b4:	4630      	mov	r0, r6
 80101b6:	f000 fa63 	bl	8010680 <_free_r>
 80101ba:	2300      	movs	r3, #0
 80101bc:	6363      	str	r3, [r4, #52]	; 0x34
 80101be:	89a3      	ldrh	r3, [r4, #12]
 80101c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80101c4:	81a3      	strh	r3, [r4, #12]
 80101c6:	2300      	movs	r3, #0
 80101c8:	6063      	str	r3, [r4, #4]
 80101ca:	6923      	ldr	r3, [r4, #16]
 80101cc:	6023      	str	r3, [r4, #0]
 80101ce:	89a3      	ldrh	r3, [r4, #12]
 80101d0:	f043 0308 	orr.w	r3, r3, #8
 80101d4:	81a3      	strh	r3, [r4, #12]
 80101d6:	6923      	ldr	r3, [r4, #16]
 80101d8:	b94b      	cbnz	r3, 80101ee <__swsetup_r+0x9a>
 80101da:	89a3      	ldrh	r3, [r4, #12]
 80101dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80101e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101e4:	d003      	beq.n	80101ee <__swsetup_r+0x9a>
 80101e6:	4621      	mov	r1, r4
 80101e8:	4630      	mov	r0, r6
 80101ea:	f000 fa01 	bl	80105f0 <__smakebuf_r>
 80101ee:	89a0      	ldrh	r0, [r4, #12]
 80101f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101f4:	f010 0301 	ands.w	r3, r0, #1
 80101f8:	d00a      	beq.n	8010210 <__swsetup_r+0xbc>
 80101fa:	2300      	movs	r3, #0
 80101fc:	60a3      	str	r3, [r4, #8]
 80101fe:	6963      	ldr	r3, [r4, #20]
 8010200:	425b      	negs	r3, r3
 8010202:	61a3      	str	r3, [r4, #24]
 8010204:	6923      	ldr	r3, [r4, #16]
 8010206:	b943      	cbnz	r3, 801021a <__swsetup_r+0xc6>
 8010208:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801020c:	d1ba      	bne.n	8010184 <__swsetup_r+0x30>
 801020e:	bd70      	pop	{r4, r5, r6, pc}
 8010210:	0781      	lsls	r1, r0, #30
 8010212:	bf58      	it	pl
 8010214:	6963      	ldrpl	r3, [r4, #20]
 8010216:	60a3      	str	r3, [r4, #8]
 8010218:	e7f4      	b.n	8010204 <__swsetup_r+0xb0>
 801021a:	2000      	movs	r0, #0
 801021c:	e7f7      	b.n	801020e <__swsetup_r+0xba>
 801021e:	bf00      	nop
 8010220:	24000054 	.word	0x24000054
 8010224:	08011658 	.word	0x08011658
 8010228:	08011678 	.word	0x08011678
 801022c:	08011638 	.word	0x08011638

08010230 <__sflush_r>:
 8010230:	898a      	ldrh	r2, [r1, #12]
 8010232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010236:	4605      	mov	r5, r0
 8010238:	0710      	lsls	r0, r2, #28
 801023a:	460c      	mov	r4, r1
 801023c:	d458      	bmi.n	80102f0 <__sflush_r+0xc0>
 801023e:	684b      	ldr	r3, [r1, #4]
 8010240:	2b00      	cmp	r3, #0
 8010242:	dc05      	bgt.n	8010250 <__sflush_r+0x20>
 8010244:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010246:	2b00      	cmp	r3, #0
 8010248:	dc02      	bgt.n	8010250 <__sflush_r+0x20>
 801024a:	2000      	movs	r0, #0
 801024c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010252:	2e00      	cmp	r6, #0
 8010254:	d0f9      	beq.n	801024a <__sflush_r+0x1a>
 8010256:	2300      	movs	r3, #0
 8010258:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801025c:	682f      	ldr	r7, [r5, #0]
 801025e:	602b      	str	r3, [r5, #0]
 8010260:	d032      	beq.n	80102c8 <__sflush_r+0x98>
 8010262:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010264:	89a3      	ldrh	r3, [r4, #12]
 8010266:	075a      	lsls	r2, r3, #29
 8010268:	d505      	bpl.n	8010276 <__sflush_r+0x46>
 801026a:	6863      	ldr	r3, [r4, #4]
 801026c:	1ac0      	subs	r0, r0, r3
 801026e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010270:	b10b      	cbz	r3, 8010276 <__sflush_r+0x46>
 8010272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010274:	1ac0      	subs	r0, r0, r3
 8010276:	2300      	movs	r3, #0
 8010278:	4602      	mov	r2, r0
 801027a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801027c:	6a21      	ldr	r1, [r4, #32]
 801027e:	4628      	mov	r0, r5
 8010280:	47b0      	blx	r6
 8010282:	1c43      	adds	r3, r0, #1
 8010284:	89a3      	ldrh	r3, [r4, #12]
 8010286:	d106      	bne.n	8010296 <__sflush_r+0x66>
 8010288:	6829      	ldr	r1, [r5, #0]
 801028a:	291d      	cmp	r1, #29
 801028c:	d82c      	bhi.n	80102e8 <__sflush_r+0xb8>
 801028e:	4a2a      	ldr	r2, [pc, #168]	; (8010338 <__sflush_r+0x108>)
 8010290:	40ca      	lsrs	r2, r1
 8010292:	07d6      	lsls	r6, r2, #31
 8010294:	d528      	bpl.n	80102e8 <__sflush_r+0xb8>
 8010296:	2200      	movs	r2, #0
 8010298:	6062      	str	r2, [r4, #4]
 801029a:	04d9      	lsls	r1, r3, #19
 801029c:	6922      	ldr	r2, [r4, #16]
 801029e:	6022      	str	r2, [r4, #0]
 80102a0:	d504      	bpl.n	80102ac <__sflush_r+0x7c>
 80102a2:	1c42      	adds	r2, r0, #1
 80102a4:	d101      	bne.n	80102aa <__sflush_r+0x7a>
 80102a6:	682b      	ldr	r3, [r5, #0]
 80102a8:	b903      	cbnz	r3, 80102ac <__sflush_r+0x7c>
 80102aa:	6560      	str	r0, [r4, #84]	; 0x54
 80102ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102ae:	602f      	str	r7, [r5, #0]
 80102b0:	2900      	cmp	r1, #0
 80102b2:	d0ca      	beq.n	801024a <__sflush_r+0x1a>
 80102b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102b8:	4299      	cmp	r1, r3
 80102ba:	d002      	beq.n	80102c2 <__sflush_r+0x92>
 80102bc:	4628      	mov	r0, r5
 80102be:	f000 f9df 	bl	8010680 <_free_r>
 80102c2:	2000      	movs	r0, #0
 80102c4:	6360      	str	r0, [r4, #52]	; 0x34
 80102c6:	e7c1      	b.n	801024c <__sflush_r+0x1c>
 80102c8:	6a21      	ldr	r1, [r4, #32]
 80102ca:	2301      	movs	r3, #1
 80102cc:	4628      	mov	r0, r5
 80102ce:	47b0      	blx	r6
 80102d0:	1c41      	adds	r1, r0, #1
 80102d2:	d1c7      	bne.n	8010264 <__sflush_r+0x34>
 80102d4:	682b      	ldr	r3, [r5, #0]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d0c4      	beq.n	8010264 <__sflush_r+0x34>
 80102da:	2b1d      	cmp	r3, #29
 80102dc:	d001      	beq.n	80102e2 <__sflush_r+0xb2>
 80102de:	2b16      	cmp	r3, #22
 80102e0:	d101      	bne.n	80102e6 <__sflush_r+0xb6>
 80102e2:	602f      	str	r7, [r5, #0]
 80102e4:	e7b1      	b.n	801024a <__sflush_r+0x1a>
 80102e6:	89a3      	ldrh	r3, [r4, #12]
 80102e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102ec:	81a3      	strh	r3, [r4, #12]
 80102ee:	e7ad      	b.n	801024c <__sflush_r+0x1c>
 80102f0:	690f      	ldr	r7, [r1, #16]
 80102f2:	2f00      	cmp	r7, #0
 80102f4:	d0a9      	beq.n	801024a <__sflush_r+0x1a>
 80102f6:	0793      	lsls	r3, r2, #30
 80102f8:	680e      	ldr	r6, [r1, #0]
 80102fa:	bf08      	it	eq
 80102fc:	694b      	ldreq	r3, [r1, #20]
 80102fe:	600f      	str	r7, [r1, #0]
 8010300:	bf18      	it	ne
 8010302:	2300      	movne	r3, #0
 8010304:	eba6 0807 	sub.w	r8, r6, r7
 8010308:	608b      	str	r3, [r1, #8]
 801030a:	f1b8 0f00 	cmp.w	r8, #0
 801030e:	dd9c      	ble.n	801024a <__sflush_r+0x1a>
 8010310:	6a21      	ldr	r1, [r4, #32]
 8010312:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010314:	4643      	mov	r3, r8
 8010316:	463a      	mov	r2, r7
 8010318:	4628      	mov	r0, r5
 801031a:	47b0      	blx	r6
 801031c:	2800      	cmp	r0, #0
 801031e:	dc06      	bgt.n	801032e <__sflush_r+0xfe>
 8010320:	89a3      	ldrh	r3, [r4, #12]
 8010322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010326:	81a3      	strh	r3, [r4, #12]
 8010328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801032c:	e78e      	b.n	801024c <__sflush_r+0x1c>
 801032e:	4407      	add	r7, r0
 8010330:	eba8 0800 	sub.w	r8, r8, r0
 8010334:	e7e9      	b.n	801030a <__sflush_r+0xda>
 8010336:	bf00      	nop
 8010338:	20400001 	.word	0x20400001

0801033c <_fflush_r>:
 801033c:	b538      	push	{r3, r4, r5, lr}
 801033e:	690b      	ldr	r3, [r1, #16]
 8010340:	4605      	mov	r5, r0
 8010342:	460c      	mov	r4, r1
 8010344:	b913      	cbnz	r3, 801034c <_fflush_r+0x10>
 8010346:	2500      	movs	r5, #0
 8010348:	4628      	mov	r0, r5
 801034a:	bd38      	pop	{r3, r4, r5, pc}
 801034c:	b118      	cbz	r0, 8010356 <_fflush_r+0x1a>
 801034e:	6983      	ldr	r3, [r0, #24]
 8010350:	b90b      	cbnz	r3, 8010356 <_fflush_r+0x1a>
 8010352:	f000 f887 	bl	8010464 <__sinit>
 8010356:	4b14      	ldr	r3, [pc, #80]	; (80103a8 <_fflush_r+0x6c>)
 8010358:	429c      	cmp	r4, r3
 801035a:	d11b      	bne.n	8010394 <_fflush_r+0x58>
 801035c:	686c      	ldr	r4, [r5, #4]
 801035e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d0ef      	beq.n	8010346 <_fflush_r+0xa>
 8010366:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010368:	07d0      	lsls	r0, r2, #31
 801036a:	d404      	bmi.n	8010376 <_fflush_r+0x3a>
 801036c:	0599      	lsls	r1, r3, #22
 801036e:	d402      	bmi.n	8010376 <_fflush_r+0x3a>
 8010370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010372:	f000 f915 	bl	80105a0 <__retarget_lock_acquire_recursive>
 8010376:	4628      	mov	r0, r5
 8010378:	4621      	mov	r1, r4
 801037a:	f7ff ff59 	bl	8010230 <__sflush_r>
 801037e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010380:	07da      	lsls	r2, r3, #31
 8010382:	4605      	mov	r5, r0
 8010384:	d4e0      	bmi.n	8010348 <_fflush_r+0xc>
 8010386:	89a3      	ldrh	r3, [r4, #12]
 8010388:	059b      	lsls	r3, r3, #22
 801038a:	d4dd      	bmi.n	8010348 <_fflush_r+0xc>
 801038c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801038e:	f000 f908 	bl	80105a2 <__retarget_lock_release_recursive>
 8010392:	e7d9      	b.n	8010348 <_fflush_r+0xc>
 8010394:	4b05      	ldr	r3, [pc, #20]	; (80103ac <_fflush_r+0x70>)
 8010396:	429c      	cmp	r4, r3
 8010398:	d101      	bne.n	801039e <_fflush_r+0x62>
 801039a:	68ac      	ldr	r4, [r5, #8]
 801039c:	e7df      	b.n	801035e <_fflush_r+0x22>
 801039e:	4b04      	ldr	r3, [pc, #16]	; (80103b0 <_fflush_r+0x74>)
 80103a0:	429c      	cmp	r4, r3
 80103a2:	bf08      	it	eq
 80103a4:	68ec      	ldreq	r4, [r5, #12]
 80103a6:	e7da      	b.n	801035e <_fflush_r+0x22>
 80103a8:	08011658 	.word	0x08011658
 80103ac:	08011678 	.word	0x08011678
 80103b0:	08011638 	.word	0x08011638

080103b4 <std>:
 80103b4:	2300      	movs	r3, #0
 80103b6:	b510      	push	{r4, lr}
 80103b8:	4604      	mov	r4, r0
 80103ba:	e9c0 3300 	strd	r3, r3, [r0]
 80103be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80103c2:	6083      	str	r3, [r0, #8]
 80103c4:	8181      	strh	r1, [r0, #12]
 80103c6:	6643      	str	r3, [r0, #100]	; 0x64
 80103c8:	81c2      	strh	r2, [r0, #14]
 80103ca:	6183      	str	r3, [r0, #24]
 80103cc:	4619      	mov	r1, r3
 80103ce:	2208      	movs	r2, #8
 80103d0:	305c      	adds	r0, #92	; 0x5c
 80103d2:	f7ff fd11 	bl	800fdf8 <memset>
 80103d6:	4b05      	ldr	r3, [pc, #20]	; (80103ec <std+0x38>)
 80103d8:	6263      	str	r3, [r4, #36]	; 0x24
 80103da:	4b05      	ldr	r3, [pc, #20]	; (80103f0 <std+0x3c>)
 80103dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80103de:	4b05      	ldr	r3, [pc, #20]	; (80103f4 <std+0x40>)
 80103e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80103e2:	4b05      	ldr	r3, [pc, #20]	; (80103f8 <std+0x44>)
 80103e4:	6224      	str	r4, [r4, #32]
 80103e6:	6323      	str	r3, [r4, #48]	; 0x30
 80103e8:	bd10      	pop	{r4, pc}
 80103ea:	bf00      	nop
 80103ec:	08010e3d 	.word	0x08010e3d
 80103f0:	08010e5f 	.word	0x08010e5f
 80103f4:	08010e97 	.word	0x08010e97
 80103f8:	08010ebb 	.word	0x08010ebb

080103fc <_cleanup_r>:
 80103fc:	4901      	ldr	r1, [pc, #4]	; (8010404 <_cleanup_r+0x8>)
 80103fe:	f000 b8af 	b.w	8010560 <_fwalk_reent>
 8010402:	bf00      	nop
 8010404:	0801033d 	.word	0x0801033d

08010408 <__sfmoreglue>:
 8010408:	b570      	push	{r4, r5, r6, lr}
 801040a:	2268      	movs	r2, #104	; 0x68
 801040c:	1e4d      	subs	r5, r1, #1
 801040e:	4355      	muls	r5, r2
 8010410:	460e      	mov	r6, r1
 8010412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010416:	f000 f99f 	bl	8010758 <_malloc_r>
 801041a:	4604      	mov	r4, r0
 801041c:	b140      	cbz	r0, 8010430 <__sfmoreglue+0x28>
 801041e:	2100      	movs	r1, #0
 8010420:	e9c0 1600 	strd	r1, r6, [r0]
 8010424:	300c      	adds	r0, #12
 8010426:	60a0      	str	r0, [r4, #8]
 8010428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801042c:	f7ff fce4 	bl	800fdf8 <memset>
 8010430:	4620      	mov	r0, r4
 8010432:	bd70      	pop	{r4, r5, r6, pc}

08010434 <__sfp_lock_acquire>:
 8010434:	4801      	ldr	r0, [pc, #4]	; (801043c <__sfp_lock_acquire+0x8>)
 8010436:	f000 b8b3 	b.w	80105a0 <__retarget_lock_acquire_recursive>
 801043a:	bf00      	nop
 801043c:	24060955 	.word	0x24060955

08010440 <__sfp_lock_release>:
 8010440:	4801      	ldr	r0, [pc, #4]	; (8010448 <__sfp_lock_release+0x8>)
 8010442:	f000 b8ae 	b.w	80105a2 <__retarget_lock_release_recursive>
 8010446:	bf00      	nop
 8010448:	24060955 	.word	0x24060955

0801044c <__sinit_lock_acquire>:
 801044c:	4801      	ldr	r0, [pc, #4]	; (8010454 <__sinit_lock_acquire+0x8>)
 801044e:	f000 b8a7 	b.w	80105a0 <__retarget_lock_acquire_recursive>
 8010452:	bf00      	nop
 8010454:	24060956 	.word	0x24060956

08010458 <__sinit_lock_release>:
 8010458:	4801      	ldr	r0, [pc, #4]	; (8010460 <__sinit_lock_release+0x8>)
 801045a:	f000 b8a2 	b.w	80105a2 <__retarget_lock_release_recursive>
 801045e:	bf00      	nop
 8010460:	24060956 	.word	0x24060956

08010464 <__sinit>:
 8010464:	b510      	push	{r4, lr}
 8010466:	4604      	mov	r4, r0
 8010468:	f7ff fff0 	bl	801044c <__sinit_lock_acquire>
 801046c:	69a3      	ldr	r3, [r4, #24]
 801046e:	b11b      	cbz	r3, 8010478 <__sinit+0x14>
 8010470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010474:	f7ff bff0 	b.w	8010458 <__sinit_lock_release>
 8010478:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801047c:	6523      	str	r3, [r4, #80]	; 0x50
 801047e:	4b13      	ldr	r3, [pc, #76]	; (80104cc <__sinit+0x68>)
 8010480:	4a13      	ldr	r2, [pc, #76]	; (80104d0 <__sinit+0x6c>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	62a2      	str	r2, [r4, #40]	; 0x28
 8010486:	42a3      	cmp	r3, r4
 8010488:	bf04      	itt	eq
 801048a:	2301      	moveq	r3, #1
 801048c:	61a3      	streq	r3, [r4, #24]
 801048e:	4620      	mov	r0, r4
 8010490:	f000 f820 	bl	80104d4 <__sfp>
 8010494:	6060      	str	r0, [r4, #4]
 8010496:	4620      	mov	r0, r4
 8010498:	f000 f81c 	bl	80104d4 <__sfp>
 801049c:	60a0      	str	r0, [r4, #8]
 801049e:	4620      	mov	r0, r4
 80104a0:	f000 f818 	bl	80104d4 <__sfp>
 80104a4:	2200      	movs	r2, #0
 80104a6:	60e0      	str	r0, [r4, #12]
 80104a8:	2104      	movs	r1, #4
 80104aa:	6860      	ldr	r0, [r4, #4]
 80104ac:	f7ff ff82 	bl	80103b4 <std>
 80104b0:	68a0      	ldr	r0, [r4, #8]
 80104b2:	2201      	movs	r2, #1
 80104b4:	2109      	movs	r1, #9
 80104b6:	f7ff ff7d 	bl	80103b4 <std>
 80104ba:	68e0      	ldr	r0, [r4, #12]
 80104bc:	2202      	movs	r2, #2
 80104be:	2112      	movs	r1, #18
 80104c0:	f7ff ff78 	bl	80103b4 <std>
 80104c4:	2301      	movs	r3, #1
 80104c6:	61a3      	str	r3, [r4, #24]
 80104c8:	e7d2      	b.n	8010470 <__sinit+0xc>
 80104ca:	bf00      	nop
 80104cc:	08011634 	.word	0x08011634
 80104d0:	080103fd 	.word	0x080103fd

080104d4 <__sfp>:
 80104d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104d6:	4607      	mov	r7, r0
 80104d8:	f7ff ffac 	bl	8010434 <__sfp_lock_acquire>
 80104dc:	4b1e      	ldr	r3, [pc, #120]	; (8010558 <__sfp+0x84>)
 80104de:	681e      	ldr	r6, [r3, #0]
 80104e0:	69b3      	ldr	r3, [r6, #24]
 80104e2:	b913      	cbnz	r3, 80104ea <__sfp+0x16>
 80104e4:	4630      	mov	r0, r6
 80104e6:	f7ff ffbd 	bl	8010464 <__sinit>
 80104ea:	3648      	adds	r6, #72	; 0x48
 80104ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80104f0:	3b01      	subs	r3, #1
 80104f2:	d503      	bpl.n	80104fc <__sfp+0x28>
 80104f4:	6833      	ldr	r3, [r6, #0]
 80104f6:	b30b      	cbz	r3, 801053c <__sfp+0x68>
 80104f8:	6836      	ldr	r6, [r6, #0]
 80104fa:	e7f7      	b.n	80104ec <__sfp+0x18>
 80104fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010500:	b9d5      	cbnz	r5, 8010538 <__sfp+0x64>
 8010502:	4b16      	ldr	r3, [pc, #88]	; (801055c <__sfp+0x88>)
 8010504:	60e3      	str	r3, [r4, #12]
 8010506:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801050a:	6665      	str	r5, [r4, #100]	; 0x64
 801050c:	f000 f847 	bl	801059e <__retarget_lock_init_recursive>
 8010510:	f7ff ff96 	bl	8010440 <__sfp_lock_release>
 8010514:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010518:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801051c:	6025      	str	r5, [r4, #0]
 801051e:	61a5      	str	r5, [r4, #24]
 8010520:	2208      	movs	r2, #8
 8010522:	4629      	mov	r1, r5
 8010524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010528:	f7ff fc66 	bl	800fdf8 <memset>
 801052c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010530:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010534:	4620      	mov	r0, r4
 8010536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010538:	3468      	adds	r4, #104	; 0x68
 801053a:	e7d9      	b.n	80104f0 <__sfp+0x1c>
 801053c:	2104      	movs	r1, #4
 801053e:	4638      	mov	r0, r7
 8010540:	f7ff ff62 	bl	8010408 <__sfmoreglue>
 8010544:	4604      	mov	r4, r0
 8010546:	6030      	str	r0, [r6, #0]
 8010548:	2800      	cmp	r0, #0
 801054a:	d1d5      	bne.n	80104f8 <__sfp+0x24>
 801054c:	f7ff ff78 	bl	8010440 <__sfp_lock_release>
 8010550:	230c      	movs	r3, #12
 8010552:	603b      	str	r3, [r7, #0]
 8010554:	e7ee      	b.n	8010534 <__sfp+0x60>
 8010556:	bf00      	nop
 8010558:	08011634 	.word	0x08011634
 801055c:	ffff0001 	.word	0xffff0001

08010560 <_fwalk_reent>:
 8010560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010564:	4606      	mov	r6, r0
 8010566:	4688      	mov	r8, r1
 8010568:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801056c:	2700      	movs	r7, #0
 801056e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010572:	f1b9 0901 	subs.w	r9, r9, #1
 8010576:	d505      	bpl.n	8010584 <_fwalk_reent+0x24>
 8010578:	6824      	ldr	r4, [r4, #0]
 801057a:	2c00      	cmp	r4, #0
 801057c:	d1f7      	bne.n	801056e <_fwalk_reent+0xe>
 801057e:	4638      	mov	r0, r7
 8010580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010584:	89ab      	ldrh	r3, [r5, #12]
 8010586:	2b01      	cmp	r3, #1
 8010588:	d907      	bls.n	801059a <_fwalk_reent+0x3a>
 801058a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801058e:	3301      	adds	r3, #1
 8010590:	d003      	beq.n	801059a <_fwalk_reent+0x3a>
 8010592:	4629      	mov	r1, r5
 8010594:	4630      	mov	r0, r6
 8010596:	47c0      	blx	r8
 8010598:	4307      	orrs	r7, r0
 801059a:	3568      	adds	r5, #104	; 0x68
 801059c:	e7e9      	b.n	8010572 <_fwalk_reent+0x12>

0801059e <__retarget_lock_init_recursive>:
 801059e:	4770      	bx	lr

080105a0 <__retarget_lock_acquire_recursive>:
 80105a0:	4770      	bx	lr

080105a2 <__retarget_lock_release_recursive>:
 80105a2:	4770      	bx	lr

080105a4 <__swhatbuf_r>:
 80105a4:	b570      	push	{r4, r5, r6, lr}
 80105a6:	460e      	mov	r6, r1
 80105a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105ac:	2900      	cmp	r1, #0
 80105ae:	b096      	sub	sp, #88	; 0x58
 80105b0:	4614      	mov	r4, r2
 80105b2:	461d      	mov	r5, r3
 80105b4:	da08      	bge.n	80105c8 <__swhatbuf_r+0x24>
 80105b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80105ba:	2200      	movs	r2, #0
 80105bc:	602a      	str	r2, [r5, #0]
 80105be:	061a      	lsls	r2, r3, #24
 80105c0:	d410      	bmi.n	80105e4 <__swhatbuf_r+0x40>
 80105c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105c6:	e00e      	b.n	80105e6 <__swhatbuf_r+0x42>
 80105c8:	466a      	mov	r2, sp
 80105ca:	f000 fc9d 	bl	8010f08 <_fstat_r>
 80105ce:	2800      	cmp	r0, #0
 80105d0:	dbf1      	blt.n	80105b6 <__swhatbuf_r+0x12>
 80105d2:	9a01      	ldr	r2, [sp, #4]
 80105d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80105d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80105dc:	425a      	negs	r2, r3
 80105de:	415a      	adcs	r2, r3
 80105e0:	602a      	str	r2, [r5, #0]
 80105e2:	e7ee      	b.n	80105c2 <__swhatbuf_r+0x1e>
 80105e4:	2340      	movs	r3, #64	; 0x40
 80105e6:	2000      	movs	r0, #0
 80105e8:	6023      	str	r3, [r4, #0]
 80105ea:	b016      	add	sp, #88	; 0x58
 80105ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080105f0 <__smakebuf_r>:
 80105f0:	898b      	ldrh	r3, [r1, #12]
 80105f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80105f4:	079d      	lsls	r5, r3, #30
 80105f6:	4606      	mov	r6, r0
 80105f8:	460c      	mov	r4, r1
 80105fa:	d507      	bpl.n	801060c <__smakebuf_r+0x1c>
 80105fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010600:	6023      	str	r3, [r4, #0]
 8010602:	6123      	str	r3, [r4, #16]
 8010604:	2301      	movs	r3, #1
 8010606:	6163      	str	r3, [r4, #20]
 8010608:	b002      	add	sp, #8
 801060a:	bd70      	pop	{r4, r5, r6, pc}
 801060c:	ab01      	add	r3, sp, #4
 801060e:	466a      	mov	r2, sp
 8010610:	f7ff ffc8 	bl	80105a4 <__swhatbuf_r>
 8010614:	9900      	ldr	r1, [sp, #0]
 8010616:	4605      	mov	r5, r0
 8010618:	4630      	mov	r0, r6
 801061a:	f000 f89d 	bl	8010758 <_malloc_r>
 801061e:	b948      	cbnz	r0, 8010634 <__smakebuf_r+0x44>
 8010620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010624:	059a      	lsls	r2, r3, #22
 8010626:	d4ef      	bmi.n	8010608 <__smakebuf_r+0x18>
 8010628:	f023 0303 	bic.w	r3, r3, #3
 801062c:	f043 0302 	orr.w	r3, r3, #2
 8010630:	81a3      	strh	r3, [r4, #12]
 8010632:	e7e3      	b.n	80105fc <__smakebuf_r+0xc>
 8010634:	4b0d      	ldr	r3, [pc, #52]	; (801066c <__smakebuf_r+0x7c>)
 8010636:	62b3      	str	r3, [r6, #40]	; 0x28
 8010638:	89a3      	ldrh	r3, [r4, #12]
 801063a:	6020      	str	r0, [r4, #0]
 801063c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010640:	81a3      	strh	r3, [r4, #12]
 8010642:	9b00      	ldr	r3, [sp, #0]
 8010644:	6163      	str	r3, [r4, #20]
 8010646:	9b01      	ldr	r3, [sp, #4]
 8010648:	6120      	str	r0, [r4, #16]
 801064a:	b15b      	cbz	r3, 8010664 <__smakebuf_r+0x74>
 801064c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010650:	4630      	mov	r0, r6
 8010652:	f000 fc6b 	bl	8010f2c <_isatty_r>
 8010656:	b128      	cbz	r0, 8010664 <__smakebuf_r+0x74>
 8010658:	89a3      	ldrh	r3, [r4, #12]
 801065a:	f023 0303 	bic.w	r3, r3, #3
 801065e:	f043 0301 	orr.w	r3, r3, #1
 8010662:	81a3      	strh	r3, [r4, #12]
 8010664:	89a0      	ldrh	r0, [r4, #12]
 8010666:	4305      	orrs	r5, r0
 8010668:	81a5      	strh	r5, [r4, #12]
 801066a:	e7cd      	b.n	8010608 <__smakebuf_r+0x18>
 801066c:	080103fd 	.word	0x080103fd

08010670 <malloc>:
 8010670:	4b02      	ldr	r3, [pc, #8]	; (801067c <malloc+0xc>)
 8010672:	4601      	mov	r1, r0
 8010674:	6818      	ldr	r0, [r3, #0]
 8010676:	f000 b86f 	b.w	8010758 <_malloc_r>
 801067a:	bf00      	nop
 801067c:	24000054 	.word	0x24000054

08010680 <_free_r>:
 8010680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010682:	2900      	cmp	r1, #0
 8010684:	d044      	beq.n	8010710 <_free_r+0x90>
 8010686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801068a:	9001      	str	r0, [sp, #4]
 801068c:	2b00      	cmp	r3, #0
 801068e:	f1a1 0404 	sub.w	r4, r1, #4
 8010692:	bfb8      	it	lt
 8010694:	18e4      	addlt	r4, r4, r3
 8010696:	f000 fc6b 	bl	8010f70 <__malloc_lock>
 801069a:	4a1e      	ldr	r2, [pc, #120]	; (8010714 <_free_r+0x94>)
 801069c:	9801      	ldr	r0, [sp, #4]
 801069e:	6813      	ldr	r3, [r2, #0]
 80106a0:	b933      	cbnz	r3, 80106b0 <_free_r+0x30>
 80106a2:	6063      	str	r3, [r4, #4]
 80106a4:	6014      	str	r4, [r2, #0]
 80106a6:	b003      	add	sp, #12
 80106a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106ac:	f000 bc66 	b.w	8010f7c <__malloc_unlock>
 80106b0:	42a3      	cmp	r3, r4
 80106b2:	d908      	bls.n	80106c6 <_free_r+0x46>
 80106b4:	6825      	ldr	r5, [r4, #0]
 80106b6:	1961      	adds	r1, r4, r5
 80106b8:	428b      	cmp	r3, r1
 80106ba:	bf01      	itttt	eq
 80106bc:	6819      	ldreq	r1, [r3, #0]
 80106be:	685b      	ldreq	r3, [r3, #4]
 80106c0:	1949      	addeq	r1, r1, r5
 80106c2:	6021      	streq	r1, [r4, #0]
 80106c4:	e7ed      	b.n	80106a2 <_free_r+0x22>
 80106c6:	461a      	mov	r2, r3
 80106c8:	685b      	ldr	r3, [r3, #4]
 80106ca:	b10b      	cbz	r3, 80106d0 <_free_r+0x50>
 80106cc:	42a3      	cmp	r3, r4
 80106ce:	d9fa      	bls.n	80106c6 <_free_r+0x46>
 80106d0:	6811      	ldr	r1, [r2, #0]
 80106d2:	1855      	adds	r5, r2, r1
 80106d4:	42a5      	cmp	r5, r4
 80106d6:	d10b      	bne.n	80106f0 <_free_r+0x70>
 80106d8:	6824      	ldr	r4, [r4, #0]
 80106da:	4421      	add	r1, r4
 80106dc:	1854      	adds	r4, r2, r1
 80106de:	42a3      	cmp	r3, r4
 80106e0:	6011      	str	r1, [r2, #0]
 80106e2:	d1e0      	bne.n	80106a6 <_free_r+0x26>
 80106e4:	681c      	ldr	r4, [r3, #0]
 80106e6:	685b      	ldr	r3, [r3, #4]
 80106e8:	6053      	str	r3, [r2, #4]
 80106ea:	4421      	add	r1, r4
 80106ec:	6011      	str	r1, [r2, #0]
 80106ee:	e7da      	b.n	80106a6 <_free_r+0x26>
 80106f0:	d902      	bls.n	80106f8 <_free_r+0x78>
 80106f2:	230c      	movs	r3, #12
 80106f4:	6003      	str	r3, [r0, #0]
 80106f6:	e7d6      	b.n	80106a6 <_free_r+0x26>
 80106f8:	6825      	ldr	r5, [r4, #0]
 80106fa:	1961      	adds	r1, r4, r5
 80106fc:	428b      	cmp	r3, r1
 80106fe:	bf04      	itt	eq
 8010700:	6819      	ldreq	r1, [r3, #0]
 8010702:	685b      	ldreq	r3, [r3, #4]
 8010704:	6063      	str	r3, [r4, #4]
 8010706:	bf04      	itt	eq
 8010708:	1949      	addeq	r1, r1, r5
 801070a:	6021      	streq	r1, [r4, #0]
 801070c:	6054      	str	r4, [r2, #4]
 801070e:	e7ca      	b.n	80106a6 <_free_r+0x26>
 8010710:	b003      	add	sp, #12
 8010712:	bd30      	pop	{r4, r5, pc}
 8010714:	24060958 	.word	0x24060958

08010718 <sbrk_aligned>:
 8010718:	b570      	push	{r4, r5, r6, lr}
 801071a:	4e0e      	ldr	r6, [pc, #56]	; (8010754 <sbrk_aligned+0x3c>)
 801071c:	460c      	mov	r4, r1
 801071e:	6831      	ldr	r1, [r6, #0]
 8010720:	4605      	mov	r5, r0
 8010722:	b911      	cbnz	r1, 801072a <sbrk_aligned+0x12>
 8010724:	f000 fb7a 	bl	8010e1c <_sbrk_r>
 8010728:	6030      	str	r0, [r6, #0]
 801072a:	4621      	mov	r1, r4
 801072c:	4628      	mov	r0, r5
 801072e:	f000 fb75 	bl	8010e1c <_sbrk_r>
 8010732:	1c43      	adds	r3, r0, #1
 8010734:	d00a      	beq.n	801074c <sbrk_aligned+0x34>
 8010736:	1cc4      	adds	r4, r0, #3
 8010738:	f024 0403 	bic.w	r4, r4, #3
 801073c:	42a0      	cmp	r0, r4
 801073e:	d007      	beq.n	8010750 <sbrk_aligned+0x38>
 8010740:	1a21      	subs	r1, r4, r0
 8010742:	4628      	mov	r0, r5
 8010744:	f000 fb6a 	bl	8010e1c <_sbrk_r>
 8010748:	3001      	adds	r0, #1
 801074a:	d101      	bne.n	8010750 <sbrk_aligned+0x38>
 801074c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010750:	4620      	mov	r0, r4
 8010752:	bd70      	pop	{r4, r5, r6, pc}
 8010754:	2406095c 	.word	0x2406095c

08010758 <_malloc_r>:
 8010758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801075c:	1ccd      	adds	r5, r1, #3
 801075e:	f025 0503 	bic.w	r5, r5, #3
 8010762:	3508      	adds	r5, #8
 8010764:	2d0c      	cmp	r5, #12
 8010766:	bf38      	it	cc
 8010768:	250c      	movcc	r5, #12
 801076a:	2d00      	cmp	r5, #0
 801076c:	4607      	mov	r7, r0
 801076e:	db01      	blt.n	8010774 <_malloc_r+0x1c>
 8010770:	42a9      	cmp	r1, r5
 8010772:	d905      	bls.n	8010780 <_malloc_r+0x28>
 8010774:	230c      	movs	r3, #12
 8010776:	603b      	str	r3, [r7, #0]
 8010778:	2600      	movs	r6, #0
 801077a:	4630      	mov	r0, r6
 801077c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010780:	4e2e      	ldr	r6, [pc, #184]	; (801083c <_malloc_r+0xe4>)
 8010782:	f000 fbf5 	bl	8010f70 <__malloc_lock>
 8010786:	6833      	ldr	r3, [r6, #0]
 8010788:	461c      	mov	r4, r3
 801078a:	bb34      	cbnz	r4, 80107da <_malloc_r+0x82>
 801078c:	4629      	mov	r1, r5
 801078e:	4638      	mov	r0, r7
 8010790:	f7ff ffc2 	bl	8010718 <sbrk_aligned>
 8010794:	1c43      	adds	r3, r0, #1
 8010796:	4604      	mov	r4, r0
 8010798:	d14d      	bne.n	8010836 <_malloc_r+0xde>
 801079a:	6834      	ldr	r4, [r6, #0]
 801079c:	4626      	mov	r6, r4
 801079e:	2e00      	cmp	r6, #0
 80107a0:	d140      	bne.n	8010824 <_malloc_r+0xcc>
 80107a2:	6823      	ldr	r3, [r4, #0]
 80107a4:	4631      	mov	r1, r6
 80107a6:	4638      	mov	r0, r7
 80107a8:	eb04 0803 	add.w	r8, r4, r3
 80107ac:	f000 fb36 	bl	8010e1c <_sbrk_r>
 80107b0:	4580      	cmp	r8, r0
 80107b2:	d13a      	bne.n	801082a <_malloc_r+0xd2>
 80107b4:	6821      	ldr	r1, [r4, #0]
 80107b6:	3503      	adds	r5, #3
 80107b8:	1a6d      	subs	r5, r5, r1
 80107ba:	f025 0503 	bic.w	r5, r5, #3
 80107be:	3508      	adds	r5, #8
 80107c0:	2d0c      	cmp	r5, #12
 80107c2:	bf38      	it	cc
 80107c4:	250c      	movcc	r5, #12
 80107c6:	4629      	mov	r1, r5
 80107c8:	4638      	mov	r0, r7
 80107ca:	f7ff ffa5 	bl	8010718 <sbrk_aligned>
 80107ce:	3001      	adds	r0, #1
 80107d0:	d02b      	beq.n	801082a <_malloc_r+0xd2>
 80107d2:	6823      	ldr	r3, [r4, #0]
 80107d4:	442b      	add	r3, r5
 80107d6:	6023      	str	r3, [r4, #0]
 80107d8:	e00e      	b.n	80107f8 <_malloc_r+0xa0>
 80107da:	6822      	ldr	r2, [r4, #0]
 80107dc:	1b52      	subs	r2, r2, r5
 80107de:	d41e      	bmi.n	801081e <_malloc_r+0xc6>
 80107e0:	2a0b      	cmp	r2, #11
 80107e2:	d916      	bls.n	8010812 <_malloc_r+0xba>
 80107e4:	1961      	adds	r1, r4, r5
 80107e6:	42a3      	cmp	r3, r4
 80107e8:	6025      	str	r5, [r4, #0]
 80107ea:	bf18      	it	ne
 80107ec:	6059      	strne	r1, [r3, #4]
 80107ee:	6863      	ldr	r3, [r4, #4]
 80107f0:	bf08      	it	eq
 80107f2:	6031      	streq	r1, [r6, #0]
 80107f4:	5162      	str	r2, [r4, r5]
 80107f6:	604b      	str	r3, [r1, #4]
 80107f8:	4638      	mov	r0, r7
 80107fa:	f104 060b 	add.w	r6, r4, #11
 80107fe:	f000 fbbd 	bl	8010f7c <__malloc_unlock>
 8010802:	f026 0607 	bic.w	r6, r6, #7
 8010806:	1d23      	adds	r3, r4, #4
 8010808:	1af2      	subs	r2, r6, r3
 801080a:	d0b6      	beq.n	801077a <_malloc_r+0x22>
 801080c:	1b9b      	subs	r3, r3, r6
 801080e:	50a3      	str	r3, [r4, r2]
 8010810:	e7b3      	b.n	801077a <_malloc_r+0x22>
 8010812:	6862      	ldr	r2, [r4, #4]
 8010814:	42a3      	cmp	r3, r4
 8010816:	bf0c      	ite	eq
 8010818:	6032      	streq	r2, [r6, #0]
 801081a:	605a      	strne	r2, [r3, #4]
 801081c:	e7ec      	b.n	80107f8 <_malloc_r+0xa0>
 801081e:	4623      	mov	r3, r4
 8010820:	6864      	ldr	r4, [r4, #4]
 8010822:	e7b2      	b.n	801078a <_malloc_r+0x32>
 8010824:	4634      	mov	r4, r6
 8010826:	6876      	ldr	r6, [r6, #4]
 8010828:	e7b9      	b.n	801079e <_malloc_r+0x46>
 801082a:	230c      	movs	r3, #12
 801082c:	603b      	str	r3, [r7, #0]
 801082e:	4638      	mov	r0, r7
 8010830:	f000 fba4 	bl	8010f7c <__malloc_unlock>
 8010834:	e7a1      	b.n	801077a <_malloc_r+0x22>
 8010836:	6025      	str	r5, [r4, #0]
 8010838:	e7de      	b.n	80107f8 <_malloc_r+0xa0>
 801083a:	bf00      	nop
 801083c:	24060958 	.word	0x24060958

08010840 <__sfputc_r>:
 8010840:	6893      	ldr	r3, [r2, #8]
 8010842:	3b01      	subs	r3, #1
 8010844:	2b00      	cmp	r3, #0
 8010846:	b410      	push	{r4}
 8010848:	6093      	str	r3, [r2, #8]
 801084a:	da08      	bge.n	801085e <__sfputc_r+0x1e>
 801084c:	6994      	ldr	r4, [r2, #24]
 801084e:	42a3      	cmp	r3, r4
 8010850:	db01      	blt.n	8010856 <__sfputc_r+0x16>
 8010852:	290a      	cmp	r1, #10
 8010854:	d103      	bne.n	801085e <__sfputc_r+0x1e>
 8010856:	f85d 4b04 	ldr.w	r4, [sp], #4
 801085a:	f7ff bc29 	b.w	80100b0 <__swbuf_r>
 801085e:	6813      	ldr	r3, [r2, #0]
 8010860:	1c58      	adds	r0, r3, #1
 8010862:	6010      	str	r0, [r2, #0]
 8010864:	7019      	strb	r1, [r3, #0]
 8010866:	4608      	mov	r0, r1
 8010868:	f85d 4b04 	ldr.w	r4, [sp], #4
 801086c:	4770      	bx	lr

0801086e <__sfputs_r>:
 801086e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010870:	4606      	mov	r6, r0
 8010872:	460f      	mov	r7, r1
 8010874:	4614      	mov	r4, r2
 8010876:	18d5      	adds	r5, r2, r3
 8010878:	42ac      	cmp	r4, r5
 801087a:	d101      	bne.n	8010880 <__sfputs_r+0x12>
 801087c:	2000      	movs	r0, #0
 801087e:	e007      	b.n	8010890 <__sfputs_r+0x22>
 8010880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010884:	463a      	mov	r2, r7
 8010886:	4630      	mov	r0, r6
 8010888:	f7ff ffda 	bl	8010840 <__sfputc_r>
 801088c:	1c43      	adds	r3, r0, #1
 801088e:	d1f3      	bne.n	8010878 <__sfputs_r+0xa>
 8010890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010894 <_vfiprintf_r>:
 8010894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010898:	460d      	mov	r5, r1
 801089a:	b09d      	sub	sp, #116	; 0x74
 801089c:	4614      	mov	r4, r2
 801089e:	4698      	mov	r8, r3
 80108a0:	4606      	mov	r6, r0
 80108a2:	b118      	cbz	r0, 80108ac <_vfiprintf_r+0x18>
 80108a4:	6983      	ldr	r3, [r0, #24]
 80108a6:	b90b      	cbnz	r3, 80108ac <_vfiprintf_r+0x18>
 80108a8:	f7ff fddc 	bl	8010464 <__sinit>
 80108ac:	4b89      	ldr	r3, [pc, #548]	; (8010ad4 <_vfiprintf_r+0x240>)
 80108ae:	429d      	cmp	r5, r3
 80108b0:	d11b      	bne.n	80108ea <_vfiprintf_r+0x56>
 80108b2:	6875      	ldr	r5, [r6, #4]
 80108b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80108b6:	07d9      	lsls	r1, r3, #31
 80108b8:	d405      	bmi.n	80108c6 <_vfiprintf_r+0x32>
 80108ba:	89ab      	ldrh	r3, [r5, #12]
 80108bc:	059a      	lsls	r2, r3, #22
 80108be:	d402      	bmi.n	80108c6 <_vfiprintf_r+0x32>
 80108c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80108c2:	f7ff fe6d 	bl	80105a0 <__retarget_lock_acquire_recursive>
 80108c6:	89ab      	ldrh	r3, [r5, #12]
 80108c8:	071b      	lsls	r3, r3, #28
 80108ca:	d501      	bpl.n	80108d0 <_vfiprintf_r+0x3c>
 80108cc:	692b      	ldr	r3, [r5, #16]
 80108ce:	b9eb      	cbnz	r3, 801090c <_vfiprintf_r+0x78>
 80108d0:	4629      	mov	r1, r5
 80108d2:	4630      	mov	r0, r6
 80108d4:	f7ff fc3e 	bl	8010154 <__swsetup_r>
 80108d8:	b1c0      	cbz	r0, 801090c <_vfiprintf_r+0x78>
 80108da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80108dc:	07dc      	lsls	r4, r3, #31
 80108de:	d50e      	bpl.n	80108fe <_vfiprintf_r+0x6a>
 80108e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80108e4:	b01d      	add	sp, #116	; 0x74
 80108e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ea:	4b7b      	ldr	r3, [pc, #492]	; (8010ad8 <_vfiprintf_r+0x244>)
 80108ec:	429d      	cmp	r5, r3
 80108ee:	d101      	bne.n	80108f4 <_vfiprintf_r+0x60>
 80108f0:	68b5      	ldr	r5, [r6, #8]
 80108f2:	e7df      	b.n	80108b4 <_vfiprintf_r+0x20>
 80108f4:	4b79      	ldr	r3, [pc, #484]	; (8010adc <_vfiprintf_r+0x248>)
 80108f6:	429d      	cmp	r5, r3
 80108f8:	bf08      	it	eq
 80108fa:	68f5      	ldreq	r5, [r6, #12]
 80108fc:	e7da      	b.n	80108b4 <_vfiprintf_r+0x20>
 80108fe:	89ab      	ldrh	r3, [r5, #12]
 8010900:	0598      	lsls	r0, r3, #22
 8010902:	d4ed      	bmi.n	80108e0 <_vfiprintf_r+0x4c>
 8010904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010906:	f7ff fe4c 	bl	80105a2 <__retarget_lock_release_recursive>
 801090a:	e7e9      	b.n	80108e0 <_vfiprintf_r+0x4c>
 801090c:	2300      	movs	r3, #0
 801090e:	9309      	str	r3, [sp, #36]	; 0x24
 8010910:	2320      	movs	r3, #32
 8010912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010916:	f8cd 800c 	str.w	r8, [sp, #12]
 801091a:	2330      	movs	r3, #48	; 0x30
 801091c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010ae0 <_vfiprintf_r+0x24c>
 8010920:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010924:	f04f 0901 	mov.w	r9, #1
 8010928:	4623      	mov	r3, r4
 801092a:	469a      	mov	sl, r3
 801092c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010930:	b10a      	cbz	r2, 8010936 <_vfiprintf_r+0xa2>
 8010932:	2a25      	cmp	r2, #37	; 0x25
 8010934:	d1f9      	bne.n	801092a <_vfiprintf_r+0x96>
 8010936:	ebba 0b04 	subs.w	fp, sl, r4
 801093a:	d00b      	beq.n	8010954 <_vfiprintf_r+0xc0>
 801093c:	465b      	mov	r3, fp
 801093e:	4622      	mov	r2, r4
 8010940:	4629      	mov	r1, r5
 8010942:	4630      	mov	r0, r6
 8010944:	f7ff ff93 	bl	801086e <__sfputs_r>
 8010948:	3001      	adds	r0, #1
 801094a:	f000 80aa 	beq.w	8010aa2 <_vfiprintf_r+0x20e>
 801094e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010950:	445a      	add	r2, fp
 8010952:	9209      	str	r2, [sp, #36]	; 0x24
 8010954:	f89a 3000 	ldrb.w	r3, [sl]
 8010958:	2b00      	cmp	r3, #0
 801095a:	f000 80a2 	beq.w	8010aa2 <_vfiprintf_r+0x20e>
 801095e:	2300      	movs	r3, #0
 8010960:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010968:	f10a 0a01 	add.w	sl, sl, #1
 801096c:	9304      	str	r3, [sp, #16]
 801096e:	9307      	str	r3, [sp, #28]
 8010970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010974:	931a      	str	r3, [sp, #104]	; 0x68
 8010976:	4654      	mov	r4, sl
 8010978:	2205      	movs	r2, #5
 801097a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801097e:	4858      	ldr	r0, [pc, #352]	; (8010ae0 <_vfiprintf_r+0x24c>)
 8010980:	f7ef fcb6 	bl	80002f0 <memchr>
 8010984:	9a04      	ldr	r2, [sp, #16]
 8010986:	b9d8      	cbnz	r0, 80109c0 <_vfiprintf_r+0x12c>
 8010988:	06d1      	lsls	r1, r2, #27
 801098a:	bf44      	itt	mi
 801098c:	2320      	movmi	r3, #32
 801098e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010992:	0713      	lsls	r3, r2, #28
 8010994:	bf44      	itt	mi
 8010996:	232b      	movmi	r3, #43	; 0x2b
 8010998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801099c:	f89a 3000 	ldrb.w	r3, [sl]
 80109a0:	2b2a      	cmp	r3, #42	; 0x2a
 80109a2:	d015      	beq.n	80109d0 <_vfiprintf_r+0x13c>
 80109a4:	9a07      	ldr	r2, [sp, #28]
 80109a6:	4654      	mov	r4, sl
 80109a8:	2000      	movs	r0, #0
 80109aa:	f04f 0c0a 	mov.w	ip, #10
 80109ae:	4621      	mov	r1, r4
 80109b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109b4:	3b30      	subs	r3, #48	; 0x30
 80109b6:	2b09      	cmp	r3, #9
 80109b8:	d94e      	bls.n	8010a58 <_vfiprintf_r+0x1c4>
 80109ba:	b1b0      	cbz	r0, 80109ea <_vfiprintf_r+0x156>
 80109bc:	9207      	str	r2, [sp, #28]
 80109be:	e014      	b.n	80109ea <_vfiprintf_r+0x156>
 80109c0:	eba0 0308 	sub.w	r3, r0, r8
 80109c4:	fa09 f303 	lsl.w	r3, r9, r3
 80109c8:	4313      	orrs	r3, r2
 80109ca:	9304      	str	r3, [sp, #16]
 80109cc:	46a2      	mov	sl, r4
 80109ce:	e7d2      	b.n	8010976 <_vfiprintf_r+0xe2>
 80109d0:	9b03      	ldr	r3, [sp, #12]
 80109d2:	1d19      	adds	r1, r3, #4
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	9103      	str	r1, [sp, #12]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	bfbb      	ittet	lt
 80109dc:	425b      	neglt	r3, r3
 80109de:	f042 0202 	orrlt.w	r2, r2, #2
 80109e2:	9307      	strge	r3, [sp, #28]
 80109e4:	9307      	strlt	r3, [sp, #28]
 80109e6:	bfb8      	it	lt
 80109e8:	9204      	strlt	r2, [sp, #16]
 80109ea:	7823      	ldrb	r3, [r4, #0]
 80109ec:	2b2e      	cmp	r3, #46	; 0x2e
 80109ee:	d10c      	bne.n	8010a0a <_vfiprintf_r+0x176>
 80109f0:	7863      	ldrb	r3, [r4, #1]
 80109f2:	2b2a      	cmp	r3, #42	; 0x2a
 80109f4:	d135      	bne.n	8010a62 <_vfiprintf_r+0x1ce>
 80109f6:	9b03      	ldr	r3, [sp, #12]
 80109f8:	1d1a      	adds	r2, r3, #4
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	9203      	str	r2, [sp, #12]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	bfb8      	it	lt
 8010a02:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010a06:	3402      	adds	r4, #2
 8010a08:	9305      	str	r3, [sp, #20]
 8010a0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010af0 <_vfiprintf_r+0x25c>
 8010a0e:	7821      	ldrb	r1, [r4, #0]
 8010a10:	2203      	movs	r2, #3
 8010a12:	4650      	mov	r0, sl
 8010a14:	f7ef fc6c 	bl	80002f0 <memchr>
 8010a18:	b140      	cbz	r0, 8010a2c <_vfiprintf_r+0x198>
 8010a1a:	2340      	movs	r3, #64	; 0x40
 8010a1c:	eba0 000a 	sub.w	r0, r0, sl
 8010a20:	fa03 f000 	lsl.w	r0, r3, r0
 8010a24:	9b04      	ldr	r3, [sp, #16]
 8010a26:	4303      	orrs	r3, r0
 8010a28:	3401      	adds	r4, #1
 8010a2a:	9304      	str	r3, [sp, #16]
 8010a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a30:	482c      	ldr	r0, [pc, #176]	; (8010ae4 <_vfiprintf_r+0x250>)
 8010a32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010a36:	2206      	movs	r2, #6
 8010a38:	f7ef fc5a 	bl	80002f0 <memchr>
 8010a3c:	2800      	cmp	r0, #0
 8010a3e:	d03f      	beq.n	8010ac0 <_vfiprintf_r+0x22c>
 8010a40:	4b29      	ldr	r3, [pc, #164]	; (8010ae8 <_vfiprintf_r+0x254>)
 8010a42:	bb1b      	cbnz	r3, 8010a8c <_vfiprintf_r+0x1f8>
 8010a44:	9b03      	ldr	r3, [sp, #12]
 8010a46:	3307      	adds	r3, #7
 8010a48:	f023 0307 	bic.w	r3, r3, #7
 8010a4c:	3308      	adds	r3, #8
 8010a4e:	9303      	str	r3, [sp, #12]
 8010a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a52:	443b      	add	r3, r7
 8010a54:	9309      	str	r3, [sp, #36]	; 0x24
 8010a56:	e767      	b.n	8010928 <_vfiprintf_r+0x94>
 8010a58:	fb0c 3202 	mla	r2, ip, r2, r3
 8010a5c:	460c      	mov	r4, r1
 8010a5e:	2001      	movs	r0, #1
 8010a60:	e7a5      	b.n	80109ae <_vfiprintf_r+0x11a>
 8010a62:	2300      	movs	r3, #0
 8010a64:	3401      	adds	r4, #1
 8010a66:	9305      	str	r3, [sp, #20]
 8010a68:	4619      	mov	r1, r3
 8010a6a:	f04f 0c0a 	mov.w	ip, #10
 8010a6e:	4620      	mov	r0, r4
 8010a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a74:	3a30      	subs	r2, #48	; 0x30
 8010a76:	2a09      	cmp	r2, #9
 8010a78:	d903      	bls.n	8010a82 <_vfiprintf_r+0x1ee>
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d0c5      	beq.n	8010a0a <_vfiprintf_r+0x176>
 8010a7e:	9105      	str	r1, [sp, #20]
 8010a80:	e7c3      	b.n	8010a0a <_vfiprintf_r+0x176>
 8010a82:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a86:	4604      	mov	r4, r0
 8010a88:	2301      	movs	r3, #1
 8010a8a:	e7f0      	b.n	8010a6e <_vfiprintf_r+0x1da>
 8010a8c:	ab03      	add	r3, sp, #12
 8010a8e:	9300      	str	r3, [sp, #0]
 8010a90:	462a      	mov	r2, r5
 8010a92:	4b16      	ldr	r3, [pc, #88]	; (8010aec <_vfiprintf_r+0x258>)
 8010a94:	a904      	add	r1, sp, #16
 8010a96:	4630      	mov	r0, r6
 8010a98:	f3af 8000 	nop.w
 8010a9c:	4607      	mov	r7, r0
 8010a9e:	1c78      	adds	r0, r7, #1
 8010aa0:	d1d6      	bne.n	8010a50 <_vfiprintf_r+0x1bc>
 8010aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010aa4:	07d9      	lsls	r1, r3, #31
 8010aa6:	d405      	bmi.n	8010ab4 <_vfiprintf_r+0x220>
 8010aa8:	89ab      	ldrh	r3, [r5, #12]
 8010aaa:	059a      	lsls	r2, r3, #22
 8010aac:	d402      	bmi.n	8010ab4 <_vfiprintf_r+0x220>
 8010aae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ab0:	f7ff fd77 	bl	80105a2 <__retarget_lock_release_recursive>
 8010ab4:	89ab      	ldrh	r3, [r5, #12]
 8010ab6:	065b      	lsls	r3, r3, #25
 8010ab8:	f53f af12 	bmi.w	80108e0 <_vfiprintf_r+0x4c>
 8010abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010abe:	e711      	b.n	80108e4 <_vfiprintf_r+0x50>
 8010ac0:	ab03      	add	r3, sp, #12
 8010ac2:	9300      	str	r3, [sp, #0]
 8010ac4:	462a      	mov	r2, r5
 8010ac6:	4b09      	ldr	r3, [pc, #36]	; (8010aec <_vfiprintf_r+0x258>)
 8010ac8:	a904      	add	r1, sp, #16
 8010aca:	4630      	mov	r0, r6
 8010acc:	f000 f880 	bl	8010bd0 <_printf_i>
 8010ad0:	e7e4      	b.n	8010a9c <_vfiprintf_r+0x208>
 8010ad2:	bf00      	nop
 8010ad4:	08011658 	.word	0x08011658
 8010ad8:	08011678 	.word	0x08011678
 8010adc:	08011638 	.word	0x08011638
 8010ae0:	08011698 	.word	0x08011698
 8010ae4:	080116a2 	.word	0x080116a2
 8010ae8:	00000000 	.word	0x00000000
 8010aec:	0801086f 	.word	0x0801086f
 8010af0:	0801169e 	.word	0x0801169e

08010af4 <_printf_common>:
 8010af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010af8:	4616      	mov	r6, r2
 8010afa:	4699      	mov	r9, r3
 8010afc:	688a      	ldr	r2, [r1, #8]
 8010afe:	690b      	ldr	r3, [r1, #16]
 8010b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010b04:	4293      	cmp	r3, r2
 8010b06:	bfb8      	it	lt
 8010b08:	4613      	movlt	r3, r2
 8010b0a:	6033      	str	r3, [r6, #0]
 8010b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010b10:	4607      	mov	r7, r0
 8010b12:	460c      	mov	r4, r1
 8010b14:	b10a      	cbz	r2, 8010b1a <_printf_common+0x26>
 8010b16:	3301      	adds	r3, #1
 8010b18:	6033      	str	r3, [r6, #0]
 8010b1a:	6823      	ldr	r3, [r4, #0]
 8010b1c:	0699      	lsls	r1, r3, #26
 8010b1e:	bf42      	ittt	mi
 8010b20:	6833      	ldrmi	r3, [r6, #0]
 8010b22:	3302      	addmi	r3, #2
 8010b24:	6033      	strmi	r3, [r6, #0]
 8010b26:	6825      	ldr	r5, [r4, #0]
 8010b28:	f015 0506 	ands.w	r5, r5, #6
 8010b2c:	d106      	bne.n	8010b3c <_printf_common+0x48>
 8010b2e:	f104 0a19 	add.w	sl, r4, #25
 8010b32:	68e3      	ldr	r3, [r4, #12]
 8010b34:	6832      	ldr	r2, [r6, #0]
 8010b36:	1a9b      	subs	r3, r3, r2
 8010b38:	42ab      	cmp	r3, r5
 8010b3a:	dc26      	bgt.n	8010b8a <_printf_common+0x96>
 8010b3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010b40:	1e13      	subs	r3, r2, #0
 8010b42:	6822      	ldr	r2, [r4, #0]
 8010b44:	bf18      	it	ne
 8010b46:	2301      	movne	r3, #1
 8010b48:	0692      	lsls	r2, r2, #26
 8010b4a:	d42b      	bmi.n	8010ba4 <_printf_common+0xb0>
 8010b4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010b50:	4649      	mov	r1, r9
 8010b52:	4638      	mov	r0, r7
 8010b54:	47c0      	blx	r8
 8010b56:	3001      	adds	r0, #1
 8010b58:	d01e      	beq.n	8010b98 <_printf_common+0xa4>
 8010b5a:	6823      	ldr	r3, [r4, #0]
 8010b5c:	68e5      	ldr	r5, [r4, #12]
 8010b5e:	6832      	ldr	r2, [r6, #0]
 8010b60:	f003 0306 	and.w	r3, r3, #6
 8010b64:	2b04      	cmp	r3, #4
 8010b66:	bf08      	it	eq
 8010b68:	1aad      	subeq	r5, r5, r2
 8010b6a:	68a3      	ldr	r3, [r4, #8]
 8010b6c:	6922      	ldr	r2, [r4, #16]
 8010b6e:	bf0c      	ite	eq
 8010b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010b74:	2500      	movne	r5, #0
 8010b76:	4293      	cmp	r3, r2
 8010b78:	bfc4      	itt	gt
 8010b7a:	1a9b      	subgt	r3, r3, r2
 8010b7c:	18ed      	addgt	r5, r5, r3
 8010b7e:	2600      	movs	r6, #0
 8010b80:	341a      	adds	r4, #26
 8010b82:	42b5      	cmp	r5, r6
 8010b84:	d11a      	bne.n	8010bbc <_printf_common+0xc8>
 8010b86:	2000      	movs	r0, #0
 8010b88:	e008      	b.n	8010b9c <_printf_common+0xa8>
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	4652      	mov	r2, sl
 8010b8e:	4649      	mov	r1, r9
 8010b90:	4638      	mov	r0, r7
 8010b92:	47c0      	blx	r8
 8010b94:	3001      	adds	r0, #1
 8010b96:	d103      	bne.n	8010ba0 <_printf_common+0xac>
 8010b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ba0:	3501      	adds	r5, #1
 8010ba2:	e7c6      	b.n	8010b32 <_printf_common+0x3e>
 8010ba4:	18e1      	adds	r1, r4, r3
 8010ba6:	1c5a      	adds	r2, r3, #1
 8010ba8:	2030      	movs	r0, #48	; 0x30
 8010baa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010bae:	4422      	add	r2, r4
 8010bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010bb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010bb8:	3302      	adds	r3, #2
 8010bba:	e7c7      	b.n	8010b4c <_printf_common+0x58>
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	4622      	mov	r2, r4
 8010bc0:	4649      	mov	r1, r9
 8010bc2:	4638      	mov	r0, r7
 8010bc4:	47c0      	blx	r8
 8010bc6:	3001      	adds	r0, #1
 8010bc8:	d0e6      	beq.n	8010b98 <_printf_common+0xa4>
 8010bca:	3601      	adds	r6, #1
 8010bcc:	e7d9      	b.n	8010b82 <_printf_common+0x8e>
	...

08010bd0 <_printf_i>:
 8010bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010bd4:	7e0f      	ldrb	r7, [r1, #24]
 8010bd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010bd8:	2f78      	cmp	r7, #120	; 0x78
 8010bda:	4691      	mov	r9, r2
 8010bdc:	4680      	mov	r8, r0
 8010bde:	460c      	mov	r4, r1
 8010be0:	469a      	mov	sl, r3
 8010be2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010be6:	d807      	bhi.n	8010bf8 <_printf_i+0x28>
 8010be8:	2f62      	cmp	r7, #98	; 0x62
 8010bea:	d80a      	bhi.n	8010c02 <_printf_i+0x32>
 8010bec:	2f00      	cmp	r7, #0
 8010bee:	f000 80d8 	beq.w	8010da2 <_printf_i+0x1d2>
 8010bf2:	2f58      	cmp	r7, #88	; 0x58
 8010bf4:	f000 80a3 	beq.w	8010d3e <_printf_i+0x16e>
 8010bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010bfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010c00:	e03a      	b.n	8010c78 <_printf_i+0xa8>
 8010c02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010c06:	2b15      	cmp	r3, #21
 8010c08:	d8f6      	bhi.n	8010bf8 <_printf_i+0x28>
 8010c0a:	a101      	add	r1, pc, #4	; (adr r1, 8010c10 <_printf_i+0x40>)
 8010c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010c10:	08010c69 	.word	0x08010c69
 8010c14:	08010c7d 	.word	0x08010c7d
 8010c18:	08010bf9 	.word	0x08010bf9
 8010c1c:	08010bf9 	.word	0x08010bf9
 8010c20:	08010bf9 	.word	0x08010bf9
 8010c24:	08010bf9 	.word	0x08010bf9
 8010c28:	08010c7d 	.word	0x08010c7d
 8010c2c:	08010bf9 	.word	0x08010bf9
 8010c30:	08010bf9 	.word	0x08010bf9
 8010c34:	08010bf9 	.word	0x08010bf9
 8010c38:	08010bf9 	.word	0x08010bf9
 8010c3c:	08010d89 	.word	0x08010d89
 8010c40:	08010cad 	.word	0x08010cad
 8010c44:	08010d6b 	.word	0x08010d6b
 8010c48:	08010bf9 	.word	0x08010bf9
 8010c4c:	08010bf9 	.word	0x08010bf9
 8010c50:	08010dab 	.word	0x08010dab
 8010c54:	08010bf9 	.word	0x08010bf9
 8010c58:	08010cad 	.word	0x08010cad
 8010c5c:	08010bf9 	.word	0x08010bf9
 8010c60:	08010bf9 	.word	0x08010bf9
 8010c64:	08010d73 	.word	0x08010d73
 8010c68:	682b      	ldr	r3, [r5, #0]
 8010c6a:	1d1a      	adds	r2, r3, #4
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	602a      	str	r2, [r5, #0]
 8010c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010c78:	2301      	movs	r3, #1
 8010c7a:	e0a3      	b.n	8010dc4 <_printf_i+0x1f4>
 8010c7c:	6820      	ldr	r0, [r4, #0]
 8010c7e:	6829      	ldr	r1, [r5, #0]
 8010c80:	0606      	lsls	r6, r0, #24
 8010c82:	f101 0304 	add.w	r3, r1, #4
 8010c86:	d50a      	bpl.n	8010c9e <_printf_i+0xce>
 8010c88:	680e      	ldr	r6, [r1, #0]
 8010c8a:	602b      	str	r3, [r5, #0]
 8010c8c:	2e00      	cmp	r6, #0
 8010c8e:	da03      	bge.n	8010c98 <_printf_i+0xc8>
 8010c90:	232d      	movs	r3, #45	; 0x2d
 8010c92:	4276      	negs	r6, r6
 8010c94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c98:	485e      	ldr	r0, [pc, #376]	; (8010e14 <_printf_i+0x244>)
 8010c9a:	230a      	movs	r3, #10
 8010c9c:	e019      	b.n	8010cd2 <_printf_i+0x102>
 8010c9e:	680e      	ldr	r6, [r1, #0]
 8010ca0:	602b      	str	r3, [r5, #0]
 8010ca2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010ca6:	bf18      	it	ne
 8010ca8:	b236      	sxthne	r6, r6
 8010caa:	e7ef      	b.n	8010c8c <_printf_i+0xbc>
 8010cac:	682b      	ldr	r3, [r5, #0]
 8010cae:	6820      	ldr	r0, [r4, #0]
 8010cb0:	1d19      	adds	r1, r3, #4
 8010cb2:	6029      	str	r1, [r5, #0]
 8010cb4:	0601      	lsls	r1, r0, #24
 8010cb6:	d501      	bpl.n	8010cbc <_printf_i+0xec>
 8010cb8:	681e      	ldr	r6, [r3, #0]
 8010cba:	e002      	b.n	8010cc2 <_printf_i+0xf2>
 8010cbc:	0646      	lsls	r6, r0, #25
 8010cbe:	d5fb      	bpl.n	8010cb8 <_printf_i+0xe8>
 8010cc0:	881e      	ldrh	r6, [r3, #0]
 8010cc2:	4854      	ldr	r0, [pc, #336]	; (8010e14 <_printf_i+0x244>)
 8010cc4:	2f6f      	cmp	r7, #111	; 0x6f
 8010cc6:	bf0c      	ite	eq
 8010cc8:	2308      	moveq	r3, #8
 8010cca:	230a      	movne	r3, #10
 8010ccc:	2100      	movs	r1, #0
 8010cce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010cd2:	6865      	ldr	r5, [r4, #4]
 8010cd4:	60a5      	str	r5, [r4, #8]
 8010cd6:	2d00      	cmp	r5, #0
 8010cd8:	bfa2      	ittt	ge
 8010cda:	6821      	ldrge	r1, [r4, #0]
 8010cdc:	f021 0104 	bicge.w	r1, r1, #4
 8010ce0:	6021      	strge	r1, [r4, #0]
 8010ce2:	b90e      	cbnz	r6, 8010ce8 <_printf_i+0x118>
 8010ce4:	2d00      	cmp	r5, #0
 8010ce6:	d04d      	beq.n	8010d84 <_printf_i+0x1b4>
 8010ce8:	4615      	mov	r5, r2
 8010cea:	fbb6 f1f3 	udiv	r1, r6, r3
 8010cee:	fb03 6711 	mls	r7, r3, r1, r6
 8010cf2:	5dc7      	ldrb	r7, [r0, r7]
 8010cf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010cf8:	4637      	mov	r7, r6
 8010cfa:	42bb      	cmp	r3, r7
 8010cfc:	460e      	mov	r6, r1
 8010cfe:	d9f4      	bls.n	8010cea <_printf_i+0x11a>
 8010d00:	2b08      	cmp	r3, #8
 8010d02:	d10b      	bne.n	8010d1c <_printf_i+0x14c>
 8010d04:	6823      	ldr	r3, [r4, #0]
 8010d06:	07de      	lsls	r6, r3, #31
 8010d08:	d508      	bpl.n	8010d1c <_printf_i+0x14c>
 8010d0a:	6923      	ldr	r3, [r4, #16]
 8010d0c:	6861      	ldr	r1, [r4, #4]
 8010d0e:	4299      	cmp	r1, r3
 8010d10:	bfde      	ittt	le
 8010d12:	2330      	movle	r3, #48	; 0x30
 8010d14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010d18:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010d1c:	1b52      	subs	r2, r2, r5
 8010d1e:	6122      	str	r2, [r4, #16]
 8010d20:	f8cd a000 	str.w	sl, [sp]
 8010d24:	464b      	mov	r3, r9
 8010d26:	aa03      	add	r2, sp, #12
 8010d28:	4621      	mov	r1, r4
 8010d2a:	4640      	mov	r0, r8
 8010d2c:	f7ff fee2 	bl	8010af4 <_printf_common>
 8010d30:	3001      	adds	r0, #1
 8010d32:	d14c      	bne.n	8010dce <_printf_i+0x1fe>
 8010d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d38:	b004      	add	sp, #16
 8010d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d3e:	4835      	ldr	r0, [pc, #212]	; (8010e14 <_printf_i+0x244>)
 8010d40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010d44:	6829      	ldr	r1, [r5, #0]
 8010d46:	6823      	ldr	r3, [r4, #0]
 8010d48:	f851 6b04 	ldr.w	r6, [r1], #4
 8010d4c:	6029      	str	r1, [r5, #0]
 8010d4e:	061d      	lsls	r5, r3, #24
 8010d50:	d514      	bpl.n	8010d7c <_printf_i+0x1ac>
 8010d52:	07df      	lsls	r7, r3, #31
 8010d54:	bf44      	itt	mi
 8010d56:	f043 0320 	orrmi.w	r3, r3, #32
 8010d5a:	6023      	strmi	r3, [r4, #0]
 8010d5c:	b91e      	cbnz	r6, 8010d66 <_printf_i+0x196>
 8010d5e:	6823      	ldr	r3, [r4, #0]
 8010d60:	f023 0320 	bic.w	r3, r3, #32
 8010d64:	6023      	str	r3, [r4, #0]
 8010d66:	2310      	movs	r3, #16
 8010d68:	e7b0      	b.n	8010ccc <_printf_i+0xfc>
 8010d6a:	6823      	ldr	r3, [r4, #0]
 8010d6c:	f043 0320 	orr.w	r3, r3, #32
 8010d70:	6023      	str	r3, [r4, #0]
 8010d72:	2378      	movs	r3, #120	; 0x78
 8010d74:	4828      	ldr	r0, [pc, #160]	; (8010e18 <_printf_i+0x248>)
 8010d76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010d7a:	e7e3      	b.n	8010d44 <_printf_i+0x174>
 8010d7c:	0659      	lsls	r1, r3, #25
 8010d7e:	bf48      	it	mi
 8010d80:	b2b6      	uxthmi	r6, r6
 8010d82:	e7e6      	b.n	8010d52 <_printf_i+0x182>
 8010d84:	4615      	mov	r5, r2
 8010d86:	e7bb      	b.n	8010d00 <_printf_i+0x130>
 8010d88:	682b      	ldr	r3, [r5, #0]
 8010d8a:	6826      	ldr	r6, [r4, #0]
 8010d8c:	6961      	ldr	r1, [r4, #20]
 8010d8e:	1d18      	adds	r0, r3, #4
 8010d90:	6028      	str	r0, [r5, #0]
 8010d92:	0635      	lsls	r5, r6, #24
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	d501      	bpl.n	8010d9c <_printf_i+0x1cc>
 8010d98:	6019      	str	r1, [r3, #0]
 8010d9a:	e002      	b.n	8010da2 <_printf_i+0x1d2>
 8010d9c:	0670      	lsls	r0, r6, #25
 8010d9e:	d5fb      	bpl.n	8010d98 <_printf_i+0x1c8>
 8010da0:	8019      	strh	r1, [r3, #0]
 8010da2:	2300      	movs	r3, #0
 8010da4:	6123      	str	r3, [r4, #16]
 8010da6:	4615      	mov	r5, r2
 8010da8:	e7ba      	b.n	8010d20 <_printf_i+0x150>
 8010daa:	682b      	ldr	r3, [r5, #0]
 8010dac:	1d1a      	adds	r2, r3, #4
 8010dae:	602a      	str	r2, [r5, #0]
 8010db0:	681d      	ldr	r5, [r3, #0]
 8010db2:	6862      	ldr	r2, [r4, #4]
 8010db4:	2100      	movs	r1, #0
 8010db6:	4628      	mov	r0, r5
 8010db8:	f7ef fa9a 	bl	80002f0 <memchr>
 8010dbc:	b108      	cbz	r0, 8010dc2 <_printf_i+0x1f2>
 8010dbe:	1b40      	subs	r0, r0, r5
 8010dc0:	6060      	str	r0, [r4, #4]
 8010dc2:	6863      	ldr	r3, [r4, #4]
 8010dc4:	6123      	str	r3, [r4, #16]
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010dcc:	e7a8      	b.n	8010d20 <_printf_i+0x150>
 8010dce:	6923      	ldr	r3, [r4, #16]
 8010dd0:	462a      	mov	r2, r5
 8010dd2:	4649      	mov	r1, r9
 8010dd4:	4640      	mov	r0, r8
 8010dd6:	47d0      	blx	sl
 8010dd8:	3001      	adds	r0, #1
 8010dda:	d0ab      	beq.n	8010d34 <_printf_i+0x164>
 8010ddc:	6823      	ldr	r3, [r4, #0]
 8010dde:	079b      	lsls	r3, r3, #30
 8010de0:	d413      	bmi.n	8010e0a <_printf_i+0x23a>
 8010de2:	68e0      	ldr	r0, [r4, #12]
 8010de4:	9b03      	ldr	r3, [sp, #12]
 8010de6:	4298      	cmp	r0, r3
 8010de8:	bfb8      	it	lt
 8010dea:	4618      	movlt	r0, r3
 8010dec:	e7a4      	b.n	8010d38 <_printf_i+0x168>
 8010dee:	2301      	movs	r3, #1
 8010df0:	4632      	mov	r2, r6
 8010df2:	4649      	mov	r1, r9
 8010df4:	4640      	mov	r0, r8
 8010df6:	47d0      	blx	sl
 8010df8:	3001      	adds	r0, #1
 8010dfa:	d09b      	beq.n	8010d34 <_printf_i+0x164>
 8010dfc:	3501      	adds	r5, #1
 8010dfe:	68e3      	ldr	r3, [r4, #12]
 8010e00:	9903      	ldr	r1, [sp, #12]
 8010e02:	1a5b      	subs	r3, r3, r1
 8010e04:	42ab      	cmp	r3, r5
 8010e06:	dcf2      	bgt.n	8010dee <_printf_i+0x21e>
 8010e08:	e7eb      	b.n	8010de2 <_printf_i+0x212>
 8010e0a:	2500      	movs	r5, #0
 8010e0c:	f104 0619 	add.w	r6, r4, #25
 8010e10:	e7f5      	b.n	8010dfe <_printf_i+0x22e>
 8010e12:	bf00      	nop
 8010e14:	080116a9 	.word	0x080116a9
 8010e18:	080116ba 	.word	0x080116ba

08010e1c <_sbrk_r>:
 8010e1c:	b538      	push	{r3, r4, r5, lr}
 8010e1e:	4d06      	ldr	r5, [pc, #24]	; (8010e38 <_sbrk_r+0x1c>)
 8010e20:	2300      	movs	r3, #0
 8010e22:	4604      	mov	r4, r0
 8010e24:	4608      	mov	r0, r1
 8010e26:	602b      	str	r3, [r5, #0]
 8010e28:	f7f3 fab0 	bl	800438c <_sbrk>
 8010e2c:	1c43      	adds	r3, r0, #1
 8010e2e:	d102      	bne.n	8010e36 <_sbrk_r+0x1a>
 8010e30:	682b      	ldr	r3, [r5, #0]
 8010e32:	b103      	cbz	r3, 8010e36 <_sbrk_r+0x1a>
 8010e34:	6023      	str	r3, [r4, #0]
 8010e36:	bd38      	pop	{r3, r4, r5, pc}
 8010e38:	24060960 	.word	0x24060960

08010e3c <__sread>:
 8010e3c:	b510      	push	{r4, lr}
 8010e3e:	460c      	mov	r4, r1
 8010e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e44:	f000 f8a0 	bl	8010f88 <_read_r>
 8010e48:	2800      	cmp	r0, #0
 8010e4a:	bfab      	itete	ge
 8010e4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8010e50:	181b      	addge	r3, r3, r0
 8010e52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e56:	bfac      	ite	ge
 8010e58:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e5a:	81a3      	strhlt	r3, [r4, #12]
 8010e5c:	bd10      	pop	{r4, pc}

08010e5e <__swrite>:
 8010e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e62:	461f      	mov	r7, r3
 8010e64:	898b      	ldrh	r3, [r1, #12]
 8010e66:	05db      	lsls	r3, r3, #23
 8010e68:	4605      	mov	r5, r0
 8010e6a:	460c      	mov	r4, r1
 8010e6c:	4616      	mov	r6, r2
 8010e6e:	d505      	bpl.n	8010e7c <__swrite+0x1e>
 8010e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e74:	2302      	movs	r3, #2
 8010e76:	2200      	movs	r2, #0
 8010e78:	f000 f868 	bl	8010f4c <_lseek_r>
 8010e7c:	89a3      	ldrh	r3, [r4, #12]
 8010e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e86:	81a3      	strh	r3, [r4, #12]
 8010e88:	4632      	mov	r2, r6
 8010e8a:	463b      	mov	r3, r7
 8010e8c:	4628      	mov	r0, r5
 8010e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e92:	f000 b817 	b.w	8010ec4 <_write_r>

08010e96 <__sseek>:
 8010e96:	b510      	push	{r4, lr}
 8010e98:	460c      	mov	r4, r1
 8010e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e9e:	f000 f855 	bl	8010f4c <_lseek_r>
 8010ea2:	1c43      	adds	r3, r0, #1
 8010ea4:	89a3      	ldrh	r3, [r4, #12]
 8010ea6:	bf15      	itete	ne
 8010ea8:	6560      	strne	r0, [r4, #84]	; 0x54
 8010eaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010eae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010eb2:	81a3      	strheq	r3, [r4, #12]
 8010eb4:	bf18      	it	ne
 8010eb6:	81a3      	strhne	r3, [r4, #12]
 8010eb8:	bd10      	pop	{r4, pc}

08010eba <__sclose>:
 8010eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ebe:	f000 b813 	b.w	8010ee8 <_close_r>
	...

08010ec4 <_write_r>:
 8010ec4:	b538      	push	{r3, r4, r5, lr}
 8010ec6:	4d07      	ldr	r5, [pc, #28]	; (8010ee4 <_write_r+0x20>)
 8010ec8:	4604      	mov	r4, r0
 8010eca:	4608      	mov	r0, r1
 8010ecc:	4611      	mov	r1, r2
 8010ece:	2200      	movs	r2, #0
 8010ed0:	602a      	str	r2, [r5, #0]
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	f7f1 fdd4 	bl	8002a80 <_write>
 8010ed8:	1c43      	adds	r3, r0, #1
 8010eda:	d102      	bne.n	8010ee2 <_write_r+0x1e>
 8010edc:	682b      	ldr	r3, [r5, #0]
 8010ede:	b103      	cbz	r3, 8010ee2 <_write_r+0x1e>
 8010ee0:	6023      	str	r3, [r4, #0]
 8010ee2:	bd38      	pop	{r3, r4, r5, pc}
 8010ee4:	24060960 	.word	0x24060960

08010ee8 <_close_r>:
 8010ee8:	b538      	push	{r3, r4, r5, lr}
 8010eea:	4d06      	ldr	r5, [pc, #24]	; (8010f04 <_close_r+0x1c>)
 8010eec:	2300      	movs	r3, #0
 8010eee:	4604      	mov	r4, r0
 8010ef0:	4608      	mov	r0, r1
 8010ef2:	602b      	str	r3, [r5, #0]
 8010ef4:	f7f1 fdf0 	bl	8002ad8 <_close>
 8010ef8:	1c43      	adds	r3, r0, #1
 8010efa:	d102      	bne.n	8010f02 <_close_r+0x1a>
 8010efc:	682b      	ldr	r3, [r5, #0]
 8010efe:	b103      	cbz	r3, 8010f02 <_close_r+0x1a>
 8010f00:	6023      	str	r3, [r4, #0]
 8010f02:	bd38      	pop	{r3, r4, r5, pc}
 8010f04:	24060960 	.word	0x24060960

08010f08 <_fstat_r>:
 8010f08:	b538      	push	{r3, r4, r5, lr}
 8010f0a:	4d07      	ldr	r5, [pc, #28]	; (8010f28 <_fstat_r+0x20>)
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	4604      	mov	r4, r0
 8010f10:	4608      	mov	r0, r1
 8010f12:	4611      	mov	r1, r2
 8010f14:	602b      	str	r3, [r5, #0]
 8010f16:	f7f1 fe1f 	bl	8002b58 <_fstat>
 8010f1a:	1c43      	adds	r3, r0, #1
 8010f1c:	d102      	bne.n	8010f24 <_fstat_r+0x1c>
 8010f1e:	682b      	ldr	r3, [r5, #0]
 8010f20:	b103      	cbz	r3, 8010f24 <_fstat_r+0x1c>
 8010f22:	6023      	str	r3, [r4, #0]
 8010f24:	bd38      	pop	{r3, r4, r5, pc}
 8010f26:	bf00      	nop
 8010f28:	24060960 	.word	0x24060960

08010f2c <_isatty_r>:
 8010f2c:	b538      	push	{r3, r4, r5, lr}
 8010f2e:	4d06      	ldr	r5, [pc, #24]	; (8010f48 <_isatty_r+0x1c>)
 8010f30:	2300      	movs	r3, #0
 8010f32:	4604      	mov	r4, r0
 8010f34:	4608      	mov	r0, r1
 8010f36:	602b      	str	r3, [r5, #0]
 8010f38:	f7f1 fd8c 	bl	8002a54 <_isatty>
 8010f3c:	1c43      	adds	r3, r0, #1
 8010f3e:	d102      	bne.n	8010f46 <_isatty_r+0x1a>
 8010f40:	682b      	ldr	r3, [r5, #0]
 8010f42:	b103      	cbz	r3, 8010f46 <_isatty_r+0x1a>
 8010f44:	6023      	str	r3, [r4, #0]
 8010f46:	bd38      	pop	{r3, r4, r5, pc}
 8010f48:	24060960 	.word	0x24060960

08010f4c <_lseek_r>:
 8010f4c:	b538      	push	{r3, r4, r5, lr}
 8010f4e:	4d07      	ldr	r5, [pc, #28]	; (8010f6c <_lseek_r+0x20>)
 8010f50:	4604      	mov	r4, r0
 8010f52:	4608      	mov	r0, r1
 8010f54:	4611      	mov	r1, r2
 8010f56:	2200      	movs	r2, #0
 8010f58:	602a      	str	r2, [r5, #0]
 8010f5a:	461a      	mov	r2, r3
 8010f5c:	f7f3 fa08 	bl	8004370 <_lseek>
 8010f60:	1c43      	adds	r3, r0, #1
 8010f62:	d102      	bne.n	8010f6a <_lseek_r+0x1e>
 8010f64:	682b      	ldr	r3, [r5, #0]
 8010f66:	b103      	cbz	r3, 8010f6a <_lseek_r+0x1e>
 8010f68:	6023      	str	r3, [r4, #0]
 8010f6a:	bd38      	pop	{r3, r4, r5, pc}
 8010f6c:	24060960 	.word	0x24060960

08010f70 <__malloc_lock>:
 8010f70:	4801      	ldr	r0, [pc, #4]	; (8010f78 <__malloc_lock+0x8>)
 8010f72:	f7ff bb15 	b.w	80105a0 <__retarget_lock_acquire_recursive>
 8010f76:	bf00      	nop
 8010f78:	24060954 	.word	0x24060954

08010f7c <__malloc_unlock>:
 8010f7c:	4801      	ldr	r0, [pc, #4]	; (8010f84 <__malloc_unlock+0x8>)
 8010f7e:	f7ff bb10 	b.w	80105a2 <__retarget_lock_release_recursive>
 8010f82:	bf00      	nop
 8010f84:	24060954 	.word	0x24060954

08010f88 <_read_r>:
 8010f88:	b538      	push	{r3, r4, r5, lr}
 8010f8a:	4d07      	ldr	r5, [pc, #28]	; (8010fa8 <_read_r+0x20>)
 8010f8c:	4604      	mov	r4, r0
 8010f8e:	4608      	mov	r0, r1
 8010f90:	4611      	mov	r1, r2
 8010f92:	2200      	movs	r2, #0
 8010f94:	602a      	str	r2, [r5, #0]
 8010f96:	461a      	mov	r2, r3
 8010f98:	f7f1 fdb6 	bl	8002b08 <_read>
 8010f9c:	1c43      	adds	r3, r0, #1
 8010f9e:	d102      	bne.n	8010fa6 <_read_r+0x1e>
 8010fa0:	682b      	ldr	r3, [r5, #0]
 8010fa2:	b103      	cbz	r3, 8010fa6 <_read_r+0x1e>
 8010fa4:	6023      	str	r3, [r4, #0]
 8010fa6:	bd38      	pop	{r3, r4, r5, pc}
 8010fa8:	24060960 	.word	0x24060960

08010fac <_init>:
 8010fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fae:	bf00      	nop
 8010fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010fb2:	bc08      	pop	{r3}
 8010fb4:	469e      	mov	lr, r3
 8010fb6:	4770      	bx	lr

08010fb8 <_fini>:
 8010fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fba:	bf00      	nop
 8010fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010fbe:	bc08      	pop	{r3}
 8010fc0:	469e      	mov	lr, r3
 8010fc2:	4770      	bx	lr
