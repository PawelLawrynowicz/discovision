
camera_bsp_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fec0  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  08010170  08010170  00020170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010854  08010854  00020854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801085c  0801085c  0002085c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010860  08010860  00020860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  24000000  08010864  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000dff90  240000b8  0801091c  000300b8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240e0048  0801091c  00040048  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024a39  00000000  00000000  000300e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000490a  00000000  00000000  00054b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001808  00000000  00000000  00059430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001630  00000000  00000000  0005ac38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037b72  00000000  00000000  0005c268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000250a9  00000000  00000000  00093dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014e72a  00000000  00000000  000b8e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002075ad  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a78  00000000  00000000  00207600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000b8 	.word	0x240000b8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08010158 	.word	0x08010158

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000bc 	.word	0x240000bc
 80002ec:	08010158 	.word	0x08010158

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */
//
  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_DCMI_Init+0x60>)
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <MX_DCMI_Init+0x64>)
 800069c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006a6:	2220      	movs	r2, #32
 80006a8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006b2:	2240      	movs	r2, #64	; 0x40
 80006b4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006dc:	2200      	movs	r2, #0
 80006de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006e2:	f003 feb5 	bl	8004450 <HAL_DCMI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80006ec:	f000 fee2 	bl	80014b4 <Error_Handler>
//  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
//  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
//  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
  /* USER CODE END DCMI_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	240000d4 	.word	0x240000d4
 80006f8:	48020000 	.word	0x48020000

080006fc <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a76      	ldr	r2, [pc, #472]	; (80008f4 <HAL_DCMI_MspInit+0x1f8>)
 800071a:	4293      	cmp	r3, r2
 800071c:	f040 80e5 	bne.w	80008ea <HAL_DCMI_MspInit+0x1ee>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */
//
  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000720:	4b75      	ldr	r3, [pc, #468]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000722:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000726:	4a74      	ldr	r2, [pc, #464]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8000730:	4b71      	ldr	r3, [pc, #452]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000732:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b6e      	ldr	r3, [pc, #440]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000740:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000744:	4a6c      	ldr	r2, [pc, #432]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800074e:	4b6a      	ldr	r3, [pc, #424]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000750:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000754:	f003 0302 	and.w	r3, r3, #2
 8000758:	61fb      	str	r3, [r7, #28]
 800075a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800075c:	4b66      	ldr	r3, [pc, #408]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800075e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000762:	4a65      	ldr	r2, [pc, #404]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000768:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800076c:	4b62      	ldr	r3, [pc, #392]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800076e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	4b5f      	ldr	r3, [pc, #380]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800077c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000780:	4a5d      	ldr	r2, [pc, #372]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000782:	f043 0308 	orr.w	r3, r3, #8
 8000786:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800078a:	4b5b      	ldr	r3, [pc, #364]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800078c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000790:	f003 0308 	and.w	r3, r3, #8
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000798:	4b57      	ldr	r3, [pc, #348]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800079a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800079e:	4a56      	ldr	r2, [pc, #344]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007a8:	4b53      	ldr	r3, [pc, #332]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b50      	ldr	r3, [pc, #320]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007bc:	4a4e      	ldr	r2, [pc, #312]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007c6:	4b4c      	ldr	r3, [pc, #304]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7;
 80007d4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007e6:	230d      	movs	r3, #13
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4842      	ldr	r0, [pc, #264]	; (80008fc <HAL_DCMI_MspInit+0x200>)
 80007f2:	f008 f867 	bl	80088c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000808:	230d      	movs	r3, #13
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800080c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000810:	4619      	mov	r1, r3
 8000812:	483b      	ldr	r0, [pc, #236]	; (8000900 <HAL_DCMI_MspInit+0x204>)
 8000814:	f008 f856 	bl	80088c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000818:	2308      	movs	r3, #8
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000828:	230d      	movs	r3, #13
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	4619      	mov	r1, r3
 8000832:	4834      	ldr	r0, [pc, #208]	; (8000904 <HAL_DCMI_MspInit+0x208>)
 8000834:	f008 f846 	bl	80088c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6;
 8000838:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800084a:	230d      	movs	r3, #13
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	482c      	ldr	r0, [pc, #176]	; (8000908 <HAL_DCMI_MspInit+0x20c>)
 8000856:	f008 f835 	bl	80088c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800085a:	2350      	movs	r3, #80	; 0x50
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800086a:	230d      	movs	r3, #13
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000872:	4619      	mov	r1, r3
 8000874:	4825      	ldr	r0, [pc, #148]	; (800090c <HAL_DCMI_MspInit+0x210>)
 8000876:	f008 f825 	bl	80088c4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800087c:	4a25      	ldr	r2, [pc, #148]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 800087e:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 8000882:	224b      	movs	r2, #75	; 0x4b
 8000884:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000886:	4b22      	ldr	r3, [pc, #136]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800088c:	4b20      	ldr	r3, [pc, #128]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 8000894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000898:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800089a:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800089c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008a0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008a8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008b6:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80008be:	4814      	ldr	r0, [pc, #80]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008c0:	f004 f894 	bl	80049ec <HAL_DMA_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_DCMI_MspInit+0x1d2>
    {
      Error_Handler();
 80008ca:	f000 fdf3 	bl	80014b4 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008d2:	649a      	str	r2, [r3, #72]	; 0x48
 80008d4:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	204e      	movs	r0, #78	; 0x4e
 80008e0:	f003 fd81 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 80008e4:	204e      	movs	r0, #78	; 0x4e
 80008e6:	f003 fd98 	bl	800441a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */
//
  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80008ea:	bf00      	nop
 80008ec:	3738      	adds	r7, #56	; 0x38
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	48020000 	.word	0x48020000
 80008f8:	58024400 	.word	0x58024400
 80008fc:	58020400 	.word	0x58020400
 8000900:	58021800 	.word	0x58021800
 8000904:	58020c00 	.word	0x58020c00
 8000908:	58020800 	.word	0x58020800
 800090c:	58020000 	.word	0x58020000
 8000910:	24000124 	.word	0x24000124
 8000914:	40020428 	.word	0x40020428

08000918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MX_DMA_Init+0x3c>)
 8000920:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000924:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <MX_DMA_Init+0x3c>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_DMA_Init+0x3c>)
 8000930:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2039      	movs	r0, #57	; 0x39
 8000942:	f003 fd50 	bl	80043e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000946:	2039      	movs	r0, #57	; 0x39
 8000948:	f003 fd67 	bl	800441a <HAL_NVIC_EnableIRQ>

}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	58024400 	.word	0x58024400

08000958 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800095e:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <MX_DMA2D_Init+0x74>)
 8000960:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_PFC;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000964:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000968:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800096c:	2201      	movs	r2, #1
 800096e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000978:	2200      	movs	r2, #0
 800097a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800097e:	2201      	movs	r2, #1
 8000980:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000984:	2200      	movs	r2, #0
 8000986:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800098a:	2200      	movs	r2, #0
 800098c:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000990:	2200      	movs	r2, #0
 8000992:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000996:	2200      	movs	r2, #0
 8000998:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800099c:	2200      	movs	r2, #0
 800099e:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <MX_DMA2D_Init+0x70>)
 80009a2:	f006 ff03 	bl	80077ac <HAL_DMA2D_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_DMA2D_Init+0x58>
  {
    Error_Handler();
 80009ac:	f000 fd82 	bl	80014b4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009b0:	2101      	movs	r1, #1
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_DMA2D_Init+0x70>)
 80009b4:	f007 f982 	bl	8007cbc <HAL_DMA2D_ConfigLayer>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_DMA2D_Init+0x6a>
  {
    Error_Handler();
 80009be:	f000 fd79 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2400019c 	.word	0x2400019c
 80009cc:	52001000 	.word	0x52001000

080009d0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <HAL_DMA2D_MspInit+0x48>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d116      	bne.n	8000a10 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_DMA2D_MspInit+0x4c>)
 80009e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80009e8:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <HAL_DMA2D_MspInit+0x4c>)
 80009ea:	f043 0310 	orr.w	r3, r3, #16
 80009ee:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_DMA2D_MspInit+0x4c>)
 80009f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80009f8:	f003 0310 	and.w	r3, r3, #16
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	205a      	movs	r0, #90	; 0x5a
 8000a06:	f003 fcee 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a0a:	205a      	movs	r0, #90	; 0x5a
 8000a0c:	f003 fd05 	bl	800441a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	52001000 	.word	0x52001000
 8000a1c:	58024400 	.word	0x58024400

08000a20 <DMA2D_Convert>:
  }
}

/* USER CODE BEGIN 1 */
void DMA2D_Convert(uint8_t* source, uint32_t* destination)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  status = HAL_DMA2D_Start(&hdma2d, (uint32_t)source,
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <DMA2D_Convert+0x4c>)
 8000a3a:	f006 ff1b 	bl	8007874 <HAL_DMA2D_Start>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	73fb      	strb	r3, [r7, #15]
                        (uint32_t)destination, 480, 272);
  if (status != HAL_OK) {
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <DMA2D_Convert+0x2c>
    Error_Handler();
 8000a48:	f000 fd34 	bl	80014b4 <Error_Handler>
  }

  status = HAL_DMA2D_PollForTransfer(&hdma2d, 1000);
 8000a4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <DMA2D_Convert+0x4c>)
 8000a52:	f006 ff3a 	bl	80078ca <HAL_DMA2D_PollForTransfer>
 8000a56:	4603      	mov	r3, r0
 8000a58:	73fb      	strb	r3, [r7, #15]
  if (status != HAL_OK) {
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <DMA2D_Convert+0x44>
    Error_Handler();
 8000a60:	f000 fd28 	bl	80014b4 <Error_Handler>
  }
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	2400019c 	.word	0x2400019c

08000a70 <MX_GPIO_Init>:
     PE8   ------> FMC_D5_DA5
     PE11   ------> FMC_D8_DA8
     PH7   ------> FMC_SDCKE1
*/
void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b090      	sub	sp, #64	; 0x40
 8000a74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a86:	4bbf      	ldr	r3, [pc, #764]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000a88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a8c:	4abd      	ldr	r2, [pc, #756]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a92:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a96:	4bbb      	ldr	r3, [pc, #748]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000a98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa4:	4bb7      	ldr	r3, [pc, #732]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000aa6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aaa:	4ab6      	ldr	r2, [pc, #728]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ab4:	4bb3      	ldr	r3, [pc, #716]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000ab6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac2:	4bb0      	ldr	r3, [pc, #704]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000ac4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac8:	4aae      	ldr	r2, [pc, #696]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ace:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ad2:	4bac      	ldr	r3, [pc, #688]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000ad4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000adc:	623b      	str	r3, [r7, #32]
 8000ade:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ae0:	4ba8      	ldr	r3, [pc, #672]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000ae2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae6:	4aa7      	ldr	r2, [pc, #668]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000ae8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000af0:	4ba4      	ldr	r3, [pc, #656]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000af2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afe:	4ba1      	ldr	r3, [pc, #644]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b04:	4a9f      	ldr	r2, [pc, #636]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b06:	f043 0308 	orr.w	r3, r3, #8
 8000b0a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b0e:	4b9d      	ldr	r3, [pc, #628]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b14:	f003 0308 	and.w	r3, r3, #8
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1c:	4b99      	ldr	r3, [pc, #612]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b22:	4a98      	ldr	r2, [pc, #608]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b2c:	4b95      	ldr	r3, [pc, #596]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b3a:	4b92      	ldr	r3, [pc, #584]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b40:	4a90      	ldr	r2, [pc, #576]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b4a:	4b8e      	ldr	r3, [pc, #568]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b50:	f003 0310 	and.w	r3, r3, #16
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b58:	4b8a      	ldr	r3, [pc, #552]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b5e:	4a89      	ldr	r2, [pc, #548]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b64:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b68:	4b86      	ldr	r3, [pc, #536]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b83      	ldr	r3, [pc, #524]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b7c:	4a81      	ldr	r2, [pc, #516]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b86:	4b7f      	ldr	r3, [pc, #508]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b94:	4b7b      	ldr	r3, [pc, #492]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b9a:	4a7a      	ldr	r2, [pc, #488]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b9c:	f043 0320 	orr.w	r3, r3, #32
 8000ba0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ba4:	4b77      	ldr	r3, [pc, #476]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000ba6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000baa:	f003 0320 	and.w	r3, r3, #32
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb2:	4b74      	ldr	r3, [pc, #464]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000bb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb8:	4a72      	ldr	r2, [pc, #456]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bbe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bc2:	4b70      	ldr	r3, [pc, #448]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000bc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	210e      	movs	r1, #14
 8000bd4:	486c      	ldr	r0, [pc, #432]	; (8000d88 <MX_GPIO_Init+0x318>)
 8000bd6:	f008 f92f 	bl	8008e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f640 0104 	movw	r1, #2052	; 0x804
 8000be0:	486a      	ldr	r0, [pc, #424]	; (8000d8c <MX_GPIO_Init+0x31c>)
 8000be2:	f008 f929 	bl	8008e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bec:	4868      	ldr	r0, [pc, #416]	; (8000d90 <MX_GPIO_Init+0x320>)
 8000bee:	f008 f923 	bl	8008e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2108      	movs	r1, #8
 8000bf6:	4865      	ldr	r0, [pc, #404]	; (8000d8c <MX_GPIO_Init+0x31c>)
 8000bf8:	f008 f91e 	bl	8008e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2106      	movs	r1, #6
 8000c00:	4863      	ldr	r0, [pc, #396]	; (8000d90 <MX_GPIO_Init+0x320>)
 8000c02:	f008 f919 	bl	8008e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8000c06:	2330      	movs	r3, #48	; 0x30
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c18:	4619      	mov	r1, r3
 8000c1a:	485b      	ldr	r0, [pc, #364]	; (8000d88 <MX_GPIO_Init+0x318>)
 8000c1c:	f007 fe52 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000c20:	f248 1333 	movw	r3, #33075	; 0x8133
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c32:	230c      	movs	r3, #12
 8000c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4853      	ldr	r0, [pc, #332]	; (8000d8c <MX_GPIO_Init+0x31c>)
 8000c3e:	f007 fe41 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8000c42:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000c54:	2305      	movs	r3, #5
 8000c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	484b      	ldr	r0, [pc, #300]	; (8000d8c <MX_GPIO_Init+0x31c>)
 8000c60:	f007 fe30 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8000c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000c76:	2309      	movs	r3, #9
 8000c78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4842      	ldr	r0, [pc, #264]	; (8000d8c <MX_GPIO_Init+0x31c>)
 8000c82:	f007 fe1f 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8000c86:	2380      	movs	r3, #128	; 0x80
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000c96:	230a      	movs	r3, #10
 8000c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	483c      	ldr	r0, [pc, #240]	; (8000d94 <MX_GPIO_Init+0x324>)
 8000ca2:	f007 fe0f 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000ca6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4834      	ldr	r0, [pc, #208]	; (8000d94 <MX_GPIO_Init+0x324>)
 8000cc4:	f007 fdfe 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 8000cc8:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cda:	230c      	movs	r3, #12
 8000cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	482c      	ldr	r0, [pc, #176]	; (8000d98 <MX_GPIO_Init+0x328>)
 8000ce6:	f007 fded 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8000cea:	230e      	movs	r3, #14
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4821      	ldr	r0, [pc, #132]	; (8000d88 <MX_GPIO_Init+0x318>)
 8000d02:	f007 fddf 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000d06:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d18:	230c      	movs	r3, #12
 8000d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d20:	4619      	mov	r1, r3
 8000d22:	481e      	ldr	r0, [pc, #120]	; (8000d9c <MX_GPIO_Init+0x32c>)
 8000d24:	f007 fdce 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8000d28:	f640 030c 	movw	r3, #2060	; 0x80c
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4812      	ldr	r0, [pc, #72]	; (8000d8c <MX_GPIO_Init+0x31c>)
 8000d42:	f007 fdbf 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000d46:	2304      	movs	r3, #4
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d56:	230c      	movs	r3, #12
 8000d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <MX_GPIO_Init+0x324>)
 8000d62:	f007 fdaf 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000d66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d6c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <MX_GPIO_Init+0x318>)
 8000d7e:	f007 fda1 	bl	80088c4 <HAL_GPIO_Init>
 8000d82:	e00d      	b.n	8000da0 <MX_GPIO_Init+0x330>
 8000d84:	58024400 	.word	0x58024400
 8000d88:	58022000 	.word	0x58022000
 8000d8c:	58021800 	.word	0x58021800
 8000d90:	58020000 	.word	0x58020000
 8000d94:	58020c00 	.word	0x58020c00
 8000d98:	58020800 	.word	0x58020800
 8000d9c:	58021000 	.word	0x58021000

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8000da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000db2:	2305      	movs	r3, #5
 8000db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4869      	ldr	r0, [pc, #420]	; (8000f64 <MX_GPIO_Init+0x4f4>)
 8000dbe:	f007 fd81 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8000dc2:	f640 0306 	movw	r3, #2054	; 0x806
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4862      	ldr	r0, [pc, #392]	; (8000f64 <MX_GPIO_Init+0x4f4>)
 8000ddc:	f007 fd72 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8000de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df4:	4619      	mov	r1, r3
 8000df6:	485c      	ldr	r0, [pc, #368]	; (8000f68 <MX_GPIO_Init+0x4f8>)
 8000df8:	f007 fd64 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000dfc:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e0e:	230c      	movs	r3, #12
 8000e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e16:	4619      	mov	r1, r3
 8000e18:	4854      	ldr	r0, [pc, #336]	; (8000f6c <MX_GPIO_Init+0x4fc>)
 8000e1a:	f007 fd53 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e30:	2300      	movs	r3, #0
 8000e32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	484a      	ldr	r0, [pc, #296]	; (8000f64 <MX_GPIO_Init+0x4f4>)
 8000e3c:	f007 fd42 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8000e40:	2340      	movs	r3, #64	; 0x40
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000e50:	230a      	movs	r3, #10
 8000e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4845      	ldr	r0, [pc, #276]	; (8000f70 <MX_GPIO_Init+0x500>)
 8000e5c:	f007 fd32 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000e60:	230c      	movs	r3, #12
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e70:	2305      	movs	r3, #5
 8000e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e78:	4619      	mov	r1, r3
 8000e7a:	483b      	ldr	r0, [pc, #236]	; (8000f68 <MX_GPIO_Init+0x4f8>)
 8000e7c:	f007 fd22 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8000e80:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e86:	2312      	movs	r3, #18
 8000e88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e92:	2304      	movs	r3, #4
 8000e94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4835      	ldr	r0, [pc, #212]	; (8000f74 <MX_GPIO_Init+0x504>)
 8000e9e:	f007 fd11 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 8000ea2:	2322      	movs	r3, #34	; 0x22
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000eb2:	230a      	movs	r3, #10
 8000eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eba:	4619      	mov	r1, r3
 8000ebc:	482a      	ldr	r0, [pc, #168]	; (8000f68 <MX_GPIO_Init+0x4f8>)
 8000ebe:	f007 fd01 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4828      	ldr	r0, [pc, #160]	; (8000f78 <MX_GPIO_Init+0x508>)
 8000ed8:	f007 fcf4 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000edc:	23e0      	movs	r3, #224	; 0xe0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eec:	230c      	movs	r3, #12
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4820      	ldr	r0, [pc, #128]	; (8000f78 <MX_GPIO_Init+0x508>)
 8000ef8:	f007 fce4 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 8000efc:	2308      	movs	r3, #8
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000f0c:	2309      	movs	r3, #9
 8000f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f14:	4619      	mov	r1, r3
 8000f16:	4818      	ldr	r0, [pc, #96]	; (8000f78 <MX_GPIO_Init+0x508>)
 8000f18:	f007 fcd4 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 8000f1c:	2309      	movs	r3, #9
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000f2c:	2305      	movs	r3, #5
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f34:	4619      	mov	r1, r3
 8000f36:	480b      	ldr	r0, [pc, #44]	; (8000f64 <MX_GPIO_Init+0x4f4>)
 8000f38:	f007 fcc4 	bl	80088c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000f4c:	2309      	movs	r3, #9
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f54:	4619      	mov	r1, r3
 8000f56:	4809      	ldr	r0, [pc, #36]	; (8000f7c <MX_GPIO_Init+0x50c>)
 8000f58:	f007 fcb4 	bl	80088c4 <HAL_GPIO_Init>

}
 8000f5c:	bf00      	nop
 8000f5e:	3740      	adds	r7, #64	; 0x40
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	58020000 	.word	0x58020000
 8000f68:	58020800 	.word	0x58020800
 8000f6c:	58021400 	.word	0x58021400
 8000f70:	58021800 	.word	0x58021800
 8000f74:	58020c00 	.word	0x58020c00
 8000f78:	58021c00 	.word	0x58021c00
 8000f7c:	58020400 	.word	0x58020400

08000f80 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08e      	sub	sp, #56	; 0x38
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2234      	movs	r2, #52	; 0x34
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f00e f87f 	bl	800f090 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f92:	4b38      	ldr	r3, [pc, #224]	; (8001074 <MX_LTDC_Init+0xf4>)
 8000f94:	4a38      	ldr	r2, [pc, #224]	; (8001078 <MX_LTDC_Init+0xf8>)
 8000f96:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f98:	4b36      	ldr	r3, [pc, #216]	; (8001074 <MX_LTDC_Init+0xf4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f9e:	4b35      	ldr	r3, [pc, #212]	; (8001074 <MX_LTDC_Init+0xf4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 8000fa4:	4b33      	ldr	r3, [pc, #204]	; (8001074 <MX_LTDC_Init+0xf4>)
 8000fa6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000faa:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000fac:	4b31      	ldr	r3, [pc, #196]	; (8001074 <MX_LTDC_Init+0xf4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000fb2:	4b30      	ldr	r3, [pc, #192]	; (8001074 <MX_LTDC_Init+0xf4>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000fb8:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <MX_LTDC_Init+0xf4>)
 8000fba:	2203      	movs	r2, #3
 8000fbc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000fbe:	4b2d      	ldr	r3, [pc, #180]	; (8001074 <MX_LTDC_Init+0xf4>)
 8000fc0:	220e      	movs	r2, #14
 8000fc2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000fc4:	4b2b      	ldr	r3, [pc, #172]	; (8001074 <MX_LTDC_Init+0xf4>)
 8000fc6:	2205      	movs	r2, #5
 8000fc8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000fca:	4b2a      	ldr	r3, [pc, #168]	; (8001074 <MX_LTDC_Init+0xf4>)
 8000fcc:	f240 228e 	movw	r2, #654	; 0x28e
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000fd2:	4b28      	ldr	r3, [pc, #160]	; (8001074 <MX_LTDC_Init+0xf4>)
 8000fd4:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000fda:	4b26      	ldr	r3, [pc, #152]	; (8001074 <MX_LTDC_Init+0xf4>)
 8000fdc:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000fe0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000fe2:	4b24      	ldr	r3, [pc, #144]	; (8001074 <MX_LTDC_Init+0xf4>)
 8000fe4:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000fe8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fea:	4b22      	ldr	r3, [pc, #136]	; (8001074 <MX_LTDC_Init+0xf4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <MX_LTDC_Init+0xf4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ffa:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <MX_LTDC_Init+0xf4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001002:	481c      	ldr	r0, [pc, #112]	; (8001074 <MX_LTDC_Init+0xf4>)
 8001004:	f008 fdb8 	bl	8009b78 <HAL_LTDC_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 800100e:	f000 fa51 	bl	80014b4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001022:	2302      	movs	r3, #2
 8001024:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800102e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001032:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001034:	2305      	movs	r3, #5
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2200      	movs	r2, #0
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_LTDC_Init+0xf4>)
 800105e:	f008 ff1d 	bl	8009e9c <HAL_LTDC_ConfigLayer>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8001068:	f000 fa24 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	3738      	adds	r7, #56	; 0x38
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	24000204 	.word	0x24000204
 8001078:	50001000 	.word	0x50001000

0800107c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b0bc      	sub	sp, #240	; 0xf0
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001094:	f107 0318 	add.w	r3, r7, #24
 8001098:	22c0      	movs	r2, #192	; 0xc0
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f00d fff7 	bl	800f090 <memset>
  if(ltdcHandle->Instance==LTDC)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a5b      	ldr	r2, [pc, #364]	; (8001214 <HAL_LTDC_MspInit+0x198>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	f040 80ae 	bne.w	800120a <HAL_LTDC_MspInit+0x18e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80010ae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 11;
 80010be:	230b      	movs	r3, #11
 80010c0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 80010c2:	2311      	movs	r3, #17
 80010c4:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 11;
 80010ca:	230b      	movs	r3, #11
 80010cc:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80010ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010d2:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010dc:	f107 0318 	add.w	r3, r7, #24
 80010e0:	4618      	mov	r0, r3
 80010e2:	f00a f945 	bl	800b370 <HAL_RCCEx_PeriphCLKConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 80010ec:	f000 f9e2 	bl	80014b4 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010f0:	4b49      	ldr	r3, [pc, #292]	; (8001218 <HAL_LTDC_MspInit+0x19c>)
 80010f2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80010f6:	4a48      	ldr	r2, [pc, #288]	; (8001218 <HAL_LTDC_MspInit+0x19c>)
 80010f8:	f043 0308 	orr.w	r3, r3, #8
 80010fc:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8001100:	4b45      	ldr	r3, [pc, #276]	; (8001218 <HAL_LTDC_MspInit+0x19c>)
 8001102:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800110e:	4b42      	ldr	r3, [pc, #264]	; (8001218 <HAL_LTDC_MspInit+0x19c>)
 8001110:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001114:	4a40      	ldr	r2, [pc, #256]	; (8001218 <HAL_LTDC_MspInit+0x19c>)
 8001116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800111e:	4b3e      	ldr	r3, [pc, #248]	; (8001218 <HAL_LTDC_MspInit+0x19c>)
 8001120:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800112c:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <HAL_LTDC_MspInit+0x19c>)
 800112e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001132:	4a39      	ldr	r2, [pc, #228]	; (8001218 <HAL_LTDC_MspInit+0x19c>)
 8001134:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001138:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800113c:	4b36      	ldr	r3, [pc, #216]	; (8001218 <HAL_LTDC_MspInit+0x19c>)
 800113e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800114a:	4b33      	ldr	r3, [pc, #204]	; (8001218 <HAL_LTDC_MspInit+0x19c>)
 800114c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001150:	4a31      	ldr	r2, [pc, #196]	; (8001218 <HAL_LTDC_MspInit+0x19c>)
 8001152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001156:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800115a:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <HAL_LTDC_MspInit+0x19c>)
 800115c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001180:	230e      	movs	r3, #14
 8001182:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001186:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800118a:	4619      	mov	r1, r3
 800118c:	4823      	ldr	r0, [pc, #140]	; (800121c <HAL_LTDC_MspInit+0x1a0>)
 800118e:	f007 fb99 	bl	80088c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 8001192:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001196:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ac:	230e      	movs	r3, #14
 80011ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80011b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011b6:	4619      	mov	r1, r3
 80011b8:	4819      	ldr	r0, [pc, #100]	; (8001220 <HAL_LTDC_MspInit+0x1a4>)
 80011ba:	f007 fb83 	bl	80088c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 80011be:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80011c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011d8:	230e      	movs	r3, #14
 80011da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011e2:	4619      	mov	r1, r3
 80011e4:	480f      	ldr	r0, [pc, #60]	; (8001224 <HAL_LTDC_MspInit+0x1a8>)
 80011e6:	f007 fb6d 	bl	80088c4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2058      	movs	r0, #88	; 0x58
 80011f0:	f003 f8f9 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011f4:	2058      	movs	r0, #88	; 0x58
 80011f6:	f003 f910 	bl	800441a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2059      	movs	r0, #89	; 0x59
 8001200:	f003 f8f1 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001204:	2059      	movs	r0, #89	; 0x59
 8001206:	f003 f908 	bl	800441a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800120a:	bf00      	nop
 800120c:	37f0      	adds	r7, #240	; 0xf0
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	50001000 	.word	0x50001000
 8001218:	58024400 	.word	0x58024400
 800121c:	58022800 	.word	0x58022800
 8001220:	58022400 	.word	0x58022400
 8001224:	58022000 	.word	0x58022000

08001228 <LTDC_Init_from_buffer>:
  /* USER CODE END LTDC_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTDC_Init_from_buffer(uint32_t* buffer){
 8001228:	b580      	push	{r7, lr}
 800122a:	b090      	sub	sp, #64	; 0x40
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2234      	movs	r2, #52	; 0x34
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f00d ff29 	bl	800f090 <memset>
	pLayerCfg.WindowX0 = 28;
 800123e:	231c      	movs	r3, #28
 8001240:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = 508;
 8001242:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8001246:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 6;
 8001248:	2306      	movs	r3, #6
 800124a:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = 278;
 800124c:	f44f 738b 	mov.w	r3, #278	; 0x116
 8001250:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001252:	2302      	movs	r3, #2
 8001254:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001256:	23ff      	movs	r3, #255	; 0xff
 8001258:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800125e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001264:	2305      	movs	r3, #5
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.FBStartAdress = (uint32_t)buffer;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.ImageWidth = 480;
 800126c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = 272;
 8001272:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001276:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	2200      	movs	r2, #0
 8001290:	4619      	mov	r1, r3
 8001292:	4806      	ldr	r0, [pc, #24]	; (80012ac <LTDC_Init_from_buffer+0x84>)
 8001294:	f008 fe02 	bl	8009e9c <HAL_LTDC_ConfigLayer>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <LTDC_Init_from_buffer+0x7a>
	{
	Error_Handler();
 800129e:	f000 f909 	bl	80014b4 <Error_Handler>
	}
}
 80012a2:	bf00      	nop
 80012a4:	3740      	adds	r7, #64	; 0x40
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	24000204 	.word	0x24000204

080012b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b4:	f002 ff06 	bl	80040c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b8:	f000 f860 	bl	800137c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012bc:	f7ff fbd8 	bl	8000a70 <MX_GPIO_Init>
  MX_DMA_Init();
 80012c0:	f7ff fb2a 	bl	8000918 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80012c4:	f002 fe16 	bl	8003ef4 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 80012c8:	f7ff fb46 	bl	8000958 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80012cc:	f7ff fe58 	bl	8000f80 <MX_LTDC_Init>
  MX_DCMI_Init();
 80012d0:	f7ff f9e0 	bl	8000694 <MX_DCMI_Init>
  MX_RTC_Init();
 80012d4:	f001 fe4c 	bl	8002f70 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 80012d8:	4821      	ldr	r0, [pc, #132]	; (8001360 <main+0xb0>)
 80012da:	f001 fd93 	bl	8002e04 <RetargetInit>

  printf("BUFFER RANDOM VALUE BEFORE CAPTURE: %d\n", buffer[5640]);
 80012de:	4b21      	ldr	r3, [pc, #132]	; (8001364 <main+0xb4>)
 80012e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012e4:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 80012e8:	4619      	mov	r1, r3
 80012ea:	481f      	ldr	r0, [pc, #124]	; (8001368 <main+0xb8>)
 80012ec:	f00d fed8 	bl	800f0a0 <iprintf>
  //camera init
  BSP_CAMERA_PwrDown(0);
 80012f0:	2000      	movs	r0, #0
 80012f2:	f002 fba0 	bl	8003a36 <BSP_CAMERA_PwrDown>

  if(BSP_CAMERA_Init(0, CAMERA_R480x272, CAMERA_PF_RGB565) != BSP_ERROR_NONE){
 80012f6:	2200      	movs	r2, #0
 80012f8:	2102      	movs	r1, #2
 80012fa:	2000      	movs	r0, #0
 80012fc:	f002 faea 	bl	80038d4 <BSP_CAMERA_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <main+0x5a>
	  Error_Handler();
 8001306:	f000 f8d5 	bl	80014b4 <Error_Handler>
  }

  HAL_Delay(1000);
 800130a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800130e:	f002 ff6b 	bl	80041e8 <HAL_Delay>
//  buffer[5460] = 255;
  LTDC_Init_from_buffer(buffer2d);
 8001312:	4816      	ldr	r0, [pc, #88]	; (800136c <main+0xbc>)
 8001314:	f7ff ff88 	bl	8001228 <LTDC_Init_from_buffer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Printing photo 1");
 8001318:	4815      	ldr	r0, [pc, #84]	; (8001370 <main+0xc0>)
 800131a:	f00d fec1 	bl	800f0a0 <iprintf>
  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, GPIO_PIN_SET);
 800131e:	2201      	movs	r2, #1
 8001320:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001324:	4813      	ldr	r0, [pc, #76]	; (8001374 <main+0xc4>)
 8001326:	f007 fd87 	bl	8008e38 <HAL_GPIO_WritePin>
  BSP_CAMERA_Start(0, (uint8_t*)buffer, CAMERA_MODE_SNAPSHOT);
 800132a:	2202      	movs	r2, #2
 800132c:	490d      	ldr	r1, [pc, #52]	; (8001364 <main+0xb4>)
 800132e:	2000      	movs	r0, #0
 8001330:	f002 fb16 	bl	8003960 <BSP_CAMERA_Start>
  BSP_CAMERA_Stop(0);
 8001334:	2000      	movs	r0, #0
 8001336:	f002 fb4d 	bl	80039d4 <BSP_CAMERA_Stop>
  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <main+0xc4>)
 8001342:	f007 fd79 	bl	8008e38 <HAL_GPIO_WritePin>

  while (1)
  {
	HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 8001346:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800134a:	480a      	ldr	r0, [pc, #40]	; (8001374 <main+0xc4>)
 800134c:	f007 fd8d 	bl	8008e6a <HAL_GPIO_TogglePin>
	printf("siema");
 8001350:	4809      	ldr	r0, [pc, #36]	; (8001378 <main+0xc8>)
 8001352:	f00d fea5 	bl	800f0a0 <iprintf>
	HAL_Delay(1000);
 8001356:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800135a:	f002 ff45 	bl	80041e8 <HAL_Delay>
	HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 800135e:	e7f2      	b.n	8001346 <main+0x96>
 8001360:	240dffa0 	.word	0x240dffa0
 8001364:	240002b0 	.word	0x240002b0
 8001368:	08010170 	.word	0x08010170
 800136c:	2405fcb0 	.word	0x2405fcb0
 8001370:	08010198 	.word	0x08010198
 8001374:	58021800 	.word	0x58021800
 8001378:	080101ac 	.word	0x080101ac

0800137c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b09c      	sub	sp, #112	; 0x70
 8001380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001386:	224c      	movs	r2, #76	; 0x4c
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f00d fe80 	bl	800f090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2220      	movs	r2, #32
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f00d fe7a 	bl	800f090 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800139c:	4b38      	ldr	r3, [pc, #224]	; (8001480 <SystemClock_Config+0x104>)
 800139e:	f04f 32ff 	mov.w	r2, #4294967295
 80013a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80013a6:	2004      	movs	r0, #4
 80013a8:	f008 ff60 	bl	800a26c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013ac:	2300      	movs	r3, #0
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	4b34      	ldr	r3, [pc, #208]	; (8001484 <SystemClock_Config+0x108>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a33      	ldr	r2, [pc, #204]	; (8001484 <SystemClock_Config+0x108>)
 80013b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b31      	ldr	r3, [pc, #196]	; (8001484 <SystemClock_Config+0x108>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013c8:	bf00      	nop
 80013ca:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <SystemClock_Config+0x108>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013d6:	d1f8      	bne.n	80013ca <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013d8:	f008 ff38 	bl	800a24c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013dc:	4b28      	ldr	r3, [pc, #160]	; (8001480 <SystemClock_Config+0x104>)
 80013de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e0:	4a27      	ldr	r2, [pc, #156]	; (8001480 <SystemClock_Config+0x104>)
 80013e2:	f023 0318 	bic.w	r3, r3, #24
 80013e6:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80013e8:	2305      	movs	r3, #5
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013f2:	2301      	movs	r3, #1
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f6:	2302      	movs	r3, #2
 80013f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013fa:	2302      	movs	r3, #2
 80013fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80013fe:	2302      	movs	r3, #2
 8001400:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001402:	2328      	movs	r3, #40	; 0x28
 8001404:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001406:	2302      	movs	r3, #2
 8001408:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800140a:	2303      	movs	r3, #3
 800140c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 800140e:	2304      	movs	r3, #4
 8001410:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001412:	230c      	movs	r3, #12
 8001414:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001416:	2300      	movs	r3, #0
 8001418:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 5462;
 800141a:	f241 5356 	movw	r3, #5462	; 0x1556
 800141e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001424:	4618      	mov	r0, r3
 8001426:	f008 ff7b 	bl	800a320 <HAL_RCC_OscConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001430:	f000 f840 	bl	80014b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001434:	233f      	movs	r3, #63	; 0x3f
 8001436:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001438:	2303      	movs	r3, #3
 800143a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001444:	2340      	movs	r3, #64	; 0x40
 8001446:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001448:	2340      	movs	r3, #64	; 0x40
 800144a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800144c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001450:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001452:	2340      	movs	r3, #64	; 0x40
 8001454:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2105      	movs	r1, #5
 800145a:	4618      	mov	r0, r3
 800145c:	f009 fb92 	bl	800ab84 <HAL_RCC_ClockConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001466:	f000 f825 	bl	80014b4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 800146a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800146e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8001472:	2000      	movs	r0, #0
 8001474:	f009 fd3c 	bl	800aef0 <HAL_RCC_MCOConfig>
}
 8001478:	bf00      	nop
 800147a:	3770      	adds	r7, #112	; 0x70
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	58024400 	.word	0x58024400
 8001484:	58024800 	.word	0x58024800

08001488 <BSP_CAMERA_FrameEventCallback>:

/* USER CODE BEGIN 4 */

void BSP_CAMERA_FrameEventCallback(uint32_t Instance){
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	camera_frame_ready = 1;
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <BSP_CAMERA_FrameEventCallback+0x20>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]
	DMA2D_Convert(buffer, buffer2d);
 8001496:	4905      	ldr	r1, [pc, #20]	; (80014ac <BSP_CAMERA_FrameEventCallback+0x24>)
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <BSP_CAMERA_FrameEventCallback+0x28>)
 800149a:	f7ff fac1 	bl	8000a20 <DMA2D_Convert>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	240002ac 	.word	0x240002ac
 80014ac:	2405fcb0 	.word	0x2405fcb0
 80014b0:	240002b0 	.word	0x240002b0

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014bc:	e7fe      	b.n	80014bc <Error_Handler+0x8>
	...

080014c0 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d103      	bne.n	80014d8 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	e02c      	b.n	8001532 <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	891a      	ldrh	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	695a      	ldr	r2, [r3, #20]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a0c      	ldr	r2, [pc, #48]	; (800153c <OV5640_RegisterBusIO+0x7c>)
 800150c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <OV5640_RegisterBusIO+0x80>)
 8001512:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d004      	beq.n	800152c <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4798      	blx	r3
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	e002      	b.n	8001532 <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
 8001530:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001532:	68fb      	ldr	r3, [r7, #12]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	08002d43 	.word	0x08002d43
 8001540:	08002d75 	.word	0x08002d75

08001544 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800155a:	2b00      	cmp	r3, #0
 800155c:	d165      	bne.n	800162a <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	2b04      	cmp	r3, #4
 8001562:	d80e      	bhi.n	8001582 <OV5640_Init+0x3e>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00f      	beq.n	800158a <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d00c      	beq.n	800158a <OV5640_Init+0x46>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d009      	beq.n	800158a <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b07      	cmp	r3, #7
 800157a:	d006      	beq.n	800158a <OV5640_Init+0x46>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b08      	cmp	r3, #8
 8001580:	d003      	beq.n	800158a <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	61bb      	str	r3, [r7, #24]
 8001588:	e04f      	b.n	800162a <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	e01f      	b.n	80015d0 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001596:	d018      	beq.n	80015ca <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8001598:	4a26      	ldr	r2, [pc, #152]	; (8001634 <OV5640_Init+0xf0>)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	885b      	ldrh	r3, [r3, #2]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f103 0018 	add.w	r0, r3, #24
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <OV5640_Init+0xf0>)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80015b4:	f107 0217 	add.w	r2, r7, #23
 80015b8:	2301      	movs	r3, #1
 80015ba:	f001 fc0b 	bl	8002dd4 <ov5640_write_reg>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
 80015c8:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3301      	adds	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	2bfd      	cmp	r3, #253	; 0xfd
 80015d4:	d9dc      	bls.n	8001590 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d126      	bne.n	800162a <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f000 f9e0 	bl	80019a4 <OV5640_SetResolution>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	61bb      	str	r3, [r7, #24]
 80015f0:	e01b      	b.n	800162a <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f000 f833 	bl	8001660 <OV5640_SetPixelFormat>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	e010      	b.n	800162a <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8001608:	2300      	movs	r3, #0
 800160a:	2201      	movs	r2, #1
 800160c:	2101      	movs	r1, #1
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f000 fb64 	bl	8001cdc <OV5640_SetPolarities>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	61bb      	str	r3, [r7, #24]
 8001620:	e003      	b.n	800162a <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 800162a:	69bb      	ldr	r3, [r7, #24]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3720      	adds	r7, #32
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	080101fc 	.word	0x080101fc

08001638 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001646:	2b01      	cmp	r3, #1
 8001648:	d103      	bne.n	8001652 <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00f      	beq.n	8001694 <OV5640_SetPixelFormat+0x34>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d00c      	beq.n	8001694 <OV5640_SetPixelFormat+0x34>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d009      	beq.n	8001694 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b07      	cmp	r3, #7
 8001684:	d006      	beq.n	8001694 <OV5640_SetPixelFormat+0x34>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	2b08      	cmp	r3, #8
 800168a:	d003      	beq.n	8001694 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	e16a      	b.n	800196a <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	3b01      	subs	r3, #1
 8001698:	2b07      	cmp	r3, #7
 800169a:	f200 80c3 	bhi.w	8001824 <OV5640_SetPixelFormat+0x1c4>
 800169e:	a201      	add	r2, pc, #4	; (adr r2, 80016a4 <OV5640_SetPixelFormat+0x44>)
 80016a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a4:	0800171d 	.word	0x0800171d
 80016a8:	080016c5 	.word	0x080016c5
 80016ac:	08001825 	.word	0x08001825
 80016b0:	08001825 	.word	0x08001825
 80016b4:	08001825 	.word	0x08001825
 80016b8:	08001825 	.word	0x08001825
 80016bc:	08001775 	.word	0x08001775
 80016c0:	080017cd 	.word	0x080017cd
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	e024      	b.n	8001714 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d0:	d01d      	beq.n	800170e <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 80016d2:	4aa8      	ldr	r2, [pc, #672]	; (8001974 <OV5640_SetPixelFormat+0x314>)
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	885b      	ldrh	r3, [r3, #2]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f103 0018 	add.w	r0, r3, #24
 80016e6:	4aa3      	ldr	r2, [pc, #652]	; (8001974 <OV5640_SetPixelFormat+0x314>)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80016ee:	f107 020f 	add.w	r2, r7, #15
 80016f2:	2301      	movs	r3, #1
 80016f4:	f001 fb6e 	bl	8002dd4 <ov5640_write_reg>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	e003      	b.n	800170e <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001706:	2101      	movs	r1, #1
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f001 fb00 	bl	8002d0e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	3301      	adds	r3, #1
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d9d7      	bls.n	80016ca <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 800171a:	e0af      	b.n	800187c <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 800171c:	2300      	movs	r3, #0
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	e024      	b.n	800176c <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d01d      	beq.n	8001766 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 800172a:	4a93      	ldr	r2, [pc, #588]	; (8001978 <OV5640_SetPixelFormat+0x318>)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	885b      	ldrh	r3, [r3, #2]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f103 0018 	add.w	r0, r3, #24
 800173e:	4a8e      	ldr	r2, [pc, #568]	; (8001978 <OV5640_SetPixelFormat+0x318>)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001746:	f107 020f 	add.w	r2, r7, #15
 800174a:	2301      	movs	r3, #1
 800174c:	f001 fb42 	bl	8002dd4 <ov5640_write_reg>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	e003      	b.n	8001766 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800175e:	2101      	movs	r1, #1
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f001 fad4 	bl	8002d0e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	3301      	adds	r3, #1
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d9d7      	bls.n	8001722 <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 8001772:	e083      	b.n	800187c <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	e024      	b.n	80017c4 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001780:	d01d      	beq.n	80017be <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8001782:	4a7e      	ldr	r2, [pc, #504]	; (800197c <OV5640_SetPixelFormat+0x31c>)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	885b      	ldrh	r3, [r3, #2]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f103 0018 	add.w	r0, r3, #24
 8001796:	4a79      	ldr	r2, [pc, #484]	; (800197c <OV5640_SetPixelFormat+0x31c>)
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800179e:	f107 020f 	add.w	r2, r7, #15
 80017a2:	2301      	movs	r3, #1
 80017a4:	f001 fb16 	bl	8002dd4 <ov5640_write_reg>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	e003      	b.n	80017be <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80017b6:	2101      	movs	r1, #1
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f001 faa8 	bl	8002d0e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	3301      	adds	r3, #1
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d9d7      	bls.n	800177a <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 80017ca:	e057      	b.n	800187c <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	e024      	b.n	800181c <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d8:	d01d      	beq.n	8001816 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80017da:	4a69      	ldr	r2, [pc, #420]	; (8001980 <OV5640_SetPixelFormat+0x320>)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	885b      	ldrh	r3, [r3, #2]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f103 0018 	add.w	r0, r3, #24
 80017ee:	4a64      	ldr	r2, [pc, #400]	; (8001980 <OV5640_SetPixelFormat+0x320>)
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80017f6:	f107 020f 	add.w	r2, r7, #15
 80017fa:	2301      	movs	r3, #1
 80017fc:	f001 faea 	bl	8002dd4 <ov5640_write_reg>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e003      	b.n	8001816 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800180e:	2101      	movs	r1, #1
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f001 fa7c 	bl	8002d0e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	3301      	adds	r3, #1
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d9d7      	bls.n	80017d2 <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8001822:	e02b      	b.n	800187c <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	e024      	b.n	8001874 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001830:	d01d      	beq.n	800186e <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8001832:	4a54      	ldr	r2, [pc, #336]	; (8001984 <OV5640_SetPixelFormat+0x324>)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	885b      	ldrh	r3, [r3, #2]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f103 0018 	add.w	r0, r3, #24
 8001846:	4a4f      	ldr	r2, [pc, #316]	; (8001984 <OV5640_SetPixelFormat+0x324>)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800184e:	f107 020f 	add.w	r2, r7, #15
 8001852:	2301      	movs	r3, #1
 8001854:	f001 fabe 	bl	8002dd4 <ov5640_write_reg>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	e003      	b.n	800186e <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001866:	2101      	movs	r1, #1
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f001 fa50 	bl	8002d0e <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	3301      	adds	r3, #1
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d9d7      	bls.n	800182a <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 800187a:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2b08      	cmp	r3, #8
 8001880:	d173      	bne.n	800196a <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f103 0018 	add.w	r0, r3, #24
 8001888:	f107 020f 	add.w	r2, r7, #15
 800188c:	2301      	movs	r3, #1
 800188e:	f643 0121 	movw	r1, #14369	; 0x3821
 8001892:	f001 fa88 	bl	8002da6 <ov5640_read_reg>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e062      	b.n	800196a <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	f043 0320 	orr.w	r3, r3, #32
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f103 0018 	add.w	r0, r3, #24
 80018b4:	f107 020f 	add.w	r2, r7, #15
 80018b8:	2301      	movs	r3, #1
 80018ba:	f643 0121 	movw	r1, #14369	; 0x3821
 80018be:	f001 fa89 	bl	8002dd4 <ov5640_write_reg>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	e04c      	b.n	800196a <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f103 0018 	add.w	r0, r3, #24
 80018d6:	f107 020f 	add.w	r2, r7, #15
 80018da:	2301      	movs	r3, #1
 80018dc:	f243 0102 	movw	r1, #12290	; 0x3002
 80018e0:	f001 fa61 	bl	8002da6 <ov5640_read_reg>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e03b      	b.n	800196a <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	f023 031c 	bic.w	r3, r3, #28
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f103 0018 	add.w	r0, r3, #24
 8001902:	f107 020f 	add.w	r2, r7, #15
 8001906:	2301      	movs	r3, #1
 8001908:	f243 0102 	movw	r1, #12290	; 0x3002
 800190c:	f001 fa62 	bl	8002dd4 <ov5640_write_reg>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e025      	b.n	800196a <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f103 0018 	add.w	r0, r3, #24
 8001924:	f107 020f 	add.w	r2, r7, #15
 8001928:	2301      	movs	r3, #1
 800192a:	f243 0106 	movw	r1, #12294	; 0x3006
 800192e:	f001 fa3a 	bl	8002da6 <ov5640_read_reg>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8001938:	f04f 33ff 	mov.w	r3, #4294967295
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e014      	b.n	800196a <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001946:	b2db      	uxtb	r3, r3
 8001948:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f103 0018 	add.w	r0, r3, #24
 8001950:	f107 020f 	add.w	r2, r7, #15
 8001954:	2301      	movs	r3, #1
 8001956:	f243 0106 	movw	r1, #12294	; 0x3006
 800195a:	f001 fa3b 	bl	8002dd4 <ov5640_write_reg>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001964:	f04f 33ff 	mov.w	r3, #4294967295
 8001968:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 800196a:	697b      	ldr	r3, [r7, #20]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	080105f4 	.word	0x080105f4
 8001978:	080105fc 	.word	0x080105fc
 800197c:	08010604 	.word	0x08010604
 8001980:	0801060c 	.word	0x0801060c
 8001984:	08010614 	.word	0x08010614

08001988 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d903      	bls.n	80019c0 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	e0d8      	b.n	8001b72 <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	f200 80d1 	bhi.w	8001b6a <OV5640_SetResolution+0x1c6>
 80019c8:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <OV5640_SetResolution+0x2c>)
 80019ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ce:	bf00      	nop
 80019d0:	080019e5 	.word	0x080019e5
 80019d4:	08001a33 	.word	0x08001a33
 80019d8:	08001a81 	.word	0x08001a81
 80019dc:	08001acf 	.word	0x08001acf
 80019e0:	08001b1d 	.word	0x08001b1d
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	e01f      	b.n	8001a2a <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f0:	d018      	beq.n	8001a24 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 80019f2:	4a62      	ldr	r2, [pc, #392]	; (8001b7c <OV5640_SetResolution+0x1d8>)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	885b      	ldrh	r3, [r3, #2]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f103 0018 	add.w	r0, r3, #24
 8001a06:	4a5d      	ldr	r2, [pc, #372]	; (8001b7c <OV5640_SetResolution+0x1d8>)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001a0e:	f107 020f 	add.w	r2, r7, #15
 8001a12:	2301      	movs	r3, #1
 8001a14:	f001 f9de 	bl	8002dd4 <ov5640_write_reg>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	3301      	adds	r3, #1
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d9dc      	bls.n	80019ea <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001a30:	e09f      	b.n	8001b72 <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	e01f      	b.n	8001a78 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3e:	d018      	beq.n	8001a72 <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8001a40:	4a4f      	ldr	r2, [pc, #316]	; (8001b80 <OV5640_SetResolution+0x1dc>)
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	885b      	ldrh	r3, [r3, #2]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f103 0018 	add.w	r0, r3, #24
 8001a54:	4a4a      	ldr	r2, [pc, #296]	; (8001b80 <OV5640_SetResolution+0x1dc>)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001a5c:	f107 020f 	add.w	r2, r7, #15
 8001a60:	2301      	movs	r3, #1
 8001a62:	f001 f9b7 	bl	8002dd4 <ov5640_write_reg>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a70:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	3301      	adds	r3, #1
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d9dc      	bls.n	8001a38 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8001a7e:	e078      	b.n	8001b72 <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	e01f      	b.n	8001ac6 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8c:	d018      	beq.n	8001ac0 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8001a8e:	4a3d      	ldr	r2, [pc, #244]	; (8001b84 <OV5640_SetResolution+0x1e0>)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	885b      	ldrh	r3, [r3, #2]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f103 0018 	add.w	r0, r3, #24
 8001aa2:	4a38      	ldr	r2, [pc, #224]	; (8001b84 <OV5640_SetResolution+0x1e0>)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001aaa:	f107 020f 	add.w	r2, r7, #15
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f001 f990 	bl	8002dd4 <ov5640_write_reg>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
 8001abe:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d9dc      	bls.n	8001a86 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8001acc:	e051      	b.n	8001b72 <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	e01f      	b.n	8001b14 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ada:	d018      	beq.n	8001b0e <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8001adc:	4a2a      	ldr	r2, [pc, #168]	; (8001b88 <OV5640_SetResolution+0x1e4>)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	885b      	ldrh	r3, [r3, #2]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f103 0018 	add.w	r0, r3, #24
 8001af0:	4a25      	ldr	r2, [pc, #148]	; (8001b88 <OV5640_SetResolution+0x1e4>)
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001af8:	f107 020f 	add.w	r2, r7, #15
 8001afc:	2301      	movs	r3, #1
 8001afe:	f001 f969 	bl	8002dd4 <ov5640_write_reg>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8001b08:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	3301      	adds	r3, #1
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d9dc      	bls.n	8001ad4 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8001b1a:	e02a      	b.n	8001b72 <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	e01f      	b.n	8001b62 <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b28:	d018      	beq.n	8001b5c <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8001b2a:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <OV5640_SetResolution+0x1e8>)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	885b      	ldrh	r3, [r3, #2]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f103 0018 	add.w	r0, r3, #24
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <OV5640_SetResolution+0x1e8>)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001b46:	f107 020f 	add.w	r2, r7, #15
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	f001 f942 	bl	8002dd4 <ov5640_write_reg>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d9dc      	bls.n	8001b22 <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8001b68:	e003      	b.n	8001b72 <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	617b      	str	r3, [r7, #20]
        break;
 8001b70:	bf00      	nop
    }
  }

  return ret;
 8001b72:	697b      	ldr	r3, [r7, #20]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	0801061c 	.word	0x0801061c
 8001b80:	0801062c 	.word	0x0801062c
 8001b84:	0801063c 	.word	0x0801063c
 8001b88:	0801064c 	.word	0x0801064c
 8001b8c:	0801065c 	.word	0x0801065c

08001b90 <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f103 0018 	add.w	r0, r3, #24
 8001ba0:	f107 020f 	add.w	r2, r7, #15
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f643 0108 	movw	r1, #14344	; 0x3808
 8001baa:	f001 f8fc 	bl	8002da6 <ov5640_read_reg>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	e08a      	b.n	8001cd2 <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	021b      	lsls	r3, r3, #8
 8001bc2:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f103 0018 	add.w	r0, r3, #24
 8001bca:	f107 020f 	add.w	r2, r7, #15
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f643 0109 	movw	r1, #14345	; 0x3809
 8001bd4:	f001 f8e7 	bl	8002da6 <ov5640_read_reg>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e075      	b.n	8001cd2 <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	8a7b      	ldrh	r3, [r7, #18]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f103 0018 	add.w	r0, r3, #24
 8001bf6:	f107 020f 	add.w	r2, r7, #15
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f643 010a 	movw	r1, #14346	; 0x380a
 8001c00:	f001 f8d1 	bl	8002da6 <ov5640_read_reg>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	e05f      	b.n	8001cd2 <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	021b      	lsls	r3, r3, #8
 8001c18:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f103 0018 	add.w	r0, r3, #24
 8001c20:	f107 020f 	add.w	r2, r7, #15
 8001c24:	2301      	movs	r3, #1
 8001c26:	f643 010b 	movw	r1, #14347	; 0x380b
 8001c2a:	f001 f8bc 	bl	8002da6 <ov5640_read_reg>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 8001c34:	f04f 33ff 	mov.w	r3, #4294967295
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	e04a      	b.n	8001cd2 <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	8a3b      	ldrh	r3, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 8001c46:	8a7b      	ldrh	r3, [r7, #18]
 8001c48:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001c4c:	d109      	bne.n	8001c62 <OV5640_GetResolution+0xd2>
 8001c4e:	8a3b      	ldrh	r3, [r7, #16]
 8001c50:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c54:	d105      	bne.n	8001c62 <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2204      	movs	r2, #4
 8001c5a:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e037      	b.n	8001cd2 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 8001c62:	8a7b      	ldrh	r3, [r7, #18]
 8001c64:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001c68:	d109      	bne.n	8001c7e <OV5640_GetResolution+0xee>
 8001c6a:	8a3b      	ldrh	r3, [r7, #16]
 8001c6c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c70:	d105      	bne.n	8001c7e <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2203      	movs	r2, #3
 8001c76:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e029      	b.n	8001cd2 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 8001c7e:	8a7b      	ldrh	r3, [r7, #18]
 8001c80:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c84:	d109      	bne.n	8001c9a <OV5640_GetResolution+0x10a>
 8001c86:	8a3b      	ldrh	r3, [r7, #16]
 8001c88:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001c8c:	d105      	bne.n	8001c9a <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2202      	movs	r2, #2
 8001c92:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e01b      	b.n	8001cd2 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 8001c9a:	8a7b      	ldrh	r3, [r7, #18]
 8001c9c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ca0:	d108      	bne.n	8001cb4 <OV5640_GetResolution+0x124>
 8001ca2:	8a3b      	ldrh	r3, [r7, #16]
 8001ca4:	2bf0      	cmp	r3, #240	; 0xf0
 8001ca6:	d105      	bne.n	8001cb4 <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e00e      	b.n	8001cd2 <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 8001cb4:	8a7b      	ldrh	r3, [r7, #18]
 8001cb6:	2ba0      	cmp	r3, #160	; 0xa0
 8001cb8:	d108      	bne.n	8001ccc <OV5640_GetResolution+0x13c>
 8001cba:	8a3b      	ldrh	r3, [r7, #16]
 8001cbc:	2b78      	cmp	r3, #120	; 0x78
 8001cbe:	d105      	bne.n	8001ccc <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e002      	b.n	8001cd2 <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8001cd2:	697b      	ldr	r3, [r7, #20]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d011      	beq.n	8001d18 <OV5640_SetPolarities+0x3c>
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <OV5640_SetPolarities+0x24>
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d10b      	bne.n	8001d18 <OV5640_SetPolarities+0x3c>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d105      	bne.n	8001d18 <OV5640_SetPolarities+0x3c>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d006      	beq.n	8001d20 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	e01e      	b.n	8001d5e <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	015b      	lsls	r3, r3, #5
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	4313      	orrs	r3, r2
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f103 0018 	add.w	r0, r3, #24
 8001d44:	f107 0213 	add.w	r2, r7, #19
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f244 7140 	movw	r1, #18240	; 0x4740
 8001d4e:	f001 f841 	bl	8002dd4 <ov5640_write_reg>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001d5e:	697b      	ldr	r3, [r7, #20]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f103 0018 	add.w	r0, r3, #24
 8001d82:	f107 020b 	add.w	r2, r7, #11
 8001d86:	2301      	movs	r3, #1
 8001d88:	f243 0108 	movw	r1, #12296	; 0x3008
 8001d8c:	f001 f822 	bl	8002dd4 <ov5640_write_reg>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	e032      	b.n	8001e04 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 8001d9e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 ffb3 	bl	8002d0e <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f103 0018 	add.w	r0, r3, #24
 8001dae:	f107 020b 	add.w	r2, r7, #11
 8001db2:	2301      	movs	r3, #1
 8001db4:	f243 010a 	movw	r1, #12298	; 0x300a
 8001db8:	f000 fff5 	bl	8002da6 <ov5640_read_reg>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	e01c      	b.n	8001e04 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8001dca:	7afb      	ldrb	r3, [r7, #11]
 8001dcc:	021a      	lsls	r2, r3, #8
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f103 0018 	add.w	r0, r3, #24
 8001dd8:	f107 020b 	add.w	r2, r7, #11
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f243 010b 	movw	r1, #12299	; 0x300b
 8001de2:	f000 ffe0 	bl	8002da6 <ov5640_read_reg>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	e007      	b.n	8001e04 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	7afa      	ldrb	r2, [r7, #11]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8001e04:	68fb      	ldr	r3, [r7, #12]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b085      	sub	sp, #20
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d103      	bne.n	8001e26 <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	e01f      	b.n	8001e66 <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2201      	movs	r2, #1
 8001e36:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2201      	movs	r2, #1
 8001e42:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2201      	movs	r2, #1
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2201      	movs	r2, #1
 8001e54:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001e66:	68fb      	ldr	r3, [r7, #12]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f103 0018 	add.w	r0, r3, #24
 8001e88:	f107 020f 	add.w	r2, r7, #15
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f243 4106 	movw	r1, #13318	; 0x3406
 8001e92:	f000 ff9f 	bl	8002dd4 <ov5640_write_reg>
 8001e96:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10c      	bne.n	8001eb8 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 8001e9e:	2346      	movs	r3, #70	; 0x46
 8001ea0:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f103 0018 	add.w	r0, r3, #24
 8001ea8:	f107 020f 	add.w	r2, r7, #15
 8001eac:	2301      	movs	r3, #1
 8001eae:	f245 1190 	movw	r1, #20880	; 0x5190
 8001eb2:	f000 ff8f 	bl	8002dd4 <ov5640_write_reg>
 8001eb6:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10c      	bne.n	8001ed8 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 8001ebe:	23f8      	movs	r3, #248	; 0xf8
 8001ec0:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f103 0018 	add.w	r0, r3, #24
 8001ec8:	f107 020f 	add.w	r2, r7, #15
 8001ecc:	2301      	movs	r3, #1
 8001ece:	f245 1191 	movw	r1, #20881	; 0x5191
 8001ed2:	f000 ff7f 	bl	8002dd4 <ov5640_write_reg>
 8001ed6:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10c      	bne.n	8001ef8 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f103 0018 	add.w	r0, r3, #24
 8001ee8:	f107 020f 	add.w	r2, r7, #15
 8001eec:	2301      	movs	r3, #1
 8001eee:	f245 1192 	movw	r1, #20882	; 0x5192
 8001ef2:	f000 ff6f 	bl	8002dd4 <ov5640_write_reg>
 8001ef6:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 80db 	bne.w	80020b6 <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	2b07      	cmp	r3, #7
 8001f06:	f200 80af 	bhi.w	8002068 <OV5640_SetLightMode+0x1f4>
 8001f0a:	a201      	add	r2, pc, #4	; (adr r2, 8001f10 <OV5640_SetLightMode+0x9c>)
 8001f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f10:	08001f31 	.word	0x08001f31
 8001f14:	08001f7f 	.word	0x08001f7f
 8001f18:	08002069 	.word	0x08002069
 8001f1c:	0800201b 	.word	0x0800201b
 8001f20:	08002069 	.word	0x08002069
 8001f24:	08002069 	.word	0x08002069
 8001f28:	08002069 	.word	0x08002069
 8001f2c:	08001fcd 	.word	0x08001fcd
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	e01f      	b.n	8001f76 <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3c:	d018      	beq.n	8001f70 <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8001f3e:	4a61      	ldr	r2, [pc, #388]	; (80020c4 <OV5640_SetLightMode+0x250>)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	885b      	ldrh	r3, [r3, #2]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f103 0018 	add.w	r0, r3, #24
 8001f52:	4a5c      	ldr	r2, [pc, #368]	; (80020c4 <OV5640_SetLightMode+0x250>)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001f5a:	f107 020f 	add.w	r2, r7, #15
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f000 ff38 	bl	8002dd4 <ov5640_write_reg>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	3301      	adds	r3, #1
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	2b06      	cmp	r3, #6
 8001f7a:	d9dc      	bls.n	8001f36 <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 8001f7c:	e09c      	b.n	80020b8 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	e01f      	b.n	8001fc4 <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8a:	d018      	beq.n	8001fbe <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8001f8c:	4a4e      	ldr	r2, [pc, #312]	; (80020c8 <OV5640_SetLightMode+0x254>)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	885b      	ldrh	r3, [r3, #2]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f103 0018 	add.w	r0, r3, #24
 8001fa0:	4a49      	ldr	r2, [pc, #292]	; (80020c8 <OV5640_SetLightMode+0x254>)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001fa8:	f107 020f 	add.w	r2, r7, #15
 8001fac:	2301      	movs	r3, #1
 8001fae:	f000 ff11 	bl	8002dd4 <ov5640_write_reg>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbc:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d9dc      	bls.n	8001f84 <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 8001fca:	e075      	b.n	80020b8 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	e01f      	b.n	8002012 <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d018      	beq.n	800200c <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8001fda:	4a3c      	ldr	r2, [pc, #240]	; (80020cc <OV5640_SetLightMode+0x258>)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	885b      	ldrh	r3, [r3, #2]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f103 0018 	add.w	r0, r3, #24
 8001fee:	4a37      	ldr	r2, [pc, #220]	; (80020cc <OV5640_SetLightMode+0x258>)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001ff6:	f107 020f 	add.w	r2, r7, #15
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	f000 feea 	bl	8002dd4 <ov5640_write_reg>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 8002006:	f04f 33ff 	mov.w	r3, #4294967295
 800200a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	3301      	adds	r3, #1
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b06      	cmp	r3, #6
 8002016:	d9dc      	bls.n	8001fd2 <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 8002018:	e04e      	b.n	80020b8 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	e01f      	b.n	8002060 <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002026:	d018      	beq.n	800205a <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8002028:	4a29      	ldr	r2, [pc, #164]	; (80020d0 <OV5640_SetLightMode+0x25c>)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	885b      	ldrh	r3, [r3, #2]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f103 0018 	add.w	r0, r3, #24
 800203c:	4a24      	ldr	r2, [pc, #144]	; (80020d0 <OV5640_SetLightMode+0x25c>)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002044:	f107 020f 	add.w	r2, r7, #15
 8002048:	2301      	movs	r3, #1
 800204a:	f000 fec3 	bl	8002dd4 <ov5640_write_reg>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 8002054:	f04f 33ff 	mov.w	r3, #4294967295
 8002058:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	3301      	adds	r3, #1
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	2b06      	cmp	r3, #6
 8002064:	d9dc      	bls.n	8002020 <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 8002066:	e027      	b.n	80020b8 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	e01f      	b.n	80020ae <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d018      	beq.n	80020a8 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8002076:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <OV5640_SetLightMode+0x260>)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	885b      	ldrh	r3, [r3, #2]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f103 0018 	add.w	r0, r3, #24
 800208a:	4a12      	ldr	r2, [pc, #72]	; (80020d4 <OV5640_SetLightMode+0x260>)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002092:	f107 020f 	add.w	r2, r7, #15
 8002096:	2301      	movs	r3, #1
 8002098:	f000 fe9c 	bl	8002dd4 <ov5640_write_reg>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
 80020a6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	3301      	adds	r3, #1
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b06      	cmp	r3, #6
 80020b2:	d9dc      	bls.n	800206e <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 80020b4:	e000      	b.n	80020b8 <OV5640_SetLightMode+0x244>
    }
  }
 80020b6:	bf00      	nop
  return ret;
 80020b8:	697b      	ldr	r3, [r7, #20]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	0801066c 	.word	0x0801066c
 80020c8:	08010688 	.word	0x08010688
 80020cc:	080106a4 	.word	0x080106a4
 80020d0:	080106c0 	.word	0x080106c0
 80020d4:	080106dc 	.word	0x080106dc

080020d8 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	2b1f      	cmp	r3, #31
 80020e8:	f200 81c0 	bhi.w	800246c <OV5640_SetColorEffect+0x394>
 80020ec:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <OV5640_SetColorEffect+0x1c>)
 80020ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f2:	bf00      	nop
 80020f4:	08002175 	.word	0x08002175
 80020f8:	080021ff 	.word	0x080021ff
 80020fc:	0800246d 	.word	0x0800246d
 8002100:	08002289 	.word	0x08002289
 8002104:	0800246d 	.word	0x0800246d
 8002108:	0800246d 	.word	0x0800246d
 800210c:	0800246d 	.word	0x0800246d
 8002110:	08002313 	.word	0x08002313
 8002114:	0800246d 	.word	0x0800246d
 8002118:	0800246d 	.word	0x0800246d
 800211c:	0800246d 	.word	0x0800246d
 8002120:	0800246d 	.word	0x0800246d
 8002124:	0800246d 	.word	0x0800246d
 8002128:	0800246d 	.word	0x0800246d
 800212c:	0800246d 	.word	0x0800246d
 8002130:	0800239d 	.word	0x0800239d
 8002134:	0800246d 	.word	0x0800246d
 8002138:	0800246d 	.word	0x0800246d
 800213c:	0800246d 	.word	0x0800246d
 8002140:	0800246d 	.word	0x0800246d
 8002144:	0800246d 	.word	0x0800246d
 8002148:	0800246d 	.word	0x0800246d
 800214c:	0800246d 	.word	0x0800246d
 8002150:	0800246d 	.word	0x0800246d
 8002154:	0800246d 	.word	0x0800246d
 8002158:	0800246d 	.word	0x0800246d
 800215c:	0800246d 	.word	0x0800246d
 8002160:	0800246d 	.word	0x0800246d
 8002164:	0800246d 	.word	0x0800246d
 8002168:	0800246d 	.word	0x0800246d
 800216c:	0800246d 	.word	0x0800246d
 8002170:	08002425 	.word	0x08002425
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 8002174:	23ff      	movs	r3, #255	; 0xff
 8002176:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f103 0018 	add.w	r0, r3, #24
 800217e:	f107 020b 	add.w	r2, r7, #11
 8002182:	2301      	movs	r3, #1
 8002184:	f245 0101 	movw	r1, #20481	; 0x5001
 8002188:	f000 fe24 	bl	8002dd4 <ov5640_write_reg>
 800218c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10c      	bne.n	80021ae <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 8002194:	2318      	movs	r3, #24
 8002196:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f103 0018 	add.w	r0, r3, #24
 800219e:	f107 020b 	add.w	r2, r7, #11
 80021a2:	2301      	movs	r3, #1
 80021a4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80021a8:	f000 fe14 	bl	8002dd4 <ov5640_write_reg>
 80021ac:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10c      	bne.n	80021ce <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 80021b4:	23a0      	movs	r3, #160	; 0xa0
 80021b6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f103 0018 	add.w	r0, r3, #24
 80021be:	f107 020b 	add.w	r2, r7, #11
 80021c2:	2301      	movs	r3, #1
 80021c4:	f245 5183 	movw	r1, #21891	; 0x5583
 80021c8:	f000 fe04 	bl	8002dd4 <ov5640_write_reg>
 80021cc:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10c      	bne.n	80021ee <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 80021d4:	2340      	movs	r3, #64	; 0x40
 80021d6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f103 0018 	add.w	r0, r3, #24
 80021de:	f107 020b 	add.w	r2, r7, #11
 80021e2:	2301      	movs	r3, #1
 80021e4:	f245 5184 	movw	r1, #21892	; 0x5584
 80021e8:	f000 fdf4 	bl	8002dd4 <ov5640_write_reg>
 80021ec:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 815f 	beq.w	80024b4 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
 80021fa:	60fb      	str	r3, [r7, #12]
      }
      break;
 80021fc:	e15a      	b.n	80024b4 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 80021fe:	23ff      	movs	r3, #255	; 0xff
 8002200:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f103 0018 	add.w	r0, r3, #24
 8002208:	f107 020b 	add.w	r2, r7, #11
 800220c:	2301      	movs	r3, #1
 800220e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002212:	f000 fddf 	bl	8002dd4 <ov5640_write_reg>
 8002216:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10c      	bne.n	8002238 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 800221e:	2318      	movs	r3, #24
 8002220:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f103 0018 	add.w	r0, r3, #24
 8002228:	f107 020b 	add.w	r2, r7, #11
 800222c:	2301      	movs	r3, #1
 800222e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002232:	f000 fdcf 	bl	8002dd4 <ov5640_write_reg>
 8002236:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10c      	bne.n	8002258 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f103 0018 	add.w	r0, r3, #24
 8002248:	f107 020b 	add.w	r2, r7, #11
 800224c:	2301      	movs	r3, #1
 800224e:	f245 5183 	movw	r1, #21891	; 0x5583
 8002252:	f000 fdbf 	bl	8002dd4 <ov5640_write_reg>
 8002256:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10c      	bne.n	8002278 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 800225e:	23c0      	movs	r3, #192	; 0xc0
 8002260:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f103 0018 	add.w	r0, r3, #24
 8002268:	f107 020b 	add.w	r2, r7, #11
 800226c:	2301      	movs	r3, #1
 800226e:	f245 5184 	movw	r1, #21892	; 0x5584
 8002272:	f000 fdaf 	bl	8002dd4 <ov5640_write_reg>
 8002276:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 811c 	beq.w	80024b8 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 8002280:	f04f 33ff 	mov.w	r3, #4294967295
 8002284:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002286:	e117      	b.n	80024b8 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 8002288:	23ff      	movs	r3, #255	; 0xff
 800228a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f103 0018 	add.w	r0, r3, #24
 8002292:	f107 020b 	add.w	r2, r7, #11
 8002296:	2301      	movs	r3, #1
 8002298:	f245 0101 	movw	r1, #20481	; 0x5001
 800229c:	f000 fd9a 	bl	8002dd4 <ov5640_write_reg>
 80022a0:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10c      	bne.n	80022c2 <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 80022a8:	2318      	movs	r3, #24
 80022aa:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f103 0018 	add.w	r0, r3, #24
 80022b2:	f107 020b 	add.w	r2, r7, #11
 80022b6:	2301      	movs	r3, #1
 80022b8:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80022bc:	f000 fd8a 	bl	8002dd4 <ov5640_write_reg>
 80022c0:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10c      	bne.n	80022e2 <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 80022c8:	2360      	movs	r3, #96	; 0x60
 80022ca:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f103 0018 	add.w	r0, r3, #24
 80022d2:	f107 020b 	add.w	r2, r7, #11
 80022d6:	2301      	movs	r3, #1
 80022d8:	f245 5183 	movw	r1, #21891	; 0x5583
 80022dc:	f000 fd7a 	bl	8002dd4 <ov5640_write_reg>
 80022e0:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10c      	bne.n	8002302 <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 80022e8:	2360      	movs	r3, #96	; 0x60
 80022ea:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f103 0018 	add.w	r0, r3, #24
 80022f2:	f107 020b 	add.w	r2, r7, #11
 80022f6:	2301      	movs	r3, #1
 80022f8:	f245 5184 	movw	r1, #21892	; 0x5584
 80022fc:	f000 fd6a 	bl	8002dd4 <ov5640_write_reg>
 8002300:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80d9 	beq.w	80024bc <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
 800230e:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002310:	e0d4      	b.n	80024bc <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 8002312:	23ff      	movs	r3, #255	; 0xff
 8002314:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f103 0018 	add.w	r0, r3, #24
 800231c:	f107 020b 	add.w	r2, r7, #11
 8002320:	2301      	movs	r3, #1
 8002322:	f245 0101 	movw	r1, #20481	; 0x5001
 8002326:	f000 fd55 	bl	8002dd4 <ov5640_write_reg>
 800232a:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10c      	bne.n	800234c <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 8002332:	2318      	movs	r3, #24
 8002334:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f103 0018 	add.w	r0, r3, #24
 800233c:	f107 020b 	add.w	r2, r7, #11
 8002340:	2301      	movs	r3, #1
 8002342:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002346:	f000 fd45 	bl	8002dd4 <ov5640_write_reg>
 800234a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10c      	bne.n	800236c <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f103 0018 	add.w	r0, r3, #24
 800235c:	f107 020b 	add.w	r2, r7, #11
 8002360:	2301      	movs	r3, #1
 8002362:	f245 5183 	movw	r1, #21891	; 0x5583
 8002366:	f000 fd35 	bl	8002dd4 <ov5640_write_reg>
 800236a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10c      	bne.n	800238c <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f103 0018 	add.w	r0, r3, #24
 800237c:	f107 020b 	add.w	r2, r7, #11
 8002380:	2301      	movs	r3, #1
 8002382:	f245 5184 	movw	r1, #21892	; 0x5584
 8002386:	f000 fd25 	bl	8002dd4 <ov5640_write_reg>
 800238a:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8096 	beq.w	80024c0 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8002394:	f04f 33ff 	mov.w	r3, #4294967295
 8002398:	60fb      	str	r3, [r7, #12]
      }
      break;
 800239a:	e091      	b.n	80024c0 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 800239c:	23ff      	movs	r3, #255	; 0xff
 800239e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f103 0018 	add.w	r0, r3, #24
 80023a6:	f107 020b 	add.w	r2, r7, #11
 80023aa:	2301      	movs	r3, #1
 80023ac:	f245 0101 	movw	r1, #20481	; 0x5001
 80023b0:	f000 fd10 	bl	8002dd4 <ov5640_write_reg>
 80023b4:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10c      	bne.n	80023d6 <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 80023bc:	2318      	movs	r3, #24
 80023be:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f103 0018 	add.w	r0, r3, #24
 80023c6:	f107 020b 	add.w	r2, r7, #11
 80023ca:	2301      	movs	r3, #1
 80023cc:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80023d0:	f000 fd00 	bl	8002dd4 <ov5640_write_reg>
 80023d4:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10c      	bne.n	80023f6 <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 80023dc:	2340      	movs	r3, #64	; 0x40
 80023de:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f103 0018 	add.w	r0, r3, #24
 80023e6:	f107 020b 	add.w	r2, r7, #11
 80023ea:	2301      	movs	r3, #1
 80023ec:	f245 5183 	movw	r1, #21891	; 0x5583
 80023f0:	f000 fcf0 	bl	8002dd4 <ov5640_write_reg>
 80023f4:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10c      	bne.n	8002416 <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 80023fc:	23a0      	movs	r3, #160	; 0xa0
 80023fe:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f103 0018 	add.w	r0, r3, #24
 8002406:	f107 020b 	add.w	r2, r7, #11
 800240a:	2301      	movs	r3, #1
 800240c:	f245 5184 	movw	r1, #21892	; 0x5584
 8002410:	f000 fce0 	bl	8002dd4 <ov5640_write_reg>
 8002414:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d053      	beq.n	80024c4 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 800241c:	f04f 33ff 	mov.w	r3, #4294967295
 8002420:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002422:	e04f      	b.n	80024c4 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 8002424:	23ff      	movs	r3, #255	; 0xff
 8002426:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f103 0018 	add.w	r0, r3, #24
 800242e:	f107 020b 	add.w	r2, r7, #11
 8002432:	2301      	movs	r3, #1
 8002434:	f245 0101 	movw	r1, #20481	; 0x5001
 8002438:	f000 fccc 	bl	8002dd4 <ov5640_write_reg>
 800243c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10c      	bne.n	800245e <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 8002444:	2340      	movs	r3, #64	; 0x40
 8002446:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f103 0018 	add.w	r0, r3, #24
 800244e:	f107 020b 	add.w	r2, r7, #11
 8002452:	2301      	movs	r3, #1
 8002454:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002458:	f000 fcbc 	bl	8002dd4 <ov5640_write_reg>
 800245c:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d031      	beq.n	80024c8 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 8002464:	f04f 33ff 	mov.w	r3, #4294967295
 8002468:	60fb      	str	r3, [r7, #12]
      }
      break;
 800246a:	e02d      	b.n	80024c8 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 800246c:	237f      	movs	r3, #127	; 0x7f
 800246e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f103 0018 	add.w	r0, r3, #24
 8002476:	f107 020b 	add.w	r2, r7, #11
 800247a:	2301      	movs	r3, #1
 800247c:	f245 0101 	movw	r1, #20481	; 0x5001
 8002480:	f000 fca8 	bl	8002dd4 <ov5640_write_reg>
 8002484:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10c      	bne.n	80024a6 <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 800248c:	2300      	movs	r3, #0
 800248e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f103 0018 	add.w	r0, r3, #24
 8002496:	f107 020b 	add.w	r2, r7, #11
 800249a:	2301      	movs	r3, #1
 800249c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80024a0:	f000 fc98 	bl	8002dd4 <ov5640_write_reg>
 80024a4:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00f      	beq.n	80024cc <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 80024ac:	f04f 33ff 	mov.w	r3, #4294967295
 80024b0:	60fb      	str	r3, [r7, #12]
      }

      break;
 80024b2:	e00b      	b.n	80024cc <OV5640_SetColorEffect+0x3f4>
      break;
 80024b4:	bf00      	nop
 80024b6:	e00a      	b.n	80024ce <OV5640_SetColorEffect+0x3f6>
      break;
 80024b8:	bf00      	nop
 80024ba:	e008      	b.n	80024ce <OV5640_SetColorEffect+0x3f6>
      break;
 80024bc:	bf00      	nop
 80024be:	e006      	b.n	80024ce <OV5640_SetColorEffect+0x3f6>
      break;
 80024c0:	bf00      	nop
 80024c2:	e004      	b.n	80024ce <OV5640_SetColorEffect+0x3f6>
      break;
 80024c4:	bf00      	nop
 80024c6:	e002      	b.n	80024ce <OV5640_SetColorEffect+0x3f6>
      break;
 80024c8:	bf00      	nop
 80024ca:	e000      	b.n	80024ce <OV5640_SetColorEffect+0x3f6>
      break;
 80024cc:	bf00      	nop
  }

  return ret;
 80024ce:	68fb      	ldr	r3, [r7, #12]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 80024e2:	4a34      	ldr	r2, [pc, #208]	; (80025b4 <OV5640_SetBrightness+0xdc>)
 80024e4:	f107 0310 	add.w	r3, r7, #16
 80024e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80024ea:	c303      	stmia	r3!, {r0, r1}
 80024ec:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80024ee:	23ff      	movs	r3, #255	; 0xff
 80024f0:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f103 0018 	add.w	r0, r3, #24
 80024f8:	f107 020f 	add.w	r2, r7, #15
 80024fc:	2301      	movs	r3, #1
 80024fe:	f245 0101 	movw	r1, #20481	; 0x5001
 8002502:	f000 fc67 	bl	8002dd4 <ov5640_write_reg>
 8002506:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d111      	bne.n	8002532 <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	3304      	adds	r3, #4
 8002512:	3320      	adds	r3, #32
 8002514:	443b      	add	r3, r7
 8002516:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800251a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f103 0018 	add.w	r0, r3, #24
 8002522:	f107 020f 	add.w	r2, r7, #15
 8002526:	2301      	movs	r3, #1
 8002528:	f245 5187 	movw	r1, #21895	; 0x5587
 800252c:	f000 fc52 	bl	8002dd4 <ov5640_write_reg>
 8002530:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10c      	bne.n	8002552 <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 8002538:	2304      	movs	r3, #4
 800253a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f103 0018 	add.w	r0, r3, #24
 8002542:	f107 020f 	add.w	r2, r7, #15
 8002546:	2301      	movs	r3, #1
 8002548:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800254c:	f000 fc42 	bl	8002dd4 <ov5640_write_reg>
 8002550:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d127      	bne.n	80025a8 <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	da12      	bge.n	8002584 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f103 0018 	add.w	r0, r3, #24
 8002568:	f107 020f 	add.w	r2, r7, #15
 800256c:	2301      	movs	r3, #1
 800256e:	f245 5188 	movw	r1, #21896	; 0x5588
 8002572:	f000 fc2f 	bl	8002dd4 <ov5640_write_reg>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d015      	beq.n	80025a8 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 800257c:	f04f 33ff 	mov.w	r3, #4294967295
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	e011      	b.n	80025a8 <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 8002584:	2309      	movs	r3, #9
 8002586:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f103 0018 	add.w	r0, r3, #24
 800258e:	f107 020f 	add.w	r2, r7, #15
 8002592:	2301      	movs	r3, #1
 8002594:	f245 5188 	movw	r1, #21896	; 0x5588
 8002598:	f000 fc1c 	bl	8002dd4 <ov5640_write_reg>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295
 80025a6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 80025a8:	69fb      	ldr	r3, [r7, #28]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3720      	adds	r7, #32
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	080101b4 	.word	0x080101b4

080025b8 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80025c2:	4a30      	ldr	r2, [pc, #192]	; (8002684 <OV5640_SetSaturation+0xcc>)
 80025c4:	f107 0310 	add.w	r3, r7, #16
 80025c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80025ca:	c303      	stmia	r3!, {r0, r1}
 80025cc:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80025ce:	23ff      	movs	r3, #255	; 0xff
 80025d0:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f103 0018 	add.w	r0, r3, #24
 80025d8:	f107 020f 	add.w	r2, r7, #15
 80025dc:	2301      	movs	r3, #1
 80025de:	f245 0101 	movw	r1, #20481	; 0x5001
 80025e2:	f000 fbf7 	bl	8002dd4 <ov5640_write_reg>
 80025e6:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d111      	bne.n	8002612 <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	3304      	adds	r3, #4
 80025f2:	3320      	adds	r3, #32
 80025f4:	443b      	add	r3, r7
 80025f6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80025fa:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f103 0018 	add.w	r0, r3, #24
 8002602:	f107 020f 	add.w	r2, r7, #15
 8002606:	2301      	movs	r3, #1
 8002608:	f245 5183 	movw	r1, #21891	; 0x5583
 800260c:	f000 fbe2 	bl	8002dd4 <ov5640_write_reg>
 8002610:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10a      	bne.n	800262e <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f103 0018 	add.w	r0, r3, #24
 800261e:	f107 020f 	add.w	r2, r7, #15
 8002622:	2301      	movs	r3, #1
 8002624:	f245 5184 	movw	r1, #21892	; 0x5584
 8002628:	f000 fbd4 	bl	8002dd4 <ov5640_write_reg>
 800262c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10c      	bne.n	800264e <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 8002634:	2302      	movs	r3, #2
 8002636:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f103 0018 	add.w	r0, r3, #24
 800263e:	f107 020f 	add.w	r2, r7, #15
 8002642:	2301      	movs	r3, #1
 8002644:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002648:	f000 fbc4 	bl	8002dd4 <ov5640_write_reg>
 800264c:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10c      	bne.n	800266e <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 8002654:	2341      	movs	r3, #65	; 0x41
 8002656:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f103 0018 	add.w	r0, r3, #24
 800265e:	f107 020f 	add.w	r2, r7, #15
 8002662:	2301      	movs	r3, #1
 8002664:	f245 5188 	movw	r1, #21896	; 0x5588
 8002668:	f000 fbb4 	bl	8002dd4 <ov5640_write_reg>
 800266c:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
 8002678:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800267a:	69fb      	ldr	r3, [r7, #28]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3720      	adds	r7, #32
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	080101c0 	.word	0x080101c0

08002688 <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8002692:	4a30      	ldr	r2, [pc, #192]	; (8002754 <OV5640_SetContrast+0xcc>)
 8002694:	f107 0310 	add.w	r3, r7, #16
 8002698:	ca07      	ldmia	r2, {r0, r1, r2}
 800269a:	c303      	stmia	r3!, {r0, r1}
 800269c:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800269e:	23ff      	movs	r3, #255	; 0xff
 80026a0:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f103 0018 	add.w	r0, r3, #24
 80026a8:	f107 020f 	add.w	r2, r7, #15
 80026ac:	2301      	movs	r3, #1
 80026ae:	f245 0101 	movw	r1, #20481	; 0x5001
 80026b2:	f000 fb8f 	bl	8002dd4 <ov5640_write_reg>
 80026b6:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10c      	bne.n	80026d8 <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 80026be:	2304      	movs	r3, #4
 80026c0:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f103 0018 	add.w	r0, r3, #24
 80026c8:	f107 020f 	add.w	r2, r7, #15
 80026cc:	2301      	movs	r3, #1
 80026ce:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80026d2:	f000 fb7f 	bl	8002dd4 <ov5640_write_reg>
 80026d6:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d111      	bne.n	8002702 <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	3304      	adds	r3, #4
 80026e2:	3320      	adds	r3, #32
 80026e4:	443b      	add	r3, r7
 80026e6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80026ea:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f103 0018 	add.w	r0, r3, #24
 80026f2:	f107 020f 	add.w	r2, r7, #15
 80026f6:	2301      	movs	r3, #1
 80026f8:	f245 5186 	movw	r1, #21894	; 0x5586
 80026fc:	f000 fb6a 	bl	8002dd4 <ov5640_write_reg>
 8002700:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10a      	bne.n	800271e <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f103 0018 	add.w	r0, r3, #24
 800270e:	f107 020f 	add.w	r2, r7, #15
 8002712:	2301      	movs	r3, #1
 8002714:	f245 5185 	movw	r1, #21893	; 0x5585
 8002718:	f000 fb5c 	bl	8002dd4 <ov5640_write_reg>
 800271c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10c      	bne.n	800273e <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 8002724:	2341      	movs	r3, #65	; 0x41
 8002726:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f103 0018 	add.w	r0, r3, #24
 800272e:	f107 020f 	add.w	r2, r7, #15
 8002732:	2301      	movs	r3, #1
 8002734:	f245 5188 	movw	r1, #21896	; 0x5588
 8002738:	f000 fb4c 	bl	8002dd4 <ov5640_write_reg>
 800273c:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 8002744:	f04f 33ff 	mov.w	r3, #4294967295
 8002748:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800274a:	69fb      	ldr	r3, [r7, #28]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	080101cc 	.word	0x080101cc

08002758 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08e      	sub	sp, #56	; 0x38
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8002762:	4a3c      	ldr	r2, [pc, #240]	; (8002854 <OV5640_SetHueDegree+0xfc>)
 8002764:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002768:	ca07      	ldmia	r2, {r0, r1, r2}
 800276a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 800276e:	4a3a      	ldr	r2, [pc, #232]	; (8002858 <OV5640_SetHueDegree+0x100>)
 8002770:	f107 031c 	add.w	r3, r7, #28
 8002774:	ca07      	ldmia	r2, {r0, r1, r2}
 8002776:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 800277a:	4a38      	ldr	r2, [pc, #224]	; (800285c <OV5640_SetHueDegree+0x104>)
 800277c:	f107 0310 	add.w	r3, r7, #16
 8002780:	ca07      	ldmia	r2, {r0, r1, r2}
 8002782:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 8002786:	23ff      	movs	r3, #255	; 0xff
 8002788:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f103 0018 	add.w	r0, r3, #24
 8002790:	f107 020f 	add.w	r2, r7, #15
 8002794:	2301      	movs	r3, #1
 8002796:	f245 0101 	movw	r1, #20481	; 0x5001
 800279a:	f000 fb1b 	bl	8002dd4 <ov5640_write_reg>
 800279e:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 80027a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10c      	bne.n	80027c0 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 80027a6:	2301      	movs	r3, #1
 80027a8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f103 0018 	add.w	r0, r3, #24
 80027b0:	f107 020f 	add.w	r2, r7, #15
 80027b4:	2301      	movs	r3, #1
 80027b6:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80027ba:	f000 fb0b 	bl	8002dd4 <ov5640_write_reg>
 80027be:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 80027c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d111      	bne.n	80027ea <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	3306      	adds	r3, #6
 80027ca:	3338      	adds	r3, #56	; 0x38
 80027cc:	443b      	add	r3, r7
 80027ce:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80027d2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f103 0018 	add.w	r0, r3, #24
 80027da:	f107 020f 	add.w	r2, r7, #15
 80027de:	2301      	movs	r3, #1
 80027e0:	f245 5181 	movw	r1, #21889	; 0x5581
 80027e4:	f000 faf6 	bl	8002dd4 <ov5640_write_reg>
 80027e8:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 80027ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d111      	bne.n	8002814 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	3306      	adds	r3, #6
 80027f4:	3338      	adds	r3, #56	; 0x38
 80027f6:	443b      	add	r3, r7
 80027f8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80027fc:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f103 0018 	add.w	r0, r3, #24
 8002804:	f107 020f 	add.w	r2, r7, #15
 8002808:	2301      	movs	r3, #1
 800280a:	f245 5182 	movw	r1, #21890	; 0x5582
 800280e:	f000 fae1 	bl	8002dd4 <ov5640_write_reg>
 8002812:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002816:	2b00      	cmp	r3, #0
 8002818:	d111      	bne.n	800283e <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	3306      	adds	r3, #6
 800281e:	3338      	adds	r3, #56	; 0x38
 8002820:	443b      	add	r3, r7
 8002822:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002826:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f103 0018 	add.w	r0, r3, #24
 800282e:	f107 020f 	add.w	r2, r7, #15
 8002832:	2301      	movs	r3, #1
 8002834:	f245 5188 	movw	r1, #21896	; 0x5588
 8002838:	f000 facc 	bl	8002dd4 <ov5640_write_reg>
 800283c:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 800283e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 8002844:	f04f 33ff 	mov.w	r3, #4294967295
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 800284a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800284c:	4618      	mov	r0, r3
 800284e:	3738      	adds	r7, #56	; 0x38
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	080101d8 	.word	0x080101d8
 8002858:	080101e4 	.word	0x080101e4
 800285c:	080101f0 	.word	0x080101f0

08002860 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f103 0018 	add.w	r0, r3, #24
 8002874:	f107 020b 	add.w	r2, r7, #11
 8002878:	2301      	movs	r3, #1
 800287a:	f643 0120 	movw	r1, #14368	; 0x3820
 800287e:	f000 fa92 	bl	8002da6 <ov5640_read_reg>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8002888:	f04f 33ff 	mov.w	r3, #4294967295
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	e0cb      	b.n	8002a28 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 8002890:	7afb      	ldrb	r3, [r7, #11]
 8002892:	f023 0306 	bic.w	r3, r3, #6
 8002896:	b2db      	uxtb	r3, r3
 8002898:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f103 0018 	add.w	r0, r3, #24
 80028a0:	f107 020a 	add.w	r2, r7, #10
 80028a4:	2301      	movs	r3, #1
 80028a6:	f643 0121 	movw	r1, #14369	; 0x3821
 80028aa:	f000 fa7c 	bl	8002da6 <ov5640_read_reg>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	e0b5      	b.n	8002a28 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 80028c0:	7abb      	ldrb	r3, [r7, #10]
 80028c2:	f023 0306 	bic.w	r3, r3, #6
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d056      	beq.n	800297e <OV5640_MirrorFlipConfig+0x11e>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d87f      	bhi.n	80029d6 <OV5640_MirrorFlipConfig+0x176>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d029      	beq.n	8002930 <OV5640_MirrorFlipConfig+0xd0>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d179      	bne.n	80029d6 <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f103 0018 	add.w	r0, r3, #24
 80028e8:	f107 020b 	add.w	r2, r7, #11
 80028ec:	2301      	movs	r3, #1
 80028ee:	f643 0120 	movw	r1, #14368	; 0x3820
 80028f2:	f000 fa6f 	bl	8002dd4 <ov5640_write_reg>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 80028fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002900:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002902:	e08a      	b.n	8002a1a <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8002904:	7abb      	ldrb	r3, [r7, #10]
 8002906:	f043 0306 	orr.w	r3, r3, #6
 800290a:	b2db      	uxtb	r3, r3
 800290c:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f103 0018 	add.w	r0, r3, #24
 8002914:	f107 020a 	add.w	r2, r7, #10
 8002918:	2301      	movs	r3, #1
 800291a:	f643 0121 	movw	r1, #14369	; 0x3821
 800291e:	f000 fa59 	bl	8002dd4 <ov5640_write_reg>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d078      	beq.n	8002a1a <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8002928:	f04f 33ff 	mov.w	r3, #4294967295
 800292c:	60fb      	str	r3, [r7, #12]
          break;
 800292e:	e074      	b.n	8002a1a <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8002930:	7afb      	ldrb	r3, [r7, #11]
 8002932:	f043 0306 	orr.w	r3, r3, #6
 8002936:	b2db      	uxtb	r3, r3
 8002938:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f103 0018 	add.w	r0, r3, #24
 8002940:	f107 020b 	add.w	r2, r7, #11
 8002944:	2301      	movs	r3, #1
 8002946:	f643 0120 	movw	r1, #14368	; 0x3820
 800294a:	f000 fa43 	bl	8002dd4 <ov5640_write_reg>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8002954:	f04f 33ff 	mov.w	r3, #4294967295
 8002958:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 800295a:	e060      	b.n	8002a1e <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f103 0018 	add.w	r0, r3, #24
 8002962:	f107 020a 	add.w	r2, r7, #10
 8002966:	2301      	movs	r3, #1
 8002968:	f643 0121 	movw	r1, #14369	; 0x3821
 800296c:	f000 fa32 	bl	8002dd4 <ov5640_write_reg>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d053      	beq.n	8002a1e <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8002976:	f04f 33ff 	mov.w	r3, #4294967295
 800297a:	60fb      	str	r3, [r7, #12]
          break;
 800297c:	e04f      	b.n	8002a1e <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 800297e:	7afb      	ldrb	r3, [r7, #11]
 8002980:	f043 0306 	orr.w	r3, r3, #6
 8002984:	b2db      	uxtb	r3, r3
 8002986:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f103 0018 	add.w	r0, r3, #24
 800298e:	f107 020b 	add.w	r2, r7, #11
 8002992:	2301      	movs	r3, #1
 8002994:	f643 0120 	movw	r1, #14368	; 0x3820
 8002998:	f000 fa1c 	bl	8002dd4 <ov5640_write_reg>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 80029a2:	f04f 33ff 	mov.w	r3, #4294967295
 80029a6:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80029a8:	e03b      	b.n	8002a22 <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 80029aa:	7abb      	ldrb	r3, [r7, #10]
 80029ac:	f043 0306 	orr.w	r3, r3, #6
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f103 0018 	add.w	r0, r3, #24
 80029ba:	f107 020a 	add.w	r2, r7, #10
 80029be:	2301      	movs	r3, #1
 80029c0:	f643 0121 	movw	r1, #14369	; 0x3821
 80029c4:	f000 fa06 	bl	8002dd4 <ov5640_write_reg>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d029      	beq.n	8002a22 <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 80029ce:	f04f 33ff 	mov.w	r3, #4294967295
 80029d2:	60fb      	str	r3, [r7, #12]
          break;
 80029d4:	e025      	b.n	8002a22 <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f103 0018 	add.w	r0, r3, #24
 80029dc:	f107 020b 	add.w	r2, r7, #11
 80029e0:	2301      	movs	r3, #1
 80029e2:	f643 0120 	movw	r1, #14368	; 0x3820
 80029e6:	f000 f9f5 	bl	8002dd4 <ov5640_write_reg>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
 80029f4:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80029f6:	e016      	b.n	8002a26 <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f103 0018 	add.w	r0, r3, #24
 80029fe:	f107 020a 	add.w	r2, r7, #10
 8002a02:	2301      	movs	r3, #1
 8002a04:	f643 0121 	movw	r1, #14369	; 0x3821
 8002a08:	f000 f9e4 	bl	8002dd4 <ov5640_write_reg>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d009      	beq.n	8002a26 <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 8002a12:	f04f 33ff 	mov.w	r3, #4294967295
 8002a16:	60fb      	str	r3, [r7, #12]
          break;
 8002a18:	e005      	b.n	8002a26 <OV5640_MirrorFlipConfig+0x1c6>
          break;
 8002a1a:	bf00      	nop
 8002a1c:	e004      	b.n	8002a28 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002a1e:	bf00      	nop
 8002a20:	e002      	b.n	8002a28 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002a22:	bf00      	nop
 8002a24:	e000      	b.n	8002a28 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002a26:	bf00      	nop
      }
    }
  }

  return ret;
 8002a28:	68fb      	ldr	r3, [r7, #12]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b086      	sub	sp, #24
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8002a40:	f107 030c 	add.w	r3, r7, #12
 8002a44:	4619      	mov	r1, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff f8a2 	bl	8001b90 <OV5640_GetResolution>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	e04e      	b.n	8002af8 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2b44      	cmp	r3, #68	; 0x44
 8002a62:	d112      	bne.n	8002a8a <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 8002a64:	2310      	movs	r3, #16
 8002a66:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f103 0018 	add.w	r0, r3, #24
 8002a6e:	f107 020b 	add.w	r2, r7, #11
 8002a72:	2301      	movs	r3, #1
 8002a74:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002a78:	f000 f9ac 	bl	8002dd4 <ov5640_write_reg>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d03a      	beq.n	8002af8 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	e036      	b.n	8002af8 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d802      	bhi.n	8002a96 <OV5640_ZoomConfig+0x64>
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d103      	bne.n	8002a9c <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8002a94:	e00a      	b.n	8002aac <OV5640_ZoomConfig+0x7a>
      switch (res)
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d004      	beq.n	8002aa4 <OV5640_ZoomConfig+0x72>
          break;
 8002a9a:	e007      	b.n	8002aac <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	613b      	str	r3, [r7, #16]
          break;
 8002aa2:	e003      	b.n	8002aac <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	613b      	str	r3, [r7, #16]
          break;
 8002aaa:	bf00      	nop
      }

      tmp = 0x00;
 8002aac:	2300      	movs	r3, #0
 8002aae:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f103 0018 	add.w	r0, r3, #24
 8002ab6:	f107 020b 	add.w	r2, r7, #11
 8002aba:	2301      	movs	r3, #1
 8002abc:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002ac0:	f000 f988 	bl	8002dd4 <ov5640_write_reg>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	e012      	b.n	8002af8 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f103 0018 	add.w	r0, r3, #24
 8002ade:	f107 020b 	add.w	r2, r7, #11
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f245 6101 	movw	r1, #22017	; 0x5601
 8002ae8:	f000 f974 	bl	8002dd4 <ov5640_write_reg>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 8002af2:	f04f 33ff 	mov.w	r3, #4294967295
 8002af6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002af8:	697b      	ldr	r3, [r7, #20]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	f040 80ce 	bne.w	8002cb4 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f103 0018 	add.w	r0, r3, #24
 8002b1e:	f107 020b 	add.w	r2, r7, #11
 8002b22:	2301      	movs	r3, #1
 8002b24:	f243 0138 	movw	r1, #12344	; 0x3038
 8002b28:	f000 f954 	bl	8002dd4 <ov5640_write_reg>
 8002b2c:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f103 0018 	add.w	r0, r3, #24
 8002b3a:	f107 020b 	add.w	r2, r7, #11
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f243 0139 	movw	r1, #12345	; 0x3039
 8002b44:	f000 f946 	bl	8002dd4 <ov5640_write_reg>
 8002b48:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10c      	bne.n	8002b6a <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 8002b50:	237c      	movs	r3, #124	; 0x7c
 8002b52:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f103 0018 	add.w	r0, r3, #24
 8002b5a:	f107 020b 	add.w	r2, r7, #11
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002b64:	f000 f936 	bl	8002dd4 <ov5640_write_reg>
 8002b68:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10c      	bne.n	8002b8a <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 8002b70:	2301      	movs	r3, #1
 8002b72:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f103 0018 	add.w	r0, r3, #24
 8002b7a:	f107 020b 	add.w	r2, r7, #11
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f643 2108 	movw	r1, #14856	; 0x3a08
 8002b84:	f000 f926 	bl	8002dd4 <ov5640_write_reg>
 8002b88:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10c      	bne.n	8002baa <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 8002b90:	2327      	movs	r3, #39	; 0x27
 8002b92:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f103 0018 	add.w	r0, r3, #24
 8002b9a:	f107 020b 	add.w	r2, r7, #11
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f643 2109 	movw	r1, #14857	; 0x3a09
 8002ba4:	f000 f916 	bl	8002dd4 <ov5640_write_reg>
 8002ba8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10c      	bne.n	8002bca <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f103 0018 	add.w	r0, r3, #24
 8002bba:	f107 020b 	add.w	r2, r7, #11
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8002bc4:	f000 f906 	bl	8002dd4 <ov5640_write_reg>
 8002bc8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10c      	bne.n	8002bea <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 8002bd0:	23f6      	movs	r3, #246	; 0xf6
 8002bd2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f103 0018 	add.w	r0, r3, #24
 8002bda:	f107 020b 	add.w	r2, r7, #11
 8002bde:	2301      	movs	r3, #1
 8002be0:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8002be4:	f000 f8f6 	bl	8002dd4 <ov5640_write_reg>
 8002be8:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10c      	bne.n	8002c0a <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 8002bf0:	2304      	movs	r3, #4
 8002bf2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f103 0018 	add.w	r0, r3, #24
 8002bfa:	f107 020b 	add.w	r2, r7, #11
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8002c04:	f000 f8e6 	bl	8002dd4 <ov5640_write_reg>
 8002c08:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10a      	bne.n	8002c26 <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f103 0018 	add.w	r0, r3, #24
 8002c16:	f107 020b 	add.w	r2, r7, #11
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8002c20:	f000 f8d8 	bl	8002dd4 <ov5640_write_reg>
 8002c24:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10c      	bne.n	8002c46 <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 8002c2c:	230b      	movs	r3, #11
 8002c2e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f103 0018 	add.w	r0, r3, #24
 8002c36:	f107 020b 	add.w	r2, r7, #11
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f643 2102 	movw	r1, #14850	; 0x3a02
 8002c40:	f000 f8c8 	bl	8002dd4 <ov5640_write_reg>
 8002c44:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10c      	bne.n	8002c66 <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 8002c4c:	2388      	movs	r3, #136	; 0x88
 8002c4e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f103 0018 	add.w	r0, r3, #24
 8002c56:	f107 020b 	add.w	r2, r7, #11
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f643 2103 	movw	r1, #14851	; 0x3a03
 8002c60:	f000 f8b8 	bl	8002dd4 <ov5640_write_reg>
 8002c64:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10c      	bne.n	8002c86 <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 8002c6c:	230b      	movs	r3, #11
 8002c6e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f103 0018 	add.w	r0, r3, #24
 8002c76:	f107 020b 	add.w	r2, r7, #11
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	f643 2114 	movw	r1, #14868	; 0x3a14
 8002c80:	f000 f8a8 	bl	8002dd4 <ov5640_write_reg>
 8002c84:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10c      	bne.n	8002ca6 <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 8002c8c:	2388      	movs	r3, #136	; 0x88
 8002c8e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f103 0018 	add.w	r0, r3, #24
 8002c96:	f107 020b 	add.w	r2, r7, #11
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f643 2115 	movw	r1, #14869	; 0x3a15
 8002ca0:	f000 f898 	bl	8002dd4 <ov5640_write_reg>
 8002ca4:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d02b      	beq.n	8002d04 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 8002cac:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	e027      	b.n	8002d04 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f103 0018 	add.w	r0, r3, #24
 8002cba:	f107 020b 	add.w	r2, r7, #11
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002cc4:	f000 f86f 	bl	8002da6 <ov5640_read_reg>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	e016      	b.n	8002d04 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 8002cda:	7afb      	ldrb	r3, [r7, #11]
 8002cdc:	f023 0304 	bic.w	r3, r3, #4
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f103 0018 	add.w	r0, r3, #24
 8002cea:	f107 020b 	add.w	r2, r7, #11
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002cf4:	f000 f86e 	bl	8002dd4 <ov5640_write_reg>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002d02:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002d04:	68fb      	ldr	r3, [r7, #12]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	4798      	blx	r3
 8002d1e:	4603      	mov	r3, r0
 8002d20:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8002d22:	bf00      	nop
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	4798      	blx	r3
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d8f5      	bhi.n	8002d24 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d42:	b590      	push	{r4, r7, lr}
 8002d44:	b087      	sub	sp, #28
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	460b      	mov	r3, r1
 8002d50:	817b      	strh	r3, [r7, #10]
 8002d52:	4613      	mov	r3, r2
 8002d54:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	691c      	ldr	r4, [r3, #16]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	8918      	ldrh	r0, [r3, #8]
 8002d62:	893b      	ldrh	r3, [r7, #8]
 8002d64:	8979      	ldrh	r1, [r7, #10]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	47a0      	blx	r4
 8002d6a:	4603      	mov	r3, r0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	371c      	adds	r7, #28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd90      	pop	{r4, r7, pc}

08002d74 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	460b      	mov	r3, r1
 8002d82:	817b      	strh	r3, [r7, #10]
 8002d84:	4613      	mov	r3, r2
 8002d86:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	68dc      	ldr	r4, [r3, #12]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	8918      	ldrh	r0, [r3, #8]
 8002d94:	893b      	ldrh	r3, [r7, #8]
 8002d96:	8979      	ldrh	r1, [r7, #10]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	47a0      	blx	r4
 8002d9c:	4603      	mov	r3, r0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd90      	pop	{r4, r7, pc}

08002da6 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8002da6:	b590      	push	{r4, r7, lr}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	461a      	mov	r2, r3
 8002db2:	460b      	mov	r3, r1
 8002db4:	817b      	strh	r3, [r7, #10]
 8002db6:	4613      	mov	r3, r2
 8002db8:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	685c      	ldr	r4, [r3, #4]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6898      	ldr	r0, [r3, #8]
 8002dc2:	893b      	ldrh	r3, [r7, #8]
 8002dc4:	8979      	ldrh	r1, [r7, #10]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	47a0      	blx	r4
 8002dca:	4603      	mov	r3, r0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd90      	pop	{r4, r7, pc}

08002dd4 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8002dd4:	b590      	push	{r4, r7, lr}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	461a      	mov	r2, r3
 8002de0:	460b      	mov	r3, r1
 8002de2:	817b      	strh	r3, [r7, #10]
 8002de4:	4613      	mov	r3, r2
 8002de6:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681c      	ldr	r4, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6898      	ldr	r0, [r3, #8]
 8002df0:	893b      	ldrh	r3, [r7, #8]
 8002df2:	8979      	ldrh	r1, [r7, #10]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	47a0      	blx	r4
 8002df8:	4603      	mov	r3, r0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd90      	pop	{r4, r7, pc}
	...

08002e04 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002e0c:	4a07      	ldr	r2, [pc, #28]	; (8002e2c <RetargetInit+0x28>)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002e12:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <RetargetInit+0x2c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6898      	ldr	r0, [r3, #8]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	f00c f957 	bl	800f0d0 <setvbuf>
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	240df4b0 	.word	0x240df4b0
 8002e30:	24000054 	.word	0x24000054

08002e34 <_isatty>:

int _isatty(int fd) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	db04      	blt.n	8002e4c <_isatty+0x18>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	dc01      	bgt.n	8002e4c <_isatty+0x18>
    return 1;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e005      	b.n	8002e58 <_isatty+0x24>

  errno = EBADF;
 8002e4c:	f00c f8f6 	bl	800f03c <__errno>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2209      	movs	r2, #9
 8002e54:	601a      	str	r2, [r3, #0]
  return 0;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <_write>:

int _write(int fd, char* ptr, int len) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d002      	beq.n	8002e78 <_write+0x18>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d111      	bne.n	8002e9c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002e78:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <_write+0x54>)
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	f04f 33ff 	mov.w	r3, #4294967295
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	f00a f9c1 	bl	800d20c <HAL_UART_Transmit>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <_write+0x38>
      return len;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	e008      	b.n	8002eaa <_write+0x4a>
    else
      return EIO;
 8002e98:	2305      	movs	r3, #5
 8002e9a:	e006      	b.n	8002eaa <_write+0x4a>
  }
  errno = EBADF;
 8002e9c:	f00c f8ce 	bl	800f03c <__errno>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2209      	movs	r2, #9
 8002ea4:	601a      	str	r2, [r3, #0]
  return -1;
 8002ea6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	240df4b0 	.word	0x240df4b0

08002eb8 <_close>:

int _close(int fd) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	db04      	blt.n	8002ed0 <_close+0x18>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	dc01      	bgt.n	8002ed0 <_close+0x18>
    return 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e006      	b.n	8002ede <_close+0x26>

  errno = EBADF;
 8002ed0:	f00c f8b4 	bl	800f03c <__errno>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2209      	movs	r2, #9
 8002ed8:	601a      	str	r2, [r3, #0]
  return -1;
 8002eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <_read>:

int _read(int fd, char* ptr, int len) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d110      	bne.n	8002f1c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <_read+0x4c>)
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295
 8002f02:	2201      	movs	r2, #1
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	f00a fa0f 	bl	800d328 <HAL_UART_Receive>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <_read+0x30>
      return 1;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e008      	b.n	8002f2a <_read+0x42>
    else
      return EIO;
 8002f18:	2305      	movs	r3, #5
 8002f1a:	e006      	b.n	8002f2a <_read+0x42>
  }
  errno = EBADF;
 8002f1c:	f00c f88e 	bl	800f03c <__errno>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2209      	movs	r2, #9
 8002f24:	601a      	str	r2, [r3, #0]
  return -1;
 8002f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	240df4b0 	.word	0x240df4b0

08002f38 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	db08      	blt.n	8002f5a <_fstat+0x22>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	dc05      	bgt.n	8002f5a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f54:	605a      	str	r2, [r3, #4]
    return 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e005      	b.n	8002f66 <_fstat+0x2e>
  }

  errno = EBADF;
 8002f5a:	f00c f86f 	bl	800f03c <__errno>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2209      	movs	r2, #9
 8002f62:	601a      	str	r2, [r3, #0]
  return 0;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
	...

08002f70 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <MX_RTC_Init+0x4c>)
 8002f76:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <MX_RTC_Init+0x50>)
 8002f78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <MX_RTC_Init+0x4c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002f80:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <MX_RTC_Init+0x4c>)
 8002f82:	227f      	movs	r2, #127	; 0x7f
 8002f84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <MX_RTC_Init+0x4c>)
 8002f88:	22ff      	movs	r2, #255	; 0xff
 8002f8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <MX_RTC_Init+0x4c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <MX_RTC_Init+0x4c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002f98:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <MX_RTC_Init+0x4c>)
 8002f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f9e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <MX_RTC_Init+0x4c>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002fa6:	4805      	ldr	r0, [pc, #20]	; (8002fbc <MX_RTC_Init+0x4c>)
 8002fa8:	f009 ffc2 	bl	800cf30 <HAL_RTC_Init>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002fb2:	f7fe fa7f 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	240df4b4 	.word	0x240df4b4
 8002fc0:	58004000 	.word	0x58004000

08002fc4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b0b2      	sub	sp, #200	; 0xc8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fcc:	f107 0308 	add.w	r3, r7, #8
 8002fd0:	22c0      	movs	r2, #192	; 0xc0
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f00c f85b 	bl	800f090 <memset>
  if(rtcHandle->Instance==RTC)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a10      	ldr	r2, [pc, #64]	; (8003020 <HAL_RTC_MspInit+0x5c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d119      	bne.n	8003018 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002fe4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ff4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ff8:	f107 0308 	add.w	r3, r7, #8
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f008 f9b7 	bl	800b370 <HAL_RCCEx_PeriphCLKConfig>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003008:	f7fe fa54 	bl	80014b4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_RTC_MspInit+0x60>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	4a04      	ldr	r2, [pc, #16]	; (8003024 <HAL_RTC_MspInit+0x60>)
 8003012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003016:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003018:	bf00      	nop
 800301a:	37c8      	adds	r7, #200	; 0xc8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	58004000 	.word	0x58004000
 8003024:	58024400 	.word	0x58024400

08003028 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8003032:	4b16      	ldr	r3, [pc, #88]	; (800308c <BSP_I2C4_Init+0x64>)
 8003034:	4a16      	ldr	r2, [pc, #88]	; (8003090 <BSP_I2C4_Init+0x68>)
 8003036:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8003038:	4b16      	ldr	r3, [pc, #88]	; (8003094 <BSP_I2C4_Init+0x6c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d11f      	bne.n	8003080 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8003040:	4b14      	ldr	r3, [pc, #80]	; (8003094 <BSP_I2C4_Init+0x6c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3301      	adds	r3, #1
 8003046:	4a13      	ldr	r2, [pc, #76]	; (8003094 <BSP_I2C4_Init+0x6c>)
 8003048:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800304a:	4810      	ldr	r0, [pc, #64]	; (800308c <BSP_I2C4_Init+0x64>)
 800304c:	f006 fa2a 	bl	80094a4 <HAL_I2C_GetState>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d114      	bne.n	8003080 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8003056:	480d      	ldr	r0, [pc, #52]	; (800308c <BSP_I2C4_Init+0x64>)
 8003058:	f000 fb60 	bl	800371c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800305c:	f008 f972 	bl	800b344 <HAL_RCC_GetPCLK2Freq>
 8003060:	4603      	mov	r3, r0
 8003062:	490d      	ldr	r1, [pc, #52]	; (8003098 <BSP_I2C4_Init+0x70>)
 8003064:	4618      	mov	r0, r3
 8003066:	f000 f8e3 	bl	8003230 <I2C_GetTiming>
 800306a:	4603      	mov	r3, r0
 800306c:	4619      	mov	r1, r3
 800306e:	4807      	ldr	r0, [pc, #28]	; (800308c <BSP_I2C4_Init+0x64>)
 8003070:	f000 f838 	bl	80030e4 <MX_I2C4_Init>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800307a:	f06f 0307 	mvn.w	r3, #7
 800307e:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8003080:	687b      	ldr	r3, [r7, #4]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	240dfee4 	.word	0x240dfee4
 8003090:	58001c00 	.word	0x58001c00
 8003094:	240df4dc 	.word	0x240df4dc
 8003098:	000186a0 	.word	0x000186a0

0800309c <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 80030a6:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <BSP_I2C4_DeInit+0x40>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <BSP_I2C4_DeInit+0x40>)
 80030ae:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 80030b0:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <BSP_I2C4_DeInit+0x40>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10b      	bne.n	80030d0 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 80030b8:	4809      	ldr	r0, [pc, #36]	; (80030e0 <BSP_I2C4_DeInit+0x44>)
 80030ba:	f000 fb9b 	bl	80037f4 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80030be:	4808      	ldr	r0, [pc, #32]	; (80030e0 <BSP_I2C4_DeInit+0x44>)
 80030c0:	f005 ff7e 	bl	8008fc0 <HAL_I2C_DeInit>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80030ca:	f06f 0307 	mvn.w	r3, #7
 80030ce:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80030d0:	687b      	ldr	r3, [r7, #4]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	240df4dc 	.word	0x240df4dc
 80030e0:	240dfee4 	.word	0x240dfee4

080030e4 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f005 febc 	bl	8008ea0 <HAL_I2C_Init>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
 8003132:	e014      	b.n	800315e <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8003134:	2300      	movs	r3, #0
 8003136:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f006 fc84 	bl	8009a48 <HAL_I2CEx_ConfigAnalogFilter>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
 800314a:	e008      	b.n	800315e <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800314c:	2100      	movs	r1, #0
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f006 fcc5 	bl	8009ade <HAL_I2CEx_ConfigDigitalFilter>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800315e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af02      	add	r7, sp, #8
 800316e:	60ba      	str	r2, [r7, #8]
 8003170:	461a      	mov	r2, r3
 8003172:	4603      	mov	r3, r0
 8003174:	81fb      	strh	r3, [r7, #14]
 8003176:	460b      	mov	r3, r1
 8003178:	81bb      	strh	r3, [r7, #12]
 800317a:	4613      	mov	r3, r2
 800317c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 800317e:	89b9      	ldrh	r1, [r7, #12]
 8003180:	89f8      	ldrh	r0, [r7, #14]
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2202      	movs	r2, #2
 800318a:	f000 fb57 	bl	800383c <I2C4_WriteReg>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d102      	bne.n	800319a <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	e00c      	b.n	80031b4 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800319a:	4809      	ldr	r0, [pc, #36]	; (80031c0 <BSP_I2C4_WriteReg16+0x58>)
 800319c:	f006 f990 	bl	80094c0 <HAL_I2C_GetError>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d103      	bne.n	80031ae <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80031a6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	e002      	b.n	80031b4 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80031ae:	f06f 0303 	mvn.w	r3, #3
 80031b2:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80031b4:	697b      	ldr	r3, [r7, #20]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	240dfee4 	.word	0x240dfee4

080031c4 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60ba      	str	r2, [r7, #8]
 80031cc:	461a      	mov	r2, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	81fb      	strh	r3, [r7, #14]
 80031d2:	460b      	mov	r3, r1
 80031d4:	81bb      	strh	r3, [r7, #12]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80031da:	89b9      	ldrh	r1, [r7, #12]
 80031dc:	89f8      	ldrh	r0, [r7, #14]
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2202      	movs	r2, #2
 80031e6:	f000 fb4f 	bl	8003888 <I2C4_ReadReg>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d102      	bne.n	80031f6 <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	e00c      	b.n	8003210 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80031f6:	4809      	ldr	r0, [pc, #36]	; (800321c <BSP_I2C4_ReadReg16+0x58>)
 80031f8:	f006 f962 	bl	80094c0 <HAL_I2C_GetError>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d103      	bne.n	800320a <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003202:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	e002      	b.n	8003210 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800320a:	f06f 0303 	mvn.w	r3, #3
 800320e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003210:	697b      	ldr	r3, [r7, #20]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	240dfee4 	.word	0x240dfee4

08003220 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8003224:	f000 ffd4 	bl	80041d0 <HAL_GetTick>
 8003228:	4603      	mov	r3, r0
}
 800322a:	4618      	mov	r0, r3
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d06b      	beq.n	800331c <I2C_GetTiming+0xec>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d068      	beq.n	800331c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	e060      	b.n	8003312 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003250:	4a35      	ldr	r2, [pc, #212]	; (8003328 <I2C_GetTiming+0xf8>)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	212c      	movs	r1, #44	; 0x2c
 8003256:	fb01 f303 	mul.w	r3, r1, r3
 800325a:	4413      	add	r3, r2
 800325c:	3304      	adds	r3, #4
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d352      	bcc.n	800330c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8003266:	4a30      	ldr	r2, [pc, #192]	; (8003328 <I2C_GetTiming+0xf8>)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	212c      	movs	r1, #44	; 0x2c
 800326c:	fb01 f303 	mul.w	r3, r1, r3
 8003270:	4413      	add	r3, r2
 8003272:	3308      	adds	r3, #8
 8003274:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d847      	bhi.n	800330c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800327c:	6939      	ldr	r1, [r7, #16]
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f856 	bl	8003330 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8003284:	6939      	ldr	r1, [r7, #16]
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f940 	bl	800350c <I2C_Compute_SCLL_SCLH>
 800328c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b7f      	cmp	r3, #127	; 0x7f
 8003292:	d842      	bhi.n	800331a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003294:	4925      	ldr	r1, [pc, #148]	; (800332c <I2C_GetTiming+0xfc>)
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80032a6:	4821      	ldr	r0, [pc, #132]	; (800332c <I2C_GetTiming+0xfc>)
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4403      	add	r3, r0
 80032b4:	3304      	adds	r3, #4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	051b      	lsls	r3, r3, #20
 80032ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80032be:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80032c0:	481a      	ldr	r0, [pc, #104]	; (800332c <I2C_GetTiming+0xfc>)
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4403      	add	r3, r0
 80032ce:	3308      	adds	r3, #8
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	041b      	lsls	r3, r3, #16
 80032d4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80032d8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80032da:	4814      	ldr	r0, [pc, #80]	; (800332c <I2C_GetTiming+0xfc>)
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4403      	add	r3, r0
 80032e8:	330c      	adds	r3, #12
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80032f0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80032f2:	480e      	ldr	r0, [pc, #56]	; (800332c <I2C_GetTiming+0xfc>)
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4403      	add	r3, r0
 8003300:	3310      	adds	r3, #16
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003306:	430b      	orrs	r3, r1
 8003308:	617b      	str	r3, [r7, #20]
        }
        break;
 800330a:	e006      	b.n	800331a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	3301      	adds	r3, #1
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d99b      	bls.n	8003250 <I2C_GetTiming+0x20>
 8003318:	e000      	b.n	800331c <I2C_GetTiming+0xec>
        break;
 800331a:	bf00      	nop
      }
    }
  }

  return ret;
 800331c:	697b      	ldr	r3, [r7, #20]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	080106f8 	.word	0x080106f8
 800332c:	240df4e0 	.word	0x240df4e0

08003330 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003330:	b480      	push	{r7}
 8003332:	b08f      	sub	sp, #60	; 0x3c
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800333a:	2310      	movs	r3, #16
 800333c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	085a      	lsrs	r2, r3, #1
 8003342:	4b6e      	ldr	r3, [pc, #440]	; (80034fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8003344:	4413      	add	r3, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	fbb3 f3f2 	udiv	r3, r3, r2
 800334c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800334e:	2332      	movs	r3, #50	; 0x32
 8003350:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8003352:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003356:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003358:	4a69      	ldr	r2, [pc, #420]	; (8003500 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	212c      	movs	r1, #44	; 0x2c
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	4413      	add	r3, r2
 8003364:	3324      	adds	r3, #36	; 0x24
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	4a65      	ldr	r2, [pc, #404]	; (8003500 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	212c      	movs	r1, #44	; 0x2c
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	330c      	adds	r3, #12
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800337c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800337e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003380:	495f      	ldr	r1, [pc, #380]	; (8003500 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	202c      	movs	r0, #44	; 0x2c
 8003386:	fb00 f303 	mul.w	r3, r0, r3
 800338a:	440b      	add	r3, r1
 800338c:	3328      	adds	r3, #40	; 0x28
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3303      	adds	r3, #3
 8003392:	69f9      	ldr	r1, [r7, #28]
 8003394:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800339c:	4a58      	ldr	r2, [pc, #352]	; (8003500 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	3310      	adds	r3, #16
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	4a54      	ldr	r2, [pc, #336]	; (8003500 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	212c      	movs	r1, #44	; 0x2c
 80033b4:	fb01 f303 	mul.w	r3, r1, r3
 80033b8:	4413      	add	r3, r2
 80033ba:	3320      	adds	r3, #32
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80033c0:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80033c2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80033c4:	494e      	ldr	r1, [pc, #312]	; (8003500 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	202c      	movs	r0, #44	; 0x2c
 80033ca:	fb00 f303 	mul.w	r3, r0, r3
 80033ce:	440b      	add	r3, r1
 80033d0:	3328      	adds	r3, #40	; 0x28
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3304      	adds	r3, #4
 80033d6:	69f9      	ldr	r1, [r7, #28]
 80033d8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80033e0:	4a47      	ldr	r2, [pc, #284]	; (8003500 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	212c      	movs	r1, #44	; 0x2c
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	3320      	adds	r3, #32
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	4a43      	ldr	r2, [pc, #268]	; (8003500 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	212c      	movs	r1, #44	; 0x2c
 80033f8:	fb01 f303 	mul.w	r3, r1, r3
 80033fc:	4413      	add	r3, r2
 80033fe:	3314      	adds	r3, #20
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4403      	add	r3, r0
 8003404:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	2b00      	cmp	r3, #0
 800340a:	dc01      	bgt.n	8003410 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8003410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003412:	2b00      	cmp	r3, #0
 8003414:	dc01      	bgt.n	800341a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800341a:	2300      	movs	r3, #0
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
 800341e:	e062      	b.n	80034e6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003420:	2300      	movs	r3, #0
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
 8003424:	e059      	b.n	80034da <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	3301      	adds	r3, #1
 800342a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800342c:	3201      	adds	r2, #1
 800342e:	fb03 f202 	mul.w	r2, r3, r2
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	fb02 f303 	mul.w	r3, r2, r3
 8003438:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	429a      	cmp	r2, r3
 8003440:	d348      	bcc.n	80034d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003442:	2300      	movs	r3, #0
 8003444:	623b      	str	r3, [r7, #32]
 8003446:	e042      	b.n	80034ce <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	3301      	adds	r3, #1
 800344c:	6a3a      	ldr	r2, [r7, #32]
 800344e:	fb03 f202 	mul.w	r2, r3, r2
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	fb02 f303 	mul.w	r3, r2, r3
 8003458:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	429a      	cmp	r2, r3
 8003460:	d332      	bcc.n	80034c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	429a      	cmp	r2, r3
 8003468:	d82e      	bhi.n	80034c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800346a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800346c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346e:	429a      	cmp	r2, r3
 8003470:	d02a      	beq.n	80034c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003472:	4b24      	ldr	r3, [pc, #144]	; (8003504 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4924      	ldr	r1, [pc, #144]	; (8003508 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003484:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8003486:	4b1f      	ldr	r3, [pc, #124]	; (8003504 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	491f      	ldr	r1, [pc, #124]	; (8003508 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	3304      	adds	r3, #4
 8003498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800349c:	4b19      	ldr	r3, [pc, #100]	; (8003504 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4919      	ldr	r1, [pc, #100]	; (8003508 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	3308      	adds	r3, #8
 80034ae:	6a3a      	ldr	r2, [r7, #32]
 80034b0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80034b6:	4b13      	ldr	r3, [pc, #76]	; (8003504 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3301      	adds	r3, #1
 80034bc:	4a11      	ldr	r2, [pc, #68]	; (8003504 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80034be:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80034c0:	4b10      	ldr	r3, [pc, #64]	; (8003504 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b7f      	cmp	r3, #127	; 0x7f
 80034c6:	d812      	bhi.n	80034ee <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	3301      	adds	r3, #1
 80034cc:	623b      	str	r3, [r7, #32]
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	2b0f      	cmp	r3, #15
 80034d2:	d9b9      	bls.n	8003448 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	3301      	adds	r3, #1
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	2b0f      	cmp	r3, #15
 80034de:	d9a2      	bls.n	8003426 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e2:	3301      	adds	r3, #1
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e8:	2b0f      	cmp	r3, #15
 80034ea:	d999      	bls.n	8003420 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80034ec:	e000      	b.n	80034f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80034ee:	bf00      	nop
          }
        }
      }
    }
  }
}
 80034f0:	373c      	adds	r7, #60	; 0x3c
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	3b9aca00 	.word	0x3b9aca00
 8003500:	080106f8 	.word	0x080106f8
 8003504:	240dfee0 	.word	0x240dfee0
 8003508:	240df4e0 	.word	0x240df4e0

0800350c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800350c:	b480      	push	{r7}
 800350e:	b093      	sub	sp, #76	; 0x4c
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8003516:	f04f 33ff 	mov.w	r3, #4294967295
 800351a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	085a      	lsrs	r2, r3, #1
 8003520:	4b7a      	ldr	r3, [pc, #488]	; (800370c <I2C_Compute_SCLL_SCLH+0x200>)
 8003522:	4413      	add	r3, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	fbb3 f3f2 	udiv	r3, r3, r2
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800352c:	4a78      	ldr	r2, [pc, #480]	; (8003710 <I2C_Compute_SCLL_SCLH+0x204>)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	212c      	movs	r1, #44	; 0x2c
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	4413      	add	r3, r2
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	085a      	lsrs	r2, r3, #1
 800353c:	4b73      	ldr	r3, [pc, #460]	; (800370c <I2C_Compute_SCLL_SCLH+0x200>)
 800353e:	4413      	add	r3, r2
 8003540:	4973      	ldr	r1, [pc, #460]	; (8003710 <I2C_Compute_SCLL_SCLH+0x204>)
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	202c      	movs	r0, #44	; 0x2c
 8003546:	fb00 f202 	mul.w	r2, r0, r2
 800354a:	440a      	add	r2, r1
 800354c:	6812      	ldr	r2, [r2, #0]
 800354e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003554:	2332      	movs	r3, #50	; 0x32
 8003556:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8003558:	4a6d      	ldr	r2, [pc, #436]	; (8003710 <I2C_Compute_SCLL_SCLH+0x204>)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	3328      	adds	r3, #40	; 0x28
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8003570:	4a67      	ldr	r2, [pc, #412]	; (8003710 <I2C_Compute_SCLL_SCLH+0x204>)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	212c      	movs	r1, #44	; 0x2c
 8003576:	fb01 f303 	mul.w	r3, r1, r3
 800357a:	4413      	add	r3, r2
 800357c:	3304      	adds	r3, #4
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a62      	ldr	r2, [pc, #392]	; (800370c <I2C_Compute_SCLL_SCLH+0x200>)
 8003582:	fbb2 f3f3 	udiv	r3, r2, r3
 8003586:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003588:	4a61      	ldr	r2, [pc, #388]	; (8003710 <I2C_Compute_SCLL_SCLH+0x204>)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	212c      	movs	r1, #44	; 0x2c
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	4413      	add	r3, r2
 8003594:	3308      	adds	r3, #8
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a5c      	ldr	r2, [pc, #368]	; (800370c <I2C_Compute_SCLL_SCLH+0x200>)
 800359a:	fbb2 f3f3 	udiv	r3, r2, r3
 800359e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80035a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a2:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80035a4:	2300      	movs	r3, #0
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
 80035a8:	e0a3      	b.n	80036f2 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80035aa:	495a      	ldr	r1, [pc, #360]	; (8003714 <I2C_Compute_SCLL_SCLH+0x208>)
 80035ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80035c4:	2300      	movs	r3, #0
 80035c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c8:	e08c      	b.n	80036e4 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80035ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	441a      	add	r2, r3
 80035d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d2:	3301      	adds	r3, #1
 80035d4:	6979      	ldr	r1, [r7, #20]
 80035d6:	fb03 f101 	mul.w	r1, r3, r1
 80035da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	440b      	add	r3, r1
 80035e0:	4413      	add	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80035e4:	4a4a      	ldr	r2, [pc, #296]	; (8003710 <I2C_Compute_SCLL_SCLH+0x204>)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	212c      	movs	r1, #44	; 0x2c
 80035ea:	fb01 f303 	mul.w	r3, r1, r3
 80035ee:	4413      	add	r3, r2
 80035f0:	3318      	adds	r3, #24
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d971      	bls.n	80036de <I2C_Compute_SCLL_SCLH+0x1d2>
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	1ad2      	subs	r2, r2, r3
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	089b      	lsrs	r3, r3, #2
 8003606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003608:	429a      	cmp	r2, r3
 800360a:	d268      	bcs.n	80036de <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800360c:	2300      	movs	r3, #0
 800360e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003610:	e062      	b.n	80036d8 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	441a      	add	r2, r3
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	3301      	adds	r3, #1
 800361c:	6979      	ldr	r1, [r7, #20]
 800361e:	fb03 f101 	mul.w	r1, r3, r1
 8003622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	440b      	add	r3, r1
 8003628:	4413      	add	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	441a      	add	r2, r3
 8003632:	4937      	ldr	r1, [pc, #220]	; (8003710 <I2C_Compute_SCLL_SCLH+0x204>)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	202c      	movs	r0, #44	; 0x2c
 8003638:	fb00 f303 	mul.w	r3, r0, r3
 800363c:	440b      	add	r3, r1
 800363e:	3320      	adds	r3, #32
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	441a      	add	r2, r3
 8003644:	4932      	ldr	r1, [pc, #200]	; (8003710 <I2C_Compute_SCLL_SCLH+0x204>)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	202c      	movs	r0, #44	; 0x2c
 800364a:	fb00 f303 	mul.w	r3, r0, r3
 800364e:	440b      	add	r3, r1
 8003650:	3324      	adds	r3, #36	; 0x24
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4413      	add	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	429a      	cmp	r2, r3
 800365e:	d338      	bcc.n	80036d2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	429a      	cmp	r2, r3
 8003666:	d834      	bhi.n	80036d2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8003668:	4a29      	ldr	r2, [pc, #164]	; (8003710 <I2C_Compute_SCLL_SCLH+0x204>)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	212c      	movs	r1, #44	; 0x2c
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	4413      	add	r3, r2
 8003674:	331c      	adds	r3, #28
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	429a      	cmp	r2, r3
 800367c:	d329      	bcc.n	80036d2 <I2C_Compute_SCLL_SCLH+0x1c6>
 800367e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	429a      	cmp	r2, r3
 8003684:	d225      	bcs.n	80036d2 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	2b00      	cmp	r3, #0
 8003692:	da02      	bge.n	800369a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003696:	425b      	negs	r3, r3
 8003698:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800369e:	429a      	cmp	r2, r3
 80036a0:	d917      	bls.n	80036d2 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80036a6:	491b      	ldr	r1, [pc, #108]	; (8003714 <I2C_Compute_SCLL_SCLH+0x208>)
 80036a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	3310      	adds	r3, #16
 80036b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036b8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80036ba:	4916      	ldr	r1, [pc, #88]	; (8003714 <I2C_Compute_SCLL_SCLH+0x208>)
 80036bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036be:	4613      	mov	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	330c      	adds	r3, #12
 80036ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036cc:	601a      	str	r2, [r3, #0]
              ret = count;
 80036ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d0:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80036d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d4:	3301      	adds	r3, #1
 80036d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80036d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036da:	2bff      	cmp	r3, #255	; 0xff
 80036dc:	d999      	bls.n	8003612 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80036de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e0:	3301      	adds	r3, #1
 80036e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e6:	2bff      	cmp	r3, #255	; 0xff
 80036e8:	f67f af6f 	bls.w	80035ca <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80036ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ee:	3301      	adds	r3, #1
 80036f0:	637b      	str	r3, [r7, #52]	; 0x34
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <I2C_Compute_SCLL_SCLH+0x20c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036f8:	429a      	cmp	r2, r3
 80036fa:	f4ff af56 	bcc.w	80035aa <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80036fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003700:	4618      	mov	r0, r3
 8003702:	374c      	adds	r7, #76	; 0x4c
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	3b9aca00 	.word	0x3b9aca00
 8003710:	080106f8 	.word	0x080106f8
 8003714:	240df4e0 	.word	0x240df4e0
 8003718:	240dfee0 	.word	0x240dfee0

0800371c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08a      	sub	sp, #40	; 0x28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003724:	4b31      	ldr	r3, [pc, #196]	; (80037ec <I2C4_MspInit+0xd0>)
 8003726:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800372a:	4a30      	ldr	r2, [pc, #192]	; (80037ec <I2C4_MspInit+0xd0>)
 800372c:	f043 0308 	orr.w	r3, r3, #8
 8003730:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003734:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <I2C4_MspInit+0xd0>)
 8003736:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8003742:	4b2a      	ldr	r3, [pc, #168]	; (80037ec <I2C4_MspInit+0xd0>)
 8003744:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003748:	4a28      	ldr	r2, [pc, #160]	; (80037ec <I2C4_MspInit+0xd0>)
 800374a:	f043 0308 	orr.w	r3, r3, #8
 800374e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003752:	4b26      	ldr	r3, [pc, #152]	; (80037ec <I2C4_MspInit+0xd0>)
 8003754:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8003760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003764:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003766:	2312      	movs	r3, #18
 8003768:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800376e:	2302      	movs	r3, #2
 8003770:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8003772:	2304      	movs	r3, #4
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8003776:	f107 0314 	add.w	r3, r7, #20
 800377a:	4619      	mov	r1, r3
 800377c:	481c      	ldr	r0, [pc, #112]	; (80037f0 <I2C4_MspInit+0xd4>)
 800377e:	f005 f8a1 	bl	80088c4 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003786:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003788:	2312      	movs	r3, #18
 800378a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800378c:	2300      	movs	r3, #0
 800378e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003790:	2302      	movs	r3, #2
 8003792:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003794:	2304      	movs	r3, #4
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003798:	f107 0314 	add.w	r3, r7, #20
 800379c:	4619      	mov	r1, r3
 800379e:	4814      	ldr	r0, [pc, #80]	; (80037f0 <I2C4_MspInit+0xd4>)
 80037a0:	f005 f890 	bl	80088c4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 80037a4:	4b11      	ldr	r3, [pc, #68]	; (80037ec <I2C4_MspInit+0xd0>)
 80037a6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80037aa:	4a10      	ldr	r2, [pc, #64]	; (80037ec <I2C4_MspInit+0xd0>)
 80037ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80037b4:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <I2C4_MspInit+0xd0>)
 80037b6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <I2C4_MspInit+0xd0>)
 80037c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037c8:	4a08      	ldr	r2, [pc, #32]	; (80037ec <I2C4_MspInit+0xd0>)
 80037ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ce:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <I2C4_MspInit+0xd0>)
 80037d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037d8:	4a04      	ldr	r2, [pc, #16]	; (80037ec <I2C4_MspInit+0xd0>)
 80037da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 80037e2:	bf00      	nop
 80037e4:	3728      	adds	r7, #40	; 0x28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	58024400 	.word	0x58024400
 80037f0:	58020c00 	.word	0x58020c00

080037f4 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 80037fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003800:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4619      	mov	r1, r3
 8003806:	480b      	ldr	r0, [pc, #44]	; (8003834 <I2C4_MspDeInit+0x40>)
 8003808:	f005 fa0c 	bl	8008c24 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800380c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003810:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4619      	mov	r1, r3
 8003816:	4807      	ldr	r0, [pc, #28]	; (8003834 <I2C4_MspDeInit+0x40>)
 8003818:	f005 fa04 	bl	8008c24 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <I2C4_MspDeInit+0x44>)
 800381e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003822:	4a05      	ldr	r2, [pc, #20]	; (8003838 <I2C4_MspDeInit+0x44>)
 8003824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003828:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 800382c:	bf00      	nop
 800382e:	3720      	adds	r7, #32
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	58020c00 	.word	0x58020c00
 8003838:	58024400 	.word	0x58024400

0800383c <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af04      	add	r7, sp, #16
 8003842:	607b      	str	r3, [r7, #4]
 8003844:	4603      	mov	r3, r0
 8003846:	81fb      	strh	r3, [r7, #14]
 8003848:	460b      	mov	r3, r1
 800384a:	81bb      	strh	r3, [r7, #12]
 800384c:	4613      	mov	r3, r2
 800384e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003850:	8978      	ldrh	r0, [r7, #10]
 8003852:	89ba      	ldrh	r2, [r7, #12]
 8003854:	89f9      	ldrh	r1, [r7, #14]
 8003856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800385a:	9302      	str	r3, [sp, #8]
 800385c:	8b3b      	ldrh	r3, [r7, #24]
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	4603      	mov	r3, r0
 8003866:	4807      	ldr	r0, [pc, #28]	; (8003884 <I2C4_WriteReg+0x48>)
 8003868:	f005 fbee 	bl	8009048 <HAL_I2C_Mem_Write>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003872:	2300      	movs	r3, #0
 8003874:	e001      	b.n	800387a <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003876:	f06f 0307 	mvn.w	r3, #7
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	240dfee4 	.word	0x240dfee4

08003888 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af04      	add	r7, sp, #16
 800388e:	607b      	str	r3, [r7, #4]
 8003890:	4603      	mov	r3, r0
 8003892:	81fb      	strh	r3, [r7, #14]
 8003894:	460b      	mov	r3, r1
 8003896:	81bb      	strh	r3, [r7, #12]
 8003898:	4613      	mov	r3, r2
 800389a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800389c:	8978      	ldrh	r0, [r7, #10]
 800389e:	89ba      	ldrh	r2, [r7, #12]
 80038a0:	89f9      	ldrh	r1, [r7, #14]
 80038a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038a6:	9302      	str	r3, [sp, #8]
 80038a8:	8b3b      	ldrh	r3, [r7, #24]
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	4603      	mov	r3, r0
 80038b2:	4807      	ldr	r0, [pc, #28]	; (80038d0 <I2C4_ReadReg+0x48>)
 80038b4:	f005 fcdc 	bl	8009270 <HAL_I2C_Mem_Read>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80038be:	2300      	movs	r3, #0
 80038c0:	e001      	b.n	80038c6 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80038c2:	f06f 0307 	mvn.w	r3, #7
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	240dfee4 	.word	0x240dfee4

080038d4 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80038ea:	f06f 0301 	mvn.w	r3, #1
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	e02d      	b.n	800394e <BSP_CAMERA_Init+0x7a>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    HAL_DCMI_MspInit(&hdcmi);
 80038f2:	4819      	ldr	r0, [pc, #100]	; (8003958 <BSP_CAMERA_Init+0x84>)
 80038f4:	f7fc ff02 	bl	80006fc <HAL_DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    MX_DCMI_Init();
 80038f8:	f7fc fecc 	bl	8000694 <MX_DCMI_Init>

    if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 80038fc:	2000      	movs	r0, #0
 80038fe:	f000 f887 	bl	8003a10 <BSP_CAMERA_HwReset>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <BSP_CAMERA_Init+0x3c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003908:	f06f 0307 	mvn.w	r3, #7
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e01e      	b.n	800394e <BSP_CAMERA_Init+0x7a>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	68b8      	ldr	r0, [r7, #8]
 8003914:	f000 f93e 	bl	8003b94 <OV5640_Probe>
 8003918:	6178      	str	r0, [r7, #20]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <BSP_CAMERA_Init+0x54>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003920:	f06f 0306 	mvn.w	r3, #6
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e012      	b.n	800394e <BSP_CAMERA_Init+0x7a>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 8003928:	490c      	ldr	r1, [pc, #48]	; (800395c <BSP_CAMERA_Init+0x88>)
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4613      	mov	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4413      	add	r3, r2
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	440b      	add	r3, r1
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 800393a:	4908      	ldr	r1, [pc, #32]	; (800395c <BSP_CAMERA_Init+0x88>)
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4613      	mov	r3, r2
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	4413      	add	r3, r2
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	440b      	add	r3, r1
 8003948:	3304      	adds	r3, #4
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 800394e:	697b      	ldr	r3, [r7, #20]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	240000d4 	.word	0x240000d4
 800395c:	240dff3c 	.word	0x240dff3c

08003960 <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003972:	f06f 0301 	mvn.w	r3, #1
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	e022      	b.n	80039c0 <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hdcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 800397a:	68bc      	ldr	r4, [r7, #8]
 800397c:	4913      	ldr	r1, [pc, #76]	; (80039cc <BSP_CAMERA_Start+0x6c>)
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	440b      	add	r3, r1
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	490f      	ldr	r1, [pc, #60]	; (80039cc <BSP_CAMERA_Start+0x6c>)
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4613      	mov	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4413      	add	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	440b      	add	r3, r1
 800399a:	3304      	adds	r3, #4
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4619      	mov	r1, r3
 80039a0:	f000 f8a6 	bl	8003af0 <GetSize>
 80039a4:	4603      	mov	r3, r0
 80039a6:	4622      	mov	r2, r4
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	4809      	ldr	r0, [pc, #36]	; (80039d0 <BSP_CAMERA_Start+0x70>)
 80039ac:	f000 fdca 	bl	8004544 <HAL_DCMI_Start_DMA>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80039b6:	f06f 0303 	mvn.w	r3, #3
 80039ba:	e002      	b.n	80039c2 <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 80039c0:	697b      	ldr	r3, [r7, #20]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd90      	pop	{r4, r7, pc}
 80039ca:	bf00      	nop
 80039cc:	240dff3c 	.word	0x240dff3c
 80039d0:	240000d4 	.word	0x240000d4

080039d4 <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80039e2:	f06f 0301 	mvn.w	r3, #1
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	e00b      	b.n	8003a02 <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hdcmi) != HAL_OK)
 80039ea:	4808      	ldr	r0, [pc, #32]	; (8003a0c <BSP_CAMERA_Stop+0x38>)
 80039ec:	f000 fe6c 	bl	80046c8 <HAL_DCMI_Stop>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80039f6:	f06f 0303 	mvn.w	r3, #3
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	e001      	b.n	8003a02 <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8003a02:	68fb      	ldr	r3, [r7, #12]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	240000d4 	.word	0x240000d4

08003a10 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <BSP_CAMERA_HwReset+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003a22:	f06f 0301 	mvn.w	r3, #1
 8003a26:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003a28:	68fb      	ldr	r3, [r7, #12]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <BSP_CAMERA_PwrDown+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003a48:	f06f 0301 	mvn.w	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	f7ff ffdb 	bl	8003a5c <BSP_CAMERA_LineEventCallback>
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 {
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	f7fd fce6 	bl	8001488 <BSP_CAMERA_FrameEventCallback>
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8003acc:	2000      	movs	r0, #0
 8003ace:	f7ff ffcf 	bl	8003a70 <BSP_CAMERA_VsyncEventCallback>
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	f7ff ffce 	bl	8003a84 <BSP_CAMERA_ErrorCallback>
}
 8003ae8:	bf00      	nop
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d102      	bne.n	8003b0a <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 8003b04:	2303      	movs	r3, #3
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	e001      	b.n	8003b0e <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d834      	bhi.n	8003b7e <GetSize+0x8e>
 8003b14:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <GetSize+0x2c>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b31 	.word	0x08003b31
 8003b20:	08003b41 	.word	0x08003b41
 8003b24:	08003b51 	.word	0x08003b51
 8003b28:	08003b61 	.word	0x08003b61
 8003b2c:	08003b71 	.word	0x08003b71
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003b36:	fb02 f303 	mul.w	r3, r2, r3
 8003b3a:	089b      	lsrs	r3, r3, #2
 8003b3c:	60fb      	str	r3, [r7, #12]
    break;
 8003b3e:	e01f      	b.n	8003b80 <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	089b      	lsrs	r3, r3, #2
 8003b4c:	60fb      	str	r3, [r7, #12]
    break;
 8003b4e:	e017      	b.n	8003b80 <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	4613      	mov	r3, r2
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	025b      	lsls	r3, r3, #9
 8003b5a:	089b      	lsrs	r3, r3, #2
 8003b5c:	60fb      	str	r3, [r7, #12]
    break;
 8003b5e:	e00f      	b.n	8003b80 <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	089b      	lsrs	r3, r3, #2
 8003b6c:	60fb      	str	r3, [r7, #12]
    break;
 8003b6e:	e007      	b.n	8003b80 <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4a07      	ldr	r2, [pc, #28]	; (8003b90 <GetSize+0xa0>)
 8003b74:	fb02 f303 	mul.w	r3, r2, r3
 8003b78:	089b      	lsrs	r3, r3, #2
 8003b7a:	60fb      	str	r3, [r7, #12]
    break;
 8003b7c:	e000      	b.n	8003b80 <GetSize+0x90>
  default:
    break;
 8003b7e:	bf00      	nop
  }

  return (int32_t)size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	0005dc00 	.word	0x0005dc00

08003b94 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8003b9e:	2378      	movs	r3, #120	; 0x78
 8003ba0:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003ba2:	4b2c      	ldr	r3, [pc, #176]	; (8003c54 <OV5640_Probe+0xc0>)
 8003ba4:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003ba6:	4b2c      	ldr	r3, [pc, #176]	; (8003c58 <OV5640_Probe+0xc4>)
 8003ba8:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8003baa:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <OV5640_Probe+0xc8>)
 8003bac:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8003bae:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <OV5640_Probe+0xcc>)
 8003bb0:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003bb2:	4b2c      	ldr	r3, [pc, #176]	; (8003c64 <OV5640_Probe+0xd0>)
 8003bb4:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8003bb6:	f107 030c 	add.w	r3, r7, #12
 8003bba:	4619      	mov	r1, r3
 8003bbc:	482a      	ldr	r0, [pc, #168]	; (8003c68 <OV5640_Probe+0xd4>)
 8003bbe:	f7fd fc7f 	bl	80014c0 <OV5640_RegisterBusIO>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003bc8:	f06f 0304 	mvn.w	r3, #4
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bce:	e03c      	b.n	8003c4a <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8003bd0:	f107 0308 	add.w	r3, r7, #8
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4824      	ldr	r0, [pc, #144]	; (8003c68 <OV5640_Probe+0xd4>)
 8003bd8:	f7fe f8c6 	bl	8001d68 <OV5640_ReadID>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003be2:	f06f 0304 	mvn.w	r3, #4
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
 8003be8:	e02f      	b.n	8003c4a <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f245 6240 	movw	r2, #22080	; 0x5640
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003bf4:	f06f 0306 	mvn.w	r3, #6
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfa:	e026      	b.n	8003c4a <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <OV5640_Probe+0xd8>)
 8003bfe:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <OV5640_Probe+0xdc>)
 8003c00:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 8003c02:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <OV5640_Probe+0xe0>)
 8003c04:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <OV5640_Probe+0xd4>)
 8003c06:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8003c08:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <OV5640_Probe+0xd8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a19      	ldr	r2, [pc, #100]	; (8003c74 <OV5640_Probe+0xe0>)
 8003c10:	6810      	ldr	r0, [r2, #0]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4798      	blx	r3
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003c1e:	f06f 0304 	mvn.w	r3, #4
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
 8003c24:	e011      	b.n	8003c4a <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 8003c26:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <OV5640_Probe+0xd8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4a11      	ldr	r2, [pc, #68]	; (8003c74 <OV5640_Probe+0xe0>)
 8003c2e:	6812      	ldr	r2, [r2, #0]
 8003c30:	4911      	ldr	r1, [pc, #68]	; (8003c78 <OV5640_Probe+0xe4>)
 8003c32:	6809      	ldr	r1, [r1, #0]
 8003c34:	4610      	mov	r0, r2
 8003c36:	4798      	blx	r3
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003c3e:	f06f 0304 	mvn.w	r3, #4
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
 8003c44:	e001      	b.n	8003c4a <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3728      	adds	r7, #40	; 0x28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	08003029 	.word	0x08003029
 8003c58:	0800309d 	.word	0x0800309d
 8003c5c:	080031c5 	.word	0x080031c5
 8003c60:	08003169 	.word	0x08003169
 8003c64:	08003221 	.word	0x08003221
 8003c68:	240dff74 	.word	0x240dff74
 8003c6c:	240dff6c 	.word	0x240dff6c
 8003c70:	24000000 	.word	0x24000000
 8003c74:	240dff38 	.word	0x240dff38
 8003c78:	240dff70 	.word	0x240dff70

08003c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c82:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <HAL_MspInit+0x30>)
 8003c84:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003c88:	4a08      	ldr	r2, [pc, #32]	; (8003cac <HAL_MspInit+0x30>)
 8003c8a:	f043 0302 	orr.w	r3, r3, #2
 8003c8e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <HAL_MspInit+0x30>)
 8003c94:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	607b      	str	r3, [r7, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	58024400 	.word	0x58024400

08003cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cb4:	e7fe      	b.n	8003cb4 <NMI_Handler+0x4>

08003cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cba:	e7fe      	b.n	8003cba <HardFault_Handler+0x4>

08003cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cc0:	e7fe      	b.n	8003cc0 <MemManage_Handler+0x4>

08003cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cc6:	e7fe      	b.n	8003cc6 <BusFault_Handler+0x4>

08003cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ccc:	e7fe      	b.n	8003ccc <UsageFault_Handler+0x4>

08003cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cd2:	bf00      	nop
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cea:	b480      	push	{r7}
 8003cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cee:	bf00      	nop
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cfc:	f000 fa54 	bl	80041a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d00:	bf00      	nop
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d08:	4802      	ldr	r0, [pc, #8]	; (8003d14 <USART1_IRQHandler+0x10>)
 8003d0a:	f009 fbd5 	bl	800d4b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	240dffa0 	.word	0x240dffa0

08003d18 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003d1c:	4802      	ldr	r0, [pc, #8]	; (8003d28 <DMA2_Stream1_IRQHandler+0x10>)
 8003d1e:	f002 f9c3 	bl	80060a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	24000124 	.word	0x24000124

08003d2c <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003d30:	4802      	ldr	r0, [pc, #8]	; (8003d3c <DCMI_PSSI_IRQHandler+0x10>)
 8003d32:	f000 fd29 	bl	8004788 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8003d36:	bf00      	nop
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	240000d4 	.word	0x240000d4

08003d40 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003d44:	4802      	ldr	r0, [pc, #8]	; (8003d50 <LTDC_IRQHandler+0x10>)
 8003d46:	f005 ffe7 	bl	8009d18 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	24000204 	.word	0x24000204

08003d54 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC Error global Interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003d58:	4802      	ldr	r0, [pc, #8]	; (8003d64 <LTDC_ER_IRQHandler+0x10>)
 8003d5a:	f005 ffdd 	bl	8009d18 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	24000204 	.word	0x24000204

08003d68 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003d6c:	4802      	ldr	r0, [pc, #8]	; (8003d78 <DMA2D_IRQHandler+0x10>)
 8003d6e:	f003 fe95 	bl	8007a9c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	2400019c 	.word	0x2400019c

08003d7c <_lseek>:
//  (void)file;
//  return 1;
//}

int _lseek(int file, int ptr, int dir)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003da0:	4a14      	ldr	r2, [pc, #80]	; (8003df4 <_sbrk+0x5c>)
 8003da2:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <_sbrk+0x60>)
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dac:	4b13      	ldr	r3, [pc, #76]	; (8003dfc <_sbrk+0x64>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d102      	bne.n	8003dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003db4:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <_sbrk+0x64>)
 8003db6:	4a12      	ldr	r2, [pc, #72]	; (8003e00 <_sbrk+0x68>)
 8003db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dba:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <_sbrk+0x64>)
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d207      	bcs.n	8003dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dc8:	f00b f938 	bl	800f03c <__errno>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	220c      	movs	r2, #12
 8003dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd6:	e009      	b.n	8003dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dd8:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <_sbrk+0x64>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <_sbrk+0x64>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4413      	add	r3, r2
 8003de6:	4a05      	ldr	r2, [pc, #20]	; (8003dfc <_sbrk+0x64>)
 8003de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dea:	68fb      	ldr	r3, [r7, #12]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	24100000 	.word	0x24100000
 8003df8:	00000400 	.word	0x00000400
 8003dfc:	240dff9c 	.word	0x240dff9c
 8003e00:	240e0048 	.word	0x240e0048

08003e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003e08:	4b32      	ldr	r3, [pc, #200]	; (8003ed4 <SystemInit+0xd0>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	4a31      	ldr	r2, [pc, #196]	; (8003ed4 <SystemInit+0xd0>)
 8003e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e18:	4b2f      	ldr	r3, [pc, #188]	; (8003ed8 <SystemInit+0xd4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d807      	bhi.n	8003e34 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e24:	4b2c      	ldr	r3, [pc, #176]	; (8003ed8 <SystemInit+0xd4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f023 030f 	bic.w	r3, r3, #15
 8003e2c:	4a2a      	ldr	r2, [pc, #168]	; (8003ed8 <SystemInit+0xd4>)
 8003e2e:	f043 0303 	orr.w	r3, r3, #3
 8003e32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003e34:	4b29      	ldr	r3, [pc, #164]	; (8003edc <SystemInit+0xd8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a28      	ldr	r2, [pc, #160]	; (8003edc <SystemInit+0xd8>)
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e40:	4b26      	ldr	r3, [pc, #152]	; (8003edc <SystemInit+0xd8>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003e46:	4b25      	ldr	r3, [pc, #148]	; (8003edc <SystemInit+0xd8>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4924      	ldr	r1, [pc, #144]	; (8003edc <SystemInit+0xd8>)
 8003e4c:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <SystemInit+0xdc>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e52:	4b21      	ldr	r3, [pc, #132]	; (8003ed8 <SystemInit+0xd4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <SystemInit+0xd4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 030f 	bic.w	r3, r3, #15
 8003e66:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <SystemInit+0xd4>)
 8003e68:	f043 0303 	orr.w	r3, r3, #3
 8003e6c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003e6e:	4b1b      	ldr	r3, [pc, #108]	; (8003edc <SystemInit+0xd8>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003e74:	4b19      	ldr	r3, [pc, #100]	; (8003edc <SystemInit+0xd8>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8003e7a:	4b18      	ldr	r3, [pc, #96]	; (8003edc <SystemInit+0xd8>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003e80:	4b16      	ldr	r3, [pc, #88]	; (8003edc <SystemInit+0xd8>)
 8003e82:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <SystemInit+0xe0>)
 8003e84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003e86:	4b15      	ldr	r3, [pc, #84]	; (8003edc <SystemInit+0xd8>)
 8003e88:	4a17      	ldr	r2, [pc, #92]	; (8003ee8 <SystemInit+0xe4>)
 8003e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003e8c:	4b13      	ldr	r3, [pc, #76]	; (8003edc <SystemInit+0xd8>)
 8003e8e:	4a17      	ldr	r2, [pc, #92]	; (8003eec <SystemInit+0xe8>)
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003e92:	4b12      	ldr	r3, [pc, #72]	; (8003edc <SystemInit+0xd8>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003e98:	4b10      	ldr	r3, [pc, #64]	; (8003edc <SystemInit+0xd8>)
 8003e9a:	4a14      	ldr	r2, [pc, #80]	; (8003eec <SystemInit+0xe8>)
 8003e9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <SystemInit+0xd8>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003ea4:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <SystemInit+0xd8>)
 8003ea6:	4a11      	ldr	r2, [pc, #68]	; (8003eec <SystemInit+0xe8>)
 8003ea8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <SystemInit+0xd8>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003eb0:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <SystemInit+0xd8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a09      	ldr	r2, [pc, #36]	; (8003edc <SystemInit+0xd8>)
 8003eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003ebc:	4b07      	ldr	r3, [pc, #28]	; (8003edc <SystemInit+0xd8>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <SystemInit+0xec>)
 8003ec4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003ec8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003eca:	bf00      	nop
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000ed00 	.word	0xe000ed00
 8003ed8:	52002000 	.word	0x52002000
 8003edc:	58024400 	.word	0x58024400
 8003ee0:	eaf6ed7f 	.word	0xeaf6ed7f
 8003ee4:	02020200 	.word	0x02020200
 8003ee8:	01ff0000 	.word	0x01ff0000
 8003eec:	01010280 	.word	0x01010280
 8003ef0:	52004000 	.word	0x52004000

08003ef4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ef8:	4b22      	ldr	r3, [pc, #136]	; (8003f84 <MX_USART1_UART_Init+0x90>)
 8003efa:	4a23      	ldr	r2, [pc, #140]	; (8003f88 <MX_USART1_UART_Init+0x94>)
 8003efc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003efe:	4b21      	ldr	r3, [pc, #132]	; (8003f84 <MX_USART1_UART_Init+0x90>)
 8003f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f06:	4b1f      	ldr	r3, [pc, #124]	; (8003f84 <MX_USART1_UART_Init+0x90>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f0c:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <MX_USART1_UART_Init+0x90>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f12:	4b1c      	ldr	r3, [pc, #112]	; (8003f84 <MX_USART1_UART_Init+0x90>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f18:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <MX_USART1_UART_Init+0x90>)
 8003f1a:	220c      	movs	r2, #12
 8003f1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f1e:	4b19      	ldr	r3, [pc, #100]	; (8003f84 <MX_USART1_UART_Init+0x90>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f24:	4b17      	ldr	r3, [pc, #92]	; (8003f84 <MX_USART1_UART_Init+0x90>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f2a:	4b16      	ldr	r3, [pc, #88]	; (8003f84 <MX_USART1_UART_Init+0x90>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f30:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <MX_USART1_UART_Init+0x90>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f36:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <MX_USART1_UART_Init+0x90>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f3c:	4811      	ldr	r0, [pc, #68]	; (8003f84 <MX_USART1_UART_Init+0x90>)
 8003f3e:	f009 f915 	bl	800d16c <HAL_UART_Init>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003f48:	f7fd fab4 	bl	80014b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	480d      	ldr	r0, [pc, #52]	; (8003f84 <MX_USART1_UART_Init+0x90>)
 8003f50:	f00a ffaa 	bl	800eea8 <HAL_UARTEx_SetTxFifoThreshold>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003f5a:	f7fd faab 	bl	80014b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4808      	ldr	r0, [pc, #32]	; (8003f84 <MX_USART1_UART_Init+0x90>)
 8003f62:	f00a ffdf 	bl	800ef24 <HAL_UARTEx_SetRxFifoThreshold>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003f6c:	f7fd faa2 	bl	80014b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003f70:	4804      	ldr	r0, [pc, #16]	; (8003f84 <MX_USART1_UART_Init+0x90>)
 8003f72:	f00a ff60 	bl	800ee36 <HAL_UARTEx_DisableFifoMode>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003f7c:	f7fd fa9a 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f80:	bf00      	nop
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	240dffa0 	.word	0x240dffa0
 8003f88:	40011000 	.word	0x40011000

08003f8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b0ba      	sub	sp, #232	; 0xe8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f94:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	605a      	str	r2, [r3, #4]
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	60da      	str	r2, [r3, #12]
 8003fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fa4:	f107 0310 	add.w	r3, r7, #16
 8003fa8:	22c0      	movs	r2, #192	; 0xc0
 8003faa:	2100      	movs	r1, #0
 8003fac:	4618      	mov	r0, r3
 8003fae:	f00b f86f 	bl	800f090 <memset>
  if(uartHandle->Instance==USART1)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2b      	ldr	r2, [pc, #172]	; (8004064 <HAL_UART_MspInit+0xd8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d14e      	bne.n	800405a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003fbc:	f04f 0201 	mov.w	r2, #1
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fce:	f107 0310 	add.w	r3, r7, #16
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f007 f9cc 	bl	800b370 <HAL_RCCEx_PeriphCLKConfig>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003fde:	f7fd fa69 	bl	80014b4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fe2:	4b21      	ldr	r3, [pc, #132]	; (8004068 <HAL_UART_MspInit+0xdc>)
 8003fe4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003fe8:	4a1f      	ldr	r2, [pc, #124]	; (8004068 <HAL_UART_MspInit+0xdc>)
 8003fea:	f043 0310 	orr.w	r3, r3, #16
 8003fee:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_UART_MspInit+0xdc>)
 8003ff4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003ff8:	f003 0310 	and.w	r3, r3, #16
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004000:	4b19      	ldr	r3, [pc, #100]	; (8004068 <HAL_UART_MspInit+0xdc>)
 8004002:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004006:	4a18      	ldr	r2, [pc, #96]	; (8004068 <HAL_UART_MspInit+0xdc>)
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004010:	4b15      	ldr	r3, [pc, #84]	; (8004068 <HAL_UART_MspInit+0xdc>)
 8004012:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	60bb      	str	r3, [r7, #8]
 800401c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 800401e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004022:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004026:	2302      	movs	r3, #2
 8004028:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402c:	2300      	movs	r3, #0
 800402e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004032:	2300      	movs	r3, #0
 8004034:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004038:	2307      	movs	r3, #7
 800403a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800403e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004042:	4619      	mov	r1, r3
 8004044:	4809      	ldr	r0, [pc, #36]	; (800406c <HAL_UART_MspInit+0xe0>)
 8004046:	f004 fc3d 	bl	80088c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800404a:	2200      	movs	r2, #0
 800404c:	2100      	movs	r1, #0
 800404e:	2025      	movs	r0, #37	; 0x25
 8004050:	f000 f9c9 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004054:	2025      	movs	r0, #37	; 0x25
 8004056:	f000 f9e0 	bl	800441a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800405a:	bf00      	nop
 800405c:	37e8      	adds	r7, #232	; 0xe8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40011000 	.word	0x40011000
 8004068:	58024400 	.word	0x58024400
 800406c:	58020000 	.word	0x58020000

08004070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004074:	f7ff fec6 	bl	8003e04 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004078:	480c      	ldr	r0, [pc, #48]	; (80040ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800407a:	490d      	ldr	r1, [pc, #52]	; (80040b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800407c:	4a0d      	ldr	r2, [pc, #52]	; (80040b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800407e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004080:	e002      	b.n	8004088 <LoopCopyDataInit>

08004082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004086:	3304      	adds	r3, #4

08004088 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8004088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800408a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800408c:	d3f9      	bcc.n	8004082 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800408e:	4a0a      	ldr	r2, [pc, #40]	; (80040b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004090:	4c0a      	ldr	r4, [pc, #40]	; (80040bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8004092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004094:	e001      	b.n	800409a <LoopFillZerobss>

08004096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004098:	3204      	adds	r2, #4

0800409a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800409a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800409c:	d3fb      	bcc.n	8004096 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800409e:	f00a ffd3 	bl	800f048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040a2:	f7fd f905 	bl	80012b0 <main>
  bx  lr
 80040a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040a8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80040ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80040b0:	240000b8 	.word	0x240000b8
  ldr r2, =_sidata
 80040b4:	08010864 	.word	0x08010864
  ldr r2, =_sbss
 80040b8:	240000b8 	.word	0x240000b8
  ldr r4, =_ebss
 80040bc:	240e0048 	.word	0x240e0048

080040c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040c0:	e7fe      	b.n	80040c0 <ADC_IRQHandler>
	...

080040c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040ca:	2003      	movs	r0, #3
 80040cc:	f000 f980 	bl	80043d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80040d0:	f006 ff78 	bl	800afc4 <HAL_RCC_GetSysClockFreq>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b15      	ldr	r3, [pc, #84]	; (800412c <HAL_Init+0x68>)
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	0a1b      	lsrs	r3, r3, #8
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	4913      	ldr	r1, [pc, #76]	; (8004130 <HAL_Init+0x6c>)
 80040e2:	5ccb      	ldrb	r3, [r1, r3]
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
 80040ec:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80040ee:	4b0f      	ldr	r3, [pc, #60]	; (800412c <HAL_Init+0x68>)
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	4a0e      	ldr	r2, [pc, #56]	; (8004130 <HAL_Init+0x6c>)
 80040f8:	5cd3      	ldrb	r3, [r2, r3]
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
 8004104:	4a0b      	ldr	r2, [pc, #44]	; (8004134 <HAL_Init+0x70>)
 8004106:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004108:	4a0b      	ldr	r2, [pc, #44]	; (8004138 <HAL_Init+0x74>)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800410e:	2000      	movs	r0, #0
 8004110:	f000 f814 	bl	800413c <HAL_InitTick>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e002      	b.n	8004124 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800411e:	f7ff fdad 	bl	8003c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	58024400 	.word	0x58024400
 8004130:	0801077c 	.word	0x0801077c
 8004134:	24000048 	.word	0x24000048
 8004138:	24000044 	.word	0x24000044

0800413c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004144:	4b15      	ldr	r3, [pc, #84]	; (800419c <HAL_InitTick+0x60>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e021      	b.n	8004194 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004150:	4b13      	ldr	r3, [pc, #76]	; (80041a0 <HAL_InitTick+0x64>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4b11      	ldr	r3, [pc, #68]	; (800419c <HAL_InitTick+0x60>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	4619      	mov	r1, r3
 800415a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800415e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f965 	bl	8004436 <HAL_SYSTICK_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e00e      	b.n	8004194 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b0f      	cmp	r3, #15
 800417a:	d80a      	bhi.n	8004192 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800417c:	2200      	movs	r2, #0
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	f04f 30ff 	mov.w	r0, #4294967295
 8004184:	f000 f92f 	bl	80043e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004188:	4a06      	ldr	r2, [pc, #24]	; (80041a4 <HAL_InitTick+0x68>)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e000      	b.n	8004194 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
}
 8004194:	4618      	mov	r0, r3
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	24000050 	.word	0x24000050
 80041a0:	24000044 	.word	0x24000044
 80041a4:	2400004c 	.word	0x2400004c

080041a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <HAL_IncTick+0x20>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <HAL_IncTick+0x24>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4413      	add	r3, r2
 80041b8:	4a04      	ldr	r2, [pc, #16]	; (80041cc <HAL_IncTick+0x24>)
 80041ba:	6013      	str	r3, [r2, #0]
}
 80041bc:	bf00      	nop
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	24000050 	.word	0x24000050
 80041cc:	240e0034 	.word	0x240e0034

080041d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  return uwTick;
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <HAL_GetTick+0x14>)
 80041d6:	681b      	ldr	r3, [r3, #0]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	240e0034 	.word	0x240e0034

080041e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041f0:	f7ff ffee 	bl	80041d0 <HAL_GetTick>
 80041f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d005      	beq.n	800420e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004202:	4b0a      	ldr	r3, [pc, #40]	; (800422c <HAL_Delay+0x44>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800420e:	bf00      	nop
 8004210:	f7ff ffde 	bl	80041d0 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	429a      	cmp	r2, r3
 800421e:	d8f7      	bhi.n	8004210 <HAL_Delay+0x28>
  {
  }
}
 8004220:	bf00      	nop
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	24000050 	.word	0x24000050

08004230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <__NVIC_SetPriorityGrouping+0x40>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800424c:	4013      	ands	r3, r2
 800424e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004258:	4b06      	ldr	r3, [pc, #24]	; (8004274 <__NVIC_SetPriorityGrouping+0x44>)
 800425a:	4313      	orrs	r3, r2
 800425c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800425e:	4a04      	ldr	r2, [pc, #16]	; (8004270 <__NVIC_SetPriorityGrouping+0x40>)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	60d3      	str	r3, [r2, #12]
}
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	e000ed00 	.word	0xe000ed00
 8004274:	05fa0000 	.word	0x05fa0000

08004278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800427c:	4b04      	ldr	r3, [pc, #16]	; (8004290 <__NVIC_GetPriorityGrouping+0x18>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	0a1b      	lsrs	r3, r3, #8
 8004282:	f003 0307 	and.w	r3, r3, #7
}
 8004286:	4618      	mov	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800429e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	db0b      	blt.n	80042be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	f003 021f 	and.w	r2, r3, #31
 80042ac:	4907      	ldr	r1, [pc, #28]	; (80042cc <__NVIC_EnableIRQ+0x38>)
 80042ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2001      	movs	r0, #1
 80042b6:	fa00 f202 	lsl.w	r2, r0, r2
 80042ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	e000e100 	.word	0xe000e100

080042d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	6039      	str	r1, [r7, #0]
 80042da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	db0a      	blt.n	80042fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	490c      	ldr	r1, [pc, #48]	; (800431c <__NVIC_SetPriority+0x4c>)
 80042ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ee:	0112      	lsls	r2, r2, #4
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	440b      	add	r3, r1
 80042f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042f8:	e00a      	b.n	8004310 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	4908      	ldr	r1, [pc, #32]	; (8004320 <__NVIC_SetPriority+0x50>)
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	3b04      	subs	r3, #4
 8004308:	0112      	lsls	r2, r2, #4
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	440b      	add	r3, r1
 800430e:	761a      	strb	r2, [r3, #24]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	e000e100 	.word	0xe000e100
 8004320:	e000ed00 	.word	0xe000ed00

08004324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004324:	b480      	push	{r7}
 8004326:	b089      	sub	sp, #36	; 0x24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f1c3 0307 	rsb	r3, r3, #7
 800433e:	2b04      	cmp	r3, #4
 8004340:	bf28      	it	cs
 8004342:	2304      	movcs	r3, #4
 8004344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3304      	adds	r3, #4
 800434a:	2b06      	cmp	r3, #6
 800434c:	d902      	bls.n	8004354 <NVIC_EncodePriority+0x30>
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	3b03      	subs	r3, #3
 8004352:	e000      	b.n	8004356 <NVIC_EncodePriority+0x32>
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004358:	f04f 32ff 	mov.w	r2, #4294967295
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43da      	mvns	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	401a      	ands	r2, r3
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800436c:	f04f 31ff 	mov.w	r1, #4294967295
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	fa01 f303 	lsl.w	r3, r1, r3
 8004376:	43d9      	mvns	r1, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800437c:	4313      	orrs	r3, r2
         );
}
 800437e:	4618      	mov	r0, r3
 8004380:	3724      	adds	r7, #36	; 0x24
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3b01      	subs	r3, #1
 8004398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800439c:	d301      	bcc.n	80043a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800439e:	2301      	movs	r3, #1
 80043a0:	e00f      	b.n	80043c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043a2:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <SysTick_Config+0x40>)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043aa:	210f      	movs	r1, #15
 80043ac:	f04f 30ff 	mov.w	r0, #4294967295
 80043b0:	f7ff ff8e 	bl	80042d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <SysTick_Config+0x40>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ba:	4b04      	ldr	r3, [pc, #16]	; (80043cc <SysTick_Config+0x40>)
 80043bc:	2207      	movs	r2, #7
 80043be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	e000e010 	.word	0xe000e010

080043d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff ff29 	bl	8004230 <__NVIC_SetPriorityGrouping>
}
 80043de:	bf00      	nop
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b086      	sub	sp, #24
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	4603      	mov	r3, r0
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
 80043f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043f4:	f7ff ff40 	bl	8004278 <__NVIC_GetPriorityGrouping>
 80043f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	6978      	ldr	r0, [r7, #20]
 8004400:	f7ff ff90 	bl	8004324 <NVIC_EncodePriority>
 8004404:	4602      	mov	r2, r0
 8004406:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800440a:	4611      	mov	r1, r2
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff ff5f 	bl	80042d0 <__NVIC_SetPriority>
}
 8004412:	bf00      	nop
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b082      	sub	sp, #8
 800441e:	af00      	add	r7, sp, #0
 8004420:	4603      	mov	r3, r0
 8004422:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff ff33 	bl	8004294 <__NVIC_EnableIRQ>
}
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff ffa4 	bl	800438c <SysTick_Config>
 8004444:	4603      	mov	r3, r0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e069      	b.n	8004536 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc f944 	bl	80006fc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6819      	ldr	r1, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	4b2a      	ldr	r3, [pc, #168]	; (8004540 <HAL_DCMI_Init+0xf0>)
 8004496:	400b      	ands	r3, r1
 8004498:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6819      	ldr	r1, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80044ae:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80044ba:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80044c6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80044d2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80044de:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d112      	bne.n	8004516 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	7f1b      	ldrb	r3, [r3, #28]
 80044f4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	7f5b      	ldrb	r3, [r3, #29]
 80044fa:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80044fc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	7f9b      	ldrb	r3, [r3, #30]
 8004502:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004504:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	7fdb      	ldrb	r3, [r3, #31]
 800450c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004512:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004514:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 021e 	orr.w	r2, r2, #30
 8004524:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	ffe0f007 	.word	0xffe0f007

08004544 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_DCMI_Start_DMA+0x1c>
 800455c:	2302      	movs	r3, #2
 800455e:	e0ab      	b.n	80046b8 <HAL_DCMI_Start_DMA+0x174>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800457e:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0202 	bic.w	r2, r2, #2
 800458e:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6819      	ldr	r1, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	430a      	orrs	r2, r1
 800459e:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a4:	4a46      	ldr	r2, [pc, #280]	; (80046c0 <HAL_DCMI_Start_DMA+0x17c>)
 80045a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ac:	4a45      	ldr	r2, [pc, #276]	; (80046c4 <HAL_DCMI_Start_DMA+0x180>)
 80045ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b4:	2200      	movs	r2, #0
 80045b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d6:	d219      	bcs.n	800460c <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3328      	adds	r3, #40	; 0x28
 80045e2:	4619      	mov	r1, r3
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	f000 fd90 	bl	800510c <HAL_DMA_Start_IT>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d055      	beq.n	800469e <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2240      	movs	r2, #64	; 0x40
 80045f6:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e055      	b.n	80046b8 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004610:	4a2b      	ldr	r2, [pc, #172]	; (80046c0 <HAL_DCMI_Start_DMA+0x17c>)
 8004612:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2201      	movs	r2, #1
 8004618:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8004626:	e009      	b.n	800463c <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462c:	085a      	lsrs	r2, r3, #1
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	005a      	lsls	r2, r3, #1
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004644:	d2f0      	bcs.n	8004628 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	1e9a      	subs	r2, r3, #2
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	4413      	add	r3, r2
 8004662:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3328      	adds	r3, #40	; 0x28
 800466e:	4619      	mov	r1, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	f003 fc73 	bl	8007f64 <HAL_DMAEx_MultiBufferStart_IT>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00c      	beq.n	800469e <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2240      	movs	r2, #64	; 0x40
 8004688:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e00c      	b.n	80046b8 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 0201 	orr.w	r2, r2, #1
 80046ac:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	0800488d 	.word	0x0800488d
 80046c4:	080049b3 	.word	0x080049b3

080046c8 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80046d0:	4b2b      	ldr	r3, [pc, #172]	; (8004780 <HAL_DCMI_Stop+0xb8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a2b      	ldr	r2, [pc, #172]	; (8004784 <HAL_DCMI_Stop+0xbc>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	0a5b      	lsrs	r3, r3, #9
 80046dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046e0:	fb02 f303 	mul.w	r3, r2, r3
 80046e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_DCMI_Stop+0x30>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e03f      	b.n	8004778 <HAL_DCMI_Stop+0xb0>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0201 	bic.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3b01      	subs	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d108      	bne.n	8004736 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004728:	f043 0220 	orr.w	r2, r3, #32
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	72fb      	strb	r3, [r7, #11]
      break;
 8004734:	e006      	b.n	8004744 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e9      	bne.n	8004718 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004752:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004758:	4618      	mov	r0, r3
 800475a:	f000 ff41 	bl	80055e0 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8004776:	7afb      	ldrb	r3, [r7, #11]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	24000044 	.word	0x24000044
 8004784:	10624dd3 	.word	0x10624dd3

08004788 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d016      	beq.n	80047d0 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2204      	movs	r2, #4
 80047a8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ae:	f043 0202 	orr.w	r2, r3, #2
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2204      	movs	r2, #4
 80047ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c2:	4a31      	ldr	r2, [pc, #196]	; (8004888 <HAL_DCMI_IRQHandler+0x100>)
 80047c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ca:	4618      	mov	r0, r3
 80047cc:	f001 fa26 	bl	8005c1c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d016      	beq.n	8004808 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2202      	movs	r2, #2
 80047e0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e6:	f043 0201 	orr.w	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2204      	movs	r2, #4
 80047f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fa:	4a23      	ldr	r2, [pc, #140]	; (8004888 <HAL_DCMI_IRQHandler+0x100>)
 80047fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004802:	4618      	mov	r0, r3
 8004804:	f001 fa0a 	bl	8005c1c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 0310 	and.w	r3, r3, #16
 800480e:	2b00      	cmp	r3, #0
 8004810:	d006      	beq.n	8004820 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2210      	movs	r2, #16
 8004818:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff f93c 	bl	8003a98 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d006      	beq.n	8004838 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2208      	movs	r2, #8
 8004830:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff f946 	bl	8003ac4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d01d      	beq.n	800487e <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b02      	cmp	r3, #2
 800484e:	d107      	bne.n	8004860 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 021e 	bic.w	r2, r2, #30
 800485e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2201      	movs	r2, #1
 8004876:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7ff f918 	bl	8003aae <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	080049b3 	.word	0x080049b3

0800488c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d043      	beq.n	800492a <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ae:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d118      	bne.n	80048ee <DCMI_DMAXferCplt+0x62>
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d015      	beq.n	80048ee <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d4:	00da      	lsls	r2, r3, #3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	4413      	add	r3, r2
 80048da:	2200      	movs	r2, #0
 80048dc:	4619      	mov	r1, r3
 80048de:	f003 fe9f 	bl	8008620 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	1e5a      	subs	r2, r3, #1
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	639a      	str	r2, [r3, #56]	; 0x38
 80048ec:	e044      	b.n	8004978 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d13c      	bne.n	8004978 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004910:	00da      	lsls	r2, r3, #3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	4413      	add	r3, r2
 8004916:	2201      	movs	r2, #1
 8004918:	4619      	mov	r1, r3
 800491a:	f003 fe81 	bl	8008620 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	1e5a      	subs	r2, r3, #1
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	639a      	str	r2, [r3, #56]	; 0x38
 8004928:	e026      	b.n	8004978 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d006      	beq.n	8004948 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004944:	60da      	str	r2, [r3, #12]
 8004946:	e017      	b.n	8004978 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10f      	bne.n	8004978 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495c:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004962:	0099      	lsls	r1, r3, #2
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	440a      	add	r2, r1
 800496e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	429a      	cmp	r2, r3
 8004982:	d112      	bne.n	80049aa <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d103      	bne.n	80049aa <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d009      	beq.n	80049de <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7ff f87b 	bl	8003ada <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80049e4:	bf00      	nop
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80049f4:	f7ff fbec 	bl	80041d0 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e37f      	b.n	8005104 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a66      	ldr	r2, [pc, #408]	; (8004ba4 <HAL_DMA_Init+0x1b8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d04a      	beq.n	8004aa4 <HAL_DMA_Init+0xb8>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a65      	ldr	r2, [pc, #404]	; (8004ba8 <HAL_DMA_Init+0x1bc>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d045      	beq.n	8004aa4 <HAL_DMA_Init+0xb8>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a63      	ldr	r2, [pc, #396]	; (8004bac <HAL_DMA_Init+0x1c0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d040      	beq.n	8004aa4 <HAL_DMA_Init+0xb8>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a62      	ldr	r2, [pc, #392]	; (8004bb0 <HAL_DMA_Init+0x1c4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d03b      	beq.n	8004aa4 <HAL_DMA_Init+0xb8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a60      	ldr	r2, [pc, #384]	; (8004bb4 <HAL_DMA_Init+0x1c8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d036      	beq.n	8004aa4 <HAL_DMA_Init+0xb8>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a5f      	ldr	r2, [pc, #380]	; (8004bb8 <HAL_DMA_Init+0x1cc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d031      	beq.n	8004aa4 <HAL_DMA_Init+0xb8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a5d      	ldr	r2, [pc, #372]	; (8004bbc <HAL_DMA_Init+0x1d0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d02c      	beq.n	8004aa4 <HAL_DMA_Init+0xb8>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a5c      	ldr	r2, [pc, #368]	; (8004bc0 <HAL_DMA_Init+0x1d4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d027      	beq.n	8004aa4 <HAL_DMA_Init+0xb8>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a5a      	ldr	r2, [pc, #360]	; (8004bc4 <HAL_DMA_Init+0x1d8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d022      	beq.n	8004aa4 <HAL_DMA_Init+0xb8>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a59      	ldr	r2, [pc, #356]	; (8004bc8 <HAL_DMA_Init+0x1dc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d01d      	beq.n	8004aa4 <HAL_DMA_Init+0xb8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a57      	ldr	r2, [pc, #348]	; (8004bcc <HAL_DMA_Init+0x1e0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d018      	beq.n	8004aa4 <HAL_DMA_Init+0xb8>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a56      	ldr	r2, [pc, #344]	; (8004bd0 <HAL_DMA_Init+0x1e4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d013      	beq.n	8004aa4 <HAL_DMA_Init+0xb8>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a54      	ldr	r2, [pc, #336]	; (8004bd4 <HAL_DMA_Init+0x1e8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00e      	beq.n	8004aa4 <HAL_DMA_Init+0xb8>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a53      	ldr	r2, [pc, #332]	; (8004bd8 <HAL_DMA_Init+0x1ec>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d009      	beq.n	8004aa4 <HAL_DMA_Init+0xb8>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a51      	ldr	r2, [pc, #324]	; (8004bdc <HAL_DMA_Init+0x1f0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <HAL_DMA_Init+0xb8>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a50      	ldr	r2, [pc, #320]	; (8004be0 <HAL_DMA_Init+0x1f4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d101      	bne.n	8004aa8 <HAL_DMA_Init+0xbc>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <HAL_DMA_Init+0xbe>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 813c 	beq.w	8004d28 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a37      	ldr	r2, [pc, #220]	; (8004ba4 <HAL_DMA_Init+0x1b8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d04a      	beq.n	8004b60 <HAL_DMA_Init+0x174>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a36      	ldr	r2, [pc, #216]	; (8004ba8 <HAL_DMA_Init+0x1bc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d045      	beq.n	8004b60 <HAL_DMA_Init+0x174>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a34      	ldr	r2, [pc, #208]	; (8004bac <HAL_DMA_Init+0x1c0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d040      	beq.n	8004b60 <HAL_DMA_Init+0x174>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a33      	ldr	r2, [pc, #204]	; (8004bb0 <HAL_DMA_Init+0x1c4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d03b      	beq.n	8004b60 <HAL_DMA_Init+0x174>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a31      	ldr	r2, [pc, #196]	; (8004bb4 <HAL_DMA_Init+0x1c8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d036      	beq.n	8004b60 <HAL_DMA_Init+0x174>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a30      	ldr	r2, [pc, #192]	; (8004bb8 <HAL_DMA_Init+0x1cc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d031      	beq.n	8004b60 <HAL_DMA_Init+0x174>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a2e      	ldr	r2, [pc, #184]	; (8004bbc <HAL_DMA_Init+0x1d0>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d02c      	beq.n	8004b60 <HAL_DMA_Init+0x174>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a2d      	ldr	r2, [pc, #180]	; (8004bc0 <HAL_DMA_Init+0x1d4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d027      	beq.n	8004b60 <HAL_DMA_Init+0x174>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a2b      	ldr	r2, [pc, #172]	; (8004bc4 <HAL_DMA_Init+0x1d8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d022      	beq.n	8004b60 <HAL_DMA_Init+0x174>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a2a      	ldr	r2, [pc, #168]	; (8004bc8 <HAL_DMA_Init+0x1dc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d01d      	beq.n	8004b60 <HAL_DMA_Init+0x174>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a28      	ldr	r2, [pc, #160]	; (8004bcc <HAL_DMA_Init+0x1e0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d018      	beq.n	8004b60 <HAL_DMA_Init+0x174>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a27      	ldr	r2, [pc, #156]	; (8004bd0 <HAL_DMA_Init+0x1e4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d013      	beq.n	8004b60 <HAL_DMA_Init+0x174>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a25      	ldr	r2, [pc, #148]	; (8004bd4 <HAL_DMA_Init+0x1e8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00e      	beq.n	8004b60 <HAL_DMA_Init+0x174>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a24      	ldr	r2, [pc, #144]	; (8004bd8 <HAL_DMA_Init+0x1ec>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d009      	beq.n	8004b60 <HAL_DMA_Init+0x174>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a22      	ldr	r2, [pc, #136]	; (8004bdc <HAL_DMA_Init+0x1f0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <HAL_DMA_Init+0x174>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a21      	ldr	r2, [pc, #132]	; (8004be0 <HAL_DMA_Init+0x1f4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d108      	bne.n	8004b72 <HAL_DMA_Init+0x186>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0201 	bic.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	e007      	b.n	8004b82 <HAL_DMA_Init+0x196>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0201 	bic.w	r2, r2, #1
 8004b80:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b82:	e02f      	b.n	8004be4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b84:	f7ff fb24 	bl	80041d0 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b05      	cmp	r3, #5
 8004b90:	d928      	bls.n	8004be4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e2af      	b.n	8005104 <HAL_DMA_Init+0x718>
 8004ba4:	40020010 	.word	0x40020010
 8004ba8:	40020028 	.word	0x40020028
 8004bac:	40020040 	.word	0x40020040
 8004bb0:	40020058 	.word	0x40020058
 8004bb4:	40020070 	.word	0x40020070
 8004bb8:	40020088 	.word	0x40020088
 8004bbc:	400200a0 	.word	0x400200a0
 8004bc0:	400200b8 	.word	0x400200b8
 8004bc4:	40020410 	.word	0x40020410
 8004bc8:	40020428 	.word	0x40020428
 8004bcc:	40020440 	.word	0x40020440
 8004bd0:	40020458 	.word	0x40020458
 8004bd4:	40020470 	.word	0x40020470
 8004bd8:	40020488 	.word	0x40020488
 8004bdc:	400204a0 	.word	0x400204a0
 8004be0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1c8      	bne.n	8004b84 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	4b73      	ldr	r3, [pc, #460]	; (8004dcc <HAL_DMA_Init+0x3e0>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004c0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c16:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c22:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d107      	bne.n	8004c48 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	4313      	orrs	r3, r2
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2b28      	cmp	r3, #40	; 0x28
 8004c4e:	d903      	bls.n	8004c58 <HAL_DMA_Init+0x26c>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b2e      	cmp	r3, #46	; 0x2e
 8004c56:	d91f      	bls.n	8004c98 <HAL_DMA_Init+0x2ac>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b3e      	cmp	r3, #62	; 0x3e
 8004c5e:	d903      	bls.n	8004c68 <HAL_DMA_Init+0x27c>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	2b42      	cmp	r3, #66	; 0x42
 8004c66:	d917      	bls.n	8004c98 <HAL_DMA_Init+0x2ac>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b46      	cmp	r3, #70	; 0x46
 8004c6e:	d903      	bls.n	8004c78 <HAL_DMA_Init+0x28c>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b48      	cmp	r3, #72	; 0x48
 8004c76:	d90f      	bls.n	8004c98 <HAL_DMA_Init+0x2ac>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b4e      	cmp	r3, #78	; 0x4e
 8004c7e:	d903      	bls.n	8004c88 <HAL_DMA_Init+0x29c>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b52      	cmp	r3, #82	; 0x52
 8004c86:	d907      	bls.n	8004c98 <HAL_DMA_Init+0x2ac>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b73      	cmp	r3, #115	; 0x73
 8004c8e:	d905      	bls.n	8004c9c <HAL_DMA_Init+0x2b0>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b77      	cmp	r3, #119	; 0x77
 8004c96:	d801      	bhi.n	8004c9c <HAL_DMA_Init+0x2b0>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <HAL_DMA_Init+0x2b2>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ca8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f023 0307 	bic.w	r3, r3, #7
 8004cc0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d117      	bne.n	8004d04 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00e      	beq.n	8004d04 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f002 fbd6 	bl	8007498 <DMA_CheckFifoParam>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d008      	beq.n	8004d04 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2240      	movs	r2, #64	; 0x40
 8004cf6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e1ff      	b.n	8005104 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f002 fb11 	bl	8007334 <DMA_CalcBaseAndBitshift>
 8004d12:	4603      	mov	r3, r0
 8004d14:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1a:	f003 031f 	and.w	r3, r3, #31
 8004d1e:	223f      	movs	r2, #63	; 0x3f
 8004d20:	409a      	lsls	r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	609a      	str	r2, [r3, #8]
 8004d26:	e0fe      	b.n	8004f26 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a28      	ldr	r2, [pc, #160]	; (8004dd0 <HAL_DMA_Init+0x3e4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d04a      	beq.n	8004dc8 <HAL_DMA_Init+0x3dc>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a27      	ldr	r2, [pc, #156]	; (8004dd4 <HAL_DMA_Init+0x3e8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d045      	beq.n	8004dc8 <HAL_DMA_Init+0x3dc>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a25      	ldr	r2, [pc, #148]	; (8004dd8 <HAL_DMA_Init+0x3ec>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d040      	beq.n	8004dc8 <HAL_DMA_Init+0x3dc>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a24      	ldr	r2, [pc, #144]	; (8004ddc <HAL_DMA_Init+0x3f0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d03b      	beq.n	8004dc8 <HAL_DMA_Init+0x3dc>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a22      	ldr	r2, [pc, #136]	; (8004de0 <HAL_DMA_Init+0x3f4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d036      	beq.n	8004dc8 <HAL_DMA_Init+0x3dc>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a21      	ldr	r2, [pc, #132]	; (8004de4 <HAL_DMA_Init+0x3f8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d031      	beq.n	8004dc8 <HAL_DMA_Init+0x3dc>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1f      	ldr	r2, [pc, #124]	; (8004de8 <HAL_DMA_Init+0x3fc>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d02c      	beq.n	8004dc8 <HAL_DMA_Init+0x3dc>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1e      	ldr	r2, [pc, #120]	; (8004dec <HAL_DMA_Init+0x400>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d027      	beq.n	8004dc8 <HAL_DMA_Init+0x3dc>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a1c      	ldr	r2, [pc, #112]	; (8004df0 <HAL_DMA_Init+0x404>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d022      	beq.n	8004dc8 <HAL_DMA_Init+0x3dc>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a1b      	ldr	r2, [pc, #108]	; (8004df4 <HAL_DMA_Init+0x408>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d01d      	beq.n	8004dc8 <HAL_DMA_Init+0x3dc>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a19      	ldr	r2, [pc, #100]	; (8004df8 <HAL_DMA_Init+0x40c>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d018      	beq.n	8004dc8 <HAL_DMA_Init+0x3dc>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a18      	ldr	r2, [pc, #96]	; (8004dfc <HAL_DMA_Init+0x410>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d013      	beq.n	8004dc8 <HAL_DMA_Init+0x3dc>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a16      	ldr	r2, [pc, #88]	; (8004e00 <HAL_DMA_Init+0x414>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00e      	beq.n	8004dc8 <HAL_DMA_Init+0x3dc>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a15      	ldr	r2, [pc, #84]	; (8004e04 <HAL_DMA_Init+0x418>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d009      	beq.n	8004dc8 <HAL_DMA_Init+0x3dc>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a13      	ldr	r2, [pc, #76]	; (8004e08 <HAL_DMA_Init+0x41c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <HAL_DMA_Init+0x3dc>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a12      	ldr	r2, [pc, #72]	; (8004e0c <HAL_DMA_Init+0x420>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d123      	bne.n	8004e10 <HAL_DMA_Init+0x424>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e022      	b.n	8004e12 <HAL_DMA_Init+0x426>
 8004dcc:	fe10803f 	.word	0xfe10803f
 8004dd0:	48022c08 	.word	0x48022c08
 8004dd4:	48022c1c 	.word	0x48022c1c
 8004dd8:	48022c30 	.word	0x48022c30
 8004ddc:	48022c44 	.word	0x48022c44
 8004de0:	48022c58 	.word	0x48022c58
 8004de4:	48022c6c 	.word	0x48022c6c
 8004de8:	48022c80 	.word	0x48022c80
 8004dec:	48022c94 	.word	0x48022c94
 8004df0:	58025408 	.word	0x58025408
 8004df4:	5802541c 	.word	0x5802541c
 8004df8:	58025430 	.word	0x58025430
 8004dfc:	58025444 	.word	0x58025444
 8004e00:	58025458 	.word	0x58025458
 8004e04:	5802546c 	.word	0x5802546c
 8004e08:	58025480 	.word	0x58025480
 8004e0c:	58025494 	.word	0x58025494
 8004e10:	2300      	movs	r3, #0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d07e      	beq.n	8004f14 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a80      	ldr	r2, [pc, #512]	; (800501c <HAL_DMA_Init+0x630>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d021      	beq.n	8004e64 <HAL_DMA_Init+0x478>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a7e      	ldr	r2, [pc, #504]	; (8005020 <HAL_DMA_Init+0x634>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d01c      	beq.n	8004e64 <HAL_DMA_Init+0x478>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a7d      	ldr	r2, [pc, #500]	; (8005024 <HAL_DMA_Init+0x638>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d017      	beq.n	8004e64 <HAL_DMA_Init+0x478>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a7b      	ldr	r2, [pc, #492]	; (8005028 <HAL_DMA_Init+0x63c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d012      	beq.n	8004e64 <HAL_DMA_Init+0x478>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a7a      	ldr	r2, [pc, #488]	; (800502c <HAL_DMA_Init+0x640>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00d      	beq.n	8004e64 <HAL_DMA_Init+0x478>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a78      	ldr	r2, [pc, #480]	; (8005030 <HAL_DMA_Init+0x644>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d008      	beq.n	8004e64 <HAL_DMA_Init+0x478>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a77      	ldr	r2, [pc, #476]	; (8005034 <HAL_DMA_Init+0x648>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d003      	beq.n	8004e64 <HAL_DMA_Init+0x478>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a75      	ldr	r2, [pc, #468]	; (8005038 <HAL_DMA_Init+0x64c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4b6e      	ldr	r3, [pc, #440]	; (800503c <HAL_DMA_Init+0x650>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b40      	cmp	r3, #64	; 0x40
 8004e8c:	d008      	beq.n	8004ea0 <HAL_DMA_Init+0x4b4>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2b80      	cmp	r3, #128	; 0x80
 8004e94:	d102      	bne.n	8004e9c <HAL_DMA_Init+0x4b0>
 8004e96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e9a:	e002      	b.n	8004ea2 <HAL_DMA_Init+0x4b6>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	e000      	b.n	8004ea2 <HAL_DMA_Init+0x4b6>
 8004ea0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68d2      	ldr	r2, [r2, #12]
 8004ea6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ea8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004eb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004eb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ec0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ec8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ed0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	4b56      	ldr	r3, [pc, #344]	; (8005040 <HAL_DMA_Init+0x654>)
 8004ee8:	4413      	add	r3, r2
 8004eea:	4a56      	ldr	r2, [pc, #344]	; (8005044 <HAL_DMA_Init+0x658>)
 8004eec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef0:	091b      	lsrs	r3, r3, #4
 8004ef2:	009a      	lsls	r2, r3, #2
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f002 fa1b 	bl	8007334 <DMA_CalcBaseAndBitshift>
 8004efe:	4603      	mov	r3, r0
 8004f00:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f06:	f003 031f 	and.w	r3, r3, #31
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	409a      	lsls	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	605a      	str	r2, [r3, #4]
 8004f12:	e008      	b.n	8004f26 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2240      	movs	r2, #64	; 0x40
 8004f18:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2203      	movs	r2, #3
 8004f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e0ee      	b.n	8005104 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a47      	ldr	r2, [pc, #284]	; (8005048 <HAL_DMA_Init+0x65c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d072      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a45      	ldr	r2, [pc, #276]	; (800504c <HAL_DMA_Init+0x660>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d06d      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a44      	ldr	r2, [pc, #272]	; (8005050 <HAL_DMA_Init+0x664>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d068      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a42      	ldr	r2, [pc, #264]	; (8005054 <HAL_DMA_Init+0x668>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d063      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a41      	ldr	r2, [pc, #260]	; (8005058 <HAL_DMA_Init+0x66c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d05e      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a3f      	ldr	r2, [pc, #252]	; (800505c <HAL_DMA_Init+0x670>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d059      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a3e      	ldr	r2, [pc, #248]	; (8005060 <HAL_DMA_Init+0x674>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d054      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a3c      	ldr	r2, [pc, #240]	; (8005064 <HAL_DMA_Init+0x678>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d04f      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a3b      	ldr	r2, [pc, #236]	; (8005068 <HAL_DMA_Init+0x67c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d04a      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a39      	ldr	r2, [pc, #228]	; (800506c <HAL_DMA_Init+0x680>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d045      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a38      	ldr	r2, [pc, #224]	; (8005070 <HAL_DMA_Init+0x684>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d040      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a36      	ldr	r2, [pc, #216]	; (8005074 <HAL_DMA_Init+0x688>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d03b      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a35      	ldr	r2, [pc, #212]	; (8005078 <HAL_DMA_Init+0x68c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d036      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a33      	ldr	r2, [pc, #204]	; (800507c <HAL_DMA_Init+0x690>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d031      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a32      	ldr	r2, [pc, #200]	; (8005080 <HAL_DMA_Init+0x694>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d02c      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a30      	ldr	r2, [pc, #192]	; (8005084 <HAL_DMA_Init+0x698>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d027      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a14      	ldr	r2, [pc, #80]	; (800501c <HAL_DMA_Init+0x630>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d022      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a12      	ldr	r2, [pc, #72]	; (8005020 <HAL_DMA_Init+0x634>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d01d      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a11      	ldr	r2, [pc, #68]	; (8005024 <HAL_DMA_Init+0x638>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d018      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a0f      	ldr	r2, [pc, #60]	; (8005028 <HAL_DMA_Init+0x63c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d013      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a0e      	ldr	r2, [pc, #56]	; (800502c <HAL_DMA_Init+0x640>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00e      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a0c      	ldr	r2, [pc, #48]	; (8005030 <HAL_DMA_Init+0x644>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d009      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a0b      	ldr	r2, [pc, #44]	; (8005034 <HAL_DMA_Init+0x648>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d004      	beq.n	8005016 <HAL_DMA_Init+0x62a>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a09      	ldr	r2, [pc, #36]	; (8005038 <HAL_DMA_Init+0x64c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d138      	bne.n	8005088 <HAL_DMA_Init+0x69c>
 8005016:	2301      	movs	r3, #1
 8005018:	e037      	b.n	800508a <HAL_DMA_Init+0x69e>
 800501a:	bf00      	nop
 800501c:	58025408 	.word	0x58025408
 8005020:	5802541c 	.word	0x5802541c
 8005024:	58025430 	.word	0x58025430
 8005028:	58025444 	.word	0x58025444
 800502c:	58025458 	.word	0x58025458
 8005030:	5802546c 	.word	0x5802546c
 8005034:	58025480 	.word	0x58025480
 8005038:	58025494 	.word	0x58025494
 800503c:	fffe000f 	.word	0xfffe000f
 8005040:	a7fdabf8 	.word	0xa7fdabf8
 8005044:	cccccccd 	.word	0xcccccccd
 8005048:	40020010 	.word	0x40020010
 800504c:	40020028 	.word	0x40020028
 8005050:	40020040 	.word	0x40020040
 8005054:	40020058 	.word	0x40020058
 8005058:	40020070 	.word	0x40020070
 800505c:	40020088 	.word	0x40020088
 8005060:	400200a0 	.word	0x400200a0
 8005064:	400200b8 	.word	0x400200b8
 8005068:	40020410 	.word	0x40020410
 800506c:	40020428 	.word	0x40020428
 8005070:	40020440 	.word	0x40020440
 8005074:	40020458 	.word	0x40020458
 8005078:	40020470 	.word	0x40020470
 800507c:	40020488 	.word	0x40020488
 8005080:	400204a0 	.word	0x400204a0
 8005084:	400204b8 	.word	0x400204b8
 8005088:	2300      	movs	r3, #0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d032      	beq.n	80050f4 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f002 fa7e 	bl	8007590 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	2b80      	cmp	r3, #128	; 0x80
 800509a:	d102      	bne.n	80050a2 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80050b6:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d010      	beq.n	80050e2 <HAL_DMA_Init+0x6f6>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d80c      	bhi.n	80050e2 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f002 fafb 	bl	80076c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050de:	605a      	str	r2, [r3, #4]
 80050e0:	e008      	b.n	80050f4 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e226      	b.n	8005576 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_DMA_Start_IT+0x2a>
 8005132:	2302      	movs	r3, #2
 8005134:	e21f      	b.n	8005576 <HAL_DMA_Start_IT+0x46a>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b01      	cmp	r3, #1
 8005148:	f040 820a 	bne.w	8005560 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a68      	ldr	r2, [pc, #416]	; (8005300 <HAL_DMA_Start_IT+0x1f4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d04a      	beq.n	80051fa <HAL_DMA_Start_IT+0xee>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a66      	ldr	r2, [pc, #408]	; (8005304 <HAL_DMA_Start_IT+0x1f8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d045      	beq.n	80051fa <HAL_DMA_Start_IT+0xee>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a65      	ldr	r2, [pc, #404]	; (8005308 <HAL_DMA_Start_IT+0x1fc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d040      	beq.n	80051fa <HAL_DMA_Start_IT+0xee>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a63      	ldr	r2, [pc, #396]	; (800530c <HAL_DMA_Start_IT+0x200>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d03b      	beq.n	80051fa <HAL_DMA_Start_IT+0xee>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a62      	ldr	r2, [pc, #392]	; (8005310 <HAL_DMA_Start_IT+0x204>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d036      	beq.n	80051fa <HAL_DMA_Start_IT+0xee>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a60      	ldr	r2, [pc, #384]	; (8005314 <HAL_DMA_Start_IT+0x208>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d031      	beq.n	80051fa <HAL_DMA_Start_IT+0xee>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a5f      	ldr	r2, [pc, #380]	; (8005318 <HAL_DMA_Start_IT+0x20c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d02c      	beq.n	80051fa <HAL_DMA_Start_IT+0xee>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a5d      	ldr	r2, [pc, #372]	; (800531c <HAL_DMA_Start_IT+0x210>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d027      	beq.n	80051fa <HAL_DMA_Start_IT+0xee>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a5c      	ldr	r2, [pc, #368]	; (8005320 <HAL_DMA_Start_IT+0x214>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d022      	beq.n	80051fa <HAL_DMA_Start_IT+0xee>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a5a      	ldr	r2, [pc, #360]	; (8005324 <HAL_DMA_Start_IT+0x218>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d01d      	beq.n	80051fa <HAL_DMA_Start_IT+0xee>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a59      	ldr	r2, [pc, #356]	; (8005328 <HAL_DMA_Start_IT+0x21c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d018      	beq.n	80051fa <HAL_DMA_Start_IT+0xee>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a57      	ldr	r2, [pc, #348]	; (800532c <HAL_DMA_Start_IT+0x220>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d013      	beq.n	80051fa <HAL_DMA_Start_IT+0xee>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a56      	ldr	r2, [pc, #344]	; (8005330 <HAL_DMA_Start_IT+0x224>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00e      	beq.n	80051fa <HAL_DMA_Start_IT+0xee>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a54      	ldr	r2, [pc, #336]	; (8005334 <HAL_DMA_Start_IT+0x228>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d009      	beq.n	80051fa <HAL_DMA_Start_IT+0xee>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a53      	ldr	r2, [pc, #332]	; (8005338 <HAL_DMA_Start_IT+0x22c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d004      	beq.n	80051fa <HAL_DMA_Start_IT+0xee>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a51      	ldr	r2, [pc, #324]	; (800533c <HAL_DMA_Start_IT+0x230>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d108      	bne.n	800520c <HAL_DMA_Start_IT+0x100>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0201 	bic.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	e007      	b.n	800521c <HAL_DMA_Start_IT+0x110>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0201 	bic.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f001 fea2 	bl	8006f6c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a34      	ldr	r2, [pc, #208]	; (8005300 <HAL_DMA_Start_IT+0x1f4>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d04a      	beq.n	80052c8 <HAL_DMA_Start_IT+0x1bc>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a33      	ldr	r2, [pc, #204]	; (8005304 <HAL_DMA_Start_IT+0x1f8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d045      	beq.n	80052c8 <HAL_DMA_Start_IT+0x1bc>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a31      	ldr	r2, [pc, #196]	; (8005308 <HAL_DMA_Start_IT+0x1fc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d040      	beq.n	80052c8 <HAL_DMA_Start_IT+0x1bc>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a30      	ldr	r2, [pc, #192]	; (800530c <HAL_DMA_Start_IT+0x200>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d03b      	beq.n	80052c8 <HAL_DMA_Start_IT+0x1bc>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a2e      	ldr	r2, [pc, #184]	; (8005310 <HAL_DMA_Start_IT+0x204>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d036      	beq.n	80052c8 <HAL_DMA_Start_IT+0x1bc>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a2d      	ldr	r2, [pc, #180]	; (8005314 <HAL_DMA_Start_IT+0x208>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d031      	beq.n	80052c8 <HAL_DMA_Start_IT+0x1bc>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a2b      	ldr	r2, [pc, #172]	; (8005318 <HAL_DMA_Start_IT+0x20c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d02c      	beq.n	80052c8 <HAL_DMA_Start_IT+0x1bc>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a2a      	ldr	r2, [pc, #168]	; (800531c <HAL_DMA_Start_IT+0x210>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d027      	beq.n	80052c8 <HAL_DMA_Start_IT+0x1bc>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a28      	ldr	r2, [pc, #160]	; (8005320 <HAL_DMA_Start_IT+0x214>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d022      	beq.n	80052c8 <HAL_DMA_Start_IT+0x1bc>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a27      	ldr	r2, [pc, #156]	; (8005324 <HAL_DMA_Start_IT+0x218>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d01d      	beq.n	80052c8 <HAL_DMA_Start_IT+0x1bc>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a25      	ldr	r2, [pc, #148]	; (8005328 <HAL_DMA_Start_IT+0x21c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d018      	beq.n	80052c8 <HAL_DMA_Start_IT+0x1bc>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a24      	ldr	r2, [pc, #144]	; (800532c <HAL_DMA_Start_IT+0x220>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d013      	beq.n	80052c8 <HAL_DMA_Start_IT+0x1bc>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a22      	ldr	r2, [pc, #136]	; (8005330 <HAL_DMA_Start_IT+0x224>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d00e      	beq.n	80052c8 <HAL_DMA_Start_IT+0x1bc>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a21      	ldr	r2, [pc, #132]	; (8005334 <HAL_DMA_Start_IT+0x228>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d009      	beq.n	80052c8 <HAL_DMA_Start_IT+0x1bc>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1f      	ldr	r2, [pc, #124]	; (8005338 <HAL_DMA_Start_IT+0x22c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d004      	beq.n	80052c8 <HAL_DMA_Start_IT+0x1bc>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a1e      	ldr	r2, [pc, #120]	; (800533c <HAL_DMA_Start_IT+0x230>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d101      	bne.n	80052cc <HAL_DMA_Start_IT+0x1c0>
 80052c8:	2301      	movs	r3, #1
 80052ca:	e000      	b.n	80052ce <HAL_DMA_Start_IT+0x1c2>
 80052cc:	2300      	movs	r3, #0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d036      	beq.n	8005340 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f023 021e 	bic.w	r2, r3, #30
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0216 	orr.w	r2, r2, #22
 80052e4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d03e      	beq.n	800536c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0208 	orr.w	r2, r2, #8
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	e035      	b.n	800536c <HAL_DMA_Start_IT+0x260>
 8005300:	40020010 	.word	0x40020010
 8005304:	40020028 	.word	0x40020028
 8005308:	40020040 	.word	0x40020040
 800530c:	40020058 	.word	0x40020058
 8005310:	40020070 	.word	0x40020070
 8005314:	40020088 	.word	0x40020088
 8005318:	400200a0 	.word	0x400200a0
 800531c:	400200b8 	.word	0x400200b8
 8005320:	40020410 	.word	0x40020410
 8005324:	40020428 	.word	0x40020428
 8005328:	40020440 	.word	0x40020440
 800532c:	40020458 	.word	0x40020458
 8005330:	40020470 	.word	0x40020470
 8005334:	40020488 	.word	0x40020488
 8005338:	400204a0 	.word	0x400204a0
 800533c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f023 020e 	bic.w	r2, r3, #14
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 020a 	orr.w	r2, r2, #10
 8005352:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0204 	orr.w	r2, r2, #4
 800536a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a83      	ldr	r2, [pc, #524]	; (8005580 <HAL_DMA_Start_IT+0x474>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d072      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a82      	ldr	r2, [pc, #520]	; (8005584 <HAL_DMA_Start_IT+0x478>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d06d      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a80      	ldr	r2, [pc, #512]	; (8005588 <HAL_DMA_Start_IT+0x47c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d068      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a7f      	ldr	r2, [pc, #508]	; (800558c <HAL_DMA_Start_IT+0x480>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d063      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a7d      	ldr	r2, [pc, #500]	; (8005590 <HAL_DMA_Start_IT+0x484>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d05e      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a7c      	ldr	r2, [pc, #496]	; (8005594 <HAL_DMA_Start_IT+0x488>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d059      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a7a      	ldr	r2, [pc, #488]	; (8005598 <HAL_DMA_Start_IT+0x48c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d054      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a79      	ldr	r2, [pc, #484]	; (800559c <HAL_DMA_Start_IT+0x490>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d04f      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a77      	ldr	r2, [pc, #476]	; (80055a0 <HAL_DMA_Start_IT+0x494>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d04a      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a76      	ldr	r2, [pc, #472]	; (80055a4 <HAL_DMA_Start_IT+0x498>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d045      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a74      	ldr	r2, [pc, #464]	; (80055a8 <HAL_DMA_Start_IT+0x49c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d040      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a73      	ldr	r2, [pc, #460]	; (80055ac <HAL_DMA_Start_IT+0x4a0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d03b      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a71      	ldr	r2, [pc, #452]	; (80055b0 <HAL_DMA_Start_IT+0x4a4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d036      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a70      	ldr	r2, [pc, #448]	; (80055b4 <HAL_DMA_Start_IT+0x4a8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d031      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a6e      	ldr	r2, [pc, #440]	; (80055b8 <HAL_DMA_Start_IT+0x4ac>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d02c      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a6d      	ldr	r2, [pc, #436]	; (80055bc <HAL_DMA_Start_IT+0x4b0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d027      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a6b      	ldr	r2, [pc, #428]	; (80055c0 <HAL_DMA_Start_IT+0x4b4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d022      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a6a      	ldr	r2, [pc, #424]	; (80055c4 <HAL_DMA_Start_IT+0x4b8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d01d      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a68      	ldr	r2, [pc, #416]	; (80055c8 <HAL_DMA_Start_IT+0x4bc>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d018      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a67      	ldr	r2, [pc, #412]	; (80055cc <HAL_DMA_Start_IT+0x4c0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d013      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a65      	ldr	r2, [pc, #404]	; (80055d0 <HAL_DMA_Start_IT+0x4c4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00e      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a64      	ldr	r2, [pc, #400]	; (80055d4 <HAL_DMA_Start_IT+0x4c8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d009      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a62      	ldr	r2, [pc, #392]	; (80055d8 <HAL_DMA_Start_IT+0x4cc>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d004      	beq.n	800545c <HAL_DMA_Start_IT+0x350>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a61      	ldr	r2, [pc, #388]	; (80055dc <HAL_DMA_Start_IT+0x4d0>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d101      	bne.n	8005460 <HAL_DMA_Start_IT+0x354>
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <HAL_DMA_Start_IT+0x356>
 8005460:	2300      	movs	r3, #0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01a      	beq.n	800549c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d007      	beq.n	8005484 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005482:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005488:	2b00      	cmp	r3, #0
 800548a:	d007      	beq.n	800549c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800549a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a37      	ldr	r2, [pc, #220]	; (8005580 <HAL_DMA_Start_IT+0x474>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d04a      	beq.n	800553c <HAL_DMA_Start_IT+0x430>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a36      	ldr	r2, [pc, #216]	; (8005584 <HAL_DMA_Start_IT+0x478>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d045      	beq.n	800553c <HAL_DMA_Start_IT+0x430>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a34      	ldr	r2, [pc, #208]	; (8005588 <HAL_DMA_Start_IT+0x47c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d040      	beq.n	800553c <HAL_DMA_Start_IT+0x430>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a33      	ldr	r2, [pc, #204]	; (800558c <HAL_DMA_Start_IT+0x480>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d03b      	beq.n	800553c <HAL_DMA_Start_IT+0x430>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a31      	ldr	r2, [pc, #196]	; (8005590 <HAL_DMA_Start_IT+0x484>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d036      	beq.n	800553c <HAL_DMA_Start_IT+0x430>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a30      	ldr	r2, [pc, #192]	; (8005594 <HAL_DMA_Start_IT+0x488>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d031      	beq.n	800553c <HAL_DMA_Start_IT+0x430>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a2e      	ldr	r2, [pc, #184]	; (8005598 <HAL_DMA_Start_IT+0x48c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d02c      	beq.n	800553c <HAL_DMA_Start_IT+0x430>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a2d      	ldr	r2, [pc, #180]	; (800559c <HAL_DMA_Start_IT+0x490>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d027      	beq.n	800553c <HAL_DMA_Start_IT+0x430>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a2b      	ldr	r2, [pc, #172]	; (80055a0 <HAL_DMA_Start_IT+0x494>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d022      	beq.n	800553c <HAL_DMA_Start_IT+0x430>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a2a      	ldr	r2, [pc, #168]	; (80055a4 <HAL_DMA_Start_IT+0x498>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d01d      	beq.n	800553c <HAL_DMA_Start_IT+0x430>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a28      	ldr	r2, [pc, #160]	; (80055a8 <HAL_DMA_Start_IT+0x49c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d018      	beq.n	800553c <HAL_DMA_Start_IT+0x430>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a27      	ldr	r2, [pc, #156]	; (80055ac <HAL_DMA_Start_IT+0x4a0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d013      	beq.n	800553c <HAL_DMA_Start_IT+0x430>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a25      	ldr	r2, [pc, #148]	; (80055b0 <HAL_DMA_Start_IT+0x4a4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00e      	beq.n	800553c <HAL_DMA_Start_IT+0x430>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a24      	ldr	r2, [pc, #144]	; (80055b4 <HAL_DMA_Start_IT+0x4a8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d009      	beq.n	800553c <HAL_DMA_Start_IT+0x430>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a22      	ldr	r2, [pc, #136]	; (80055b8 <HAL_DMA_Start_IT+0x4ac>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <HAL_DMA_Start_IT+0x430>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a21      	ldr	r2, [pc, #132]	; (80055bc <HAL_DMA_Start_IT+0x4b0>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d108      	bne.n	800554e <HAL_DMA_Start_IT+0x442>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 0201 	orr.w	r2, r2, #1
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	e012      	b.n	8005574 <HAL_DMA_Start_IT+0x468>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0201 	orr.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e009      	b.n	8005574 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005566:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005574:	7dfb      	ldrb	r3, [r7, #23]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40020010 	.word	0x40020010
 8005584:	40020028 	.word	0x40020028
 8005588:	40020040 	.word	0x40020040
 800558c:	40020058 	.word	0x40020058
 8005590:	40020070 	.word	0x40020070
 8005594:	40020088 	.word	0x40020088
 8005598:	400200a0 	.word	0x400200a0
 800559c:	400200b8 	.word	0x400200b8
 80055a0:	40020410 	.word	0x40020410
 80055a4:	40020428 	.word	0x40020428
 80055a8:	40020440 	.word	0x40020440
 80055ac:	40020458 	.word	0x40020458
 80055b0:	40020470 	.word	0x40020470
 80055b4:	40020488 	.word	0x40020488
 80055b8:	400204a0 	.word	0x400204a0
 80055bc:	400204b8 	.word	0x400204b8
 80055c0:	58025408 	.word	0x58025408
 80055c4:	5802541c 	.word	0x5802541c
 80055c8:	58025430 	.word	0x58025430
 80055cc:	58025444 	.word	0x58025444
 80055d0:	58025458 	.word	0x58025458
 80055d4:	5802546c 	.word	0x5802546c
 80055d8:	58025480 	.word	0x58025480
 80055dc:	58025494 	.word	0x58025494

080055e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80055e8:	f7fe fdf2 	bl	80041d0 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e2dc      	b.n	8005bb2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d008      	beq.n	8005616 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2280      	movs	r2, #128	; 0x80
 8005608:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e2cd      	b.n	8005bb2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a76      	ldr	r2, [pc, #472]	; (80057f4 <HAL_DMA_Abort+0x214>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d04a      	beq.n	80056b6 <HAL_DMA_Abort+0xd6>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a74      	ldr	r2, [pc, #464]	; (80057f8 <HAL_DMA_Abort+0x218>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d045      	beq.n	80056b6 <HAL_DMA_Abort+0xd6>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a73      	ldr	r2, [pc, #460]	; (80057fc <HAL_DMA_Abort+0x21c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d040      	beq.n	80056b6 <HAL_DMA_Abort+0xd6>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a71      	ldr	r2, [pc, #452]	; (8005800 <HAL_DMA_Abort+0x220>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d03b      	beq.n	80056b6 <HAL_DMA_Abort+0xd6>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a70      	ldr	r2, [pc, #448]	; (8005804 <HAL_DMA_Abort+0x224>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d036      	beq.n	80056b6 <HAL_DMA_Abort+0xd6>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a6e      	ldr	r2, [pc, #440]	; (8005808 <HAL_DMA_Abort+0x228>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d031      	beq.n	80056b6 <HAL_DMA_Abort+0xd6>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a6d      	ldr	r2, [pc, #436]	; (800580c <HAL_DMA_Abort+0x22c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d02c      	beq.n	80056b6 <HAL_DMA_Abort+0xd6>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a6b      	ldr	r2, [pc, #428]	; (8005810 <HAL_DMA_Abort+0x230>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d027      	beq.n	80056b6 <HAL_DMA_Abort+0xd6>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a6a      	ldr	r2, [pc, #424]	; (8005814 <HAL_DMA_Abort+0x234>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d022      	beq.n	80056b6 <HAL_DMA_Abort+0xd6>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a68      	ldr	r2, [pc, #416]	; (8005818 <HAL_DMA_Abort+0x238>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d01d      	beq.n	80056b6 <HAL_DMA_Abort+0xd6>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a67      	ldr	r2, [pc, #412]	; (800581c <HAL_DMA_Abort+0x23c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d018      	beq.n	80056b6 <HAL_DMA_Abort+0xd6>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a65      	ldr	r2, [pc, #404]	; (8005820 <HAL_DMA_Abort+0x240>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d013      	beq.n	80056b6 <HAL_DMA_Abort+0xd6>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a64      	ldr	r2, [pc, #400]	; (8005824 <HAL_DMA_Abort+0x244>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00e      	beq.n	80056b6 <HAL_DMA_Abort+0xd6>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a62      	ldr	r2, [pc, #392]	; (8005828 <HAL_DMA_Abort+0x248>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d009      	beq.n	80056b6 <HAL_DMA_Abort+0xd6>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a61      	ldr	r2, [pc, #388]	; (800582c <HAL_DMA_Abort+0x24c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d004      	beq.n	80056b6 <HAL_DMA_Abort+0xd6>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a5f      	ldr	r2, [pc, #380]	; (8005830 <HAL_DMA_Abort+0x250>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d101      	bne.n	80056ba <HAL_DMA_Abort+0xda>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <HAL_DMA_Abort+0xdc>
 80056ba:	2300      	movs	r3, #0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d013      	beq.n	80056e8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 021e 	bic.w	r2, r2, #30
 80056ce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695a      	ldr	r2, [r3, #20]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056de:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	e00a      	b.n	80056fe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 020e 	bic.w	r2, r2, #14
 80056f6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a3c      	ldr	r2, [pc, #240]	; (80057f4 <HAL_DMA_Abort+0x214>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d072      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a3a      	ldr	r2, [pc, #232]	; (80057f8 <HAL_DMA_Abort+0x218>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d06d      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a39      	ldr	r2, [pc, #228]	; (80057fc <HAL_DMA_Abort+0x21c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d068      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a37      	ldr	r2, [pc, #220]	; (8005800 <HAL_DMA_Abort+0x220>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d063      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a36      	ldr	r2, [pc, #216]	; (8005804 <HAL_DMA_Abort+0x224>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d05e      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a34      	ldr	r2, [pc, #208]	; (8005808 <HAL_DMA_Abort+0x228>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d059      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a33      	ldr	r2, [pc, #204]	; (800580c <HAL_DMA_Abort+0x22c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d054      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a31      	ldr	r2, [pc, #196]	; (8005810 <HAL_DMA_Abort+0x230>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d04f      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a30      	ldr	r2, [pc, #192]	; (8005814 <HAL_DMA_Abort+0x234>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d04a      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a2e      	ldr	r2, [pc, #184]	; (8005818 <HAL_DMA_Abort+0x238>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d045      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a2d      	ldr	r2, [pc, #180]	; (800581c <HAL_DMA_Abort+0x23c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d040      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a2b      	ldr	r2, [pc, #172]	; (8005820 <HAL_DMA_Abort+0x240>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d03b      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a2a      	ldr	r2, [pc, #168]	; (8005824 <HAL_DMA_Abort+0x244>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d036      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a28      	ldr	r2, [pc, #160]	; (8005828 <HAL_DMA_Abort+0x248>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d031      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a27      	ldr	r2, [pc, #156]	; (800582c <HAL_DMA_Abort+0x24c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d02c      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a25      	ldr	r2, [pc, #148]	; (8005830 <HAL_DMA_Abort+0x250>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d027      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a24      	ldr	r2, [pc, #144]	; (8005834 <HAL_DMA_Abort+0x254>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d022      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a22      	ldr	r2, [pc, #136]	; (8005838 <HAL_DMA_Abort+0x258>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d01d      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a21      	ldr	r2, [pc, #132]	; (800583c <HAL_DMA_Abort+0x25c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d018      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1f      	ldr	r2, [pc, #124]	; (8005840 <HAL_DMA_Abort+0x260>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d013      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1e      	ldr	r2, [pc, #120]	; (8005844 <HAL_DMA_Abort+0x264>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00e      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1c      	ldr	r2, [pc, #112]	; (8005848 <HAL_DMA_Abort+0x268>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d009      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a1b      	ldr	r2, [pc, #108]	; (800584c <HAL_DMA_Abort+0x26c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d004      	beq.n	80057ee <HAL_DMA_Abort+0x20e>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a19      	ldr	r2, [pc, #100]	; (8005850 <HAL_DMA_Abort+0x270>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d132      	bne.n	8005854 <HAL_DMA_Abort+0x274>
 80057ee:	2301      	movs	r3, #1
 80057f0:	e031      	b.n	8005856 <HAL_DMA_Abort+0x276>
 80057f2:	bf00      	nop
 80057f4:	40020010 	.word	0x40020010
 80057f8:	40020028 	.word	0x40020028
 80057fc:	40020040 	.word	0x40020040
 8005800:	40020058 	.word	0x40020058
 8005804:	40020070 	.word	0x40020070
 8005808:	40020088 	.word	0x40020088
 800580c:	400200a0 	.word	0x400200a0
 8005810:	400200b8 	.word	0x400200b8
 8005814:	40020410 	.word	0x40020410
 8005818:	40020428 	.word	0x40020428
 800581c:	40020440 	.word	0x40020440
 8005820:	40020458 	.word	0x40020458
 8005824:	40020470 	.word	0x40020470
 8005828:	40020488 	.word	0x40020488
 800582c:	400204a0 	.word	0x400204a0
 8005830:	400204b8 	.word	0x400204b8
 8005834:	58025408 	.word	0x58025408
 8005838:	5802541c 	.word	0x5802541c
 800583c:	58025430 	.word	0x58025430
 8005840:	58025444 	.word	0x58025444
 8005844:	58025458 	.word	0x58025458
 8005848:	5802546c 	.word	0x5802546c
 800584c:	58025480 	.word	0x58025480
 8005850:	58025494 	.word	0x58025494
 8005854:	2300      	movs	r3, #0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d007      	beq.n	800586a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005864:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005868:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a6d      	ldr	r2, [pc, #436]	; (8005a24 <HAL_DMA_Abort+0x444>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d04a      	beq.n	800590a <HAL_DMA_Abort+0x32a>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a6b      	ldr	r2, [pc, #428]	; (8005a28 <HAL_DMA_Abort+0x448>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d045      	beq.n	800590a <HAL_DMA_Abort+0x32a>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a6a      	ldr	r2, [pc, #424]	; (8005a2c <HAL_DMA_Abort+0x44c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d040      	beq.n	800590a <HAL_DMA_Abort+0x32a>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a68      	ldr	r2, [pc, #416]	; (8005a30 <HAL_DMA_Abort+0x450>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d03b      	beq.n	800590a <HAL_DMA_Abort+0x32a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a67      	ldr	r2, [pc, #412]	; (8005a34 <HAL_DMA_Abort+0x454>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d036      	beq.n	800590a <HAL_DMA_Abort+0x32a>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a65      	ldr	r2, [pc, #404]	; (8005a38 <HAL_DMA_Abort+0x458>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d031      	beq.n	800590a <HAL_DMA_Abort+0x32a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a64      	ldr	r2, [pc, #400]	; (8005a3c <HAL_DMA_Abort+0x45c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d02c      	beq.n	800590a <HAL_DMA_Abort+0x32a>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a62      	ldr	r2, [pc, #392]	; (8005a40 <HAL_DMA_Abort+0x460>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d027      	beq.n	800590a <HAL_DMA_Abort+0x32a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a61      	ldr	r2, [pc, #388]	; (8005a44 <HAL_DMA_Abort+0x464>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d022      	beq.n	800590a <HAL_DMA_Abort+0x32a>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a5f      	ldr	r2, [pc, #380]	; (8005a48 <HAL_DMA_Abort+0x468>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d01d      	beq.n	800590a <HAL_DMA_Abort+0x32a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a5e      	ldr	r2, [pc, #376]	; (8005a4c <HAL_DMA_Abort+0x46c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d018      	beq.n	800590a <HAL_DMA_Abort+0x32a>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a5c      	ldr	r2, [pc, #368]	; (8005a50 <HAL_DMA_Abort+0x470>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d013      	beq.n	800590a <HAL_DMA_Abort+0x32a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a5b      	ldr	r2, [pc, #364]	; (8005a54 <HAL_DMA_Abort+0x474>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d00e      	beq.n	800590a <HAL_DMA_Abort+0x32a>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a59      	ldr	r2, [pc, #356]	; (8005a58 <HAL_DMA_Abort+0x478>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d009      	beq.n	800590a <HAL_DMA_Abort+0x32a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a58      	ldr	r2, [pc, #352]	; (8005a5c <HAL_DMA_Abort+0x47c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d004      	beq.n	800590a <HAL_DMA_Abort+0x32a>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a56      	ldr	r2, [pc, #344]	; (8005a60 <HAL_DMA_Abort+0x480>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d108      	bne.n	800591c <HAL_DMA_Abort+0x33c>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0201 	bic.w	r2, r2, #1
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	e007      	b.n	800592c <HAL_DMA_Abort+0x34c>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0201 	bic.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800592c:	e013      	b.n	8005956 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800592e:	f7fe fc4f 	bl	80041d0 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b05      	cmp	r3, #5
 800593a:	d90c      	bls.n	8005956 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2220      	movs	r2, #32
 8005940:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2203      	movs	r2, #3
 8005946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e12d      	b.n	8005bb2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e5      	bne.n	800592e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a2f      	ldr	r2, [pc, #188]	; (8005a24 <HAL_DMA_Abort+0x444>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d04a      	beq.n	8005a02 <HAL_DMA_Abort+0x422>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a2d      	ldr	r2, [pc, #180]	; (8005a28 <HAL_DMA_Abort+0x448>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d045      	beq.n	8005a02 <HAL_DMA_Abort+0x422>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a2c      	ldr	r2, [pc, #176]	; (8005a2c <HAL_DMA_Abort+0x44c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d040      	beq.n	8005a02 <HAL_DMA_Abort+0x422>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a2a      	ldr	r2, [pc, #168]	; (8005a30 <HAL_DMA_Abort+0x450>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d03b      	beq.n	8005a02 <HAL_DMA_Abort+0x422>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a29      	ldr	r2, [pc, #164]	; (8005a34 <HAL_DMA_Abort+0x454>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d036      	beq.n	8005a02 <HAL_DMA_Abort+0x422>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a27      	ldr	r2, [pc, #156]	; (8005a38 <HAL_DMA_Abort+0x458>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d031      	beq.n	8005a02 <HAL_DMA_Abort+0x422>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a26      	ldr	r2, [pc, #152]	; (8005a3c <HAL_DMA_Abort+0x45c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d02c      	beq.n	8005a02 <HAL_DMA_Abort+0x422>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a24      	ldr	r2, [pc, #144]	; (8005a40 <HAL_DMA_Abort+0x460>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d027      	beq.n	8005a02 <HAL_DMA_Abort+0x422>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a23      	ldr	r2, [pc, #140]	; (8005a44 <HAL_DMA_Abort+0x464>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d022      	beq.n	8005a02 <HAL_DMA_Abort+0x422>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a21      	ldr	r2, [pc, #132]	; (8005a48 <HAL_DMA_Abort+0x468>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d01d      	beq.n	8005a02 <HAL_DMA_Abort+0x422>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a20      	ldr	r2, [pc, #128]	; (8005a4c <HAL_DMA_Abort+0x46c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d018      	beq.n	8005a02 <HAL_DMA_Abort+0x422>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a1e      	ldr	r2, [pc, #120]	; (8005a50 <HAL_DMA_Abort+0x470>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d013      	beq.n	8005a02 <HAL_DMA_Abort+0x422>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1d      	ldr	r2, [pc, #116]	; (8005a54 <HAL_DMA_Abort+0x474>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00e      	beq.n	8005a02 <HAL_DMA_Abort+0x422>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a1b      	ldr	r2, [pc, #108]	; (8005a58 <HAL_DMA_Abort+0x478>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d009      	beq.n	8005a02 <HAL_DMA_Abort+0x422>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a1a      	ldr	r2, [pc, #104]	; (8005a5c <HAL_DMA_Abort+0x47c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d004      	beq.n	8005a02 <HAL_DMA_Abort+0x422>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a18      	ldr	r2, [pc, #96]	; (8005a60 <HAL_DMA_Abort+0x480>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d101      	bne.n	8005a06 <HAL_DMA_Abort+0x426>
 8005a02:	2301      	movs	r3, #1
 8005a04:	e000      	b.n	8005a08 <HAL_DMA_Abort+0x428>
 8005a06:	2300      	movs	r3, #0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d02b      	beq.n	8005a64 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a10:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a16:	f003 031f 	and.w	r3, r3, #31
 8005a1a:	223f      	movs	r2, #63	; 0x3f
 8005a1c:	409a      	lsls	r2, r3
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	609a      	str	r2, [r3, #8]
 8005a22:	e02a      	b.n	8005a7a <HAL_DMA_Abort+0x49a>
 8005a24:	40020010 	.word	0x40020010
 8005a28:	40020028 	.word	0x40020028
 8005a2c:	40020040 	.word	0x40020040
 8005a30:	40020058 	.word	0x40020058
 8005a34:	40020070 	.word	0x40020070
 8005a38:	40020088 	.word	0x40020088
 8005a3c:	400200a0 	.word	0x400200a0
 8005a40:	400200b8 	.word	0x400200b8
 8005a44:	40020410 	.word	0x40020410
 8005a48:	40020428 	.word	0x40020428
 8005a4c:	40020440 	.word	0x40020440
 8005a50:	40020458 	.word	0x40020458
 8005a54:	40020470 	.word	0x40020470
 8005a58:	40020488 	.word	0x40020488
 8005a5c:	400204a0 	.word	0x400204a0
 8005a60:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a68:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6e:	f003 031f 	and.w	r3, r3, #31
 8005a72:	2201      	movs	r2, #1
 8005a74:	409a      	lsls	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a4f      	ldr	r2, [pc, #316]	; (8005bbc <HAL_DMA_Abort+0x5dc>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d072      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a4d      	ldr	r2, [pc, #308]	; (8005bc0 <HAL_DMA_Abort+0x5e0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d06d      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a4c      	ldr	r2, [pc, #304]	; (8005bc4 <HAL_DMA_Abort+0x5e4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d068      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a4a      	ldr	r2, [pc, #296]	; (8005bc8 <HAL_DMA_Abort+0x5e8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d063      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a49      	ldr	r2, [pc, #292]	; (8005bcc <HAL_DMA_Abort+0x5ec>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d05e      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a47      	ldr	r2, [pc, #284]	; (8005bd0 <HAL_DMA_Abort+0x5f0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d059      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a46      	ldr	r2, [pc, #280]	; (8005bd4 <HAL_DMA_Abort+0x5f4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d054      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a44      	ldr	r2, [pc, #272]	; (8005bd8 <HAL_DMA_Abort+0x5f8>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d04f      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a43      	ldr	r2, [pc, #268]	; (8005bdc <HAL_DMA_Abort+0x5fc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d04a      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a41      	ldr	r2, [pc, #260]	; (8005be0 <HAL_DMA_Abort+0x600>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d045      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a40      	ldr	r2, [pc, #256]	; (8005be4 <HAL_DMA_Abort+0x604>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d040      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a3e      	ldr	r2, [pc, #248]	; (8005be8 <HAL_DMA_Abort+0x608>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d03b      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a3d      	ldr	r2, [pc, #244]	; (8005bec <HAL_DMA_Abort+0x60c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d036      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a3b      	ldr	r2, [pc, #236]	; (8005bf0 <HAL_DMA_Abort+0x610>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d031      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a3a      	ldr	r2, [pc, #232]	; (8005bf4 <HAL_DMA_Abort+0x614>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d02c      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a38      	ldr	r2, [pc, #224]	; (8005bf8 <HAL_DMA_Abort+0x618>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d027      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a37      	ldr	r2, [pc, #220]	; (8005bfc <HAL_DMA_Abort+0x61c>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d022      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a35      	ldr	r2, [pc, #212]	; (8005c00 <HAL_DMA_Abort+0x620>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d01d      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a34      	ldr	r2, [pc, #208]	; (8005c04 <HAL_DMA_Abort+0x624>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d018      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a32      	ldr	r2, [pc, #200]	; (8005c08 <HAL_DMA_Abort+0x628>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d013      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a31      	ldr	r2, [pc, #196]	; (8005c0c <HAL_DMA_Abort+0x62c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00e      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a2f      	ldr	r2, [pc, #188]	; (8005c10 <HAL_DMA_Abort+0x630>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d009      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a2e      	ldr	r2, [pc, #184]	; (8005c14 <HAL_DMA_Abort+0x634>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d004      	beq.n	8005b6a <HAL_DMA_Abort+0x58a>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a2c      	ldr	r2, [pc, #176]	; (8005c18 <HAL_DMA_Abort+0x638>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d101      	bne.n	8005b6e <HAL_DMA_Abort+0x58e>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <HAL_DMA_Abort+0x590>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d015      	beq.n	8005ba0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b7c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00c      	beq.n	8005ba0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b94:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b9e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40020010 	.word	0x40020010
 8005bc0:	40020028 	.word	0x40020028
 8005bc4:	40020040 	.word	0x40020040
 8005bc8:	40020058 	.word	0x40020058
 8005bcc:	40020070 	.word	0x40020070
 8005bd0:	40020088 	.word	0x40020088
 8005bd4:	400200a0 	.word	0x400200a0
 8005bd8:	400200b8 	.word	0x400200b8
 8005bdc:	40020410 	.word	0x40020410
 8005be0:	40020428 	.word	0x40020428
 8005be4:	40020440 	.word	0x40020440
 8005be8:	40020458 	.word	0x40020458
 8005bec:	40020470 	.word	0x40020470
 8005bf0:	40020488 	.word	0x40020488
 8005bf4:	400204a0 	.word	0x400204a0
 8005bf8:	400204b8 	.word	0x400204b8
 8005bfc:	58025408 	.word	0x58025408
 8005c00:	5802541c 	.word	0x5802541c
 8005c04:	58025430 	.word	0x58025430
 8005c08:	58025444 	.word	0x58025444
 8005c0c:	58025458 	.word	0x58025458
 8005c10:	5802546c 	.word	0x5802546c
 8005c14:	58025480 	.word	0x58025480
 8005c18:	58025494 	.word	0x58025494

08005c1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e237      	b.n	800609e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d004      	beq.n	8005c44 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2280      	movs	r2, #128	; 0x80
 8005c3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e22c      	b.n	800609e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a5c      	ldr	r2, [pc, #368]	; (8005dbc <HAL_DMA_Abort_IT+0x1a0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d04a      	beq.n	8005ce4 <HAL_DMA_Abort_IT+0xc8>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a5b      	ldr	r2, [pc, #364]	; (8005dc0 <HAL_DMA_Abort_IT+0x1a4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d045      	beq.n	8005ce4 <HAL_DMA_Abort_IT+0xc8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a59      	ldr	r2, [pc, #356]	; (8005dc4 <HAL_DMA_Abort_IT+0x1a8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d040      	beq.n	8005ce4 <HAL_DMA_Abort_IT+0xc8>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a58      	ldr	r2, [pc, #352]	; (8005dc8 <HAL_DMA_Abort_IT+0x1ac>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d03b      	beq.n	8005ce4 <HAL_DMA_Abort_IT+0xc8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a56      	ldr	r2, [pc, #344]	; (8005dcc <HAL_DMA_Abort_IT+0x1b0>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d036      	beq.n	8005ce4 <HAL_DMA_Abort_IT+0xc8>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a55      	ldr	r2, [pc, #340]	; (8005dd0 <HAL_DMA_Abort_IT+0x1b4>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d031      	beq.n	8005ce4 <HAL_DMA_Abort_IT+0xc8>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a53      	ldr	r2, [pc, #332]	; (8005dd4 <HAL_DMA_Abort_IT+0x1b8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d02c      	beq.n	8005ce4 <HAL_DMA_Abort_IT+0xc8>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a52      	ldr	r2, [pc, #328]	; (8005dd8 <HAL_DMA_Abort_IT+0x1bc>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d027      	beq.n	8005ce4 <HAL_DMA_Abort_IT+0xc8>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a50      	ldr	r2, [pc, #320]	; (8005ddc <HAL_DMA_Abort_IT+0x1c0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d022      	beq.n	8005ce4 <HAL_DMA_Abort_IT+0xc8>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a4f      	ldr	r2, [pc, #316]	; (8005de0 <HAL_DMA_Abort_IT+0x1c4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d01d      	beq.n	8005ce4 <HAL_DMA_Abort_IT+0xc8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a4d      	ldr	r2, [pc, #308]	; (8005de4 <HAL_DMA_Abort_IT+0x1c8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d018      	beq.n	8005ce4 <HAL_DMA_Abort_IT+0xc8>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a4c      	ldr	r2, [pc, #304]	; (8005de8 <HAL_DMA_Abort_IT+0x1cc>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d013      	beq.n	8005ce4 <HAL_DMA_Abort_IT+0xc8>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a4a      	ldr	r2, [pc, #296]	; (8005dec <HAL_DMA_Abort_IT+0x1d0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00e      	beq.n	8005ce4 <HAL_DMA_Abort_IT+0xc8>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a49      	ldr	r2, [pc, #292]	; (8005df0 <HAL_DMA_Abort_IT+0x1d4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d009      	beq.n	8005ce4 <HAL_DMA_Abort_IT+0xc8>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a47      	ldr	r2, [pc, #284]	; (8005df4 <HAL_DMA_Abort_IT+0x1d8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d004      	beq.n	8005ce4 <HAL_DMA_Abort_IT+0xc8>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a46      	ldr	r2, [pc, #280]	; (8005df8 <HAL_DMA_Abort_IT+0x1dc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d101      	bne.n	8005ce8 <HAL_DMA_Abort_IT+0xcc>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e000      	b.n	8005cea <HAL_DMA_Abort_IT+0xce>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 8086 	beq.w	8005dfc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2204      	movs	r2, #4
 8005cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a2f      	ldr	r2, [pc, #188]	; (8005dbc <HAL_DMA_Abort_IT+0x1a0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d04a      	beq.n	8005d98 <HAL_DMA_Abort_IT+0x17c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a2e      	ldr	r2, [pc, #184]	; (8005dc0 <HAL_DMA_Abort_IT+0x1a4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d045      	beq.n	8005d98 <HAL_DMA_Abort_IT+0x17c>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a2c      	ldr	r2, [pc, #176]	; (8005dc4 <HAL_DMA_Abort_IT+0x1a8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d040      	beq.n	8005d98 <HAL_DMA_Abort_IT+0x17c>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a2b      	ldr	r2, [pc, #172]	; (8005dc8 <HAL_DMA_Abort_IT+0x1ac>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d03b      	beq.n	8005d98 <HAL_DMA_Abort_IT+0x17c>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a29      	ldr	r2, [pc, #164]	; (8005dcc <HAL_DMA_Abort_IT+0x1b0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d036      	beq.n	8005d98 <HAL_DMA_Abort_IT+0x17c>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a28      	ldr	r2, [pc, #160]	; (8005dd0 <HAL_DMA_Abort_IT+0x1b4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d031      	beq.n	8005d98 <HAL_DMA_Abort_IT+0x17c>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a26      	ldr	r2, [pc, #152]	; (8005dd4 <HAL_DMA_Abort_IT+0x1b8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d02c      	beq.n	8005d98 <HAL_DMA_Abort_IT+0x17c>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a25      	ldr	r2, [pc, #148]	; (8005dd8 <HAL_DMA_Abort_IT+0x1bc>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d027      	beq.n	8005d98 <HAL_DMA_Abort_IT+0x17c>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a23      	ldr	r2, [pc, #140]	; (8005ddc <HAL_DMA_Abort_IT+0x1c0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d022      	beq.n	8005d98 <HAL_DMA_Abort_IT+0x17c>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a22      	ldr	r2, [pc, #136]	; (8005de0 <HAL_DMA_Abort_IT+0x1c4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d01d      	beq.n	8005d98 <HAL_DMA_Abort_IT+0x17c>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a20      	ldr	r2, [pc, #128]	; (8005de4 <HAL_DMA_Abort_IT+0x1c8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d018      	beq.n	8005d98 <HAL_DMA_Abort_IT+0x17c>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a1f      	ldr	r2, [pc, #124]	; (8005de8 <HAL_DMA_Abort_IT+0x1cc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d013      	beq.n	8005d98 <HAL_DMA_Abort_IT+0x17c>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1d      	ldr	r2, [pc, #116]	; (8005dec <HAL_DMA_Abort_IT+0x1d0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00e      	beq.n	8005d98 <HAL_DMA_Abort_IT+0x17c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1c      	ldr	r2, [pc, #112]	; (8005df0 <HAL_DMA_Abort_IT+0x1d4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d009      	beq.n	8005d98 <HAL_DMA_Abort_IT+0x17c>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1a      	ldr	r2, [pc, #104]	; (8005df4 <HAL_DMA_Abort_IT+0x1d8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d004      	beq.n	8005d98 <HAL_DMA_Abort_IT+0x17c>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a19      	ldr	r2, [pc, #100]	; (8005df8 <HAL_DMA_Abort_IT+0x1dc>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d108      	bne.n	8005daa <HAL_DMA_Abort_IT+0x18e>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0201 	bic.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	e178      	b.n	800609c <HAL_DMA_Abort_IT+0x480>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0201 	bic.w	r2, r2, #1
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	e16f      	b.n	800609c <HAL_DMA_Abort_IT+0x480>
 8005dbc:	40020010 	.word	0x40020010
 8005dc0:	40020028 	.word	0x40020028
 8005dc4:	40020040 	.word	0x40020040
 8005dc8:	40020058 	.word	0x40020058
 8005dcc:	40020070 	.word	0x40020070
 8005dd0:	40020088 	.word	0x40020088
 8005dd4:	400200a0 	.word	0x400200a0
 8005dd8:	400200b8 	.word	0x400200b8
 8005ddc:	40020410 	.word	0x40020410
 8005de0:	40020428 	.word	0x40020428
 8005de4:	40020440 	.word	0x40020440
 8005de8:	40020458 	.word	0x40020458
 8005dec:	40020470 	.word	0x40020470
 8005df0:	40020488 	.word	0x40020488
 8005df4:	400204a0 	.word	0x400204a0
 8005df8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 020e 	bic.w	r2, r2, #14
 8005e0a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a6c      	ldr	r2, [pc, #432]	; (8005fc4 <HAL_DMA_Abort_IT+0x3a8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d04a      	beq.n	8005eac <HAL_DMA_Abort_IT+0x290>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a6b      	ldr	r2, [pc, #428]	; (8005fc8 <HAL_DMA_Abort_IT+0x3ac>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d045      	beq.n	8005eac <HAL_DMA_Abort_IT+0x290>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a69      	ldr	r2, [pc, #420]	; (8005fcc <HAL_DMA_Abort_IT+0x3b0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d040      	beq.n	8005eac <HAL_DMA_Abort_IT+0x290>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a68      	ldr	r2, [pc, #416]	; (8005fd0 <HAL_DMA_Abort_IT+0x3b4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d03b      	beq.n	8005eac <HAL_DMA_Abort_IT+0x290>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a66      	ldr	r2, [pc, #408]	; (8005fd4 <HAL_DMA_Abort_IT+0x3b8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d036      	beq.n	8005eac <HAL_DMA_Abort_IT+0x290>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a65      	ldr	r2, [pc, #404]	; (8005fd8 <HAL_DMA_Abort_IT+0x3bc>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d031      	beq.n	8005eac <HAL_DMA_Abort_IT+0x290>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a63      	ldr	r2, [pc, #396]	; (8005fdc <HAL_DMA_Abort_IT+0x3c0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d02c      	beq.n	8005eac <HAL_DMA_Abort_IT+0x290>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a62      	ldr	r2, [pc, #392]	; (8005fe0 <HAL_DMA_Abort_IT+0x3c4>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d027      	beq.n	8005eac <HAL_DMA_Abort_IT+0x290>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a60      	ldr	r2, [pc, #384]	; (8005fe4 <HAL_DMA_Abort_IT+0x3c8>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d022      	beq.n	8005eac <HAL_DMA_Abort_IT+0x290>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a5f      	ldr	r2, [pc, #380]	; (8005fe8 <HAL_DMA_Abort_IT+0x3cc>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d01d      	beq.n	8005eac <HAL_DMA_Abort_IT+0x290>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a5d      	ldr	r2, [pc, #372]	; (8005fec <HAL_DMA_Abort_IT+0x3d0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d018      	beq.n	8005eac <HAL_DMA_Abort_IT+0x290>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a5c      	ldr	r2, [pc, #368]	; (8005ff0 <HAL_DMA_Abort_IT+0x3d4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d013      	beq.n	8005eac <HAL_DMA_Abort_IT+0x290>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a5a      	ldr	r2, [pc, #360]	; (8005ff4 <HAL_DMA_Abort_IT+0x3d8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00e      	beq.n	8005eac <HAL_DMA_Abort_IT+0x290>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a59      	ldr	r2, [pc, #356]	; (8005ff8 <HAL_DMA_Abort_IT+0x3dc>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d009      	beq.n	8005eac <HAL_DMA_Abort_IT+0x290>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a57      	ldr	r2, [pc, #348]	; (8005ffc <HAL_DMA_Abort_IT+0x3e0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d004      	beq.n	8005eac <HAL_DMA_Abort_IT+0x290>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a56      	ldr	r2, [pc, #344]	; (8006000 <HAL_DMA_Abort_IT+0x3e4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d108      	bne.n	8005ebe <HAL_DMA_Abort_IT+0x2a2>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0201 	bic.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	e007      	b.n	8005ece <HAL_DMA_Abort_IT+0x2b2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0201 	bic.w	r2, r2, #1
 8005ecc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a3c      	ldr	r2, [pc, #240]	; (8005fc4 <HAL_DMA_Abort_IT+0x3a8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d072      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a3a      	ldr	r2, [pc, #232]	; (8005fc8 <HAL_DMA_Abort_IT+0x3ac>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d06d      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a39      	ldr	r2, [pc, #228]	; (8005fcc <HAL_DMA_Abort_IT+0x3b0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d068      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a37      	ldr	r2, [pc, #220]	; (8005fd0 <HAL_DMA_Abort_IT+0x3b4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d063      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a36      	ldr	r2, [pc, #216]	; (8005fd4 <HAL_DMA_Abort_IT+0x3b8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d05e      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a34      	ldr	r2, [pc, #208]	; (8005fd8 <HAL_DMA_Abort_IT+0x3bc>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d059      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a33      	ldr	r2, [pc, #204]	; (8005fdc <HAL_DMA_Abort_IT+0x3c0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d054      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a31      	ldr	r2, [pc, #196]	; (8005fe0 <HAL_DMA_Abort_IT+0x3c4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d04f      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a30      	ldr	r2, [pc, #192]	; (8005fe4 <HAL_DMA_Abort_IT+0x3c8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d04a      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a2e      	ldr	r2, [pc, #184]	; (8005fe8 <HAL_DMA_Abort_IT+0x3cc>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d045      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a2d      	ldr	r2, [pc, #180]	; (8005fec <HAL_DMA_Abort_IT+0x3d0>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d040      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a2b      	ldr	r2, [pc, #172]	; (8005ff0 <HAL_DMA_Abort_IT+0x3d4>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d03b      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a2a      	ldr	r2, [pc, #168]	; (8005ff4 <HAL_DMA_Abort_IT+0x3d8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d036      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a28      	ldr	r2, [pc, #160]	; (8005ff8 <HAL_DMA_Abort_IT+0x3dc>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d031      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a27      	ldr	r2, [pc, #156]	; (8005ffc <HAL_DMA_Abort_IT+0x3e0>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d02c      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a25      	ldr	r2, [pc, #148]	; (8006000 <HAL_DMA_Abort_IT+0x3e4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d027      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a24      	ldr	r2, [pc, #144]	; (8006004 <HAL_DMA_Abort_IT+0x3e8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d022      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a22      	ldr	r2, [pc, #136]	; (8006008 <HAL_DMA_Abort_IT+0x3ec>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d01d      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a21      	ldr	r2, [pc, #132]	; (800600c <HAL_DMA_Abort_IT+0x3f0>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d018      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a1f      	ldr	r2, [pc, #124]	; (8006010 <HAL_DMA_Abort_IT+0x3f4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d013      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a1e      	ldr	r2, [pc, #120]	; (8006014 <HAL_DMA_Abort_IT+0x3f8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00e      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1c      	ldr	r2, [pc, #112]	; (8006018 <HAL_DMA_Abort_IT+0x3fc>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d009      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a1b      	ldr	r2, [pc, #108]	; (800601c <HAL_DMA_Abort_IT+0x400>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d004      	beq.n	8005fbe <HAL_DMA_Abort_IT+0x3a2>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a19      	ldr	r2, [pc, #100]	; (8006020 <HAL_DMA_Abort_IT+0x404>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d132      	bne.n	8006024 <HAL_DMA_Abort_IT+0x408>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e031      	b.n	8006026 <HAL_DMA_Abort_IT+0x40a>
 8005fc2:	bf00      	nop
 8005fc4:	40020010 	.word	0x40020010
 8005fc8:	40020028 	.word	0x40020028
 8005fcc:	40020040 	.word	0x40020040
 8005fd0:	40020058 	.word	0x40020058
 8005fd4:	40020070 	.word	0x40020070
 8005fd8:	40020088 	.word	0x40020088
 8005fdc:	400200a0 	.word	0x400200a0
 8005fe0:	400200b8 	.word	0x400200b8
 8005fe4:	40020410 	.word	0x40020410
 8005fe8:	40020428 	.word	0x40020428
 8005fec:	40020440 	.word	0x40020440
 8005ff0:	40020458 	.word	0x40020458
 8005ff4:	40020470 	.word	0x40020470
 8005ff8:	40020488 	.word	0x40020488
 8005ffc:	400204a0 	.word	0x400204a0
 8006000:	400204b8 	.word	0x400204b8
 8006004:	58025408 	.word	0x58025408
 8006008:	5802541c 	.word	0x5802541c
 800600c:	58025430 	.word	0x58025430
 8006010:	58025444 	.word	0x58025444
 8006014:	58025458 	.word	0x58025458
 8006018:	5802546c 	.word	0x5802546c
 800601c:	58025480 	.word	0x58025480
 8006020:	58025494 	.word	0x58025494
 8006024:	2300      	movs	r3, #0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d028      	beq.n	800607c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006038:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006044:	f003 031f 	and.w	r3, r3, #31
 8006048:	2201      	movs	r2, #1
 800604a:	409a      	lsls	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006058:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00c      	beq.n	800607c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800606c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006070:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800607a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop

080060a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	; 0x28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060b4:	4b67      	ldr	r3, [pc, #412]	; (8006254 <HAL_DMA_IRQHandler+0x1ac>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a67      	ldr	r2, [pc, #412]	; (8006258 <HAL_DMA_IRQHandler+0x1b0>)
 80060ba:	fba2 2303 	umull	r2, r3, r2, r3
 80060be:	0a9b      	lsrs	r3, r3, #10
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060cc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a5f      	ldr	r2, [pc, #380]	; (800625c <HAL_DMA_IRQHandler+0x1b4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d04a      	beq.n	800617a <HAL_DMA_IRQHandler+0xd2>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a5d      	ldr	r2, [pc, #372]	; (8006260 <HAL_DMA_IRQHandler+0x1b8>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d045      	beq.n	800617a <HAL_DMA_IRQHandler+0xd2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a5c      	ldr	r2, [pc, #368]	; (8006264 <HAL_DMA_IRQHandler+0x1bc>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d040      	beq.n	800617a <HAL_DMA_IRQHandler+0xd2>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a5a      	ldr	r2, [pc, #360]	; (8006268 <HAL_DMA_IRQHandler+0x1c0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d03b      	beq.n	800617a <HAL_DMA_IRQHandler+0xd2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a59      	ldr	r2, [pc, #356]	; (800626c <HAL_DMA_IRQHandler+0x1c4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d036      	beq.n	800617a <HAL_DMA_IRQHandler+0xd2>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a57      	ldr	r2, [pc, #348]	; (8006270 <HAL_DMA_IRQHandler+0x1c8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d031      	beq.n	800617a <HAL_DMA_IRQHandler+0xd2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a56      	ldr	r2, [pc, #344]	; (8006274 <HAL_DMA_IRQHandler+0x1cc>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d02c      	beq.n	800617a <HAL_DMA_IRQHandler+0xd2>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a54      	ldr	r2, [pc, #336]	; (8006278 <HAL_DMA_IRQHandler+0x1d0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d027      	beq.n	800617a <HAL_DMA_IRQHandler+0xd2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a53      	ldr	r2, [pc, #332]	; (800627c <HAL_DMA_IRQHandler+0x1d4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d022      	beq.n	800617a <HAL_DMA_IRQHandler+0xd2>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a51      	ldr	r2, [pc, #324]	; (8006280 <HAL_DMA_IRQHandler+0x1d8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d01d      	beq.n	800617a <HAL_DMA_IRQHandler+0xd2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a50      	ldr	r2, [pc, #320]	; (8006284 <HAL_DMA_IRQHandler+0x1dc>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d018      	beq.n	800617a <HAL_DMA_IRQHandler+0xd2>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a4e      	ldr	r2, [pc, #312]	; (8006288 <HAL_DMA_IRQHandler+0x1e0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <HAL_DMA_IRQHandler+0xd2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a4d      	ldr	r2, [pc, #308]	; (800628c <HAL_DMA_IRQHandler+0x1e4>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00e      	beq.n	800617a <HAL_DMA_IRQHandler+0xd2>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a4b      	ldr	r2, [pc, #300]	; (8006290 <HAL_DMA_IRQHandler+0x1e8>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d009      	beq.n	800617a <HAL_DMA_IRQHandler+0xd2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a4a      	ldr	r2, [pc, #296]	; (8006294 <HAL_DMA_IRQHandler+0x1ec>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d004      	beq.n	800617a <HAL_DMA_IRQHandler+0xd2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a48      	ldr	r2, [pc, #288]	; (8006298 <HAL_DMA_IRQHandler+0x1f0>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d101      	bne.n	800617e <HAL_DMA_IRQHandler+0xd6>
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <HAL_DMA_IRQHandler+0xd8>
 800617e:	2300      	movs	r3, #0
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 842b 	beq.w	80069dc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	2208      	movs	r2, #8
 8006190:	409a      	lsls	r2, r3
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	4013      	ands	r3, r2
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 80a2 	beq.w	80062e0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a2e      	ldr	r2, [pc, #184]	; (800625c <HAL_DMA_IRQHandler+0x1b4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d04a      	beq.n	800623c <HAL_DMA_IRQHandler+0x194>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a2d      	ldr	r2, [pc, #180]	; (8006260 <HAL_DMA_IRQHandler+0x1b8>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d045      	beq.n	800623c <HAL_DMA_IRQHandler+0x194>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a2b      	ldr	r2, [pc, #172]	; (8006264 <HAL_DMA_IRQHandler+0x1bc>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d040      	beq.n	800623c <HAL_DMA_IRQHandler+0x194>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a2a      	ldr	r2, [pc, #168]	; (8006268 <HAL_DMA_IRQHandler+0x1c0>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d03b      	beq.n	800623c <HAL_DMA_IRQHandler+0x194>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a28      	ldr	r2, [pc, #160]	; (800626c <HAL_DMA_IRQHandler+0x1c4>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d036      	beq.n	800623c <HAL_DMA_IRQHandler+0x194>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a27      	ldr	r2, [pc, #156]	; (8006270 <HAL_DMA_IRQHandler+0x1c8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d031      	beq.n	800623c <HAL_DMA_IRQHandler+0x194>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a25      	ldr	r2, [pc, #148]	; (8006274 <HAL_DMA_IRQHandler+0x1cc>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d02c      	beq.n	800623c <HAL_DMA_IRQHandler+0x194>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a24      	ldr	r2, [pc, #144]	; (8006278 <HAL_DMA_IRQHandler+0x1d0>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d027      	beq.n	800623c <HAL_DMA_IRQHandler+0x194>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a22      	ldr	r2, [pc, #136]	; (800627c <HAL_DMA_IRQHandler+0x1d4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d022      	beq.n	800623c <HAL_DMA_IRQHandler+0x194>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a21      	ldr	r2, [pc, #132]	; (8006280 <HAL_DMA_IRQHandler+0x1d8>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d01d      	beq.n	800623c <HAL_DMA_IRQHandler+0x194>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1f      	ldr	r2, [pc, #124]	; (8006284 <HAL_DMA_IRQHandler+0x1dc>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d018      	beq.n	800623c <HAL_DMA_IRQHandler+0x194>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1e      	ldr	r2, [pc, #120]	; (8006288 <HAL_DMA_IRQHandler+0x1e0>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d013      	beq.n	800623c <HAL_DMA_IRQHandler+0x194>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1c      	ldr	r2, [pc, #112]	; (800628c <HAL_DMA_IRQHandler+0x1e4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00e      	beq.n	800623c <HAL_DMA_IRQHandler+0x194>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1b      	ldr	r2, [pc, #108]	; (8006290 <HAL_DMA_IRQHandler+0x1e8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d009      	beq.n	800623c <HAL_DMA_IRQHandler+0x194>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a19      	ldr	r2, [pc, #100]	; (8006294 <HAL_DMA_IRQHandler+0x1ec>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d004      	beq.n	800623c <HAL_DMA_IRQHandler+0x194>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a18      	ldr	r2, [pc, #96]	; (8006298 <HAL_DMA_IRQHandler+0x1f0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d12f      	bne.n	800629c <HAL_DMA_IRQHandler+0x1f4>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b00      	cmp	r3, #0
 8006248:	bf14      	ite	ne
 800624a:	2301      	movne	r3, #1
 800624c:	2300      	moveq	r3, #0
 800624e:	b2db      	uxtb	r3, r3
 8006250:	e02e      	b.n	80062b0 <HAL_DMA_IRQHandler+0x208>
 8006252:	bf00      	nop
 8006254:	24000044 	.word	0x24000044
 8006258:	1b4e81b5 	.word	0x1b4e81b5
 800625c:	40020010 	.word	0x40020010
 8006260:	40020028 	.word	0x40020028
 8006264:	40020040 	.word	0x40020040
 8006268:	40020058 	.word	0x40020058
 800626c:	40020070 	.word	0x40020070
 8006270:	40020088 	.word	0x40020088
 8006274:	400200a0 	.word	0x400200a0
 8006278:	400200b8 	.word	0x400200b8
 800627c:	40020410 	.word	0x40020410
 8006280:	40020428 	.word	0x40020428
 8006284:	40020440 	.word	0x40020440
 8006288:	40020458 	.word	0x40020458
 800628c:	40020470 	.word	0x40020470
 8006290:	40020488 	.word	0x40020488
 8006294:	400204a0 	.word	0x400204a0
 8006298:	400204b8 	.word	0x400204b8
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	bf14      	ite	ne
 80062aa:	2301      	movne	r3, #1
 80062ac:	2300      	moveq	r3, #0
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d015      	beq.n	80062e0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0204 	bic.w	r2, r2, #4
 80062c2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c8:	f003 031f 	and.w	r3, r3, #31
 80062cc:	2208      	movs	r2, #8
 80062ce:	409a      	lsls	r2, r3
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d8:	f043 0201 	orr.w	r2, r3, #1
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e4:	f003 031f 	and.w	r3, r3, #31
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	fa22 f303 	lsr.w	r3, r2, r3
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d06e      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a69      	ldr	r2, [pc, #420]	; (80064a0 <HAL_DMA_IRQHandler+0x3f8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d04a      	beq.n	8006396 <HAL_DMA_IRQHandler+0x2ee>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a67      	ldr	r2, [pc, #412]	; (80064a4 <HAL_DMA_IRQHandler+0x3fc>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d045      	beq.n	8006396 <HAL_DMA_IRQHandler+0x2ee>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a66      	ldr	r2, [pc, #408]	; (80064a8 <HAL_DMA_IRQHandler+0x400>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d040      	beq.n	8006396 <HAL_DMA_IRQHandler+0x2ee>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a64      	ldr	r2, [pc, #400]	; (80064ac <HAL_DMA_IRQHandler+0x404>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d03b      	beq.n	8006396 <HAL_DMA_IRQHandler+0x2ee>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a63      	ldr	r2, [pc, #396]	; (80064b0 <HAL_DMA_IRQHandler+0x408>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d036      	beq.n	8006396 <HAL_DMA_IRQHandler+0x2ee>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a61      	ldr	r2, [pc, #388]	; (80064b4 <HAL_DMA_IRQHandler+0x40c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d031      	beq.n	8006396 <HAL_DMA_IRQHandler+0x2ee>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a60      	ldr	r2, [pc, #384]	; (80064b8 <HAL_DMA_IRQHandler+0x410>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d02c      	beq.n	8006396 <HAL_DMA_IRQHandler+0x2ee>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a5e      	ldr	r2, [pc, #376]	; (80064bc <HAL_DMA_IRQHandler+0x414>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d027      	beq.n	8006396 <HAL_DMA_IRQHandler+0x2ee>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a5d      	ldr	r2, [pc, #372]	; (80064c0 <HAL_DMA_IRQHandler+0x418>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d022      	beq.n	8006396 <HAL_DMA_IRQHandler+0x2ee>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a5b      	ldr	r2, [pc, #364]	; (80064c4 <HAL_DMA_IRQHandler+0x41c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d01d      	beq.n	8006396 <HAL_DMA_IRQHandler+0x2ee>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a5a      	ldr	r2, [pc, #360]	; (80064c8 <HAL_DMA_IRQHandler+0x420>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d018      	beq.n	8006396 <HAL_DMA_IRQHandler+0x2ee>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a58      	ldr	r2, [pc, #352]	; (80064cc <HAL_DMA_IRQHandler+0x424>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d013      	beq.n	8006396 <HAL_DMA_IRQHandler+0x2ee>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a57      	ldr	r2, [pc, #348]	; (80064d0 <HAL_DMA_IRQHandler+0x428>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d00e      	beq.n	8006396 <HAL_DMA_IRQHandler+0x2ee>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a55      	ldr	r2, [pc, #340]	; (80064d4 <HAL_DMA_IRQHandler+0x42c>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d009      	beq.n	8006396 <HAL_DMA_IRQHandler+0x2ee>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a54      	ldr	r2, [pc, #336]	; (80064d8 <HAL_DMA_IRQHandler+0x430>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d004      	beq.n	8006396 <HAL_DMA_IRQHandler+0x2ee>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a52      	ldr	r2, [pc, #328]	; (80064dc <HAL_DMA_IRQHandler+0x434>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d10a      	bne.n	80063ac <HAL_DMA_IRQHandler+0x304>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	bf14      	ite	ne
 80063a4:	2301      	movne	r3, #1
 80063a6:	2300      	moveq	r3, #0
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	e003      	b.n	80063b4 <HAL_DMA_IRQHandler+0x30c>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2300      	movs	r3, #0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00d      	beq.n	80063d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063bc:	f003 031f 	and.w	r3, r3, #31
 80063c0:	2201      	movs	r2, #1
 80063c2:	409a      	lsls	r2, r3
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063cc:	f043 0202 	orr.w	r2, r3, #2
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d8:	f003 031f 	and.w	r3, r3, #31
 80063dc:	2204      	movs	r2, #4
 80063de:	409a      	lsls	r2, r3
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	4013      	ands	r3, r2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 808f 	beq.w	8006508 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a2c      	ldr	r2, [pc, #176]	; (80064a0 <HAL_DMA_IRQHandler+0x3f8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d04a      	beq.n	800648a <HAL_DMA_IRQHandler+0x3e2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a2a      	ldr	r2, [pc, #168]	; (80064a4 <HAL_DMA_IRQHandler+0x3fc>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d045      	beq.n	800648a <HAL_DMA_IRQHandler+0x3e2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a29      	ldr	r2, [pc, #164]	; (80064a8 <HAL_DMA_IRQHandler+0x400>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d040      	beq.n	800648a <HAL_DMA_IRQHandler+0x3e2>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a27      	ldr	r2, [pc, #156]	; (80064ac <HAL_DMA_IRQHandler+0x404>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d03b      	beq.n	800648a <HAL_DMA_IRQHandler+0x3e2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a26      	ldr	r2, [pc, #152]	; (80064b0 <HAL_DMA_IRQHandler+0x408>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d036      	beq.n	800648a <HAL_DMA_IRQHandler+0x3e2>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a24      	ldr	r2, [pc, #144]	; (80064b4 <HAL_DMA_IRQHandler+0x40c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d031      	beq.n	800648a <HAL_DMA_IRQHandler+0x3e2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a23      	ldr	r2, [pc, #140]	; (80064b8 <HAL_DMA_IRQHandler+0x410>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d02c      	beq.n	800648a <HAL_DMA_IRQHandler+0x3e2>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a21      	ldr	r2, [pc, #132]	; (80064bc <HAL_DMA_IRQHandler+0x414>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d027      	beq.n	800648a <HAL_DMA_IRQHandler+0x3e2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a20      	ldr	r2, [pc, #128]	; (80064c0 <HAL_DMA_IRQHandler+0x418>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d022      	beq.n	800648a <HAL_DMA_IRQHandler+0x3e2>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a1e      	ldr	r2, [pc, #120]	; (80064c4 <HAL_DMA_IRQHandler+0x41c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d01d      	beq.n	800648a <HAL_DMA_IRQHandler+0x3e2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a1d      	ldr	r2, [pc, #116]	; (80064c8 <HAL_DMA_IRQHandler+0x420>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d018      	beq.n	800648a <HAL_DMA_IRQHandler+0x3e2>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a1b      	ldr	r2, [pc, #108]	; (80064cc <HAL_DMA_IRQHandler+0x424>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d013      	beq.n	800648a <HAL_DMA_IRQHandler+0x3e2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a1a      	ldr	r2, [pc, #104]	; (80064d0 <HAL_DMA_IRQHandler+0x428>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00e      	beq.n	800648a <HAL_DMA_IRQHandler+0x3e2>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a18      	ldr	r2, [pc, #96]	; (80064d4 <HAL_DMA_IRQHandler+0x42c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d009      	beq.n	800648a <HAL_DMA_IRQHandler+0x3e2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a17      	ldr	r2, [pc, #92]	; (80064d8 <HAL_DMA_IRQHandler+0x430>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d004      	beq.n	800648a <HAL_DMA_IRQHandler+0x3e2>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a15      	ldr	r2, [pc, #84]	; (80064dc <HAL_DMA_IRQHandler+0x434>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d12a      	bne.n	80064e0 <HAL_DMA_IRQHandler+0x438>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b00      	cmp	r3, #0
 8006496:	bf14      	ite	ne
 8006498:	2301      	movne	r3, #1
 800649a:	2300      	moveq	r3, #0
 800649c:	b2db      	uxtb	r3, r3
 800649e:	e023      	b.n	80064e8 <HAL_DMA_IRQHandler+0x440>
 80064a0:	40020010 	.word	0x40020010
 80064a4:	40020028 	.word	0x40020028
 80064a8:	40020040 	.word	0x40020040
 80064ac:	40020058 	.word	0x40020058
 80064b0:	40020070 	.word	0x40020070
 80064b4:	40020088 	.word	0x40020088
 80064b8:	400200a0 	.word	0x400200a0
 80064bc:	400200b8 	.word	0x400200b8
 80064c0:	40020410 	.word	0x40020410
 80064c4:	40020428 	.word	0x40020428
 80064c8:	40020440 	.word	0x40020440
 80064cc:	40020458 	.word	0x40020458
 80064d0:	40020470 	.word	0x40020470
 80064d4:	40020488 	.word	0x40020488
 80064d8:	400204a0 	.word	0x400204a0
 80064dc:	400204b8 	.word	0x400204b8
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2300      	movs	r3, #0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00d      	beq.n	8006508 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	2204      	movs	r2, #4
 80064f6:	409a      	lsls	r2, r3
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006500:	f043 0204 	orr.w	r2, r3, #4
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650c:	f003 031f 	and.w	r3, r3, #31
 8006510:	2210      	movs	r2, #16
 8006512:	409a      	lsls	r2, r3
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	4013      	ands	r3, r2
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 80a6 	beq.w	800666a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a85      	ldr	r2, [pc, #532]	; (8006738 <HAL_DMA_IRQHandler+0x690>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d04a      	beq.n	80065be <HAL_DMA_IRQHandler+0x516>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a83      	ldr	r2, [pc, #524]	; (800673c <HAL_DMA_IRQHandler+0x694>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d045      	beq.n	80065be <HAL_DMA_IRQHandler+0x516>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a82      	ldr	r2, [pc, #520]	; (8006740 <HAL_DMA_IRQHandler+0x698>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d040      	beq.n	80065be <HAL_DMA_IRQHandler+0x516>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a80      	ldr	r2, [pc, #512]	; (8006744 <HAL_DMA_IRQHandler+0x69c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d03b      	beq.n	80065be <HAL_DMA_IRQHandler+0x516>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a7f      	ldr	r2, [pc, #508]	; (8006748 <HAL_DMA_IRQHandler+0x6a0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d036      	beq.n	80065be <HAL_DMA_IRQHandler+0x516>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a7d      	ldr	r2, [pc, #500]	; (800674c <HAL_DMA_IRQHandler+0x6a4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d031      	beq.n	80065be <HAL_DMA_IRQHandler+0x516>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a7c      	ldr	r2, [pc, #496]	; (8006750 <HAL_DMA_IRQHandler+0x6a8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d02c      	beq.n	80065be <HAL_DMA_IRQHandler+0x516>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a7a      	ldr	r2, [pc, #488]	; (8006754 <HAL_DMA_IRQHandler+0x6ac>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d027      	beq.n	80065be <HAL_DMA_IRQHandler+0x516>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a79      	ldr	r2, [pc, #484]	; (8006758 <HAL_DMA_IRQHandler+0x6b0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d022      	beq.n	80065be <HAL_DMA_IRQHandler+0x516>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a77      	ldr	r2, [pc, #476]	; (800675c <HAL_DMA_IRQHandler+0x6b4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d01d      	beq.n	80065be <HAL_DMA_IRQHandler+0x516>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a76      	ldr	r2, [pc, #472]	; (8006760 <HAL_DMA_IRQHandler+0x6b8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d018      	beq.n	80065be <HAL_DMA_IRQHandler+0x516>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a74      	ldr	r2, [pc, #464]	; (8006764 <HAL_DMA_IRQHandler+0x6bc>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d013      	beq.n	80065be <HAL_DMA_IRQHandler+0x516>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a73      	ldr	r2, [pc, #460]	; (8006768 <HAL_DMA_IRQHandler+0x6c0>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d00e      	beq.n	80065be <HAL_DMA_IRQHandler+0x516>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a71      	ldr	r2, [pc, #452]	; (800676c <HAL_DMA_IRQHandler+0x6c4>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d009      	beq.n	80065be <HAL_DMA_IRQHandler+0x516>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a70      	ldr	r2, [pc, #448]	; (8006770 <HAL_DMA_IRQHandler+0x6c8>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d004      	beq.n	80065be <HAL_DMA_IRQHandler+0x516>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a6e      	ldr	r2, [pc, #440]	; (8006774 <HAL_DMA_IRQHandler+0x6cc>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d10a      	bne.n	80065d4 <HAL_DMA_IRQHandler+0x52c>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0308 	and.w	r3, r3, #8
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	bf14      	ite	ne
 80065cc:	2301      	movne	r3, #1
 80065ce:	2300      	moveq	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	e009      	b.n	80065e8 <HAL_DMA_IRQHandler+0x540>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0304 	and.w	r3, r3, #4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	bf14      	ite	ne
 80065e2:	2301      	movne	r3, #1
 80065e4:	2300      	moveq	r3, #0
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d03e      	beq.n	800666a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f0:	f003 031f 	and.w	r3, r3, #31
 80065f4:	2210      	movs	r2, #16
 80065f6:	409a      	lsls	r2, r3
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d018      	beq.n	800663c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d108      	bne.n	800662a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661c:	2b00      	cmp	r3, #0
 800661e:	d024      	beq.n	800666a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	4798      	blx	r3
 8006628:	e01f      	b.n	800666a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800662e:	2b00      	cmp	r3, #0
 8006630:	d01b      	beq.n	800666a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	4798      	blx	r3
 800663a:	e016      	b.n	800666a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006646:	2b00      	cmp	r3, #0
 8006648:	d107      	bne.n	800665a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0208 	bic.w	r2, r2, #8
 8006658:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800666e:	f003 031f 	and.w	r3, r3, #31
 8006672:	2220      	movs	r2, #32
 8006674:	409a      	lsls	r2, r3
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	4013      	ands	r3, r2
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 8110 	beq.w	80068a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a2c      	ldr	r2, [pc, #176]	; (8006738 <HAL_DMA_IRQHandler+0x690>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d04a      	beq.n	8006720 <HAL_DMA_IRQHandler+0x678>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a2b      	ldr	r2, [pc, #172]	; (800673c <HAL_DMA_IRQHandler+0x694>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d045      	beq.n	8006720 <HAL_DMA_IRQHandler+0x678>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a29      	ldr	r2, [pc, #164]	; (8006740 <HAL_DMA_IRQHandler+0x698>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d040      	beq.n	8006720 <HAL_DMA_IRQHandler+0x678>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a28      	ldr	r2, [pc, #160]	; (8006744 <HAL_DMA_IRQHandler+0x69c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d03b      	beq.n	8006720 <HAL_DMA_IRQHandler+0x678>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a26      	ldr	r2, [pc, #152]	; (8006748 <HAL_DMA_IRQHandler+0x6a0>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d036      	beq.n	8006720 <HAL_DMA_IRQHandler+0x678>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a25      	ldr	r2, [pc, #148]	; (800674c <HAL_DMA_IRQHandler+0x6a4>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d031      	beq.n	8006720 <HAL_DMA_IRQHandler+0x678>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a23      	ldr	r2, [pc, #140]	; (8006750 <HAL_DMA_IRQHandler+0x6a8>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d02c      	beq.n	8006720 <HAL_DMA_IRQHandler+0x678>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a22      	ldr	r2, [pc, #136]	; (8006754 <HAL_DMA_IRQHandler+0x6ac>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d027      	beq.n	8006720 <HAL_DMA_IRQHandler+0x678>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a20      	ldr	r2, [pc, #128]	; (8006758 <HAL_DMA_IRQHandler+0x6b0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d022      	beq.n	8006720 <HAL_DMA_IRQHandler+0x678>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1f      	ldr	r2, [pc, #124]	; (800675c <HAL_DMA_IRQHandler+0x6b4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d01d      	beq.n	8006720 <HAL_DMA_IRQHandler+0x678>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a1d      	ldr	r2, [pc, #116]	; (8006760 <HAL_DMA_IRQHandler+0x6b8>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d018      	beq.n	8006720 <HAL_DMA_IRQHandler+0x678>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a1c      	ldr	r2, [pc, #112]	; (8006764 <HAL_DMA_IRQHandler+0x6bc>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d013      	beq.n	8006720 <HAL_DMA_IRQHandler+0x678>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a1a      	ldr	r2, [pc, #104]	; (8006768 <HAL_DMA_IRQHandler+0x6c0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d00e      	beq.n	8006720 <HAL_DMA_IRQHandler+0x678>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a19      	ldr	r2, [pc, #100]	; (800676c <HAL_DMA_IRQHandler+0x6c4>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d009      	beq.n	8006720 <HAL_DMA_IRQHandler+0x678>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a17      	ldr	r2, [pc, #92]	; (8006770 <HAL_DMA_IRQHandler+0x6c8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d004      	beq.n	8006720 <HAL_DMA_IRQHandler+0x678>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a16      	ldr	r2, [pc, #88]	; (8006774 <HAL_DMA_IRQHandler+0x6cc>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d12b      	bne.n	8006778 <HAL_DMA_IRQHandler+0x6d0>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0310 	and.w	r3, r3, #16
 800672a:	2b00      	cmp	r3, #0
 800672c:	bf14      	ite	ne
 800672e:	2301      	movne	r3, #1
 8006730:	2300      	moveq	r3, #0
 8006732:	b2db      	uxtb	r3, r3
 8006734:	e02a      	b.n	800678c <HAL_DMA_IRQHandler+0x6e4>
 8006736:	bf00      	nop
 8006738:	40020010 	.word	0x40020010
 800673c:	40020028 	.word	0x40020028
 8006740:	40020040 	.word	0x40020040
 8006744:	40020058 	.word	0x40020058
 8006748:	40020070 	.word	0x40020070
 800674c:	40020088 	.word	0x40020088
 8006750:	400200a0 	.word	0x400200a0
 8006754:	400200b8 	.word	0x400200b8
 8006758:	40020410 	.word	0x40020410
 800675c:	40020428 	.word	0x40020428
 8006760:	40020440 	.word	0x40020440
 8006764:	40020458 	.word	0x40020458
 8006768:	40020470 	.word	0x40020470
 800676c:	40020488 	.word	0x40020488
 8006770:	400204a0 	.word	0x400204a0
 8006774:	400204b8 	.word	0x400204b8
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	bf14      	ite	ne
 8006786:	2301      	movne	r3, #1
 8006788:	2300      	moveq	r3, #0
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 8087 	beq.w	80068a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006796:	f003 031f 	and.w	r3, r3, #31
 800679a:	2220      	movs	r2, #32
 800679c:	409a      	lsls	r2, r3
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b04      	cmp	r3, #4
 80067ac:	d139      	bne.n	8006822 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 0216 	bic.w	r2, r2, #22
 80067bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	695a      	ldr	r2, [r3, #20]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d103      	bne.n	80067de <HAL_DMA_IRQHandler+0x736>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d007      	beq.n	80067ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 0208 	bic.w	r2, r2, #8
 80067ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f2:	f003 031f 	and.w	r3, r3, #31
 80067f6:	223f      	movs	r2, #63	; 0x3f
 80067f8:	409a      	lsls	r2, r3
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 8382 	beq.w	8006f1c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	4798      	blx	r3
          }
          return;
 8006820:	e37c      	b.n	8006f1c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d018      	beq.n	8006862 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d108      	bne.n	8006850 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006842:	2b00      	cmp	r3, #0
 8006844:	d02c      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	4798      	blx	r3
 800684e:	e027      	b.n	80068a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006854:	2b00      	cmp	r3, #0
 8006856:	d023      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4798      	blx	r3
 8006860:	e01e      	b.n	80068a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10f      	bne.n	8006890 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0210 	bic.w	r2, r2, #16
 800687e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 833e 	beq.w	8006f26 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 8088 	beq.w	80069c8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2204      	movs	r2, #4
 80068bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a89      	ldr	r2, [pc, #548]	; (8006aec <HAL_DMA_IRQHandler+0xa44>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d04a      	beq.n	8006960 <HAL_DMA_IRQHandler+0x8b8>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a88      	ldr	r2, [pc, #544]	; (8006af0 <HAL_DMA_IRQHandler+0xa48>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d045      	beq.n	8006960 <HAL_DMA_IRQHandler+0x8b8>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a86      	ldr	r2, [pc, #536]	; (8006af4 <HAL_DMA_IRQHandler+0xa4c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d040      	beq.n	8006960 <HAL_DMA_IRQHandler+0x8b8>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a85      	ldr	r2, [pc, #532]	; (8006af8 <HAL_DMA_IRQHandler+0xa50>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d03b      	beq.n	8006960 <HAL_DMA_IRQHandler+0x8b8>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a83      	ldr	r2, [pc, #524]	; (8006afc <HAL_DMA_IRQHandler+0xa54>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d036      	beq.n	8006960 <HAL_DMA_IRQHandler+0x8b8>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a82      	ldr	r2, [pc, #520]	; (8006b00 <HAL_DMA_IRQHandler+0xa58>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d031      	beq.n	8006960 <HAL_DMA_IRQHandler+0x8b8>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a80      	ldr	r2, [pc, #512]	; (8006b04 <HAL_DMA_IRQHandler+0xa5c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d02c      	beq.n	8006960 <HAL_DMA_IRQHandler+0x8b8>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a7f      	ldr	r2, [pc, #508]	; (8006b08 <HAL_DMA_IRQHandler+0xa60>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d027      	beq.n	8006960 <HAL_DMA_IRQHandler+0x8b8>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a7d      	ldr	r2, [pc, #500]	; (8006b0c <HAL_DMA_IRQHandler+0xa64>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d022      	beq.n	8006960 <HAL_DMA_IRQHandler+0x8b8>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a7c      	ldr	r2, [pc, #496]	; (8006b10 <HAL_DMA_IRQHandler+0xa68>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d01d      	beq.n	8006960 <HAL_DMA_IRQHandler+0x8b8>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a7a      	ldr	r2, [pc, #488]	; (8006b14 <HAL_DMA_IRQHandler+0xa6c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d018      	beq.n	8006960 <HAL_DMA_IRQHandler+0x8b8>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a79      	ldr	r2, [pc, #484]	; (8006b18 <HAL_DMA_IRQHandler+0xa70>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d013      	beq.n	8006960 <HAL_DMA_IRQHandler+0x8b8>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a77      	ldr	r2, [pc, #476]	; (8006b1c <HAL_DMA_IRQHandler+0xa74>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d00e      	beq.n	8006960 <HAL_DMA_IRQHandler+0x8b8>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a76      	ldr	r2, [pc, #472]	; (8006b20 <HAL_DMA_IRQHandler+0xa78>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d009      	beq.n	8006960 <HAL_DMA_IRQHandler+0x8b8>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a74      	ldr	r2, [pc, #464]	; (8006b24 <HAL_DMA_IRQHandler+0xa7c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d004      	beq.n	8006960 <HAL_DMA_IRQHandler+0x8b8>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a73      	ldr	r2, [pc, #460]	; (8006b28 <HAL_DMA_IRQHandler+0xa80>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d108      	bne.n	8006972 <HAL_DMA_IRQHandler+0x8ca>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 0201 	bic.w	r2, r2, #1
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	e007      	b.n	8006982 <HAL_DMA_IRQHandler+0x8da>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 0201 	bic.w	r2, r2, #1
 8006980:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3301      	adds	r3, #1
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800698a:	429a      	cmp	r2, r3
 800698c:	d307      	bcc.n	800699e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1f2      	bne.n	8006982 <HAL_DMA_IRQHandler+0x8da>
 800699c:	e000      	b.n	80069a0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800699e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d004      	beq.n	80069b8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2203      	movs	r2, #3
 80069b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80069b6:	e003      	b.n	80069c0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 82aa 	beq.w	8006f26 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	4798      	blx	r3
 80069da:	e2a4      	b.n	8006f26 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a52      	ldr	r2, [pc, #328]	; (8006b2c <HAL_DMA_IRQHandler+0xa84>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d04a      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x9d4>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a51      	ldr	r2, [pc, #324]	; (8006b30 <HAL_DMA_IRQHandler+0xa88>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d045      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x9d4>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a4f      	ldr	r2, [pc, #316]	; (8006b34 <HAL_DMA_IRQHandler+0xa8c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d040      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x9d4>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a4e      	ldr	r2, [pc, #312]	; (8006b38 <HAL_DMA_IRQHandler+0xa90>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d03b      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x9d4>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a4c      	ldr	r2, [pc, #304]	; (8006b3c <HAL_DMA_IRQHandler+0xa94>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d036      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x9d4>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a4b      	ldr	r2, [pc, #300]	; (8006b40 <HAL_DMA_IRQHandler+0xa98>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d031      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x9d4>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a49      	ldr	r2, [pc, #292]	; (8006b44 <HAL_DMA_IRQHandler+0xa9c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d02c      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x9d4>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a48      	ldr	r2, [pc, #288]	; (8006b48 <HAL_DMA_IRQHandler+0xaa0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d027      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x9d4>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a46      	ldr	r2, [pc, #280]	; (8006b4c <HAL_DMA_IRQHandler+0xaa4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d022      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x9d4>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a45      	ldr	r2, [pc, #276]	; (8006b50 <HAL_DMA_IRQHandler+0xaa8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d01d      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x9d4>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a43      	ldr	r2, [pc, #268]	; (8006b54 <HAL_DMA_IRQHandler+0xaac>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d018      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x9d4>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a42      	ldr	r2, [pc, #264]	; (8006b58 <HAL_DMA_IRQHandler+0xab0>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d013      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x9d4>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a40      	ldr	r2, [pc, #256]	; (8006b5c <HAL_DMA_IRQHandler+0xab4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00e      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x9d4>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a3f      	ldr	r2, [pc, #252]	; (8006b60 <HAL_DMA_IRQHandler+0xab8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d009      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x9d4>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a3d      	ldr	r2, [pc, #244]	; (8006b64 <HAL_DMA_IRQHandler+0xabc>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d004      	beq.n	8006a7c <HAL_DMA_IRQHandler+0x9d4>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a3c      	ldr	r2, [pc, #240]	; (8006b68 <HAL_DMA_IRQHandler+0xac0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d101      	bne.n	8006a80 <HAL_DMA_IRQHandler+0x9d8>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e000      	b.n	8006a82 <HAL_DMA_IRQHandler+0x9da>
 8006a80:	2300      	movs	r3, #0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 824f 	beq.w	8006f26 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a94:	f003 031f 	and.w	r3, r3, #31
 8006a98:	2204      	movs	r2, #4
 8006a9a:	409a      	lsls	r2, r3
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 80dd 	beq.w	8006c60 <HAL_DMA_IRQHandler+0xbb8>
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 80d7 	beq.w	8006c60 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab6:	f003 031f 	and.w	r3, r3, #31
 8006aba:	2204      	movs	r2, #4
 8006abc:	409a      	lsls	r2, r3
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d059      	beq.n	8006b80 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d14a      	bne.n	8006b6c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 8220 	beq.w	8006f20 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ae8:	e21a      	b.n	8006f20 <HAL_DMA_IRQHandler+0xe78>
 8006aea:	bf00      	nop
 8006aec:	40020010 	.word	0x40020010
 8006af0:	40020028 	.word	0x40020028
 8006af4:	40020040 	.word	0x40020040
 8006af8:	40020058 	.word	0x40020058
 8006afc:	40020070 	.word	0x40020070
 8006b00:	40020088 	.word	0x40020088
 8006b04:	400200a0 	.word	0x400200a0
 8006b08:	400200b8 	.word	0x400200b8
 8006b0c:	40020410 	.word	0x40020410
 8006b10:	40020428 	.word	0x40020428
 8006b14:	40020440 	.word	0x40020440
 8006b18:	40020458 	.word	0x40020458
 8006b1c:	40020470 	.word	0x40020470
 8006b20:	40020488 	.word	0x40020488
 8006b24:	400204a0 	.word	0x400204a0
 8006b28:	400204b8 	.word	0x400204b8
 8006b2c:	48022c08 	.word	0x48022c08
 8006b30:	48022c1c 	.word	0x48022c1c
 8006b34:	48022c30 	.word	0x48022c30
 8006b38:	48022c44 	.word	0x48022c44
 8006b3c:	48022c58 	.word	0x48022c58
 8006b40:	48022c6c 	.word	0x48022c6c
 8006b44:	48022c80 	.word	0x48022c80
 8006b48:	48022c94 	.word	0x48022c94
 8006b4c:	58025408 	.word	0x58025408
 8006b50:	5802541c 	.word	0x5802541c
 8006b54:	58025430 	.word	0x58025430
 8006b58:	58025444 	.word	0x58025444
 8006b5c:	58025458 	.word	0x58025458
 8006b60:	5802546c 	.word	0x5802546c
 8006b64:	58025480 	.word	0x58025480
 8006b68:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 81d5 	beq.w	8006f20 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b7e:	e1cf      	b.n	8006f20 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f003 0320 	and.w	r3, r3, #32
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d160      	bne.n	8006c4c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a7f      	ldr	r2, [pc, #508]	; (8006d8c <HAL_DMA_IRQHandler+0xce4>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d04a      	beq.n	8006c2a <HAL_DMA_IRQHandler+0xb82>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a7d      	ldr	r2, [pc, #500]	; (8006d90 <HAL_DMA_IRQHandler+0xce8>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d045      	beq.n	8006c2a <HAL_DMA_IRQHandler+0xb82>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a7c      	ldr	r2, [pc, #496]	; (8006d94 <HAL_DMA_IRQHandler+0xcec>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d040      	beq.n	8006c2a <HAL_DMA_IRQHandler+0xb82>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a7a      	ldr	r2, [pc, #488]	; (8006d98 <HAL_DMA_IRQHandler+0xcf0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d03b      	beq.n	8006c2a <HAL_DMA_IRQHandler+0xb82>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a79      	ldr	r2, [pc, #484]	; (8006d9c <HAL_DMA_IRQHandler+0xcf4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d036      	beq.n	8006c2a <HAL_DMA_IRQHandler+0xb82>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a77      	ldr	r2, [pc, #476]	; (8006da0 <HAL_DMA_IRQHandler+0xcf8>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d031      	beq.n	8006c2a <HAL_DMA_IRQHandler+0xb82>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a76      	ldr	r2, [pc, #472]	; (8006da4 <HAL_DMA_IRQHandler+0xcfc>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d02c      	beq.n	8006c2a <HAL_DMA_IRQHandler+0xb82>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a74      	ldr	r2, [pc, #464]	; (8006da8 <HAL_DMA_IRQHandler+0xd00>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d027      	beq.n	8006c2a <HAL_DMA_IRQHandler+0xb82>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a73      	ldr	r2, [pc, #460]	; (8006dac <HAL_DMA_IRQHandler+0xd04>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d022      	beq.n	8006c2a <HAL_DMA_IRQHandler+0xb82>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a71      	ldr	r2, [pc, #452]	; (8006db0 <HAL_DMA_IRQHandler+0xd08>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d01d      	beq.n	8006c2a <HAL_DMA_IRQHandler+0xb82>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a70      	ldr	r2, [pc, #448]	; (8006db4 <HAL_DMA_IRQHandler+0xd0c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d018      	beq.n	8006c2a <HAL_DMA_IRQHandler+0xb82>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a6e      	ldr	r2, [pc, #440]	; (8006db8 <HAL_DMA_IRQHandler+0xd10>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d013      	beq.n	8006c2a <HAL_DMA_IRQHandler+0xb82>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a6d      	ldr	r2, [pc, #436]	; (8006dbc <HAL_DMA_IRQHandler+0xd14>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d00e      	beq.n	8006c2a <HAL_DMA_IRQHandler+0xb82>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a6b      	ldr	r2, [pc, #428]	; (8006dc0 <HAL_DMA_IRQHandler+0xd18>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d009      	beq.n	8006c2a <HAL_DMA_IRQHandler+0xb82>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a6a      	ldr	r2, [pc, #424]	; (8006dc4 <HAL_DMA_IRQHandler+0xd1c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d004      	beq.n	8006c2a <HAL_DMA_IRQHandler+0xb82>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a68      	ldr	r2, [pc, #416]	; (8006dc8 <HAL_DMA_IRQHandler+0xd20>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d108      	bne.n	8006c3c <HAL_DMA_IRQHandler+0xb94>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0208 	bic.w	r2, r2, #8
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	e007      	b.n	8006c4c <HAL_DMA_IRQHandler+0xba4>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 0204 	bic.w	r2, r2, #4
 8006c4a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 8165 	beq.w	8006f20 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c5e:	e15f      	b.n	8006f20 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c64:	f003 031f 	and.w	r3, r3, #31
 8006c68:	2202      	movs	r2, #2
 8006c6a:	409a      	lsls	r2, r3
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 80c5 	beq.w	8006e00 <HAL_DMA_IRQHandler+0xd58>
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 80bf 	beq.w	8006e00 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c86:	f003 031f 	and.w	r3, r3, #31
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	409a      	lsls	r2, r3
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d018      	beq.n	8006cce <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d109      	bne.n	8006cba <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 813a 	beq.w	8006f24 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cb8:	e134      	b.n	8006f24 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 8130 	beq.w	8006f24 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ccc:	e12a      	b.n	8006f24 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f003 0320 	and.w	r3, r3, #32
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 8089 	bne.w	8006dec <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a2b      	ldr	r2, [pc, #172]	; (8006d8c <HAL_DMA_IRQHandler+0xce4>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d04a      	beq.n	8006d7a <HAL_DMA_IRQHandler+0xcd2>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a29      	ldr	r2, [pc, #164]	; (8006d90 <HAL_DMA_IRQHandler+0xce8>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d045      	beq.n	8006d7a <HAL_DMA_IRQHandler+0xcd2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a28      	ldr	r2, [pc, #160]	; (8006d94 <HAL_DMA_IRQHandler+0xcec>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d040      	beq.n	8006d7a <HAL_DMA_IRQHandler+0xcd2>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a26      	ldr	r2, [pc, #152]	; (8006d98 <HAL_DMA_IRQHandler+0xcf0>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d03b      	beq.n	8006d7a <HAL_DMA_IRQHandler+0xcd2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a25      	ldr	r2, [pc, #148]	; (8006d9c <HAL_DMA_IRQHandler+0xcf4>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d036      	beq.n	8006d7a <HAL_DMA_IRQHandler+0xcd2>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a23      	ldr	r2, [pc, #140]	; (8006da0 <HAL_DMA_IRQHandler+0xcf8>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d031      	beq.n	8006d7a <HAL_DMA_IRQHandler+0xcd2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a22      	ldr	r2, [pc, #136]	; (8006da4 <HAL_DMA_IRQHandler+0xcfc>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d02c      	beq.n	8006d7a <HAL_DMA_IRQHandler+0xcd2>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a20      	ldr	r2, [pc, #128]	; (8006da8 <HAL_DMA_IRQHandler+0xd00>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d027      	beq.n	8006d7a <HAL_DMA_IRQHandler+0xcd2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a1f      	ldr	r2, [pc, #124]	; (8006dac <HAL_DMA_IRQHandler+0xd04>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d022      	beq.n	8006d7a <HAL_DMA_IRQHandler+0xcd2>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a1d      	ldr	r2, [pc, #116]	; (8006db0 <HAL_DMA_IRQHandler+0xd08>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d01d      	beq.n	8006d7a <HAL_DMA_IRQHandler+0xcd2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a1c      	ldr	r2, [pc, #112]	; (8006db4 <HAL_DMA_IRQHandler+0xd0c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d018      	beq.n	8006d7a <HAL_DMA_IRQHandler+0xcd2>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a1a      	ldr	r2, [pc, #104]	; (8006db8 <HAL_DMA_IRQHandler+0xd10>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d013      	beq.n	8006d7a <HAL_DMA_IRQHandler+0xcd2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a19      	ldr	r2, [pc, #100]	; (8006dbc <HAL_DMA_IRQHandler+0xd14>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00e      	beq.n	8006d7a <HAL_DMA_IRQHandler+0xcd2>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a17      	ldr	r2, [pc, #92]	; (8006dc0 <HAL_DMA_IRQHandler+0xd18>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d009      	beq.n	8006d7a <HAL_DMA_IRQHandler+0xcd2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a16      	ldr	r2, [pc, #88]	; (8006dc4 <HAL_DMA_IRQHandler+0xd1c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d004      	beq.n	8006d7a <HAL_DMA_IRQHandler+0xcd2>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a14      	ldr	r2, [pc, #80]	; (8006dc8 <HAL_DMA_IRQHandler+0xd20>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d128      	bne.n	8006dcc <HAL_DMA_IRQHandler+0xd24>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0214 	bic.w	r2, r2, #20
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	e027      	b.n	8006ddc <HAL_DMA_IRQHandler+0xd34>
 8006d8c:	40020010 	.word	0x40020010
 8006d90:	40020028 	.word	0x40020028
 8006d94:	40020040 	.word	0x40020040
 8006d98:	40020058 	.word	0x40020058
 8006d9c:	40020070 	.word	0x40020070
 8006da0:	40020088 	.word	0x40020088
 8006da4:	400200a0 	.word	0x400200a0
 8006da8:	400200b8 	.word	0x400200b8
 8006dac:	40020410 	.word	0x40020410
 8006db0:	40020428 	.word	0x40020428
 8006db4:	40020440 	.word	0x40020440
 8006db8:	40020458 	.word	0x40020458
 8006dbc:	40020470 	.word	0x40020470
 8006dc0:	40020488 	.word	0x40020488
 8006dc4:	400204a0 	.word	0x400204a0
 8006dc8:	400204b8 	.word	0x400204b8
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 020a 	bic.w	r2, r2, #10
 8006dda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 8097 	beq.w	8006f24 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dfe:	e091      	b.n	8006f24 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e04:	f003 031f 	and.w	r3, r3, #31
 8006e08:	2208      	movs	r2, #8
 8006e0a:	409a      	lsls	r2, r3
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	4013      	ands	r3, r2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 8088 	beq.w	8006f26 <HAL_DMA_IRQHandler+0xe7e>
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f003 0308 	and.w	r3, r3, #8
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 8082 	beq.w	8006f26 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a41      	ldr	r2, [pc, #260]	; (8006f2c <HAL_DMA_IRQHandler+0xe84>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d04a      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xe1a>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a3f      	ldr	r2, [pc, #252]	; (8006f30 <HAL_DMA_IRQHandler+0xe88>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d045      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xe1a>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a3e      	ldr	r2, [pc, #248]	; (8006f34 <HAL_DMA_IRQHandler+0xe8c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d040      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xe1a>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a3c      	ldr	r2, [pc, #240]	; (8006f38 <HAL_DMA_IRQHandler+0xe90>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d03b      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xe1a>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a3b      	ldr	r2, [pc, #236]	; (8006f3c <HAL_DMA_IRQHandler+0xe94>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d036      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xe1a>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a39      	ldr	r2, [pc, #228]	; (8006f40 <HAL_DMA_IRQHandler+0xe98>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d031      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xe1a>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a38      	ldr	r2, [pc, #224]	; (8006f44 <HAL_DMA_IRQHandler+0xe9c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d02c      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xe1a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a36      	ldr	r2, [pc, #216]	; (8006f48 <HAL_DMA_IRQHandler+0xea0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d027      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xe1a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a35      	ldr	r2, [pc, #212]	; (8006f4c <HAL_DMA_IRQHandler+0xea4>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d022      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xe1a>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a33      	ldr	r2, [pc, #204]	; (8006f50 <HAL_DMA_IRQHandler+0xea8>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d01d      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xe1a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a32      	ldr	r2, [pc, #200]	; (8006f54 <HAL_DMA_IRQHandler+0xeac>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d018      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xe1a>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a30      	ldr	r2, [pc, #192]	; (8006f58 <HAL_DMA_IRQHandler+0xeb0>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d013      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xe1a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a2f      	ldr	r2, [pc, #188]	; (8006f5c <HAL_DMA_IRQHandler+0xeb4>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d00e      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xe1a>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a2d      	ldr	r2, [pc, #180]	; (8006f60 <HAL_DMA_IRQHandler+0xeb8>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d009      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xe1a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a2c      	ldr	r2, [pc, #176]	; (8006f64 <HAL_DMA_IRQHandler+0xebc>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d004      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0xe1a>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a2a      	ldr	r2, [pc, #168]	; (8006f68 <HAL_DMA_IRQHandler+0xec0>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d108      	bne.n	8006ed4 <HAL_DMA_IRQHandler+0xe2c>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 021c 	bic.w	r2, r2, #28
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	e007      	b.n	8006ee4 <HAL_DMA_IRQHandler+0xe3c>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 020e 	bic.w	r2, r2, #14
 8006ee2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee8:	f003 031f 	and.w	r3, r3, #31
 8006eec:	2201      	movs	r2, #1
 8006eee:	409a      	lsls	r2, r3
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d009      	beq.n	8006f26 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	4798      	blx	r3
 8006f1a:	e004      	b.n	8006f26 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006f1c:	bf00      	nop
 8006f1e:	e002      	b.n	8006f26 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f20:	bf00      	nop
 8006f22:	e000      	b.n	8006f26 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f24:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f26:	3728      	adds	r7, #40	; 0x28
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	40020010 	.word	0x40020010
 8006f30:	40020028 	.word	0x40020028
 8006f34:	40020040 	.word	0x40020040
 8006f38:	40020058 	.word	0x40020058
 8006f3c:	40020070 	.word	0x40020070
 8006f40:	40020088 	.word	0x40020088
 8006f44:	400200a0 	.word	0x400200a0
 8006f48:	400200b8 	.word	0x400200b8
 8006f4c:	40020410 	.word	0x40020410
 8006f50:	40020428 	.word	0x40020428
 8006f54:	40020440 	.word	0x40020440
 8006f58:	40020458 	.word	0x40020458
 8006f5c:	40020470 	.word	0x40020470
 8006f60:	40020488 	.word	0x40020488
 8006f64:	400204a0 	.word	0x400204a0
 8006f68:	400204b8 	.word	0x400204b8

08006f6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f84:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a7f      	ldr	r2, [pc, #508]	; (8007188 <DMA_SetConfig+0x21c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d072      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a7d      	ldr	r2, [pc, #500]	; (800718c <DMA_SetConfig+0x220>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d06d      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a7c      	ldr	r2, [pc, #496]	; (8007190 <DMA_SetConfig+0x224>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d068      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a7a      	ldr	r2, [pc, #488]	; (8007194 <DMA_SetConfig+0x228>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d063      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a79      	ldr	r2, [pc, #484]	; (8007198 <DMA_SetConfig+0x22c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d05e      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a77      	ldr	r2, [pc, #476]	; (800719c <DMA_SetConfig+0x230>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d059      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a76      	ldr	r2, [pc, #472]	; (80071a0 <DMA_SetConfig+0x234>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d054      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a74      	ldr	r2, [pc, #464]	; (80071a4 <DMA_SetConfig+0x238>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d04f      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a73      	ldr	r2, [pc, #460]	; (80071a8 <DMA_SetConfig+0x23c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d04a      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a71      	ldr	r2, [pc, #452]	; (80071ac <DMA_SetConfig+0x240>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d045      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a70      	ldr	r2, [pc, #448]	; (80071b0 <DMA_SetConfig+0x244>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d040      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a6e      	ldr	r2, [pc, #440]	; (80071b4 <DMA_SetConfig+0x248>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d03b      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a6d      	ldr	r2, [pc, #436]	; (80071b8 <DMA_SetConfig+0x24c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d036      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a6b      	ldr	r2, [pc, #428]	; (80071bc <DMA_SetConfig+0x250>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d031      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a6a      	ldr	r2, [pc, #424]	; (80071c0 <DMA_SetConfig+0x254>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d02c      	beq.n	8007076 <DMA_SetConfig+0x10a>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a68      	ldr	r2, [pc, #416]	; (80071c4 <DMA_SetConfig+0x258>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d027      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a67      	ldr	r2, [pc, #412]	; (80071c8 <DMA_SetConfig+0x25c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d022      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a65      	ldr	r2, [pc, #404]	; (80071cc <DMA_SetConfig+0x260>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d01d      	beq.n	8007076 <DMA_SetConfig+0x10a>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a64      	ldr	r2, [pc, #400]	; (80071d0 <DMA_SetConfig+0x264>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d018      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a62      	ldr	r2, [pc, #392]	; (80071d4 <DMA_SetConfig+0x268>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d013      	beq.n	8007076 <DMA_SetConfig+0x10a>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a61      	ldr	r2, [pc, #388]	; (80071d8 <DMA_SetConfig+0x26c>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00e      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a5f      	ldr	r2, [pc, #380]	; (80071dc <DMA_SetConfig+0x270>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d009      	beq.n	8007076 <DMA_SetConfig+0x10a>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a5e      	ldr	r2, [pc, #376]	; (80071e0 <DMA_SetConfig+0x274>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d004      	beq.n	8007076 <DMA_SetConfig+0x10a>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a5c      	ldr	r2, [pc, #368]	; (80071e4 <DMA_SetConfig+0x278>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d101      	bne.n	800707a <DMA_SetConfig+0x10e>
 8007076:	2301      	movs	r3, #1
 8007078:	e000      	b.n	800707c <DMA_SetConfig+0x110>
 800707a:	2300      	movs	r3, #0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00d      	beq.n	800709c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007088:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d004      	beq.n	800709c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800709a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a39      	ldr	r2, [pc, #228]	; (8007188 <DMA_SetConfig+0x21c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d04a      	beq.n	800713c <DMA_SetConfig+0x1d0>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a38      	ldr	r2, [pc, #224]	; (800718c <DMA_SetConfig+0x220>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d045      	beq.n	800713c <DMA_SetConfig+0x1d0>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a36      	ldr	r2, [pc, #216]	; (8007190 <DMA_SetConfig+0x224>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d040      	beq.n	800713c <DMA_SetConfig+0x1d0>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a35      	ldr	r2, [pc, #212]	; (8007194 <DMA_SetConfig+0x228>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d03b      	beq.n	800713c <DMA_SetConfig+0x1d0>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a33      	ldr	r2, [pc, #204]	; (8007198 <DMA_SetConfig+0x22c>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d036      	beq.n	800713c <DMA_SetConfig+0x1d0>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a32      	ldr	r2, [pc, #200]	; (800719c <DMA_SetConfig+0x230>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d031      	beq.n	800713c <DMA_SetConfig+0x1d0>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a30      	ldr	r2, [pc, #192]	; (80071a0 <DMA_SetConfig+0x234>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d02c      	beq.n	800713c <DMA_SetConfig+0x1d0>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a2f      	ldr	r2, [pc, #188]	; (80071a4 <DMA_SetConfig+0x238>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d027      	beq.n	800713c <DMA_SetConfig+0x1d0>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a2d      	ldr	r2, [pc, #180]	; (80071a8 <DMA_SetConfig+0x23c>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d022      	beq.n	800713c <DMA_SetConfig+0x1d0>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a2c      	ldr	r2, [pc, #176]	; (80071ac <DMA_SetConfig+0x240>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d01d      	beq.n	800713c <DMA_SetConfig+0x1d0>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a2a      	ldr	r2, [pc, #168]	; (80071b0 <DMA_SetConfig+0x244>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d018      	beq.n	800713c <DMA_SetConfig+0x1d0>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a29      	ldr	r2, [pc, #164]	; (80071b4 <DMA_SetConfig+0x248>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d013      	beq.n	800713c <DMA_SetConfig+0x1d0>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a27      	ldr	r2, [pc, #156]	; (80071b8 <DMA_SetConfig+0x24c>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d00e      	beq.n	800713c <DMA_SetConfig+0x1d0>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a26      	ldr	r2, [pc, #152]	; (80071bc <DMA_SetConfig+0x250>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d009      	beq.n	800713c <DMA_SetConfig+0x1d0>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a24      	ldr	r2, [pc, #144]	; (80071c0 <DMA_SetConfig+0x254>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d004      	beq.n	800713c <DMA_SetConfig+0x1d0>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a23      	ldr	r2, [pc, #140]	; (80071c4 <DMA_SetConfig+0x258>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d101      	bne.n	8007140 <DMA_SetConfig+0x1d4>
 800713c:	2301      	movs	r3, #1
 800713e:	e000      	b.n	8007142 <DMA_SetConfig+0x1d6>
 8007140:	2300      	movs	r3, #0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d059      	beq.n	80071fa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800714a:	f003 031f 	and.w	r3, r3, #31
 800714e:	223f      	movs	r2, #63	; 0x3f
 8007150:	409a      	lsls	r2, r3
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007164:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	2b40      	cmp	r3, #64	; 0x40
 8007174:	d138      	bne.n	80071e8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007186:	e0ae      	b.n	80072e6 <DMA_SetConfig+0x37a>
 8007188:	40020010 	.word	0x40020010
 800718c:	40020028 	.word	0x40020028
 8007190:	40020040 	.word	0x40020040
 8007194:	40020058 	.word	0x40020058
 8007198:	40020070 	.word	0x40020070
 800719c:	40020088 	.word	0x40020088
 80071a0:	400200a0 	.word	0x400200a0
 80071a4:	400200b8 	.word	0x400200b8
 80071a8:	40020410 	.word	0x40020410
 80071ac:	40020428 	.word	0x40020428
 80071b0:	40020440 	.word	0x40020440
 80071b4:	40020458 	.word	0x40020458
 80071b8:	40020470 	.word	0x40020470
 80071bc:	40020488 	.word	0x40020488
 80071c0:	400204a0 	.word	0x400204a0
 80071c4:	400204b8 	.word	0x400204b8
 80071c8:	58025408 	.word	0x58025408
 80071cc:	5802541c 	.word	0x5802541c
 80071d0:	58025430 	.word	0x58025430
 80071d4:	58025444 	.word	0x58025444
 80071d8:	58025458 	.word	0x58025458
 80071dc:	5802546c 	.word	0x5802546c
 80071e0:	58025480 	.word	0x58025480
 80071e4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	60da      	str	r2, [r3, #12]
}
 80071f8:	e075      	b.n	80072e6 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a3d      	ldr	r2, [pc, #244]	; (80072f4 <DMA_SetConfig+0x388>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d04a      	beq.n	800729a <DMA_SetConfig+0x32e>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a3b      	ldr	r2, [pc, #236]	; (80072f8 <DMA_SetConfig+0x38c>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d045      	beq.n	800729a <DMA_SetConfig+0x32e>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a3a      	ldr	r2, [pc, #232]	; (80072fc <DMA_SetConfig+0x390>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d040      	beq.n	800729a <DMA_SetConfig+0x32e>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a38      	ldr	r2, [pc, #224]	; (8007300 <DMA_SetConfig+0x394>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d03b      	beq.n	800729a <DMA_SetConfig+0x32e>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a37      	ldr	r2, [pc, #220]	; (8007304 <DMA_SetConfig+0x398>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d036      	beq.n	800729a <DMA_SetConfig+0x32e>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a35      	ldr	r2, [pc, #212]	; (8007308 <DMA_SetConfig+0x39c>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d031      	beq.n	800729a <DMA_SetConfig+0x32e>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a34      	ldr	r2, [pc, #208]	; (800730c <DMA_SetConfig+0x3a0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d02c      	beq.n	800729a <DMA_SetConfig+0x32e>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a32      	ldr	r2, [pc, #200]	; (8007310 <DMA_SetConfig+0x3a4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d027      	beq.n	800729a <DMA_SetConfig+0x32e>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a31      	ldr	r2, [pc, #196]	; (8007314 <DMA_SetConfig+0x3a8>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d022      	beq.n	800729a <DMA_SetConfig+0x32e>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a2f      	ldr	r2, [pc, #188]	; (8007318 <DMA_SetConfig+0x3ac>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d01d      	beq.n	800729a <DMA_SetConfig+0x32e>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a2e      	ldr	r2, [pc, #184]	; (800731c <DMA_SetConfig+0x3b0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d018      	beq.n	800729a <DMA_SetConfig+0x32e>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a2c      	ldr	r2, [pc, #176]	; (8007320 <DMA_SetConfig+0x3b4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d013      	beq.n	800729a <DMA_SetConfig+0x32e>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a2b      	ldr	r2, [pc, #172]	; (8007324 <DMA_SetConfig+0x3b8>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00e      	beq.n	800729a <DMA_SetConfig+0x32e>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a29      	ldr	r2, [pc, #164]	; (8007328 <DMA_SetConfig+0x3bc>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d009      	beq.n	800729a <DMA_SetConfig+0x32e>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a28      	ldr	r2, [pc, #160]	; (800732c <DMA_SetConfig+0x3c0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d004      	beq.n	800729a <DMA_SetConfig+0x32e>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a26      	ldr	r2, [pc, #152]	; (8007330 <DMA_SetConfig+0x3c4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d101      	bne.n	800729e <DMA_SetConfig+0x332>
 800729a:	2301      	movs	r3, #1
 800729c:	e000      	b.n	80072a0 <DMA_SetConfig+0x334>
 800729e:	2300      	movs	r3, #0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d020      	beq.n	80072e6 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a8:	f003 031f 	and.w	r3, r3, #31
 80072ac:	2201      	movs	r2, #1
 80072ae:	409a      	lsls	r2, r3
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	2b40      	cmp	r3, #64	; 0x40
 80072c2:	d108      	bne.n	80072d6 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	60da      	str	r2, [r3, #12]
}
 80072d4:	e007      	b.n	80072e6 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	60da      	str	r2, [r3, #12]
}
 80072e6:	bf00      	nop
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	48022c08 	.word	0x48022c08
 80072f8:	48022c1c 	.word	0x48022c1c
 80072fc:	48022c30 	.word	0x48022c30
 8007300:	48022c44 	.word	0x48022c44
 8007304:	48022c58 	.word	0x48022c58
 8007308:	48022c6c 	.word	0x48022c6c
 800730c:	48022c80 	.word	0x48022c80
 8007310:	48022c94 	.word	0x48022c94
 8007314:	58025408 	.word	0x58025408
 8007318:	5802541c 	.word	0x5802541c
 800731c:	58025430 	.word	0x58025430
 8007320:	58025444 	.word	0x58025444
 8007324:	58025458 	.word	0x58025458
 8007328:	5802546c 	.word	0x5802546c
 800732c:	58025480 	.word	0x58025480
 8007330:	58025494 	.word	0x58025494

08007334 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a42      	ldr	r2, [pc, #264]	; (800744c <DMA_CalcBaseAndBitshift+0x118>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d04a      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a41      	ldr	r2, [pc, #260]	; (8007450 <DMA_CalcBaseAndBitshift+0x11c>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d045      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a3f      	ldr	r2, [pc, #252]	; (8007454 <DMA_CalcBaseAndBitshift+0x120>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d040      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a3e      	ldr	r2, [pc, #248]	; (8007458 <DMA_CalcBaseAndBitshift+0x124>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d03b      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a3c      	ldr	r2, [pc, #240]	; (800745c <DMA_CalcBaseAndBitshift+0x128>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d036      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a3b      	ldr	r2, [pc, #236]	; (8007460 <DMA_CalcBaseAndBitshift+0x12c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d031      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a39      	ldr	r2, [pc, #228]	; (8007464 <DMA_CalcBaseAndBitshift+0x130>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d02c      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a38      	ldr	r2, [pc, #224]	; (8007468 <DMA_CalcBaseAndBitshift+0x134>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d027      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a36      	ldr	r2, [pc, #216]	; (800746c <DMA_CalcBaseAndBitshift+0x138>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d022      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a35      	ldr	r2, [pc, #212]	; (8007470 <DMA_CalcBaseAndBitshift+0x13c>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d01d      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a33      	ldr	r2, [pc, #204]	; (8007474 <DMA_CalcBaseAndBitshift+0x140>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d018      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a32      	ldr	r2, [pc, #200]	; (8007478 <DMA_CalcBaseAndBitshift+0x144>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d013      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a30      	ldr	r2, [pc, #192]	; (800747c <DMA_CalcBaseAndBitshift+0x148>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d00e      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a2f      	ldr	r2, [pc, #188]	; (8007480 <DMA_CalcBaseAndBitshift+0x14c>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d009      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a2d      	ldr	r2, [pc, #180]	; (8007484 <DMA_CalcBaseAndBitshift+0x150>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d004      	beq.n	80073dc <DMA_CalcBaseAndBitshift+0xa8>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a2c      	ldr	r2, [pc, #176]	; (8007488 <DMA_CalcBaseAndBitshift+0x154>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d101      	bne.n	80073e0 <DMA_CalcBaseAndBitshift+0xac>
 80073dc:	2301      	movs	r3, #1
 80073de:	e000      	b.n	80073e2 <DMA_CalcBaseAndBitshift+0xae>
 80073e0:	2300      	movs	r3, #0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d024      	beq.n	8007430 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	3b10      	subs	r3, #16
 80073ee:	4a27      	ldr	r2, [pc, #156]	; (800748c <DMA_CalcBaseAndBitshift+0x158>)
 80073f0:	fba2 2303 	umull	r2, r3, r2, r3
 80073f4:	091b      	lsrs	r3, r3, #4
 80073f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f003 0307 	and.w	r3, r3, #7
 80073fe:	4a24      	ldr	r2, [pc, #144]	; (8007490 <DMA_CalcBaseAndBitshift+0x15c>)
 8007400:	5cd3      	ldrb	r3, [r2, r3]
 8007402:	461a      	mov	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2b03      	cmp	r3, #3
 800740c:	d908      	bls.n	8007420 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	4b1f      	ldr	r3, [pc, #124]	; (8007494 <DMA_CalcBaseAndBitshift+0x160>)
 8007416:	4013      	ands	r3, r2
 8007418:	1d1a      	adds	r2, r3, #4
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	659a      	str	r2, [r3, #88]	; 0x58
 800741e:	e00d      	b.n	800743c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	4b1b      	ldr	r3, [pc, #108]	; (8007494 <DMA_CalcBaseAndBitshift+0x160>)
 8007428:	4013      	ands	r3, r2
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	6593      	str	r3, [r2, #88]	; 0x58
 800742e:	e005      	b.n	800743c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	40020010 	.word	0x40020010
 8007450:	40020028 	.word	0x40020028
 8007454:	40020040 	.word	0x40020040
 8007458:	40020058 	.word	0x40020058
 800745c:	40020070 	.word	0x40020070
 8007460:	40020088 	.word	0x40020088
 8007464:	400200a0 	.word	0x400200a0
 8007468:	400200b8 	.word	0x400200b8
 800746c:	40020410 	.word	0x40020410
 8007470:	40020428 	.word	0x40020428
 8007474:	40020440 	.word	0x40020440
 8007478:	40020458 	.word	0x40020458
 800747c:	40020470 	.word	0x40020470
 8007480:	40020488 	.word	0x40020488
 8007484:	400204a0 	.word	0x400204a0
 8007488:	400204b8 	.word	0x400204b8
 800748c:	aaaaaaab 	.word	0xaaaaaaab
 8007490:	0801078c 	.word	0x0801078c
 8007494:	fffffc00 	.word	0xfffffc00

08007498 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d120      	bne.n	80074ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d858      	bhi.n	8007566 <DMA_CheckFifoParam+0xce>
 80074b4:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <DMA_CheckFifoParam+0x24>)
 80074b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ba:	bf00      	nop
 80074bc:	080074cd 	.word	0x080074cd
 80074c0:	080074df 	.word	0x080074df
 80074c4:	080074cd 	.word	0x080074cd
 80074c8:	08007567 	.word	0x08007567
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d048      	beq.n	800756a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074dc:	e045      	b.n	800756a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074e6:	d142      	bne.n	800756e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074ec:	e03f      	b.n	800756e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074f6:	d123      	bne.n	8007540 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fc:	2b03      	cmp	r3, #3
 80074fe:	d838      	bhi.n	8007572 <DMA_CheckFifoParam+0xda>
 8007500:	a201      	add	r2, pc, #4	; (adr r2, 8007508 <DMA_CheckFifoParam+0x70>)
 8007502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007506:	bf00      	nop
 8007508:	08007519 	.word	0x08007519
 800750c:	0800751f 	.word	0x0800751f
 8007510:	08007519 	.word	0x08007519
 8007514:	08007531 	.word	0x08007531
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	73fb      	strb	r3, [r7, #15]
        break;
 800751c:	e030      	b.n	8007580 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d025      	beq.n	8007576 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800752e:	e022      	b.n	8007576 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007534:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007538:	d11f      	bne.n	800757a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800753e:	e01c      	b.n	800757a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007544:	2b02      	cmp	r3, #2
 8007546:	d902      	bls.n	800754e <DMA_CheckFifoParam+0xb6>
 8007548:	2b03      	cmp	r3, #3
 800754a:	d003      	beq.n	8007554 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800754c:	e018      	b.n	8007580 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	73fb      	strb	r3, [r7, #15]
        break;
 8007552:	e015      	b.n	8007580 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00e      	beq.n	800757e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	73fb      	strb	r3, [r7, #15]
    break;
 8007564:	e00b      	b.n	800757e <DMA_CheckFifoParam+0xe6>
        break;
 8007566:	bf00      	nop
 8007568:	e00a      	b.n	8007580 <DMA_CheckFifoParam+0xe8>
        break;
 800756a:	bf00      	nop
 800756c:	e008      	b.n	8007580 <DMA_CheckFifoParam+0xe8>
        break;
 800756e:	bf00      	nop
 8007570:	e006      	b.n	8007580 <DMA_CheckFifoParam+0xe8>
        break;
 8007572:	bf00      	nop
 8007574:	e004      	b.n	8007580 <DMA_CheckFifoParam+0xe8>
        break;
 8007576:	bf00      	nop
 8007578:	e002      	b.n	8007580 <DMA_CheckFifoParam+0xe8>
        break;
 800757a:	bf00      	nop
 800757c:	e000      	b.n	8007580 <DMA_CheckFifoParam+0xe8>
    break;
 800757e:	bf00      	nop
    }
  }

  return status;
 8007580:	7bfb      	ldrb	r3, [r7, #15]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop

08007590 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a38      	ldr	r2, [pc, #224]	; (8007684 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d022      	beq.n	80075ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a36      	ldr	r2, [pc, #216]	; (8007688 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d01d      	beq.n	80075ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a35      	ldr	r2, [pc, #212]	; (800768c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d018      	beq.n	80075ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a33      	ldr	r2, [pc, #204]	; (8007690 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d013      	beq.n	80075ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a32      	ldr	r2, [pc, #200]	; (8007694 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d00e      	beq.n	80075ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a30      	ldr	r2, [pc, #192]	; (8007698 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d009      	beq.n	80075ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a2f      	ldr	r2, [pc, #188]	; (800769c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d004      	beq.n	80075ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a2d      	ldr	r2, [pc, #180]	; (80076a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d101      	bne.n	80075f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80075ee:	2301      	movs	r3, #1
 80075f0:	e000      	b.n	80075f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80075f2:	2300      	movs	r3, #0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d01a      	beq.n	800762e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	3b08      	subs	r3, #8
 8007600:	4a28      	ldr	r2, [pc, #160]	; (80076a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007602:	fba2 2303 	umull	r2, r3, r2, r3
 8007606:	091b      	lsrs	r3, r3, #4
 8007608:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4b26      	ldr	r3, [pc, #152]	; (80076a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800760e:	4413      	add	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	461a      	mov	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a24      	ldr	r2, [pc, #144]	; (80076ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800761c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f003 031f 	and.w	r3, r3, #31
 8007624:	2201      	movs	r2, #1
 8007626:	409a      	lsls	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800762c:	e024      	b.n	8007678 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	b2db      	uxtb	r3, r3
 8007634:	3b10      	subs	r3, #16
 8007636:	4a1e      	ldr	r2, [pc, #120]	; (80076b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007638:	fba2 2303 	umull	r2, r3, r2, r3
 800763c:	091b      	lsrs	r3, r3, #4
 800763e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	4a1c      	ldr	r2, [pc, #112]	; (80076b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d806      	bhi.n	8007656 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	4a1b      	ldr	r2, [pc, #108]	; (80076b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d902      	bls.n	8007656 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	3308      	adds	r3, #8
 8007654:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	4b18      	ldr	r3, [pc, #96]	; (80076bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800765a:	4413      	add	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	461a      	mov	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a16      	ldr	r2, [pc, #88]	; (80076c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007668:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f003 031f 	and.w	r3, r3, #31
 8007670:	2201      	movs	r2, #1
 8007672:	409a      	lsls	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007678:	bf00      	nop
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	58025408 	.word	0x58025408
 8007688:	5802541c 	.word	0x5802541c
 800768c:	58025430 	.word	0x58025430
 8007690:	58025444 	.word	0x58025444
 8007694:	58025458 	.word	0x58025458
 8007698:	5802546c 	.word	0x5802546c
 800769c:	58025480 	.word	0x58025480
 80076a0:	58025494 	.word	0x58025494
 80076a4:	cccccccd 	.word	0xcccccccd
 80076a8:	16009600 	.word	0x16009600
 80076ac:	58025880 	.word	0x58025880
 80076b0:	aaaaaaab 	.word	0xaaaaaaab
 80076b4:	400204b8 	.word	0x400204b8
 80076b8:	4002040f 	.word	0x4002040f
 80076bc:	10008200 	.word	0x10008200
 80076c0:	40020880 	.word	0x40020880

080076c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d04a      	beq.n	8007770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d847      	bhi.n	8007770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a25      	ldr	r2, [pc, #148]	; (800777c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d022      	beq.n	8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a24      	ldr	r2, [pc, #144]	; (8007780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d01d      	beq.n	8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a22      	ldr	r2, [pc, #136]	; (8007784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d018      	beq.n	8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a21      	ldr	r2, [pc, #132]	; (8007788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d013      	beq.n	8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a1f      	ldr	r2, [pc, #124]	; (800778c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d00e      	beq.n	8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a1e      	ldr	r2, [pc, #120]	; (8007790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d009      	beq.n	8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a1c      	ldr	r2, [pc, #112]	; (8007794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d004      	beq.n	8007730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a1b      	ldr	r2, [pc, #108]	; (8007798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d101      	bne.n	8007734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007730:	2301      	movs	r3, #1
 8007732:	e000      	b.n	8007736 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007734:	2300      	movs	r3, #0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	4b17      	ldr	r3, [pc, #92]	; (800779c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800773e:	4413      	add	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	461a      	mov	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a15      	ldr	r2, [pc, #84]	; (80077a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800774c:	671a      	str	r2, [r3, #112]	; 0x70
 800774e:	e009      	b.n	8007764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	4b14      	ldr	r3, [pc, #80]	; (80077a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	461a      	mov	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a11      	ldr	r2, [pc, #68]	; (80077a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007762:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3b01      	subs	r3, #1
 8007768:	2201      	movs	r2, #1
 800776a:	409a      	lsls	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007770:	bf00      	nop
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	58025408 	.word	0x58025408
 8007780:	5802541c 	.word	0x5802541c
 8007784:	58025430 	.word	0x58025430
 8007788:	58025444 	.word	0x58025444
 800778c:	58025458 	.word	0x58025458
 8007790:	5802546c 	.word	0x5802546c
 8007794:	58025480 	.word	0x58025480
 8007798:	58025494 	.word	0x58025494
 800779c:	1600963f 	.word	0x1600963f
 80077a0:	58025940 	.word	0x58025940
 80077a4:	1000823f 	.word	0x1000823f
 80077a8:	40020940 	.word	0x40020940

080077ac <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e04f      	b.n	800785e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d106      	bne.n	80077d8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7f9 f8fc 	bl	80009d0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	4b20      	ldr	r3, [pc, #128]	; (8007868 <HAL_DMA2D_Init+0xbc>)
 80077e8:	4013      	ands	r3, r2
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6851      	ldr	r1, [r2, #4]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	69d2      	ldr	r2, [r2, #28]
 80077f2:	4311      	orrs	r1, r2
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	6812      	ldr	r2, [r2, #0]
 80077f8:	430b      	orrs	r3, r1
 80077fa:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007802:	4b1a      	ldr	r3, [pc, #104]	; (800786c <HAL_DMA2D_Init+0xc0>)
 8007804:	4013      	ands	r3, r2
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	6891      	ldr	r1, [r2, #8]
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	6992      	ldr	r2, [r2, #24]
 800780e:	4311      	orrs	r1, r2
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	6812      	ldr	r2, [r2, #0]
 8007814:	430b      	orrs	r3, r1
 8007816:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800781e:	4b14      	ldr	r3, [pc, #80]	; (8007870 <HAL_DMA2D_Init+0xc4>)
 8007820:	4013      	ands	r3, r2
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	68d1      	ldr	r1, [r2, #12]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	6812      	ldr	r2, [r2, #0]
 800782a:	430b      	orrs	r3, r1
 800782c:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007834:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	051a      	lsls	r2, r3, #20
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	055b      	lsls	r3, r3, #21
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	fff8ffbf 	.word	0xfff8ffbf
 800786c:	fffffef8 	.word	0xfffffef8
 8007870:	ffff0000 	.word	0xffff0000

08007874 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af02      	add	r7, sp, #8
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007888:	2b01      	cmp	r3, #1
 800788a:	d101      	bne.n	8007890 <HAL_DMA2D_Start+0x1c>
 800788c:	2302      	movs	r3, #2
 800788e:	e018      	b.n	80078c2 <HAL_DMA2D_Start+0x4e>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2202      	movs	r2, #2
 800789c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	68b9      	ldr	r1, [r7, #8]
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 fab4 	bl	8007e18 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0201 	orr.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b086      	sub	sp, #24
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
 80078d2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d056      	beq.n	8007994 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80078e6:	f7fc fc73 	bl	80041d0 <HAL_GetTick>
 80078ea:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80078ec:	e04b      	b.n	8007986 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d023      	beq.n	8007948 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d005      	beq.n	8007916 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800790e:	f043 0202 	orr.w	r2, r3, #2
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	d005      	beq.n	800792c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007924:	f043 0201 	orr.w	r2, r3, #1
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2221      	movs	r2, #33	; 0x21
 8007932:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2204      	movs	r2, #4
 8007938:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e0a5      	b.n	8007a94 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794e:	d01a      	beq.n	8007986 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007950:	f7fc fc3e 	bl	80041d0 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	429a      	cmp	r2, r3
 800795e:	d302      	bcc.n	8007966 <HAL_DMA2D_PollForTransfer+0x9c>
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10f      	bne.n	8007986 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800796a:	f043 0220 	orr.w	r2, r3, #32
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2203      	movs	r2, #3
 8007976:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e086      	b.n	8007a94 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d0ac      	beq.n	80078ee <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	f003 0320 	and.w	r3, r3, #32
 800799e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d061      	beq.n	8007a7a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80079b6:	f7fc fc0b 	bl	80041d0 <HAL_GetTick>
 80079ba:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80079bc:	e056      	b.n	8007a6c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d02e      	beq.n	8007a2e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f003 0308 	and.w	r3, r3, #8
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d005      	beq.n	80079e6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079de:	f043 0204 	orr.w	r2, r3, #4
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f003 0320 	and.w	r3, r3, #32
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d005      	beq.n	80079fc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079f4:	f043 0202 	orr.w	r2, r3, #2
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d005      	beq.n	8007a12 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a0a:	f043 0201 	orr.w	r2, r3, #1
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2229      	movs	r2, #41	; 0x29
 8007a18:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2204      	movs	r2, #4
 8007a1e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e032      	b.n	8007a94 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a34:	d01a      	beq.n	8007a6c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a36:	f7fc fbcb 	bl	80041d0 <HAL_GetTick>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d302      	bcc.n	8007a4c <HAL_DMA2D_PollForTransfer+0x182>
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10f      	bne.n	8007a6c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a50:	f043 0220 	orr.w	r2, r3, #32
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2203      	movs	r2, #3
 8007a5c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e013      	b.n	8007a94 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f003 0310 	and.w	r3, r3, #16
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0a1      	beq.n	80079be <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2212      	movs	r2, #18
 8007a80:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3718      	adds	r7, #24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d026      	beq.n	8007b0c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d021      	beq.n	8007b0c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ad6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007adc:	f043 0201 	orr.w	r2, r3, #1
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2204      	movs	r2, #4
 8007af0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d003      	beq.n	8007b0c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f003 0320 	and.w	r3, r3, #32
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d026      	beq.n	8007b64 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d021      	beq.n	8007b64 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b2e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2220      	movs	r2, #32
 8007b36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b3c:	f043 0202 	orr.w	r2, r3, #2
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2204      	movs	r2, #4
 8007b48:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f003 0308 	and.w	r3, r3, #8
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d026      	beq.n	8007bbc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d021      	beq.n	8007bbc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b86:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2208      	movs	r2, #8
 8007b8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b94:	f043 0204 	orr.w	r2, r3, #4
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2204      	movs	r2, #4
 8007ba0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f003 0304 	and.w	r3, r3, #4
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d013      	beq.n	8007bee <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00e      	beq.n	8007bee <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bde:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2204      	movs	r2, #4
 8007be6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f853 	bl	8007c94 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f003 0302 	and.w	r3, r3, #2
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d024      	beq.n	8007c42 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d01f      	beq.n	8007c42 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007c10:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2202      	movs	r2, #2
 8007c18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f003 0310 	and.w	r3, r3, #16
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01f      	beq.n	8007c8c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d01a      	beq.n	8007c8c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c64:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2210      	movs	r2, #16
 8007c6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f80e 	bl	8007ca8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007c8c:	bf00      	nop
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d101      	bne.n	8007ce0 <HAL_DMA2D_ConfigLayer+0x24>
 8007cdc:	2302      	movs	r3, #2
 8007cde:	e092      	b.n	8007e06 <HAL_DMA2D_ConfigLayer+0x14a>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2202      	movs	r2, #2
 8007cec:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	00db      	lsls	r3, r3, #3
 8007cf6:	1a9b      	subs	r3, r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	3328      	adds	r3, #40	; 0x28
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	4413      	add	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	041b      	lsls	r3, r3, #16
 8007d0c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007d14:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007d20:	4b3c      	ldr	r3, [pc, #240]	; (8007e14 <HAL_DMA2D_ConfigLayer+0x158>)
 8007d22:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	2b0a      	cmp	r3, #10
 8007d2a:	d003      	beq.n	8007d34 <HAL_DMA2D_ConfigLayer+0x78>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	2b09      	cmp	r3, #9
 8007d32:	d107      	bne.n	8007d44 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	613b      	str	r3, [r7, #16]
 8007d42:	e005      	b.n	8007d50 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	061b      	lsls	r3, r3, #24
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d120      	bne.n	8007d98 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	43db      	mvns	r3, r3
 8007d60:	ea02 0103 	and.w	r1, r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	6812      	ldr	r2, [r2, #0]
 8007d76:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	2b0a      	cmp	r3, #10
 8007d7e:	d003      	beq.n	8007d88 <HAL_DMA2D_ConfigLayer+0xcc>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	2b09      	cmp	r3, #9
 8007d86:	d135      	bne.n	8007df4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	68da      	ldr	r2, [r3, #12]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007d94:	629a      	str	r2, [r3, #40]	; 0x28
 8007d96:	e02d      	b.n	8007df4 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	2b0b      	cmp	r3, #11
 8007d9e:	d109      	bne.n	8007db4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	049b      	lsls	r3, r3, #18
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8007db2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	69da      	ldr	r2, [r3, #28]
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	43db      	mvns	r3, r3
 8007dbe:	ea02 0103 	and.w	r1, r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	6812      	ldr	r2, [r2, #0]
 8007dd4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	2b0a      	cmp	r3, #10
 8007ddc:	d003      	beq.n	8007de6 <HAL_DMA2D_ConfigLayer+0x12a>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2b09      	cmp	r3, #9
 8007de4:	d106      	bne.n	8007df4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	68da      	ldr	r2, [r3, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007df2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	371c      	adds	r7, #28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	ff33000f 	.word	0xff33000f

08007e18 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b08b      	sub	sp, #44	; 0x2c
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
 8007e24:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	041a      	lsls	r2, r3, #16
 8007e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e36:	431a      	orrs	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e50:	d174      	bne.n	8007f3c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007e58:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e60:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e68:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d108      	bne.n	8007e8a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	627b      	str	r3, [r7, #36]	; 0x24
 8007e88:	e053      	b.n	8007f32 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d106      	bne.n	8007ea0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e9e:	e048      	b.n	8007f32 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d111      	bne.n	8007ecc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	0cdb      	lsrs	r3, r3, #19
 8007eac:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	0a9b      	lsrs	r3, r3, #10
 8007eb2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	08db      	lsrs	r3, r3, #3
 8007eb8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	02db      	lsls	r3, r3, #11
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8007eca:	e032      	b.n	8007f32 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	2b03      	cmp	r3, #3
 8007ed2:	d117      	bne.n	8007f04 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
 8007ed6:	0fdb      	lsrs	r3, r3, #31
 8007ed8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	0cdb      	lsrs	r3, r3, #19
 8007ede:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	0adb      	lsrs	r3, r3, #11
 8007ee4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	08db      	lsrs	r3, r3, #3
 8007eea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	029b      	lsls	r3, r3, #10
 8007ef4:	431a      	orrs	r2, r3
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	03db      	lsls	r3, r3, #15
 8007efa:	4313      	orrs	r3, r2
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	627b      	str	r3, [r7, #36]	; 0x24
 8007f02:	e016      	b.n	8007f32 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	0f1b      	lsrs	r3, r3, #28
 8007f08:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	0d1b      	lsrs	r3, r3, #20
 8007f0e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	0b1b      	lsrs	r3, r3, #12
 8007f14:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	091b      	lsrs	r3, r3, #4
 8007f1a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	011a      	lsls	r2, r3, #4
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	021b      	lsls	r3, r3, #8
 8007f24:	431a      	orrs	r2, r3
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	031b      	lsls	r3, r3, #12
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f38:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007f3a:	e00d      	b.n	8007f58 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f44:	d104      	bne.n	8007f50 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	615a      	str	r2, [r3, #20]
}
 8007f4e:	e003      	b.n	8007f58 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	60da      	str	r2, [r3, #12]
}
 8007f58:	bf00      	nop
 8007f5a:	372c      	adds	r7, #44	; 0x2c
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
 8007f70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	2b80      	cmp	r3, #128	; 0x80
 8007f7c:	d105      	bne.n	8007f8a <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e315      	b.n	80085b6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d101      	bne.n	8007f98 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8007f94:	2302      	movs	r3, #2
 8007f96:	e30e      	b.n	80085b6 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	f040 82fd 	bne.w	80085a8 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a82      	ldr	r2, [pc, #520]	; (80081cc <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d04a      	beq.n	800805c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a81      	ldr	r2, [pc, #516]	; (80081d0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d045      	beq.n	800805c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a7f      	ldr	r2, [pc, #508]	; (80081d4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d040      	beq.n	800805c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a7e      	ldr	r2, [pc, #504]	; (80081d8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d03b      	beq.n	800805c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a7c      	ldr	r2, [pc, #496]	; (80081dc <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d036      	beq.n	800805c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a7b      	ldr	r2, [pc, #492]	; (80081e0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d031      	beq.n	800805c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a79      	ldr	r2, [pc, #484]	; (80081e4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d02c      	beq.n	800805c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a78      	ldr	r2, [pc, #480]	; (80081e8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d027      	beq.n	800805c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a76      	ldr	r2, [pc, #472]	; (80081ec <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d022      	beq.n	800805c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a75      	ldr	r2, [pc, #468]	; (80081f0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d01d      	beq.n	800805c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a73      	ldr	r2, [pc, #460]	; (80081f4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d018      	beq.n	800805c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a72      	ldr	r2, [pc, #456]	; (80081f8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d013      	beq.n	800805c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a70      	ldr	r2, [pc, #448]	; (80081fc <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d00e      	beq.n	800805c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a6f      	ldr	r2, [pc, #444]	; (8008200 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d009      	beq.n	800805c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a6d      	ldr	r2, [pc, #436]	; (8008204 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d004      	beq.n	800805c <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a6c      	ldr	r2, [pc, #432]	; (8008208 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d101      	bne.n	8008060 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 800805c:	2301      	movs	r3, #1
 800805e:	e000      	b.n	8008062 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8008060:	2300      	movs	r3, #0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d018      	beq.n	8008098 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008074:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008082:	3308      	adds	r3, #8
 8008084:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808a:	f003 031f 	and.w	r3, r3, #31
 800808e:	223f      	movs	r2, #63	; 0x3f
 8008090:	409a      	lsls	r2, r3
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	601a      	str	r2, [r3, #0]
 8008096:	e018      	b.n	80080ca <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6819      	ldr	r1, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	f248 0320 	movw	r3, #32800	; 0x8020
 80080a6:	430b      	orrs	r3, r1
 80080a8:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080b6:	3304      	adds	r3, #4
 80080b8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080be:	f003 031f 	and.w	r3, r3, #31
 80080c2:	2201      	movs	r2, #1
 80080c4:	409a      	lsls	r2, r3
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	68b9      	ldr	r1, [r7, #8]
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 fb41 	bl	8008758 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a3c      	ldr	r2, [pc, #240]	; (80081cc <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d072      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a3a      	ldr	r2, [pc, #232]	; (80081d0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d06d      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a39      	ldr	r2, [pc, #228]	; (80081d4 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d068      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a37      	ldr	r2, [pc, #220]	; (80081d8 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d063      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a36      	ldr	r2, [pc, #216]	; (80081dc <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d05e      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a34      	ldr	r2, [pc, #208]	; (80081e0 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d059      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a33      	ldr	r2, [pc, #204]	; (80081e4 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d054      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a31      	ldr	r2, [pc, #196]	; (80081e8 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d04f      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a30      	ldr	r2, [pc, #192]	; (80081ec <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d04a      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a2e      	ldr	r2, [pc, #184]	; (80081f0 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d045      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a2d      	ldr	r2, [pc, #180]	; (80081f4 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d040      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a2b      	ldr	r2, [pc, #172]	; (80081f8 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d03b      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a2a      	ldr	r2, [pc, #168]	; (80081fc <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d036      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a28      	ldr	r2, [pc, #160]	; (8008200 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d031      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a27      	ldr	r2, [pc, #156]	; (8008204 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d02c      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a25      	ldr	r2, [pc, #148]	; (8008208 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d027      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a24      	ldr	r2, [pc, #144]	; (800820c <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d022      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a22      	ldr	r2, [pc, #136]	; (8008210 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d01d      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a21      	ldr	r2, [pc, #132]	; (8008214 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d018      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a1f      	ldr	r2, [pc, #124]	; (8008218 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d013      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a1e      	ldr	r2, [pc, #120]	; (800821c <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d00e      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a1c      	ldr	r2, [pc, #112]	; (8008220 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d009      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a1b      	ldr	r2, [pc, #108]	; (8008224 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d004      	beq.n	80081c6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a19      	ldr	r2, [pc, #100]	; (8008228 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d132      	bne.n	800822c <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80081c6:	2301      	movs	r3, #1
 80081c8:	e031      	b.n	800822e <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80081ca:	bf00      	nop
 80081cc:	40020010 	.word	0x40020010
 80081d0:	40020028 	.word	0x40020028
 80081d4:	40020040 	.word	0x40020040
 80081d8:	40020058 	.word	0x40020058
 80081dc:	40020070 	.word	0x40020070
 80081e0:	40020088 	.word	0x40020088
 80081e4:	400200a0 	.word	0x400200a0
 80081e8:	400200b8 	.word	0x400200b8
 80081ec:	40020410 	.word	0x40020410
 80081f0:	40020428 	.word	0x40020428
 80081f4:	40020440 	.word	0x40020440
 80081f8:	40020458 	.word	0x40020458
 80081fc:	40020470 	.word	0x40020470
 8008200:	40020488 	.word	0x40020488
 8008204:	400204a0 	.word	0x400204a0
 8008208:	400204b8 	.word	0x400204b8
 800820c:	58025408 	.word	0x58025408
 8008210:	5802541c 	.word	0x5802541c
 8008214:	58025430 	.word	0x58025430
 8008218:	58025444 	.word	0x58025444
 800821c:	58025458 	.word	0x58025458
 8008220:	5802546c 	.word	0x5802546c
 8008224:	58025480 	.word	0x58025480
 8008228:	58025494 	.word	0x58025494
 800822c:	2300      	movs	r3, #0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00d      	beq.n	800824e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800823a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008240:	2b00      	cmp	r3, #0
 8008242:	d004      	beq.n	800824e <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800824c:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a3b      	ldr	r2, [pc, #236]	; (8008340 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d04a      	beq.n	80082ee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a39      	ldr	r2, [pc, #228]	; (8008344 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d045      	beq.n	80082ee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a38      	ldr	r2, [pc, #224]	; (8008348 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d040      	beq.n	80082ee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a36      	ldr	r2, [pc, #216]	; (800834c <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d03b      	beq.n	80082ee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a35      	ldr	r2, [pc, #212]	; (8008350 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d036      	beq.n	80082ee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a33      	ldr	r2, [pc, #204]	; (8008354 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d031      	beq.n	80082ee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a32      	ldr	r2, [pc, #200]	; (8008358 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d02c      	beq.n	80082ee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a30      	ldr	r2, [pc, #192]	; (800835c <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d027      	beq.n	80082ee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a2f      	ldr	r2, [pc, #188]	; (8008360 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d022      	beq.n	80082ee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a2d      	ldr	r2, [pc, #180]	; (8008364 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d01d      	beq.n	80082ee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a2c      	ldr	r2, [pc, #176]	; (8008368 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d018      	beq.n	80082ee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a2a      	ldr	r2, [pc, #168]	; (800836c <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d013      	beq.n	80082ee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a29      	ldr	r2, [pc, #164]	; (8008370 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d00e      	beq.n	80082ee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a27      	ldr	r2, [pc, #156]	; (8008374 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d009      	beq.n	80082ee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a26      	ldr	r2, [pc, #152]	; (8008378 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d004      	beq.n	80082ee <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a24      	ldr	r2, [pc, #144]	; (800837c <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d101      	bne.n	80082f2 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80082ee:	2301      	movs	r3, #1
 80082f0:	e000      	b.n	80082f4 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80082f2:	2300      	movs	r3, #0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d043      	beq.n	8008380 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f023 021e 	bic.w	r2, r3, #30
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f042 0216 	orr.w	r2, r2, #22
 800830a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	695a      	ldr	r2, [r3, #20]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800831a:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008320:	2b00      	cmp	r3, #0
 8008322:	d103      	bne.n	800832c <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008328:	2b00      	cmp	r3, #0
 800832a:	d043      	beq.n	80083b4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f042 0208 	orr.w	r2, r2, #8
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	e03a      	b.n	80083b4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 800833e:	bf00      	nop
 8008340:	40020010 	.word	0x40020010
 8008344:	40020028 	.word	0x40020028
 8008348:	40020040 	.word	0x40020040
 800834c:	40020058 	.word	0x40020058
 8008350:	40020070 	.word	0x40020070
 8008354:	40020088 	.word	0x40020088
 8008358:	400200a0 	.word	0x400200a0
 800835c:	400200b8 	.word	0x400200b8
 8008360:	40020410 	.word	0x40020410
 8008364:	40020428 	.word	0x40020428
 8008368:	40020440 	.word	0x40020440
 800836c:	40020458 	.word	0x40020458
 8008370:	40020470 	.word	0x40020470
 8008374:	40020488 	.word	0x40020488
 8008378:	400204a0 	.word	0x400204a0
 800837c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f023 020e 	bic.w	r2, r3, #14
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f042 020a 	orr.w	r2, r2, #10
 8008392:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008398:	2b00      	cmp	r3, #0
 800839a:	d103      	bne.n	80083a4 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d007      	beq.n	80083b4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f042 0204 	orr.w	r2, r2, #4
 80083b2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a81      	ldr	r2, [pc, #516]	; (80085c0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d072      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a80      	ldr	r2, [pc, #512]	; (80085c4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d06d      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a7e      	ldr	r2, [pc, #504]	; (80085c8 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d068      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a7d      	ldr	r2, [pc, #500]	; (80085cc <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d063      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a7b      	ldr	r2, [pc, #492]	; (80085d0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d05e      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a7a      	ldr	r2, [pc, #488]	; (80085d4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d059      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a78      	ldr	r2, [pc, #480]	; (80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d054      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a77      	ldr	r2, [pc, #476]	; (80085dc <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d04f      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a75      	ldr	r2, [pc, #468]	; (80085e0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d04a      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a74      	ldr	r2, [pc, #464]	; (80085e4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d045      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a72      	ldr	r2, [pc, #456]	; (80085e8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d040      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a71      	ldr	r2, [pc, #452]	; (80085ec <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d03b      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a6f      	ldr	r2, [pc, #444]	; (80085f0 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d036      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a6e      	ldr	r2, [pc, #440]	; (80085f4 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d031      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a6c      	ldr	r2, [pc, #432]	; (80085f8 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d02c      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a6b      	ldr	r2, [pc, #428]	; (80085fc <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d027      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a69      	ldr	r2, [pc, #420]	; (8008600 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d022      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a68      	ldr	r2, [pc, #416]	; (8008604 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d01d      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a66      	ldr	r2, [pc, #408]	; (8008608 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d018      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a65      	ldr	r2, [pc, #404]	; (800860c <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d013      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a63      	ldr	r2, [pc, #396]	; (8008610 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d00e      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a62      	ldr	r2, [pc, #392]	; (8008614 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d009      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a60      	ldr	r2, [pc, #384]	; (8008618 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d004      	beq.n	80084a4 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a5f      	ldr	r2, [pc, #380]	; (800861c <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d101      	bne.n	80084a8 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80084a4:	2301      	movs	r3, #1
 80084a6:	e000      	b.n	80084aa <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80084a8:	2300      	movs	r3, #0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d01a      	beq.n	80084e4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d007      	beq.n	80084cc <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084ca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d007      	beq.n	80084e4 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084e2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a35      	ldr	r2, [pc, #212]	; (80085c0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d04a      	beq.n	8008584 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a34      	ldr	r2, [pc, #208]	; (80085c4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d045      	beq.n	8008584 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a32      	ldr	r2, [pc, #200]	; (80085c8 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d040      	beq.n	8008584 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a31      	ldr	r2, [pc, #196]	; (80085cc <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d03b      	beq.n	8008584 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a2f      	ldr	r2, [pc, #188]	; (80085d0 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d036      	beq.n	8008584 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a2e      	ldr	r2, [pc, #184]	; (80085d4 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d031      	beq.n	8008584 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a2c      	ldr	r2, [pc, #176]	; (80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d02c      	beq.n	8008584 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a2b      	ldr	r2, [pc, #172]	; (80085dc <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d027      	beq.n	8008584 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a29      	ldr	r2, [pc, #164]	; (80085e0 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d022      	beq.n	8008584 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a28      	ldr	r2, [pc, #160]	; (80085e4 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d01d      	beq.n	8008584 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a26      	ldr	r2, [pc, #152]	; (80085e8 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d018      	beq.n	8008584 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a25      	ldr	r2, [pc, #148]	; (80085ec <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d013      	beq.n	8008584 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a23      	ldr	r2, [pc, #140]	; (80085f0 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d00e      	beq.n	8008584 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a22      	ldr	r2, [pc, #136]	; (80085f4 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d009      	beq.n	8008584 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a20      	ldr	r2, [pc, #128]	; (80085f8 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d004      	beq.n	8008584 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a1f      	ldr	r2, [pc, #124]	; (80085fc <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d108      	bne.n	8008596 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f042 0201 	orr.w	r2, r2, #1
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	e00e      	b.n	80085b4 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f042 0201 	orr.w	r2, r2, #1
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	e005      	b.n	80085b4 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80085b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3718      	adds	r7, #24
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	40020010 	.word	0x40020010
 80085c4:	40020028 	.word	0x40020028
 80085c8:	40020040 	.word	0x40020040
 80085cc:	40020058 	.word	0x40020058
 80085d0:	40020070 	.word	0x40020070
 80085d4:	40020088 	.word	0x40020088
 80085d8:	400200a0 	.word	0x400200a0
 80085dc:	400200b8 	.word	0x400200b8
 80085e0:	40020410 	.word	0x40020410
 80085e4:	40020428 	.word	0x40020428
 80085e8:	40020440 	.word	0x40020440
 80085ec:	40020458 	.word	0x40020458
 80085f0:	40020470 	.word	0x40020470
 80085f4:	40020488 	.word	0x40020488
 80085f8:	400204a0 	.word	0x400204a0
 80085fc:	400204b8 	.word	0x400204b8
 8008600:	58025408 	.word	0x58025408
 8008604:	5802541c 	.word	0x5802541c
 8008608:	58025430 	.word	0x58025430
 800860c:	58025444 	.word	0x58025444
 8008610:	58025458 	.word	0x58025458
 8008614:	5802546c 	.word	0x5802546c
 8008618:	58025480 	.word	0x58025480
 800861c:	58025494 	.word	0x58025494

08008620 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	4613      	mov	r3, r2
 800862c:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a39      	ldr	r2, [pc, #228]	; (8008718 <HAL_DMAEx_ChangeMemory+0xf8>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d04a      	beq.n	80086ce <HAL_DMAEx_ChangeMemory+0xae>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a37      	ldr	r2, [pc, #220]	; (800871c <HAL_DMAEx_ChangeMemory+0xfc>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d045      	beq.n	80086ce <HAL_DMAEx_ChangeMemory+0xae>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a36      	ldr	r2, [pc, #216]	; (8008720 <HAL_DMAEx_ChangeMemory+0x100>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d040      	beq.n	80086ce <HAL_DMAEx_ChangeMemory+0xae>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a34      	ldr	r2, [pc, #208]	; (8008724 <HAL_DMAEx_ChangeMemory+0x104>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d03b      	beq.n	80086ce <HAL_DMAEx_ChangeMemory+0xae>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a33      	ldr	r2, [pc, #204]	; (8008728 <HAL_DMAEx_ChangeMemory+0x108>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d036      	beq.n	80086ce <HAL_DMAEx_ChangeMemory+0xae>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a31      	ldr	r2, [pc, #196]	; (800872c <HAL_DMAEx_ChangeMemory+0x10c>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d031      	beq.n	80086ce <HAL_DMAEx_ChangeMemory+0xae>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a30      	ldr	r2, [pc, #192]	; (8008730 <HAL_DMAEx_ChangeMemory+0x110>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d02c      	beq.n	80086ce <HAL_DMAEx_ChangeMemory+0xae>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a2e      	ldr	r2, [pc, #184]	; (8008734 <HAL_DMAEx_ChangeMemory+0x114>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d027      	beq.n	80086ce <HAL_DMAEx_ChangeMemory+0xae>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a2d      	ldr	r2, [pc, #180]	; (8008738 <HAL_DMAEx_ChangeMemory+0x118>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d022      	beq.n	80086ce <HAL_DMAEx_ChangeMemory+0xae>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a2b      	ldr	r2, [pc, #172]	; (800873c <HAL_DMAEx_ChangeMemory+0x11c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d01d      	beq.n	80086ce <HAL_DMAEx_ChangeMemory+0xae>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a2a      	ldr	r2, [pc, #168]	; (8008740 <HAL_DMAEx_ChangeMemory+0x120>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d018      	beq.n	80086ce <HAL_DMAEx_ChangeMemory+0xae>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a28      	ldr	r2, [pc, #160]	; (8008744 <HAL_DMAEx_ChangeMemory+0x124>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d013      	beq.n	80086ce <HAL_DMAEx_ChangeMemory+0xae>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a27      	ldr	r2, [pc, #156]	; (8008748 <HAL_DMAEx_ChangeMemory+0x128>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d00e      	beq.n	80086ce <HAL_DMAEx_ChangeMemory+0xae>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a25      	ldr	r2, [pc, #148]	; (800874c <HAL_DMAEx_ChangeMemory+0x12c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d009      	beq.n	80086ce <HAL_DMAEx_ChangeMemory+0xae>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a24      	ldr	r2, [pc, #144]	; (8008750 <HAL_DMAEx_ChangeMemory+0x130>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d004      	beq.n	80086ce <HAL_DMAEx_ChangeMemory+0xae>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a22      	ldr	r2, [pc, #136]	; (8008754 <HAL_DMAEx_ChangeMemory+0x134>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d101      	bne.n	80086d2 <HAL_DMAEx_ChangeMemory+0xb2>
 80086ce:	2301      	movs	r3, #1
 80086d0:	e000      	b.n	80086d4 <HAL_DMAEx_ChangeMemory+0xb4>
 80086d2:	2300      	movs	r3, #0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00c      	beq.n	80086f2 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80086d8:	79fb      	ldrb	r3, [r7, #7]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d104      	bne.n	80086e8 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	60da      	str	r2, [r3, #12]
 80086e6:	e010      	b.n	800870a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	611a      	str	r2, [r3, #16]
 80086f0:	e00b      	b.n	800870a <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d104      	bne.n	8008702 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	60da      	str	r2, [r3, #12]
 8008700:	e003      	b.n	800870a <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr
 8008718:	40020010 	.word	0x40020010
 800871c:	40020028 	.word	0x40020028
 8008720:	40020040 	.word	0x40020040
 8008724:	40020058 	.word	0x40020058
 8008728:	40020070 	.word	0x40020070
 800872c:	40020088 	.word	0x40020088
 8008730:	400200a0 	.word	0x400200a0
 8008734:	400200b8 	.word	0x400200b8
 8008738:	40020410 	.word	0x40020410
 800873c:	40020428 	.word	0x40020428
 8008740:	40020440 	.word	0x40020440
 8008744:	40020458 	.word	0x40020458
 8008748:	40020470 	.word	0x40020470
 800874c:	40020488 	.word	0x40020488
 8008750:	400204a0 	.word	0x400204a0
 8008754:	400204b8 	.word	0x400204b8

08008758 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a46      	ldr	r2, [pc, #280]	; (8008884 <DMA_MultiBufferSetConfig+0x12c>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d04a      	beq.n	8008806 <DMA_MultiBufferSetConfig+0xae>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a44      	ldr	r2, [pc, #272]	; (8008888 <DMA_MultiBufferSetConfig+0x130>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d045      	beq.n	8008806 <DMA_MultiBufferSetConfig+0xae>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a43      	ldr	r2, [pc, #268]	; (800888c <DMA_MultiBufferSetConfig+0x134>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d040      	beq.n	8008806 <DMA_MultiBufferSetConfig+0xae>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a41      	ldr	r2, [pc, #260]	; (8008890 <DMA_MultiBufferSetConfig+0x138>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d03b      	beq.n	8008806 <DMA_MultiBufferSetConfig+0xae>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a40      	ldr	r2, [pc, #256]	; (8008894 <DMA_MultiBufferSetConfig+0x13c>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d036      	beq.n	8008806 <DMA_MultiBufferSetConfig+0xae>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a3e      	ldr	r2, [pc, #248]	; (8008898 <DMA_MultiBufferSetConfig+0x140>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d031      	beq.n	8008806 <DMA_MultiBufferSetConfig+0xae>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a3d      	ldr	r2, [pc, #244]	; (800889c <DMA_MultiBufferSetConfig+0x144>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d02c      	beq.n	8008806 <DMA_MultiBufferSetConfig+0xae>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a3b      	ldr	r2, [pc, #236]	; (80088a0 <DMA_MultiBufferSetConfig+0x148>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d027      	beq.n	8008806 <DMA_MultiBufferSetConfig+0xae>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a3a      	ldr	r2, [pc, #232]	; (80088a4 <DMA_MultiBufferSetConfig+0x14c>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d022      	beq.n	8008806 <DMA_MultiBufferSetConfig+0xae>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a38      	ldr	r2, [pc, #224]	; (80088a8 <DMA_MultiBufferSetConfig+0x150>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d01d      	beq.n	8008806 <DMA_MultiBufferSetConfig+0xae>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a37      	ldr	r2, [pc, #220]	; (80088ac <DMA_MultiBufferSetConfig+0x154>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d018      	beq.n	8008806 <DMA_MultiBufferSetConfig+0xae>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a35      	ldr	r2, [pc, #212]	; (80088b0 <DMA_MultiBufferSetConfig+0x158>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d013      	beq.n	8008806 <DMA_MultiBufferSetConfig+0xae>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a34      	ldr	r2, [pc, #208]	; (80088b4 <DMA_MultiBufferSetConfig+0x15c>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d00e      	beq.n	8008806 <DMA_MultiBufferSetConfig+0xae>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a32      	ldr	r2, [pc, #200]	; (80088b8 <DMA_MultiBufferSetConfig+0x160>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d009      	beq.n	8008806 <DMA_MultiBufferSetConfig+0xae>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a31      	ldr	r2, [pc, #196]	; (80088bc <DMA_MultiBufferSetConfig+0x164>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d004      	beq.n	8008806 <DMA_MultiBufferSetConfig+0xae>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a2f      	ldr	r2, [pc, #188]	; (80088c0 <DMA_MultiBufferSetConfig+0x168>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d101      	bne.n	800880a <DMA_MultiBufferSetConfig+0xb2>
 8008806:	2301      	movs	r3, #1
 8008808:	e000      	b.n	800880c <DMA_MultiBufferSetConfig+0xb4>
 800880a:	2300      	movs	r3, #0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d019      	beq.n	8008844 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	2b40      	cmp	r3, #64	; 0x40
 800881e:	d108      	bne.n	8008832 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8008830:	e021      	b.n	8008876 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	60da      	str	r2, [r3, #12]
}
 8008842:	e018      	b.n	8008876 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	2b40      	cmp	r3, #64	; 0x40
 8008852:	d108      	bne.n	8008866 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	60da      	str	r2, [r3, #12]
}
 8008864:	e007      	b.n	8008876 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	60da      	str	r2, [r3, #12]
}
 8008876:	bf00      	nop
 8008878:	3714      	adds	r7, #20
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	40020010 	.word	0x40020010
 8008888:	40020028 	.word	0x40020028
 800888c:	40020040 	.word	0x40020040
 8008890:	40020058 	.word	0x40020058
 8008894:	40020070 	.word	0x40020070
 8008898:	40020088 	.word	0x40020088
 800889c:	400200a0 	.word	0x400200a0
 80088a0:	400200b8 	.word	0x400200b8
 80088a4:	40020410 	.word	0x40020410
 80088a8:	40020428 	.word	0x40020428
 80088ac:	40020440 	.word	0x40020440
 80088b0:	40020458 	.word	0x40020458
 80088b4:	40020470 	.word	0x40020470
 80088b8:	40020488 	.word	0x40020488
 80088bc:	400204a0 	.word	0x400204a0
 80088c0:	400204b8 	.word	0x400204b8

080088c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b089      	sub	sp, #36	; 0x24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80088ce:	2300      	movs	r3, #0
 80088d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80088d2:	4b89      	ldr	r3, [pc, #548]	; (8008af8 <HAL_GPIO_Init+0x234>)
 80088d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80088d6:	e194      	b.n	8008c02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	2101      	movs	r1, #1
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	fa01 f303 	lsl.w	r3, r1, r3
 80088e4:	4013      	ands	r3, r2
 80088e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 8186 	beq.w	8008bfc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	f003 0303 	and.w	r3, r3, #3
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d005      	beq.n	8008908 <HAL_GPIO_Init+0x44>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	f003 0303 	and.w	r3, r3, #3
 8008904:	2b02      	cmp	r3, #2
 8008906:	d130      	bne.n	800896a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	005b      	lsls	r3, r3, #1
 8008912:	2203      	movs	r2, #3
 8008914:	fa02 f303 	lsl.w	r3, r2, r3
 8008918:	43db      	mvns	r3, r3
 800891a:	69ba      	ldr	r2, [r7, #24]
 800891c:	4013      	ands	r3, r2
 800891e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	68da      	ldr	r2, [r3, #12]
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	005b      	lsls	r3, r3, #1
 8008928:	fa02 f303 	lsl.w	r3, r2, r3
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	4313      	orrs	r3, r2
 8008930:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	69ba      	ldr	r2, [r7, #24]
 8008936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800893e:	2201      	movs	r2, #1
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	fa02 f303 	lsl.w	r3, r2, r3
 8008946:	43db      	mvns	r3, r3
 8008948:	69ba      	ldr	r2, [r7, #24]
 800894a:	4013      	ands	r3, r2
 800894c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	091b      	lsrs	r3, r3, #4
 8008954:	f003 0201 	and.w	r2, r3, #1
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	fa02 f303 	lsl.w	r3, r2, r3
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	4313      	orrs	r3, r2
 8008962:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	69ba      	ldr	r2, [r7, #24]
 8008968:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f003 0303 	and.w	r3, r3, #3
 8008972:	2b03      	cmp	r3, #3
 8008974:	d017      	beq.n	80089a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	005b      	lsls	r3, r3, #1
 8008980:	2203      	movs	r2, #3
 8008982:	fa02 f303 	lsl.w	r3, r2, r3
 8008986:	43db      	mvns	r3, r3
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	4013      	ands	r3, r2
 800898c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	689a      	ldr	r2, [r3, #8]
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	005b      	lsls	r3, r3, #1
 8008996:	fa02 f303 	lsl.w	r3, r2, r3
 800899a:	69ba      	ldr	r2, [r7, #24]
 800899c:	4313      	orrs	r3, r2
 800899e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	69ba      	ldr	r2, [r7, #24]
 80089a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	f003 0303 	and.w	r3, r3, #3
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d123      	bne.n	80089fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	08da      	lsrs	r2, r3, #3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	3208      	adds	r2, #8
 80089ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	f003 0307 	and.w	r3, r3, #7
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	220f      	movs	r2, #15
 80089ca:	fa02 f303 	lsl.w	r3, r2, r3
 80089ce:	43db      	mvns	r3, r3
 80089d0:	69ba      	ldr	r2, [r7, #24]
 80089d2:	4013      	ands	r3, r2
 80089d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	691a      	ldr	r2, [r3, #16]
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	f003 0307 	and.w	r3, r3, #7
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	fa02 f303 	lsl.w	r3, r2, r3
 80089e6:	69ba      	ldr	r2, [r7, #24]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	08da      	lsrs	r2, r3, #3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	3208      	adds	r2, #8
 80089f4:	69b9      	ldr	r1, [r7, #24]
 80089f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	2203      	movs	r2, #3
 8008a06:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0a:	43db      	mvns	r3, r3
 8008a0c:	69ba      	ldr	r2, [r7, #24]
 8008a0e:	4013      	ands	r3, r2
 8008a10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f003 0203 	and.w	r2, r3, #3
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	005b      	lsls	r3, r3, #1
 8008a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	69ba      	ldr	r2, [r7, #24]
 8008a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 80e0 	beq.w	8008bfc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a3c:	4b2f      	ldr	r3, [pc, #188]	; (8008afc <HAL_GPIO_Init+0x238>)
 8008a3e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008a42:	4a2e      	ldr	r2, [pc, #184]	; (8008afc <HAL_GPIO_Init+0x238>)
 8008a44:	f043 0302 	orr.w	r3, r3, #2
 8008a48:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8008a4c:	4b2b      	ldr	r3, [pc, #172]	; (8008afc <HAL_GPIO_Init+0x238>)
 8008a4e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008a52:	f003 0302 	and.w	r3, r3, #2
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a5a:	4a29      	ldr	r2, [pc, #164]	; (8008b00 <HAL_GPIO_Init+0x23c>)
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	089b      	lsrs	r3, r3, #2
 8008a60:	3302      	adds	r3, #2
 8008a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	f003 0303 	and.w	r3, r3, #3
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	220f      	movs	r2, #15
 8008a72:	fa02 f303 	lsl.w	r3, r2, r3
 8008a76:	43db      	mvns	r3, r3
 8008a78:	69ba      	ldr	r2, [r7, #24]
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a20      	ldr	r2, [pc, #128]	; (8008b04 <HAL_GPIO_Init+0x240>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d052      	beq.n	8008b2c <HAL_GPIO_Init+0x268>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a1f      	ldr	r2, [pc, #124]	; (8008b08 <HAL_GPIO_Init+0x244>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d031      	beq.n	8008af2 <HAL_GPIO_Init+0x22e>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a1e      	ldr	r2, [pc, #120]	; (8008b0c <HAL_GPIO_Init+0x248>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d02b      	beq.n	8008aee <HAL_GPIO_Init+0x22a>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a1d      	ldr	r2, [pc, #116]	; (8008b10 <HAL_GPIO_Init+0x24c>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d025      	beq.n	8008aea <HAL_GPIO_Init+0x226>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a1c      	ldr	r2, [pc, #112]	; (8008b14 <HAL_GPIO_Init+0x250>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d01f      	beq.n	8008ae6 <HAL_GPIO_Init+0x222>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a1b      	ldr	r2, [pc, #108]	; (8008b18 <HAL_GPIO_Init+0x254>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d019      	beq.n	8008ae2 <HAL_GPIO_Init+0x21e>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a1a      	ldr	r2, [pc, #104]	; (8008b1c <HAL_GPIO_Init+0x258>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d013      	beq.n	8008ade <HAL_GPIO_Init+0x21a>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a19      	ldr	r2, [pc, #100]	; (8008b20 <HAL_GPIO_Init+0x25c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d00d      	beq.n	8008ada <HAL_GPIO_Init+0x216>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a18      	ldr	r2, [pc, #96]	; (8008b24 <HAL_GPIO_Init+0x260>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d007      	beq.n	8008ad6 <HAL_GPIO_Init+0x212>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a17      	ldr	r2, [pc, #92]	; (8008b28 <HAL_GPIO_Init+0x264>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d101      	bne.n	8008ad2 <HAL_GPIO_Init+0x20e>
 8008ace:	2309      	movs	r3, #9
 8008ad0:	e02d      	b.n	8008b2e <HAL_GPIO_Init+0x26a>
 8008ad2:	230a      	movs	r3, #10
 8008ad4:	e02b      	b.n	8008b2e <HAL_GPIO_Init+0x26a>
 8008ad6:	2308      	movs	r3, #8
 8008ad8:	e029      	b.n	8008b2e <HAL_GPIO_Init+0x26a>
 8008ada:	2307      	movs	r3, #7
 8008adc:	e027      	b.n	8008b2e <HAL_GPIO_Init+0x26a>
 8008ade:	2306      	movs	r3, #6
 8008ae0:	e025      	b.n	8008b2e <HAL_GPIO_Init+0x26a>
 8008ae2:	2305      	movs	r3, #5
 8008ae4:	e023      	b.n	8008b2e <HAL_GPIO_Init+0x26a>
 8008ae6:	2304      	movs	r3, #4
 8008ae8:	e021      	b.n	8008b2e <HAL_GPIO_Init+0x26a>
 8008aea:	2303      	movs	r3, #3
 8008aec:	e01f      	b.n	8008b2e <HAL_GPIO_Init+0x26a>
 8008aee:	2302      	movs	r3, #2
 8008af0:	e01d      	b.n	8008b2e <HAL_GPIO_Init+0x26a>
 8008af2:	2301      	movs	r3, #1
 8008af4:	e01b      	b.n	8008b2e <HAL_GPIO_Init+0x26a>
 8008af6:	bf00      	nop
 8008af8:	58000080 	.word	0x58000080
 8008afc:	58024400 	.word	0x58024400
 8008b00:	58000400 	.word	0x58000400
 8008b04:	58020000 	.word	0x58020000
 8008b08:	58020400 	.word	0x58020400
 8008b0c:	58020800 	.word	0x58020800
 8008b10:	58020c00 	.word	0x58020c00
 8008b14:	58021000 	.word	0x58021000
 8008b18:	58021400 	.word	0x58021400
 8008b1c:	58021800 	.word	0x58021800
 8008b20:	58021c00 	.word	0x58021c00
 8008b24:	58022000 	.word	0x58022000
 8008b28:	58022400 	.word	0x58022400
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	69fa      	ldr	r2, [r7, #28]
 8008b30:	f002 0203 	and.w	r2, r2, #3
 8008b34:	0092      	lsls	r2, r2, #2
 8008b36:	4093      	lsls	r3, r2
 8008b38:	69ba      	ldr	r2, [r7, #24]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008b3e:	4938      	ldr	r1, [pc, #224]	; (8008c20 <HAL_GPIO_Init+0x35c>)
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	089b      	lsrs	r3, r3, #2
 8008b44:	3302      	adds	r3, #2
 8008b46:	69ba      	ldr	r2, [r7, #24]
 8008b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	43db      	mvns	r3, r3
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d003      	beq.n	8008b72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008b6a:	69ba      	ldr	r2, [r7, #24]
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008b72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	43db      	mvns	r3, r3
 8008b86:	69ba      	ldr	r2, [r7, #24]
 8008b88:	4013      	ands	r3, r2
 8008b8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d003      	beq.n	8008ba0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008ba0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	43db      	mvns	r3, r3
 8008bb2:	69ba      	ldr	r2, [r7, #24]
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d003      	beq.n	8008bcc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	43db      	mvns	r3, r3
 8008bdc:	69ba      	ldr	r2, [r7, #24]
 8008bde:	4013      	ands	r3, r2
 8008be0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d003      	beq.n	8008bf6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008bee:	69ba      	ldr	r2, [r7, #24]
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	69ba      	ldr	r2, [r7, #24]
 8008bfa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	fa22 f303 	lsr.w	r3, r2, r3
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f47f ae63 	bne.w	80088d8 <HAL_GPIO_Init+0x14>
  }
}
 8008c12:	bf00      	nop
 8008c14:	bf00      	nop
 8008c16:	3724      	adds	r7, #36	; 0x24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr
 8008c20:	58000400 	.word	0x58000400

08008c24 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b087      	sub	sp, #28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008c32:	4b75      	ldr	r3, [pc, #468]	; (8008e08 <HAL_GPIO_DeInit+0x1e4>)
 8008c34:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008c36:	e0d9      	b.n	8008dec <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008c38:	2201      	movs	r2, #1
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	4013      	ands	r3, r2
 8008c44:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 80cc 	beq.w	8008de6 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008c4e:	4a6f      	ldr	r2, [pc, #444]	; (8008e0c <HAL_GPIO_DeInit+0x1e8>)
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	089b      	lsrs	r3, r3, #2
 8008c54:	3302      	adds	r3, #2
 8008c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c5a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	f003 0303 	and.w	r3, r3, #3
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	220f      	movs	r2, #15
 8008c66:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a67      	ldr	r2, [pc, #412]	; (8008e10 <HAL_GPIO_DeInit+0x1ec>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d037      	beq.n	8008ce8 <HAL_GPIO_DeInit+0xc4>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a66      	ldr	r2, [pc, #408]	; (8008e14 <HAL_GPIO_DeInit+0x1f0>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d031      	beq.n	8008ce4 <HAL_GPIO_DeInit+0xc0>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a65      	ldr	r2, [pc, #404]	; (8008e18 <HAL_GPIO_DeInit+0x1f4>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d02b      	beq.n	8008ce0 <HAL_GPIO_DeInit+0xbc>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a64      	ldr	r2, [pc, #400]	; (8008e1c <HAL_GPIO_DeInit+0x1f8>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d025      	beq.n	8008cdc <HAL_GPIO_DeInit+0xb8>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a63      	ldr	r2, [pc, #396]	; (8008e20 <HAL_GPIO_DeInit+0x1fc>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d01f      	beq.n	8008cd8 <HAL_GPIO_DeInit+0xb4>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a62      	ldr	r2, [pc, #392]	; (8008e24 <HAL_GPIO_DeInit+0x200>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d019      	beq.n	8008cd4 <HAL_GPIO_DeInit+0xb0>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a61      	ldr	r2, [pc, #388]	; (8008e28 <HAL_GPIO_DeInit+0x204>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d013      	beq.n	8008cd0 <HAL_GPIO_DeInit+0xac>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a60      	ldr	r2, [pc, #384]	; (8008e2c <HAL_GPIO_DeInit+0x208>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d00d      	beq.n	8008ccc <HAL_GPIO_DeInit+0xa8>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a5f      	ldr	r2, [pc, #380]	; (8008e30 <HAL_GPIO_DeInit+0x20c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d007      	beq.n	8008cc8 <HAL_GPIO_DeInit+0xa4>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a5e      	ldr	r2, [pc, #376]	; (8008e34 <HAL_GPIO_DeInit+0x210>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d101      	bne.n	8008cc4 <HAL_GPIO_DeInit+0xa0>
 8008cc0:	2309      	movs	r3, #9
 8008cc2:	e012      	b.n	8008cea <HAL_GPIO_DeInit+0xc6>
 8008cc4:	230a      	movs	r3, #10
 8008cc6:	e010      	b.n	8008cea <HAL_GPIO_DeInit+0xc6>
 8008cc8:	2308      	movs	r3, #8
 8008cca:	e00e      	b.n	8008cea <HAL_GPIO_DeInit+0xc6>
 8008ccc:	2307      	movs	r3, #7
 8008cce:	e00c      	b.n	8008cea <HAL_GPIO_DeInit+0xc6>
 8008cd0:	2306      	movs	r3, #6
 8008cd2:	e00a      	b.n	8008cea <HAL_GPIO_DeInit+0xc6>
 8008cd4:	2305      	movs	r3, #5
 8008cd6:	e008      	b.n	8008cea <HAL_GPIO_DeInit+0xc6>
 8008cd8:	2304      	movs	r3, #4
 8008cda:	e006      	b.n	8008cea <HAL_GPIO_DeInit+0xc6>
 8008cdc:	2303      	movs	r3, #3
 8008cde:	e004      	b.n	8008cea <HAL_GPIO_DeInit+0xc6>
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	e002      	b.n	8008cea <HAL_GPIO_DeInit+0xc6>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e000      	b.n	8008cea <HAL_GPIO_DeInit+0xc6>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	697a      	ldr	r2, [r7, #20]
 8008cec:	f002 0203 	and.w	r2, r2, #3
 8008cf0:	0092      	lsls	r2, r2, #2
 8008cf2:	4093      	lsls	r3, r2
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d136      	bne.n	8008d68 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	43db      	mvns	r3, r3
 8008d02:	401a      	ands	r2, r3
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	43db      	mvns	r3, r3
 8008d10:	401a      	ands	r2, r3
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	43db      	mvns	r3, r3
 8008d20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d24:	4013      	ands	r3, r2
 8008d26:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	43db      	mvns	r3, r3
 8008d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d36:	4013      	ands	r3, r2
 8008d38:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f003 0303 	and.w	r3, r3, #3
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	220f      	movs	r2, #15
 8008d44:	fa02 f303 	lsl.w	r3, r2, r3
 8008d48:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008d4a:	4a30      	ldr	r2, [pc, #192]	; (8008e0c <HAL_GPIO_DeInit+0x1e8>)
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	089b      	lsrs	r3, r3, #2
 8008d50:	3302      	adds	r3, #2
 8008d52:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	43da      	mvns	r2, r3
 8008d5a:	482c      	ldr	r0, [pc, #176]	; (8008e0c <HAL_GPIO_DeInit+0x1e8>)
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	089b      	lsrs	r3, r3, #2
 8008d60:	400a      	ands	r2, r1
 8008d62:	3302      	adds	r3, #2
 8008d64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	005b      	lsls	r3, r3, #1
 8008d70:	2103      	movs	r1, #3
 8008d72:	fa01 f303 	lsl.w	r3, r1, r3
 8008d76:	431a      	orrs	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	08da      	lsrs	r2, r3, #3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	3208      	adds	r2, #8
 8008d84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f003 0307 	and.w	r3, r3, #7
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	220f      	movs	r2, #15
 8008d92:	fa02 f303 	lsl.w	r3, r2, r3
 8008d96:	43db      	mvns	r3, r3
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	08d2      	lsrs	r2, r2, #3
 8008d9c:	4019      	ands	r1, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	3208      	adds	r2, #8
 8008da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	68da      	ldr	r2, [r3, #12]
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	005b      	lsls	r3, r3, #1
 8008dae:	2103      	movs	r1, #3
 8008db0:	fa01 f303 	lsl.w	r3, r1, r3
 8008db4:	43db      	mvns	r3, r3
 8008db6:	401a      	ands	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc8:	43db      	mvns	r3, r3
 8008dca:	401a      	ands	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	689a      	ldr	r2, [r3, #8]
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	005b      	lsls	r3, r3, #1
 8008dd8:	2103      	movs	r1, #3
 8008dda:	fa01 f303 	lsl.w	r3, r1, r3
 8008dde:	43db      	mvns	r3, r3
 8008de0:	401a      	ands	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	3301      	adds	r3, #1
 8008dea:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	fa22 f303 	lsr.w	r3, r2, r3
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f47f af1f 	bne.w	8008c38 <HAL_GPIO_DeInit+0x14>
  }
}
 8008dfa:	bf00      	nop
 8008dfc:	bf00      	nop
 8008dfe:	371c      	adds	r7, #28
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr
 8008e08:	58000080 	.word	0x58000080
 8008e0c:	58000400 	.word	0x58000400
 8008e10:	58020000 	.word	0x58020000
 8008e14:	58020400 	.word	0x58020400
 8008e18:	58020800 	.word	0x58020800
 8008e1c:	58020c00 	.word	0x58020c00
 8008e20:	58021000 	.word	0x58021000
 8008e24:	58021400 	.word	0x58021400
 8008e28:	58021800 	.word	0x58021800
 8008e2c:	58021c00 	.word	0x58021c00
 8008e30:	58022000 	.word	0x58022000
 8008e34:	58022400 	.word	0x58022400

08008e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	460b      	mov	r3, r1
 8008e42:	807b      	strh	r3, [r7, #2]
 8008e44:	4613      	mov	r3, r2
 8008e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e48:	787b      	ldrb	r3, [r7, #1]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e4e:	887a      	ldrh	r2, [r7, #2]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008e54:	e003      	b.n	8008e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008e56:	887b      	ldrh	r3, [r7, #2]
 8008e58:	041a      	lsls	r2, r3, #16
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	619a      	str	r2, [r3, #24]
}
 8008e5e:	bf00      	nop
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b085      	sub	sp, #20
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	460b      	mov	r3, r1
 8008e74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	695b      	ldr	r3, [r3, #20]
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008e7c:	887a      	ldrh	r2, [r7, #2]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	4013      	ands	r3, r2
 8008e82:	041a      	lsls	r2, r3, #16
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	43d9      	mvns	r1, r3
 8008e88:	887b      	ldrh	r3, [r7, #2]
 8008e8a:	400b      	ands	r3, r1
 8008e8c:	431a      	orrs	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	619a      	str	r2, [r3, #24]
}
 8008e92:	bf00      	nop
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
	...

08008ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e07f      	b.n	8008fb2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d106      	bne.n	8008ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f8a9 	bl	800901e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2224      	movs	r2, #36	; 0x24
 8008ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f022 0201 	bic.w	r2, r2, #1
 8008ee2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008ef0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	689a      	ldr	r2, [r3, #8]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d107      	bne.n	8008f1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	689a      	ldr	r2, [r3, #8]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f16:	609a      	str	r2, [r3, #8]
 8008f18:	e006      	b.n	8008f28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689a      	ldr	r2, [r3, #8]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008f26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d104      	bne.n	8008f3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6859      	ldr	r1, [r3, #4]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	4b1d      	ldr	r3, [pc, #116]	; (8008fbc <HAL_I2C_Init+0x11c>)
 8008f46:	430b      	orrs	r3, r1
 8008f48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68da      	ldr	r2, [r3, #12]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	691a      	ldr	r2, [r3, #16]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	430a      	orrs	r2, r1
 8008f72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	69d9      	ldr	r1, [r3, #28]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a1a      	ldr	r2, [r3, #32]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	430a      	orrs	r2, r1
 8008f82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f042 0201 	orr.w	r2, r2, #1
 8008f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2220      	movs	r2, #32
 8008f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	02008000 	.word	0x02008000

08008fc0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d101      	bne.n	8008fd2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e021      	b.n	8009016 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2224      	movs	r2, #36	; 0x24
 8008fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f022 0201 	bic.w	r2, r2, #1
 8008fe8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f821 	bl	8009032 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009026:	bf00      	nop
 8009028:	370c      	adds	r7, #12
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr

08009032 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009032:	b480      	push	{r7}
 8009034:	b083      	sub	sp, #12
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800903a:	bf00      	nop
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
	...

08009048 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b088      	sub	sp, #32
 800904c:	af02      	add	r7, sp, #8
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	4608      	mov	r0, r1
 8009052:	4611      	mov	r1, r2
 8009054:	461a      	mov	r2, r3
 8009056:	4603      	mov	r3, r0
 8009058:	817b      	strh	r3, [r7, #10]
 800905a:	460b      	mov	r3, r1
 800905c:	813b      	strh	r3, [r7, #8]
 800905e:	4613      	mov	r3, r2
 8009060:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b20      	cmp	r3, #32
 800906c:	f040 80f9 	bne.w	8009262 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d002      	beq.n	800907c <HAL_I2C_Mem_Write+0x34>
 8009076:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009078:	2b00      	cmp	r3, #0
 800907a:	d105      	bne.n	8009088 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009082:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	e0ed      	b.n	8009264 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800908e:	2b01      	cmp	r3, #1
 8009090:	d101      	bne.n	8009096 <HAL_I2C_Mem_Write+0x4e>
 8009092:	2302      	movs	r3, #2
 8009094:	e0e6      	b.n	8009264 <HAL_I2C_Mem_Write+0x21c>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800909e:	f7fb f897 	bl	80041d0 <HAL_GetTick>
 80090a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	2319      	movs	r3, #25
 80090aa:	2201      	movs	r2, #1
 80090ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 fadd 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d001      	beq.n	80090c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e0d1      	b.n	8009264 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2221      	movs	r2, #33	; 0x21
 80090c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2240      	movs	r2, #64	; 0x40
 80090cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6a3a      	ldr	r2, [r7, #32]
 80090da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80090e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80090e8:	88f8      	ldrh	r0, [r7, #6]
 80090ea:	893a      	ldrh	r2, [r7, #8]
 80090ec:	8979      	ldrh	r1, [r7, #10]
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	9301      	str	r3, [sp, #4]
 80090f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	4603      	mov	r3, r0
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f000 f9ed 	bl	80094d8 <I2C_RequestMemoryWrite>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d005      	beq.n	8009110 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e0a9      	b.n	8009264 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009114:	b29b      	uxth	r3, r3
 8009116:	2bff      	cmp	r3, #255	; 0xff
 8009118:	d90e      	bls.n	8009138 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	22ff      	movs	r2, #255	; 0xff
 800911e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009124:	b2da      	uxtb	r2, r3
 8009126:	8979      	ldrh	r1, [r7, #10]
 8009128:	2300      	movs	r3, #0
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f000 fc57 	bl	80099e4 <I2C_TransferConfig>
 8009136:	e00f      	b.n	8009158 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800913c:	b29a      	uxth	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009146:	b2da      	uxtb	r2, r3
 8009148:	8979      	ldrh	r1, [r7, #10]
 800914a:	2300      	movs	r3, #0
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f000 fc46 	bl	80099e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f000 fad6 	bl	800970e <I2C_WaitOnTXISFlagUntilTimeout>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d001      	beq.n	800916c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e07b      	b.n	8009264 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009170:	781a      	ldrb	r2, [r3, #0]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917c:	1c5a      	adds	r2, r3, #1
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009186:	b29b      	uxth	r3, r3
 8009188:	3b01      	subs	r3, #1
 800918a:	b29a      	uxth	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009194:	3b01      	subs	r3, #1
 8009196:	b29a      	uxth	r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d034      	beq.n	8009210 <HAL_I2C_Mem_Write+0x1c8>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d130      	bne.n	8009210 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b4:	2200      	movs	r2, #0
 80091b6:	2180      	movs	r1, #128	; 0x80
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 fa59 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e04d      	b.n	8009264 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	2bff      	cmp	r3, #255	; 0xff
 80091d0:	d90e      	bls.n	80091f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	22ff      	movs	r2, #255	; 0xff
 80091d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	8979      	ldrh	r1, [r7, #10]
 80091e0:	2300      	movs	r3, #0
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f000 fbfb 	bl	80099e4 <I2C_TransferConfig>
 80091ee:	e00f      	b.n	8009210 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	8979      	ldrh	r1, [r7, #10]
 8009202:	2300      	movs	r3, #0
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f000 fbea 	bl	80099e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009214:	b29b      	uxth	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d19e      	bne.n	8009158 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 fabc 	bl	800979c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e01a      	b.n	8009264 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2220      	movs	r2, #32
 8009234:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6859      	ldr	r1, [r3, #4]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	4b0a      	ldr	r3, [pc, #40]	; (800926c <HAL_I2C_Mem_Write+0x224>)
 8009242:	400b      	ands	r3, r1
 8009244:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2220      	movs	r2, #32
 800924a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	e000      	b.n	8009264 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009262:	2302      	movs	r3, #2
  }
}
 8009264:	4618      	mov	r0, r3
 8009266:	3718      	adds	r7, #24
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	fe00e800 	.word	0xfe00e800

08009270 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b088      	sub	sp, #32
 8009274:	af02      	add	r7, sp, #8
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	4608      	mov	r0, r1
 800927a:	4611      	mov	r1, r2
 800927c:	461a      	mov	r2, r3
 800927e:	4603      	mov	r3, r0
 8009280:	817b      	strh	r3, [r7, #10]
 8009282:	460b      	mov	r3, r1
 8009284:	813b      	strh	r3, [r7, #8]
 8009286:	4613      	mov	r3, r2
 8009288:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b20      	cmp	r3, #32
 8009294:	f040 80fd 	bne.w	8009492 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009298:	6a3b      	ldr	r3, [r7, #32]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d002      	beq.n	80092a4 <HAL_I2C_Mem_Read+0x34>
 800929e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d105      	bne.n	80092b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e0f1      	b.n	8009494 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d101      	bne.n	80092be <HAL_I2C_Mem_Read+0x4e>
 80092ba:	2302      	movs	r3, #2
 80092bc:	e0ea      	b.n	8009494 <HAL_I2C_Mem_Read+0x224>
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80092c6:	f7fa ff83 	bl	80041d0 <HAL_GetTick>
 80092ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	2319      	movs	r3, #25
 80092d2:	2201      	movs	r2, #1
 80092d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f000 f9c9 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d001      	beq.n	80092e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e0d5      	b.n	8009494 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2222      	movs	r2, #34	; 0x22
 80092ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2240      	movs	r2, #64	; 0x40
 80092f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6a3a      	ldr	r2, [r7, #32]
 8009302:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009308:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009310:	88f8      	ldrh	r0, [r7, #6]
 8009312:	893a      	ldrh	r2, [r7, #8]
 8009314:	8979      	ldrh	r1, [r7, #10]
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	9301      	str	r3, [sp, #4]
 800931a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	4603      	mov	r3, r0
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f000 f92d 	bl	8009580 <I2C_RequestMemoryRead>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e0ad      	b.n	8009494 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800933c:	b29b      	uxth	r3, r3
 800933e:	2bff      	cmp	r3, #255	; 0xff
 8009340:	d90e      	bls.n	8009360 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	22ff      	movs	r2, #255	; 0xff
 8009346:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800934c:	b2da      	uxtb	r2, r3
 800934e:	8979      	ldrh	r1, [r7, #10]
 8009350:	4b52      	ldr	r3, [pc, #328]	; (800949c <HAL_I2C_Mem_Read+0x22c>)
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f000 fb43 	bl	80099e4 <I2C_TransferConfig>
 800935e:	e00f      	b.n	8009380 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009364:	b29a      	uxth	r2, r3
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800936e:	b2da      	uxtb	r2, r3
 8009370:	8979      	ldrh	r1, [r7, #10]
 8009372:	4b4a      	ldr	r3, [pc, #296]	; (800949c <HAL_I2C_Mem_Read+0x22c>)
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f000 fb32 	bl	80099e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009386:	2200      	movs	r2, #0
 8009388:	2104      	movs	r1, #4
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f000 f970 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e07c      	b.n	8009494 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a4:	b2d2      	uxtb	r2, r2
 80093a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ac:	1c5a      	adds	r2, r3, #1
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b6:	3b01      	subs	r3, #1
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	3b01      	subs	r3, #1
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d034      	beq.n	8009440 <HAL_I2C_Mem_Read+0x1d0>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d130      	bne.n	8009440 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	2200      	movs	r2, #0
 80093e6:	2180      	movs	r1, #128	; 0x80
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 f941 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d001      	beq.n	80093f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e04d      	b.n	8009494 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	2bff      	cmp	r3, #255	; 0xff
 8009400:	d90e      	bls.n	8009420 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	22ff      	movs	r2, #255	; 0xff
 8009406:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800940c:	b2da      	uxtb	r2, r3
 800940e:	8979      	ldrh	r1, [r7, #10]
 8009410:	2300      	movs	r3, #0
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f000 fae3 	bl	80099e4 <I2C_TransferConfig>
 800941e:	e00f      	b.n	8009440 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009424:	b29a      	uxth	r2, r3
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800942e:	b2da      	uxtb	r2, r3
 8009430:	8979      	ldrh	r1, [r7, #10]
 8009432:	2300      	movs	r3, #0
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 fad2 	bl	80099e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009444:	b29b      	uxth	r3, r3
 8009446:	2b00      	cmp	r3, #0
 8009448:	d19a      	bne.n	8009380 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 f9a4 	bl	800979c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d001      	beq.n	800945e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e01a      	b.n	8009494 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2220      	movs	r2, #32
 8009464:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	6859      	ldr	r1, [r3, #4]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <HAL_I2C_Mem_Read+0x230>)
 8009472:	400b      	ands	r3, r1
 8009474:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2220      	movs	r2, #32
 800947a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800948e:	2300      	movs	r3, #0
 8009490:	e000      	b.n	8009494 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009492:	2302      	movs	r3, #2
  }
}
 8009494:	4618      	mov	r0, r3
 8009496:	3718      	adds	r7, #24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	80002400 	.word	0x80002400
 80094a0:	fe00e800 	.word	0xfe00e800

080094a4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094b2:	b2db      	uxtb	r3, r3
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af02      	add	r7, sp, #8
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	4608      	mov	r0, r1
 80094e2:	4611      	mov	r1, r2
 80094e4:	461a      	mov	r2, r3
 80094e6:	4603      	mov	r3, r0
 80094e8:	817b      	strh	r3, [r7, #10]
 80094ea:	460b      	mov	r3, r1
 80094ec:	813b      	strh	r3, [r7, #8]
 80094ee:	4613      	mov	r3, r2
 80094f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80094f2:	88fb      	ldrh	r3, [r7, #6]
 80094f4:	b2da      	uxtb	r2, r3
 80094f6:	8979      	ldrh	r1, [r7, #10]
 80094f8:	4b20      	ldr	r3, [pc, #128]	; (800957c <I2C_RequestMemoryWrite+0xa4>)
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f000 fa6f 	bl	80099e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009506:	69fa      	ldr	r2, [r7, #28]
 8009508:	69b9      	ldr	r1, [r7, #24]
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 f8ff 	bl	800970e <I2C_WaitOnTXISFlagUntilTimeout>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e02c      	b.n	8009574 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800951a:	88fb      	ldrh	r3, [r7, #6]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d105      	bne.n	800952c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009520:	893b      	ldrh	r3, [r7, #8]
 8009522:	b2da      	uxtb	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	629a      	str	r2, [r3, #40]	; 0x28
 800952a:	e015      	b.n	8009558 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800952c:	893b      	ldrh	r3, [r7, #8]
 800952e:	0a1b      	lsrs	r3, r3, #8
 8009530:	b29b      	uxth	r3, r3
 8009532:	b2da      	uxtb	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800953a:	69fa      	ldr	r2, [r7, #28]
 800953c:	69b9      	ldr	r1, [r7, #24]
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f000 f8e5 	bl	800970e <I2C_WaitOnTXISFlagUntilTimeout>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d001      	beq.n	800954e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e012      	b.n	8009574 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800954e:	893b      	ldrh	r3, [r7, #8]
 8009550:	b2da      	uxtb	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	2200      	movs	r2, #0
 8009560:	2180      	movs	r1, #128	; 0x80
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f000 f884 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e000      	b.n	8009574 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	80002000 	.word	0x80002000

08009580 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af02      	add	r7, sp, #8
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	4608      	mov	r0, r1
 800958a:	4611      	mov	r1, r2
 800958c:	461a      	mov	r2, r3
 800958e:	4603      	mov	r3, r0
 8009590:	817b      	strh	r3, [r7, #10]
 8009592:	460b      	mov	r3, r1
 8009594:	813b      	strh	r3, [r7, #8]
 8009596:	4613      	mov	r3, r2
 8009598:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800959a:	88fb      	ldrh	r3, [r7, #6]
 800959c:	b2da      	uxtb	r2, r3
 800959e:	8979      	ldrh	r1, [r7, #10]
 80095a0:	4b20      	ldr	r3, [pc, #128]	; (8009624 <I2C_RequestMemoryRead+0xa4>)
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	2300      	movs	r3, #0
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f000 fa1c 	bl	80099e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095ac:	69fa      	ldr	r2, [r7, #28]
 80095ae:	69b9      	ldr	r1, [r7, #24]
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 f8ac 	bl	800970e <I2C_WaitOnTXISFlagUntilTimeout>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e02c      	b.n	800961a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80095c0:	88fb      	ldrh	r3, [r7, #6]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d105      	bne.n	80095d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095c6:	893b      	ldrh	r3, [r7, #8]
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	629a      	str	r2, [r3, #40]	; 0x28
 80095d0:	e015      	b.n	80095fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80095d2:	893b      	ldrh	r3, [r7, #8]
 80095d4:	0a1b      	lsrs	r3, r3, #8
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	b2da      	uxtb	r2, r3
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095e0:	69fa      	ldr	r2, [r7, #28]
 80095e2:	69b9      	ldr	r1, [r7, #24]
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 f892 	bl	800970e <I2C_WaitOnTXISFlagUntilTimeout>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e012      	b.n	800961a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095f4:	893b      	ldrh	r3, [r7, #8]
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	2200      	movs	r2, #0
 8009606:	2140      	movs	r1, #64	; 0x40
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f000 f831 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d001      	beq.n	8009618 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e000      	b.n	800961a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	80002000 	.word	0x80002000

08009628 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	f003 0302 	and.w	r3, r3, #2
 800963a:	2b02      	cmp	r3, #2
 800963c:	d103      	bne.n	8009646 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2200      	movs	r2, #0
 8009644:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	f003 0301 	and.w	r3, r3, #1
 8009650:	2b01      	cmp	r3, #1
 8009652:	d007      	beq.n	8009664 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	699a      	ldr	r2, [r3, #24]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f042 0201 	orr.w	r2, r2, #1
 8009662:	619a      	str	r2, [r3, #24]
  }
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	603b      	str	r3, [r7, #0]
 800967c:	4613      	mov	r3, r2
 800967e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009680:	e031      	b.n	80096e6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009688:	d02d      	beq.n	80096e6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800968a:	f7fa fda1 	bl	80041d0 <HAL_GetTick>
 800968e:	4602      	mov	r2, r0
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	683a      	ldr	r2, [r7, #0]
 8009696:	429a      	cmp	r2, r3
 8009698:	d302      	bcc.n	80096a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d122      	bne.n	80096e6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	699a      	ldr	r2, [r3, #24]
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	4013      	ands	r3, r2
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	bf0c      	ite	eq
 80096b0:	2301      	moveq	r3, #1
 80096b2:	2300      	movne	r3, #0
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	461a      	mov	r2, r3
 80096b8:	79fb      	ldrb	r3, [r7, #7]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d113      	bne.n	80096e6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c2:	f043 0220 	orr.w	r2, r3, #32
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2220      	movs	r2, #32
 80096ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e00f      	b.n	8009706 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	699a      	ldr	r2, [r3, #24]
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	4013      	ands	r3, r2
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	bf0c      	ite	eq
 80096f6:	2301      	moveq	r3, #1
 80096f8:	2300      	movne	r3, #0
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	461a      	mov	r2, r3
 80096fe:	79fb      	ldrb	r3, [r7, #7]
 8009700:	429a      	cmp	r2, r3
 8009702:	d0be      	beq.n	8009682 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b084      	sub	sp, #16
 8009712:	af00      	add	r7, sp, #0
 8009714:	60f8      	str	r0, [r7, #12]
 8009716:	60b9      	str	r1, [r7, #8]
 8009718:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800971a:	e033      	b.n	8009784 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	68b9      	ldr	r1, [r7, #8]
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f000 f87f 	bl	8009824 <I2C_IsErrorOccurred>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	e031      	b.n	8009794 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009736:	d025      	beq.n	8009784 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009738:	f7fa fd4a 	bl	80041d0 <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	429a      	cmp	r2, r3
 8009746:	d302      	bcc.n	800974e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d11a      	bne.n	8009784 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	f003 0302 	and.w	r3, r3, #2
 8009758:	2b02      	cmp	r3, #2
 800975a:	d013      	beq.n	8009784 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009760:	f043 0220 	orr.w	r2, r3, #32
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2220      	movs	r2, #32
 800976c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e007      	b.n	8009794 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	f003 0302 	and.w	r3, r3, #2
 800978e:	2b02      	cmp	r3, #2
 8009790:	d1c4      	bne.n	800971c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097a8:	e02f      	b.n	800980a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	68b9      	ldr	r1, [r7, #8]
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 f838 	bl	8009824 <I2C_IsErrorOccurred>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e02d      	b.n	800981a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097be:	f7fa fd07 	bl	80041d0 <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	68ba      	ldr	r2, [r7, #8]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d302      	bcc.n	80097d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d11a      	bne.n	800980a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	699b      	ldr	r3, [r3, #24]
 80097da:	f003 0320 	and.w	r3, r3, #32
 80097de:	2b20      	cmp	r3, #32
 80097e0:	d013      	beq.n	800980a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097e6:	f043 0220 	orr.w	r2, r3, #32
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2220      	movs	r2, #32
 80097f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e007      	b.n	800981a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	f003 0320 	and.w	r3, r3, #32
 8009814:	2b20      	cmp	r3, #32
 8009816:	d1c8      	bne.n	80097aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
	...

08009824 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b08a      	sub	sp, #40	; 0x28
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800983e:	2300      	movs	r3, #0
 8009840:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	f003 0310 	and.w	r3, r3, #16
 800984c:	2b00      	cmp	r3, #0
 800984e:	d068      	beq.n	8009922 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2210      	movs	r2, #16
 8009856:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009858:	e049      	b.n	80098ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009860:	d045      	beq.n	80098ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009862:	f7fa fcb5 	bl	80041d0 <HAL_GetTick>
 8009866:	4602      	mov	r2, r0
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	68ba      	ldr	r2, [r7, #8]
 800986e:	429a      	cmp	r2, r3
 8009870:	d302      	bcc.n	8009878 <I2C_IsErrorOccurred+0x54>
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d13a      	bne.n	80098ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009882:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800988a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800989a:	d121      	bne.n	80098e0 <I2C_IsErrorOccurred+0xbc>
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098a2:	d01d      	beq.n	80098e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80098a4:	7cfb      	ldrb	r3, [r7, #19]
 80098a6:	2b20      	cmp	r3, #32
 80098a8:	d01a      	beq.n	80098e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80098b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80098ba:	f7fa fc89 	bl	80041d0 <HAL_GetTick>
 80098be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098c0:	e00e      	b.n	80098e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80098c2:	f7fa fc85 	bl	80041d0 <HAL_GetTick>
 80098c6:	4602      	mov	r2, r0
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	2b19      	cmp	r3, #25
 80098ce:	d907      	bls.n	80098e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80098d0:	6a3b      	ldr	r3, [r7, #32]
 80098d2:	f043 0320 	orr.w	r3, r3, #32
 80098d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80098de:	e006      	b.n	80098ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	f003 0320 	and.w	r3, r3, #32
 80098ea:	2b20      	cmp	r3, #32
 80098ec:	d1e9      	bne.n	80098c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	f003 0320 	and.w	r3, r3, #32
 80098f8:	2b20      	cmp	r3, #32
 80098fa:	d003      	beq.n	8009904 <I2C_IsErrorOccurred+0xe0>
 80098fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009900:	2b00      	cmp	r3, #0
 8009902:	d0aa      	beq.n	800985a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009908:	2b00      	cmp	r3, #0
 800990a:	d103      	bne.n	8009914 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2220      	movs	r2, #32
 8009912:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	f043 0304 	orr.w	r3, r3, #4
 800991a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00b      	beq.n	800994c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009934:	6a3b      	ldr	r3, [r7, #32]
 8009936:	f043 0301 	orr.w	r3, r3, #1
 800993a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009944:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00b      	beq.n	800996e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	f043 0308 	orr.w	r3, r3, #8
 800995c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009966:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00b      	beq.n	8009990 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009978:	6a3b      	ldr	r3, [r7, #32]
 800997a:	f043 0302 	orr.w	r3, r3, #2
 800997e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009988:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009994:	2b00      	cmp	r3, #0
 8009996:	d01c      	beq.n	80099d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f7ff fe45 	bl	8009628 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	6859      	ldr	r1, [r3, #4]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	4b0d      	ldr	r3, [pc, #52]	; (80099e0 <I2C_IsErrorOccurred+0x1bc>)
 80099aa:	400b      	ands	r3, r1
 80099ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	431a      	orrs	r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2220      	movs	r2, #32
 80099be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80099d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3728      	adds	r7, #40	; 0x28
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	fe00e800 	.word	0xfe00e800

080099e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b087      	sub	sp, #28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	607b      	str	r3, [r7, #4]
 80099ee:	460b      	mov	r3, r1
 80099f0:	817b      	strh	r3, [r7, #10]
 80099f2:	4613      	mov	r3, r2
 80099f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099f6:	897b      	ldrh	r3, [r7, #10]
 80099f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80099fc:	7a7b      	ldrb	r3, [r7, #9]
 80099fe:	041b      	lsls	r3, r3, #16
 8009a00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	685a      	ldr	r2, [r3, #4]
 8009a1a:	6a3b      	ldr	r3, [r7, #32]
 8009a1c:	0d5b      	lsrs	r3, r3, #21
 8009a1e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009a22:	4b08      	ldr	r3, [pc, #32]	; (8009a44 <I2C_TransferConfig+0x60>)
 8009a24:	430b      	orrs	r3, r1
 8009a26:	43db      	mvns	r3, r3
 8009a28:	ea02 0103 	and.w	r1, r2, r3
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	430a      	orrs	r2, r1
 8009a34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009a36:	bf00      	nop
 8009a38:	371c      	adds	r7, #28
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	03ff63ff 	.word	0x03ff63ff

08009a48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	2b20      	cmp	r3, #32
 8009a5c:	d138      	bne.n	8009ad0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d101      	bne.n	8009a6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009a68:	2302      	movs	r3, #2
 8009a6a:	e032      	b.n	8009ad2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2224      	movs	r2, #36	; 0x24
 8009a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f022 0201 	bic.w	r2, r2, #1
 8009a8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	6819      	ldr	r1, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	683a      	ldr	r2, [r7, #0]
 8009aa8:	430a      	orrs	r2, r1
 8009aaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f042 0201 	orr.w	r2, r2, #1
 8009aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2220      	movs	r2, #32
 8009ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	e000      	b.n	8009ad2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ad0:	2302      	movs	r3, #2
  }
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ade:	b480      	push	{r7}
 8009ae0:	b085      	sub	sp, #20
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	2b20      	cmp	r3, #32
 8009af2:	d139      	bne.n	8009b68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d101      	bne.n	8009b02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009afe:	2302      	movs	r3, #2
 8009b00:	e033      	b.n	8009b6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2224      	movs	r2, #36	; 0x24
 8009b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f022 0201 	bic.w	r2, r2, #1
 8009b20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009b30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	021b      	lsls	r3, r3, #8
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f042 0201 	orr.w	r2, r2, #1
 8009b52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2220      	movs	r2, #32
 8009b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	e000      	b.n	8009b6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009b68:	2302      	movs	r3, #2
  }
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
	...

08009b78 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d101      	bne.n	8009b8a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009b86:	2301      	movs	r3, #1
 8009b88:	e0bf      	b.n	8009d0a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d106      	bne.n	8009ba4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f7f7 fa6c 	bl	800107c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	699a      	ldr	r2, [r3, #24]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009bba:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	6999      	ldr	r1, [r3, #24]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	685a      	ldr	r2, [r3, #4]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009bd0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	430a      	orrs	r2, r1
 8009bde:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6899      	ldr	r1, [r3, #8]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	4b4a      	ldr	r3, [pc, #296]	; (8009d14 <HAL_LTDC_Init+0x19c>)
 8009bec:	400b      	ands	r3, r1
 8009bee:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	695b      	ldr	r3, [r3, #20]
 8009bf4:	041b      	lsls	r3, r3, #16
 8009bf6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6899      	ldr	r1, [r3, #8]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	699a      	ldr	r2, [r3, #24]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	431a      	orrs	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	68d9      	ldr	r1, [r3, #12]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	4b3e      	ldr	r3, [pc, #248]	; (8009d14 <HAL_LTDC_Init+0x19c>)
 8009c1a:	400b      	ands	r3, r1
 8009c1c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	69db      	ldr	r3, [r3, #28]
 8009c22:	041b      	lsls	r3, r3, #16
 8009c24:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68d9      	ldr	r1, [r3, #12]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a1a      	ldr	r2, [r3, #32]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	431a      	orrs	r2, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	430a      	orrs	r2, r1
 8009c3a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6919      	ldr	r1, [r3, #16]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	4b33      	ldr	r3, [pc, #204]	; (8009d14 <HAL_LTDC_Init+0x19c>)
 8009c48:	400b      	ands	r3, r1
 8009c4a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c50:	041b      	lsls	r3, r3, #16
 8009c52:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	6919      	ldr	r1, [r3, #16]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	431a      	orrs	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	430a      	orrs	r2, r1
 8009c68:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	6959      	ldr	r1, [r3, #20]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	4b27      	ldr	r3, [pc, #156]	; (8009d14 <HAL_LTDC_Init+0x19c>)
 8009c76:	400b      	ands	r3, r1
 8009c78:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7e:	041b      	lsls	r3, r3, #16
 8009c80:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	6959      	ldr	r1, [r3, #20]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	431a      	orrs	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	430a      	orrs	r2, r1
 8009c96:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009c9e:	021b      	lsls	r3, r3, #8
 8009ca0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009ca8:	041b      	lsls	r3, r3, #16
 8009caa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009cce:	431a      	orrs	r2, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	430a      	orrs	r2, r1
 8009cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f042 0206 	orr.w	r2, r2, #6
 8009ce6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	699a      	ldr	r2, [r3, #24]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f042 0201 	orr.w	r2, r2, #1
 8009cf6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	f000f800 	.word	0xf000f800

08009d18 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d26:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d2e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f003 0304 	and.w	r3, r3, #4
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d023      	beq.n	8009d82 <HAL_LTDC_IRQHandler+0x6a>
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	f003 0304 	and.w	r3, r3, #4
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d01e      	beq.n	8009d82 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f022 0204 	bic.w	r2, r2, #4
 8009d52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2204      	movs	r2, #4
 8009d5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009d62:	f043 0201 	orr.w	r2, r3, #1
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2204      	movs	r2, #4
 8009d70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f86f 	bl	8009e60 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f003 0302 	and.w	r3, r3, #2
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d023      	beq.n	8009dd4 <HAL_LTDC_IRQHandler+0xbc>
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	f003 0302 	and.w	r3, r3, #2
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d01e      	beq.n	8009dd4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f022 0202 	bic.w	r2, r2, #2
 8009da4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2202      	movs	r2, #2
 8009dac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009db4:	f043 0202 	orr.w	r2, r3, #2
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2204      	movs	r2, #4
 8009dc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f846 	bl	8009e60 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f003 0301 	and.w	r3, r3, #1
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d01b      	beq.n	8009e16 <HAL_LTDC_IRQHandler+0xfe>
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d016      	beq.n	8009e16 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f022 0201 	bic.w	r2, r2, #1
 8009df6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f82f 	bl	8009e74 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f003 0308 	and.w	r3, r3, #8
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d01b      	beq.n	8009e58 <HAL_LTDC_IRQHandler+0x140>
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	f003 0308 	and.w	r3, r3, #8
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d016      	beq.n	8009e58 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f022 0208 	bic.w	r2, r2, #8
 8009e38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2208      	movs	r2, #8
 8009e40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f818 	bl	8009e88 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009e58:	bf00      	nop
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009e9c:	b5b0      	push	{r4, r5, r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d101      	bne.n	8009eb6 <HAL_LTDC_ConfigLayer+0x1a>
 8009eb2:	2302      	movs	r3, #2
 8009eb4:	e02c      	b.n	8009f10 <HAL_LTDC_ConfigLayer+0x74>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2202      	movs	r2, #2
 8009ec2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2134      	movs	r1, #52	; 0x34
 8009ecc:	fb01 f303 	mul.w	r3, r1, r3
 8009ed0:	4413      	add	r3, r2
 8009ed2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	4614      	mov	r4, r2
 8009eda:	461d      	mov	r5, r3
 8009edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	68b9      	ldr	r1, [r7, #8]
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 f811 	bl	8009f18 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2201      	movs	r2, #1
 8009efc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2201      	movs	r2, #1
 8009f02:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bdb0      	pop	{r4, r5, r7, pc}

08009f18 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b089      	sub	sp, #36	; 0x24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	685a      	ldr	r2, [r3, #4]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	68db      	ldr	r3, [r3, #12]
 8009f2e:	0c1b      	lsrs	r3, r3, #16
 8009f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f34:	4413      	add	r3, r2
 8009f36:	041b      	lsls	r3, r3, #16
 8009f38:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	01db      	lsls	r3, r3, #7
 8009f44:	4413      	add	r3, r2
 8009f46:	3384      	adds	r3, #132	; 0x84
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	6812      	ldr	r2, [r2, #0]
 8009f4e:	4611      	mov	r1, r2
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	01d2      	lsls	r2, r2, #7
 8009f54:	440a      	add	r2, r1
 8009f56:	3284      	adds	r2, #132	; 0x84
 8009f58:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009f5c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	0c1b      	lsrs	r3, r3, #16
 8009f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009f6e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009f70:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4619      	mov	r1, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	01db      	lsls	r3, r3, #7
 8009f7c:	440b      	add	r3, r1
 8009f7e:	3384      	adds	r3, #132	; 0x84
 8009f80:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009f86:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	68da      	ldr	r2, [r3, #12]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f96:	4413      	add	r3, r2
 8009f98:	041b      	lsls	r3, r3, #16
 8009f9a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	01db      	lsls	r3, r3, #7
 8009fa6:	4413      	add	r3, r2
 8009fa8:	3384      	adds	r3, #132	; 0x84
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	6812      	ldr	r2, [r2, #0]
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	01d2      	lsls	r2, r2, #7
 8009fb6:	440a      	add	r2, r1
 8009fb8:	3284      	adds	r2, #132	; 0x84
 8009fba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009fbe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	689a      	ldr	r2, [r3, #8]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009fce:	4413      	add	r3, r2
 8009fd0:	1c5a      	adds	r2, r3, #1
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	01db      	lsls	r3, r3, #7
 8009fdc:	440b      	add	r3, r1
 8009fde:	3384      	adds	r3, #132	; 0x84
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	461a      	mov	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	01db      	lsls	r3, r3, #7
 8009ff2:	4413      	add	r3, r2
 8009ff4:	3384      	adds	r3, #132	; 0x84
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	6812      	ldr	r2, [r2, #0]
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	01d2      	lsls	r2, r2, #7
 800a002:	440a      	add	r2, r1
 800a004:	3284      	adds	r2, #132	; 0x84
 800a006:	f023 0307 	bic.w	r3, r3, #7
 800a00a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	461a      	mov	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	01db      	lsls	r3, r3, #7
 800a016:	4413      	add	r3, r2
 800a018:	3384      	adds	r3, #132	; 0x84
 800a01a:	461a      	mov	r2, r3
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a028:	021b      	lsls	r3, r3, #8
 800a02a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a032:	041b      	lsls	r3, r3, #16
 800a034:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	061b      	lsls	r3, r3, #24
 800a03c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	01db      	lsls	r3, r3, #7
 800a048:	4413      	add	r3, r2
 800a04a:	3384      	adds	r3, #132	; 0x84
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	461a      	mov	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	01db      	lsls	r3, r3, #7
 800a058:	4413      	add	r3, r2
 800a05a:	3384      	adds	r3, #132	; 0x84
 800a05c:	461a      	mov	r2, r3
 800a05e:	2300      	movs	r3, #0
 800a060:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a068:	461a      	mov	r2, r3
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	431a      	orrs	r2, r3
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	431a      	orrs	r2, r3
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4619      	mov	r1, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	01db      	lsls	r3, r3, #7
 800a07c:	440b      	add	r3, r1
 800a07e:	3384      	adds	r3, #132	; 0x84
 800a080:	4619      	mov	r1, r3
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	4313      	orrs	r3, r2
 800a086:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	461a      	mov	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	01db      	lsls	r3, r3, #7
 800a092:	4413      	add	r3, r2
 800a094:	3384      	adds	r3, #132	; 0x84
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	6812      	ldr	r2, [r2, #0]
 800a09c:	4611      	mov	r1, r2
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	01d2      	lsls	r2, r2, #7
 800a0a2:	440a      	add	r2, r1
 800a0a4:	3284      	adds	r2, #132	; 0x84
 800a0a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a0aa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	01db      	lsls	r3, r3, #7
 800a0b6:	4413      	add	r3, r2
 800a0b8:	3384      	adds	r3, #132	; 0x84
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	695b      	ldr	r3, [r3, #20]
 800a0c0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	01db      	lsls	r3, r3, #7
 800a0cc:	4413      	add	r3, r2
 800a0ce:	3384      	adds	r3, #132	; 0x84
 800a0d0:	69da      	ldr	r2, [r3, #28]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	01db      	lsls	r3, r3, #7
 800a0dc:	440b      	add	r3, r1
 800a0de:	3384      	adds	r3, #132	; 0x84
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	4b58      	ldr	r3, [pc, #352]	; (800a244 <LTDC_SetConfig+0x32c>)
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	69da      	ldr	r2, [r3, #28]
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	6a1b      	ldr	r3, [r3, #32]
 800a0f0:	68f9      	ldr	r1, [r7, #12]
 800a0f2:	6809      	ldr	r1, [r1, #0]
 800a0f4:	4608      	mov	r0, r1
 800a0f6:	6879      	ldr	r1, [r7, #4]
 800a0f8:	01c9      	lsls	r1, r1, #7
 800a0fa:	4401      	add	r1, r0
 800a0fc:	3184      	adds	r1, #132	; 0x84
 800a0fe:	4313      	orrs	r3, r2
 800a100:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	461a      	mov	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	01db      	lsls	r3, r3, #7
 800a10c:	4413      	add	r3, r2
 800a10e:	3384      	adds	r3, #132	; 0x84
 800a110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	01db      	lsls	r3, r3, #7
 800a11c:	4413      	add	r3, r2
 800a11e:	3384      	adds	r3, #132	; 0x84
 800a120:	461a      	mov	r2, r3
 800a122:	2300      	movs	r3, #0
 800a124:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	461a      	mov	r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	01db      	lsls	r3, r3, #7
 800a130:	4413      	add	r3, r2
 800a132:	3384      	adds	r3, #132	; 0x84
 800a134:	461a      	mov	r2, r3
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d102      	bne.n	800a14a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a144:	2304      	movs	r3, #4
 800a146:	61fb      	str	r3, [r7, #28]
 800a148:	e01b      	b.n	800a182 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	2b01      	cmp	r3, #1
 800a150:	d102      	bne.n	800a158 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a152:	2303      	movs	r3, #3
 800a154:	61fb      	str	r3, [r7, #28]
 800a156:	e014      	b.n	800a182 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	2b04      	cmp	r3, #4
 800a15e:	d00b      	beq.n	800a178 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a164:	2b02      	cmp	r3, #2
 800a166:	d007      	beq.n	800a178 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a16c:	2b03      	cmp	r3, #3
 800a16e:	d003      	beq.n	800a178 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a174:	2b07      	cmp	r3, #7
 800a176:	d102      	bne.n	800a17e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a178:	2302      	movs	r3, #2
 800a17a:	61fb      	str	r3, [r7, #28]
 800a17c:	e001      	b.n	800a182 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a17e:	2301      	movs	r3, #1
 800a180:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	461a      	mov	r2, r3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	01db      	lsls	r3, r3, #7
 800a18c:	4413      	add	r3, r2
 800a18e:	3384      	adds	r3, #132	; 0x84
 800a190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	6812      	ldr	r2, [r2, #0]
 800a196:	4611      	mov	r1, r2
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	01d2      	lsls	r2, r2, #7
 800a19c:	440a      	add	r2, r1
 800a19e:	3284      	adds	r2, #132	; 0x84
 800a1a0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a1a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1aa:	69fa      	ldr	r2, [r7, #28]
 800a1ac:	fb02 f303 	mul.w	r3, r2, r3
 800a1b0:	041a      	lsls	r2, r3, #16
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	6859      	ldr	r1, [r3, #4]
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	1acb      	subs	r3, r1, r3
 800a1bc:	69f9      	ldr	r1, [r7, #28]
 800a1be:	fb01 f303 	mul.w	r3, r1, r3
 800a1c2:	3307      	adds	r3, #7
 800a1c4:	68f9      	ldr	r1, [r7, #12]
 800a1c6:	6809      	ldr	r1, [r1, #0]
 800a1c8:	4608      	mov	r0, r1
 800a1ca:	6879      	ldr	r1, [r7, #4]
 800a1cc:	01c9      	lsls	r1, r1, #7
 800a1ce:	4401      	add	r1, r0
 800a1d0:	3184      	adds	r1, #132	; 0x84
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	01db      	lsls	r3, r3, #7
 800a1e0:	4413      	add	r3, r2
 800a1e2:	3384      	adds	r3, #132	; 0x84
 800a1e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	01db      	lsls	r3, r3, #7
 800a1f0:	440b      	add	r3, r1
 800a1f2:	3384      	adds	r3, #132	; 0x84
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	4b14      	ldr	r3, [pc, #80]	; (800a248 <LTDC_SetConfig+0x330>)
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	461a      	mov	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	01db      	lsls	r3, r3, #7
 800a206:	4413      	add	r3, r2
 800a208:	3384      	adds	r3, #132	; 0x84
 800a20a:	461a      	mov	r2, r3
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a210:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	461a      	mov	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	01db      	lsls	r3, r3, #7
 800a21c:	4413      	add	r3, r2
 800a21e:	3384      	adds	r3, #132	; 0x84
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	6812      	ldr	r2, [r2, #0]
 800a226:	4611      	mov	r1, r2
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	01d2      	lsls	r2, r2, #7
 800a22c:	440a      	add	r2, r1
 800a22e:	3284      	adds	r2, #132	; 0x84
 800a230:	f043 0301 	orr.w	r3, r3, #1
 800a234:	6013      	str	r3, [r2, #0]
}
 800a236:	bf00      	nop
 800a238:	3724      	adds	r7, #36	; 0x24
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	fffff8f8 	.word	0xfffff8f8
 800a248:	fffff800 	.word	0xfffff800

0800a24c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800a24c:	b480      	push	{r7}
 800a24e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800a250:	4b05      	ldr	r3, [pc, #20]	; (800a268 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a04      	ldr	r2, [pc, #16]	; (800a268 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a25a:	6013      	str	r3, [r2, #0]
}
 800a25c:	bf00      	nop
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	58024800 	.word	0x58024800

0800a26c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a274:	4b29      	ldr	r3, [pc, #164]	; (800a31c <HAL_PWREx_ConfigSupply+0xb0>)
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	f003 0307 	and.w	r3, r3, #7
 800a27c:	2b06      	cmp	r3, #6
 800a27e:	d00a      	beq.n	800a296 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a280:	4b26      	ldr	r3, [pc, #152]	; (800a31c <HAL_PWREx_ConfigSupply+0xb0>)
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d001      	beq.n	800a292 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	e040      	b.n	800a314 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	e03e      	b.n	800a314 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a296:	4b21      	ldr	r3, [pc, #132]	; (800a31c <HAL_PWREx_ConfigSupply+0xb0>)
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800a29e:	491f      	ldr	r1, [pc, #124]	; (800a31c <HAL_PWREx_ConfigSupply+0xb0>)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a2a6:	f7f9 ff93 	bl	80041d0 <HAL_GetTick>
 800a2aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a2ac:	e009      	b.n	800a2c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a2ae:	f7f9 ff8f 	bl	80041d0 <HAL_GetTick>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	1ad3      	subs	r3, r2, r3
 800a2b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2bc:	d901      	bls.n	800a2c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e028      	b.n	800a314 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a2c2:	4b16      	ldr	r3, [pc, #88]	; (800a31c <HAL_PWREx_ConfigSupply+0xb0>)
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2ce:	d1ee      	bne.n	800a2ae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2b1e      	cmp	r3, #30
 800a2d4:	d008      	beq.n	800a2e8 <HAL_PWREx_ConfigSupply+0x7c>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2b2e      	cmp	r3, #46	; 0x2e
 800a2da:	d005      	beq.n	800a2e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2b1d      	cmp	r3, #29
 800a2e0:	d002      	beq.n	800a2e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2b2d      	cmp	r3, #45	; 0x2d
 800a2e6:	d114      	bne.n	800a312 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a2e8:	f7f9 ff72 	bl	80041d0 <HAL_GetTick>
 800a2ec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a2ee:	e009      	b.n	800a304 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a2f0:	f7f9 ff6e 	bl	80041d0 <HAL_GetTick>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2fe:	d901      	bls.n	800a304 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	e007      	b.n	800a314 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a304:	4b05      	ldr	r3, [pc, #20]	; (800a31c <HAL_PWREx_ConfigSupply+0xb0>)
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a30c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a310:	d1ee      	bne.n	800a2f0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	58024800 	.word	0x58024800

0800a320 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b08c      	sub	sp, #48	; 0x30
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d102      	bne.n	800a334 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	f000 bc1f 	b.w	800ab72 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 0301 	and.w	r3, r3, #1
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f000 80b3 	beq.w	800a4a8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a342:	4b95      	ldr	r3, [pc, #596]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a34a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a34c:	4b92      	ldr	r3, [pc, #584]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a350:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a354:	2b10      	cmp	r3, #16
 800a356:	d007      	beq.n	800a368 <HAL_RCC_OscConfig+0x48>
 800a358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35a:	2b18      	cmp	r3, #24
 800a35c:	d112      	bne.n	800a384 <HAL_RCC_OscConfig+0x64>
 800a35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a360:	f003 0303 	and.w	r3, r3, #3
 800a364:	2b02      	cmp	r3, #2
 800a366:	d10d      	bne.n	800a384 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a368:	4b8b      	ldr	r3, [pc, #556]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 8098 	beq.w	800a4a6 <HAL_RCC_OscConfig+0x186>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f040 8093 	bne.w	800a4a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a380:	2301      	movs	r3, #1
 800a382:	e3f6      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a38c:	d106      	bne.n	800a39c <HAL_RCC_OscConfig+0x7c>
 800a38e:	4b82      	ldr	r3, [pc, #520]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a81      	ldr	r2, [pc, #516]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a398:	6013      	str	r3, [r2, #0]
 800a39a:	e058      	b.n	800a44e <HAL_RCC_OscConfig+0x12e>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d112      	bne.n	800a3ca <HAL_RCC_OscConfig+0xaa>
 800a3a4:	4b7c      	ldr	r3, [pc, #496]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a7b      	ldr	r2, [pc, #492]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a3aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3ae:	6013      	str	r3, [r2, #0]
 800a3b0:	4b79      	ldr	r3, [pc, #484]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a78      	ldr	r2, [pc, #480]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a3b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a3ba:	6013      	str	r3, [r2, #0]
 800a3bc:	4b76      	ldr	r3, [pc, #472]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a75      	ldr	r2, [pc, #468]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a3c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3c6:	6013      	str	r3, [r2, #0]
 800a3c8:	e041      	b.n	800a44e <HAL_RCC_OscConfig+0x12e>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a3d2:	d112      	bne.n	800a3fa <HAL_RCC_OscConfig+0xda>
 800a3d4:	4b70      	ldr	r3, [pc, #448]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a6f      	ldr	r2, [pc, #444]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a3da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a3de:	6013      	str	r3, [r2, #0]
 800a3e0:	4b6d      	ldr	r3, [pc, #436]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a6c      	ldr	r2, [pc, #432]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a3e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a3ea:	6013      	str	r3, [r2, #0]
 800a3ec:	4b6a      	ldr	r3, [pc, #424]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a69      	ldr	r2, [pc, #420]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a3f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3f6:	6013      	str	r3, [r2, #0]
 800a3f8:	e029      	b.n	800a44e <HAL_RCC_OscConfig+0x12e>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a402:	d112      	bne.n	800a42a <HAL_RCC_OscConfig+0x10a>
 800a404:	4b64      	ldr	r3, [pc, #400]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a63      	ldr	r2, [pc, #396]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a40a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a40e:	6013      	str	r3, [r2, #0]
 800a410:	4b61      	ldr	r3, [pc, #388]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a60      	ldr	r2, [pc, #384]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a41a:	6013      	str	r3, [r2, #0]
 800a41c:	4b5e      	ldr	r3, [pc, #376]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a5d      	ldr	r2, [pc, #372]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a426:	6013      	str	r3, [r2, #0]
 800a428:	e011      	b.n	800a44e <HAL_RCC_OscConfig+0x12e>
 800a42a:	4b5b      	ldr	r3, [pc, #364]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a5a      	ldr	r2, [pc, #360]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a434:	6013      	str	r3, [r2, #0]
 800a436:	4b58      	ldr	r3, [pc, #352]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a57      	ldr	r2, [pc, #348]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a43c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a440:	6013      	str	r3, [r2, #0]
 800a442:	4b55      	ldr	r3, [pc, #340]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a54      	ldr	r2, [pc, #336]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a448:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a44c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d013      	beq.n	800a47e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a456:	f7f9 febb 	bl	80041d0 <HAL_GetTick>
 800a45a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a45c:	e008      	b.n	800a470 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a45e:	f7f9 feb7 	bl	80041d0 <HAL_GetTick>
 800a462:	4602      	mov	r2, r0
 800a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	2b64      	cmp	r3, #100	; 0x64
 800a46a:	d901      	bls.n	800a470 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e380      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a470:	4b49      	ldr	r3, [pc, #292]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d0f0      	beq.n	800a45e <HAL_RCC_OscConfig+0x13e>
 800a47c:	e014      	b.n	800a4a8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a47e:	f7f9 fea7 	bl	80041d0 <HAL_GetTick>
 800a482:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a484:	e008      	b.n	800a498 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a486:	f7f9 fea3 	bl	80041d0 <HAL_GetTick>
 800a48a:	4602      	mov	r2, r0
 800a48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48e:	1ad3      	subs	r3, r2, r3
 800a490:	2b64      	cmp	r3, #100	; 0x64
 800a492:	d901      	bls.n	800a498 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a494:	2303      	movs	r3, #3
 800a496:	e36c      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a498:	4b3f      	ldr	r3, [pc, #252]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1f0      	bne.n	800a486 <HAL_RCC_OscConfig+0x166>
 800a4a4:	e000      	b.n	800a4a8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 0302 	and.w	r3, r3, #2
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f000 808c 	beq.w	800a5ce <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4b6:	4b38      	ldr	r3, [pc, #224]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4be:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a4c0:	4b35      	ldr	r3, [pc, #212]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a4c6:	6a3b      	ldr	r3, [r7, #32]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d007      	beq.n	800a4dc <HAL_RCC_OscConfig+0x1bc>
 800a4cc:	6a3b      	ldr	r3, [r7, #32]
 800a4ce:	2b18      	cmp	r3, #24
 800a4d0:	d137      	bne.n	800a542 <HAL_RCC_OscConfig+0x222>
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	f003 0303 	and.w	r3, r3, #3
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d132      	bne.n	800a542 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a4dc:	4b2e      	ldr	r3, [pc, #184]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 0304 	and.w	r3, r3, #4
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d005      	beq.n	800a4f4 <HAL_RCC_OscConfig+0x1d4>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d101      	bne.n	800a4f4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e33e      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a4f4:	4b28      	ldr	r3, [pc, #160]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f023 0219 	bic.w	r2, r3, #25
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	4925      	ldr	r1, [pc, #148]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a502:	4313      	orrs	r3, r2
 800a504:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a506:	f7f9 fe63 	bl	80041d0 <HAL_GetTick>
 800a50a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a50c:	e008      	b.n	800a520 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a50e:	f7f9 fe5f 	bl	80041d0 <HAL_GetTick>
 800a512:	4602      	mov	r2, r0
 800a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a516:	1ad3      	subs	r3, r2, r3
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d901      	bls.n	800a520 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a51c:	2303      	movs	r3, #3
 800a51e:	e328      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a520:	4b1d      	ldr	r3, [pc, #116]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 0304 	and.w	r3, r3, #4
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d0f0      	beq.n	800a50e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a52c:	4b1a      	ldr	r3, [pc, #104]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	061b      	lsls	r3, r3, #24
 800a53a:	4917      	ldr	r1, [pc, #92]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a53c:	4313      	orrs	r3, r2
 800a53e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a540:	e045      	b.n	800a5ce <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d028      	beq.n	800a59c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a54a:	4b13      	ldr	r3, [pc, #76]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f023 0219 	bic.w	r2, r3, #25
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	4910      	ldr	r1, [pc, #64]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a558:	4313      	orrs	r3, r2
 800a55a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a55c:	f7f9 fe38 	bl	80041d0 <HAL_GetTick>
 800a560:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a562:	e008      	b.n	800a576 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a564:	f7f9 fe34 	bl	80041d0 <HAL_GetTick>
 800a568:	4602      	mov	r2, r0
 800a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d901      	bls.n	800a576 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	e2fd      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a576:	4b08      	ldr	r3, [pc, #32]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 0304 	and.w	r3, r3, #4
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d0f0      	beq.n	800a564 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a582:	4b05      	ldr	r3, [pc, #20]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	061b      	lsls	r3, r3, #24
 800a590:	4901      	ldr	r1, [pc, #4]	; (800a598 <HAL_RCC_OscConfig+0x278>)
 800a592:	4313      	orrs	r3, r2
 800a594:	604b      	str	r3, [r1, #4]
 800a596:	e01a      	b.n	800a5ce <HAL_RCC_OscConfig+0x2ae>
 800a598:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a59c:	4b97      	ldr	r3, [pc, #604]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a96      	ldr	r2, [pc, #600]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a5a2:	f023 0301 	bic.w	r3, r3, #1
 800a5a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5a8:	f7f9 fe12 	bl	80041d0 <HAL_GetTick>
 800a5ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a5ae:	e008      	b.n	800a5c2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5b0:	f7f9 fe0e 	bl	80041d0 <HAL_GetTick>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d901      	bls.n	800a5c2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	e2d7      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a5c2:	4b8e      	ldr	r3, [pc, #568]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 0304 	and.w	r3, r3, #4
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1f0      	bne.n	800a5b0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f003 0310 	and.w	r3, r3, #16
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d06a      	beq.n	800a6b0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a5da:	4b88      	ldr	r3, [pc, #544]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a5e4:	4b85      	ldr	r3, [pc, #532]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	2b08      	cmp	r3, #8
 800a5ee:	d007      	beq.n	800a600 <HAL_RCC_OscConfig+0x2e0>
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	2b18      	cmp	r3, #24
 800a5f4:	d11b      	bne.n	800a62e <HAL_RCC_OscConfig+0x30e>
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	f003 0303 	and.w	r3, r3, #3
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d116      	bne.n	800a62e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a600:	4b7e      	ldr	r3, [pc, #504]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d005      	beq.n	800a618 <HAL_RCC_OscConfig+0x2f8>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	69db      	ldr	r3, [r3, #28]
 800a610:	2b80      	cmp	r3, #128	; 0x80
 800a612:	d001      	beq.n	800a618 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	e2ac      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a618:	4b78      	ldr	r3, [pc, #480]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a1b      	ldr	r3, [r3, #32]
 800a624:	061b      	lsls	r3, r3, #24
 800a626:	4975      	ldr	r1, [pc, #468]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a628:	4313      	orrs	r3, r2
 800a62a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a62c:	e040      	b.n	800a6b0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	69db      	ldr	r3, [r3, #28]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d023      	beq.n	800a67e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a636:	4b71      	ldr	r3, [pc, #452]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a70      	ldr	r2, [pc, #448]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a63c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a642:	f7f9 fdc5 	bl	80041d0 <HAL_GetTick>
 800a646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a648:	e008      	b.n	800a65c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a64a:	f7f9 fdc1 	bl	80041d0 <HAL_GetTick>
 800a64e:	4602      	mov	r2, r0
 800a650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	2b02      	cmp	r3, #2
 800a656:	d901      	bls.n	800a65c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a658:	2303      	movs	r3, #3
 800a65a:	e28a      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a65c:	4b67      	ldr	r3, [pc, #412]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a664:	2b00      	cmp	r3, #0
 800a666:	d0f0      	beq.n	800a64a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a668:	4b64      	ldr	r3, [pc, #400]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a1b      	ldr	r3, [r3, #32]
 800a674:	061b      	lsls	r3, r3, #24
 800a676:	4961      	ldr	r1, [pc, #388]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a678:	4313      	orrs	r3, r2
 800a67a:	60cb      	str	r3, [r1, #12]
 800a67c:	e018      	b.n	800a6b0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a67e:	4b5f      	ldr	r3, [pc, #380]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a5e      	ldr	r2, [pc, #376]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a68a:	f7f9 fda1 	bl	80041d0 <HAL_GetTick>
 800a68e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a690:	e008      	b.n	800a6a4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a692:	f7f9 fd9d 	bl	80041d0 <HAL_GetTick>
 800a696:	4602      	mov	r2, r0
 800a698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d901      	bls.n	800a6a4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	e266      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a6a4:	4b55      	ldr	r3, [pc, #340]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1f0      	bne.n	800a692 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 0308 	and.w	r3, r3, #8
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d036      	beq.n	800a72a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	695b      	ldr	r3, [r3, #20]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d019      	beq.n	800a6f8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a6c4:	4b4d      	ldr	r3, [pc, #308]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a6c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6c8:	4a4c      	ldr	r2, [pc, #304]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a6ca:	f043 0301 	orr.w	r3, r3, #1
 800a6ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6d0:	f7f9 fd7e 	bl	80041d0 <HAL_GetTick>
 800a6d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a6d6:	e008      	b.n	800a6ea <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a6d8:	f7f9 fd7a 	bl	80041d0 <HAL_GetTick>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d901      	bls.n	800a6ea <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	e243      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a6ea:	4b44      	ldr	r3, [pc, #272]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a6ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6ee:	f003 0302 	and.w	r3, r3, #2
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d0f0      	beq.n	800a6d8 <HAL_RCC_OscConfig+0x3b8>
 800a6f6:	e018      	b.n	800a72a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a6f8:	4b40      	ldr	r3, [pc, #256]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a6fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6fc:	4a3f      	ldr	r2, [pc, #252]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a6fe:	f023 0301 	bic.w	r3, r3, #1
 800a702:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a704:	f7f9 fd64 	bl	80041d0 <HAL_GetTick>
 800a708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a70a:	e008      	b.n	800a71e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a70c:	f7f9 fd60 	bl	80041d0 <HAL_GetTick>
 800a710:	4602      	mov	r2, r0
 800a712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	2b02      	cmp	r3, #2
 800a718:	d901      	bls.n	800a71e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a71a:	2303      	movs	r3, #3
 800a71c:	e229      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a71e:	4b37      	ldr	r3, [pc, #220]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a722:	f003 0302 	and.w	r3, r3, #2
 800a726:	2b00      	cmp	r3, #0
 800a728:	d1f0      	bne.n	800a70c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f003 0320 	and.w	r3, r3, #32
 800a732:	2b00      	cmp	r3, #0
 800a734:	d036      	beq.n	800a7a4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	699b      	ldr	r3, [r3, #24]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d019      	beq.n	800a772 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a73e:	4b2f      	ldr	r3, [pc, #188]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a2e      	ldr	r2, [pc, #184]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a744:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a748:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a74a:	f7f9 fd41 	bl	80041d0 <HAL_GetTick>
 800a74e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a750:	e008      	b.n	800a764 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a752:	f7f9 fd3d 	bl	80041d0 <HAL_GetTick>
 800a756:	4602      	mov	r2, r0
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d901      	bls.n	800a764 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e206      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a764:	4b25      	ldr	r3, [pc, #148]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d0f0      	beq.n	800a752 <HAL_RCC_OscConfig+0x432>
 800a770:	e018      	b.n	800a7a4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a772:	4b22      	ldr	r3, [pc, #136]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a21      	ldr	r2, [pc, #132]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a778:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a77c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a77e:	f7f9 fd27 	bl	80041d0 <HAL_GetTick>
 800a782:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a784:	e008      	b.n	800a798 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a786:	f7f9 fd23 	bl	80041d0 <HAL_GetTick>
 800a78a:	4602      	mov	r2, r0
 800a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	2b02      	cmp	r3, #2
 800a792:	d901      	bls.n	800a798 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800a794:	2303      	movs	r3, #3
 800a796:	e1ec      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a798:	4b18      	ldr	r3, [pc, #96]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1f0      	bne.n	800a786 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 0304 	and.w	r3, r3, #4
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f000 80af 	beq.w	800a910 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a7b2:	4b13      	ldr	r3, [pc, #76]	; (800a800 <HAL_RCC_OscConfig+0x4e0>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a12      	ldr	r2, [pc, #72]	; (800a800 <HAL_RCC_OscConfig+0x4e0>)
 800a7b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a7be:	f7f9 fd07 	bl	80041d0 <HAL_GetTick>
 800a7c2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7c4:	e008      	b.n	800a7d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7c6:	f7f9 fd03 	bl	80041d0 <HAL_GetTick>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ce:	1ad3      	subs	r3, r2, r3
 800a7d0:	2b64      	cmp	r3, #100	; 0x64
 800a7d2:	d901      	bls.n	800a7d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	e1cc      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7d8:	4b09      	ldr	r3, [pc, #36]	; (800a800 <HAL_RCC_OscConfig+0x4e0>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d0f0      	beq.n	800a7c6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d10b      	bne.n	800a804 <HAL_RCC_OscConfig+0x4e4>
 800a7ec:	4b03      	ldr	r3, [pc, #12]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a7ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7f0:	4a02      	ldr	r2, [pc, #8]	; (800a7fc <HAL_RCC_OscConfig+0x4dc>)
 800a7f2:	f043 0301 	orr.w	r3, r3, #1
 800a7f6:	6713      	str	r3, [r2, #112]	; 0x70
 800a7f8:	e05b      	b.n	800a8b2 <HAL_RCC_OscConfig+0x592>
 800a7fa:	bf00      	nop
 800a7fc:	58024400 	.word	0x58024400
 800a800:	58024800 	.word	0x58024800
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d112      	bne.n	800a832 <HAL_RCC_OscConfig+0x512>
 800a80c:	4b9d      	ldr	r3, [pc, #628]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a80e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a810:	4a9c      	ldr	r2, [pc, #624]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a812:	f023 0301 	bic.w	r3, r3, #1
 800a816:	6713      	str	r3, [r2, #112]	; 0x70
 800a818:	4b9a      	ldr	r3, [pc, #616]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a81a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a81c:	4a99      	ldr	r2, [pc, #612]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a81e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a822:	6713      	str	r3, [r2, #112]	; 0x70
 800a824:	4b97      	ldr	r3, [pc, #604]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a828:	4a96      	ldr	r2, [pc, #600]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a82a:	f023 0304 	bic.w	r3, r3, #4
 800a82e:	6713      	str	r3, [r2, #112]	; 0x70
 800a830:	e03f      	b.n	800a8b2 <HAL_RCC_OscConfig+0x592>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	2b05      	cmp	r3, #5
 800a838:	d112      	bne.n	800a860 <HAL_RCC_OscConfig+0x540>
 800a83a:	4b92      	ldr	r3, [pc, #584]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a83c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a83e:	4a91      	ldr	r2, [pc, #580]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a840:	f043 0304 	orr.w	r3, r3, #4
 800a844:	6713      	str	r3, [r2, #112]	; 0x70
 800a846:	4b8f      	ldr	r3, [pc, #572]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a84a:	4a8e      	ldr	r2, [pc, #568]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a84c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a850:	6713      	str	r3, [r2, #112]	; 0x70
 800a852:	4b8c      	ldr	r3, [pc, #560]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a856:	4a8b      	ldr	r2, [pc, #556]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a858:	f043 0301 	orr.w	r3, r3, #1
 800a85c:	6713      	str	r3, [r2, #112]	; 0x70
 800a85e:	e028      	b.n	800a8b2 <HAL_RCC_OscConfig+0x592>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	2b85      	cmp	r3, #133	; 0x85
 800a866:	d112      	bne.n	800a88e <HAL_RCC_OscConfig+0x56e>
 800a868:	4b86      	ldr	r3, [pc, #536]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a86a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a86c:	4a85      	ldr	r2, [pc, #532]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a86e:	f043 0304 	orr.w	r3, r3, #4
 800a872:	6713      	str	r3, [r2, #112]	; 0x70
 800a874:	4b83      	ldr	r3, [pc, #524]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a878:	4a82      	ldr	r2, [pc, #520]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a87a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a87e:	6713      	str	r3, [r2, #112]	; 0x70
 800a880:	4b80      	ldr	r3, [pc, #512]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a884:	4a7f      	ldr	r2, [pc, #508]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a886:	f043 0301 	orr.w	r3, r3, #1
 800a88a:	6713      	str	r3, [r2, #112]	; 0x70
 800a88c:	e011      	b.n	800a8b2 <HAL_RCC_OscConfig+0x592>
 800a88e:	4b7d      	ldr	r3, [pc, #500]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a892:	4a7c      	ldr	r2, [pc, #496]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a894:	f023 0301 	bic.w	r3, r3, #1
 800a898:	6713      	str	r3, [r2, #112]	; 0x70
 800a89a:	4b7a      	ldr	r3, [pc, #488]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a89e:	4a79      	ldr	r2, [pc, #484]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a8a0:	f023 0304 	bic.w	r3, r3, #4
 800a8a4:	6713      	str	r3, [r2, #112]	; 0x70
 800a8a6:	4b77      	ldr	r3, [pc, #476]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a8a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8aa:	4a76      	ldr	r2, [pc, #472]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a8ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d015      	beq.n	800a8e6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8ba:	f7f9 fc89 	bl	80041d0 <HAL_GetTick>
 800a8be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a8c0:	e00a      	b.n	800a8d8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8c2:	f7f9 fc85 	bl	80041d0 <HAL_GetTick>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d901      	bls.n	800a8d8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	e14c      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a8d8:	4b6a      	ldr	r3, [pc, #424]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a8da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8dc:	f003 0302 	and.w	r3, r3, #2
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d0ee      	beq.n	800a8c2 <HAL_RCC_OscConfig+0x5a2>
 800a8e4:	e014      	b.n	800a910 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8e6:	f7f9 fc73 	bl	80041d0 <HAL_GetTick>
 800a8ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a8ec:	e00a      	b.n	800a904 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8ee:	f7f9 fc6f 	bl	80041d0 <HAL_GetTick>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d901      	bls.n	800a904 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	e136      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a904:	4b5f      	ldr	r3, [pc, #380]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a908:	f003 0302 	and.w	r3, r3, #2
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1ee      	bne.n	800a8ee <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a914:	2b00      	cmp	r3, #0
 800a916:	f000 812b 	beq.w	800ab70 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a91a:	4b5a      	ldr	r3, [pc, #360]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a922:	2b18      	cmp	r3, #24
 800a924:	f000 80bb 	beq.w	800aa9e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	f040 8095 	bne.w	800aa5c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a932:	4b54      	ldr	r3, [pc, #336]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a53      	ldr	r2, [pc, #332]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a938:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a93c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a93e:	f7f9 fc47 	bl	80041d0 <HAL_GetTick>
 800a942:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a944:	e008      	b.n	800a958 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a946:	f7f9 fc43 	bl	80041d0 <HAL_GetTick>
 800a94a:	4602      	mov	r2, r0
 800a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	2b02      	cmp	r3, #2
 800a952:	d901      	bls.n	800a958 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800a954:	2303      	movs	r3, #3
 800a956:	e10c      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a958:	4b4a      	ldr	r3, [pc, #296]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1f0      	bne.n	800a946 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a964:	4b47      	ldr	r3, [pc, #284]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a968:	4b47      	ldr	r3, [pc, #284]	; (800aa88 <HAL_RCC_OscConfig+0x768>)
 800a96a:	4013      	ands	r3, r2
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a974:	0112      	lsls	r2, r2, #4
 800a976:	430a      	orrs	r2, r1
 800a978:	4942      	ldr	r1, [pc, #264]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a97a:	4313      	orrs	r3, r2
 800a97c:	628b      	str	r3, [r1, #40]	; 0x28
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a982:	3b01      	subs	r3, #1
 800a984:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a98c:	3b01      	subs	r3, #1
 800a98e:	025b      	lsls	r3, r3, #9
 800a990:	b29b      	uxth	r3, r3
 800a992:	431a      	orrs	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a998:	3b01      	subs	r3, #1
 800a99a:	041b      	lsls	r3, r3, #16
 800a99c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a9a0:	431a      	orrs	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	061b      	lsls	r3, r3, #24
 800a9aa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a9ae:	4935      	ldr	r1, [pc, #212]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a9b4:	4b33      	ldr	r3, [pc, #204]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b8:	4a32      	ldr	r2, [pc, #200]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a9ba:	f023 0301 	bic.w	r3, r3, #1
 800a9be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a9c0:	4b30      	ldr	r3, [pc, #192]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a9c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9c4:	4b31      	ldr	r3, [pc, #196]	; (800aa8c <HAL_RCC_OscConfig+0x76c>)
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a9cc:	00d2      	lsls	r2, r2, #3
 800a9ce:	492d      	ldr	r1, [pc, #180]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a9d4:	4b2b      	ldr	r3, [pc, #172]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d8:	f023 020c 	bic.w	r2, r3, #12
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e0:	4928      	ldr	r1, [pc, #160]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a9e6:	4b27      	ldr	r3, [pc, #156]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ea:	f023 0202 	bic.w	r2, r3, #2
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f2:	4924      	ldr	r1, [pc, #144]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a9f8:	4b22      	ldr	r3, [pc, #136]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	4a21      	ldr	r2, [pc, #132]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800a9fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa04:	4b1f      	ldr	r3, [pc, #124]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800aa06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa08:	4a1e      	ldr	r2, [pc, #120]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800aa0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800aa10:	4b1c      	ldr	r3, [pc, #112]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800aa12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa14:	4a1b      	ldr	r2, [pc, #108]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800aa16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800aa1c:	4b19      	ldr	r3, [pc, #100]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800aa1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa20:	4a18      	ldr	r2, [pc, #96]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800aa22:	f043 0301 	orr.w	r3, r3, #1
 800aa26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa28:	4b16      	ldr	r3, [pc, #88]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a15      	ldr	r2, [pc, #84]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800aa2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa34:	f7f9 fbcc 	bl	80041d0 <HAL_GetTick>
 800aa38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa3a:	e008      	b.n	800aa4e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa3c:	f7f9 fbc8 	bl	80041d0 <HAL_GetTick>
 800aa40:	4602      	mov	r2, r0
 800aa42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa44:	1ad3      	subs	r3, r2, r3
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	d901      	bls.n	800aa4e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	e091      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa4e:	4b0d      	ldr	r3, [pc, #52]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d0f0      	beq.n	800aa3c <HAL_RCC_OscConfig+0x71c>
 800aa5a:	e089      	b.n	800ab70 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa5c:	4b09      	ldr	r3, [pc, #36]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a08      	ldr	r2, [pc, #32]	; (800aa84 <HAL_RCC_OscConfig+0x764>)
 800aa62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa68:	f7f9 fbb2 	bl	80041d0 <HAL_GetTick>
 800aa6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa6e:	e00f      	b.n	800aa90 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa70:	f7f9 fbae 	bl	80041d0 <HAL_GetTick>
 800aa74:	4602      	mov	r2, r0
 800aa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d908      	bls.n	800aa90 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	e077      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
 800aa82:	bf00      	nop
 800aa84:	58024400 	.word	0x58024400
 800aa88:	fffffc0c 	.word	0xfffffc0c
 800aa8c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa90:	4b3a      	ldr	r3, [pc, #232]	; (800ab7c <HAL_RCC_OscConfig+0x85c>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1e9      	bne.n	800aa70 <HAL_RCC_OscConfig+0x750>
 800aa9c:	e068      	b.n	800ab70 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800aa9e:	4b37      	ldr	r3, [pc, #220]	; (800ab7c <HAL_RCC_OscConfig+0x85c>)
 800aaa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aaa4:	4b35      	ldr	r3, [pc, #212]	; (800ab7c <HAL_RCC_OscConfig+0x85c>)
 800aaa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaa8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d031      	beq.n	800ab16 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	f003 0203 	and.w	r2, r3, #3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d12a      	bne.n	800ab16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	091b      	lsrs	r3, r3, #4
 800aac4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aacc:	429a      	cmp	r2, r3
 800aace:	d122      	bne.n	800ab16 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aada:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aadc:	429a      	cmp	r2, r3
 800aade:	d11a      	bne.n	800ab16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	0a5b      	lsrs	r3, r3, #9
 800aae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaec:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d111      	bne.n	800ab16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	0c1b      	lsrs	r3, r3, #16
 800aaf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d108      	bne.n	800ab16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	0e1b      	lsrs	r3, r3, #24
 800ab08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d001      	beq.n	800ab1a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800ab16:	2301      	movs	r3, #1
 800ab18:	e02b      	b.n	800ab72 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ab1a:	4b18      	ldr	r3, [pc, #96]	; (800ab7c <HAL_RCC_OscConfig+0x85c>)
 800ab1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab1e:	08db      	lsrs	r3, r3, #3
 800ab20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab24:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab2a:	693a      	ldr	r2, [r7, #16]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d01f      	beq.n	800ab70 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ab30:	4b12      	ldr	r3, [pc, #72]	; (800ab7c <HAL_RCC_OscConfig+0x85c>)
 800ab32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab34:	4a11      	ldr	r2, [pc, #68]	; (800ab7c <HAL_RCC_OscConfig+0x85c>)
 800ab36:	f023 0301 	bic.w	r3, r3, #1
 800ab3a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ab3c:	f7f9 fb48 	bl	80041d0 <HAL_GetTick>
 800ab40:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ab42:	bf00      	nop
 800ab44:	f7f9 fb44 	bl	80041d0 <HAL_GetTick>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d0f9      	beq.n	800ab44 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ab50:	4b0a      	ldr	r3, [pc, #40]	; (800ab7c <HAL_RCC_OscConfig+0x85c>)
 800ab52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab54:	4b0a      	ldr	r3, [pc, #40]	; (800ab80 <HAL_RCC_OscConfig+0x860>)
 800ab56:	4013      	ands	r3, r2
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ab5c:	00d2      	lsls	r2, r2, #3
 800ab5e:	4907      	ldr	r1, [pc, #28]	; (800ab7c <HAL_RCC_OscConfig+0x85c>)
 800ab60:	4313      	orrs	r3, r2
 800ab62:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ab64:	4b05      	ldr	r3, [pc, #20]	; (800ab7c <HAL_RCC_OscConfig+0x85c>)
 800ab66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab68:	4a04      	ldr	r2, [pc, #16]	; (800ab7c <HAL_RCC_OscConfig+0x85c>)
 800ab6a:	f043 0301 	orr.w	r3, r3, #1
 800ab6e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3730      	adds	r7, #48	; 0x30
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	58024400 	.word	0x58024400
 800ab80:	ffff0007 	.word	0xffff0007

0800ab84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	e19c      	b.n	800aed2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ab98:	4b8a      	ldr	r3, [pc, #552]	; (800adc4 <HAL_RCC_ClockConfig+0x240>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 030f 	and.w	r3, r3, #15
 800aba0:	683a      	ldr	r2, [r7, #0]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d910      	bls.n	800abc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aba6:	4b87      	ldr	r3, [pc, #540]	; (800adc4 <HAL_RCC_ClockConfig+0x240>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f023 020f 	bic.w	r2, r3, #15
 800abae:	4985      	ldr	r1, [pc, #532]	; (800adc4 <HAL_RCC_ClockConfig+0x240>)
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800abb6:	4b83      	ldr	r3, [pc, #524]	; (800adc4 <HAL_RCC_ClockConfig+0x240>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 030f 	and.w	r3, r3, #15
 800abbe:	683a      	ldr	r2, [r7, #0]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d001      	beq.n	800abc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e184      	b.n	800aed2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f003 0304 	and.w	r3, r3, #4
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d010      	beq.n	800abf6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	691a      	ldr	r2, [r3, #16]
 800abd8:	4b7b      	ldr	r3, [pc, #492]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800abda:	699b      	ldr	r3, [r3, #24]
 800abdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d908      	bls.n	800abf6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800abe4:	4b78      	ldr	r3, [pc, #480]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	691b      	ldr	r3, [r3, #16]
 800abf0:	4975      	ldr	r1, [pc, #468]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800abf2:	4313      	orrs	r3, r2
 800abf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f003 0308 	and.w	r3, r3, #8
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d010      	beq.n	800ac24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	695a      	ldr	r2, [r3, #20]
 800ac06:	4b70      	ldr	r3, [pc, #448]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ac08:	69db      	ldr	r3, [r3, #28]
 800ac0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d908      	bls.n	800ac24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ac12:	4b6d      	ldr	r3, [pc, #436]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ac14:	69db      	ldr	r3, [r3, #28]
 800ac16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	695b      	ldr	r3, [r3, #20]
 800ac1e:	496a      	ldr	r1, [pc, #424]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ac20:	4313      	orrs	r3, r2
 800ac22:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f003 0310 	and.w	r3, r3, #16
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d010      	beq.n	800ac52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	699a      	ldr	r2, [r3, #24]
 800ac34:	4b64      	ldr	r3, [pc, #400]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ac36:	69db      	ldr	r3, [r3, #28]
 800ac38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d908      	bls.n	800ac52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ac40:	4b61      	ldr	r3, [pc, #388]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ac42:	69db      	ldr	r3, [r3, #28]
 800ac44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	495e      	ldr	r1, [pc, #376]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f003 0320 	and.w	r3, r3, #32
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d010      	beq.n	800ac80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	69da      	ldr	r2, [r3, #28]
 800ac62:	4b59      	ldr	r3, [pc, #356]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d908      	bls.n	800ac80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ac6e:	4b56      	ldr	r3, [pc, #344]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ac70:	6a1b      	ldr	r3, [r3, #32]
 800ac72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	69db      	ldr	r3, [r3, #28]
 800ac7a:	4953      	ldr	r1, [pc, #332]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 0302 	and.w	r3, r3, #2
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d010      	beq.n	800acae <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	68da      	ldr	r2, [r3, #12]
 800ac90:	4b4d      	ldr	r3, [pc, #308]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ac92:	699b      	ldr	r3, [r3, #24]
 800ac94:	f003 030f 	and.w	r3, r3, #15
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d908      	bls.n	800acae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac9c:	4b4a      	ldr	r3, [pc, #296]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ac9e:	699b      	ldr	r3, [r3, #24]
 800aca0:	f023 020f 	bic.w	r2, r3, #15
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	4947      	ldr	r1, [pc, #284]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800acaa:	4313      	orrs	r3, r2
 800acac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f003 0301 	and.w	r3, r3, #1
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d055      	beq.n	800ad66 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800acba:	4b43      	ldr	r3, [pc, #268]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800acbc:	699b      	ldr	r3, [r3, #24]
 800acbe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	4940      	ldr	r1, [pc, #256]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800acc8:	4313      	orrs	r3, r2
 800acca:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	d107      	bne.n	800ace4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800acd4:	4b3c      	ldr	r3, [pc, #240]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d121      	bne.n	800ad24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
 800ace2:	e0f6      	b.n	800aed2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	2b03      	cmp	r3, #3
 800acea:	d107      	bne.n	800acfc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800acec:	4b36      	ldr	r3, [pc, #216]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d115      	bne.n	800ad24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e0ea      	b.n	800aed2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d107      	bne.n	800ad14 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad04:	4b30      	ldr	r3, [pc, #192]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d109      	bne.n	800ad24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	e0de      	b.n	800aed2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad14:	4b2c      	ldr	r3, [pc, #176]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0304 	and.w	r3, r3, #4
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d101      	bne.n	800ad24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ad20:	2301      	movs	r3, #1
 800ad22:	e0d6      	b.n	800aed2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ad24:	4b28      	ldr	r3, [pc, #160]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ad26:	691b      	ldr	r3, [r3, #16]
 800ad28:	f023 0207 	bic.w	r2, r3, #7
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	4925      	ldr	r1, [pc, #148]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ad32:	4313      	orrs	r3, r2
 800ad34:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad36:	f7f9 fa4b 	bl	80041d0 <HAL_GetTick>
 800ad3a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad3c:	e00a      	b.n	800ad54 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad3e:	f7f9 fa47 	bl	80041d0 <HAL_GetTick>
 800ad42:	4602      	mov	r2, r0
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	1ad3      	subs	r3, r2, r3
 800ad48:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d901      	bls.n	800ad54 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ad50:	2303      	movs	r3, #3
 800ad52:	e0be      	b.n	800aed2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad54:	4b1c      	ldr	r3, [pc, #112]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	00db      	lsls	r3, r3, #3
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d1eb      	bne.n	800ad3e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 0302 	and.w	r3, r3, #2
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d010      	beq.n	800ad94 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	68da      	ldr	r2, [r3, #12]
 800ad76:	4b14      	ldr	r3, [pc, #80]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ad78:	699b      	ldr	r3, [r3, #24]
 800ad7a:	f003 030f 	and.w	r3, r3, #15
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d208      	bcs.n	800ad94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad82:	4b11      	ldr	r3, [pc, #68]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ad84:	699b      	ldr	r3, [r3, #24]
 800ad86:	f023 020f 	bic.w	r2, r3, #15
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	490e      	ldr	r1, [pc, #56]	; (800adc8 <HAL_RCC_ClockConfig+0x244>)
 800ad90:	4313      	orrs	r3, r2
 800ad92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ad94:	4b0b      	ldr	r3, [pc, #44]	; (800adc4 <HAL_RCC_ClockConfig+0x240>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 030f 	and.w	r3, r3, #15
 800ad9c:	683a      	ldr	r2, [r7, #0]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d214      	bcs.n	800adcc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ada2:	4b08      	ldr	r3, [pc, #32]	; (800adc4 <HAL_RCC_ClockConfig+0x240>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f023 020f 	bic.w	r2, r3, #15
 800adaa:	4906      	ldr	r1, [pc, #24]	; (800adc4 <HAL_RCC_ClockConfig+0x240>)
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	4313      	orrs	r3, r2
 800adb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800adb2:	4b04      	ldr	r3, [pc, #16]	; (800adc4 <HAL_RCC_ClockConfig+0x240>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 030f 	and.w	r3, r3, #15
 800adba:	683a      	ldr	r2, [r7, #0]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d005      	beq.n	800adcc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800adc0:	2301      	movs	r3, #1
 800adc2:	e086      	b.n	800aed2 <HAL_RCC_ClockConfig+0x34e>
 800adc4:	52002000 	.word	0x52002000
 800adc8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f003 0304 	and.w	r3, r3, #4
 800add4:	2b00      	cmp	r3, #0
 800add6:	d010      	beq.n	800adfa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	691a      	ldr	r2, [r3, #16]
 800addc:	4b3f      	ldr	r3, [pc, #252]	; (800aedc <HAL_RCC_ClockConfig+0x358>)
 800adde:	699b      	ldr	r3, [r3, #24]
 800ade0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d208      	bcs.n	800adfa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ade8:	4b3c      	ldr	r3, [pc, #240]	; (800aedc <HAL_RCC_ClockConfig+0x358>)
 800adea:	699b      	ldr	r3, [r3, #24]
 800adec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	691b      	ldr	r3, [r3, #16]
 800adf4:	4939      	ldr	r1, [pc, #228]	; (800aedc <HAL_RCC_ClockConfig+0x358>)
 800adf6:	4313      	orrs	r3, r2
 800adf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 0308 	and.w	r3, r3, #8
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d010      	beq.n	800ae28 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	695a      	ldr	r2, [r3, #20]
 800ae0a:	4b34      	ldr	r3, [pc, #208]	; (800aedc <HAL_RCC_ClockConfig+0x358>)
 800ae0c:	69db      	ldr	r3, [r3, #28]
 800ae0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d208      	bcs.n	800ae28 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ae16:	4b31      	ldr	r3, [pc, #196]	; (800aedc <HAL_RCC_ClockConfig+0x358>)
 800ae18:	69db      	ldr	r3, [r3, #28]
 800ae1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	695b      	ldr	r3, [r3, #20]
 800ae22:	492e      	ldr	r1, [pc, #184]	; (800aedc <HAL_RCC_ClockConfig+0x358>)
 800ae24:	4313      	orrs	r3, r2
 800ae26:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f003 0310 	and.w	r3, r3, #16
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d010      	beq.n	800ae56 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	699a      	ldr	r2, [r3, #24]
 800ae38:	4b28      	ldr	r3, [pc, #160]	; (800aedc <HAL_RCC_ClockConfig+0x358>)
 800ae3a:	69db      	ldr	r3, [r3, #28]
 800ae3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d208      	bcs.n	800ae56 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ae44:	4b25      	ldr	r3, [pc, #148]	; (800aedc <HAL_RCC_ClockConfig+0x358>)
 800ae46:	69db      	ldr	r3, [r3, #28]
 800ae48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	699b      	ldr	r3, [r3, #24]
 800ae50:	4922      	ldr	r1, [pc, #136]	; (800aedc <HAL_RCC_ClockConfig+0x358>)
 800ae52:	4313      	orrs	r3, r2
 800ae54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f003 0320 	and.w	r3, r3, #32
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d010      	beq.n	800ae84 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	69da      	ldr	r2, [r3, #28]
 800ae66:	4b1d      	ldr	r3, [pc, #116]	; (800aedc <HAL_RCC_ClockConfig+0x358>)
 800ae68:	6a1b      	ldr	r3, [r3, #32]
 800ae6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d208      	bcs.n	800ae84 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ae72:	4b1a      	ldr	r3, [pc, #104]	; (800aedc <HAL_RCC_ClockConfig+0x358>)
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	69db      	ldr	r3, [r3, #28]
 800ae7e:	4917      	ldr	r1, [pc, #92]	; (800aedc <HAL_RCC_ClockConfig+0x358>)
 800ae80:	4313      	orrs	r3, r2
 800ae82:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800ae84:	f000 f89e 	bl	800afc4 <HAL_RCC_GetSysClockFreq>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	4b14      	ldr	r3, [pc, #80]	; (800aedc <HAL_RCC_ClockConfig+0x358>)
 800ae8c:	699b      	ldr	r3, [r3, #24]
 800ae8e:	0a1b      	lsrs	r3, r3, #8
 800ae90:	f003 030f 	and.w	r3, r3, #15
 800ae94:	4912      	ldr	r1, [pc, #72]	; (800aee0 <HAL_RCC_ClockConfig+0x35c>)
 800ae96:	5ccb      	ldrb	r3, [r1, r3]
 800ae98:	f003 031f 	and.w	r3, r3, #31
 800ae9c:	fa22 f303 	lsr.w	r3, r2, r3
 800aea0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800aea2:	4b0e      	ldr	r3, [pc, #56]	; (800aedc <HAL_RCC_ClockConfig+0x358>)
 800aea4:	699b      	ldr	r3, [r3, #24]
 800aea6:	f003 030f 	and.w	r3, r3, #15
 800aeaa:	4a0d      	ldr	r2, [pc, #52]	; (800aee0 <HAL_RCC_ClockConfig+0x35c>)
 800aeac:	5cd3      	ldrb	r3, [r2, r3]
 800aeae:	f003 031f 	and.w	r3, r3, #31
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	fa22 f303 	lsr.w	r3, r2, r3
 800aeb8:	4a0a      	ldr	r2, [pc, #40]	; (800aee4 <HAL_RCC_ClockConfig+0x360>)
 800aeba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aebc:	4a0a      	ldr	r2, [pc, #40]	; (800aee8 <HAL_RCC_ClockConfig+0x364>)
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800aec2:	4b0a      	ldr	r3, [pc, #40]	; (800aeec <HAL_RCC_ClockConfig+0x368>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7f9 f938 	bl	800413c <HAL_InitTick>
 800aecc:	4603      	mov	r3, r0
 800aece:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800aed0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3718      	adds	r7, #24
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	58024400 	.word	0x58024400
 800aee0:	0801077c 	.word	0x0801077c
 800aee4:	24000048 	.word	0x24000048
 800aee8:	24000044 	.word	0x24000044
 800aeec:	2400004c 	.word	0x2400004c

0800aef0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b08c      	sub	sp, #48	; 0x30
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d12a      	bne.n	800af58 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800af02:	4b2d      	ldr	r3, [pc, #180]	; (800afb8 <HAL_RCC_MCOConfig+0xc8>)
 800af04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800af08:	4a2b      	ldr	r2, [pc, #172]	; (800afb8 <HAL_RCC_MCOConfig+0xc8>)
 800af0a:	f043 0301 	orr.w	r3, r3, #1
 800af0e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800af12:	4b29      	ldr	r3, [pc, #164]	; (800afb8 <HAL_RCC_MCOConfig+0xc8>)
 800af14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800af18:	f003 0301 	and.w	r3, r3, #1
 800af1c:	61bb      	str	r3, [r7, #24]
 800af1e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800af20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af26:	2302      	movs	r3, #2
 800af28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af2a:	2303      	movs	r3, #3
 800af2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af2e:	2300      	movs	r3, #0
 800af30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800af32:	2300      	movs	r3, #0
 800af34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800af36:	f107 031c 	add.w	r3, r7, #28
 800af3a:	4619      	mov	r1, r3
 800af3c:	481f      	ldr	r0, [pc, #124]	; (800afbc <HAL_RCC_MCOConfig+0xcc>)
 800af3e:	f7fd fcc1 	bl	80088c4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800af42:	4b1d      	ldr	r3, [pc, #116]	; (800afb8 <HAL_RCC_MCOConfig+0xc8>)
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800af4a:	68b9      	ldr	r1, [r7, #8]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	430b      	orrs	r3, r1
 800af50:	4919      	ldr	r1, [pc, #100]	; (800afb8 <HAL_RCC_MCOConfig+0xc8>)
 800af52:	4313      	orrs	r3, r2
 800af54:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800af56:	e02a      	b.n	800afae <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800af58:	4b17      	ldr	r3, [pc, #92]	; (800afb8 <HAL_RCC_MCOConfig+0xc8>)
 800af5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800af5e:	4a16      	ldr	r2, [pc, #88]	; (800afb8 <HAL_RCC_MCOConfig+0xc8>)
 800af60:	f043 0304 	orr.w	r3, r3, #4
 800af64:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800af68:	4b13      	ldr	r3, [pc, #76]	; (800afb8 <HAL_RCC_MCOConfig+0xc8>)
 800af6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800af6e:	f003 0304 	and.w	r3, r3, #4
 800af72:	617b      	str	r3, [r7, #20]
 800af74:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800af76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af7c:	2302      	movs	r3, #2
 800af7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af80:	2303      	movs	r3, #3
 800af82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af84:	2300      	movs	r3, #0
 800af86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800af88:	2300      	movs	r3, #0
 800af8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800af8c:	f107 031c 	add.w	r3, r7, #28
 800af90:	4619      	mov	r1, r3
 800af92:	480b      	ldr	r0, [pc, #44]	; (800afc0 <HAL_RCC_MCOConfig+0xd0>)
 800af94:	f7fd fc96 	bl	80088c4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800af98:	4b07      	ldr	r3, [pc, #28]	; (800afb8 <HAL_RCC_MCOConfig+0xc8>)
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	01d9      	lsls	r1, r3, #7
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	430b      	orrs	r3, r1
 800afa8:	4903      	ldr	r1, [pc, #12]	; (800afb8 <HAL_RCC_MCOConfig+0xc8>)
 800afaa:	4313      	orrs	r3, r2
 800afac:	610b      	str	r3, [r1, #16]
}
 800afae:	bf00      	nop
 800afb0:	3730      	adds	r7, #48	; 0x30
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	58024400 	.word	0x58024400
 800afbc:	58020000 	.word	0x58020000
 800afc0:	58020800 	.word	0x58020800

0800afc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b089      	sub	sp, #36	; 0x24
 800afc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800afca:	4bb3      	ldr	r3, [pc, #716]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800afd2:	2b18      	cmp	r3, #24
 800afd4:	f200 8155 	bhi.w	800b282 <HAL_RCC_GetSysClockFreq+0x2be>
 800afd8:	a201      	add	r2, pc, #4	; (adr r2, 800afe0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800afda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afde:	bf00      	nop
 800afe0:	0800b045 	.word	0x0800b045
 800afe4:	0800b283 	.word	0x0800b283
 800afe8:	0800b283 	.word	0x0800b283
 800afec:	0800b283 	.word	0x0800b283
 800aff0:	0800b283 	.word	0x0800b283
 800aff4:	0800b283 	.word	0x0800b283
 800aff8:	0800b283 	.word	0x0800b283
 800affc:	0800b283 	.word	0x0800b283
 800b000:	0800b06b 	.word	0x0800b06b
 800b004:	0800b283 	.word	0x0800b283
 800b008:	0800b283 	.word	0x0800b283
 800b00c:	0800b283 	.word	0x0800b283
 800b010:	0800b283 	.word	0x0800b283
 800b014:	0800b283 	.word	0x0800b283
 800b018:	0800b283 	.word	0x0800b283
 800b01c:	0800b283 	.word	0x0800b283
 800b020:	0800b071 	.word	0x0800b071
 800b024:	0800b283 	.word	0x0800b283
 800b028:	0800b283 	.word	0x0800b283
 800b02c:	0800b283 	.word	0x0800b283
 800b030:	0800b283 	.word	0x0800b283
 800b034:	0800b283 	.word	0x0800b283
 800b038:	0800b283 	.word	0x0800b283
 800b03c:	0800b283 	.word	0x0800b283
 800b040:	0800b077 	.word	0x0800b077
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b044:	4b94      	ldr	r3, [pc, #592]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 0320 	and.w	r3, r3, #32
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d009      	beq.n	800b064 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b050:	4b91      	ldr	r3, [pc, #580]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	08db      	lsrs	r3, r3, #3
 800b056:	f003 0303 	and.w	r3, r3, #3
 800b05a:	4a90      	ldr	r2, [pc, #576]	; (800b29c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b05c:	fa22 f303 	lsr.w	r3, r2, r3
 800b060:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b062:	e111      	b.n	800b288 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b064:	4b8d      	ldr	r3, [pc, #564]	; (800b29c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b066:	61bb      	str	r3, [r7, #24]
      break;
 800b068:	e10e      	b.n	800b288 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b06a:	4b8d      	ldr	r3, [pc, #564]	; (800b2a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b06c:	61bb      	str	r3, [r7, #24]
      break;
 800b06e:	e10b      	b.n	800b288 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b070:	4b8c      	ldr	r3, [pc, #560]	; (800b2a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b072:	61bb      	str	r3, [r7, #24]
      break;
 800b074:	e108      	b.n	800b288 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b076:	4b88      	ldr	r3, [pc, #544]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07a:	f003 0303 	and.w	r3, r3, #3
 800b07e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b080:	4b85      	ldr	r3, [pc, #532]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b084:	091b      	lsrs	r3, r3, #4
 800b086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b08a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b08c:	4b82      	ldr	r3, [pc, #520]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b090:	f003 0301 	and.w	r3, r3, #1
 800b094:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b096:	4b80      	ldr	r3, [pc, #512]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b09a:	08db      	lsrs	r3, r3, #3
 800b09c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	fb02 f303 	mul.w	r3, r2, r3
 800b0a6:	ee07 3a90 	vmov	s15, r3
 800b0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f000 80e1 	beq.w	800b27c <HAL_RCC_GetSysClockFreq+0x2b8>
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	f000 8083 	beq.w	800b1c8 <HAL_RCC_GetSysClockFreq+0x204>
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2b02      	cmp	r3, #2
 800b0c6:	f200 80a1 	bhi.w	800b20c <HAL_RCC_GetSysClockFreq+0x248>
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d003      	beq.n	800b0d8 <HAL_RCC_GetSysClockFreq+0x114>
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d056      	beq.n	800b184 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b0d6:	e099      	b.n	800b20c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0d8:	4b6f      	ldr	r3, [pc, #444]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f003 0320 	and.w	r3, r3, #32
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d02d      	beq.n	800b140 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0e4:	4b6c      	ldr	r3, [pc, #432]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	08db      	lsrs	r3, r3, #3
 800b0ea:	f003 0303 	and.w	r3, r3, #3
 800b0ee:	4a6b      	ldr	r2, [pc, #428]	; (800b29c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b0f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b0f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	ee07 3a90 	vmov	s15, r3
 800b0fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	ee07 3a90 	vmov	s15, r3
 800b106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b10e:	4b62      	ldr	r3, [pc, #392]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b116:	ee07 3a90 	vmov	s15, r3
 800b11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b11e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b122:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b2a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b12e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b13a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b13e:	e087      	b.n	800b250 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	ee07 3a90 	vmov	s15, r3
 800b146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b14a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b2ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800b14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b152:	4b51      	ldr	r3, [pc, #324]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b15a:	ee07 3a90 	vmov	s15, r3
 800b15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b162:	ed97 6a02 	vldr	s12, [r7, #8]
 800b166:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b2a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b17e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b182:	e065      	b.n	800b250 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	ee07 3a90 	vmov	s15, r3
 800b18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b18e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b2b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b196:	4b40      	ldr	r3, [pc, #256]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b19e:	ee07 3a90 	vmov	s15, r3
 800b1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b2a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b1ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b1c6:	e043      	b.n	800b250 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	ee07 3a90 	vmov	s15, r3
 800b1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b2b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b1d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1da:	4b2f      	ldr	r3, [pc, #188]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1e2:	ee07 3a90 	vmov	s15, r3
 800b1e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b2a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b1f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b202:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b206:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b20a:	e021      	b.n	800b250 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	ee07 3a90 	vmov	s15, r3
 800b212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b216:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b2b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b21a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b21e:	4b1e      	ldr	r3, [pc, #120]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b226:	ee07 3a90 	vmov	s15, r3
 800b22a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b22e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b232:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b2a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b23a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b23e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b24a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b24e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b250:	4b11      	ldr	r3, [pc, #68]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b254:	0a5b      	lsrs	r3, r3, #9
 800b256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b25a:	3301      	adds	r3, #1
 800b25c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	ee07 3a90 	vmov	s15, r3
 800b264:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b268:	edd7 6a07 	vldr	s13, [r7, #28]
 800b26c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b274:	ee17 3a90 	vmov	r3, s15
 800b278:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b27a:	e005      	b.n	800b288 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b27c:	2300      	movs	r3, #0
 800b27e:	61bb      	str	r3, [r7, #24]
      break;
 800b280:	e002      	b.n	800b288 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b282:	4b07      	ldr	r3, [pc, #28]	; (800b2a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b284:	61bb      	str	r3, [r7, #24]
      break;
 800b286:	bf00      	nop
  }

  return sysclockfreq;
 800b288:	69bb      	ldr	r3, [r7, #24]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3724      	adds	r7, #36	; 0x24
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
 800b296:	bf00      	nop
 800b298:	58024400 	.word	0x58024400
 800b29c:	03d09000 	.word	0x03d09000
 800b2a0:	003d0900 	.word	0x003d0900
 800b2a4:	016e3600 	.word	0x016e3600
 800b2a8:	46000000 	.word	0x46000000
 800b2ac:	4c742400 	.word	0x4c742400
 800b2b0:	4a742400 	.word	0x4a742400
 800b2b4:	4bb71b00 	.word	0x4bb71b00

0800b2b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b2be:	f7ff fe81 	bl	800afc4 <HAL_RCC_GetSysClockFreq>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	4b10      	ldr	r3, [pc, #64]	; (800b308 <HAL_RCC_GetHCLKFreq+0x50>)
 800b2c6:	699b      	ldr	r3, [r3, #24]
 800b2c8:	0a1b      	lsrs	r3, r3, #8
 800b2ca:	f003 030f 	and.w	r3, r3, #15
 800b2ce:	490f      	ldr	r1, [pc, #60]	; (800b30c <HAL_RCC_GetHCLKFreq+0x54>)
 800b2d0:	5ccb      	ldrb	r3, [r1, r3]
 800b2d2:	f003 031f 	and.w	r3, r3, #31
 800b2d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b2da:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b2dc:	4b0a      	ldr	r3, [pc, #40]	; (800b308 <HAL_RCC_GetHCLKFreq+0x50>)
 800b2de:	699b      	ldr	r3, [r3, #24]
 800b2e0:	f003 030f 	and.w	r3, r3, #15
 800b2e4:	4a09      	ldr	r2, [pc, #36]	; (800b30c <HAL_RCC_GetHCLKFreq+0x54>)
 800b2e6:	5cd3      	ldrb	r3, [r2, r3]
 800b2e8:	f003 031f 	and.w	r3, r3, #31
 800b2ec:	687a      	ldr	r2, [r7, #4]
 800b2ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b2f2:	4a07      	ldr	r2, [pc, #28]	; (800b310 <HAL_RCC_GetHCLKFreq+0x58>)
 800b2f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b2f6:	4a07      	ldr	r2, [pc, #28]	; (800b314 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b2fc:	4b04      	ldr	r3, [pc, #16]	; (800b310 <HAL_RCC_GetHCLKFreq+0x58>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
}
 800b300:	4618      	mov	r0, r3
 800b302:	3708      	adds	r7, #8
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	58024400 	.word	0x58024400
 800b30c:	0801077c 	.word	0x0801077c
 800b310:	24000048 	.word	0x24000048
 800b314:	24000044 	.word	0x24000044

0800b318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b31c:	f7ff ffcc 	bl	800b2b8 <HAL_RCC_GetHCLKFreq>
 800b320:	4602      	mov	r2, r0
 800b322:	4b06      	ldr	r3, [pc, #24]	; (800b33c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b324:	69db      	ldr	r3, [r3, #28]
 800b326:	091b      	lsrs	r3, r3, #4
 800b328:	f003 0307 	and.w	r3, r3, #7
 800b32c:	4904      	ldr	r1, [pc, #16]	; (800b340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b32e:	5ccb      	ldrb	r3, [r1, r3]
 800b330:	f003 031f 	and.w	r3, r3, #31
 800b334:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b338:	4618      	mov	r0, r3
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	58024400 	.word	0x58024400
 800b340:	0801077c 	.word	0x0801077c

0800b344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b348:	f7ff ffb6 	bl	800b2b8 <HAL_RCC_GetHCLKFreq>
 800b34c:	4602      	mov	r2, r0
 800b34e:	4b06      	ldr	r3, [pc, #24]	; (800b368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b350:	69db      	ldr	r3, [r3, #28]
 800b352:	0a1b      	lsrs	r3, r3, #8
 800b354:	f003 0307 	and.w	r3, r3, #7
 800b358:	4904      	ldr	r1, [pc, #16]	; (800b36c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b35a:	5ccb      	ldrb	r3, [r1, r3]
 800b35c:	f003 031f 	and.w	r3, r3, #31
 800b360:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b364:	4618      	mov	r0, r3
 800b366:	bd80      	pop	{r7, pc}
 800b368:	58024400 	.word	0x58024400
 800b36c:	0801077c 	.word	0x0801077c

0800b370 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b374:	b0c8      	sub	sp, #288	; 0x120
 800b376:	af00      	add	r7, sp, #0
 800b378:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b37c:	2300      	movs	r3, #0
 800b37e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b382:	2300      	movs	r3, #0
 800b384:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b390:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b394:	2500      	movs	r5, #0
 800b396:	ea54 0305 	orrs.w	r3, r4, r5
 800b39a:	d049      	beq.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b39c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b3a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b3a6:	d02f      	beq.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b3a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b3ac:	d828      	bhi.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b3ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3b2:	d01a      	beq.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b3b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3b8:	d822      	bhi.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d003      	beq.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b3be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3c2:	d007      	beq.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b3c4:	e01c      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3c6:	4ba7      	ldr	r3, [pc, #668]	; (800b664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ca:	4aa6      	ldr	r2, [pc, #664]	; (800b664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b3d2:	e01a      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b3d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b3d8:	3308      	adds	r3, #8
 800b3da:	2102      	movs	r1, #2
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f001 fc43 	bl	800cc68 <RCCEx_PLL2_Config>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b3e8:	e00f      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b3ee:	3328      	adds	r3, #40	; 0x28
 800b3f0:	2102      	movs	r1, #2
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f001 fcea 	bl	800cdcc <RCCEx_PLL3_Config>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b3fe:	e004      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b400:	2301      	movs	r3, #1
 800b402:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b406:	e000      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b40a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d10a      	bne.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b412:	4b94      	ldr	r3, [pc, #592]	; (800b664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b416:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b41a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b41e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b420:	4a90      	ldr	r2, [pc, #576]	; (800b664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b422:	430b      	orrs	r3, r1
 800b424:	6513      	str	r3, [r2, #80]	; 0x50
 800b426:	e003      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b428:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b42c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b438:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b43c:	f04f 0900 	mov.w	r9, #0
 800b440:	ea58 0309 	orrs.w	r3, r8, r9
 800b444:	d047      	beq.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b44a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b44c:	2b04      	cmp	r3, #4
 800b44e:	d82a      	bhi.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b450:	a201      	add	r2, pc, #4	; (adr r2, 800b458 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b456:	bf00      	nop
 800b458:	0800b46d 	.word	0x0800b46d
 800b45c:	0800b47b 	.word	0x0800b47b
 800b460:	0800b491 	.word	0x0800b491
 800b464:	0800b4af 	.word	0x0800b4af
 800b468:	0800b4af 	.word	0x0800b4af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b46c:	4b7d      	ldr	r3, [pc, #500]	; (800b664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b470:	4a7c      	ldr	r2, [pc, #496]	; (800b664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b476:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b478:	e01a      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b47a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b47e:	3308      	adds	r3, #8
 800b480:	2100      	movs	r1, #0
 800b482:	4618      	mov	r0, r3
 800b484:	f001 fbf0 	bl	800cc68 <RCCEx_PLL2_Config>
 800b488:	4603      	mov	r3, r0
 800b48a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b48e:	e00f      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b494:	3328      	adds	r3, #40	; 0x28
 800b496:	2100      	movs	r1, #0
 800b498:	4618      	mov	r0, r3
 800b49a:	f001 fc97 	bl	800cdcc <RCCEx_PLL3_Config>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b4a4:	e004      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b4ac:	e000      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b4ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10a      	bne.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b4b8:	4b6a      	ldr	r3, [pc, #424]	; (800b664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4bc:	f023 0107 	bic.w	r1, r3, #7
 800b4c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4c6:	4a67      	ldr	r2, [pc, #412]	; (800b664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4c8:	430b      	orrs	r3, r1
 800b4ca:	6513      	str	r3, [r2, #80]	; 0x50
 800b4cc:	e003      	b.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b4d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b4d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4de:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b4e2:	f04f 0b00 	mov.w	fp, #0
 800b4e6:	ea5a 030b 	orrs.w	r3, sl, fp
 800b4ea:	d054      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b4ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4f2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b4f6:	d036      	beq.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b4f8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b4fc:	d82f      	bhi.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b4fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b502:	d032      	beq.n	800b56a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b508:	d829      	bhi.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b50a:	2bc0      	cmp	r3, #192	; 0xc0
 800b50c:	d02f      	beq.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b50e:	2bc0      	cmp	r3, #192	; 0xc0
 800b510:	d825      	bhi.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b512:	2b80      	cmp	r3, #128	; 0x80
 800b514:	d018      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b516:	2b80      	cmp	r3, #128	; 0x80
 800b518:	d821      	bhi.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d002      	beq.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b51e:	2b40      	cmp	r3, #64	; 0x40
 800b520:	d007      	beq.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b522:	e01c      	b.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b524:	4b4f      	ldr	r3, [pc, #316]	; (800b664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b528:	4a4e      	ldr	r2, [pc, #312]	; (800b664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b52a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b52e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b530:	e01e      	b.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b532:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b536:	3308      	adds	r3, #8
 800b538:	2100      	movs	r1, #0
 800b53a:	4618      	mov	r0, r3
 800b53c:	f001 fb94 	bl	800cc68 <RCCEx_PLL2_Config>
 800b540:	4603      	mov	r3, r0
 800b542:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b546:	e013      	b.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b548:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b54c:	3328      	adds	r3, #40	; 0x28
 800b54e:	2100      	movs	r1, #0
 800b550:	4618      	mov	r0, r3
 800b552:	f001 fc3b 	bl	800cdcc <RCCEx_PLL3_Config>
 800b556:	4603      	mov	r3, r0
 800b558:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b55c:	e008      	b.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b564:	e004      	b.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b566:	bf00      	nop
 800b568:	e002      	b.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b56a:	bf00      	nop
 800b56c:	e000      	b.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b56e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b570:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b574:	2b00      	cmp	r3, #0
 800b576:	d10a      	bne.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b578:	4b3a      	ldr	r3, [pc, #232]	; (800b664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b57a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b57c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b586:	4a37      	ldr	r2, [pc, #220]	; (800b664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b588:	430b      	orrs	r3, r1
 800b58a:	6513      	str	r3, [r2, #80]	; 0x50
 800b58c:	e003      	b.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b58e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b592:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b5a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b5ac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	d05c      	beq.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b5b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5bc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b5c0:	d03b      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b5c2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b5c6:	d834      	bhi.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b5c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5cc:	d037      	beq.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b5ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5d2:	d82e      	bhi.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b5d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b5d8:	d033      	beq.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b5da:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b5de:	d828      	bhi.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b5e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5e4:	d01a      	beq.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b5e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5ea:	d822      	bhi.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d003      	beq.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b5f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5f4:	d007      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b5f6:	e01c      	b.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5f8:	4b1a      	ldr	r3, [pc, #104]	; (800b664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fc:	4a19      	ldr	r2, [pc, #100]	; (800b664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b602:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b604:	e01e      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b60a:	3308      	adds	r3, #8
 800b60c:	2100      	movs	r1, #0
 800b60e:	4618      	mov	r0, r3
 800b610:	f001 fb2a 	bl	800cc68 <RCCEx_PLL2_Config>
 800b614:	4603      	mov	r3, r0
 800b616:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b61a:	e013      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b61c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b620:	3328      	adds	r3, #40	; 0x28
 800b622:	2100      	movs	r1, #0
 800b624:	4618      	mov	r0, r3
 800b626:	f001 fbd1 	bl	800cdcc <RCCEx_PLL3_Config>
 800b62a:	4603      	mov	r3, r0
 800b62c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b630:	e008      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b638:	e004      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b63a:	bf00      	nop
 800b63c:	e002      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b63e:	bf00      	nop
 800b640:	e000      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b642:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b644:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d10d      	bne.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b64c:	4b05      	ldr	r3, [pc, #20]	; (800b664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b64e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b650:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800b654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b65a:	4a02      	ldr	r2, [pc, #8]	; (800b664 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b65c:	430b      	orrs	r3, r1
 800b65e:	6513      	str	r3, [r2, #80]	; 0x50
 800b660:	e006      	b.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b662:	bf00      	nop
 800b664:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b668:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b66c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b678:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b67c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b680:	2300      	movs	r3, #0
 800b682:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b686:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b68a:	460b      	mov	r3, r1
 800b68c:	4313      	orrs	r3, r2
 800b68e:	d03a      	beq.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b696:	2b30      	cmp	r3, #48	; 0x30
 800b698:	d01f      	beq.n	800b6da <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b69a:	2b30      	cmp	r3, #48	; 0x30
 800b69c:	d819      	bhi.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b69e:	2b20      	cmp	r3, #32
 800b6a0:	d00c      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b6a2:	2b20      	cmp	r3, #32
 800b6a4:	d815      	bhi.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d019      	beq.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b6aa:	2b10      	cmp	r3, #16
 800b6ac:	d111      	bne.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6ae:	4bae      	ldr	r3, [pc, #696]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b2:	4aad      	ldr	r2, [pc, #692]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b6ba:	e011      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6c0:	3308      	adds	r3, #8
 800b6c2:	2102      	movs	r1, #2
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f001 facf 	bl	800cc68 <RCCEx_PLL2_Config>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b6d0:	e006      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b6d8:	e002      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b6da:	bf00      	nop
 800b6dc:	e000      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b6de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10a      	bne.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b6e8:	4b9f      	ldr	r3, [pc, #636]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6ec:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b6f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6f6:	4a9c      	ldr	r2, [pc, #624]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6f8:	430b      	orrs	r3, r1
 800b6fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b6fc:	e003      	b.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b702:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b712:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b716:	2300      	movs	r3, #0
 800b718:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b71c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b720:	460b      	mov	r3, r1
 800b722:	4313      	orrs	r3, r2
 800b724:	d051      	beq.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b72a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b72c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b730:	d035      	beq.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b736:	d82e      	bhi.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b738:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b73c:	d031      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b73e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b742:	d828      	bhi.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b748:	d01a      	beq.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b74a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b74e:	d822      	bhi.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b750:	2b00      	cmp	r3, #0
 800b752:	d003      	beq.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800b754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b758:	d007      	beq.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800b75a:	e01c      	b.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b75c:	4b82      	ldr	r3, [pc, #520]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b760:	4a81      	ldr	r2, [pc, #516]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b766:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b768:	e01c      	b.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b76a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b76e:	3308      	adds	r3, #8
 800b770:	2100      	movs	r1, #0
 800b772:	4618      	mov	r0, r3
 800b774:	f001 fa78 	bl	800cc68 <RCCEx_PLL2_Config>
 800b778:	4603      	mov	r3, r0
 800b77a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b77e:	e011      	b.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b780:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b784:	3328      	adds	r3, #40	; 0x28
 800b786:	2100      	movs	r1, #0
 800b788:	4618      	mov	r0, r3
 800b78a:	f001 fb1f 	bl	800cdcc <RCCEx_PLL3_Config>
 800b78e:	4603      	mov	r3, r0
 800b790:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b794:	e006      	b.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b796:	2301      	movs	r3, #1
 800b798:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b79c:	e002      	b.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b79e:	bf00      	nop
 800b7a0:	e000      	b.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b7a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10a      	bne.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b7ac:	4b6e      	ldr	r3, [pc, #440]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7b0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b7b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7ba:	4a6b      	ldr	r2, [pc, #428]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7bc:	430b      	orrs	r3, r1
 800b7be:	6513      	str	r3, [r2, #80]	; 0x50
 800b7c0:	e003      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b7ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b7d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b7da:	2300      	movs	r3, #0
 800b7dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b7e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	d053      	beq.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b7ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7f4:	d033      	beq.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800b7f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7fa:	d82c      	bhi.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b7fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b800:	d02f      	beq.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800b802:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b806:	d826      	bhi.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b808:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b80c:	d02b      	beq.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b80e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b812:	d820      	bhi.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b818:	d012      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b81a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b81e:	d81a      	bhi.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b820:	2b00      	cmp	r3, #0
 800b822:	d022      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800b824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b828:	d115      	bne.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b82a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b82e:	3308      	adds	r3, #8
 800b830:	2101      	movs	r1, #1
 800b832:	4618      	mov	r0, r3
 800b834:	f001 fa18 	bl	800cc68 <RCCEx_PLL2_Config>
 800b838:	4603      	mov	r3, r0
 800b83a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b83e:	e015      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b844:	3328      	adds	r3, #40	; 0x28
 800b846:	2101      	movs	r1, #1
 800b848:	4618      	mov	r0, r3
 800b84a:	f001 fabf 	bl	800cdcc <RCCEx_PLL3_Config>
 800b84e:	4603      	mov	r3, r0
 800b850:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b854:	e00a      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b85c:	e006      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b85e:	bf00      	nop
 800b860:	e004      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b862:	bf00      	nop
 800b864:	e002      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b866:	bf00      	nop
 800b868:	e000      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b86a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b86c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b870:	2b00      	cmp	r3, #0
 800b872:	d10a      	bne.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b874:	4b3c      	ldr	r3, [pc, #240]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b878:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b87c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b882:	4a39      	ldr	r2, [pc, #228]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b884:	430b      	orrs	r3, r1
 800b886:	6513      	str	r3, [r2, #80]	; 0x50
 800b888:	e003      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b88a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b88e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b89e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b8a8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	d060      	beq.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b8b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b8ba:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b8be:	d039      	beq.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800b8c0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b8c4:	d832      	bhi.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b8c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8ca:	d035      	beq.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b8cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8d0:	d82c      	bhi.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b8d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8d6:	d031      	beq.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b8d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8dc:	d826      	bhi.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b8de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8e2:	d02d      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b8e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8e8:	d820      	bhi.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b8ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8ee:	d012      	beq.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b8f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8f4:	d81a      	bhi.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d024      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b8fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8fe:	d115      	bne.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b904:	3308      	adds	r3, #8
 800b906:	2101      	movs	r1, #1
 800b908:	4618      	mov	r0, r3
 800b90a:	f001 f9ad 	bl	800cc68 <RCCEx_PLL2_Config>
 800b90e:	4603      	mov	r3, r0
 800b910:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b914:	e017      	b.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b91a:	3328      	adds	r3, #40	; 0x28
 800b91c:	2101      	movs	r1, #1
 800b91e:	4618      	mov	r0, r3
 800b920:	f001 fa54 	bl	800cdcc <RCCEx_PLL3_Config>
 800b924:	4603      	mov	r3, r0
 800b926:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b92a:	e00c      	b.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b92c:	2301      	movs	r3, #1
 800b92e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b932:	e008      	b.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b934:	bf00      	nop
 800b936:	e006      	b.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b938:	bf00      	nop
 800b93a:	e004      	b.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b93c:	bf00      	nop
 800b93e:	e002      	b.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b940:	bf00      	nop
 800b942:	e000      	b.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b944:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b946:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d10e      	bne.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b94e:	4b06      	ldr	r3, [pc, #24]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b952:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b956:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b95a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b95e:	4a02      	ldr	r2, [pc, #8]	; (800b968 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b960:	430b      	orrs	r3, r1
 800b962:	6593      	str	r3, [r2, #88]	; 0x58
 800b964:	e006      	b.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b966:	bf00      	nop
 800b968:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b96c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b970:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b984:	2300      	movs	r3, #0
 800b986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b98a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b98e:	460b      	mov	r3, r1
 800b990:	4313      	orrs	r3, r2
 800b992:	d037      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b99a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b99e:	d00e      	beq.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b9a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b9a4:	d816      	bhi.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d018      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b9aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9ae:	d111      	bne.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9b0:	4bc4      	ldr	r3, [pc, #784]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b4:	4ac3      	ldr	r2, [pc, #780]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b9bc:	e00f      	b.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9c2:	3308      	adds	r3, #8
 800b9c4:	2101      	movs	r1, #1
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f001 f94e 	bl	800cc68 <RCCEx_PLL2_Config>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b9d2:	e004      	b.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b9da:	e000      	b.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b9dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d10a      	bne.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b9e6:	4bb7      	ldr	r3, [pc, #732]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ea:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b9ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9f4:	4ab3      	ldr	r2, [pc, #716]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9f6:	430b      	orrs	r3, r1
 800b9f8:	6513      	str	r3, [r2, #80]	; 0x50
 800b9fa:	e003      	b.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba00:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ba04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ba10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ba14:	2300      	movs	r3, #0
 800ba16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ba1a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ba1e:	460b      	mov	r3, r1
 800ba20:	4313      	orrs	r3, r2
 800ba22:	d039      	beq.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ba24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba2a:	2b03      	cmp	r3, #3
 800ba2c:	d81c      	bhi.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ba2e:	a201      	add	r2, pc, #4	; (adr r2, 800ba34 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ba30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba34:	0800ba71 	.word	0x0800ba71
 800ba38:	0800ba45 	.word	0x0800ba45
 800ba3c:	0800ba53 	.word	0x0800ba53
 800ba40:	0800ba71 	.word	0x0800ba71
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba44:	4b9f      	ldr	r3, [pc, #636]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba48:	4a9e      	ldr	r2, [pc, #632]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ba50:	e00f      	b.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba56:	3308      	adds	r3, #8
 800ba58:	2102      	movs	r1, #2
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f001 f904 	bl	800cc68 <RCCEx_PLL2_Config>
 800ba60:	4603      	mov	r3, r0
 800ba62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ba66:	e004      	b.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ba6e:	e000      	b.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ba70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d10a      	bne.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ba7a:	4b92      	ldr	r3, [pc, #584]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba7e:	f023 0103 	bic.w	r1, r3, #3
 800ba82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba88:	4a8e      	ldr	r2, [pc, #568]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba8a:	430b      	orrs	r3, r1
 800ba8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba8e:	e003      	b.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba94:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ba98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800baa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800baa8:	2300      	movs	r3, #0
 800baaa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800baae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bab2:	460b      	mov	r3, r1
 800bab4:	4313      	orrs	r3, r2
 800bab6:	f000 8099 	beq.w	800bbec <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800baba:	4b83      	ldr	r3, [pc, #524]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a82      	ldr	r2, [pc, #520]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bac4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bac6:	f7f8 fb83 	bl	80041d0 <HAL_GetTick>
 800baca:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bace:	e00b      	b.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bad0:	f7f8 fb7e 	bl	80041d0 <HAL_GetTick>
 800bad4:	4602      	mov	r2, r0
 800bad6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	2b64      	cmp	r3, #100	; 0x64
 800bade:	d903      	bls.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bae0:	2303      	movs	r3, #3
 800bae2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bae6:	e005      	b.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bae8:	4b77      	ldr	r3, [pc, #476]	; (800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d0ed      	beq.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800baf4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d173      	bne.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bafc:	4b71      	ldr	r3, [pc, #452]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bafe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bb00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bb08:	4053      	eors	r3, r2
 800bb0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d015      	beq.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bb12:	4b6c      	ldr	r3, [pc, #432]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb1a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bb1e:	4b69      	ldr	r3, [pc, #420]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb22:	4a68      	ldr	r2, [pc, #416]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb28:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bb2a:	4b66      	ldr	r3, [pc, #408]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb2e:	4a65      	ldr	r2, [pc, #404]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb34:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bb36:	4a63      	ldr	r2, [pc, #396]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb3c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bb3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bb46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb4a:	d118      	bne.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb4c:	f7f8 fb40 	bl	80041d0 <HAL_GetTick>
 800bb50:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb54:	e00d      	b.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb56:	f7f8 fb3b 	bl	80041d0 <HAL_GetTick>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bb60:	1ad2      	subs	r2, r2, r3
 800bb62:	f241 3388 	movw	r3, #5000	; 0x1388
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d903      	bls.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bb6a:	2303      	movs	r3, #3
 800bb6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800bb70:	e005      	b.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb72:	4b54      	ldr	r3, [pc, #336]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb76:	f003 0302 	and.w	r3, r3, #2
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d0eb      	beq.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bb7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d129      	bne.n	800bbda <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bb8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb96:	d10e      	bne.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bb98:	4b4a      	ldr	r3, [pc, #296]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb9a:	691b      	ldr	r3, [r3, #16]
 800bb9c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bba4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bba8:	091a      	lsrs	r2, r3, #4
 800bbaa:	4b48      	ldr	r3, [pc, #288]	; (800bccc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bbac:	4013      	ands	r3, r2
 800bbae:	4a45      	ldr	r2, [pc, #276]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbb0:	430b      	orrs	r3, r1
 800bbb2:	6113      	str	r3, [r2, #16]
 800bbb4:	e005      	b.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bbb6:	4b43      	ldr	r3, [pc, #268]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbb8:	691b      	ldr	r3, [r3, #16]
 800bbba:	4a42      	ldr	r2, [pc, #264]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbbc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bbc0:	6113      	str	r3, [r2, #16]
 800bbc2:	4b40      	ldr	r3, [pc, #256]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbc4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bbc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bbce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bbd2:	4a3c      	ldr	r2, [pc, #240]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbd4:	430b      	orrs	r3, r1
 800bbd6:	6713      	str	r3, [r2, #112]	; 0x70
 800bbd8:	e008      	b.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bbda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbde:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800bbe2:	e003      	b.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbe4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbe8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bbec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf4:	f002 0301 	and.w	r3, r2, #1
 800bbf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc02:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bc06:	460b      	mov	r3, r1
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	f000 8090 	beq.w	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bc0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc16:	2b28      	cmp	r3, #40	; 0x28
 800bc18:	d870      	bhi.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bc1a:	a201      	add	r2, pc, #4	; (adr r2, 800bc20 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc20:	0800bd05 	.word	0x0800bd05
 800bc24:	0800bcfd 	.word	0x0800bcfd
 800bc28:	0800bcfd 	.word	0x0800bcfd
 800bc2c:	0800bcfd 	.word	0x0800bcfd
 800bc30:	0800bcfd 	.word	0x0800bcfd
 800bc34:	0800bcfd 	.word	0x0800bcfd
 800bc38:	0800bcfd 	.word	0x0800bcfd
 800bc3c:	0800bcfd 	.word	0x0800bcfd
 800bc40:	0800bcd1 	.word	0x0800bcd1
 800bc44:	0800bcfd 	.word	0x0800bcfd
 800bc48:	0800bcfd 	.word	0x0800bcfd
 800bc4c:	0800bcfd 	.word	0x0800bcfd
 800bc50:	0800bcfd 	.word	0x0800bcfd
 800bc54:	0800bcfd 	.word	0x0800bcfd
 800bc58:	0800bcfd 	.word	0x0800bcfd
 800bc5c:	0800bcfd 	.word	0x0800bcfd
 800bc60:	0800bce7 	.word	0x0800bce7
 800bc64:	0800bcfd 	.word	0x0800bcfd
 800bc68:	0800bcfd 	.word	0x0800bcfd
 800bc6c:	0800bcfd 	.word	0x0800bcfd
 800bc70:	0800bcfd 	.word	0x0800bcfd
 800bc74:	0800bcfd 	.word	0x0800bcfd
 800bc78:	0800bcfd 	.word	0x0800bcfd
 800bc7c:	0800bcfd 	.word	0x0800bcfd
 800bc80:	0800bd05 	.word	0x0800bd05
 800bc84:	0800bcfd 	.word	0x0800bcfd
 800bc88:	0800bcfd 	.word	0x0800bcfd
 800bc8c:	0800bcfd 	.word	0x0800bcfd
 800bc90:	0800bcfd 	.word	0x0800bcfd
 800bc94:	0800bcfd 	.word	0x0800bcfd
 800bc98:	0800bcfd 	.word	0x0800bcfd
 800bc9c:	0800bcfd 	.word	0x0800bcfd
 800bca0:	0800bd05 	.word	0x0800bd05
 800bca4:	0800bcfd 	.word	0x0800bcfd
 800bca8:	0800bcfd 	.word	0x0800bcfd
 800bcac:	0800bcfd 	.word	0x0800bcfd
 800bcb0:	0800bcfd 	.word	0x0800bcfd
 800bcb4:	0800bcfd 	.word	0x0800bcfd
 800bcb8:	0800bcfd 	.word	0x0800bcfd
 800bcbc:	0800bcfd 	.word	0x0800bcfd
 800bcc0:	0800bd05 	.word	0x0800bd05
 800bcc4:	58024400 	.word	0x58024400
 800bcc8:	58024800 	.word	0x58024800
 800bccc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcd4:	3308      	adds	r3, #8
 800bcd6:	2101      	movs	r1, #1
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f000 ffc5 	bl	800cc68 <RCCEx_PLL2_Config>
 800bcde:	4603      	mov	r3, r0
 800bce0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bce4:	e00f      	b.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcea:	3328      	adds	r3, #40	; 0x28
 800bcec:	2101      	movs	r1, #1
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f001 f86c 	bl	800cdcc <RCCEx_PLL3_Config>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bcfa:	e004      	b.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bd02:	e000      	b.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bd04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10b      	bne.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bd0e:	4bc0      	ldr	r3, [pc, #768]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bd10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd12:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bd16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd1e:	4abc      	ldr	r2, [pc, #752]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bd20:	430b      	orrs	r3, r1
 800bd22:	6553      	str	r3, [r2, #84]	; 0x54
 800bd24:	e003      	b.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd26:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd2a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bd2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd36:	f002 0302 	and.w	r3, r2, #2
 800bd3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd3e:	2300      	movs	r3, #0
 800bd40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bd44:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bd48:	460b      	mov	r3, r1
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	d043      	beq.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bd4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd56:	2b05      	cmp	r3, #5
 800bd58:	d824      	bhi.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800bd5a:	a201      	add	r2, pc, #4	; (adr r2, 800bd60 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800bd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd60:	0800bdad 	.word	0x0800bdad
 800bd64:	0800bd79 	.word	0x0800bd79
 800bd68:	0800bd8f 	.word	0x0800bd8f
 800bd6c:	0800bdad 	.word	0x0800bdad
 800bd70:	0800bdad 	.word	0x0800bdad
 800bd74:	0800bdad 	.word	0x0800bdad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd7c:	3308      	adds	r3, #8
 800bd7e:	2101      	movs	r1, #1
 800bd80:	4618      	mov	r0, r3
 800bd82:	f000 ff71 	bl	800cc68 <RCCEx_PLL2_Config>
 800bd86:	4603      	mov	r3, r0
 800bd88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bd8c:	e00f      	b.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd92:	3328      	adds	r3, #40	; 0x28
 800bd94:	2101      	movs	r1, #1
 800bd96:	4618      	mov	r0, r3
 800bd98:	f001 f818 	bl	800cdcc <RCCEx_PLL3_Config>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bda2:	e004      	b.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bda4:	2301      	movs	r3, #1
 800bda6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bdaa:	e000      	b.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800bdac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d10b      	bne.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bdb6:	4b96      	ldr	r3, [pc, #600]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bdb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdba:	f023 0107 	bic.w	r1, r3, #7
 800bdbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdc6:	4a92      	ldr	r2, [pc, #584]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bdc8:	430b      	orrs	r3, r1
 800bdca:	6553      	str	r3, [r2, #84]	; 0x54
 800bdcc:	e003      	b.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bdd2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bdd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdde:	f002 0304 	and.w	r3, r2, #4
 800bde2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bde6:	2300      	movs	r3, #0
 800bde8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bdec:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	d043      	beq.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bdf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bdfe:	2b05      	cmp	r3, #5
 800be00:	d824      	bhi.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800be02:	a201      	add	r2, pc, #4	; (adr r2, 800be08 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800be04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be08:	0800be55 	.word	0x0800be55
 800be0c:	0800be21 	.word	0x0800be21
 800be10:	0800be37 	.word	0x0800be37
 800be14:	0800be55 	.word	0x0800be55
 800be18:	0800be55 	.word	0x0800be55
 800be1c:	0800be55 	.word	0x0800be55
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be24:	3308      	adds	r3, #8
 800be26:	2101      	movs	r1, #1
 800be28:	4618      	mov	r0, r3
 800be2a:	f000 ff1d 	bl	800cc68 <RCCEx_PLL2_Config>
 800be2e:	4603      	mov	r3, r0
 800be30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800be34:	e00f      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be3a:	3328      	adds	r3, #40	; 0x28
 800be3c:	2101      	movs	r1, #1
 800be3e:	4618      	mov	r0, r3
 800be40:	f000 ffc4 	bl	800cdcc <RCCEx_PLL3_Config>
 800be44:	4603      	mov	r3, r0
 800be46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800be4a:	e004      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be4c:	2301      	movs	r3, #1
 800be4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800be52:	e000      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800be54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d10b      	bne.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800be5e:	4b6c      	ldr	r3, [pc, #432]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800be60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be62:	f023 0107 	bic.w	r1, r3, #7
 800be66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be6e:	4a68      	ldr	r2, [pc, #416]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800be70:	430b      	orrs	r3, r1
 800be72:	6593      	str	r3, [r2, #88]	; 0x58
 800be74:	e003      	b.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be7a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be86:	f002 0320 	and.w	r3, r2, #32
 800be8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800be8e:	2300      	movs	r3, #0
 800be90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800be98:	460b      	mov	r3, r1
 800be9a:	4313      	orrs	r3, r2
 800be9c:	d055      	beq.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800be9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bea2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800beaa:	d033      	beq.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800beac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800beb0:	d82c      	bhi.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800beb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beb6:	d02f      	beq.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800beb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bebc:	d826      	bhi.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bebe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bec2:	d02b      	beq.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800bec4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bec8:	d820      	bhi.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800beca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bece:	d012      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800bed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bed4:	d81a      	bhi.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d022      	beq.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800beda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bede:	d115      	bne.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bee4:	3308      	adds	r3, #8
 800bee6:	2100      	movs	r1, #0
 800bee8:	4618      	mov	r0, r3
 800beea:	f000 febd 	bl	800cc68 <RCCEx_PLL2_Config>
 800beee:	4603      	mov	r3, r0
 800bef0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bef4:	e015      	b.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800befa:	3328      	adds	r3, #40	; 0x28
 800befc:	2102      	movs	r1, #2
 800befe:	4618      	mov	r0, r3
 800bf00:	f000 ff64 	bl	800cdcc <RCCEx_PLL3_Config>
 800bf04:	4603      	mov	r3, r0
 800bf06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bf0a:	e00a      	b.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bf12:	e006      	b.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bf14:	bf00      	nop
 800bf16:	e004      	b.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bf18:	bf00      	nop
 800bf1a:	e002      	b.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bf1c:	bf00      	nop
 800bf1e:	e000      	b.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bf20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10b      	bne.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bf2a:	4b39      	ldr	r3, [pc, #228]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf2e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bf32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf3a:	4a35      	ldr	r2, [pc, #212]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf3c:	430b      	orrs	r3, r1
 800bf3e:	6553      	str	r3, [r2, #84]	; 0x54
 800bf40:	e003      	b.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bf4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf52:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bf56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bf60:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bf64:	460b      	mov	r3, r1
 800bf66:	4313      	orrs	r3, r2
 800bf68:	d058      	beq.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bf6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bf76:	d033      	beq.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800bf78:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bf7c:	d82c      	bhi.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bf7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf82:	d02f      	beq.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800bf84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf88:	d826      	bhi.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bf8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf8e:	d02b      	beq.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800bf90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf94:	d820      	bhi.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bf96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf9a:	d012      	beq.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800bf9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfa0:	d81a      	bhi.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d022      	beq.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800bfa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfaa:	d115      	bne.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfb0:	3308      	adds	r3, #8
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f000 fe57 	bl	800cc68 <RCCEx_PLL2_Config>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bfc0:	e015      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfc6:	3328      	adds	r3, #40	; 0x28
 800bfc8:	2102      	movs	r1, #2
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f000 fefe 	bl	800cdcc <RCCEx_PLL3_Config>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bfd6:	e00a      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bfde:	e006      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bfe0:	bf00      	nop
 800bfe2:	e004      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bfe4:	bf00      	nop
 800bfe6:	e002      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bfe8:	bf00      	nop
 800bfea:	e000      	b.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bfec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d10e      	bne.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bff6:	4b06      	ldr	r3, [pc, #24]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bffa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c002:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c006:	4a02      	ldr	r2, [pc, #8]	; (800c010 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c008:	430b      	orrs	r3, r1
 800c00a:	6593      	str	r3, [r2, #88]	; 0x58
 800c00c:	e006      	b.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c00e:	bf00      	nop
 800c010:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c014:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c018:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c01c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c02c:	2300      	movs	r3, #0
 800c02e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c032:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c036:	460b      	mov	r3, r1
 800c038:	4313      	orrs	r3, r2
 800c03a:	d055      	beq.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c03c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c040:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c044:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c048:	d033      	beq.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c04a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c04e:	d82c      	bhi.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c050:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c054:	d02f      	beq.n	800c0b6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c05a:	d826      	bhi.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c05c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c060:	d02b      	beq.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c062:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c066:	d820      	bhi.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c06c:	d012      	beq.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c06e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c072:	d81a      	bhi.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c074:	2b00      	cmp	r3, #0
 800c076:	d022      	beq.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c07c:	d115      	bne.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c07e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c082:	3308      	adds	r3, #8
 800c084:	2100      	movs	r1, #0
 800c086:	4618      	mov	r0, r3
 800c088:	f000 fdee 	bl	800cc68 <RCCEx_PLL2_Config>
 800c08c:	4603      	mov	r3, r0
 800c08e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c092:	e015      	b.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c098:	3328      	adds	r3, #40	; 0x28
 800c09a:	2102      	movs	r1, #2
 800c09c:	4618      	mov	r0, r3
 800c09e:	f000 fe95 	bl	800cdcc <RCCEx_PLL3_Config>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c0a8:	e00a      	b.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c0b0:	e006      	b.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c0b2:	bf00      	nop
 800c0b4:	e004      	b.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c0b6:	bf00      	nop
 800c0b8:	e002      	b.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c0ba:	bf00      	nop
 800c0bc:	e000      	b.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c0be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d10b      	bne.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c0c8:	4ba1      	ldr	r3, [pc, #644]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c0ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0cc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c0d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c0d8:	4a9d      	ldr	r2, [pc, #628]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c0da:	430b      	orrs	r3, r1
 800c0dc:	6593      	str	r3, [r2, #88]	; 0x58
 800c0de:	e003      	b.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c0e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f0:	f002 0308 	and.w	r3, r2, #8
 800c0f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c0fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c102:	460b      	mov	r3, r1
 800c104:	4313      	orrs	r3, r2
 800c106:	d01e      	beq.n	800c146 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c108:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c10c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c114:	d10c      	bne.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c11a:	3328      	adds	r3, #40	; 0x28
 800c11c:	2102      	movs	r1, #2
 800c11e:	4618      	mov	r0, r3
 800c120:	f000 fe54 	bl	800cdcc <RCCEx_PLL3_Config>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d002      	beq.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c12a:	2301      	movs	r3, #1
 800c12c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c130:	4b87      	ldr	r3, [pc, #540]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c134:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c13c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c140:	4a83      	ldr	r2, [pc, #524]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c142:	430b      	orrs	r3, r1
 800c144:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14e:	f002 0310 	and.w	r3, r2, #16
 800c152:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c156:	2300      	movs	r3, #0
 800c158:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c15c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c160:	460b      	mov	r3, r1
 800c162:	4313      	orrs	r3, r2
 800c164:	d01e      	beq.n	800c1a4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c16a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c16e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c172:	d10c      	bne.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c178:	3328      	adds	r3, #40	; 0x28
 800c17a:	2102      	movs	r1, #2
 800c17c:	4618      	mov	r0, r3
 800c17e:	f000 fe25 	bl	800cdcc <RCCEx_PLL3_Config>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d002      	beq.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c188:	2301      	movs	r3, #1
 800c18a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c18e:	4b70      	ldr	r3, [pc, #448]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c192:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c196:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c19a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c19e:	4a6c      	ldr	r2, [pc, #432]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c1a0:	430b      	orrs	r3, r1
 800c1a2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c1a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ac:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c1b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c1ba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c1be:	460b      	mov	r3, r1
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	d03e      	beq.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c1c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c1cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1d0:	d022      	beq.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c1d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1d6:	d81b      	bhi.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d003      	beq.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c1dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1e0:	d00b      	beq.n	800c1fa <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c1e2:	e015      	b.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1e8:	3308      	adds	r3, #8
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f000 fd3b 	bl	800cc68 <RCCEx_PLL2_Config>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c1f8:	e00f      	b.n	800c21a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1fe:	3328      	adds	r3, #40	; 0x28
 800c200:	2102      	movs	r1, #2
 800c202:	4618      	mov	r0, r3
 800c204:	f000 fde2 	bl	800cdcc <RCCEx_PLL3_Config>
 800c208:	4603      	mov	r3, r0
 800c20a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c20e:	e004      	b.n	800c21a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c210:	2301      	movs	r3, #1
 800c212:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c216:	e000      	b.n	800c21a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c21a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d10b      	bne.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c222:	4b4b      	ldr	r3, [pc, #300]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c226:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c22a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c22e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c232:	4a47      	ldr	r2, [pc, #284]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c234:	430b      	orrs	r3, r1
 800c236:	6593      	str	r3, [r2, #88]	; 0x58
 800c238:	e003      	b.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c23a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c23e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c24e:	67bb      	str	r3, [r7, #120]	; 0x78
 800c250:	2300      	movs	r3, #0
 800c252:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c254:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c258:	460b      	mov	r3, r1
 800c25a:	4313      	orrs	r3, r2
 800c25c:	d03b      	beq.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c25e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c266:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c26a:	d01f      	beq.n	800c2ac <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c26c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c270:	d818      	bhi.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c276:	d003      	beq.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c278:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c27c:	d007      	beq.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c27e:	e011      	b.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c280:	4b33      	ldr	r3, [pc, #204]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c284:	4a32      	ldr	r2, [pc, #200]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c28a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c28c:	e00f      	b.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c28e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c292:	3328      	adds	r3, #40	; 0x28
 800c294:	2101      	movs	r1, #1
 800c296:	4618      	mov	r0, r3
 800c298:	f000 fd98 	bl	800cdcc <RCCEx_PLL3_Config>
 800c29c:	4603      	mov	r3, r0
 800c29e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c2a2:	e004      	b.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c2aa:	e000      	b.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c2ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d10b      	bne.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c2b6:	4b26      	ldr	r3, [pc, #152]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c2b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2ba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c2be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2c6:	4a22      	ldr	r2, [pc, #136]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c2c8:	430b      	orrs	r3, r1
 800c2ca:	6553      	str	r3, [r2, #84]	; 0x54
 800c2cc:	e003      	b.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c2d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c2d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2de:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c2e2:	673b      	str	r3, [r7, #112]	; 0x70
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	677b      	str	r3, [r7, #116]	; 0x74
 800c2e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	d034      	beq.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c2f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d003      	beq.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c2fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c300:	d007      	beq.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c302:	e011      	b.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c304:	4b12      	ldr	r3, [pc, #72]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c308:	4a11      	ldr	r2, [pc, #68]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c30a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c30e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c310:	e00e      	b.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c316:	3308      	adds	r3, #8
 800c318:	2102      	movs	r1, #2
 800c31a:	4618      	mov	r0, r3
 800c31c:	f000 fca4 	bl	800cc68 <RCCEx_PLL2_Config>
 800c320:	4603      	mov	r3, r0
 800c322:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c326:	e003      	b.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c328:	2301      	movs	r3, #1
 800c32a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c32e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c330:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c334:	2b00      	cmp	r3, #0
 800c336:	d10d      	bne.n	800c354 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c338:	4b05      	ldr	r3, [pc, #20]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c33a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c33c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c346:	4a02      	ldr	r2, [pc, #8]	; (800c350 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c348:	430b      	orrs	r3, r1
 800c34a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c34c:	e006      	b.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c34e:	bf00      	nop
 800c350:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c354:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c358:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c35c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c364:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c368:	66bb      	str	r3, [r7, #104]	; 0x68
 800c36a:	2300      	movs	r3, #0
 800c36c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c36e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c372:	460b      	mov	r3, r1
 800c374:	4313      	orrs	r3, r2
 800c376:	d00c      	beq.n	800c392 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c37c:	3328      	adds	r3, #40	; 0x28
 800c37e:	2102      	movs	r1, #2
 800c380:	4618      	mov	r0, r3
 800c382:	f000 fd23 	bl	800cdcc <RCCEx_PLL3_Config>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d002      	beq.n	800c392 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c38c:	2301      	movs	r3, #1
 800c38e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c39e:	663b      	str	r3, [r7, #96]	; 0x60
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	667b      	str	r3, [r7, #100]	; 0x64
 800c3a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	d038      	beq.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c3ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3ba:	d018      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c3bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3c0:	d811      	bhi.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c3c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3c6:	d014      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c3c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3cc:	d80b      	bhi.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d011      	beq.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c3d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3d6:	d106      	bne.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3d8:	4bc3      	ldr	r3, [pc, #780]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3dc:	4ac2      	ldr	r2, [pc, #776]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c3de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c3e4:	e008      	b.n	800c3f8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c3ec:	e004      	b.n	800c3f8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c3ee:	bf00      	nop
 800c3f0:	e002      	b.n	800c3f8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c3f2:	bf00      	nop
 800c3f4:	e000      	b.n	800c3f8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c3f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d10b      	bne.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c400:	4bb9      	ldr	r3, [pc, #740]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c404:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c40c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c410:	4ab5      	ldr	r2, [pc, #724]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c412:	430b      	orrs	r3, r1
 800c414:	6553      	str	r3, [r2, #84]	; 0x54
 800c416:	e003      	b.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c418:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c41c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c428:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c42c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c42e:	2300      	movs	r3, #0
 800c430:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c432:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c436:	460b      	mov	r3, r1
 800c438:	4313      	orrs	r3, r2
 800c43a:	d009      	beq.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c43c:	4baa      	ldr	r3, [pc, #680]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c43e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c440:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c44a:	4aa7      	ldr	r2, [pc, #668]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c44c:	430b      	orrs	r3, r1
 800c44e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c458:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c45c:	653b      	str	r3, [r7, #80]	; 0x50
 800c45e:	2300      	movs	r3, #0
 800c460:	657b      	str	r3, [r7, #84]	; 0x54
 800c462:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c466:	460b      	mov	r3, r1
 800c468:	4313      	orrs	r3, r2
 800c46a:	d009      	beq.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c46c:	4b9e      	ldr	r3, [pc, #632]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c46e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c470:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c474:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c47a:	4a9b      	ldr	r2, [pc, #620]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c47c:	430b      	orrs	r3, r1
 800c47e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c480:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c488:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c48c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c48e:	2300      	movs	r3, #0
 800c490:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c492:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c496:	460b      	mov	r3, r1
 800c498:	4313      	orrs	r3, r2
 800c49a:	d009      	beq.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c49c:	4b92      	ldr	r3, [pc, #584]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c49e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4a0:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800c4a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4aa:	4a8f      	ldr	r2, [pc, #572]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c4ac:	430b      	orrs	r3, r1
 800c4ae:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c4b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c4bc:	643b      	str	r3, [r7, #64]	; 0x40
 800c4be:	2300      	movs	r3, #0
 800c4c0:	647b      	str	r3, [r7, #68]	; 0x44
 800c4c2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c4c6:	460b      	mov	r3, r1
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	d00e      	beq.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c4cc:	4b86      	ldr	r3, [pc, #536]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c4ce:	691b      	ldr	r3, [r3, #16]
 800c4d0:	4a85      	ldr	r2, [pc, #532]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c4d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c4d6:	6113      	str	r3, [r2, #16]
 800c4d8:	4b83      	ldr	r3, [pc, #524]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c4da:	6919      	ldr	r1, [r3, #16]
 800c4dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c4e4:	4a80      	ldr	r2, [pc, #512]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c4e6:	430b      	orrs	r3, r1
 800c4e8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c4ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c4f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c500:	460b      	mov	r3, r1
 800c502:	4313      	orrs	r3, r2
 800c504:	d009      	beq.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c506:	4b78      	ldr	r3, [pc, #480]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c50a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c50e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c514:	4a74      	ldr	r2, [pc, #464]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c516:	430b      	orrs	r3, r1
 800c518:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c51a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c522:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c526:	633b      	str	r3, [r7, #48]	; 0x30
 800c528:	2300      	movs	r3, #0
 800c52a:	637b      	str	r3, [r7, #52]	; 0x34
 800c52c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c530:	460b      	mov	r3, r1
 800c532:	4313      	orrs	r3, r2
 800c534:	d00a      	beq.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c536:	4b6c      	ldr	r3, [pc, #432]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c53a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c53e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c546:	4a68      	ldr	r2, [pc, #416]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c548:	430b      	orrs	r3, r1
 800c54a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c54c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c554:	2100      	movs	r1, #0
 800c556:	62b9      	str	r1, [r7, #40]	; 0x28
 800c558:	f003 0301 	and.w	r3, r3, #1
 800c55c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c55e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c562:	460b      	mov	r3, r1
 800c564:	4313      	orrs	r3, r2
 800c566:	d011      	beq.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c568:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c56c:	3308      	adds	r3, #8
 800c56e:	2100      	movs	r1, #0
 800c570:	4618      	mov	r0, r3
 800c572:	f000 fb79 	bl	800cc68 <RCCEx_PLL2_Config>
 800c576:	4603      	mov	r3, r0
 800c578:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c57c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c580:	2b00      	cmp	r3, #0
 800c582:	d003      	beq.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c584:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c588:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c58c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c594:	2100      	movs	r1, #0
 800c596:	6239      	str	r1, [r7, #32]
 800c598:	f003 0302 	and.w	r3, r3, #2
 800c59c:	627b      	str	r3, [r7, #36]	; 0x24
 800c59e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	d011      	beq.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c5a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5ac:	3308      	adds	r3, #8
 800c5ae:	2101      	movs	r1, #1
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f000 fb59 	bl	800cc68 <RCCEx_PLL2_Config>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c5bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d003      	beq.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c5cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d4:	2100      	movs	r1, #0
 800c5d6:	61b9      	str	r1, [r7, #24]
 800c5d8:	f003 0304 	and.w	r3, r3, #4
 800c5dc:	61fb      	str	r3, [r7, #28]
 800c5de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	d011      	beq.n	800c60c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c5e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5ec:	3308      	adds	r3, #8
 800c5ee:	2102      	movs	r1, #2
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f000 fb39 	bl	800cc68 <RCCEx_PLL2_Config>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c5fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c600:	2b00      	cmp	r3, #0
 800c602:	d003      	beq.n	800c60c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c604:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c608:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c60c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c614:	2100      	movs	r1, #0
 800c616:	6139      	str	r1, [r7, #16]
 800c618:	f003 0308 	and.w	r3, r3, #8
 800c61c:	617b      	str	r3, [r7, #20]
 800c61e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c622:	460b      	mov	r3, r1
 800c624:	4313      	orrs	r3, r2
 800c626:	d011      	beq.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c62c:	3328      	adds	r3, #40	; 0x28
 800c62e:	2100      	movs	r1, #0
 800c630:	4618      	mov	r0, r3
 800c632:	f000 fbcb 	bl	800cdcc <RCCEx_PLL3_Config>
 800c636:	4603      	mov	r3, r0
 800c638:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800c63c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c640:	2b00      	cmp	r3, #0
 800c642:	d003      	beq.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c644:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c648:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c64c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c654:	2100      	movs	r1, #0
 800c656:	60b9      	str	r1, [r7, #8]
 800c658:	f003 0310 	and.w	r3, r3, #16
 800c65c:	60fb      	str	r3, [r7, #12]
 800c65e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c662:	460b      	mov	r3, r1
 800c664:	4313      	orrs	r3, r2
 800c666:	d011      	beq.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c66c:	3328      	adds	r3, #40	; 0x28
 800c66e:	2101      	movs	r1, #1
 800c670:	4618      	mov	r0, r3
 800c672:	f000 fbab 	bl	800cdcc <RCCEx_PLL3_Config>
 800c676:	4603      	mov	r3, r0
 800c678:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c67c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c680:	2b00      	cmp	r3, #0
 800c682:	d003      	beq.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c684:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c688:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c68c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c694:	2100      	movs	r1, #0
 800c696:	6039      	str	r1, [r7, #0]
 800c698:	f003 0320 	and.w	r3, r3, #32
 800c69c:	607b      	str	r3, [r7, #4]
 800c69e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	d011      	beq.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c6a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6ac:	3328      	adds	r3, #40	; 0x28
 800c6ae:	2102      	movs	r1, #2
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f000 fb8b 	bl	800cdcc <RCCEx_PLL3_Config>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c6bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d003      	beq.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6c4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6c8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800c6cc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d101      	bne.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	e000      	b.n	800c6da <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800c6d8:	2301      	movs	r3, #1
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c6e6:	bf00      	nop
 800c6e8:	58024400 	.word	0x58024400

0800c6ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800c6f0:	f7fe fde2 	bl	800b2b8 <HAL_RCC_GetHCLKFreq>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	4b06      	ldr	r3, [pc, #24]	; (800c710 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c6f8:	6a1b      	ldr	r3, [r3, #32]
 800c6fa:	091b      	lsrs	r3, r3, #4
 800c6fc:	f003 0307 	and.w	r3, r3, #7
 800c700:	4904      	ldr	r1, [pc, #16]	; (800c714 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c702:	5ccb      	ldrb	r3, [r1, r3]
 800c704:	f003 031f 	and.w	r3, r3, #31
 800c708:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	58024400 	.word	0x58024400
 800c714:	0801077c 	.word	0x0801077c

0800c718 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c718:	b480      	push	{r7}
 800c71a:	b089      	sub	sp, #36	; 0x24
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c720:	4ba1      	ldr	r3, [pc, #644]	; (800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c724:	f003 0303 	and.w	r3, r3, #3
 800c728:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c72a:	4b9f      	ldr	r3, [pc, #636]	; (800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c72e:	0b1b      	lsrs	r3, r3, #12
 800c730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c734:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c736:	4b9c      	ldr	r3, [pc, #624]	; (800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c73a:	091b      	lsrs	r3, r3, #4
 800c73c:	f003 0301 	and.w	r3, r3, #1
 800c740:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c742:	4b99      	ldr	r3, [pc, #612]	; (800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c746:	08db      	lsrs	r3, r3, #3
 800c748:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c74c:	693a      	ldr	r2, [r7, #16]
 800c74e:	fb02 f303 	mul.w	r3, r2, r3
 800c752:	ee07 3a90 	vmov	s15, r3
 800c756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c75a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	2b00      	cmp	r3, #0
 800c762:	f000 8111 	beq.w	800c988 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	2b02      	cmp	r3, #2
 800c76a:	f000 8083 	beq.w	800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	2b02      	cmp	r3, #2
 800c772:	f200 80a1 	bhi.w	800c8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c776:	69bb      	ldr	r3, [r7, #24]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d003      	beq.n	800c784 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d056      	beq.n	800c830 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c782:	e099      	b.n	800c8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c784:	4b88      	ldr	r3, [pc, #544]	; (800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f003 0320 	and.w	r3, r3, #32
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d02d      	beq.n	800c7ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c790:	4b85      	ldr	r3, [pc, #532]	; (800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	08db      	lsrs	r3, r3, #3
 800c796:	f003 0303 	and.w	r3, r3, #3
 800c79a:	4a84      	ldr	r2, [pc, #528]	; (800c9ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c79c:	fa22 f303 	lsr.w	r3, r2, r3
 800c7a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	ee07 3a90 	vmov	s15, r3
 800c7a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	ee07 3a90 	vmov	s15, r3
 800c7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7ba:	4b7b      	ldr	r3, [pc, #492]	; (800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7c2:	ee07 3a90 	vmov	s15, r3
 800c7c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c7ea:	e087      	b.n	800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	ee07 3a90 	vmov	s15, r3
 800c7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c7fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7fe:	4b6a      	ldr	r3, [pc, #424]	; (800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c806:	ee07 3a90 	vmov	s15, r3
 800c80a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c80e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c812:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c81e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c82a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c82e:	e065      	b.n	800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	ee07 3a90 	vmov	s15, r3
 800c836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c83a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c83e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c842:	4b59      	ldr	r3, [pc, #356]	; (800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c84a:	ee07 3a90 	vmov	s15, r3
 800c84e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c852:	ed97 6a03 	vldr	s12, [r7, #12]
 800c856:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c85a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c85e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c86e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c872:	e043      	b.n	800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	ee07 3a90 	vmov	s15, r3
 800c87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c87e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c9bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c886:	4b48      	ldr	r3, [pc, #288]	; (800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c88e:	ee07 3a90 	vmov	s15, r3
 800c892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c896:	ed97 6a03 	vldr	s12, [r7, #12]
 800c89a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c89e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8b6:	e021      	b.n	800c8fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	ee07 3a90 	vmov	s15, r3
 800c8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c8c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8ca:	4b37      	ldr	r3, [pc, #220]	; (800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8d2:	ee07 3a90 	vmov	s15, r3
 800c8d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8da:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8de:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c8fc:	4b2a      	ldr	r3, [pc, #168]	; (800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c900:	0a5b      	lsrs	r3, r3, #9
 800c902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c906:	ee07 3a90 	vmov	s15, r3
 800c90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c90e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c912:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c916:	edd7 6a07 	vldr	s13, [r7, #28]
 800c91a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c91e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c922:	ee17 2a90 	vmov	r2, s15
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c92a:	4b1f      	ldr	r3, [pc, #124]	; (800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c92e:	0c1b      	lsrs	r3, r3, #16
 800c930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c934:	ee07 3a90 	vmov	s15, r3
 800c938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c93c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c940:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c944:	edd7 6a07 	vldr	s13, [r7, #28]
 800c948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c94c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c950:	ee17 2a90 	vmov	r2, s15
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c958:	4b13      	ldr	r3, [pc, #76]	; (800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c95c:	0e1b      	lsrs	r3, r3, #24
 800c95e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c962:	ee07 3a90 	vmov	s15, r3
 800c966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c96a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c96e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c972:	edd7 6a07 	vldr	s13, [r7, #28]
 800c976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c97a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c97e:	ee17 2a90 	vmov	r2, s15
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c986:	e008      	b.n	800c99a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	609a      	str	r2, [r3, #8]
}
 800c99a:	bf00      	nop
 800c99c:	3724      	adds	r7, #36	; 0x24
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr
 800c9a6:	bf00      	nop
 800c9a8:	58024400 	.word	0x58024400
 800c9ac:	03d09000 	.word	0x03d09000
 800c9b0:	46000000 	.word	0x46000000
 800c9b4:	4c742400 	.word	0x4c742400
 800c9b8:	4a742400 	.word	0x4a742400
 800c9bc:	4bb71b00 	.word	0x4bb71b00

0800c9c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b089      	sub	sp, #36	; 0x24
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9c8:	4ba1      	ldr	r3, [pc, #644]	; (800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9cc:	f003 0303 	and.w	r3, r3, #3
 800c9d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c9d2:	4b9f      	ldr	r3, [pc, #636]	; (800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d6:	0d1b      	lsrs	r3, r3, #20
 800c9d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c9de:	4b9c      	ldr	r3, [pc, #624]	; (800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e2:	0a1b      	lsrs	r3, r3, #8
 800c9e4:	f003 0301 	and.w	r3, r3, #1
 800c9e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c9ea:	4b99      	ldr	r3, [pc, #612]	; (800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9ee:	08db      	lsrs	r3, r3, #3
 800c9f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9f4:	693a      	ldr	r2, [r7, #16]
 800c9f6:	fb02 f303 	mul.w	r3, r2, r3
 800c9fa:	ee07 3a90 	vmov	s15, r3
 800c9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f000 8111 	beq.w	800cc30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	2b02      	cmp	r3, #2
 800ca12:	f000 8083 	beq.w	800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ca16:	69bb      	ldr	r3, [r7, #24]
 800ca18:	2b02      	cmp	r3, #2
 800ca1a:	f200 80a1 	bhi.w	800cb60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ca1e:	69bb      	ldr	r3, [r7, #24]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d003      	beq.n	800ca2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d056      	beq.n	800cad8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ca2a:	e099      	b.n	800cb60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca2c:	4b88      	ldr	r3, [pc, #544]	; (800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f003 0320 	and.w	r3, r3, #32
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d02d      	beq.n	800ca94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca38:	4b85      	ldr	r3, [pc, #532]	; (800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	08db      	lsrs	r3, r3, #3
 800ca3e:	f003 0303 	and.w	r3, r3, #3
 800ca42:	4a84      	ldr	r2, [pc, #528]	; (800cc54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ca44:	fa22 f303 	lsr.w	r3, r2, r3
 800ca48:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	ee07 3a90 	vmov	s15, r3
 800ca50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	ee07 3a90 	vmov	s15, r3
 800ca5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca62:	4b7b      	ldr	r3, [pc, #492]	; (800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca6a:	ee07 3a90 	vmov	s15, r3
 800ca6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca76:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cc58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca92:	e087      	b.n	800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	ee07 3a90 	vmov	s15, r3
 800ca9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cc5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800caa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caa6:	4b6a      	ldr	r3, [pc, #424]	; (800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caae:	ee07 3a90 	vmov	s15, r3
 800cab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cab6:	ed97 6a03 	vldr	s12, [r7, #12]
 800caba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cc58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cabe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cace:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cad6:	e065      	b.n	800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	ee07 3a90 	vmov	s15, r3
 800cade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cae2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cc60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caea:	4b59      	ldr	r3, [pc, #356]	; (800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caf2:	ee07 3a90 	vmov	s15, r3
 800caf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cafa:	ed97 6a03 	vldr	s12, [r7, #12]
 800cafe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cc58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb1a:	e043      	b.n	800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	ee07 3a90 	vmov	s15, r3
 800cb22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cc64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cb2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb2e:	4b48      	ldr	r3, [pc, #288]	; (800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb36:	ee07 3a90 	vmov	s15, r3
 800cb3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb42:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cc58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb5e:	e021      	b.n	800cba4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	ee07 3a90 	vmov	s15, r3
 800cb66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cc60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cb6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb72:	4b37      	ldr	r3, [pc, #220]	; (800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb7a:	ee07 3a90 	vmov	s15, r3
 800cb7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb82:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb86:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cc58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cba2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cba4:	4b2a      	ldr	r3, [pc, #168]	; (800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cba8:	0a5b      	lsrs	r3, r3, #9
 800cbaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbae:	ee07 3a90 	vmov	s15, r3
 800cbb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbca:	ee17 2a90 	vmov	r2, s15
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cbd2:	4b1f      	ldr	r3, [pc, #124]	; (800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbd6:	0c1b      	lsrs	r3, r3, #16
 800cbd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbdc:	ee07 3a90 	vmov	s15, r3
 800cbe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbe8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbec:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbf8:	ee17 2a90 	vmov	r2, s15
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cc00:	4b13      	ldr	r3, [pc, #76]	; (800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc04:	0e1b      	lsrs	r3, r3, #24
 800cc06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc0a:	ee07 3a90 	vmov	s15, r3
 800cc0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc26:	ee17 2a90 	vmov	r2, s15
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cc2e:	e008      	b.n	800cc42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2200      	movs	r2, #0
 800cc34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	609a      	str	r2, [r3, #8]
}
 800cc42:	bf00      	nop
 800cc44:	3724      	adds	r7, #36	; 0x24
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr
 800cc4e:	bf00      	nop
 800cc50:	58024400 	.word	0x58024400
 800cc54:	03d09000 	.word	0x03d09000
 800cc58:	46000000 	.word	0x46000000
 800cc5c:	4c742400 	.word	0x4c742400
 800cc60:	4a742400 	.word	0x4a742400
 800cc64:	4bb71b00 	.word	0x4bb71b00

0800cc68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc72:	2300      	movs	r3, #0
 800cc74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cc76:	4b53      	ldr	r3, [pc, #332]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cc78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc7a:	f003 0303 	and.w	r3, r3, #3
 800cc7e:	2b03      	cmp	r3, #3
 800cc80:	d101      	bne.n	800cc86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cc82:	2301      	movs	r3, #1
 800cc84:	e099      	b.n	800cdba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cc86:	4b4f      	ldr	r3, [pc, #316]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a4e      	ldr	r2, [pc, #312]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cc8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc92:	f7f7 fa9d 	bl	80041d0 <HAL_GetTick>
 800cc96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cc98:	e008      	b.n	800ccac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cc9a:	f7f7 fa99 	bl	80041d0 <HAL_GetTick>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	1ad3      	subs	r3, r2, r3
 800cca4:	2b02      	cmp	r3, #2
 800cca6:	d901      	bls.n	800ccac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cca8:	2303      	movs	r3, #3
 800ccaa:	e086      	b.n	800cdba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ccac:	4b45      	ldr	r3, [pc, #276]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d1f0      	bne.n	800cc9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ccb8:	4b42      	ldr	r3, [pc, #264]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800ccba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	031b      	lsls	r3, r3, #12
 800ccc6:	493f      	ldr	r1, [pc, #252]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	628b      	str	r3, [r1, #40]	; 0x28
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	3b01      	subs	r3, #1
 800ccd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	3b01      	subs	r3, #1
 800ccdc:	025b      	lsls	r3, r3, #9
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	431a      	orrs	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	68db      	ldr	r3, [r3, #12]
 800cce6:	3b01      	subs	r3, #1
 800cce8:	041b      	lsls	r3, r3, #16
 800ccea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ccee:	431a      	orrs	r2, r3
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	691b      	ldr	r3, [r3, #16]
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	061b      	lsls	r3, r3, #24
 800ccf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ccfc:	4931      	ldr	r1, [pc, #196]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cd02:	4b30      	ldr	r3, [pc, #192]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	695b      	ldr	r3, [r3, #20]
 800cd0e:	492d      	ldr	r1, [pc, #180]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd10:	4313      	orrs	r3, r2
 800cd12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cd14:	4b2b      	ldr	r3, [pc, #172]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd18:	f023 0220 	bic.w	r2, r3, #32
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	699b      	ldr	r3, [r3, #24]
 800cd20:	4928      	ldr	r1, [pc, #160]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd22:	4313      	orrs	r3, r2
 800cd24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cd26:	4b27      	ldr	r3, [pc, #156]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd2a:	4a26      	ldr	r2, [pc, #152]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd2c:	f023 0310 	bic.w	r3, r3, #16
 800cd30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cd32:	4b24      	ldr	r3, [pc, #144]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd36:	4b24      	ldr	r3, [pc, #144]	; (800cdc8 <RCCEx_PLL2_Config+0x160>)
 800cd38:	4013      	ands	r3, r2
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	69d2      	ldr	r2, [r2, #28]
 800cd3e:	00d2      	lsls	r2, r2, #3
 800cd40:	4920      	ldr	r1, [pc, #128]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd42:	4313      	orrs	r3, r2
 800cd44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cd46:	4b1f      	ldr	r3, [pc, #124]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4a:	4a1e      	ldr	r2, [pc, #120]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd4c:	f043 0310 	orr.w	r3, r3, #16
 800cd50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d106      	bne.n	800cd66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cd58:	4b1a      	ldr	r3, [pc, #104]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5c:	4a19      	ldr	r2, [pc, #100]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd62:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd64:	e00f      	b.n	800cd86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d106      	bne.n	800cd7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cd6c:	4b15      	ldr	r3, [pc, #84]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd70:	4a14      	ldr	r2, [pc, #80]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd76:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd78:	e005      	b.n	800cd86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cd7a:	4b12      	ldr	r3, [pc, #72]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7e:	4a11      	ldr	r2, [pc, #68]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cd84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cd86:	4b0f      	ldr	r3, [pc, #60]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4a0e      	ldr	r2, [pc, #56]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd92:	f7f7 fa1d 	bl	80041d0 <HAL_GetTick>
 800cd96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cd98:	e008      	b.n	800cdac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd9a:	f7f7 fa19 	bl	80041d0 <HAL_GetTick>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	1ad3      	subs	r3, r2, r3
 800cda4:	2b02      	cmp	r3, #2
 800cda6:	d901      	bls.n	800cdac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cda8:	2303      	movs	r3, #3
 800cdaa:	e006      	b.n	800cdba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cdac:	4b05      	ldr	r3, [pc, #20]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d0f0      	beq.n	800cd9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cdb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	58024400 	.word	0x58024400
 800cdc8:	ffff0007 	.word	0xffff0007

0800cdcc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cdda:	4b53      	ldr	r3, [pc, #332]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdde:	f003 0303 	and.w	r3, r3, #3
 800cde2:	2b03      	cmp	r3, #3
 800cde4:	d101      	bne.n	800cdea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cde6:	2301      	movs	r3, #1
 800cde8:	e099      	b.n	800cf1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cdea:	4b4f      	ldr	r3, [pc, #316]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4a4e      	ldr	r2, [pc, #312]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cdf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cdf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdf6:	f7f7 f9eb 	bl	80041d0 <HAL_GetTick>
 800cdfa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cdfc:	e008      	b.n	800ce10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cdfe:	f7f7 f9e7 	bl	80041d0 <HAL_GetTick>
 800ce02:	4602      	mov	r2, r0
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	1ad3      	subs	r3, r2, r3
 800ce08:	2b02      	cmp	r3, #2
 800ce0a:	d901      	bls.n	800ce10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce0c:	2303      	movs	r3, #3
 800ce0e:	e086      	b.n	800cf1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce10:	4b45      	ldr	r3, [pc, #276]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1f0      	bne.n	800cdfe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ce1c:	4b42      	ldr	r3, [pc, #264]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	051b      	lsls	r3, r3, #20
 800ce2a:	493f      	ldr	r1, [pc, #252]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	628b      	str	r3, [r1, #40]	; 0x28
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	3b01      	subs	r3, #1
 800ce36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	3b01      	subs	r3, #1
 800ce40:	025b      	lsls	r3, r3, #9
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	431a      	orrs	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	68db      	ldr	r3, [r3, #12]
 800ce4a:	3b01      	subs	r3, #1
 800ce4c:	041b      	lsls	r3, r3, #16
 800ce4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ce52:	431a      	orrs	r2, r3
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	691b      	ldr	r3, [r3, #16]
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	061b      	lsls	r3, r3, #24
 800ce5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ce60:	4931      	ldr	r1, [pc, #196]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce62:	4313      	orrs	r3, r2
 800ce64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ce66:	4b30      	ldr	r3, [pc, #192]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	695b      	ldr	r3, [r3, #20]
 800ce72:	492d      	ldr	r1, [pc, #180]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce74:	4313      	orrs	r3, r2
 800ce76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ce78:	4b2b      	ldr	r3, [pc, #172]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	699b      	ldr	r3, [r3, #24]
 800ce84:	4928      	ldr	r1, [pc, #160]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce86:	4313      	orrs	r3, r2
 800ce88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ce8a:	4b27      	ldr	r3, [pc, #156]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8e:	4a26      	ldr	r2, [pc, #152]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ce96:	4b24      	ldr	r3, [pc, #144]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce9a:	4b24      	ldr	r3, [pc, #144]	; (800cf2c <RCCEx_PLL3_Config+0x160>)
 800ce9c:	4013      	ands	r3, r2
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	69d2      	ldr	r2, [r2, #28]
 800cea2:	00d2      	lsls	r2, r2, #3
 800cea4:	4920      	ldr	r1, [pc, #128]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cea6:	4313      	orrs	r3, r2
 800cea8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ceaa:	4b1f      	ldr	r3, [pc, #124]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ceac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceae:	4a1e      	ldr	r2, [pc, #120]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ceb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ceb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d106      	bne.n	800ceca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cebc:	4b1a      	ldr	r3, [pc, #104]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec0:	4a19      	ldr	r2, [pc, #100]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cec2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cec6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cec8:	e00f      	b.n	800ceea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d106      	bne.n	800cede <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ced0:	4b15      	ldr	r3, [pc, #84]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ced2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced4:	4a14      	ldr	r2, [pc, #80]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ced6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ceda:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cedc:	e005      	b.n	800ceea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cede:	4b12      	ldr	r3, [pc, #72]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee2:	4a11      	ldr	r2, [pc, #68]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cee4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cee8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ceea:	4b0f      	ldr	r3, [pc, #60]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a0e      	ldr	r2, [pc, #56]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cef6:	f7f7 f96b 	bl	80041d0 <HAL_GetTick>
 800cefa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cefc:	e008      	b.n	800cf10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cefe:	f7f7 f967 	bl	80041d0 <HAL_GetTick>
 800cf02:	4602      	mov	r2, r0
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	1ad3      	subs	r3, r2, r3
 800cf08:	2b02      	cmp	r3, #2
 800cf0a:	d901      	bls.n	800cf10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf0c:	2303      	movs	r3, #3
 800cf0e:	e006      	b.n	800cf1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf10:	4b05      	ldr	r3, [pc, #20]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d0f0      	beq.n	800cefe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cf1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	58024400 	.word	0x58024400
 800cf2c:	ffff0007 	.word	0xffff0007

0800cf30 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d074      	beq.n	800d02c <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d106      	bne.n	800cf5c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f7f6 f834 	bl	8002fc4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2202      	movs	r2, #2
 800cf60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	f003 0310 	and.w	r3, r3, #16
 800cf6e:	2b10      	cmp	r3, #16
 800cf70:	d053      	beq.n	800d01a <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	22ca      	movs	r2, #202	; 0xca
 800cf78:	625a      	str	r2, [r3, #36]	; 0x24
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	2253      	movs	r2, #83	; 0x53
 800cf80:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 f87e 	bl	800d084 <RTC_EnterInitMode>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800cf8c:	7bfb      	ldrb	r3, [r7, #15]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d124      	bne.n	800cfdc <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	6999      	ldr	r1, [r3, #24]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	4b26      	ldr	r3, [pc, #152]	; (800d038 <HAL_RTC_Init+0x108>)
 800cf9e:	400b      	ands	r3, r1
 800cfa0:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	6999      	ldr	r1, [r3, #24]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	685a      	ldr	r2, [r3, #4]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	691b      	ldr	r3, [r3, #16]
 800cfb0:	431a      	orrs	r2, r3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	699b      	ldr	r3, [r3, #24]
 800cfb6:	431a      	orrs	r2, r3
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	430a      	orrs	r2, r1
 800cfbe:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	0419      	lsls	r1, r3, #16
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	68da      	ldr	r2, [r3, #12]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	430a      	orrs	r2, r1
 800cfd0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 f88c 	bl	800d0f0 <RTC_ExitInitMode>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800cfdc:	7bfb      	ldrb	r3, [r7, #15]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d116      	bne.n	800d010 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	699a      	ldr	r2, [r3, #24]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800cff0:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	6999      	ldr	r1, [r3, #24]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6a1a      	ldr	r2, [r3, #32]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	69db      	ldr	r3, [r3, #28]
 800d000:	431a      	orrs	r2, r3
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	695b      	ldr	r3, [r3, #20]
 800d006:	431a      	orrs	r2, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	430a      	orrs	r2, r1
 800d00e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	22ff      	movs	r2, #255	; 0xff
 800d016:	625a      	str	r2, [r3, #36]	; 0x24
 800d018:	e001      	b.n	800d01e <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d01a:	2300      	movs	r3, #0
 800d01c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d01e:	7bfb      	ldrb	r3, [r7, #15]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d103      	bne.n	800d02c <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2201      	movs	r2, #1
 800d028:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800d02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3710      	adds	r7, #16
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	fb8fffbf 	.word	0xfb8fffbf

0800d03c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a0d      	ldr	r2, [pc, #52]	; (800d080 <HAL_RTC_WaitForSynchro+0x44>)
 800d04a:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d04c:	f7f7 f8c0 	bl	80041d0 <HAL_GetTick>
 800d050:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d052:	e009      	b.n	800d068 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d054:	f7f7 f8bc 	bl	80041d0 <HAL_GetTick>
 800d058:	4602      	mov	r2, r0
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	1ad3      	subs	r3, r2, r3
 800d05e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d062:	d901      	bls.n	800d068 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d064:	2303      	movs	r3, #3
 800d066:	e007      	b.n	800d078 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	68db      	ldr	r3, [r3, #12]
 800d06e:	f003 0320 	and.w	r3, r3, #32
 800d072:	2b00      	cmp	r3, #0
 800d074:	d0ee      	beq.n	800d054 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d076:	2300      	movs	r3, #0
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3710      	adds	r7, #16
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}
 800d080:	0001005f 	.word	0x0001005f

0800d084 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d08c:	2300      	movs	r3, #0
 800d08e:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	68db      	ldr	r3, [r3, #12]
 800d096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d123      	bne.n	800d0e6 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	68da      	ldr	r2, [r3, #12]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d0ac:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d0ae:	f7f7 f88f 	bl	80041d0 <HAL_GetTick>
 800d0b2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d0b4:	e00d      	b.n	800d0d2 <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d0b6:	f7f7 f88b 	bl	80041d0 <HAL_GetTick>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	1ad3      	subs	r3, r2, r3
 800d0c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d0c4:	d905      	bls.n	800d0d2 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800d0c6:	2303      	movs	r3, #3
 800d0c8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2203      	movs	r2, #3
 800d0ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d102      	bne.n	800d0e6 <RTC_EnterInitMode+0x62>
 800d0e0:	7bfb      	ldrb	r3, [r7, #15]
 800d0e2:	2b03      	cmp	r3, #3
 800d0e4:	d1e7      	bne.n	800d0b6 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800d0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3710      	adds	r7, #16
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}

0800d0f0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d0fc:	4b1a      	ldr	r3, [pc, #104]	; (800d168 <RTC_ExitInitMode+0x78>)
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	4a19      	ldr	r2, [pc, #100]	; (800d168 <RTC_ExitInitMode+0x78>)
 800d102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d106:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d108:	4b17      	ldr	r3, [pc, #92]	; (800d168 <RTC_ExitInitMode+0x78>)
 800d10a:	699b      	ldr	r3, [r3, #24]
 800d10c:	f003 0320 	and.w	r3, r3, #32
 800d110:	2b00      	cmp	r3, #0
 800d112:	d10c      	bne.n	800d12e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f7ff ff91 	bl	800d03c <HAL_RTC_WaitForSynchro>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d01e      	beq.n	800d15e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2203      	movs	r2, #3
 800d124:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d128:	2303      	movs	r3, #3
 800d12a:	73fb      	strb	r3, [r7, #15]
 800d12c:	e017      	b.n	800d15e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d12e:	4b0e      	ldr	r3, [pc, #56]	; (800d168 <RTC_ExitInitMode+0x78>)
 800d130:	699b      	ldr	r3, [r3, #24]
 800d132:	4a0d      	ldr	r2, [pc, #52]	; (800d168 <RTC_ExitInitMode+0x78>)
 800d134:	f023 0320 	bic.w	r3, r3, #32
 800d138:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f7ff ff7e 	bl	800d03c <HAL_RTC_WaitForSynchro>
 800d140:	4603      	mov	r3, r0
 800d142:	2b00      	cmp	r3, #0
 800d144:	d005      	beq.n	800d152 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2203      	movs	r2, #3
 800d14a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d14e:	2303      	movs	r3, #3
 800d150:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d152:	4b05      	ldr	r3, [pc, #20]	; (800d168 <RTC_ExitInitMode+0x78>)
 800d154:	699b      	ldr	r3, [r3, #24]
 800d156:	4a04      	ldr	r2, [pc, #16]	; (800d168 <RTC_ExitInitMode+0x78>)
 800d158:	f043 0320 	orr.w	r3, r3, #32
 800d15c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800d15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d160:	4618      	mov	r0, r3
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	58004000 	.word	0x58004000

0800d16c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d101      	bne.n	800d17e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d17a:	2301      	movs	r3, #1
 800d17c:	e042      	b.n	800d204 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d184:	2b00      	cmp	r3, #0
 800d186:	d106      	bne.n	800d196 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f7f6 fefb 	bl	8003f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2224      	movs	r2, #36	; 0x24
 800d19a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f022 0201 	bic.w	r2, r2, #1
 800d1ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 fd5c 	bl	800dc6c <UART_SetConfig>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d101      	bne.n	800d1be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	e022      	b.n	800d204 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d002      	beq.n	800d1cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f001 fbbc 	bl	800e944 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	685a      	ldr	r2, [r3, #4]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d1da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	689a      	ldr	r2, [r3, #8]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d1ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f042 0201 	orr.w	r2, r2, #1
 800d1fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f001 fc43 	bl	800ea88 <UART_CheckIdleState>
 800d202:	4603      	mov	r3, r0
}
 800d204:	4618      	mov	r0, r3
 800d206:	3708      	adds	r7, #8
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}

0800d20c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b08a      	sub	sp, #40	; 0x28
 800d210:	af02      	add	r7, sp, #8
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	603b      	str	r3, [r7, #0]
 800d218:	4613      	mov	r3, r2
 800d21a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d222:	2b20      	cmp	r3, #32
 800d224:	d17b      	bne.n	800d31e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d002      	beq.n	800d232 <HAL_UART_Transmit+0x26>
 800d22c:	88fb      	ldrh	r3, [r7, #6]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d101      	bne.n	800d236 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d232:	2301      	movs	r3, #1
 800d234:	e074      	b.n	800d320 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2200      	movs	r2, #0
 800d23a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2221      	movs	r2, #33	; 0x21
 800d242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d246:	f7f6 ffc3 	bl	80041d0 <HAL_GetTick>
 800d24a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	88fa      	ldrh	r2, [r7, #6]
 800d250:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	88fa      	ldrh	r2, [r7, #6]
 800d258:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d264:	d108      	bne.n	800d278 <HAL_UART_Transmit+0x6c>
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	691b      	ldr	r3, [r3, #16]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d104      	bne.n	800d278 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d26e:	2300      	movs	r3, #0
 800d270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	61bb      	str	r3, [r7, #24]
 800d276:	e003      	b.n	800d280 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d27c:	2300      	movs	r3, #0
 800d27e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d280:	e030      	b.n	800d2e4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	9300      	str	r3, [sp, #0]
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	2200      	movs	r2, #0
 800d28a:	2180      	movs	r1, #128	; 0x80
 800d28c:	68f8      	ldr	r0, [r7, #12]
 800d28e:	f001 fca5 	bl	800ebdc <UART_WaitOnFlagUntilTimeout>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d005      	beq.n	800d2a4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2220      	movs	r2, #32
 800d29c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d2a0:	2303      	movs	r3, #3
 800d2a2:	e03d      	b.n	800d320 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d10b      	bne.n	800d2c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	881b      	ldrh	r3, [r3, #0]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d2b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d2ba:	69bb      	ldr	r3, [r7, #24]
 800d2bc:	3302      	adds	r3, #2
 800d2be:	61bb      	str	r3, [r7, #24]
 800d2c0:	e007      	b.n	800d2d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	781a      	ldrb	r2, [r3, #0]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	b29a      	uxth	r2, r3
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d1c8      	bne.n	800d282 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	9300      	str	r3, [sp, #0]
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	2140      	movs	r1, #64	; 0x40
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	f001 fc6e 	bl	800ebdc <UART_WaitOnFlagUntilTimeout>
 800d300:	4603      	mov	r3, r0
 800d302:	2b00      	cmp	r3, #0
 800d304:	d005      	beq.n	800d312 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2220      	movs	r2, #32
 800d30a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d30e:	2303      	movs	r3, #3
 800d310:	e006      	b.n	800d320 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2220      	movs	r2, #32
 800d316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d31a:	2300      	movs	r3, #0
 800d31c:	e000      	b.n	800d320 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d31e:	2302      	movs	r3, #2
  }
}
 800d320:	4618      	mov	r0, r3
 800d322:	3720      	adds	r7, #32
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b08a      	sub	sp, #40	; 0x28
 800d32c:	af02      	add	r7, sp, #8
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	603b      	str	r3, [r7, #0]
 800d334:	4613      	mov	r3, r2
 800d336:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d33e:	2b20      	cmp	r3, #32
 800d340:	f040 80b5 	bne.w	800d4ae <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d002      	beq.n	800d350 <HAL_UART_Receive+0x28>
 800d34a:	88fb      	ldrh	r3, [r7, #6]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d101      	bne.n	800d354 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d350:	2301      	movs	r3, #1
 800d352:	e0ad      	b.n	800d4b0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2200      	movs	r2, #0
 800d358:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2222      	movs	r2, #34	; 0x22
 800d360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2200      	movs	r2, #0
 800d368:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d36a:	f7f6 ff31 	bl	80041d0 <HAL_GetTick>
 800d36e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	88fa      	ldrh	r2, [r7, #6]
 800d374:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	88fa      	ldrh	r2, [r7, #6]
 800d37c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d388:	d10e      	bne.n	800d3a8 <HAL_UART_Receive+0x80>
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d105      	bne.n	800d39e <HAL_UART_Receive+0x76>
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d398:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d39c:	e02d      	b.n	800d3fa <HAL_UART_Receive+0xd2>
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	22ff      	movs	r2, #255	; 0xff
 800d3a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3a6:	e028      	b.n	800d3fa <HAL_UART_Receive+0xd2>
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	689b      	ldr	r3, [r3, #8]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d10d      	bne.n	800d3cc <HAL_UART_Receive+0xa4>
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	691b      	ldr	r3, [r3, #16]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d104      	bne.n	800d3c2 <HAL_UART_Receive+0x9a>
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	22ff      	movs	r2, #255	; 0xff
 800d3bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3c0:	e01b      	b.n	800d3fa <HAL_UART_Receive+0xd2>
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	227f      	movs	r2, #127	; 0x7f
 800d3c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3ca:	e016      	b.n	800d3fa <HAL_UART_Receive+0xd2>
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	689b      	ldr	r3, [r3, #8]
 800d3d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d3d4:	d10d      	bne.n	800d3f2 <HAL_UART_Receive+0xca>
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	691b      	ldr	r3, [r3, #16]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d104      	bne.n	800d3e8 <HAL_UART_Receive+0xc0>
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	227f      	movs	r2, #127	; 0x7f
 800d3e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3e6:	e008      	b.n	800d3fa <HAL_UART_Receive+0xd2>
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	223f      	movs	r2, #63	; 0x3f
 800d3ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3f0:	e003      	b.n	800d3fa <HAL_UART_Receive+0xd2>
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d400:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	689b      	ldr	r3, [r3, #8]
 800d406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d40a:	d108      	bne.n	800d41e <HAL_UART_Receive+0xf6>
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	691b      	ldr	r3, [r3, #16]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d104      	bne.n	800d41e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800d414:	2300      	movs	r3, #0
 800d416:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	61bb      	str	r3, [r7, #24]
 800d41c:	e003      	b.n	800d426 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d422:	2300      	movs	r3, #0
 800d424:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d426:	e036      	b.n	800d496 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	9300      	str	r3, [sp, #0]
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	2200      	movs	r2, #0
 800d430:	2120      	movs	r1, #32
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f001 fbd2 	bl	800ebdc <UART_WaitOnFlagUntilTimeout>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d005      	beq.n	800d44a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2220      	movs	r2, #32
 800d442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800d446:	2303      	movs	r3, #3
 800d448:	e032      	b.n	800d4b0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800d44a:	69fb      	ldr	r3, [r7, #28]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d10c      	bne.n	800d46a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d456:	b29a      	uxth	r2, r3
 800d458:	8a7b      	ldrh	r3, [r7, #18]
 800d45a:	4013      	ands	r3, r2
 800d45c:	b29a      	uxth	r2, r3
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d462:	69bb      	ldr	r3, [r7, #24]
 800d464:	3302      	adds	r3, #2
 800d466:	61bb      	str	r3, [r7, #24]
 800d468:	e00c      	b.n	800d484 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d470:	b2da      	uxtb	r2, r3
 800d472:	8a7b      	ldrh	r3, [r7, #18]
 800d474:	b2db      	uxtb	r3, r3
 800d476:	4013      	ands	r3, r2
 800d478:	b2da      	uxtb	r2, r3
 800d47a:	69fb      	ldr	r3, [r7, #28]
 800d47c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	3301      	adds	r3, #1
 800d482:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	3b01      	subs	r3, #1
 800d48e:	b29a      	uxth	r2, r3
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d49c:	b29b      	uxth	r3, r3
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d1c2      	bne.n	800d428 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2220      	movs	r2, #32
 800d4a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	e000      	b.n	800d4b0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800d4ae:	2302      	movs	r3, #2
  }
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3720      	adds	r7, #32
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b0ba      	sub	sp, #232	; 0xe8
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	69db      	ldr	r3, [r3, #28]
 800d4c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	689b      	ldr	r3, [r3, #8]
 800d4da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d4de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d4e2:	f640 030f 	movw	r3, #2063	; 0x80f
 800d4e6:	4013      	ands	r3, r2
 800d4e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d4ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d11b      	bne.n	800d52c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d4f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4f8:	f003 0320 	and.w	r3, r3, #32
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d015      	beq.n	800d52c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d504:	f003 0320 	and.w	r3, r3, #32
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d105      	bne.n	800d518 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d50c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d514:	2b00      	cmp	r3, #0
 800d516:	d009      	beq.n	800d52c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	f000 8377 	beq.w	800dc10 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	4798      	blx	r3
      }
      return;
 800d52a:	e371      	b.n	800dc10 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d52c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d530:	2b00      	cmp	r3, #0
 800d532:	f000 8123 	beq.w	800d77c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d536:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d53a:	4b8d      	ldr	r3, [pc, #564]	; (800d770 <HAL_UART_IRQHandler+0x2b8>)
 800d53c:	4013      	ands	r3, r2
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d106      	bne.n	800d550 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d542:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d546:	4b8b      	ldr	r3, [pc, #556]	; (800d774 <HAL_UART_IRQHandler+0x2bc>)
 800d548:	4013      	ands	r3, r2
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	f000 8116 	beq.w	800d77c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d554:	f003 0301 	and.w	r3, r3, #1
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d011      	beq.n	800d580 <HAL_UART_IRQHandler+0xc8>
 800d55c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d564:	2b00      	cmp	r3, #0
 800d566:	d00b      	beq.n	800d580 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2201      	movs	r2, #1
 800d56e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d576:	f043 0201 	orr.w	r2, r3, #1
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d584:	f003 0302 	and.w	r3, r3, #2
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d011      	beq.n	800d5b0 <HAL_UART_IRQHandler+0xf8>
 800d58c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d590:	f003 0301 	and.w	r3, r3, #1
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00b      	beq.n	800d5b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	2202      	movs	r2, #2
 800d59e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5a6:	f043 0204 	orr.w	r2, r3, #4
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d5b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5b4:	f003 0304 	and.w	r3, r3, #4
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d011      	beq.n	800d5e0 <HAL_UART_IRQHandler+0x128>
 800d5bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d5c0:	f003 0301 	and.w	r3, r3, #1
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d00b      	beq.n	800d5e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	2204      	movs	r2, #4
 800d5ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5d6:	f043 0202 	orr.w	r2, r3, #2
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5e4:	f003 0308 	and.w	r3, r3, #8
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d017      	beq.n	800d61c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5f0:	f003 0320 	and.w	r3, r3, #32
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d105      	bne.n	800d604 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d5f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d5fc:	4b5c      	ldr	r3, [pc, #368]	; (800d770 <HAL_UART_IRQHandler+0x2b8>)
 800d5fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d600:	2b00      	cmp	r3, #0
 800d602:	d00b      	beq.n	800d61c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2208      	movs	r2, #8
 800d60a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d612:	f043 0208 	orr.w	r2, r3, #8
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d61c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d624:	2b00      	cmp	r3, #0
 800d626:	d012      	beq.n	800d64e <HAL_UART_IRQHandler+0x196>
 800d628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d62c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00c      	beq.n	800d64e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d63c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d644:	f043 0220 	orr.w	r2, r3, #32
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d654:	2b00      	cmp	r3, #0
 800d656:	f000 82dd 	beq.w	800dc14 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d65a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d65e:	f003 0320 	and.w	r3, r3, #32
 800d662:	2b00      	cmp	r3, #0
 800d664:	d013      	beq.n	800d68e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d66a:	f003 0320 	and.w	r3, r3, #32
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d105      	bne.n	800d67e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d007      	beq.n	800d68e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d682:	2b00      	cmp	r3, #0
 800d684:	d003      	beq.n	800d68e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d694:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	689b      	ldr	r3, [r3, #8]
 800d69e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6a2:	2b40      	cmp	r3, #64	; 0x40
 800d6a4:	d005      	beq.n	800d6b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d6a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d6aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d054      	beq.n	800d75c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f001 fafa 	bl	800ecac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6c2:	2b40      	cmp	r3, #64	; 0x40
 800d6c4:	d146      	bne.n	800d754 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	3308      	adds	r3, #8
 800d6cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d6d4:	e853 3f00 	ldrex	r3, [r3]
 800d6d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d6dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d6e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	3308      	adds	r3, #8
 800d6ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d6f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d6f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d6fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d702:	e841 2300 	strex	r3, r2, [r1]
 800d706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d70a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d1d9      	bne.n	800d6c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d017      	beq.n	800d74c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d722:	4a15      	ldr	r2, [pc, #84]	; (800d778 <HAL_UART_IRQHandler+0x2c0>)
 800d724:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7f8 fa75 	bl	8005c1c <HAL_DMA_Abort_IT>
 800d732:	4603      	mov	r3, r0
 800d734:	2b00      	cmp	r3, #0
 800d736:	d019      	beq.n	800d76c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d73e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d740:	687a      	ldr	r2, [r7, #4]
 800d742:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d746:	4610      	mov	r0, r2
 800d748:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d74a:	e00f      	b.n	800d76c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f000 fa77 	bl	800dc40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d752:	e00b      	b.n	800d76c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 fa73 	bl	800dc40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d75a:	e007      	b.n	800d76c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 fa6f 	bl	800dc40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2200      	movs	r2, #0
 800d766:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d76a:	e253      	b.n	800dc14 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d76c:	bf00      	nop
    return;
 800d76e:	e251      	b.n	800dc14 <HAL_UART_IRQHandler+0x75c>
 800d770:	10000001 	.word	0x10000001
 800d774:	04000120 	.word	0x04000120
 800d778:	0800ed79 	.word	0x0800ed79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d780:	2b01      	cmp	r3, #1
 800d782:	f040 81e7 	bne.w	800db54 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d78a:	f003 0310 	and.w	r3, r3, #16
 800d78e:	2b00      	cmp	r3, #0
 800d790:	f000 81e0 	beq.w	800db54 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d798:	f003 0310 	and.w	r3, r3, #16
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	f000 81d9 	beq.w	800db54 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2210      	movs	r2, #16
 800d7a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7b4:	2b40      	cmp	r3, #64	; 0x40
 800d7b6:	f040 8151 	bne.w	800da5c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4a96      	ldr	r2, [pc, #600]	; (800da1c <HAL_UART_IRQHandler+0x564>)
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d068      	beq.n	800d89a <HAL_UART_IRQHandler+0x3e2>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a93      	ldr	r2, [pc, #588]	; (800da20 <HAL_UART_IRQHandler+0x568>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d061      	beq.n	800d89a <HAL_UART_IRQHandler+0x3e2>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4a91      	ldr	r2, [pc, #580]	; (800da24 <HAL_UART_IRQHandler+0x56c>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d05a      	beq.n	800d89a <HAL_UART_IRQHandler+0x3e2>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a8e      	ldr	r2, [pc, #568]	; (800da28 <HAL_UART_IRQHandler+0x570>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d053      	beq.n	800d89a <HAL_UART_IRQHandler+0x3e2>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	4a8c      	ldr	r2, [pc, #560]	; (800da2c <HAL_UART_IRQHandler+0x574>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d04c      	beq.n	800d89a <HAL_UART_IRQHandler+0x3e2>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	4a89      	ldr	r2, [pc, #548]	; (800da30 <HAL_UART_IRQHandler+0x578>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d045      	beq.n	800d89a <HAL_UART_IRQHandler+0x3e2>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4a87      	ldr	r2, [pc, #540]	; (800da34 <HAL_UART_IRQHandler+0x57c>)
 800d818:	4293      	cmp	r3, r2
 800d81a:	d03e      	beq.n	800d89a <HAL_UART_IRQHandler+0x3e2>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4a84      	ldr	r2, [pc, #528]	; (800da38 <HAL_UART_IRQHandler+0x580>)
 800d826:	4293      	cmp	r3, r2
 800d828:	d037      	beq.n	800d89a <HAL_UART_IRQHandler+0x3e2>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a82      	ldr	r2, [pc, #520]	; (800da3c <HAL_UART_IRQHandler+0x584>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d030      	beq.n	800d89a <HAL_UART_IRQHandler+0x3e2>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a7f      	ldr	r2, [pc, #508]	; (800da40 <HAL_UART_IRQHandler+0x588>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d029      	beq.n	800d89a <HAL_UART_IRQHandler+0x3e2>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	4a7d      	ldr	r2, [pc, #500]	; (800da44 <HAL_UART_IRQHandler+0x58c>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d022      	beq.n	800d89a <HAL_UART_IRQHandler+0x3e2>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4a7a      	ldr	r2, [pc, #488]	; (800da48 <HAL_UART_IRQHandler+0x590>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d01b      	beq.n	800d89a <HAL_UART_IRQHandler+0x3e2>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4a78      	ldr	r2, [pc, #480]	; (800da4c <HAL_UART_IRQHandler+0x594>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d014      	beq.n	800d89a <HAL_UART_IRQHandler+0x3e2>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a75      	ldr	r2, [pc, #468]	; (800da50 <HAL_UART_IRQHandler+0x598>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d00d      	beq.n	800d89a <HAL_UART_IRQHandler+0x3e2>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4a73      	ldr	r2, [pc, #460]	; (800da54 <HAL_UART_IRQHandler+0x59c>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d006      	beq.n	800d89a <HAL_UART_IRQHandler+0x3e2>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a70      	ldr	r2, [pc, #448]	; (800da58 <HAL_UART_IRQHandler+0x5a0>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d106      	bne.n	800d8a8 <HAL_UART_IRQHandler+0x3f0>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	e005      	b.n	800d8b4 <HAL_UART_IRQHandler+0x3fc>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d8b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	f000 81ab 	beq.w	800dc18 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d8c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	f080 81a3 	bcs.w	800dc18 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d8d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8e2:	69db      	ldr	r3, [r3, #28]
 800d8e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8e8:	f000 8087 	beq.w	800d9fa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d8f8:	e853 3f00 	ldrex	r3, [r3]
 800d8fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d900:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d908:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	461a      	mov	r2, r3
 800d912:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d916:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d91a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d922:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d926:	e841 2300 	strex	r3, r2, [r1]
 800d92a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d92e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d932:	2b00      	cmp	r3, #0
 800d934:	d1da      	bne.n	800d8ec <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	3308      	adds	r3, #8
 800d93c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d93e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d940:	e853 3f00 	ldrex	r3, [r3]
 800d944:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d948:	f023 0301 	bic.w	r3, r3, #1
 800d94c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	3308      	adds	r3, #8
 800d956:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d95a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d95e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d960:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d962:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d966:	e841 2300 	strex	r3, r2, [r1]
 800d96a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d96c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d1e1      	bne.n	800d936 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	3308      	adds	r3, #8
 800d978:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d97a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d97c:	e853 3f00 	ldrex	r3, [r3]
 800d980:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	3308      	adds	r3, #8
 800d992:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d996:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d998:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d99a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d99c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d99e:	e841 2300 	strex	r3, r2, [r1]
 800d9a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d9a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d1e3      	bne.n	800d972 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2220      	movs	r2, #32
 800d9ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9c0:	e853 3f00 	ldrex	r3, [r3]
 800d9c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d9c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9c8:	f023 0310 	bic.w	r3, r3, #16
 800d9cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d9da:	65bb      	str	r3, [r7, #88]	; 0x58
 800d9dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d9e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d9e2:	e841 2300 	strex	r3, r2, [r1]
 800d9e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d9e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d1e4      	bne.n	800d9b8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7f7 fdf3 	bl	80055e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2202      	movs	r2, #2
 800d9fe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	1ad3      	subs	r3, r2, r3
 800da10:	b29b      	uxth	r3, r3
 800da12:	4619      	mov	r1, r3
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f000 f91d 	bl	800dc54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800da1a:	e0fd      	b.n	800dc18 <HAL_UART_IRQHandler+0x760>
 800da1c:	40020010 	.word	0x40020010
 800da20:	40020028 	.word	0x40020028
 800da24:	40020040 	.word	0x40020040
 800da28:	40020058 	.word	0x40020058
 800da2c:	40020070 	.word	0x40020070
 800da30:	40020088 	.word	0x40020088
 800da34:	400200a0 	.word	0x400200a0
 800da38:	400200b8 	.word	0x400200b8
 800da3c:	40020410 	.word	0x40020410
 800da40:	40020428 	.word	0x40020428
 800da44:	40020440 	.word	0x40020440
 800da48:	40020458 	.word	0x40020458
 800da4c:	40020470 	.word	0x40020470
 800da50:	40020488 	.word	0x40020488
 800da54:	400204a0 	.word	0x400204a0
 800da58:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da68:	b29b      	uxth	r3, r3
 800da6a:	1ad3      	subs	r3, r2, r3
 800da6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da76:	b29b      	uxth	r3, r3
 800da78:	2b00      	cmp	r3, #0
 800da7a:	f000 80cf 	beq.w	800dc1c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800da7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800da82:	2b00      	cmp	r3, #0
 800da84:	f000 80ca 	beq.w	800dc1c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da90:	e853 3f00 	ldrex	r3, [r3]
 800da94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800da96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800da9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	461a      	mov	r2, r3
 800daa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800daaa:	647b      	str	r3, [r7, #68]	; 0x44
 800daac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dab0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dab2:	e841 2300 	strex	r3, r2, [r1]
 800dab6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d1e4      	bne.n	800da88 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	3308      	adds	r3, #8
 800dac4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac8:	e853 3f00 	ldrex	r3, [r3]
 800dacc:	623b      	str	r3, [r7, #32]
   return(result);
 800dace:	6a3a      	ldr	r2, [r7, #32]
 800dad0:	4b55      	ldr	r3, [pc, #340]	; (800dc28 <HAL_UART_IRQHandler+0x770>)
 800dad2:	4013      	ands	r3, r2
 800dad4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	3308      	adds	r3, #8
 800dade:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dae2:	633a      	str	r2, [r7, #48]	; 0x30
 800dae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daea:	e841 2300 	strex	r3, r2, [r1]
 800daee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800daf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d1e3      	bne.n	800dabe <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2220      	movs	r2, #32
 800dafa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2200      	movs	r2, #0
 800db08:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	e853 3f00 	ldrex	r3, [r3]
 800db16:	60fb      	str	r3, [r7, #12]
   return(result);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f023 0310 	bic.w	r3, r3, #16
 800db1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	461a      	mov	r2, r3
 800db28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800db2c:	61fb      	str	r3, [r7, #28]
 800db2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db30:	69b9      	ldr	r1, [r7, #24]
 800db32:	69fa      	ldr	r2, [r7, #28]
 800db34:	e841 2300 	strex	r3, r2, [r1]
 800db38:	617b      	str	r3, [r7, #20]
   return(result);
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d1e4      	bne.n	800db0a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2202      	movs	r2, #2
 800db44:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800db46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800db4a:	4619      	mov	r1, r3
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f000 f881 	bl	800dc54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800db52:	e063      	b.n	800dc1c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800db54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d00e      	beq.n	800db7e <HAL_UART_IRQHandler+0x6c6>
 800db60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d008      	beq.n	800db7e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800db74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f001 f93f 	bl	800edfa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800db7c:	e051      	b.n	800dc22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800db7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db86:	2b00      	cmp	r3, #0
 800db88:	d014      	beq.n	800dbb4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800db8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db92:	2b00      	cmp	r3, #0
 800db94:	d105      	bne.n	800dba2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800db96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d008      	beq.n	800dbb4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d03a      	beq.n	800dc20 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	4798      	blx	r3
    }
    return;
 800dbb2:	e035      	b.n	800dc20 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dbb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d009      	beq.n	800dbd4 <HAL_UART_IRQHandler+0x71c>
 800dbc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d003      	beq.n	800dbd4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f001 f8e9 	bl	800eda4 <UART_EndTransmit_IT>
    return;
 800dbd2:	e026      	b.n	800dc22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dbd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d009      	beq.n	800dbf4 <HAL_UART_IRQHandler+0x73c>
 800dbe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbe4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d003      	beq.n	800dbf4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f001 f918 	bl	800ee22 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dbf2:	e016      	b.n	800dc22 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dbf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d010      	beq.n	800dc22 <HAL_UART_IRQHandler+0x76a>
 800dc00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	da0c      	bge.n	800dc22 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f001 f900 	bl	800ee0e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dc0e:	e008      	b.n	800dc22 <HAL_UART_IRQHandler+0x76a>
      return;
 800dc10:	bf00      	nop
 800dc12:	e006      	b.n	800dc22 <HAL_UART_IRQHandler+0x76a>
    return;
 800dc14:	bf00      	nop
 800dc16:	e004      	b.n	800dc22 <HAL_UART_IRQHandler+0x76a>
      return;
 800dc18:	bf00      	nop
 800dc1a:	e002      	b.n	800dc22 <HAL_UART_IRQHandler+0x76a>
      return;
 800dc1c:	bf00      	nop
 800dc1e:	e000      	b.n	800dc22 <HAL_UART_IRQHandler+0x76a>
    return;
 800dc20:	bf00      	nop
  }
}
 800dc22:	37e8      	adds	r7, #232	; 0xe8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	effffffe 	.word	0xeffffffe

0800dc2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dc34:	bf00      	nop
 800dc36:	370c      	adds	r7, #12
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr

0800dc40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dc48:	bf00      	nop
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr

0800dc54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dc60:	bf00      	nop
 800dc62:	370c      	adds	r7, #12
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr

0800dc6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dc6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc70:	b092      	sub	sp, #72	; 0x48
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dc76:	2300      	movs	r3, #0
 800dc78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	689a      	ldr	r2, [r3, #8]
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	691b      	ldr	r3, [r3, #16]
 800dc84:	431a      	orrs	r2, r3
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	695b      	ldr	r3, [r3, #20]
 800dc8a:	431a      	orrs	r2, r3
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	69db      	ldr	r3, [r3, #28]
 800dc90:	4313      	orrs	r3, r2
 800dc92:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	4bbe      	ldr	r3, [pc, #760]	; (800df94 <UART_SetConfig+0x328>)
 800dc9c:	4013      	ands	r3, r2
 800dc9e:	697a      	ldr	r2, [r7, #20]
 800dca0:	6812      	ldr	r2, [r2, #0]
 800dca2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dca4:	430b      	orrs	r3, r1
 800dca6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	68da      	ldr	r2, [r3, #12]
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	430a      	orrs	r2, r1
 800dcbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	699b      	ldr	r3, [r3, #24]
 800dcc2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	4ab3      	ldr	r2, [pc, #716]	; (800df98 <UART_SetConfig+0x32c>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d004      	beq.n	800dcd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	6a1b      	ldr	r3, [r3, #32]
 800dcd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dcd4:	4313      	orrs	r3, r2
 800dcd6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	689a      	ldr	r2, [r3, #8]
 800dcde:	4baf      	ldr	r3, [pc, #700]	; (800df9c <UART_SetConfig+0x330>)
 800dce0:	4013      	ands	r3, r2
 800dce2:	697a      	ldr	r2, [r7, #20]
 800dce4:	6812      	ldr	r2, [r2, #0]
 800dce6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dce8:	430b      	orrs	r3, r1
 800dcea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf2:	f023 010f 	bic.w	r1, r3, #15
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	430a      	orrs	r2, r1
 800dd00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4aa6      	ldr	r2, [pc, #664]	; (800dfa0 <UART_SetConfig+0x334>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d177      	bne.n	800ddfc <UART_SetConfig+0x190>
 800dd0c:	4ba5      	ldr	r3, [pc, #660]	; (800dfa4 <UART_SetConfig+0x338>)
 800dd0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd14:	2b28      	cmp	r3, #40	; 0x28
 800dd16:	d86d      	bhi.n	800ddf4 <UART_SetConfig+0x188>
 800dd18:	a201      	add	r2, pc, #4	; (adr r2, 800dd20 <UART_SetConfig+0xb4>)
 800dd1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd1e:	bf00      	nop
 800dd20:	0800ddc5 	.word	0x0800ddc5
 800dd24:	0800ddf5 	.word	0x0800ddf5
 800dd28:	0800ddf5 	.word	0x0800ddf5
 800dd2c:	0800ddf5 	.word	0x0800ddf5
 800dd30:	0800ddf5 	.word	0x0800ddf5
 800dd34:	0800ddf5 	.word	0x0800ddf5
 800dd38:	0800ddf5 	.word	0x0800ddf5
 800dd3c:	0800ddf5 	.word	0x0800ddf5
 800dd40:	0800ddcd 	.word	0x0800ddcd
 800dd44:	0800ddf5 	.word	0x0800ddf5
 800dd48:	0800ddf5 	.word	0x0800ddf5
 800dd4c:	0800ddf5 	.word	0x0800ddf5
 800dd50:	0800ddf5 	.word	0x0800ddf5
 800dd54:	0800ddf5 	.word	0x0800ddf5
 800dd58:	0800ddf5 	.word	0x0800ddf5
 800dd5c:	0800ddf5 	.word	0x0800ddf5
 800dd60:	0800ddd5 	.word	0x0800ddd5
 800dd64:	0800ddf5 	.word	0x0800ddf5
 800dd68:	0800ddf5 	.word	0x0800ddf5
 800dd6c:	0800ddf5 	.word	0x0800ddf5
 800dd70:	0800ddf5 	.word	0x0800ddf5
 800dd74:	0800ddf5 	.word	0x0800ddf5
 800dd78:	0800ddf5 	.word	0x0800ddf5
 800dd7c:	0800ddf5 	.word	0x0800ddf5
 800dd80:	0800dddd 	.word	0x0800dddd
 800dd84:	0800ddf5 	.word	0x0800ddf5
 800dd88:	0800ddf5 	.word	0x0800ddf5
 800dd8c:	0800ddf5 	.word	0x0800ddf5
 800dd90:	0800ddf5 	.word	0x0800ddf5
 800dd94:	0800ddf5 	.word	0x0800ddf5
 800dd98:	0800ddf5 	.word	0x0800ddf5
 800dd9c:	0800ddf5 	.word	0x0800ddf5
 800dda0:	0800dde5 	.word	0x0800dde5
 800dda4:	0800ddf5 	.word	0x0800ddf5
 800dda8:	0800ddf5 	.word	0x0800ddf5
 800ddac:	0800ddf5 	.word	0x0800ddf5
 800ddb0:	0800ddf5 	.word	0x0800ddf5
 800ddb4:	0800ddf5 	.word	0x0800ddf5
 800ddb8:	0800ddf5 	.word	0x0800ddf5
 800ddbc:	0800ddf5 	.word	0x0800ddf5
 800ddc0:	0800dded 	.word	0x0800dded
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddca:	e326      	b.n	800e41a <UART_SetConfig+0x7ae>
 800ddcc:	2304      	movs	r3, #4
 800ddce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddd2:	e322      	b.n	800e41a <UART_SetConfig+0x7ae>
 800ddd4:	2308      	movs	r3, #8
 800ddd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddda:	e31e      	b.n	800e41a <UART_SetConfig+0x7ae>
 800dddc:	2310      	movs	r3, #16
 800ddde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dde2:	e31a      	b.n	800e41a <UART_SetConfig+0x7ae>
 800dde4:	2320      	movs	r3, #32
 800dde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddea:	e316      	b.n	800e41a <UART_SetConfig+0x7ae>
 800ddec:	2340      	movs	r3, #64	; 0x40
 800ddee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddf2:	e312      	b.n	800e41a <UART_SetConfig+0x7ae>
 800ddf4:	2380      	movs	r3, #128	; 0x80
 800ddf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddfa:	e30e      	b.n	800e41a <UART_SetConfig+0x7ae>
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4a69      	ldr	r2, [pc, #420]	; (800dfa8 <UART_SetConfig+0x33c>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d130      	bne.n	800de68 <UART_SetConfig+0x1fc>
 800de06:	4b67      	ldr	r3, [pc, #412]	; (800dfa4 <UART_SetConfig+0x338>)
 800de08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de0a:	f003 0307 	and.w	r3, r3, #7
 800de0e:	2b05      	cmp	r3, #5
 800de10:	d826      	bhi.n	800de60 <UART_SetConfig+0x1f4>
 800de12:	a201      	add	r2, pc, #4	; (adr r2, 800de18 <UART_SetConfig+0x1ac>)
 800de14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de18:	0800de31 	.word	0x0800de31
 800de1c:	0800de39 	.word	0x0800de39
 800de20:	0800de41 	.word	0x0800de41
 800de24:	0800de49 	.word	0x0800de49
 800de28:	0800de51 	.word	0x0800de51
 800de2c:	0800de59 	.word	0x0800de59
 800de30:	2300      	movs	r3, #0
 800de32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de36:	e2f0      	b.n	800e41a <UART_SetConfig+0x7ae>
 800de38:	2304      	movs	r3, #4
 800de3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de3e:	e2ec      	b.n	800e41a <UART_SetConfig+0x7ae>
 800de40:	2308      	movs	r3, #8
 800de42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de46:	e2e8      	b.n	800e41a <UART_SetConfig+0x7ae>
 800de48:	2310      	movs	r3, #16
 800de4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4e:	e2e4      	b.n	800e41a <UART_SetConfig+0x7ae>
 800de50:	2320      	movs	r3, #32
 800de52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de56:	e2e0      	b.n	800e41a <UART_SetConfig+0x7ae>
 800de58:	2340      	movs	r3, #64	; 0x40
 800de5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de5e:	e2dc      	b.n	800e41a <UART_SetConfig+0x7ae>
 800de60:	2380      	movs	r3, #128	; 0x80
 800de62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de66:	e2d8      	b.n	800e41a <UART_SetConfig+0x7ae>
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a4f      	ldr	r2, [pc, #316]	; (800dfac <UART_SetConfig+0x340>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d130      	bne.n	800ded4 <UART_SetConfig+0x268>
 800de72:	4b4c      	ldr	r3, [pc, #304]	; (800dfa4 <UART_SetConfig+0x338>)
 800de74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de76:	f003 0307 	and.w	r3, r3, #7
 800de7a:	2b05      	cmp	r3, #5
 800de7c:	d826      	bhi.n	800decc <UART_SetConfig+0x260>
 800de7e:	a201      	add	r2, pc, #4	; (adr r2, 800de84 <UART_SetConfig+0x218>)
 800de80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de84:	0800de9d 	.word	0x0800de9d
 800de88:	0800dea5 	.word	0x0800dea5
 800de8c:	0800dead 	.word	0x0800dead
 800de90:	0800deb5 	.word	0x0800deb5
 800de94:	0800debd 	.word	0x0800debd
 800de98:	0800dec5 	.word	0x0800dec5
 800de9c:	2300      	movs	r3, #0
 800de9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dea2:	e2ba      	b.n	800e41a <UART_SetConfig+0x7ae>
 800dea4:	2304      	movs	r3, #4
 800dea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deaa:	e2b6      	b.n	800e41a <UART_SetConfig+0x7ae>
 800deac:	2308      	movs	r3, #8
 800deae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb2:	e2b2      	b.n	800e41a <UART_SetConfig+0x7ae>
 800deb4:	2310      	movs	r3, #16
 800deb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deba:	e2ae      	b.n	800e41a <UART_SetConfig+0x7ae>
 800debc:	2320      	movs	r3, #32
 800debe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dec2:	e2aa      	b.n	800e41a <UART_SetConfig+0x7ae>
 800dec4:	2340      	movs	r3, #64	; 0x40
 800dec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deca:	e2a6      	b.n	800e41a <UART_SetConfig+0x7ae>
 800decc:	2380      	movs	r3, #128	; 0x80
 800dece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ded2:	e2a2      	b.n	800e41a <UART_SetConfig+0x7ae>
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a35      	ldr	r2, [pc, #212]	; (800dfb0 <UART_SetConfig+0x344>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d130      	bne.n	800df40 <UART_SetConfig+0x2d4>
 800dede:	4b31      	ldr	r3, [pc, #196]	; (800dfa4 <UART_SetConfig+0x338>)
 800dee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dee2:	f003 0307 	and.w	r3, r3, #7
 800dee6:	2b05      	cmp	r3, #5
 800dee8:	d826      	bhi.n	800df38 <UART_SetConfig+0x2cc>
 800deea:	a201      	add	r2, pc, #4	; (adr r2, 800def0 <UART_SetConfig+0x284>)
 800deec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def0:	0800df09 	.word	0x0800df09
 800def4:	0800df11 	.word	0x0800df11
 800def8:	0800df19 	.word	0x0800df19
 800defc:	0800df21 	.word	0x0800df21
 800df00:	0800df29 	.word	0x0800df29
 800df04:	0800df31 	.word	0x0800df31
 800df08:	2300      	movs	r3, #0
 800df0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df0e:	e284      	b.n	800e41a <UART_SetConfig+0x7ae>
 800df10:	2304      	movs	r3, #4
 800df12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df16:	e280      	b.n	800e41a <UART_SetConfig+0x7ae>
 800df18:	2308      	movs	r3, #8
 800df1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df1e:	e27c      	b.n	800e41a <UART_SetConfig+0x7ae>
 800df20:	2310      	movs	r3, #16
 800df22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df26:	e278      	b.n	800e41a <UART_SetConfig+0x7ae>
 800df28:	2320      	movs	r3, #32
 800df2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df2e:	e274      	b.n	800e41a <UART_SetConfig+0x7ae>
 800df30:	2340      	movs	r3, #64	; 0x40
 800df32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df36:	e270      	b.n	800e41a <UART_SetConfig+0x7ae>
 800df38:	2380      	movs	r3, #128	; 0x80
 800df3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df3e:	e26c      	b.n	800e41a <UART_SetConfig+0x7ae>
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4a1b      	ldr	r2, [pc, #108]	; (800dfb4 <UART_SetConfig+0x348>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d142      	bne.n	800dfd0 <UART_SetConfig+0x364>
 800df4a:	4b16      	ldr	r3, [pc, #88]	; (800dfa4 <UART_SetConfig+0x338>)
 800df4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df4e:	f003 0307 	and.w	r3, r3, #7
 800df52:	2b05      	cmp	r3, #5
 800df54:	d838      	bhi.n	800dfc8 <UART_SetConfig+0x35c>
 800df56:	a201      	add	r2, pc, #4	; (adr r2, 800df5c <UART_SetConfig+0x2f0>)
 800df58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df5c:	0800df75 	.word	0x0800df75
 800df60:	0800df7d 	.word	0x0800df7d
 800df64:	0800df85 	.word	0x0800df85
 800df68:	0800df8d 	.word	0x0800df8d
 800df6c:	0800dfb9 	.word	0x0800dfb9
 800df70:	0800dfc1 	.word	0x0800dfc1
 800df74:	2300      	movs	r3, #0
 800df76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df7a:	e24e      	b.n	800e41a <UART_SetConfig+0x7ae>
 800df7c:	2304      	movs	r3, #4
 800df7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df82:	e24a      	b.n	800e41a <UART_SetConfig+0x7ae>
 800df84:	2308      	movs	r3, #8
 800df86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df8a:	e246      	b.n	800e41a <UART_SetConfig+0x7ae>
 800df8c:	2310      	movs	r3, #16
 800df8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df92:	e242      	b.n	800e41a <UART_SetConfig+0x7ae>
 800df94:	cfff69f3 	.word	0xcfff69f3
 800df98:	58000c00 	.word	0x58000c00
 800df9c:	11fff4ff 	.word	0x11fff4ff
 800dfa0:	40011000 	.word	0x40011000
 800dfa4:	58024400 	.word	0x58024400
 800dfa8:	40004400 	.word	0x40004400
 800dfac:	40004800 	.word	0x40004800
 800dfb0:	40004c00 	.word	0x40004c00
 800dfb4:	40005000 	.word	0x40005000
 800dfb8:	2320      	movs	r3, #32
 800dfba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfbe:	e22c      	b.n	800e41a <UART_SetConfig+0x7ae>
 800dfc0:	2340      	movs	r3, #64	; 0x40
 800dfc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfc6:	e228      	b.n	800e41a <UART_SetConfig+0x7ae>
 800dfc8:	2380      	movs	r3, #128	; 0x80
 800dfca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfce:	e224      	b.n	800e41a <UART_SetConfig+0x7ae>
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4ab1      	ldr	r2, [pc, #708]	; (800e29c <UART_SetConfig+0x630>)
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d176      	bne.n	800e0c8 <UART_SetConfig+0x45c>
 800dfda:	4bb1      	ldr	r3, [pc, #708]	; (800e2a0 <UART_SetConfig+0x634>)
 800dfdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dfe2:	2b28      	cmp	r3, #40	; 0x28
 800dfe4:	d86c      	bhi.n	800e0c0 <UART_SetConfig+0x454>
 800dfe6:	a201      	add	r2, pc, #4	; (adr r2, 800dfec <UART_SetConfig+0x380>)
 800dfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfec:	0800e091 	.word	0x0800e091
 800dff0:	0800e0c1 	.word	0x0800e0c1
 800dff4:	0800e0c1 	.word	0x0800e0c1
 800dff8:	0800e0c1 	.word	0x0800e0c1
 800dffc:	0800e0c1 	.word	0x0800e0c1
 800e000:	0800e0c1 	.word	0x0800e0c1
 800e004:	0800e0c1 	.word	0x0800e0c1
 800e008:	0800e0c1 	.word	0x0800e0c1
 800e00c:	0800e099 	.word	0x0800e099
 800e010:	0800e0c1 	.word	0x0800e0c1
 800e014:	0800e0c1 	.word	0x0800e0c1
 800e018:	0800e0c1 	.word	0x0800e0c1
 800e01c:	0800e0c1 	.word	0x0800e0c1
 800e020:	0800e0c1 	.word	0x0800e0c1
 800e024:	0800e0c1 	.word	0x0800e0c1
 800e028:	0800e0c1 	.word	0x0800e0c1
 800e02c:	0800e0a1 	.word	0x0800e0a1
 800e030:	0800e0c1 	.word	0x0800e0c1
 800e034:	0800e0c1 	.word	0x0800e0c1
 800e038:	0800e0c1 	.word	0x0800e0c1
 800e03c:	0800e0c1 	.word	0x0800e0c1
 800e040:	0800e0c1 	.word	0x0800e0c1
 800e044:	0800e0c1 	.word	0x0800e0c1
 800e048:	0800e0c1 	.word	0x0800e0c1
 800e04c:	0800e0a9 	.word	0x0800e0a9
 800e050:	0800e0c1 	.word	0x0800e0c1
 800e054:	0800e0c1 	.word	0x0800e0c1
 800e058:	0800e0c1 	.word	0x0800e0c1
 800e05c:	0800e0c1 	.word	0x0800e0c1
 800e060:	0800e0c1 	.word	0x0800e0c1
 800e064:	0800e0c1 	.word	0x0800e0c1
 800e068:	0800e0c1 	.word	0x0800e0c1
 800e06c:	0800e0b1 	.word	0x0800e0b1
 800e070:	0800e0c1 	.word	0x0800e0c1
 800e074:	0800e0c1 	.word	0x0800e0c1
 800e078:	0800e0c1 	.word	0x0800e0c1
 800e07c:	0800e0c1 	.word	0x0800e0c1
 800e080:	0800e0c1 	.word	0x0800e0c1
 800e084:	0800e0c1 	.word	0x0800e0c1
 800e088:	0800e0c1 	.word	0x0800e0c1
 800e08c:	0800e0b9 	.word	0x0800e0b9
 800e090:	2301      	movs	r3, #1
 800e092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e096:	e1c0      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e098:	2304      	movs	r3, #4
 800e09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e09e:	e1bc      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e0a0:	2308      	movs	r3, #8
 800e0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0a6:	e1b8      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e0a8:	2310      	movs	r3, #16
 800e0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ae:	e1b4      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e0b0:	2320      	movs	r3, #32
 800e0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0b6:	e1b0      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e0b8:	2340      	movs	r3, #64	; 0x40
 800e0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0be:	e1ac      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e0c0:	2380      	movs	r3, #128	; 0x80
 800e0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0c6:	e1a8      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	4a75      	ldr	r2, [pc, #468]	; (800e2a4 <UART_SetConfig+0x638>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d130      	bne.n	800e134 <UART_SetConfig+0x4c8>
 800e0d2:	4b73      	ldr	r3, [pc, #460]	; (800e2a0 <UART_SetConfig+0x634>)
 800e0d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0d6:	f003 0307 	and.w	r3, r3, #7
 800e0da:	2b05      	cmp	r3, #5
 800e0dc:	d826      	bhi.n	800e12c <UART_SetConfig+0x4c0>
 800e0de:	a201      	add	r2, pc, #4	; (adr r2, 800e0e4 <UART_SetConfig+0x478>)
 800e0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0e4:	0800e0fd 	.word	0x0800e0fd
 800e0e8:	0800e105 	.word	0x0800e105
 800e0ec:	0800e10d 	.word	0x0800e10d
 800e0f0:	0800e115 	.word	0x0800e115
 800e0f4:	0800e11d 	.word	0x0800e11d
 800e0f8:	0800e125 	.word	0x0800e125
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e102:	e18a      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e104:	2304      	movs	r3, #4
 800e106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10a:	e186      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e10c:	2308      	movs	r3, #8
 800e10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e112:	e182      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e114:	2310      	movs	r3, #16
 800e116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e11a:	e17e      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e11c:	2320      	movs	r3, #32
 800e11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e122:	e17a      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e124:	2340      	movs	r3, #64	; 0x40
 800e126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e12a:	e176      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e12c:	2380      	movs	r3, #128	; 0x80
 800e12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e132:	e172      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a5b      	ldr	r2, [pc, #364]	; (800e2a8 <UART_SetConfig+0x63c>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d130      	bne.n	800e1a0 <UART_SetConfig+0x534>
 800e13e:	4b58      	ldr	r3, [pc, #352]	; (800e2a0 <UART_SetConfig+0x634>)
 800e140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e142:	f003 0307 	and.w	r3, r3, #7
 800e146:	2b05      	cmp	r3, #5
 800e148:	d826      	bhi.n	800e198 <UART_SetConfig+0x52c>
 800e14a:	a201      	add	r2, pc, #4	; (adr r2, 800e150 <UART_SetConfig+0x4e4>)
 800e14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e150:	0800e169 	.word	0x0800e169
 800e154:	0800e171 	.word	0x0800e171
 800e158:	0800e179 	.word	0x0800e179
 800e15c:	0800e181 	.word	0x0800e181
 800e160:	0800e189 	.word	0x0800e189
 800e164:	0800e191 	.word	0x0800e191
 800e168:	2300      	movs	r3, #0
 800e16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e16e:	e154      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e170:	2304      	movs	r3, #4
 800e172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e176:	e150      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e178:	2308      	movs	r3, #8
 800e17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17e:	e14c      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e180:	2310      	movs	r3, #16
 800e182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e186:	e148      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e188:	2320      	movs	r3, #32
 800e18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18e:	e144      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e190:	2340      	movs	r3, #64	; 0x40
 800e192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e196:	e140      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e198:	2380      	movs	r3, #128	; 0x80
 800e19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e19e:	e13c      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	4a41      	ldr	r2, [pc, #260]	; (800e2ac <UART_SetConfig+0x640>)
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	f040 8082 	bne.w	800e2b0 <UART_SetConfig+0x644>
 800e1ac:	4b3c      	ldr	r3, [pc, #240]	; (800e2a0 <UART_SetConfig+0x634>)
 800e1ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e1b4:	2b28      	cmp	r3, #40	; 0x28
 800e1b6:	d86d      	bhi.n	800e294 <UART_SetConfig+0x628>
 800e1b8:	a201      	add	r2, pc, #4	; (adr r2, 800e1c0 <UART_SetConfig+0x554>)
 800e1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1be:	bf00      	nop
 800e1c0:	0800e265 	.word	0x0800e265
 800e1c4:	0800e295 	.word	0x0800e295
 800e1c8:	0800e295 	.word	0x0800e295
 800e1cc:	0800e295 	.word	0x0800e295
 800e1d0:	0800e295 	.word	0x0800e295
 800e1d4:	0800e295 	.word	0x0800e295
 800e1d8:	0800e295 	.word	0x0800e295
 800e1dc:	0800e295 	.word	0x0800e295
 800e1e0:	0800e26d 	.word	0x0800e26d
 800e1e4:	0800e295 	.word	0x0800e295
 800e1e8:	0800e295 	.word	0x0800e295
 800e1ec:	0800e295 	.word	0x0800e295
 800e1f0:	0800e295 	.word	0x0800e295
 800e1f4:	0800e295 	.word	0x0800e295
 800e1f8:	0800e295 	.word	0x0800e295
 800e1fc:	0800e295 	.word	0x0800e295
 800e200:	0800e275 	.word	0x0800e275
 800e204:	0800e295 	.word	0x0800e295
 800e208:	0800e295 	.word	0x0800e295
 800e20c:	0800e295 	.word	0x0800e295
 800e210:	0800e295 	.word	0x0800e295
 800e214:	0800e295 	.word	0x0800e295
 800e218:	0800e295 	.word	0x0800e295
 800e21c:	0800e295 	.word	0x0800e295
 800e220:	0800e27d 	.word	0x0800e27d
 800e224:	0800e295 	.word	0x0800e295
 800e228:	0800e295 	.word	0x0800e295
 800e22c:	0800e295 	.word	0x0800e295
 800e230:	0800e295 	.word	0x0800e295
 800e234:	0800e295 	.word	0x0800e295
 800e238:	0800e295 	.word	0x0800e295
 800e23c:	0800e295 	.word	0x0800e295
 800e240:	0800e285 	.word	0x0800e285
 800e244:	0800e295 	.word	0x0800e295
 800e248:	0800e295 	.word	0x0800e295
 800e24c:	0800e295 	.word	0x0800e295
 800e250:	0800e295 	.word	0x0800e295
 800e254:	0800e295 	.word	0x0800e295
 800e258:	0800e295 	.word	0x0800e295
 800e25c:	0800e295 	.word	0x0800e295
 800e260:	0800e28d 	.word	0x0800e28d
 800e264:	2301      	movs	r3, #1
 800e266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26a:	e0d6      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e26c:	2304      	movs	r3, #4
 800e26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e272:	e0d2      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e274:	2308      	movs	r3, #8
 800e276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e27a:	e0ce      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e27c:	2310      	movs	r3, #16
 800e27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e282:	e0ca      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e284:	2320      	movs	r3, #32
 800e286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e28a:	e0c6      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e28c:	2340      	movs	r3, #64	; 0x40
 800e28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e292:	e0c2      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e294:	2380      	movs	r3, #128	; 0x80
 800e296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e29a:	e0be      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e29c:	40011400 	.word	0x40011400
 800e2a0:	58024400 	.word	0x58024400
 800e2a4:	40007800 	.word	0x40007800
 800e2a8:	40007c00 	.word	0x40007c00
 800e2ac:	40011800 	.word	0x40011800
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4aad      	ldr	r2, [pc, #692]	; (800e56c <UART_SetConfig+0x900>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d176      	bne.n	800e3a8 <UART_SetConfig+0x73c>
 800e2ba:	4bad      	ldr	r3, [pc, #692]	; (800e570 <UART_SetConfig+0x904>)
 800e2bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e2c2:	2b28      	cmp	r3, #40	; 0x28
 800e2c4:	d86c      	bhi.n	800e3a0 <UART_SetConfig+0x734>
 800e2c6:	a201      	add	r2, pc, #4	; (adr r2, 800e2cc <UART_SetConfig+0x660>)
 800e2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2cc:	0800e371 	.word	0x0800e371
 800e2d0:	0800e3a1 	.word	0x0800e3a1
 800e2d4:	0800e3a1 	.word	0x0800e3a1
 800e2d8:	0800e3a1 	.word	0x0800e3a1
 800e2dc:	0800e3a1 	.word	0x0800e3a1
 800e2e0:	0800e3a1 	.word	0x0800e3a1
 800e2e4:	0800e3a1 	.word	0x0800e3a1
 800e2e8:	0800e3a1 	.word	0x0800e3a1
 800e2ec:	0800e379 	.word	0x0800e379
 800e2f0:	0800e3a1 	.word	0x0800e3a1
 800e2f4:	0800e3a1 	.word	0x0800e3a1
 800e2f8:	0800e3a1 	.word	0x0800e3a1
 800e2fc:	0800e3a1 	.word	0x0800e3a1
 800e300:	0800e3a1 	.word	0x0800e3a1
 800e304:	0800e3a1 	.word	0x0800e3a1
 800e308:	0800e3a1 	.word	0x0800e3a1
 800e30c:	0800e381 	.word	0x0800e381
 800e310:	0800e3a1 	.word	0x0800e3a1
 800e314:	0800e3a1 	.word	0x0800e3a1
 800e318:	0800e3a1 	.word	0x0800e3a1
 800e31c:	0800e3a1 	.word	0x0800e3a1
 800e320:	0800e3a1 	.word	0x0800e3a1
 800e324:	0800e3a1 	.word	0x0800e3a1
 800e328:	0800e3a1 	.word	0x0800e3a1
 800e32c:	0800e389 	.word	0x0800e389
 800e330:	0800e3a1 	.word	0x0800e3a1
 800e334:	0800e3a1 	.word	0x0800e3a1
 800e338:	0800e3a1 	.word	0x0800e3a1
 800e33c:	0800e3a1 	.word	0x0800e3a1
 800e340:	0800e3a1 	.word	0x0800e3a1
 800e344:	0800e3a1 	.word	0x0800e3a1
 800e348:	0800e3a1 	.word	0x0800e3a1
 800e34c:	0800e391 	.word	0x0800e391
 800e350:	0800e3a1 	.word	0x0800e3a1
 800e354:	0800e3a1 	.word	0x0800e3a1
 800e358:	0800e3a1 	.word	0x0800e3a1
 800e35c:	0800e3a1 	.word	0x0800e3a1
 800e360:	0800e3a1 	.word	0x0800e3a1
 800e364:	0800e3a1 	.word	0x0800e3a1
 800e368:	0800e3a1 	.word	0x0800e3a1
 800e36c:	0800e399 	.word	0x0800e399
 800e370:	2301      	movs	r3, #1
 800e372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e376:	e050      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e378:	2304      	movs	r3, #4
 800e37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e37e:	e04c      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e380:	2308      	movs	r3, #8
 800e382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e386:	e048      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e388:	2310      	movs	r3, #16
 800e38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e38e:	e044      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e390:	2320      	movs	r3, #32
 800e392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e396:	e040      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e398:	2340      	movs	r3, #64	; 0x40
 800e39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e39e:	e03c      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e3a0:	2380      	movs	r3, #128	; 0x80
 800e3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3a6:	e038      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4a71      	ldr	r2, [pc, #452]	; (800e574 <UART_SetConfig+0x908>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d130      	bne.n	800e414 <UART_SetConfig+0x7a8>
 800e3b2:	4b6f      	ldr	r3, [pc, #444]	; (800e570 <UART_SetConfig+0x904>)
 800e3b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3b6:	f003 0307 	and.w	r3, r3, #7
 800e3ba:	2b05      	cmp	r3, #5
 800e3bc:	d826      	bhi.n	800e40c <UART_SetConfig+0x7a0>
 800e3be:	a201      	add	r2, pc, #4	; (adr r2, 800e3c4 <UART_SetConfig+0x758>)
 800e3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3c4:	0800e3dd 	.word	0x0800e3dd
 800e3c8:	0800e3e5 	.word	0x0800e3e5
 800e3cc:	0800e3ed 	.word	0x0800e3ed
 800e3d0:	0800e3f5 	.word	0x0800e3f5
 800e3d4:	0800e3fd 	.word	0x0800e3fd
 800e3d8:	0800e405 	.word	0x0800e405
 800e3dc:	2302      	movs	r3, #2
 800e3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3e2:	e01a      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e3e4:	2304      	movs	r3, #4
 800e3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ea:	e016      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e3ec:	2308      	movs	r3, #8
 800e3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f2:	e012      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e3f4:	2310      	movs	r3, #16
 800e3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fa:	e00e      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e3fc:	2320      	movs	r3, #32
 800e3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e402:	e00a      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e404:	2340      	movs	r3, #64	; 0x40
 800e406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e40a:	e006      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e40c:	2380      	movs	r3, #128	; 0x80
 800e40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e412:	e002      	b.n	800e41a <UART_SetConfig+0x7ae>
 800e414:	2380      	movs	r3, #128	; 0x80
 800e416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	4a55      	ldr	r2, [pc, #340]	; (800e574 <UART_SetConfig+0x908>)
 800e420:	4293      	cmp	r3, r2
 800e422:	f040 80f8 	bne.w	800e616 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e426:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e42a:	2b20      	cmp	r3, #32
 800e42c:	dc46      	bgt.n	800e4bc <UART_SetConfig+0x850>
 800e42e:	2b02      	cmp	r3, #2
 800e430:	db75      	blt.n	800e51e <UART_SetConfig+0x8b2>
 800e432:	3b02      	subs	r3, #2
 800e434:	2b1e      	cmp	r3, #30
 800e436:	d872      	bhi.n	800e51e <UART_SetConfig+0x8b2>
 800e438:	a201      	add	r2, pc, #4	; (adr r2, 800e440 <UART_SetConfig+0x7d4>)
 800e43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e43e:	bf00      	nop
 800e440:	0800e4c3 	.word	0x0800e4c3
 800e444:	0800e51f 	.word	0x0800e51f
 800e448:	0800e4cb 	.word	0x0800e4cb
 800e44c:	0800e51f 	.word	0x0800e51f
 800e450:	0800e51f 	.word	0x0800e51f
 800e454:	0800e51f 	.word	0x0800e51f
 800e458:	0800e4db 	.word	0x0800e4db
 800e45c:	0800e51f 	.word	0x0800e51f
 800e460:	0800e51f 	.word	0x0800e51f
 800e464:	0800e51f 	.word	0x0800e51f
 800e468:	0800e51f 	.word	0x0800e51f
 800e46c:	0800e51f 	.word	0x0800e51f
 800e470:	0800e51f 	.word	0x0800e51f
 800e474:	0800e51f 	.word	0x0800e51f
 800e478:	0800e4eb 	.word	0x0800e4eb
 800e47c:	0800e51f 	.word	0x0800e51f
 800e480:	0800e51f 	.word	0x0800e51f
 800e484:	0800e51f 	.word	0x0800e51f
 800e488:	0800e51f 	.word	0x0800e51f
 800e48c:	0800e51f 	.word	0x0800e51f
 800e490:	0800e51f 	.word	0x0800e51f
 800e494:	0800e51f 	.word	0x0800e51f
 800e498:	0800e51f 	.word	0x0800e51f
 800e49c:	0800e51f 	.word	0x0800e51f
 800e4a0:	0800e51f 	.word	0x0800e51f
 800e4a4:	0800e51f 	.word	0x0800e51f
 800e4a8:	0800e51f 	.word	0x0800e51f
 800e4ac:	0800e51f 	.word	0x0800e51f
 800e4b0:	0800e51f 	.word	0x0800e51f
 800e4b4:	0800e51f 	.word	0x0800e51f
 800e4b8:	0800e511 	.word	0x0800e511
 800e4bc:	2b40      	cmp	r3, #64	; 0x40
 800e4be:	d02a      	beq.n	800e516 <UART_SetConfig+0x8aa>
 800e4c0:	e02d      	b.n	800e51e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e4c2:	f7fe f913 	bl	800c6ec <HAL_RCCEx_GetD3PCLK1Freq>
 800e4c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e4c8:	e02f      	b.n	800e52a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7fe f922 	bl	800c718 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4d8:	e027      	b.n	800e52a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4da:	f107 0318 	add.w	r3, r7, #24
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fe fa6e 	bl	800c9c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4e8:	e01f      	b.n	800e52a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e4ea:	4b21      	ldr	r3, [pc, #132]	; (800e570 <UART_SetConfig+0x904>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f003 0320 	and.w	r3, r3, #32
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d009      	beq.n	800e50a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e4f6:	4b1e      	ldr	r3, [pc, #120]	; (800e570 <UART_SetConfig+0x904>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	08db      	lsrs	r3, r3, #3
 800e4fc:	f003 0303 	and.w	r3, r3, #3
 800e500:	4a1d      	ldr	r2, [pc, #116]	; (800e578 <UART_SetConfig+0x90c>)
 800e502:	fa22 f303 	lsr.w	r3, r2, r3
 800e506:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e508:	e00f      	b.n	800e52a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e50a:	4b1b      	ldr	r3, [pc, #108]	; (800e578 <UART_SetConfig+0x90c>)
 800e50c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e50e:	e00c      	b.n	800e52a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e510:	4b1a      	ldr	r3, [pc, #104]	; (800e57c <UART_SetConfig+0x910>)
 800e512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e514:	e009      	b.n	800e52a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e51a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e51c:	e005      	b.n	800e52a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e51e:	2300      	movs	r3, #0
 800e520:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e522:	2301      	movs	r3, #1
 800e524:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e528:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	f000 81ee 	beq.w	800e90e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e536:	4a12      	ldr	r2, [pc, #72]	; (800e580 <UART_SetConfig+0x914>)
 800e538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e53c:	461a      	mov	r2, r3
 800e53e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e540:	fbb3 f3f2 	udiv	r3, r3, r2
 800e544:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	685a      	ldr	r2, [r3, #4]
 800e54a:	4613      	mov	r3, r2
 800e54c:	005b      	lsls	r3, r3, #1
 800e54e:	4413      	add	r3, r2
 800e550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e552:	429a      	cmp	r2, r3
 800e554:	d305      	bcc.n	800e562 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e55c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e55e:	429a      	cmp	r2, r3
 800e560:	d910      	bls.n	800e584 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e562:	2301      	movs	r3, #1
 800e564:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e568:	e1d1      	b.n	800e90e <UART_SetConfig+0xca2>
 800e56a:	bf00      	nop
 800e56c:	40011c00 	.word	0x40011c00
 800e570:	58024400 	.word	0x58024400
 800e574:	58000c00 	.word	0x58000c00
 800e578:	03d09000 	.word	0x03d09000
 800e57c:	003d0900 	.word	0x003d0900
 800e580:	08010794 	.word	0x08010794
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e586:	2200      	movs	r2, #0
 800e588:	60bb      	str	r3, [r7, #8]
 800e58a:	60fa      	str	r2, [r7, #12]
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e590:	4ac0      	ldr	r2, [pc, #768]	; (800e894 <UART_SetConfig+0xc28>)
 800e592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e596:	b29b      	uxth	r3, r3
 800e598:	2200      	movs	r2, #0
 800e59a:	603b      	str	r3, [r7, #0]
 800e59c:	607a      	str	r2, [r7, #4]
 800e59e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e5a6:	f7f1 fef3 	bl	8000390 <__aeabi_uldivmod>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	f04f 0200 	mov.w	r2, #0
 800e5b6:	f04f 0300 	mov.w	r3, #0
 800e5ba:	020b      	lsls	r3, r1, #8
 800e5bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e5c0:	0202      	lsls	r2, r0, #8
 800e5c2:	6979      	ldr	r1, [r7, #20]
 800e5c4:	6849      	ldr	r1, [r1, #4]
 800e5c6:	0849      	lsrs	r1, r1, #1
 800e5c8:	2000      	movs	r0, #0
 800e5ca:	460c      	mov	r4, r1
 800e5cc:	4605      	mov	r5, r0
 800e5ce:	eb12 0804 	adds.w	r8, r2, r4
 800e5d2:	eb43 0905 	adc.w	r9, r3, r5
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	469a      	mov	sl, r3
 800e5de:	4693      	mov	fp, r2
 800e5e0:	4652      	mov	r2, sl
 800e5e2:	465b      	mov	r3, fp
 800e5e4:	4640      	mov	r0, r8
 800e5e6:	4649      	mov	r1, r9
 800e5e8:	f7f1 fed2 	bl	8000390 <__aeabi_uldivmod>
 800e5ec:	4602      	mov	r2, r0
 800e5ee:	460b      	mov	r3, r1
 800e5f0:	4613      	mov	r3, r2
 800e5f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e5fa:	d308      	bcc.n	800e60e <UART_SetConfig+0x9a2>
 800e5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e602:	d204      	bcs.n	800e60e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e60a:	60da      	str	r2, [r3, #12]
 800e60c:	e17f      	b.n	800e90e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e60e:	2301      	movs	r3, #1
 800e610:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e614:	e17b      	b.n	800e90e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	69db      	ldr	r3, [r3, #28]
 800e61a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e61e:	f040 80bd 	bne.w	800e79c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e622:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e626:	2b20      	cmp	r3, #32
 800e628:	dc48      	bgt.n	800e6bc <UART_SetConfig+0xa50>
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	db7b      	blt.n	800e726 <UART_SetConfig+0xaba>
 800e62e:	2b20      	cmp	r3, #32
 800e630:	d879      	bhi.n	800e726 <UART_SetConfig+0xaba>
 800e632:	a201      	add	r2, pc, #4	; (adr r2, 800e638 <UART_SetConfig+0x9cc>)
 800e634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e638:	0800e6c3 	.word	0x0800e6c3
 800e63c:	0800e6cb 	.word	0x0800e6cb
 800e640:	0800e727 	.word	0x0800e727
 800e644:	0800e727 	.word	0x0800e727
 800e648:	0800e6d3 	.word	0x0800e6d3
 800e64c:	0800e727 	.word	0x0800e727
 800e650:	0800e727 	.word	0x0800e727
 800e654:	0800e727 	.word	0x0800e727
 800e658:	0800e6e3 	.word	0x0800e6e3
 800e65c:	0800e727 	.word	0x0800e727
 800e660:	0800e727 	.word	0x0800e727
 800e664:	0800e727 	.word	0x0800e727
 800e668:	0800e727 	.word	0x0800e727
 800e66c:	0800e727 	.word	0x0800e727
 800e670:	0800e727 	.word	0x0800e727
 800e674:	0800e727 	.word	0x0800e727
 800e678:	0800e6f3 	.word	0x0800e6f3
 800e67c:	0800e727 	.word	0x0800e727
 800e680:	0800e727 	.word	0x0800e727
 800e684:	0800e727 	.word	0x0800e727
 800e688:	0800e727 	.word	0x0800e727
 800e68c:	0800e727 	.word	0x0800e727
 800e690:	0800e727 	.word	0x0800e727
 800e694:	0800e727 	.word	0x0800e727
 800e698:	0800e727 	.word	0x0800e727
 800e69c:	0800e727 	.word	0x0800e727
 800e6a0:	0800e727 	.word	0x0800e727
 800e6a4:	0800e727 	.word	0x0800e727
 800e6a8:	0800e727 	.word	0x0800e727
 800e6ac:	0800e727 	.word	0x0800e727
 800e6b0:	0800e727 	.word	0x0800e727
 800e6b4:	0800e727 	.word	0x0800e727
 800e6b8:	0800e719 	.word	0x0800e719
 800e6bc:	2b40      	cmp	r3, #64	; 0x40
 800e6be:	d02e      	beq.n	800e71e <UART_SetConfig+0xab2>
 800e6c0:	e031      	b.n	800e726 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e6c2:	f7fc fe29 	bl	800b318 <HAL_RCC_GetPCLK1Freq>
 800e6c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6c8:	e033      	b.n	800e732 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e6ca:	f7fc fe3b 	bl	800b344 <HAL_RCC_GetPCLK2Freq>
 800e6ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6d0:	e02f      	b.n	800e732 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7fe f81e 	bl	800c718 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6e0:	e027      	b.n	800e732 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6e2:	f107 0318 	add.w	r3, r7, #24
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7fe f96a 	bl	800c9c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e6ec:	69fb      	ldr	r3, [r7, #28]
 800e6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6f0:	e01f      	b.n	800e732 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e6f2:	4b69      	ldr	r3, [pc, #420]	; (800e898 <UART_SetConfig+0xc2c>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f003 0320 	and.w	r3, r3, #32
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d009      	beq.n	800e712 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e6fe:	4b66      	ldr	r3, [pc, #408]	; (800e898 <UART_SetConfig+0xc2c>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	08db      	lsrs	r3, r3, #3
 800e704:	f003 0303 	and.w	r3, r3, #3
 800e708:	4a64      	ldr	r2, [pc, #400]	; (800e89c <UART_SetConfig+0xc30>)
 800e70a:	fa22 f303 	lsr.w	r3, r2, r3
 800e70e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e710:	e00f      	b.n	800e732 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e712:	4b62      	ldr	r3, [pc, #392]	; (800e89c <UART_SetConfig+0xc30>)
 800e714:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e716:	e00c      	b.n	800e732 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e718:	4b61      	ldr	r3, [pc, #388]	; (800e8a0 <UART_SetConfig+0xc34>)
 800e71a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e71c:	e009      	b.n	800e732 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e71e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e724:	e005      	b.n	800e732 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e726:	2300      	movs	r3, #0
 800e728:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e72a:	2301      	movs	r3, #1
 800e72c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e730:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e734:	2b00      	cmp	r3, #0
 800e736:	f000 80ea 	beq.w	800e90e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e73e:	4a55      	ldr	r2, [pc, #340]	; (800e894 <UART_SetConfig+0xc28>)
 800e740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e744:	461a      	mov	r2, r3
 800e746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e748:	fbb3 f3f2 	udiv	r3, r3, r2
 800e74c:	005a      	lsls	r2, r3, #1
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	685b      	ldr	r3, [r3, #4]
 800e752:	085b      	lsrs	r3, r3, #1
 800e754:	441a      	add	r2, r3
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e75e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e762:	2b0f      	cmp	r3, #15
 800e764:	d916      	bls.n	800e794 <UART_SetConfig+0xb28>
 800e766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e76c:	d212      	bcs.n	800e794 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e770:	b29b      	uxth	r3, r3
 800e772:	f023 030f 	bic.w	r3, r3, #15
 800e776:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77a:	085b      	lsrs	r3, r3, #1
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	f003 0307 	and.w	r3, r3, #7
 800e782:	b29a      	uxth	r2, r3
 800e784:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e786:	4313      	orrs	r3, r2
 800e788:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e790:	60da      	str	r2, [r3, #12]
 800e792:	e0bc      	b.n	800e90e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e794:	2301      	movs	r3, #1
 800e796:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e79a:	e0b8      	b.n	800e90e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e79c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e7a0:	2b20      	cmp	r3, #32
 800e7a2:	dc4b      	bgt.n	800e83c <UART_SetConfig+0xbd0>
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	f2c0 8087 	blt.w	800e8b8 <UART_SetConfig+0xc4c>
 800e7aa:	2b20      	cmp	r3, #32
 800e7ac:	f200 8084 	bhi.w	800e8b8 <UART_SetConfig+0xc4c>
 800e7b0:	a201      	add	r2, pc, #4	; (adr r2, 800e7b8 <UART_SetConfig+0xb4c>)
 800e7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7b6:	bf00      	nop
 800e7b8:	0800e843 	.word	0x0800e843
 800e7bc:	0800e84b 	.word	0x0800e84b
 800e7c0:	0800e8b9 	.word	0x0800e8b9
 800e7c4:	0800e8b9 	.word	0x0800e8b9
 800e7c8:	0800e853 	.word	0x0800e853
 800e7cc:	0800e8b9 	.word	0x0800e8b9
 800e7d0:	0800e8b9 	.word	0x0800e8b9
 800e7d4:	0800e8b9 	.word	0x0800e8b9
 800e7d8:	0800e863 	.word	0x0800e863
 800e7dc:	0800e8b9 	.word	0x0800e8b9
 800e7e0:	0800e8b9 	.word	0x0800e8b9
 800e7e4:	0800e8b9 	.word	0x0800e8b9
 800e7e8:	0800e8b9 	.word	0x0800e8b9
 800e7ec:	0800e8b9 	.word	0x0800e8b9
 800e7f0:	0800e8b9 	.word	0x0800e8b9
 800e7f4:	0800e8b9 	.word	0x0800e8b9
 800e7f8:	0800e873 	.word	0x0800e873
 800e7fc:	0800e8b9 	.word	0x0800e8b9
 800e800:	0800e8b9 	.word	0x0800e8b9
 800e804:	0800e8b9 	.word	0x0800e8b9
 800e808:	0800e8b9 	.word	0x0800e8b9
 800e80c:	0800e8b9 	.word	0x0800e8b9
 800e810:	0800e8b9 	.word	0x0800e8b9
 800e814:	0800e8b9 	.word	0x0800e8b9
 800e818:	0800e8b9 	.word	0x0800e8b9
 800e81c:	0800e8b9 	.word	0x0800e8b9
 800e820:	0800e8b9 	.word	0x0800e8b9
 800e824:	0800e8b9 	.word	0x0800e8b9
 800e828:	0800e8b9 	.word	0x0800e8b9
 800e82c:	0800e8b9 	.word	0x0800e8b9
 800e830:	0800e8b9 	.word	0x0800e8b9
 800e834:	0800e8b9 	.word	0x0800e8b9
 800e838:	0800e8ab 	.word	0x0800e8ab
 800e83c:	2b40      	cmp	r3, #64	; 0x40
 800e83e:	d037      	beq.n	800e8b0 <UART_SetConfig+0xc44>
 800e840:	e03a      	b.n	800e8b8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e842:	f7fc fd69 	bl	800b318 <HAL_RCC_GetPCLK1Freq>
 800e846:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e848:	e03c      	b.n	800e8c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e84a:	f7fc fd7b 	bl	800b344 <HAL_RCC_GetPCLK2Freq>
 800e84e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e850:	e038      	b.n	800e8c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e856:	4618      	mov	r0, r3
 800e858:	f7fd ff5e 	bl	800c718 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e860:	e030      	b.n	800e8c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e862:	f107 0318 	add.w	r3, r7, #24
 800e866:	4618      	mov	r0, r3
 800e868:	f7fe f8aa 	bl	800c9c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e86c:	69fb      	ldr	r3, [r7, #28]
 800e86e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e870:	e028      	b.n	800e8c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e872:	4b09      	ldr	r3, [pc, #36]	; (800e898 <UART_SetConfig+0xc2c>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f003 0320 	and.w	r3, r3, #32
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d012      	beq.n	800e8a4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e87e:	4b06      	ldr	r3, [pc, #24]	; (800e898 <UART_SetConfig+0xc2c>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	08db      	lsrs	r3, r3, #3
 800e884:	f003 0303 	and.w	r3, r3, #3
 800e888:	4a04      	ldr	r2, [pc, #16]	; (800e89c <UART_SetConfig+0xc30>)
 800e88a:	fa22 f303 	lsr.w	r3, r2, r3
 800e88e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e890:	e018      	b.n	800e8c4 <UART_SetConfig+0xc58>
 800e892:	bf00      	nop
 800e894:	08010794 	.word	0x08010794
 800e898:	58024400 	.word	0x58024400
 800e89c:	03d09000 	.word	0x03d09000
 800e8a0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e8a4:	4b24      	ldr	r3, [pc, #144]	; (800e938 <UART_SetConfig+0xccc>)
 800e8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8a8:	e00c      	b.n	800e8c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e8aa:	4b24      	ldr	r3, [pc, #144]	; (800e93c <UART_SetConfig+0xcd0>)
 800e8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8ae:	e009      	b.n	800e8c4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8b6:	e005      	b.n	800e8c4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e8bc:	2301      	movs	r3, #1
 800e8be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e8c2:	bf00      	nop
    }

    if (pclk != 0U)
 800e8c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d021      	beq.n	800e90e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ce:	4a1c      	ldr	r2, [pc, #112]	; (800e940 <UART_SetConfig+0xcd4>)
 800e8d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8d8:	fbb3 f2f2 	udiv	r2, r3, r2
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	085b      	lsrs	r3, r3, #1
 800e8e2:	441a      	add	r2, r3
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	685b      	ldr	r3, [r3, #4]
 800e8e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8ec:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f0:	2b0f      	cmp	r3, #15
 800e8f2:	d909      	bls.n	800e908 <UART_SetConfig+0xc9c>
 800e8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8fa:	d205      	bcs.n	800e908 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8fe:	b29a      	uxth	r2, r3
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	60da      	str	r2, [r3, #12]
 800e906:	e002      	b.n	800e90e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e908:	2301      	movs	r3, #1
 800e90a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	2201      	movs	r2, #1
 800e912:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	2201      	movs	r2, #1
 800e91a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	2200      	movs	r2, #0
 800e922:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	2200      	movs	r2, #0
 800e928:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e92a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3748      	adds	r7, #72	; 0x48
 800e932:	46bd      	mov	sp, r7
 800e934:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e938:	03d09000 	.word	0x03d09000
 800e93c:	003d0900 	.word	0x003d0900
 800e940:	08010794 	.word	0x08010794

0800e944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e944:	b480      	push	{r7}
 800e946:	b083      	sub	sp, #12
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e950:	f003 0301 	and.w	r3, r3, #1
 800e954:	2b00      	cmp	r3, #0
 800e956:	d00a      	beq.n	800e96e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	430a      	orrs	r2, r1
 800e96c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e972:	f003 0302 	and.w	r3, r3, #2
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00a      	beq.n	800e990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	430a      	orrs	r2, r1
 800e98e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e994:	f003 0304 	and.w	r3, r3, #4
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d00a      	beq.n	800e9b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	685b      	ldr	r3, [r3, #4]
 800e9a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	430a      	orrs	r2, r1
 800e9b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9b6:	f003 0308 	and.w	r3, r3, #8
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d00a      	beq.n	800e9d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	430a      	orrs	r2, r1
 800e9d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9d8:	f003 0310 	and.w	r3, r3, #16
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d00a      	beq.n	800e9f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	430a      	orrs	r2, r1
 800e9f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9fa:	f003 0320 	and.w	r3, r3, #32
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00a      	beq.n	800ea18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	689b      	ldr	r3, [r3, #8]
 800ea08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	430a      	orrs	r2, r1
 800ea16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d01a      	beq.n	800ea5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	430a      	orrs	r2, r1
 800ea38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea42:	d10a      	bne.n	800ea5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	685b      	ldr	r3, [r3, #4]
 800ea4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	430a      	orrs	r2, r1
 800ea58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d00a      	beq.n	800ea7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	430a      	orrs	r2, r1
 800ea7a:	605a      	str	r2, [r3, #4]
  }
}
 800ea7c:	bf00      	nop
 800ea7e:	370c      	adds	r7, #12
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr

0800ea88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b098      	sub	sp, #96	; 0x60
 800ea8c:	af02      	add	r7, sp, #8
 800ea8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2200      	movs	r2, #0
 800ea94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ea98:	f7f5 fb9a 	bl	80041d0 <HAL_GetTick>
 800ea9c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f003 0308 	and.w	r3, r3, #8
 800eaa8:	2b08      	cmp	r3, #8
 800eaaa:	d12f      	bne.n	800eb0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eaac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eab0:	9300      	str	r3, [sp, #0]
 800eab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eab4:	2200      	movs	r2, #0
 800eab6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f000 f88e 	bl	800ebdc <UART_WaitOnFlagUntilTimeout>
 800eac0:	4603      	mov	r3, r0
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d022      	beq.n	800eb0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eace:	e853 3f00 	ldrex	r3, [r3]
 800ead2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ead4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ead6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eada:	653b      	str	r3, [r7, #80]	; 0x50
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	461a      	mov	r2, r3
 800eae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eae4:	647b      	str	r3, [r7, #68]	; 0x44
 800eae6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eaea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eaec:	e841 2300 	strex	r3, r2, [r1]
 800eaf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eaf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d1e6      	bne.n	800eac6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2220      	movs	r2, #32
 800eafc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2200      	movs	r2, #0
 800eb04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb08:	2303      	movs	r3, #3
 800eb0a:	e063      	b.n	800ebd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	f003 0304 	and.w	r3, r3, #4
 800eb16:	2b04      	cmp	r3, #4
 800eb18:	d149      	bne.n	800ebae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb1e:	9300      	str	r3, [sp, #0]
 800eb20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb22:	2200      	movs	r2, #0
 800eb24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f000 f857 	bl	800ebdc <UART_WaitOnFlagUntilTimeout>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d03c      	beq.n	800ebae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3c:	e853 3f00 	ldrex	r3, [r3]
 800eb40:	623b      	str	r3, [r7, #32]
   return(result);
 800eb42:	6a3b      	ldr	r3, [r7, #32]
 800eb44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb48:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	461a      	mov	r2, r3
 800eb50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb52:	633b      	str	r3, [r7, #48]	; 0x30
 800eb54:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb5a:	e841 2300 	strex	r3, r2, [r1]
 800eb5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d1e6      	bne.n	800eb34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	3308      	adds	r3, #8
 800eb6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	e853 3f00 	ldrex	r3, [r3]
 800eb74:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	f023 0301 	bic.w	r3, r3, #1
 800eb7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	3308      	adds	r3, #8
 800eb84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb86:	61fa      	str	r2, [r7, #28]
 800eb88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb8a:	69b9      	ldr	r1, [r7, #24]
 800eb8c:	69fa      	ldr	r2, [r7, #28]
 800eb8e:	e841 2300 	strex	r3, r2, [r1]
 800eb92:	617b      	str	r3, [r7, #20]
   return(result);
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d1e5      	bne.n	800eb66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2220      	movs	r2, #32
 800eb9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2200      	movs	r2, #0
 800eba6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ebaa:	2303      	movs	r3, #3
 800ebac:	e012      	b.n	800ebd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2220      	movs	r2, #32
 800ebb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2220      	movs	r2, #32
 800ebba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ebd2:	2300      	movs	r3, #0
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3758      	adds	r7, #88	; 0x58
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	60b9      	str	r1, [r7, #8]
 800ebe6:	603b      	str	r3, [r7, #0]
 800ebe8:	4613      	mov	r3, r2
 800ebea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ebec:	e049      	b.n	800ec82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ebee:	69bb      	ldr	r3, [r7, #24]
 800ebf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebf4:	d045      	beq.n	800ec82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebf6:	f7f5 faeb 	bl	80041d0 <HAL_GetTick>
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	1ad3      	subs	r3, r2, r3
 800ec00:	69ba      	ldr	r2, [r7, #24]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d302      	bcc.n	800ec0c <UART_WaitOnFlagUntilTimeout+0x30>
 800ec06:	69bb      	ldr	r3, [r7, #24]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d101      	bne.n	800ec10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ec0c:	2303      	movs	r3, #3
 800ec0e:	e048      	b.n	800eca2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	f003 0304 	and.w	r3, r3, #4
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d031      	beq.n	800ec82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	69db      	ldr	r3, [r3, #28]
 800ec24:	f003 0308 	and.w	r3, r3, #8
 800ec28:	2b08      	cmp	r3, #8
 800ec2a:	d110      	bne.n	800ec4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	2208      	movs	r2, #8
 800ec32:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ec34:	68f8      	ldr	r0, [r7, #12]
 800ec36:	f000 f839 	bl	800ecac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2208      	movs	r2, #8
 800ec3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2200      	movs	r2, #0
 800ec46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	e029      	b.n	800eca2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	69db      	ldr	r3, [r3, #28]
 800ec54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec5c:	d111      	bne.n	800ec82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ec68:	68f8      	ldr	r0, [r7, #12]
 800ec6a:	f000 f81f 	bl	800ecac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2220      	movs	r2, #32
 800ec72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ec7e:	2303      	movs	r3, #3
 800ec80:	e00f      	b.n	800eca2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	69da      	ldr	r2, [r3, #28]
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	4013      	ands	r3, r2
 800ec8c:	68ba      	ldr	r2, [r7, #8]
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	bf0c      	ite	eq
 800ec92:	2301      	moveq	r3, #1
 800ec94:	2300      	movne	r3, #0
 800ec96:	b2db      	uxtb	r3, r3
 800ec98:	461a      	mov	r2, r3
 800ec9a:	79fb      	ldrb	r3, [r7, #7]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d0a6      	beq.n	800ebee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eca0:	2300      	movs	r3, #0
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3710      	adds	r7, #16
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}
	...

0800ecac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b095      	sub	sp, #84	; 0x54
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecbc:	e853 3f00 	ldrex	r3, [r3]
 800ecc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ecc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ecc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	461a      	mov	r2, r3
 800ecd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecd2:	643b      	str	r3, [r7, #64]	; 0x40
 800ecd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ecd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ecda:	e841 2300 	strex	r3, r2, [r1]
 800ecde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ece0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d1e6      	bne.n	800ecb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	3308      	adds	r3, #8
 800ecec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecee:	6a3b      	ldr	r3, [r7, #32]
 800ecf0:	e853 3f00 	ldrex	r3, [r3]
 800ecf4:	61fb      	str	r3, [r7, #28]
   return(result);
 800ecf6:	69fa      	ldr	r2, [r7, #28]
 800ecf8:	4b1e      	ldr	r3, [pc, #120]	; (800ed74 <UART_EndRxTransfer+0xc8>)
 800ecfa:	4013      	ands	r3, r2
 800ecfc:	64bb      	str	r3, [r7, #72]	; 0x48
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	3308      	adds	r3, #8
 800ed04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed06:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ed08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed0e:	e841 2300 	strex	r3, r2, [r1]
 800ed12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ed14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d1e5      	bne.n	800ece6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d118      	bne.n	800ed54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	e853 3f00 	ldrex	r3, [r3]
 800ed2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	f023 0310 	bic.w	r3, r3, #16
 800ed36:	647b      	str	r3, [r7, #68]	; 0x44
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed40:	61bb      	str	r3, [r7, #24]
 800ed42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed44:	6979      	ldr	r1, [r7, #20]
 800ed46:	69ba      	ldr	r2, [r7, #24]
 800ed48:	e841 2300 	strex	r3, r2, [r1]
 800ed4c:	613b      	str	r3, [r7, #16]
   return(result);
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d1e6      	bne.n	800ed22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2220      	movs	r2, #32
 800ed58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2200      	movs	r2, #0
 800ed66:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ed68:	bf00      	nop
 800ed6a:	3754      	adds	r7, #84	; 0x54
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr
 800ed74:	effffffe 	.word	0xeffffffe

0800ed78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2200      	movs	r2, #0
 800ed92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ed96:	68f8      	ldr	r0, [r7, #12]
 800ed98:	f7fe ff52 	bl	800dc40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed9c:	bf00      	nop
 800ed9e:	3710      	adds	r7, #16
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b088      	sub	sp, #32
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	e853 3f00 	ldrex	r3, [r3]
 800edb8:	60bb      	str	r3, [r7, #8]
   return(result);
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800edc0:	61fb      	str	r3, [r7, #28]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	461a      	mov	r2, r3
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	61bb      	str	r3, [r7, #24]
 800edcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edce:	6979      	ldr	r1, [r7, #20]
 800edd0:	69ba      	ldr	r2, [r7, #24]
 800edd2:	e841 2300 	strex	r3, r2, [r1]
 800edd6:	613b      	str	r3, [r7, #16]
   return(result);
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d1e6      	bne.n	800edac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2220      	movs	r2, #32
 800ede2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2200      	movs	r2, #0
 800edea:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f7fe ff1d 	bl	800dc2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800edf2:	bf00      	nop
 800edf4:	3720      	adds	r7, #32
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800edfa:	b480      	push	{r7}
 800edfc:	b083      	sub	sp, #12
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ee02:	bf00      	nop
 800ee04:	370c      	adds	r7, #12
 800ee06:	46bd      	mov	sp, r7
 800ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0c:	4770      	bx	lr

0800ee0e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ee0e:	b480      	push	{r7}
 800ee10:	b083      	sub	sp, #12
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ee16:	bf00      	nop
 800ee18:	370c      	adds	r7, #12
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr

0800ee22 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ee22:	b480      	push	{r7}
 800ee24:	b083      	sub	sp, #12
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ee2a:	bf00      	nop
 800ee2c:	370c      	adds	r7, #12
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee34:	4770      	bx	lr

0800ee36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ee36:	b480      	push	{r7}
 800ee38:	b085      	sub	sp, #20
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d101      	bne.n	800ee4c <HAL_UARTEx_DisableFifoMode+0x16>
 800ee48:	2302      	movs	r3, #2
 800ee4a:	e027      	b.n	800ee9c <HAL_UARTEx_DisableFifoMode+0x66>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2201      	movs	r2, #1
 800ee50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2224      	movs	r2, #36	; 0x24
 800ee58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	681a      	ldr	r2, [r3, #0]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f022 0201 	bic.w	r2, r2, #1
 800ee72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ee7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	68fa      	ldr	r2, [r7, #12]
 800ee88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2220      	movs	r2, #32
 800ee8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2200      	movs	r2, #0
 800ee96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ee9a:	2300      	movs	r3, #0
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3714      	adds	r7, #20
 800eea0:	46bd      	mov	sp, r7
 800eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea6:	4770      	bx	lr

0800eea8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d101      	bne.n	800eec0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eebc:	2302      	movs	r3, #2
 800eebe:	e02d      	b.n	800ef1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2201      	movs	r2, #1
 800eec4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2224      	movs	r2, #36	; 0x24
 800eecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	681a      	ldr	r2, [r3, #0]
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f022 0201 	bic.w	r2, r2, #1
 800eee6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	689b      	ldr	r3, [r3, #8]
 800eeee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	683a      	ldr	r2, [r7, #0]
 800eef8:	430a      	orrs	r2, r1
 800eefa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f000 f84f 	bl	800efa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	68fa      	ldr	r2, [r7, #12]
 800ef08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2220      	movs	r2, #32
 800ef0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2200      	movs	r2, #0
 800ef16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef1a:	2300      	movs	r3, #0
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3710      	adds	r7, #16
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b084      	sub	sp, #16
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d101      	bne.n	800ef3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ef38:	2302      	movs	r3, #2
 800ef3a:	e02d      	b.n	800ef98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2201      	movs	r2, #1
 800ef40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2224      	movs	r2, #36	; 0x24
 800ef48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	681a      	ldr	r2, [r3, #0]
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	f022 0201 	bic.w	r2, r2, #1
 800ef62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	689b      	ldr	r3, [r3, #8]
 800ef6a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	683a      	ldr	r2, [r7, #0]
 800ef74:	430a      	orrs	r2, r1
 800ef76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f000 f811 	bl	800efa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	68fa      	ldr	r2, [r7, #12]
 800ef84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2220      	movs	r2, #32
 800ef8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2200      	movs	r2, #0
 800ef92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef96:	2300      	movs	r3, #0
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3710      	adds	r7, #16
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b085      	sub	sp, #20
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800efac:	2b00      	cmp	r3, #0
 800efae:	d108      	bne.n	800efc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2201      	movs	r2, #1
 800efb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2201      	movs	r2, #1
 800efbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800efc0:	e031      	b.n	800f026 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800efc2:	2310      	movs	r3, #16
 800efc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800efc6:	2310      	movs	r3, #16
 800efc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	689b      	ldr	r3, [r3, #8]
 800efd0:	0e5b      	lsrs	r3, r3, #25
 800efd2:	b2db      	uxtb	r3, r3
 800efd4:	f003 0307 	and.w	r3, r3, #7
 800efd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	689b      	ldr	r3, [r3, #8]
 800efe0:	0f5b      	lsrs	r3, r3, #29
 800efe2:	b2db      	uxtb	r3, r3
 800efe4:	f003 0307 	and.w	r3, r3, #7
 800efe8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800efea:	7bbb      	ldrb	r3, [r7, #14]
 800efec:	7b3a      	ldrb	r2, [r7, #12]
 800efee:	4911      	ldr	r1, [pc, #68]	; (800f034 <UARTEx_SetNbDataToProcess+0x94>)
 800eff0:	5c8a      	ldrb	r2, [r1, r2]
 800eff2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800eff6:	7b3a      	ldrb	r2, [r7, #12]
 800eff8:	490f      	ldr	r1, [pc, #60]	; (800f038 <UARTEx_SetNbDataToProcess+0x98>)
 800effa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800effc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f000:	b29a      	uxth	r2, r3
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f008:	7bfb      	ldrb	r3, [r7, #15]
 800f00a:	7b7a      	ldrb	r2, [r7, #13]
 800f00c:	4909      	ldr	r1, [pc, #36]	; (800f034 <UARTEx_SetNbDataToProcess+0x94>)
 800f00e:	5c8a      	ldrb	r2, [r1, r2]
 800f010:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f014:	7b7a      	ldrb	r2, [r7, #13]
 800f016:	4908      	ldr	r1, [pc, #32]	; (800f038 <UARTEx_SetNbDataToProcess+0x98>)
 800f018:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f01a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f01e:	b29a      	uxth	r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f026:	bf00      	nop
 800f028:	3714      	adds	r7, #20
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr
 800f032:	bf00      	nop
 800f034:	080107ac 	.word	0x080107ac
 800f038:	080107b4 	.word	0x080107b4

0800f03c <__errno>:
 800f03c:	4b01      	ldr	r3, [pc, #4]	; (800f044 <__errno+0x8>)
 800f03e:	6818      	ldr	r0, [r3, #0]
 800f040:	4770      	bx	lr
 800f042:	bf00      	nop
 800f044:	24000054 	.word	0x24000054

0800f048 <__libc_init_array>:
 800f048:	b570      	push	{r4, r5, r6, lr}
 800f04a:	4d0d      	ldr	r5, [pc, #52]	; (800f080 <__libc_init_array+0x38>)
 800f04c:	4c0d      	ldr	r4, [pc, #52]	; (800f084 <__libc_init_array+0x3c>)
 800f04e:	1b64      	subs	r4, r4, r5
 800f050:	10a4      	asrs	r4, r4, #2
 800f052:	2600      	movs	r6, #0
 800f054:	42a6      	cmp	r6, r4
 800f056:	d109      	bne.n	800f06c <__libc_init_array+0x24>
 800f058:	4d0b      	ldr	r5, [pc, #44]	; (800f088 <__libc_init_array+0x40>)
 800f05a:	4c0c      	ldr	r4, [pc, #48]	; (800f08c <__libc_init_array+0x44>)
 800f05c:	f001 f87c 	bl	8010158 <_init>
 800f060:	1b64      	subs	r4, r4, r5
 800f062:	10a4      	asrs	r4, r4, #2
 800f064:	2600      	movs	r6, #0
 800f066:	42a6      	cmp	r6, r4
 800f068:	d105      	bne.n	800f076 <__libc_init_array+0x2e>
 800f06a:	bd70      	pop	{r4, r5, r6, pc}
 800f06c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f070:	4798      	blx	r3
 800f072:	3601      	adds	r6, #1
 800f074:	e7ee      	b.n	800f054 <__libc_init_array+0xc>
 800f076:	f855 3b04 	ldr.w	r3, [r5], #4
 800f07a:	4798      	blx	r3
 800f07c:	3601      	adds	r6, #1
 800f07e:	e7f2      	b.n	800f066 <__libc_init_array+0x1e>
 800f080:	0801085c 	.word	0x0801085c
 800f084:	0801085c 	.word	0x0801085c
 800f088:	0801085c 	.word	0x0801085c
 800f08c:	08010860 	.word	0x08010860

0800f090 <memset>:
 800f090:	4402      	add	r2, r0
 800f092:	4603      	mov	r3, r0
 800f094:	4293      	cmp	r3, r2
 800f096:	d100      	bne.n	800f09a <memset+0xa>
 800f098:	4770      	bx	lr
 800f09a:	f803 1b01 	strb.w	r1, [r3], #1
 800f09e:	e7f9      	b.n	800f094 <memset+0x4>

0800f0a0 <iprintf>:
 800f0a0:	b40f      	push	{r0, r1, r2, r3}
 800f0a2:	4b0a      	ldr	r3, [pc, #40]	; (800f0cc <iprintf+0x2c>)
 800f0a4:	b513      	push	{r0, r1, r4, lr}
 800f0a6:	681c      	ldr	r4, [r3, #0]
 800f0a8:	b124      	cbz	r4, 800f0b4 <iprintf+0x14>
 800f0aa:	69a3      	ldr	r3, [r4, #24]
 800f0ac:	b913      	cbnz	r3, 800f0b4 <iprintf+0x14>
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f000 f9ee 	bl	800f490 <__sinit>
 800f0b4:	ab05      	add	r3, sp, #20
 800f0b6:	9a04      	ldr	r2, [sp, #16]
 800f0b8:	68a1      	ldr	r1, [r4, #8]
 800f0ba:	9301      	str	r3, [sp, #4]
 800f0bc:	4620      	mov	r0, r4
 800f0be:	f000 fbff 	bl	800f8c0 <_vfiprintf_r>
 800f0c2:	b002      	add	sp, #8
 800f0c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0c8:	b004      	add	sp, #16
 800f0ca:	4770      	bx	lr
 800f0cc:	24000054 	.word	0x24000054

0800f0d0 <setvbuf>:
 800f0d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f0d4:	461d      	mov	r5, r3
 800f0d6:	4b5d      	ldr	r3, [pc, #372]	; (800f24c <setvbuf+0x17c>)
 800f0d8:	681f      	ldr	r7, [r3, #0]
 800f0da:	4604      	mov	r4, r0
 800f0dc:	460e      	mov	r6, r1
 800f0de:	4690      	mov	r8, r2
 800f0e0:	b127      	cbz	r7, 800f0ec <setvbuf+0x1c>
 800f0e2:	69bb      	ldr	r3, [r7, #24]
 800f0e4:	b913      	cbnz	r3, 800f0ec <setvbuf+0x1c>
 800f0e6:	4638      	mov	r0, r7
 800f0e8:	f000 f9d2 	bl	800f490 <__sinit>
 800f0ec:	4b58      	ldr	r3, [pc, #352]	; (800f250 <setvbuf+0x180>)
 800f0ee:	429c      	cmp	r4, r3
 800f0f0:	d167      	bne.n	800f1c2 <setvbuf+0xf2>
 800f0f2:	687c      	ldr	r4, [r7, #4]
 800f0f4:	f1b8 0f02 	cmp.w	r8, #2
 800f0f8:	d006      	beq.n	800f108 <setvbuf+0x38>
 800f0fa:	f1b8 0f01 	cmp.w	r8, #1
 800f0fe:	f200 809f 	bhi.w	800f240 <setvbuf+0x170>
 800f102:	2d00      	cmp	r5, #0
 800f104:	f2c0 809c 	blt.w	800f240 <setvbuf+0x170>
 800f108:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f10a:	07db      	lsls	r3, r3, #31
 800f10c:	d405      	bmi.n	800f11a <setvbuf+0x4a>
 800f10e:	89a3      	ldrh	r3, [r4, #12]
 800f110:	0598      	lsls	r0, r3, #22
 800f112:	d402      	bmi.n	800f11a <setvbuf+0x4a>
 800f114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f116:	f000 fa59 	bl	800f5cc <__retarget_lock_acquire_recursive>
 800f11a:	4621      	mov	r1, r4
 800f11c:	4638      	mov	r0, r7
 800f11e:	f000 f923 	bl	800f368 <_fflush_r>
 800f122:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f124:	b141      	cbz	r1, 800f138 <setvbuf+0x68>
 800f126:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f12a:	4299      	cmp	r1, r3
 800f12c:	d002      	beq.n	800f134 <setvbuf+0x64>
 800f12e:	4638      	mov	r0, r7
 800f130:	f000 fabc 	bl	800f6ac <_free_r>
 800f134:	2300      	movs	r3, #0
 800f136:	6363      	str	r3, [r4, #52]	; 0x34
 800f138:	2300      	movs	r3, #0
 800f13a:	61a3      	str	r3, [r4, #24]
 800f13c:	6063      	str	r3, [r4, #4]
 800f13e:	89a3      	ldrh	r3, [r4, #12]
 800f140:	0619      	lsls	r1, r3, #24
 800f142:	d503      	bpl.n	800f14c <setvbuf+0x7c>
 800f144:	6921      	ldr	r1, [r4, #16]
 800f146:	4638      	mov	r0, r7
 800f148:	f000 fab0 	bl	800f6ac <_free_r>
 800f14c:	89a3      	ldrh	r3, [r4, #12]
 800f14e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800f152:	f023 0303 	bic.w	r3, r3, #3
 800f156:	f1b8 0f02 	cmp.w	r8, #2
 800f15a:	81a3      	strh	r3, [r4, #12]
 800f15c:	d06c      	beq.n	800f238 <setvbuf+0x168>
 800f15e:	ab01      	add	r3, sp, #4
 800f160:	466a      	mov	r2, sp
 800f162:	4621      	mov	r1, r4
 800f164:	4638      	mov	r0, r7
 800f166:	f000 fa33 	bl	800f5d0 <__swhatbuf_r>
 800f16a:	89a3      	ldrh	r3, [r4, #12]
 800f16c:	4318      	orrs	r0, r3
 800f16e:	81a0      	strh	r0, [r4, #12]
 800f170:	2d00      	cmp	r5, #0
 800f172:	d130      	bne.n	800f1d6 <setvbuf+0x106>
 800f174:	9d00      	ldr	r5, [sp, #0]
 800f176:	4628      	mov	r0, r5
 800f178:	f000 fa90 	bl	800f69c <malloc>
 800f17c:	4606      	mov	r6, r0
 800f17e:	2800      	cmp	r0, #0
 800f180:	d155      	bne.n	800f22e <setvbuf+0x15e>
 800f182:	f8dd 9000 	ldr.w	r9, [sp]
 800f186:	45a9      	cmp	r9, r5
 800f188:	d14a      	bne.n	800f220 <setvbuf+0x150>
 800f18a:	f04f 35ff 	mov.w	r5, #4294967295
 800f18e:	2200      	movs	r2, #0
 800f190:	60a2      	str	r2, [r4, #8]
 800f192:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800f196:	6022      	str	r2, [r4, #0]
 800f198:	6122      	str	r2, [r4, #16]
 800f19a:	2201      	movs	r2, #1
 800f19c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1a0:	6162      	str	r2, [r4, #20]
 800f1a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f1a4:	f043 0302 	orr.w	r3, r3, #2
 800f1a8:	07d2      	lsls	r2, r2, #31
 800f1aa:	81a3      	strh	r3, [r4, #12]
 800f1ac:	d405      	bmi.n	800f1ba <setvbuf+0xea>
 800f1ae:	f413 7f00 	tst.w	r3, #512	; 0x200
 800f1b2:	d102      	bne.n	800f1ba <setvbuf+0xea>
 800f1b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1b6:	f000 fa0a 	bl	800f5ce <__retarget_lock_release_recursive>
 800f1ba:	4628      	mov	r0, r5
 800f1bc:	b003      	add	sp, #12
 800f1be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1c2:	4b24      	ldr	r3, [pc, #144]	; (800f254 <setvbuf+0x184>)
 800f1c4:	429c      	cmp	r4, r3
 800f1c6:	d101      	bne.n	800f1cc <setvbuf+0xfc>
 800f1c8:	68bc      	ldr	r4, [r7, #8]
 800f1ca:	e793      	b.n	800f0f4 <setvbuf+0x24>
 800f1cc:	4b22      	ldr	r3, [pc, #136]	; (800f258 <setvbuf+0x188>)
 800f1ce:	429c      	cmp	r4, r3
 800f1d0:	bf08      	it	eq
 800f1d2:	68fc      	ldreq	r4, [r7, #12]
 800f1d4:	e78e      	b.n	800f0f4 <setvbuf+0x24>
 800f1d6:	2e00      	cmp	r6, #0
 800f1d8:	d0cd      	beq.n	800f176 <setvbuf+0xa6>
 800f1da:	69bb      	ldr	r3, [r7, #24]
 800f1dc:	b913      	cbnz	r3, 800f1e4 <setvbuf+0x114>
 800f1de:	4638      	mov	r0, r7
 800f1e0:	f000 f956 	bl	800f490 <__sinit>
 800f1e4:	f1b8 0f01 	cmp.w	r8, #1
 800f1e8:	bf08      	it	eq
 800f1ea:	89a3      	ldrheq	r3, [r4, #12]
 800f1ec:	6026      	str	r6, [r4, #0]
 800f1ee:	bf04      	itt	eq
 800f1f0:	f043 0301 	orreq.w	r3, r3, #1
 800f1f4:	81a3      	strheq	r3, [r4, #12]
 800f1f6:	89a2      	ldrh	r2, [r4, #12]
 800f1f8:	f012 0308 	ands.w	r3, r2, #8
 800f1fc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f200:	d01c      	beq.n	800f23c <setvbuf+0x16c>
 800f202:	07d3      	lsls	r3, r2, #31
 800f204:	bf41      	itttt	mi
 800f206:	2300      	movmi	r3, #0
 800f208:	426d      	negmi	r5, r5
 800f20a:	60a3      	strmi	r3, [r4, #8]
 800f20c:	61a5      	strmi	r5, [r4, #24]
 800f20e:	bf58      	it	pl
 800f210:	60a5      	strpl	r5, [r4, #8]
 800f212:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800f214:	f015 0501 	ands.w	r5, r5, #1
 800f218:	d115      	bne.n	800f246 <setvbuf+0x176>
 800f21a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800f21e:	e7c8      	b.n	800f1b2 <setvbuf+0xe2>
 800f220:	4648      	mov	r0, r9
 800f222:	f000 fa3b 	bl	800f69c <malloc>
 800f226:	4606      	mov	r6, r0
 800f228:	2800      	cmp	r0, #0
 800f22a:	d0ae      	beq.n	800f18a <setvbuf+0xba>
 800f22c:	464d      	mov	r5, r9
 800f22e:	89a3      	ldrh	r3, [r4, #12]
 800f230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f234:	81a3      	strh	r3, [r4, #12]
 800f236:	e7d0      	b.n	800f1da <setvbuf+0x10a>
 800f238:	2500      	movs	r5, #0
 800f23a:	e7a8      	b.n	800f18e <setvbuf+0xbe>
 800f23c:	60a3      	str	r3, [r4, #8]
 800f23e:	e7e8      	b.n	800f212 <setvbuf+0x142>
 800f240:	f04f 35ff 	mov.w	r5, #4294967295
 800f244:	e7b9      	b.n	800f1ba <setvbuf+0xea>
 800f246:	2500      	movs	r5, #0
 800f248:	e7b7      	b.n	800f1ba <setvbuf+0xea>
 800f24a:	bf00      	nop
 800f24c:	24000054 	.word	0x24000054
 800f250:	080107e0 	.word	0x080107e0
 800f254:	08010800 	.word	0x08010800
 800f258:	080107c0 	.word	0x080107c0

0800f25c <__sflush_r>:
 800f25c:	898a      	ldrh	r2, [r1, #12]
 800f25e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f262:	4605      	mov	r5, r0
 800f264:	0710      	lsls	r0, r2, #28
 800f266:	460c      	mov	r4, r1
 800f268:	d458      	bmi.n	800f31c <__sflush_r+0xc0>
 800f26a:	684b      	ldr	r3, [r1, #4]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	dc05      	bgt.n	800f27c <__sflush_r+0x20>
 800f270:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f272:	2b00      	cmp	r3, #0
 800f274:	dc02      	bgt.n	800f27c <__sflush_r+0x20>
 800f276:	2000      	movs	r0, #0
 800f278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f27c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f27e:	2e00      	cmp	r6, #0
 800f280:	d0f9      	beq.n	800f276 <__sflush_r+0x1a>
 800f282:	2300      	movs	r3, #0
 800f284:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f288:	682f      	ldr	r7, [r5, #0]
 800f28a:	602b      	str	r3, [r5, #0]
 800f28c:	d032      	beq.n	800f2f4 <__sflush_r+0x98>
 800f28e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f290:	89a3      	ldrh	r3, [r4, #12]
 800f292:	075a      	lsls	r2, r3, #29
 800f294:	d505      	bpl.n	800f2a2 <__sflush_r+0x46>
 800f296:	6863      	ldr	r3, [r4, #4]
 800f298:	1ac0      	subs	r0, r0, r3
 800f29a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f29c:	b10b      	cbz	r3, 800f2a2 <__sflush_r+0x46>
 800f29e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f2a0:	1ac0      	subs	r0, r0, r3
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	4602      	mov	r2, r0
 800f2a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2a8:	6a21      	ldr	r1, [r4, #32]
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	47b0      	blx	r6
 800f2ae:	1c43      	adds	r3, r0, #1
 800f2b0:	89a3      	ldrh	r3, [r4, #12]
 800f2b2:	d106      	bne.n	800f2c2 <__sflush_r+0x66>
 800f2b4:	6829      	ldr	r1, [r5, #0]
 800f2b6:	291d      	cmp	r1, #29
 800f2b8:	d82c      	bhi.n	800f314 <__sflush_r+0xb8>
 800f2ba:	4a2a      	ldr	r2, [pc, #168]	; (800f364 <__sflush_r+0x108>)
 800f2bc:	40ca      	lsrs	r2, r1
 800f2be:	07d6      	lsls	r6, r2, #31
 800f2c0:	d528      	bpl.n	800f314 <__sflush_r+0xb8>
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	6062      	str	r2, [r4, #4]
 800f2c6:	04d9      	lsls	r1, r3, #19
 800f2c8:	6922      	ldr	r2, [r4, #16]
 800f2ca:	6022      	str	r2, [r4, #0]
 800f2cc:	d504      	bpl.n	800f2d8 <__sflush_r+0x7c>
 800f2ce:	1c42      	adds	r2, r0, #1
 800f2d0:	d101      	bne.n	800f2d6 <__sflush_r+0x7a>
 800f2d2:	682b      	ldr	r3, [r5, #0]
 800f2d4:	b903      	cbnz	r3, 800f2d8 <__sflush_r+0x7c>
 800f2d6:	6560      	str	r0, [r4, #84]	; 0x54
 800f2d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2da:	602f      	str	r7, [r5, #0]
 800f2dc:	2900      	cmp	r1, #0
 800f2de:	d0ca      	beq.n	800f276 <__sflush_r+0x1a>
 800f2e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f2e4:	4299      	cmp	r1, r3
 800f2e6:	d002      	beq.n	800f2ee <__sflush_r+0x92>
 800f2e8:	4628      	mov	r0, r5
 800f2ea:	f000 f9df 	bl	800f6ac <_free_r>
 800f2ee:	2000      	movs	r0, #0
 800f2f0:	6360      	str	r0, [r4, #52]	; 0x34
 800f2f2:	e7c1      	b.n	800f278 <__sflush_r+0x1c>
 800f2f4:	6a21      	ldr	r1, [r4, #32]
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	4628      	mov	r0, r5
 800f2fa:	47b0      	blx	r6
 800f2fc:	1c41      	adds	r1, r0, #1
 800f2fe:	d1c7      	bne.n	800f290 <__sflush_r+0x34>
 800f300:	682b      	ldr	r3, [r5, #0]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d0c4      	beq.n	800f290 <__sflush_r+0x34>
 800f306:	2b1d      	cmp	r3, #29
 800f308:	d001      	beq.n	800f30e <__sflush_r+0xb2>
 800f30a:	2b16      	cmp	r3, #22
 800f30c:	d101      	bne.n	800f312 <__sflush_r+0xb6>
 800f30e:	602f      	str	r7, [r5, #0]
 800f310:	e7b1      	b.n	800f276 <__sflush_r+0x1a>
 800f312:	89a3      	ldrh	r3, [r4, #12]
 800f314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f318:	81a3      	strh	r3, [r4, #12]
 800f31a:	e7ad      	b.n	800f278 <__sflush_r+0x1c>
 800f31c:	690f      	ldr	r7, [r1, #16]
 800f31e:	2f00      	cmp	r7, #0
 800f320:	d0a9      	beq.n	800f276 <__sflush_r+0x1a>
 800f322:	0793      	lsls	r3, r2, #30
 800f324:	680e      	ldr	r6, [r1, #0]
 800f326:	bf08      	it	eq
 800f328:	694b      	ldreq	r3, [r1, #20]
 800f32a:	600f      	str	r7, [r1, #0]
 800f32c:	bf18      	it	ne
 800f32e:	2300      	movne	r3, #0
 800f330:	eba6 0807 	sub.w	r8, r6, r7
 800f334:	608b      	str	r3, [r1, #8]
 800f336:	f1b8 0f00 	cmp.w	r8, #0
 800f33a:	dd9c      	ble.n	800f276 <__sflush_r+0x1a>
 800f33c:	6a21      	ldr	r1, [r4, #32]
 800f33e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f340:	4643      	mov	r3, r8
 800f342:	463a      	mov	r2, r7
 800f344:	4628      	mov	r0, r5
 800f346:	47b0      	blx	r6
 800f348:	2800      	cmp	r0, #0
 800f34a:	dc06      	bgt.n	800f35a <__sflush_r+0xfe>
 800f34c:	89a3      	ldrh	r3, [r4, #12]
 800f34e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f352:	81a3      	strh	r3, [r4, #12]
 800f354:	f04f 30ff 	mov.w	r0, #4294967295
 800f358:	e78e      	b.n	800f278 <__sflush_r+0x1c>
 800f35a:	4407      	add	r7, r0
 800f35c:	eba8 0800 	sub.w	r8, r8, r0
 800f360:	e7e9      	b.n	800f336 <__sflush_r+0xda>
 800f362:	bf00      	nop
 800f364:	20400001 	.word	0x20400001

0800f368 <_fflush_r>:
 800f368:	b538      	push	{r3, r4, r5, lr}
 800f36a:	690b      	ldr	r3, [r1, #16]
 800f36c:	4605      	mov	r5, r0
 800f36e:	460c      	mov	r4, r1
 800f370:	b913      	cbnz	r3, 800f378 <_fflush_r+0x10>
 800f372:	2500      	movs	r5, #0
 800f374:	4628      	mov	r0, r5
 800f376:	bd38      	pop	{r3, r4, r5, pc}
 800f378:	b118      	cbz	r0, 800f382 <_fflush_r+0x1a>
 800f37a:	6983      	ldr	r3, [r0, #24]
 800f37c:	b90b      	cbnz	r3, 800f382 <_fflush_r+0x1a>
 800f37e:	f000 f887 	bl	800f490 <__sinit>
 800f382:	4b14      	ldr	r3, [pc, #80]	; (800f3d4 <_fflush_r+0x6c>)
 800f384:	429c      	cmp	r4, r3
 800f386:	d11b      	bne.n	800f3c0 <_fflush_r+0x58>
 800f388:	686c      	ldr	r4, [r5, #4]
 800f38a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d0ef      	beq.n	800f372 <_fflush_r+0xa>
 800f392:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f394:	07d0      	lsls	r0, r2, #31
 800f396:	d404      	bmi.n	800f3a2 <_fflush_r+0x3a>
 800f398:	0599      	lsls	r1, r3, #22
 800f39a:	d402      	bmi.n	800f3a2 <_fflush_r+0x3a>
 800f39c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f39e:	f000 f915 	bl	800f5cc <__retarget_lock_acquire_recursive>
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	4621      	mov	r1, r4
 800f3a6:	f7ff ff59 	bl	800f25c <__sflush_r>
 800f3aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3ac:	07da      	lsls	r2, r3, #31
 800f3ae:	4605      	mov	r5, r0
 800f3b0:	d4e0      	bmi.n	800f374 <_fflush_r+0xc>
 800f3b2:	89a3      	ldrh	r3, [r4, #12]
 800f3b4:	059b      	lsls	r3, r3, #22
 800f3b6:	d4dd      	bmi.n	800f374 <_fflush_r+0xc>
 800f3b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3ba:	f000 f908 	bl	800f5ce <__retarget_lock_release_recursive>
 800f3be:	e7d9      	b.n	800f374 <_fflush_r+0xc>
 800f3c0:	4b05      	ldr	r3, [pc, #20]	; (800f3d8 <_fflush_r+0x70>)
 800f3c2:	429c      	cmp	r4, r3
 800f3c4:	d101      	bne.n	800f3ca <_fflush_r+0x62>
 800f3c6:	68ac      	ldr	r4, [r5, #8]
 800f3c8:	e7df      	b.n	800f38a <_fflush_r+0x22>
 800f3ca:	4b04      	ldr	r3, [pc, #16]	; (800f3dc <_fflush_r+0x74>)
 800f3cc:	429c      	cmp	r4, r3
 800f3ce:	bf08      	it	eq
 800f3d0:	68ec      	ldreq	r4, [r5, #12]
 800f3d2:	e7da      	b.n	800f38a <_fflush_r+0x22>
 800f3d4:	080107e0 	.word	0x080107e0
 800f3d8:	08010800 	.word	0x08010800
 800f3dc:	080107c0 	.word	0x080107c0

0800f3e0 <std>:
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	b510      	push	{r4, lr}
 800f3e4:	4604      	mov	r4, r0
 800f3e6:	e9c0 3300 	strd	r3, r3, [r0]
 800f3ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f3ee:	6083      	str	r3, [r0, #8]
 800f3f0:	8181      	strh	r1, [r0, #12]
 800f3f2:	6643      	str	r3, [r0, #100]	; 0x64
 800f3f4:	81c2      	strh	r2, [r0, #14]
 800f3f6:	6183      	str	r3, [r0, #24]
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	2208      	movs	r2, #8
 800f3fc:	305c      	adds	r0, #92	; 0x5c
 800f3fe:	f7ff fe47 	bl	800f090 <memset>
 800f402:	4b05      	ldr	r3, [pc, #20]	; (800f418 <std+0x38>)
 800f404:	6263      	str	r3, [r4, #36]	; 0x24
 800f406:	4b05      	ldr	r3, [pc, #20]	; (800f41c <std+0x3c>)
 800f408:	62a3      	str	r3, [r4, #40]	; 0x28
 800f40a:	4b05      	ldr	r3, [pc, #20]	; (800f420 <std+0x40>)
 800f40c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f40e:	4b05      	ldr	r3, [pc, #20]	; (800f424 <std+0x44>)
 800f410:	6224      	str	r4, [r4, #32]
 800f412:	6323      	str	r3, [r4, #48]	; 0x30
 800f414:	bd10      	pop	{r4, pc}
 800f416:	bf00      	nop
 800f418:	0800fe69 	.word	0x0800fe69
 800f41c:	0800fe8b 	.word	0x0800fe8b
 800f420:	0800fec3 	.word	0x0800fec3
 800f424:	0800fee7 	.word	0x0800fee7

0800f428 <_cleanup_r>:
 800f428:	4901      	ldr	r1, [pc, #4]	; (800f430 <_cleanup_r+0x8>)
 800f42a:	f000 b8af 	b.w	800f58c <_fwalk_reent>
 800f42e:	bf00      	nop
 800f430:	0800f369 	.word	0x0800f369

0800f434 <__sfmoreglue>:
 800f434:	b570      	push	{r4, r5, r6, lr}
 800f436:	2268      	movs	r2, #104	; 0x68
 800f438:	1e4d      	subs	r5, r1, #1
 800f43a:	4355      	muls	r5, r2
 800f43c:	460e      	mov	r6, r1
 800f43e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f442:	f000 f99f 	bl	800f784 <_malloc_r>
 800f446:	4604      	mov	r4, r0
 800f448:	b140      	cbz	r0, 800f45c <__sfmoreglue+0x28>
 800f44a:	2100      	movs	r1, #0
 800f44c:	e9c0 1600 	strd	r1, r6, [r0]
 800f450:	300c      	adds	r0, #12
 800f452:	60a0      	str	r0, [r4, #8]
 800f454:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f458:	f7ff fe1a 	bl	800f090 <memset>
 800f45c:	4620      	mov	r0, r4
 800f45e:	bd70      	pop	{r4, r5, r6, pc}

0800f460 <__sfp_lock_acquire>:
 800f460:	4801      	ldr	r0, [pc, #4]	; (800f468 <__sfp_lock_acquire+0x8>)
 800f462:	f000 b8b3 	b.w	800f5cc <__retarget_lock_acquire_recursive>
 800f466:	bf00      	nop
 800f468:	240e0039 	.word	0x240e0039

0800f46c <__sfp_lock_release>:
 800f46c:	4801      	ldr	r0, [pc, #4]	; (800f474 <__sfp_lock_release+0x8>)
 800f46e:	f000 b8ae 	b.w	800f5ce <__retarget_lock_release_recursive>
 800f472:	bf00      	nop
 800f474:	240e0039 	.word	0x240e0039

0800f478 <__sinit_lock_acquire>:
 800f478:	4801      	ldr	r0, [pc, #4]	; (800f480 <__sinit_lock_acquire+0x8>)
 800f47a:	f000 b8a7 	b.w	800f5cc <__retarget_lock_acquire_recursive>
 800f47e:	bf00      	nop
 800f480:	240e003a 	.word	0x240e003a

0800f484 <__sinit_lock_release>:
 800f484:	4801      	ldr	r0, [pc, #4]	; (800f48c <__sinit_lock_release+0x8>)
 800f486:	f000 b8a2 	b.w	800f5ce <__retarget_lock_release_recursive>
 800f48a:	bf00      	nop
 800f48c:	240e003a 	.word	0x240e003a

0800f490 <__sinit>:
 800f490:	b510      	push	{r4, lr}
 800f492:	4604      	mov	r4, r0
 800f494:	f7ff fff0 	bl	800f478 <__sinit_lock_acquire>
 800f498:	69a3      	ldr	r3, [r4, #24]
 800f49a:	b11b      	cbz	r3, 800f4a4 <__sinit+0x14>
 800f49c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4a0:	f7ff bff0 	b.w	800f484 <__sinit_lock_release>
 800f4a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f4a8:	6523      	str	r3, [r4, #80]	; 0x50
 800f4aa:	4b13      	ldr	r3, [pc, #76]	; (800f4f8 <__sinit+0x68>)
 800f4ac:	4a13      	ldr	r2, [pc, #76]	; (800f4fc <__sinit+0x6c>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800f4b2:	42a3      	cmp	r3, r4
 800f4b4:	bf04      	itt	eq
 800f4b6:	2301      	moveq	r3, #1
 800f4b8:	61a3      	streq	r3, [r4, #24]
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	f000 f820 	bl	800f500 <__sfp>
 800f4c0:	6060      	str	r0, [r4, #4]
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f000 f81c 	bl	800f500 <__sfp>
 800f4c8:	60a0      	str	r0, [r4, #8]
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	f000 f818 	bl	800f500 <__sfp>
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	60e0      	str	r0, [r4, #12]
 800f4d4:	2104      	movs	r1, #4
 800f4d6:	6860      	ldr	r0, [r4, #4]
 800f4d8:	f7ff ff82 	bl	800f3e0 <std>
 800f4dc:	68a0      	ldr	r0, [r4, #8]
 800f4de:	2201      	movs	r2, #1
 800f4e0:	2109      	movs	r1, #9
 800f4e2:	f7ff ff7d 	bl	800f3e0 <std>
 800f4e6:	68e0      	ldr	r0, [r4, #12]
 800f4e8:	2202      	movs	r2, #2
 800f4ea:	2112      	movs	r1, #18
 800f4ec:	f7ff ff78 	bl	800f3e0 <std>
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	61a3      	str	r3, [r4, #24]
 800f4f4:	e7d2      	b.n	800f49c <__sinit+0xc>
 800f4f6:	bf00      	nop
 800f4f8:	080107bc 	.word	0x080107bc
 800f4fc:	0800f429 	.word	0x0800f429

0800f500 <__sfp>:
 800f500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f502:	4607      	mov	r7, r0
 800f504:	f7ff ffac 	bl	800f460 <__sfp_lock_acquire>
 800f508:	4b1e      	ldr	r3, [pc, #120]	; (800f584 <__sfp+0x84>)
 800f50a:	681e      	ldr	r6, [r3, #0]
 800f50c:	69b3      	ldr	r3, [r6, #24]
 800f50e:	b913      	cbnz	r3, 800f516 <__sfp+0x16>
 800f510:	4630      	mov	r0, r6
 800f512:	f7ff ffbd 	bl	800f490 <__sinit>
 800f516:	3648      	adds	r6, #72	; 0x48
 800f518:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f51c:	3b01      	subs	r3, #1
 800f51e:	d503      	bpl.n	800f528 <__sfp+0x28>
 800f520:	6833      	ldr	r3, [r6, #0]
 800f522:	b30b      	cbz	r3, 800f568 <__sfp+0x68>
 800f524:	6836      	ldr	r6, [r6, #0]
 800f526:	e7f7      	b.n	800f518 <__sfp+0x18>
 800f528:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f52c:	b9d5      	cbnz	r5, 800f564 <__sfp+0x64>
 800f52e:	4b16      	ldr	r3, [pc, #88]	; (800f588 <__sfp+0x88>)
 800f530:	60e3      	str	r3, [r4, #12]
 800f532:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f536:	6665      	str	r5, [r4, #100]	; 0x64
 800f538:	f000 f847 	bl	800f5ca <__retarget_lock_init_recursive>
 800f53c:	f7ff ff96 	bl	800f46c <__sfp_lock_release>
 800f540:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f544:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f548:	6025      	str	r5, [r4, #0]
 800f54a:	61a5      	str	r5, [r4, #24]
 800f54c:	2208      	movs	r2, #8
 800f54e:	4629      	mov	r1, r5
 800f550:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f554:	f7ff fd9c 	bl	800f090 <memset>
 800f558:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f55c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f560:	4620      	mov	r0, r4
 800f562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f564:	3468      	adds	r4, #104	; 0x68
 800f566:	e7d9      	b.n	800f51c <__sfp+0x1c>
 800f568:	2104      	movs	r1, #4
 800f56a:	4638      	mov	r0, r7
 800f56c:	f7ff ff62 	bl	800f434 <__sfmoreglue>
 800f570:	4604      	mov	r4, r0
 800f572:	6030      	str	r0, [r6, #0]
 800f574:	2800      	cmp	r0, #0
 800f576:	d1d5      	bne.n	800f524 <__sfp+0x24>
 800f578:	f7ff ff78 	bl	800f46c <__sfp_lock_release>
 800f57c:	230c      	movs	r3, #12
 800f57e:	603b      	str	r3, [r7, #0]
 800f580:	e7ee      	b.n	800f560 <__sfp+0x60>
 800f582:	bf00      	nop
 800f584:	080107bc 	.word	0x080107bc
 800f588:	ffff0001 	.word	0xffff0001

0800f58c <_fwalk_reent>:
 800f58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f590:	4606      	mov	r6, r0
 800f592:	4688      	mov	r8, r1
 800f594:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f598:	2700      	movs	r7, #0
 800f59a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f59e:	f1b9 0901 	subs.w	r9, r9, #1
 800f5a2:	d505      	bpl.n	800f5b0 <_fwalk_reent+0x24>
 800f5a4:	6824      	ldr	r4, [r4, #0]
 800f5a6:	2c00      	cmp	r4, #0
 800f5a8:	d1f7      	bne.n	800f59a <_fwalk_reent+0xe>
 800f5aa:	4638      	mov	r0, r7
 800f5ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5b0:	89ab      	ldrh	r3, [r5, #12]
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	d907      	bls.n	800f5c6 <_fwalk_reent+0x3a>
 800f5b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	d003      	beq.n	800f5c6 <_fwalk_reent+0x3a>
 800f5be:	4629      	mov	r1, r5
 800f5c0:	4630      	mov	r0, r6
 800f5c2:	47c0      	blx	r8
 800f5c4:	4307      	orrs	r7, r0
 800f5c6:	3568      	adds	r5, #104	; 0x68
 800f5c8:	e7e9      	b.n	800f59e <_fwalk_reent+0x12>

0800f5ca <__retarget_lock_init_recursive>:
 800f5ca:	4770      	bx	lr

0800f5cc <__retarget_lock_acquire_recursive>:
 800f5cc:	4770      	bx	lr

0800f5ce <__retarget_lock_release_recursive>:
 800f5ce:	4770      	bx	lr

0800f5d0 <__swhatbuf_r>:
 800f5d0:	b570      	push	{r4, r5, r6, lr}
 800f5d2:	460e      	mov	r6, r1
 800f5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5d8:	2900      	cmp	r1, #0
 800f5da:	b096      	sub	sp, #88	; 0x58
 800f5dc:	4614      	mov	r4, r2
 800f5de:	461d      	mov	r5, r3
 800f5e0:	da08      	bge.n	800f5f4 <__swhatbuf_r+0x24>
 800f5e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	602a      	str	r2, [r5, #0]
 800f5ea:	061a      	lsls	r2, r3, #24
 800f5ec:	d410      	bmi.n	800f610 <__swhatbuf_r+0x40>
 800f5ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5f2:	e00e      	b.n	800f612 <__swhatbuf_r+0x42>
 800f5f4:	466a      	mov	r2, sp
 800f5f6:	f000 fd5d 	bl	80100b4 <_fstat_r>
 800f5fa:	2800      	cmp	r0, #0
 800f5fc:	dbf1      	blt.n	800f5e2 <__swhatbuf_r+0x12>
 800f5fe:	9a01      	ldr	r2, [sp, #4]
 800f600:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f604:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f608:	425a      	negs	r2, r3
 800f60a:	415a      	adcs	r2, r3
 800f60c:	602a      	str	r2, [r5, #0]
 800f60e:	e7ee      	b.n	800f5ee <__swhatbuf_r+0x1e>
 800f610:	2340      	movs	r3, #64	; 0x40
 800f612:	2000      	movs	r0, #0
 800f614:	6023      	str	r3, [r4, #0]
 800f616:	b016      	add	sp, #88	; 0x58
 800f618:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f61c <__smakebuf_r>:
 800f61c:	898b      	ldrh	r3, [r1, #12]
 800f61e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f620:	079d      	lsls	r5, r3, #30
 800f622:	4606      	mov	r6, r0
 800f624:	460c      	mov	r4, r1
 800f626:	d507      	bpl.n	800f638 <__smakebuf_r+0x1c>
 800f628:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f62c:	6023      	str	r3, [r4, #0]
 800f62e:	6123      	str	r3, [r4, #16]
 800f630:	2301      	movs	r3, #1
 800f632:	6163      	str	r3, [r4, #20]
 800f634:	b002      	add	sp, #8
 800f636:	bd70      	pop	{r4, r5, r6, pc}
 800f638:	ab01      	add	r3, sp, #4
 800f63a:	466a      	mov	r2, sp
 800f63c:	f7ff ffc8 	bl	800f5d0 <__swhatbuf_r>
 800f640:	9900      	ldr	r1, [sp, #0]
 800f642:	4605      	mov	r5, r0
 800f644:	4630      	mov	r0, r6
 800f646:	f000 f89d 	bl	800f784 <_malloc_r>
 800f64a:	b948      	cbnz	r0, 800f660 <__smakebuf_r+0x44>
 800f64c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f650:	059a      	lsls	r2, r3, #22
 800f652:	d4ef      	bmi.n	800f634 <__smakebuf_r+0x18>
 800f654:	f023 0303 	bic.w	r3, r3, #3
 800f658:	f043 0302 	orr.w	r3, r3, #2
 800f65c:	81a3      	strh	r3, [r4, #12]
 800f65e:	e7e3      	b.n	800f628 <__smakebuf_r+0xc>
 800f660:	4b0d      	ldr	r3, [pc, #52]	; (800f698 <__smakebuf_r+0x7c>)
 800f662:	62b3      	str	r3, [r6, #40]	; 0x28
 800f664:	89a3      	ldrh	r3, [r4, #12]
 800f666:	6020      	str	r0, [r4, #0]
 800f668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f66c:	81a3      	strh	r3, [r4, #12]
 800f66e:	9b00      	ldr	r3, [sp, #0]
 800f670:	6163      	str	r3, [r4, #20]
 800f672:	9b01      	ldr	r3, [sp, #4]
 800f674:	6120      	str	r0, [r4, #16]
 800f676:	b15b      	cbz	r3, 800f690 <__smakebuf_r+0x74>
 800f678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f67c:	4630      	mov	r0, r6
 800f67e:	f000 fd2b 	bl	80100d8 <_isatty_r>
 800f682:	b128      	cbz	r0, 800f690 <__smakebuf_r+0x74>
 800f684:	89a3      	ldrh	r3, [r4, #12]
 800f686:	f023 0303 	bic.w	r3, r3, #3
 800f68a:	f043 0301 	orr.w	r3, r3, #1
 800f68e:	81a3      	strh	r3, [r4, #12]
 800f690:	89a0      	ldrh	r0, [r4, #12]
 800f692:	4305      	orrs	r5, r0
 800f694:	81a5      	strh	r5, [r4, #12]
 800f696:	e7cd      	b.n	800f634 <__smakebuf_r+0x18>
 800f698:	0800f429 	.word	0x0800f429

0800f69c <malloc>:
 800f69c:	4b02      	ldr	r3, [pc, #8]	; (800f6a8 <malloc+0xc>)
 800f69e:	4601      	mov	r1, r0
 800f6a0:	6818      	ldr	r0, [r3, #0]
 800f6a2:	f000 b86f 	b.w	800f784 <_malloc_r>
 800f6a6:	bf00      	nop
 800f6a8:	24000054 	.word	0x24000054

0800f6ac <_free_r>:
 800f6ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6ae:	2900      	cmp	r1, #0
 800f6b0:	d044      	beq.n	800f73c <_free_r+0x90>
 800f6b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6b6:	9001      	str	r0, [sp, #4]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	f1a1 0404 	sub.w	r4, r1, #4
 800f6be:	bfb8      	it	lt
 800f6c0:	18e4      	addlt	r4, r4, r3
 800f6c2:	f000 fd2b 	bl	801011c <__malloc_lock>
 800f6c6:	4a1e      	ldr	r2, [pc, #120]	; (800f740 <_free_r+0x94>)
 800f6c8:	9801      	ldr	r0, [sp, #4]
 800f6ca:	6813      	ldr	r3, [r2, #0]
 800f6cc:	b933      	cbnz	r3, 800f6dc <_free_r+0x30>
 800f6ce:	6063      	str	r3, [r4, #4]
 800f6d0:	6014      	str	r4, [r2, #0]
 800f6d2:	b003      	add	sp, #12
 800f6d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6d8:	f000 bd26 	b.w	8010128 <__malloc_unlock>
 800f6dc:	42a3      	cmp	r3, r4
 800f6de:	d908      	bls.n	800f6f2 <_free_r+0x46>
 800f6e0:	6825      	ldr	r5, [r4, #0]
 800f6e2:	1961      	adds	r1, r4, r5
 800f6e4:	428b      	cmp	r3, r1
 800f6e6:	bf01      	itttt	eq
 800f6e8:	6819      	ldreq	r1, [r3, #0]
 800f6ea:	685b      	ldreq	r3, [r3, #4]
 800f6ec:	1949      	addeq	r1, r1, r5
 800f6ee:	6021      	streq	r1, [r4, #0]
 800f6f0:	e7ed      	b.n	800f6ce <_free_r+0x22>
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	685b      	ldr	r3, [r3, #4]
 800f6f6:	b10b      	cbz	r3, 800f6fc <_free_r+0x50>
 800f6f8:	42a3      	cmp	r3, r4
 800f6fa:	d9fa      	bls.n	800f6f2 <_free_r+0x46>
 800f6fc:	6811      	ldr	r1, [r2, #0]
 800f6fe:	1855      	adds	r5, r2, r1
 800f700:	42a5      	cmp	r5, r4
 800f702:	d10b      	bne.n	800f71c <_free_r+0x70>
 800f704:	6824      	ldr	r4, [r4, #0]
 800f706:	4421      	add	r1, r4
 800f708:	1854      	adds	r4, r2, r1
 800f70a:	42a3      	cmp	r3, r4
 800f70c:	6011      	str	r1, [r2, #0]
 800f70e:	d1e0      	bne.n	800f6d2 <_free_r+0x26>
 800f710:	681c      	ldr	r4, [r3, #0]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	6053      	str	r3, [r2, #4]
 800f716:	4421      	add	r1, r4
 800f718:	6011      	str	r1, [r2, #0]
 800f71a:	e7da      	b.n	800f6d2 <_free_r+0x26>
 800f71c:	d902      	bls.n	800f724 <_free_r+0x78>
 800f71e:	230c      	movs	r3, #12
 800f720:	6003      	str	r3, [r0, #0]
 800f722:	e7d6      	b.n	800f6d2 <_free_r+0x26>
 800f724:	6825      	ldr	r5, [r4, #0]
 800f726:	1961      	adds	r1, r4, r5
 800f728:	428b      	cmp	r3, r1
 800f72a:	bf04      	itt	eq
 800f72c:	6819      	ldreq	r1, [r3, #0]
 800f72e:	685b      	ldreq	r3, [r3, #4]
 800f730:	6063      	str	r3, [r4, #4]
 800f732:	bf04      	itt	eq
 800f734:	1949      	addeq	r1, r1, r5
 800f736:	6021      	streq	r1, [r4, #0]
 800f738:	6054      	str	r4, [r2, #4]
 800f73a:	e7ca      	b.n	800f6d2 <_free_r+0x26>
 800f73c:	b003      	add	sp, #12
 800f73e:	bd30      	pop	{r4, r5, pc}
 800f740:	240e003c 	.word	0x240e003c

0800f744 <sbrk_aligned>:
 800f744:	b570      	push	{r4, r5, r6, lr}
 800f746:	4e0e      	ldr	r6, [pc, #56]	; (800f780 <sbrk_aligned+0x3c>)
 800f748:	460c      	mov	r4, r1
 800f74a:	6831      	ldr	r1, [r6, #0]
 800f74c:	4605      	mov	r5, r0
 800f74e:	b911      	cbnz	r1, 800f756 <sbrk_aligned+0x12>
 800f750:	f000 fb7a 	bl	800fe48 <_sbrk_r>
 800f754:	6030      	str	r0, [r6, #0]
 800f756:	4621      	mov	r1, r4
 800f758:	4628      	mov	r0, r5
 800f75a:	f000 fb75 	bl	800fe48 <_sbrk_r>
 800f75e:	1c43      	adds	r3, r0, #1
 800f760:	d00a      	beq.n	800f778 <sbrk_aligned+0x34>
 800f762:	1cc4      	adds	r4, r0, #3
 800f764:	f024 0403 	bic.w	r4, r4, #3
 800f768:	42a0      	cmp	r0, r4
 800f76a:	d007      	beq.n	800f77c <sbrk_aligned+0x38>
 800f76c:	1a21      	subs	r1, r4, r0
 800f76e:	4628      	mov	r0, r5
 800f770:	f000 fb6a 	bl	800fe48 <_sbrk_r>
 800f774:	3001      	adds	r0, #1
 800f776:	d101      	bne.n	800f77c <sbrk_aligned+0x38>
 800f778:	f04f 34ff 	mov.w	r4, #4294967295
 800f77c:	4620      	mov	r0, r4
 800f77e:	bd70      	pop	{r4, r5, r6, pc}
 800f780:	240e0040 	.word	0x240e0040

0800f784 <_malloc_r>:
 800f784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f788:	1ccd      	adds	r5, r1, #3
 800f78a:	f025 0503 	bic.w	r5, r5, #3
 800f78e:	3508      	adds	r5, #8
 800f790:	2d0c      	cmp	r5, #12
 800f792:	bf38      	it	cc
 800f794:	250c      	movcc	r5, #12
 800f796:	2d00      	cmp	r5, #0
 800f798:	4607      	mov	r7, r0
 800f79a:	db01      	blt.n	800f7a0 <_malloc_r+0x1c>
 800f79c:	42a9      	cmp	r1, r5
 800f79e:	d905      	bls.n	800f7ac <_malloc_r+0x28>
 800f7a0:	230c      	movs	r3, #12
 800f7a2:	603b      	str	r3, [r7, #0]
 800f7a4:	2600      	movs	r6, #0
 800f7a6:	4630      	mov	r0, r6
 800f7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7ac:	4e2e      	ldr	r6, [pc, #184]	; (800f868 <_malloc_r+0xe4>)
 800f7ae:	f000 fcb5 	bl	801011c <__malloc_lock>
 800f7b2:	6833      	ldr	r3, [r6, #0]
 800f7b4:	461c      	mov	r4, r3
 800f7b6:	bb34      	cbnz	r4, 800f806 <_malloc_r+0x82>
 800f7b8:	4629      	mov	r1, r5
 800f7ba:	4638      	mov	r0, r7
 800f7bc:	f7ff ffc2 	bl	800f744 <sbrk_aligned>
 800f7c0:	1c43      	adds	r3, r0, #1
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	d14d      	bne.n	800f862 <_malloc_r+0xde>
 800f7c6:	6834      	ldr	r4, [r6, #0]
 800f7c8:	4626      	mov	r6, r4
 800f7ca:	2e00      	cmp	r6, #0
 800f7cc:	d140      	bne.n	800f850 <_malloc_r+0xcc>
 800f7ce:	6823      	ldr	r3, [r4, #0]
 800f7d0:	4631      	mov	r1, r6
 800f7d2:	4638      	mov	r0, r7
 800f7d4:	eb04 0803 	add.w	r8, r4, r3
 800f7d8:	f000 fb36 	bl	800fe48 <_sbrk_r>
 800f7dc:	4580      	cmp	r8, r0
 800f7de:	d13a      	bne.n	800f856 <_malloc_r+0xd2>
 800f7e0:	6821      	ldr	r1, [r4, #0]
 800f7e2:	3503      	adds	r5, #3
 800f7e4:	1a6d      	subs	r5, r5, r1
 800f7e6:	f025 0503 	bic.w	r5, r5, #3
 800f7ea:	3508      	adds	r5, #8
 800f7ec:	2d0c      	cmp	r5, #12
 800f7ee:	bf38      	it	cc
 800f7f0:	250c      	movcc	r5, #12
 800f7f2:	4629      	mov	r1, r5
 800f7f4:	4638      	mov	r0, r7
 800f7f6:	f7ff ffa5 	bl	800f744 <sbrk_aligned>
 800f7fa:	3001      	adds	r0, #1
 800f7fc:	d02b      	beq.n	800f856 <_malloc_r+0xd2>
 800f7fe:	6823      	ldr	r3, [r4, #0]
 800f800:	442b      	add	r3, r5
 800f802:	6023      	str	r3, [r4, #0]
 800f804:	e00e      	b.n	800f824 <_malloc_r+0xa0>
 800f806:	6822      	ldr	r2, [r4, #0]
 800f808:	1b52      	subs	r2, r2, r5
 800f80a:	d41e      	bmi.n	800f84a <_malloc_r+0xc6>
 800f80c:	2a0b      	cmp	r2, #11
 800f80e:	d916      	bls.n	800f83e <_malloc_r+0xba>
 800f810:	1961      	adds	r1, r4, r5
 800f812:	42a3      	cmp	r3, r4
 800f814:	6025      	str	r5, [r4, #0]
 800f816:	bf18      	it	ne
 800f818:	6059      	strne	r1, [r3, #4]
 800f81a:	6863      	ldr	r3, [r4, #4]
 800f81c:	bf08      	it	eq
 800f81e:	6031      	streq	r1, [r6, #0]
 800f820:	5162      	str	r2, [r4, r5]
 800f822:	604b      	str	r3, [r1, #4]
 800f824:	4638      	mov	r0, r7
 800f826:	f104 060b 	add.w	r6, r4, #11
 800f82a:	f000 fc7d 	bl	8010128 <__malloc_unlock>
 800f82e:	f026 0607 	bic.w	r6, r6, #7
 800f832:	1d23      	adds	r3, r4, #4
 800f834:	1af2      	subs	r2, r6, r3
 800f836:	d0b6      	beq.n	800f7a6 <_malloc_r+0x22>
 800f838:	1b9b      	subs	r3, r3, r6
 800f83a:	50a3      	str	r3, [r4, r2]
 800f83c:	e7b3      	b.n	800f7a6 <_malloc_r+0x22>
 800f83e:	6862      	ldr	r2, [r4, #4]
 800f840:	42a3      	cmp	r3, r4
 800f842:	bf0c      	ite	eq
 800f844:	6032      	streq	r2, [r6, #0]
 800f846:	605a      	strne	r2, [r3, #4]
 800f848:	e7ec      	b.n	800f824 <_malloc_r+0xa0>
 800f84a:	4623      	mov	r3, r4
 800f84c:	6864      	ldr	r4, [r4, #4]
 800f84e:	e7b2      	b.n	800f7b6 <_malloc_r+0x32>
 800f850:	4634      	mov	r4, r6
 800f852:	6876      	ldr	r6, [r6, #4]
 800f854:	e7b9      	b.n	800f7ca <_malloc_r+0x46>
 800f856:	230c      	movs	r3, #12
 800f858:	603b      	str	r3, [r7, #0]
 800f85a:	4638      	mov	r0, r7
 800f85c:	f000 fc64 	bl	8010128 <__malloc_unlock>
 800f860:	e7a1      	b.n	800f7a6 <_malloc_r+0x22>
 800f862:	6025      	str	r5, [r4, #0]
 800f864:	e7de      	b.n	800f824 <_malloc_r+0xa0>
 800f866:	bf00      	nop
 800f868:	240e003c 	.word	0x240e003c

0800f86c <__sfputc_r>:
 800f86c:	6893      	ldr	r3, [r2, #8]
 800f86e:	3b01      	subs	r3, #1
 800f870:	2b00      	cmp	r3, #0
 800f872:	b410      	push	{r4}
 800f874:	6093      	str	r3, [r2, #8]
 800f876:	da08      	bge.n	800f88a <__sfputc_r+0x1e>
 800f878:	6994      	ldr	r4, [r2, #24]
 800f87a:	42a3      	cmp	r3, r4
 800f87c:	db01      	blt.n	800f882 <__sfputc_r+0x16>
 800f87e:	290a      	cmp	r1, #10
 800f880:	d103      	bne.n	800f88a <__sfputc_r+0x1e>
 800f882:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f886:	f000 bb33 	b.w	800fef0 <__swbuf_r>
 800f88a:	6813      	ldr	r3, [r2, #0]
 800f88c:	1c58      	adds	r0, r3, #1
 800f88e:	6010      	str	r0, [r2, #0]
 800f890:	7019      	strb	r1, [r3, #0]
 800f892:	4608      	mov	r0, r1
 800f894:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f898:	4770      	bx	lr

0800f89a <__sfputs_r>:
 800f89a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f89c:	4606      	mov	r6, r0
 800f89e:	460f      	mov	r7, r1
 800f8a0:	4614      	mov	r4, r2
 800f8a2:	18d5      	adds	r5, r2, r3
 800f8a4:	42ac      	cmp	r4, r5
 800f8a6:	d101      	bne.n	800f8ac <__sfputs_r+0x12>
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	e007      	b.n	800f8bc <__sfputs_r+0x22>
 800f8ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8b0:	463a      	mov	r2, r7
 800f8b2:	4630      	mov	r0, r6
 800f8b4:	f7ff ffda 	bl	800f86c <__sfputc_r>
 800f8b8:	1c43      	adds	r3, r0, #1
 800f8ba:	d1f3      	bne.n	800f8a4 <__sfputs_r+0xa>
 800f8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f8c0 <_vfiprintf_r>:
 800f8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8c4:	460d      	mov	r5, r1
 800f8c6:	b09d      	sub	sp, #116	; 0x74
 800f8c8:	4614      	mov	r4, r2
 800f8ca:	4698      	mov	r8, r3
 800f8cc:	4606      	mov	r6, r0
 800f8ce:	b118      	cbz	r0, 800f8d8 <_vfiprintf_r+0x18>
 800f8d0:	6983      	ldr	r3, [r0, #24]
 800f8d2:	b90b      	cbnz	r3, 800f8d8 <_vfiprintf_r+0x18>
 800f8d4:	f7ff fddc 	bl	800f490 <__sinit>
 800f8d8:	4b89      	ldr	r3, [pc, #548]	; (800fb00 <_vfiprintf_r+0x240>)
 800f8da:	429d      	cmp	r5, r3
 800f8dc:	d11b      	bne.n	800f916 <_vfiprintf_r+0x56>
 800f8de:	6875      	ldr	r5, [r6, #4]
 800f8e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8e2:	07d9      	lsls	r1, r3, #31
 800f8e4:	d405      	bmi.n	800f8f2 <_vfiprintf_r+0x32>
 800f8e6:	89ab      	ldrh	r3, [r5, #12]
 800f8e8:	059a      	lsls	r2, r3, #22
 800f8ea:	d402      	bmi.n	800f8f2 <_vfiprintf_r+0x32>
 800f8ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8ee:	f7ff fe6d 	bl	800f5cc <__retarget_lock_acquire_recursive>
 800f8f2:	89ab      	ldrh	r3, [r5, #12]
 800f8f4:	071b      	lsls	r3, r3, #28
 800f8f6:	d501      	bpl.n	800f8fc <_vfiprintf_r+0x3c>
 800f8f8:	692b      	ldr	r3, [r5, #16]
 800f8fa:	b9eb      	cbnz	r3, 800f938 <_vfiprintf_r+0x78>
 800f8fc:	4629      	mov	r1, r5
 800f8fe:	4630      	mov	r0, r6
 800f900:	f000 fb5a 	bl	800ffb8 <__swsetup_r>
 800f904:	b1c0      	cbz	r0, 800f938 <_vfiprintf_r+0x78>
 800f906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f908:	07dc      	lsls	r4, r3, #31
 800f90a:	d50e      	bpl.n	800f92a <_vfiprintf_r+0x6a>
 800f90c:	f04f 30ff 	mov.w	r0, #4294967295
 800f910:	b01d      	add	sp, #116	; 0x74
 800f912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f916:	4b7b      	ldr	r3, [pc, #492]	; (800fb04 <_vfiprintf_r+0x244>)
 800f918:	429d      	cmp	r5, r3
 800f91a:	d101      	bne.n	800f920 <_vfiprintf_r+0x60>
 800f91c:	68b5      	ldr	r5, [r6, #8]
 800f91e:	e7df      	b.n	800f8e0 <_vfiprintf_r+0x20>
 800f920:	4b79      	ldr	r3, [pc, #484]	; (800fb08 <_vfiprintf_r+0x248>)
 800f922:	429d      	cmp	r5, r3
 800f924:	bf08      	it	eq
 800f926:	68f5      	ldreq	r5, [r6, #12]
 800f928:	e7da      	b.n	800f8e0 <_vfiprintf_r+0x20>
 800f92a:	89ab      	ldrh	r3, [r5, #12]
 800f92c:	0598      	lsls	r0, r3, #22
 800f92e:	d4ed      	bmi.n	800f90c <_vfiprintf_r+0x4c>
 800f930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f932:	f7ff fe4c 	bl	800f5ce <__retarget_lock_release_recursive>
 800f936:	e7e9      	b.n	800f90c <_vfiprintf_r+0x4c>
 800f938:	2300      	movs	r3, #0
 800f93a:	9309      	str	r3, [sp, #36]	; 0x24
 800f93c:	2320      	movs	r3, #32
 800f93e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f942:	f8cd 800c 	str.w	r8, [sp, #12]
 800f946:	2330      	movs	r3, #48	; 0x30
 800f948:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fb0c <_vfiprintf_r+0x24c>
 800f94c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f950:	f04f 0901 	mov.w	r9, #1
 800f954:	4623      	mov	r3, r4
 800f956:	469a      	mov	sl, r3
 800f958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f95c:	b10a      	cbz	r2, 800f962 <_vfiprintf_r+0xa2>
 800f95e:	2a25      	cmp	r2, #37	; 0x25
 800f960:	d1f9      	bne.n	800f956 <_vfiprintf_r+0x96>
 800f962:	ebba 0b04 	subs.w	fp, sl, r4
 800f966:	d00b      	beq.n	800f980 <_vfiprintf_r+0xc0>
 800f968:	465b      	mov	r3, fp
 800f96a:	4622      	mov	r2, r4
 800f96c:	4629      	mov	r1, r5
 800f96e:	4630      	mov	r0, r6
 800f970:	f7ff ff93 	bl	800f89a <__sfputs_r>
 800f974:	3001      	adds	r0, #1
 800f976:	f000 80aa 	beq.w	800face <_vfiprintf_r+0x20e>
 800f97a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f97c:	445a      	add	r2, fp
 800f97e:	9209      	str	r2, [sp, #36]	; 0x24
 800f980:	f89a 3000 	ldrb.w	r3, [sl]
 800f984:	2b00      	cmp	r3, #0
 800f986:	f000 80a2 	beq.w	800face <_vfiprintf_r+0x20e>
 800f98a:	2300      	movs	r3, #0
 800f98c:	f04f 32ff 	mov.w	r2, #4294967295
 800f990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f994:	f10a 0a01 	add.w	sl, sl, #1
 800f998:	9304      	str	r3, [sp, #16]
 800f99a:	9307      	str	r3, [sp, #28]
 800f99c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f9a0:	931a      	str	r3, [sp, #104]	; 0x68
 800f9a2:	4654      	mov	r4, sl
 800f9a4:	2205      	movs	r2, #5
 800f9a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9aa:	4858      	ldr	r0, [pc, #352]	; (800fb0c <_vfiprintf_r+0x24c>)
 800f9ac:	f7f0 fca0 	bl	80002f0 <memchr>
 800f9b0:	9a04      	ldr	r2, [sp, #16]
 800f9b2:	b9d8      	cbnz	r0, 800f9ec <_vfiprintf_r+0x12c>
 800f9b4:	06d1      	lsls	r1, r2, #27
 800f9b6:	bf44      	itt	mi
 800f9b8:	2320      	movmi	r3, #32
 800f9ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9be:	0713      	lsls	r3, r2, #28
 800f9c0:	bf44      	itt	mi
 800f9c2:	232b      	movmi	r3, #43	; 0x2b
 800f9c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9c8:	f89a 3000 	ldrb.w	r3, [sl]
 800f9cc:	2b2a      	cmp	r3, #42	; 0x2a
 800f9ce:	d015      	beq.n	800f9fc <_vfiprintf_r+0x13c>
 800f9d0:	9a07      	ldr	r2, [sp, #28]
 800f9d2:	4654      	mov	r4, sl
 800f9d4:	2000      	movs	r0, #0
 800f9d6:	f04f 0c0a 	mov.w	ip, #10
 800f9da:	4621      	mov	r1, r4
 800f9dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9e0:	3b30      	subs	r3, #48	; 0x30
 800f9e2:	2b09      	cmp	r3, #9
 800f9e4:	d94e      	bls.n	800fa84 <_vfiprintf_r+0x1c4>
 800f9e6:	b1b0      	cbz	r0, 800fa16 <_vfiprintf_r+0x156>
 800f9e8:	9207      	str	r2, [sp, #28]
 800f9ea:	e014      	b.n	800fa16 <_vfiprintf_r+0x156>
 800f9ec:	eba0 0308 	sub.w	r3, r0, r8
 800f9f0:	fa09 f303 	lsl.w	r3, r9, r3
 800f9f4:	4313      	orrs	r3, r2
 800f9f6:	9304      	str	r3, [sp, #16]
 800f9f8:	46a2      	mov	sl, r4
 800f9fa:	e7d2      	b.n	800f9a2 <_vfiprintf_r+0xe2>
 800f9fc:	9b03      	ldr	r3, [sp, #12]
 800f9fe:	1d19      	adds	r1, r3, #4
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	9103      	str	r1, [sp, #12]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	bfbb      	ittet	lt
 800fa08:	425b      	neglt	r3, r3
 800fa0a:	f042 0202 	orrlt.w	r2, r2, #2
 800fa0e:	9307      	strge	r3, [sp, #28]
 800fa10:	9307      	strlt	r3, [sp, #28]
 800fa12:	bfb8      	it	lt
 800fa14:	9204      	strlt	r2, [sp, #16]
 800fa16:	7823      	ldrb	r3, [r4, #0]
 800fa18:	2b2e      	cmp	r3, #46	; 0x2e
 800fa1a:	d10c      	bne.n	800fa36 <_vfiprintf_r+0x176>
 800fa1c:	7863      	ldrb	r3, [r4, #1]
 800fa1e:	2b2a      	cmp	r3, #42	; 0x2a
 800fa20:	d135      	bne.n	800fa8e <_vfiprintf_r+0x1ce>
 800fa22:	9b03      	ldr	r3, [sp, #12]
 800fa24:	1d1a      	adds	r2, r3, #4
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	9203      	str	r2, [sp, #12]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	bfb8      	it	lt
 800fa2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa32:	3402      	adds	r4, #2
 800fa34:	9305      	str	r3, [sp, #20]
 800fa36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fb1c <_vfiprintf_r+0x25c>
 800fa3a:	7821      	ldrb	r1, [r4, #0]
 800fa3c:	2203      	movs	r2, #3
 800fa3e:	4650      	mov	r0, sl
 800fa40:	f7f0 fc56 	bl	80002f0 <memchr>
 800fa44:	b140      	cbz	r0, 800fa58 <_vfiprintf_r+0x198>
 800fa46:	2340      	movs	r3, #64	; 0x40
 800fa48:	eba0 000a 	sub.w	r0, r0, sl
 800fa4c:	fa03 f000 	lsl.w	r0, r3, r0
 800fa50:	9b04      	ldr	r3, [sp, #16]
 800fa52:	4303      	orrs	r3, r0
 800fa54:	3401      	adds	r4, #1
 800fa56:	9304      	str	r3, [sp, #16]
 800fa58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa5c:	482c      	ldr	r0, [pc, #176]	; (800fb10 <_vfiprintf_r+0x250>)
 800fa5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa62:	2206      	movs	r2, #6
 800fa64:	f7f0 fc44 	bl	80002f0 <memchr>
 800fa68:	2800      	cmp	r0, #0
 800fa6a:	d03f      	beq.n	800faec <_vfiprintf_r+0x22c>
 800fa6c:	4b29      	ldr	r3, [pc, #164]	; (800fb14 <_vfiprintf_r+0x254>)
 800fa6e:	bb1b      	cbnz	r3, 800fab8 <_vfiprintf_r+0x1f8>
 800fa70:	9b03      	ldr	r3, [sp, #12]
 800fa72:	3307      	adds	r3, #7
 800fa74:	f023 0307 	bic.w	r3, r3, #7
 800fa78:	3308      	adds	r3, #8
 800fa7a:	9303      	str	r3, [sp, #12]
 800fa7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa7e:	443b      	add	r3, r7
 800fa80:	9309      	str	r3, [sp, #36]	; 0x24
 800fa82:	e767      	b.n	800f954 <_vfiprintf_r+0x94>
 800fa84:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa88:	460c      	mov	r4, r1
 800fa8a:	2001      	movs	r0, #1
 800fa8c:	e7a5      	b.n	800f9da <_vfiprintf_r+0x11a>
 800fa8e:	2300      	movs	r3, #0
 800fa90:	3401      	adds	r4, #1
 800fa92:	9305      	str	r3, [sp, #20]
 800fa94:	4619      	mov	r1, r3
 800fa96:	f04f 0c0a 	mov.w	ip, #10
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800faa0:	3a30      	subs	r2, #48	; 0x30
 800faa2:	2a09      	cmp	r2, #9
 800faa4:	d903      	bls.n	800faae <_vfiprintf_r+0x1ee>
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d0c5      	beq.n	800fa36 <_vfiprintf_r+0x176>
 800faaa:	9105      	str	r1, [sp, #20]
 800faac:	e7c3      	b.n	800fa36 <_vfiprintf_r+0x176>
 800faae:	fb0c 2101 	mla	r1, ip, r1, r2
 800fab2:	4604      	mov	r4, r0
 800fab4:	2301      	movs	r3, #1
 800fab6:	e7f0      	b.n	800fa9a <_vfiprintf_r+0x1da>
 800fab8:	ab03      	add	r3, sp, #12
 800faba:	9300      	str	r3, [sp, #0]
 800fabc:	462a      	mov	r2, r5
 800fabe:	4b16      	ldr	r3, [pc, #88]	; (800fb18 <_vfiprintf_r+0x258>)
 800fac0:	a904      	add	r1, sp, #16
 800fac2:	4630      	mov	r0, r6
 800fac4:	f3af 8000 	nop.w
 800fac8:	4607      	mov	r7, r0
 800faca:	1c78      	adds	r0, r7, #1
 800facc:	d1d6      	bne.n	800fa7c <_vfiprintf_r+0x1bc>
 800face:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fad0:	07d9      	lsls	r1, r3, #31
 800fad2:	d405      	bmi.n	800fae0 <_vfiprintf_r+0x220>
 800fad4:	89ab      	ldrh	r3, [r5, #12]
 800fad6:	059a      	lsls	r2, r3, #22
 800fad8:	d402      	bmi.n	800fae0 <_vfiprintf_r+0x220>
 800fada:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fadc:	f7ff fd77 	bl	800f5ce <__retarget_lock_release_recursive>
 800fae0:	89ab      	ldrh	r3, [r5, #12]
 800fae2:	065b      	lsls	r3, r3, #25
 800fae4:	f53f af12 	bmi.w	800f90c <_vfiprintf_r+0x4c>
 800fae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800faea:	e711      	b.n	800f910 <_vfiprintf_r+0x50>
 800faec:	ab03      	add	r3, sp, #12
 800faee:	9300      	str	r3, [sp, #0]
 800faf0:	462a      	mov	r2, r5
 800faf2:	4b09      	ldr	r3, [pc, #36]	; (800fb18 <_vfiprintf_r+0x258>)
 800faf4:	a904      	add	r1, sp, #16
 800faf6:	4630      	mov	r0, r6
 800faf8:	f000 f880 	bl	800fbfc <_printf_i>
 800fafc:	e7e4      	b.n	800fac8 <_vfiprintf_r+0x208>
 800fafe:	bf00      	nop
 800fb00:	080107e0 	.word	0x080107e0
 800fb04:	08010800 	.word	0x08010800
 800fb08:	080107c0 	.word	0x080107c0
 800fb0c:	08010820 	.word	0x08010820
 800fb10:	0801082a 	.word	0x0801082a
 800fb14:	00000000 	.word	0x00000000
 800fb18:	0800f89b 	.word	0x0800f89b
 800fb1c:	08010826 	.word	0x08010826

0800fb20 <_printf_common>:
 800fb20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb24:	4616      	mov	r6, r2
 800fb26:	4699      	mov	r9, r3
 800fb28:	688a      	ldr	r2, [r1, #8]
 800fb2a:	690b      	ldr	r3, [r1, #16]
 800fb2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb30:	4293      	cmp	r3, r2
 800fb32:	bfb8      	it	lt
 800fb34:	4613      	movlt	r3, r2
 800fb36:	6033      	str	r3, [r6, #0]
 800fb38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb3c:	4607      	mov	r7, r0
 800fb3e:	460c      	mov	r4, r1
 800fb40:	b10a      	cbz	r2, 800fb46 <_printf_common+0x26>
 800fb42:	3301      	adds	r3, #1
 800fb44:	6033      	str	r3, [r6, #0]
 800fb46:	6823      	ldr	r3, [r4, #0]
 800fb48:	0699      	lsls	r1, r3, #26
 800fb4a:	bf42      	ittt	mi
 800fb4c:	6833      	ldrmi	r3, [r6, #0]
 800fb4e:	3302      	addmi	r3, #2
 800fb50:	6033      	strmi	r3, [r6, #0]
 800fb52:	6825      	ldr	r5, [r4, #0]
 800fb54:	f015 0506 	ands.w	r5, r5, #6
 800fb58:	d106      	bne.n	800fb68 <_printf_common+0x48>
 800fb5a:	f104 0a19 	add.w	sl, r4, #25
 800fb5e:	68e3      	ldr	r3, [r4, #12]
 800fb60:	6832      	ldr	r2, [r6, #0]
 800fb62:	1a9b      	subs	r3, r3, r2
 800fb64:	42ab      	cmp	r3, r5
 800fb66:	dc26      	bgt.n	800fbb6 <_printf_common+0x96>
 800fb68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb6c:	1e13      	subs	r3, r2, #0
 800fb6e:	6822      	ldr	r2, [r4, #0]
 800fb70:	bf18      	it	ne
 800fb72:	2301      	movne	r3, #1
 800fb74:	0692      	lsls	r2, r2, #26
 800fb76:	d42b      	bmi.n	800fbd0 <_printf_common+0xb0>
 800fb78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb7c:	4649      	mov	r1, r9
 800fb7e:	4638      	mov	r0, r7
 800fb80:	47c0      	blx	r8
 800fb82:	3001      	adds	r0, #1
 800fb84:	d01e      	beq.n	800fbc4 <_printf_common+0xa4>
 800fb86:	6823      	ldr	r3, [r4, #0]
 800fb88:	68e5      	ldr	r5, [r4, #12]
 800fb8a:	6832      	ldr	r2, [r6, #0]
 800fb8c:	f003 0306 	and.w	r3, r3, #6
 800fb90:	2b04      	cmp	r3, #4
 800fb92:	bf08      	it	eq
 800fb94:	1aad      	subeq	r5, r5, r2
 800fb96:	68a3      	ldr	r3, [r4, #8]
 800fb98:	6922      	ldr	r2, [r4, #16]
 800fb9a:	bf0c      	ite	eq
 800fb9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fba0:	2500      	movne	r5, #0
 800fba2:	4293      	cmp	r3, r2
 800fba4:	bfc4      	itt	gt
 800fba6:	1a9b      	subgt	r3, r3, r2
 800fba8:	18ed      	addgt	r5, r5, r3
 800fbaa:	2600      	movs	r6, #0
 800fbac:	341a      	adds	r4, #26
 800fbae:	42b5      	cmp	r5, r6
 800fbb0:	d11a      	bne.n	800fbe8 <_printf_common+0xc8>
 800fbb2:	2000      	movs	r0, #0
 800fbb4:	e008      	b.n	800fbc8 <_printf_common+0xa8>
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	4652      	mov	r2, sl
 800fbba:	4649      	mov	r1, r9
 800fbbc:	4638      	mov	r0, r7
 800fbbe:	47c0      	blx	r8
 800fbc0:	3001      	adds	r0, #1
 800fbc2:	d103      	bne.n	800fbcc <_printf_common+0xac>
 800fbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800fbc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbcc:	3501      	adds	r5, #1
 800fbce:	e7c6      	b.n	800fb5e <_printf_common+0x3e>
 800fbd0:	18e1      	adds	r1, r4, r3
 800fbd2:	1c5a      	adds	r2, r3, #1
 800fbd4:	2030      	movs	r0, #48	; 0x30
 800fbd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fbda:	4422      	add	r2, r4
 800fbdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fbe0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fbe4:	3302      	adds	r3, #2
 800fbe6:	e7c7      	b.n	800fb78 <_printf_common+0x58>
 800fbe8:	2301      	movs	r3, #1
 800fbea:	4622      	mov	r2, r4
 800fbec:	4649      	mov	r1, r9
 800fbee:	4638      	mov	r0, r7
 800fbf0:	47c0      	blx	r8
 800fbf2:	3001      	adds	r0, #1
 800fbf4:	d0e6      	beq.n	800fbc4 <_printf_common+0xa4>
 800fbf6:	3601      	adds	r6, #1
 800fbf8:	e7d9      	b.n	800fbae <_printf_common+0x8e>
	...

0800fbfc <_printf_i>:
 800fbfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc00:	7e0f      	ldrb	r7, [r1, #24]
 800fc02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc04:	2f78      	cmp	r7, #120	; 0x78
 800fc06:	4691      	mov	r9, r2
 800fc08:	4680      	mov	r8, r0
 800fc0a:	460c      	mov	r4, r1
 800fc0c:	469a      	mov	sl, r3
 800fc0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc12:	d807      	bhi.n	800fc24 <_printf_i+0x28>
 800fc14:	2f62      	cmp	r7, #98	; 0x62
 800fc16:	d80a      	bhi.n	800fc2e <_printf_i+0x32>
 800fc18:	2f00      	cmp	r7, #0
 800fc1a:	f000 80d8 	beq.w	800fdce <_printf_i+0x1d2>
 800fc1e:	2f58      	cmp	r7, #88	; 0x58
 800fc20:	f000 80a3 	beq.w	800fd6a <_printf_i+0x16e>
 800fc24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc2c:	e03a      	b.n	800fca4 <_printf_i+0xa8>
 800fc2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc32:	2b15      	cmp	r3, #21
 800fc34:	d8f6      	bhi.n	800fc24 <_printf_i+0x28>
 800fc36:	a101      	add	r1, pc, #4	; (adr r1, 800fc3c <_printf_i+0x40>)
 800fc38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc3c:	0800fc95 	.word	0x0800fc95
 800fc40:	0800fca9 	.word	0x0800fca9
 800fc44:	0800fc25 	.word	0x0800fc25
 800fc48:	0800fc25 	.word	0x0800fc25
 800fc4c:	0800fc25 	.word	0x0800fc25
 800fc50:	0800fc25 	.word	0x0800fc25
 800fc54:	0800fca9 	.word	0x0800fca9
 800fc58:	0800fc25 	.word	0x0800fc25
 800fc5c:	0800fc25 	.word	0x0800fc25
 800fc60:	0800fc25 	.word	0x0800fc25
 800fc64:	0800fc25 	.word	0x0800fc25
 800fc68:	0800fdb5 	.word	0x0800fdb5
 800fc6c:	0800fcd9 	.word	0x0800fcd9
 800fc70:	0800fd97 	.word	0x0800fd97
 800fc74:	0800fc25 	.word	0x0800fc25
 800fc78:	0800fc25 	.word	0x0800fc25
 800fc7c:	0800fdd7 	.word	0x0800fdd7
 800fc80:	0800fc25 	.word	0x0800fc25
 800fc84:	0800fcd9 	.word	0x0800fcd9
 800fc88:	0800fc25 	.word	0x0800fc25
 800fc8c:	0800fc25 	.word	0x0800fc25
 800fc90:	0800fd9f 	.word	0x0800fd9f
 800fc94:	682b      	ldr	r3, [r5, #0]
 800fc96:	1d1a      	adds	r2, r3, #4
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	602a      	str	r2, [r5, #0]
 800fc9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fca4:	2301      	movs	r3, #1
 800fca6:	e0a3      	b.n	800fdf0 <_printf_i+0x1f4>
 800fca8:	6820      	ldr	r0, [r4, #0]
 800fcaa:	6829      	ldr	r1, [r5, #0]
 800fcac:	0606      	lsls	r6, r0, #24
 800fcae:	f101 0304 	add.w	r3, r1, #4
 800fcb2:	d50a      	bpl.n	800fcca <_printf_i+0xce>
 800fcb4:	680e      	ldr	r6, [r1, #0]
 800fcb6:	602b      	str	r3, [r5, #0]
 800fcb8:	2e00      	cmp	r6, #0
 800fcba:	da03      	bge.n	800fcc4 <_printf_i+0xc8>
 800fcbc:	232d      	movs	r3, #45	; 0x2d
 800fcbe:	4276      	negs	r6, r6
 800fcc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcc4:	485e      	ldr	r0, [pc, #376]	; (800fe40 <_printf_i+0x244>)
 800fcc6:	230a      	movs	r3, #10
 800fcc8:	e019      	b.n	800fcfe <_printf_i+0x102>
 800fcca:	680e      	ldr	r6, [r1, #0]
 800fccc:	602b      	str	r3, [r5, #0]
 800fcce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fcd2:	bf18      	it	ne
 800fcd4:	b236      	sxthne	r6, r6
 800fcd6:	e7ef      	b.n	800fcb8 <_printf_i+0xbc>
 800fcd8:	682b      	ldr	r3, [r5, #0]
 800fcda:	6820      	ldr	r0, [r4, #0]
 800fcdc:	1d19      	adds	r1, r3, #4
 800fcde:	6029      	str	r1, [r5, #0]
 800fce0:	0601      	lsls	r1, r0, #24
 800fce2:	d501      	bpl.n	800fce8 <_printf_i+0xec>
 800fce4:	681e      	ldr	r6, [r3, #0]
 800fce6:	e002      	b.n	800fcee <_printf_i+0xf2>
 800fce8:	0646      	lsls	r6, r0, #25
 800fcea:	d5fb      	bpl.n	800fce4 <_printf_i+0xe8>
 800fcec:	881e      	ldrh	r6, [r3, #0]
 800fcee:	4854      	ldr	r0, [pc, #336]	; (800fe40 <_printf_i+0x244>)
 800fcf0:	2f6f      	cmp	r7, #111	; 0x6f
 800fcf2:	bf0c      	ite	eq
 800fcf4:	2308      	moveq	r3, #8
 800fcf6:	230a      	movne	r3, #10
 800fcf8:	2100      	movs	r1, #0
 800fcfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fcfe:	6865      	ldr	r5, [r4, #4]
 800fd00:	60a5      	str	r5, [r4, #8]
 800fd02:	2d00      	cmp	r5, #0
 800fd04:	bfa2      	ittt	ge
 800fd06:	6821      	ldrge	r1, [r4, #0]
 800fd08:	f021 0104 	bicge.w	r1, r1, #4
 800fd0c:	6021      	strge	r1, [r4, #0]
 800fd0e:	b90e      	cbnz	r6, 800fd14 <_printf_i+0x118>
 800fd10:	2d00      	cmp	r5, #0
 800fd12:	d04d      	beq.n	800fdb0 <_printf_i+0x1b4>
 800fd14:	4615      	mov	r5, r2
 800fd16:	fbb6 f1f3 	udiv	r1, r6, r3
 800fd1a:	fb03 6711 	mls	r7, r3, r1, r6
 800fd1e:	5dc7      	ldrb	r7, [r0, r7]
 800fd20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fd24:	4637      	mov	r7, r6
 800fd26:	42bb      	cmp	r3, r7
 800fd28:	460e      	mov	r6, r1
 800fd2a:	d9f4      	bls.n	800fd16 <_printf_i+0x11a>
 800fd2c:	2b08      	cmp	r3, #8
 800fd2e:	d10b      	bne.n	800fd48 <_printf_i+0x14c>
 800fd30:	6823      	ldr	r3, [r4, #0]
 800fd32:	07de      	lsls	r6, r3, #31
 800fd34:	d508      	bpl.n	800fd48 <_printf_i+0x14c>
 800fd36:	6923      	ldr	r3, [r4, #16]
 800fd38:	6861      	ldr	r1, [r4, #4]
 800fd3a:	4299      	cmp	r1, r3
 800fd3c:	bfde      	ittt	le
 800fd3e:	2330      	movle	r3, #48	; 0x30
 800fd40:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd44:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fd48:	1b52      	subs	r2, r2, r5
 800fd4a:	6122      	str	r2, [r4, #16]
 800fd4c:	f8cd a000 	str.w	sl, [sp]
 800fd50:	464b      	mov	r3, r9
 800fd52:	aa03      	add	r2, sp, #12
 800fd54:	4621      	mov	r1, r4
 800fd56:	4640      	mov	r0, r8
 800fd58:	f7ff fee2 	bl	800fb20 <_printf_common>
 800fd5c:	3001      	adds	r0, #1
 800fd5e:	d14c      	bne.n	800fdfa <_printf_i+0x1fe>
 800fd60:	f04f 30ff 	mov.w	r0, #4294967295
 800fd64:	b004      	add	sp, #16
 800fd66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd6a:	4835      	ldr	r0, [pc, #212]	; (800fe40 <_printf_i+0x244>)
 800fd6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fd70:	6829      	ldr	r1, [r5, #0]
 800fd72:	6823      	ldr	r3, [r4, #0]
 800fd74:	f851 6b04 	ldr.w	r6, [r1], #4
 800fd78:	6029      	str	r1, [r5, #0]
 800fd7a:	061d      	lsls	r5, r3, #24
 800fd7c:	d514      	bpl.n	800fda8 <_printf_i+0x1ac>
 800fd7e:	07df      	lsls	r7, r3, #31
 800fd80:	bf44      	itt	mi
 800fd82:	f043 0320 	orrmi.w	r3, r3, #32
 800fd86:	6023      	strmi	r3, [r4, #0]
 800fd88:	b91e      	cbnz	r6, 800fd92 <_printf_i+0x196>
 800fd8a:	6823      	ldr	r3, [r4, #0]
 800fd8c:	f023 0320 	bic.w	r3, r3, #32
 800fd90:	6023      	str	r3, [r4, #0]
 800fd92:	2310      	movs	r3, #16
 800fd94:	e7b0      	b.n	800fcf8 <_printf_i+0xfc>
 800fd96:	6823      	ldr	r3, [r4, #0]
 800fd98:	f043 0320 	orr.w	r3, r3, #32
 800fd9c:	6023      	str	r3, [r4, #0]
 800fd9e:	2378      	movs	r3, #120	; 0x78
 800fda0:	4828      	ldr	r0, [pc, #160]	; (800fe44 <_printf_i+0x248>)
 800fda2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fda6:	e7e3      	b.n	800fd70 <_printf_i+0x174>
 800fda8:	0659      	lsls	r1, r3, #25
 800fdaa:	bf48      	it	mi
 800fdac:	b2b6      	uxthmi	r6, r6
 800fdae:	e7e6      	b.n	800fd7e <_printf_i+0x182>
 800fdb0:	4615      	mov	r5, r2
 800fdb2:	e7bb      	b.n	800fd2c <_printf_i+0x130>
 800fdb4:	682b      	ldr	r3, [r5, #0]
 800fdb6:	6826      	ldr	r6, [r4, #0]
 800fdb8:	6961      	ldr	r1, [r4, #20]
 800fdba:	1d18      	adds	r0, r3, #4
 800fdbc:	6028      	str	r0, [r5, #0]
 800fdbe:	0635      	lsls	r5, r6, #24
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	d501      	bpl.n	800fdc8 <_printf_i+0x1cc>
 800fdc4:	6019      	str	r1, [r3, #0]
 800fdc6:	e002      	b.n	800fdce <_printf_i+0x1d2>
 800fdc8:	0670      	lsls	r0, r6, #25
 800fdca:	d5fb      	bpl.n	800fdc4 <_printf_i+0x1c8>
 800fdcc:	8019      	strh	r1, [r3, #0]
 800fdce:	2300      	movs	r3, #0
 800fdd0:	6123      	str	r3, [r4, #16]
 800fdd2:	4615      	mov	r5, r2
 800fdd4:	e7ba      	b.n	800fd4c <_printf_i+0x150>
 800fdd6:	682b      	ldr	r3, [r5, #0]
 800fdd8:	1d1a      	adds	r2, r3, #4
 800fdda:	602a      	str	r2, [r5, #0]
 800fddc:	681d      	ldr	r5, [r3, #0]
 800fdde:	6862      	ldr	r2, [r4, #4]
 800fde0:	2100      	movs	r1, #0
 800fde2:	4628      	mov	r0, r5
 800fde4:	f7f0 fa84 	bl	80002f0 <memchr>
 800fde8:	b108      	cbz	r0, 800fdee <_printf_i+0x1f2>
 800fdea:	1b40      	subs	r0, r0, r5
 800fdec:	6060      	str	r0, [r4, #4]
 800fdee:	6863      	ldr	r3, [r4, #4]
 800fdf0:	6123      	str	r3, [r4, #16]
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdf8:	e7a8      	b.n	800fd4c <_printf_i+0x150>
 800fdfa:	6923      	ldr	r3, [r4, #16]
 800fdfc:	462a      	mov	r2, r5
 800fdfe:	4649      	mov	r1, r9
 800fe00:	4640      	mov	r0, r8
 800fe02:	47d0      	blx	sl
 800fe04:	3001      	adds	r0, #1
 800fe06:	d0ab      	beq.n	800fd60 <_printf_i+0x164>
 800fe08:	6823      	ldr	r3, [r4, #0]
 800fe0a:	079b      	lsls	r3, r3, #30
 800fe0c:	d413      	bmi.n	800fe36 <_printf_i+0x23a>
 800fe0e:	68e0      	ldr	r0, [r4, #12]
 800fe10:	9b03      	ldr	r3, [sp, #12]
 800fe12:	4298      	cmp	r0, r3
 800fe14:	bfb8      	it	lt
 800fe16:	4618      	movlt	r0, r3
 800fe18:	e7a4      	b.n	800fd64 <_printf_i+0x168>
 800fe1a:	2301      	movs	r3, #1
 800fe1c:	4632      	mov	r2, r6
 800fe1e:	4649      	mov	r1, r9
 800fe20:	4640      	mov	r0, r8
 800fe22:	47d0      	blx	sl
 800fe24:	3001      	adds	r0, #1
 800fe26:	d09b      	beq.n	800fd60 <_printf_i+0x164>
 800fe28:	3501      	adds	r5, #1
 800fe2a:	68e3      	ldr	r3, [r4, #12]
 800fe2c:	9903      	ldr	r1, [sp, #12]
 800fe2e:	1a5b      	subs	r3, r3, r1
 800fe30:	42ab      	cmp	r3, r5
 800fe32:	dcf2      	bgt.n	800fe1a <_printf_i+0x21e>
 800fe34:	e7eb      	b.n	800fe0e <_printf_i+0x212>
 800fe36:	2500      	movs	r5, #0
 800fe38:	f104 0619 	add.w	r6, r4, #25
 800fe3c:	e7f5      	b.n	800fe2a <_printf_i+0x22e>
 800fe3e:	bf00      	nop
 800fe40:	08010831 	.word	0x08010831
 800fe44:	08010842 	.word	0x08010842

0800fe48 <_sbrk_r>:
 800fe48:	b538      	push	{r3, r4, r5, lr}
 800fe4a:	4d06      	ldr	r5, [pc, #24]	; (800fe64 <_sbrk_r+0x1c>)
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	4604      	mov	r4, r0
 800fe50:	4608      	mov	r0, r1
 800fe52:	602b      	str	r3, [r5, #0]
 800fe54:	f7f3 ffa0 	bl	8003d98 <_sbrk>
 800fe58:	1c43      	adds	r3, r0, #1
 800fe5a:	d102      	bne.n	800fe62 <_sbrk_r+0x1a>
 800fe5c:	682b      	ldr	r3, [r5, #0]
 800fe5e:	b103      	cbz	r3, 800fe62 <_sbrk_r+0x1a>
 800fe60:	6023      	str	r3, [r4, #0]
 800fe62:	bd38      	pop	{r3, r4, r5, pc}
 800fe64:	240e0044 	.word	0x240e0044

0800fe68 <__sread>:
 800fe68:	b510      	push	{r4, lr}
 800fe6a:	460c      	mov	r4, r1
 800fe6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe70:	f000 f960 	bl	8010134 <_read_r>
 800fe74:	2800      	cmp	r0, #0
 800fe76:	bfab      	itete	ge
 800fe78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fe7a:	89a3      	ldrhlt	r3, [r4, #12]
 800fe7c:	181b      	addge	r3, r3, r0
 800fe7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fe82:	bfac      	ite	ge
 800fe84:	6563      	strge	r3, [r4, #84]	; 0x54
 800fe86:	81a3      	strhlt	r3, [r4, #12]
 800fe88:	bd10      	pop	{r4, pc}

0800fe8a <__swrite>:
 800fe8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe8e:	461f      	mov	r7, r3
 800fe90:	898b      	ldrh	r3, [r1, #12]
 800fe92:	05db      	lsls	r3, r3, #23
 800fe94:	4605      	mov	r5, r0
 800fe96:	460c      	mov	r4, r1
 800fe98:	4616      	mov	r6, r2
 800fe9a:	d505      	bpl.n	800fea8 <__swrite+0x1e>
 800fe9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fea0:	2302      	movs	r3, #2
 800fea2:	2200      	movs	r2, #0
 800fea4:	f000 f928 	bl	80100f8 <_lseek_r>
 800fea8:	89a3      	ldrh	r3, [r4, #12]
 800feaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800feae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800feb2:	81a3      	strh	r3, [r4, #12]
 800feb4:	4632      	mov	r2, r6
 800feb6:	463b      	mov	r3, r7
 800feb8:	4628      	mov	r0, r5
 800feba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800febe:	f000 b869 	b.w	800ff94 <_write_r>

0800fec2 <__sseek>:
 800fec2:	b510      	push	{r4, lr}
 800fec4:	460c      	mov	r4, r1
 800fec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feca:	f000 f915 	bl	80100f8 <_lseek_r>
 800fece:	1c43      	adds	r3, r0, #1
 800fed0:	89a3      	ldrh	r3, [r4, #12]
 800fed2:	bf15      	itete	ne
 800fed4:	6560      	strne	r0, [r4, #84]	; 0x54
 800fed6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800feda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fede:	81a3      	strheq	r3, [r4, #12]
 800fee0:	bf18      	it	ne
 800fee2:	81a3      	strhne	r3, [r4, #12]
 800fee4:	bd10      	pop	{r4, pc}

0800fee6 <__sclose>:
 800fee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feea:	f000 b8d3 	b.w	8010094 <_close_r>
	...

0800fef0 <__swbuf_r>:
 800fef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fef2:	460e      	mov	r6, r1
 800fef4:	4614      	mov	r4, r2
 800fef6:	4605      	mov	r5, r0
 800fef8:	b118      	cbz	r0, 800ff02 <__swbuf_r+0x12>
 800fefa:	6983      	ldr	r3, [r0, #24]
 800fefc:	b90b      	cbnz	r3, 800ff02 <__swbuf_r+0x12>
 800fefe:	f7ff fac7 	bl	800f490 <__sinit>
 800ff02:	4b21      	ldr	r3, [pc, #132]	; (800ff88 <__swbuf_r+0x98>)
 800ff04:	429c      	cmp	r4, r3
 800ff06:	d12b      	bne.n	800ff60 <__swbuf_r+0x70>
 800ff08:	686c      	ldr	r4, [r5, #4]
 800ff0a:	69a3      	ldr	r3, [r4, #24]
 800ff0c:	60a3      	str	r3, [r4, #8]
 800ff0e:	89a3      	ldrh	r3, [r4, #12]
 800ff10:	071a      	lsls	r2, r3, #28
 800ff12:	d52f      	bpl.n	800ff74 <__swbuf_r+0x84>
 800ff14:	6923      	ldr	r3, [r4, #16]
 800ff16:	b36b      	cbz	r3, 800ff74 <__swbuf_r+0x84>
 800ff18:	6923      	ldr	r3, [r4, #16]
 800ff1a:	6820      	ldr	r0, [r4, #0]
 800ff1c:	1ac0      	subs	r0, r0, r3
 800ff1e:	6963      	ldr	r3, [r4, #20]
 800ff20:	b2f6      	uxtb	r6, r6
 800ff22:	4283      	cmp	r3, r0
 800ff24:	4637      	mov	r7, r6
 800ff26:	dc04      	bgt.n	800ff32 <__swbuf_r+0x42>
 800ff28:	4621      	mov	r1, r4
 800ff2a:	4628      	mov	r0, r5
 800ff2c:	f7ff fa1c 	bl	800f368 <_fflush_r>
 800ff30:	bb30      	cbnz	r0, 800ff80 <__swbuf_r+0x90>
 800ff32:	68a3      	ldr	r3, [r4, #8]
 800ff34:	3b01      	subs	r3, #1
 800ff36:	60a3      	str	r3, [r4, #8]
 800ff38:	6823      	ldr	r3, [r4, #0]
 800ff3a:	1c5a      	adds	r2, r3, #1
 800ff3c:	6022      	str	r2, [r4, #0]
 800ff3e:	701e      	strb	r6, [r3, #0]
 800ff40:	6963      	ldr	r3, [r4, #20]
 800ff42:	3001      	adds	r0, #1
 800ff44:	4283      	cmp	r3, r0
 800ff46:	d004      	beq.n	800ff52 <__swbuf_r+0x62>
 800ff48:	89a3      	ldrh	r3, [r4, #12]
 800ff4a:	07db      	lsls	r3, r3, #31
 800ff4c:	d506      	bpl.n	800ff5c <__swbuf_r+0x6c>
 800ff4e:	2e0a      	cmp	r6, #10
 800ff50:	d104      	bne.n	800ff5c <__swbuf_r+0x6c>
 800ff52:	4621      	mov	r1, r4
 800ff54:	4628      	mov	r0, r5
 800ff56:	f7ff fa07 	bl	800f368 <_fflush_r>
 800ff5a:	b988      	cbnz	r0, 800ff80 <__swbuf_r+0x90>
 800ff5c:	4638      	mov	r0, r7
 800ff5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff60:	4b0a      	ldr	r3, [pc, #40]	; (800ff8c <__swbuf_r+0x9c>)
 800ff62:	429c      	cmp	r4, r3
 800ff64:	d101      	bne.n	800ff6a <__swbuf_r+0x7a>
 800ff66:	68ac      	ldr	r4, [r5, #8]
 800ff68:	e7cf      	b.n	800ff0a <__swbuf_r+0x1a>
 800ff6a:	4b09      	ldr	r3, [pc, #36]	; (800ff90 <__swbuf_r+0xa0>)
 800ff6c:	429c      	cmp	r4, r3
 800ff6e:	bf08      	it	eq
 800ff70:	68ec      	ldreq	r4, [r5, #12]
 800ff72:	e7ca      	b.n	800ff0a <__swbuf_r+0x1a>
 800ff74:	4621      	mov	r1, r4
 800ff76:	4628      	mov	r0, r5
 800ff78:	f000 f81e 	bl	800ffb8 <__swsetup_r>
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	d0cb      	beq.n	800ff18 <__swbuf_r+0x28>
 800ff80:	f04f 37ff 	mov.w	r7, #4294967295
 800ff84:	e7ea      	b.n	800ff5c <__swbuf_r+0x6c>
 800ff86:	bf00      	nop
 800ff88:	080107e0 	.word	0x080107e0
 800ff8c:	08010800 	.word	0x08010800
 800ff90:	080107c0 	.word	0x080107c0

0800ff94 <_write_r>:
 800ff94:	b538      	push	{r3, r4, r5, lr}
 800ff96:	4d07      	ldr	r5, [pc, #28]	; (800ffb4 <_write_r+0x20>)
 800ff98:	4604      	mov	r4, r0
 800ff9a:	4608      	mov	r0, r1
 800ff9c:	4611      	mov	r1, r2
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	602a      	str	r2, [r5, #0]
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	f7f2 ff5c 	bl	8002e60 <_write>
 800ffa8:	1c43      	adds	r3, r0, #1
 800ffaa:	d102      	bne.n	800ffb2 <_write_r+0x1e>
 800ffac:	682b      	ldr	r3, [r5, #0]
 800ffae:	b103      	cbz	r3, 800ffb2 <_write_r+0x1e>
 800ffb0:	6023      	str	r3, [r4, #0]
 800ffb2:	bd38      	pop	{r3, r4, r5, pc}
 800ffb4:	240e0044 	.word	0x240e0044

0800ffb8 <__swsetup_r>:
 800ffb8:	4b32      	ldr	r3, [pc, #200]	; (8010084 <__swsetup_r+0xcc>)
 800ffba:	b570      	push	{r4, r5, r6, lr}
 800ffbc:	681d      	ldr	r5, [r3, #0]
 800ffbe:	4606      	mov	r6, r0
 800ffc0:	460c      	mov	r4, r1
 800ffc2:	b125      	cbz	r5, 800ffce <__swsetup_r+0x16>
 800ffc4:	69ab      	ldr	r3, [r5, #24]
 800ffc6:	b913      	cbnz	r3, 800ffce <__swsetup_r+0x16>
 800ffc8:	4628      	mov	r0, r5
 800ffca:	f7ff fa61 	bl	800f490 <__sinit>
 800ffce:	4b2e      	ldr	r3, [pc, #184]	; (8010088 <__swsetup_r+0xd0>)
 800ffd0:	429c      	cmp	r4, r3
 800ffd2:	d10f      	bne.n	800fff4 <__swsetup_r+0x3c>
 800ffd4:	686c      	ldr	r4, [r5, #4]
 800ffd6:	89a3      	ldrh	r3, [r4, #12]
 800ffd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ffdc:	0719      	lsls	r1, r3, #28
 800ffde:	d42c      	bmi.n	801003a <__swsetup_r+0x82>
 800ffe0:	06dd      	lsls	r5, r3, #27
 800ffe2:	d411      	bmi.n	8010008 <__swsetup_r+0x50>
 800ffe4:	2309      	movs	r3, #9
 800ffe6:	6033      	str	r3, [r6, #0]
 800ffe8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ffec:	81a3      	strh	r3, [r4, #12]
 800ffee:	f04f 30ff 	mov.w	r0, #4294967295
 800fff2:	e03e      	b.n	8010072 <__swsetup_r+0xba>
 800fff4:	4b25      	ldr	r3, [pc, #148]	; (801008c <__swsetup_r+0xd4>)
 800fff6:	429c      	cmp	r4, r3
 800fff8:	d101      	bne.n	800fffe <__swsetup_r+0x46>
 800fffa:	68ac      	ldr	r4, [r5, #8]
 800fffc:	e7eb      	b.n	800ffd6 <__swsetup_r+0x1e>
 800fffe:	4b24      	ldr	r3, [pc, #144]	; (8010090 <__swsetup_r+0xd8>)
 8010000:	429c      	cmp	r4, r3
 8010002:	bf08      	it	eq
 8010004:	68ec      	ldreq	r4, [r5, #12]
 8010006:	e7e6      	b.n	800ffd6 <__swsetup_r+0x1e>
 8010008:	0758      	lsls	r0, r3, #29
 801000a:	d512      	bpl.n	8010032 <__swsetup_r+0x7a>
 801000c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801000e:	b141      	cbz	r1, 8010022 <__swsetup_r+0x6a>
 8010010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010014:	4299      	cmp	r1, r3
 8010016:	d002      	beq.n	801001e <__swsetup_r+0x66>
 8010018:	4630      	mov	r0, r6
 801001a:	f7ff fb47 	bl	800f6ac <_free_r>
 801001e:	2300      	movs	r3, #0
 8010020:	6363      	str	r3, [r4, #52]	; 0x34
 8010022:	89a3      	ldrh	r3, [r4, #12]
 8010024:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010028:	81a3      	strh	r3, [r4, #12]
 801002a:	2300      	movs	r3, #0
 801002c:	6063      	str	r3, [r4, #4]
 801002e:	6923      	ldr	r3, [r4, #16]
 8010030:	6023      	str	r3, [r4, #0]
 8010032:	89a3      	ldrh	r3, [r4, #12]
 8010034:	f043 0308 	orr.w	r3, r3, #8
 8010038:	81a3      	strh	r3, [r4, #12]
 801003a:	6923      	ldr	r3, [r4, #16]
 801003c:	b94b      	cbnz	r3, 8010052 <__swsetup_r+0x9a>
 801003e:	89a3      	ldrh	r3, [r4, #12]
 8010040:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010048:	d003      	beq.n	8010052 <__swsetup_r+0x9a>
 801004a:	4621      	mov	r1, r4
 801004c:	4630      	mov	r0, r6
 801004e:	f7ff fae5 	bl	800f61c <__smakebuf_r>
 8010052:	89a0      	ldrh	r0, [r4, #12]
 8010054:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010058:	f010 0301 	ands.w	r3, r0, #1
 801005c:	d00a      	beq.n	8010074 <__swsetup_r+0xbc>
 801005e:	2300      	movs	r3, #0
 8010060:	60a3      	str	r3, [r4, #8]
 8010062:	6963      	ldr	r3, [r4, #20]
 8010064:	425b      	negs	r3, r3
 8010066:	61a3      	str	r3, [r4, #24]
 8010068:	6923      	ldr	r3, [r4, #16]
 801006a:	b943      	cbnz	r3, 801007e <__swsetup_r+0xc6>
 801006c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010070:	d1ba      	bne.n	800ffe8 <__swsetup_r+0x30>
 8010072:	bd70      	pop	{r4, r5, r6, pc}
 8010074:	0781      	lsls	r1, r0, #30
 8010076:	bf58      	it	pl
 8010078:	6963      	ldrpl	r3, [r4, #20]
 801007a:	60a3      	str	r3, [r4, #8]
 801007c:	e7f4      	b.n	8010068 <__swsetup_r+0xb0>
 801007e:	2000      	movs	r0, #0
 8010080:	e7f7      	b.n	8010072 <__swsetup_r+0xba>
 8010082:	bf00      	nop
 8010084:	24000054 	.word	0x24000054
 8010088:	080107e0 	.word	0x080107e0
 801008c:	08010800 	.word	0x08010800
 8010090:	080107c0 	.word	0x080107c0

08010094 <_close_r>:
 8010094:	b538      	push	{r3, r4, r5, lr}
 8010096:	4d06      	ldr	r5, [pc, #24]	; (80100b0 <_close_r+0x1c>)
 8010098:	2300      	movs	r3, #0
 801009a:	4604      	mov	r4, r0
 801009c:	4608      	mov	r0, r1
 801009e:	602b      	str	r3, [r5, #0]
 80100a0:	f7f2 ff0a 	bl	8002eb8 <_close>
 80100a4:	1c43      	adds	r3, r0, #1
 80100a6:	d102      	bne.n	80100ae <_close_r+0x1a>
 80100a8:	682b      	ldr	r3, [r5, #0]
 80100aa:	b103      	cbz	r3, 80100ae <_close_r+0x1a>
 80100ac:	6023      	str	r3, [r4, #0]
 80100ae:	bd38      	pop	{r3, r4, r5, pc}
 80100b0:	240e0044 	.word	0x240e0044

080100b4 <_fstat_r>:
 80100b4:	b538      	push	{r3, r4, r5, lr}
 80100b6:	4d07      	ldr	r5, [pc, #28]	; (80100d4 <_fstat_r+0x20>)
 80100b8:	2300      	movs	r3, #0
 80100ba:	4604      	mov	r4, r0
 80100bc:	4608      	mov	r0, r1
 80100be:	4611      	mov	r1, r2
 80100c0:	602b      	str	r3, [r5, #0]
 80100c2:	f7f2 ff39 	bl	8002f38 <_fstat>
 80100c6:	1c43      	adds	r3, r0, #1
 80100c8:	d102      	bne.n	80100d0 <_fstat_r+0x1c>
 80100ca:	682b      	ldr	r3, [r5, #0]
 80100cc:	b103      	cbz	r3, 80100d0 <_fstat_r+0x1c>
 80100ce:	6023      	str	r3, [r4, #0]
 80100d0:	bd38      	pop	{r3, r4, r5, pc}
 80100d2:	bf00      	nop
 80100d4:	240e0044 	.word	0x240e0044

080100d8 <_isatty_r>:
 80100d8:	b538      	push	{r3, r4, r5, lr}
 80100da:	4d06      	ldr	r5, [pc, #24]	; (80100f4 <_isatty_r+0x1c>)
 80100dc:	2300      	movs	r3, #0
 80100de:	4604      	mov	r4, r0
 80100e0:	4608      	mov	r0, r1
 80100e2:	602b      	str	r3, [r5, #0]
 80100e4:	f7f2 fea6 	bl	8002e34 <_isatty>
 80100e8:	1c43      	adds	r3, r0, #1
 80100ea:	d102      	bne.n	80100f2 <_isatty_r+0x1a>
 80100ec:	682b      	ldr	r3, [r5, #0]
 80100ee:	b103      	cbz	r3, 80100f2 <_isatty_r+0x1a>
 80100f0:	6023      	str	r3, [r4, #0]
 80100f2:	bd38      	pop	{r3, r4, r5, pc}
 80100f4:	240e0044 	.word	0x240e0044

080100f8 <_lseek_r>:
 80100f8:	b538      	push	{r3, r4, r5, lr}
 80100fa:	4d07      	ldr	r5, [pc, #28]	; (8010118 <_lseek_r+0x20>)
 80100fc:	4604      	mov	r4, r0
 80100fe:	4608      	mov	r0, r1
 8010100:	4611      	mov	r1, r2
 8010102:	2200      	movs	r2, #0
 8010104:	602a      	str	r2, [r5, #0]
 8010106:	461a      	mov	r2, r3
 8010108:	f7f3 fe38 	bl	8003d7c <_lseek>
 801010c:	1c43      	adds	r3, r0, #1
 801010e:	d102      	bne.n	8010116 <_lseek_r+0x1e>
 8010110:	682b      	ldr	r3, [r5, #0]
 8010112:	b103      	cbz	r3, 8010116 <_lseek_r+0x1e>
 8010114:	6023      	str	r3, [r4, #0]
 8010116:	bd38      	pop	{r3, r4, r5, pc}
 8010118:	240e0044 	.word	0x240e0044

0801011c <__malloc_lock>:
 801011c:	4801      	ldr	r0, [pc, #4]	; (8010124 <__malloc_lock+0x8>)
 801011e:	f7ff ba55 	b.w	800f5cc <__retarget_lock_acquire_recursive>
 8010122:	bf00      	nop
 8010124:	240e0038 	.word	0x240e0038

08010128 <__malloc_unlock>:
 8010128:	4801      	ldr	r0, [pc, #4]	; (8010130 <__malloc_unlock+0x8>)
 801012a:	f7ff ba50 	b.w	800f5ce <__retarget_lock_release_recursive>
 801012e:	bf00      	nop
 8010130:	240e0038 	.word	0x240e0038

08010134 <_read_r>:
 8010134:	b538      	push	{r3, r4, r5, lr}
 8010136:	4d07      	ldr	r5, [pc, #28]	; (8010154 <_read_r+0x20>)
 8010138:	4604      	mov	r4, r0
 801013a:	4608      	mov	r0, r1
 801013c:	4611      	mov	r1, r2
 801013e:	2200      	movs	r2, #0
 8010140:	602a      	str	r2, [r5, #0]
 8010142:	461a      	mov	r2, r3
 8010144:	f7f2 fed0 	bl	8002ee8 <_read>
 8010148:	1c43      	adds	r3, r0, #1
 801014a:	d102      	bne.n	8010152 <_read_r+0x1e>
 801014c:	682b      	ldr	r3, [r5, #0]
 801014e:	b103      	cbz	r3, 8010152 <_read_r+0x1e>
 8010150:	6023      	str	r3, [r4, #0]
 8010152:	bd38      	pop	{r3, r4, r5, pc}
 8010154:	240e0044 	.word	0x240e0044

08010158 <_init>:
 8010158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801015a:	bf00      	nop
 801015c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801015e:	bc08      	pop	{r3}
 8010160:	469e      	mov	lr, r3
 8010162:	4770      	bx	lr

08010164 <_fini>:
 8010164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010166:	bf00      	nop
 8010168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801016a:	bc08      	pop	{r3}
 801016c:	469e      	mov	lr, r3
 801016e:	4770      	bx	lr
