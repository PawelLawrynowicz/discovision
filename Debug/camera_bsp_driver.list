
camera_bsp_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000feac  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  0801015c  0801015c  0002015c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010840  08010840  00020840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010848  08010848  00020848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801084c  0801084c  0002084c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  24000000  08010850  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000dff90  240000b8  08010908  000300b8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240e0048  08010908  00040048  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024de0  00000000  00000000  000300e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004928  00000000  00000000  00054ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001800  00000000  00000000  000597f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001628  00000000  00000000  0005aff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037b72  00000000  00000000  0005c618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025097  00000000  00000000  0009418a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014e71b  00000000  00000000  000b9221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020793c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a58  00000000  00000000  0020798c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000b8 	.word	0x240000b8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08010144 	.word	0x08010144

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000bc 	.word	0x240000bc
 80002ec:	08010144 	.word	0x08010144

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */
//
  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_DCMI_Init+0x60>)
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <MX_DCMI_Init+0x64>)
 800069c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006a6:	2220      	movs	r2, #32
 80006a8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006b2:	2240      	movs	r2, #64	; 0x40
 80006b4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006dc:	2200      	movs	r2, #0
 80006de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006e2:	f003 feab 	bl	800443c <HAL_DCMI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80006ec:	f000 fed8 	bl	80014a0 <Error_Handler>
//  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
//  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
//  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
  /* USER CODE END DCMI_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	240000d4 	.word	0x240000d4
 80006f8:	48020000 	.word	0x48020000

080006fc <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a76      	ldr	r2, [pc, #472]	; (80008f4 <HAL_DCMI_MspInit+0x1f8>)
 800071a:	4293      	cmp	r3, r2
 800071c:	f040 80e5 	bne.w	80008ea <HAL_DCMI_MspInit+0x1ee>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */
//
  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000720:	4b75      	ldr	r3, [pc, #468]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000722:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000726:	4a74      	ldr	r2, [pc, #464]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8000730:	4b71      	ldr	r3, [pc, #452]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000732:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b6e      	ldr	r3, [pc, #440]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000740:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000744:	4a6c      	ldr	r2, [pc, #432]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800074e:	4b6a      	ldr	r3, [pc, #424]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000750:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000754:	f003 0302 	and.w	r3, r3, #2
 8000758:	61fb      	str	r3, [r7, #28]
 800075a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800075c:	4b66      	ldr	r3, [pc, #408]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800075e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000762:	4a65      	ldr	r2, [pc, #404]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000768:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800076c:	4b62      	ldr	r3, [pc, #392]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800076e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	4b5f      	ldr	r3, [pc, #380]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800077c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000780:	4a5d      	ldr	r2, [pc, #372]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000782:	f043 0308 	orr.w	r3, r3, #8
 8000786:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800078a:	4b5b      	ldr	r3, [pc, #364]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800078c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000790:	f003 0308 	and.w	r3, r3, #8
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000798:	4b57      	ldr	r3, [pc, #348]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800079a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800079e:	4a56      	ldr	r2, [pc, #344]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007a8:	4b53      	ldr	r3, [pc, #332]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b50      	ldr	r3, [pc, #320]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007bc:	4a4e      	ldr	r2, [pc, #312]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007c6:	4b4c      	ldr	r3, [pc, #304]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7;
 80007d4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007e6:	230d      	movs	r3, #13
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4842      	ldr	r0, [pc, #264]	; (80008fc <HAL_DCMI_MspInit+0x200>)
 80007f2:	f008 f85d 	bl	80088b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000808:	230d      	movs	r3, #13
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800080c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000810:	4619      	mov	r1, r3
 8000812:	483b      	ldr	r0, [pc, #236]	; (8000900 <HAL_DCMI_MspInit+0x204>)
 8000814:	f008 f84c 	bl	80088b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000818:	2308      	movs	r3, #8
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000828:	230d      	movs	r3, #13
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	4619      	mov	r1, r3
 8000832:	4834      	ldr	r0, [pc, #208]	; (8000904 <HAL_DCMI_MspInit+0x208>)
 8000834:	f008 f83c 	bl	80088b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6;
 8000838:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800084a:	230d      	movs	r3, #13
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	482c      	ldr	r0, [pc, #176]	; (8000908 <HAL_DCMI_MspInit+0x20c>)
 8000856:	f008 f82b 	bl	80088b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800085a:	2350      	movs	r3, #80	; 0x50
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800086a:	230d      	movs	r3, #13
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000872:	4619      	mov	r1, r3
 8000874:	4825      	ldr	r0, [pc, #148]	; (800090c <HAL_DCMI_MspInit+0x210>)
 8000876:	f008 f81b 	bl	80088b0 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800087c:	4a25      	ldr	r2, [pc, #148]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 800087e:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 8000882:	224b      	movs	r2, #75	; 0x4b
 8000884:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000886:	4b22      	ldr	r3, [pc, #136]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800088c:	4b20      	ldr	r3, [pc, #128]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 8000894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000898:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800089a:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800089c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008a0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008a8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008b6:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80008be:	4814      	ldr	r0, [pc, #80]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008c0:	f004 f88a 	bl	80049d8 <HAL_DMA_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_DCMI_MspInit+0x1d2>
    {
      Error_Handler();
 80008ca:	f000 fde9 	bl	80014a0 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008d2:	649a      	str	r2, [r3, #72]	; 0x48
 80008d4:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	204e      	movs	r0, #78	; 0x4e
 80008e0:	f003 fd77 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 80008e4:	204e      	movs	r0, #78	; 0x4e
 80008e6:	f003 fd8e 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */
//
  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80008ea:	bf00      	nop
 80008ec:	3738      	adds	r7, #56	; 0x38
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	48020000 	.word	0x48020000
 80008f8:	58024400 	.word	0x58024400
 80008fc:	58020400 	.word	0x58020400
 8000900:	58021800 	.word	0x58021800
 8000904:	58020c00 	.word	0x58020c00
 8000908:	58020800 	.word	0x58020800
 800090c:	58020000 	.word	0x58020000
 8000910:	24000124 	.word	0x24000124
 8000914:	40020428 	.word	0x40020428

08000918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MX_DMA_Init+0x3c>)
 8000920:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000924:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <MX_DMA_Init+0x3c>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_DMA_Init+0x3c>)
 8000930:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2039      	movs	r0, #57	; 0x39
 8000942:	f003 fd46 	bl	80043d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000946:	2039      	movs	r0, #57	; 0x39
 8000948:	f003 fd5d 	bl	8004406 <HAL_NVIC_EnableIRQ>

}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	58024400 	.word	0x58024400

08000958 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800095e:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <MX_DMA2D_Init+0x74>)
 8000960:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_PFC;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000964:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000968:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800096c:	2201      	movs	r2, #1
 800096e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000978:	2200      	movs	r2, #0
 800097a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800097e:	2201      	movs	r2, #1
 8000980:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000984:	2200      	movs	r2, #0
 8000986:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800098a:	2200      	movs	r2, #0
 800098c:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000990:	2200      	movs	r2, #0
 8000992:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000996:	2200      	movs	r2, #0
 8000998:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800099c:	2200      	movs	r2, #0
 800099e:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <MX_DMA2D_Init+0x70>)
 80009a2:	f006 fef9 	bl	8007798 <HAL_DMA2D_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_DMA2D_Init+0x58>
  {
    Error_Handler();
 80009ac:	f000 fd78 	bl	80014a0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009b0:	2101      	movs	r1, #1
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_DMA2D_Init+0x70>)
 80009b4:	f007 f978 	bl	8007ca8 <HAL_DMA2D_ConfigLayer>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_DMA2D_Init+0x6a>
  {
    Error_Handler();
 80009be:	f000 fd6f 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2400019c 	.word	0x2400019c
 80009cc:	52001000 	.word	0x52001000

080009d0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <HAL_DMA2D_MspInit+0x48>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d116      	bne.n	8000a10 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_DMA2D_MspInit+0x4c>)
 80009e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80009e8:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <HAL_DMA2D_MspInit+0x4c>)
 80009ea:	f043 0310 	orr.w	r3, r3, #16
 80009ee:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_DMA2D_MspInit+0x4c>)
 80009f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80009f8:	f003 0310 	and.w	r3, r3, #16
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	205a      	movs	r0, #90	; 0x5a
 8000a06:	f003 fce4 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a0a:	205a      	movs	r0, #90	; 0x5a
 8000a0c:	f003 fcfb 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	52001000 	.word	0x52001000
 8000a1c:	58024400 	.word	0x58024400

08000a20 <DMA2D_Convert>:
  }
}

/* USER CODE BEGIN 1 */
void DMA2D_Convert(uint8_t* source, uint32_t* destination)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  status = HAL_DMA2D_Start(&hdma2d, (uint32_t)source,
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <DMA2D_Convert+0x4c>)
 8000a3a:	f006 ff11 	bl	8007860 <HAL_DMA2D_Start>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	73fb      	strb	r3, [r7, #15]
                        (uint32_t)destination, 480, 272);
  if (status != HAL_OK) {
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <DMA2D_Convert+0x2c>
    Error_Handler();
 8000a48:	f000 fd2a 	bl	80014a0 <Error_Handler>
  }

  status = HAL_DMA2D_PollForTransfer(&hdma2d, 1000);
 8000a4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <DMA2D_Convert+0x4c>)
 8000a52:	f006 ff30 	bl	80078b6 <HAL_DMA2D_PollForTransfer>
 8000a56:	4603      	mov	r3, r0
 8000a58:	73fb      	strb	r3, [r7, #15]
  if (status != HAL_OK) {
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <DMA2D_Convert+0x44>
    Error_Handler();
 8000a60:	f000 fd1e 	bl	80014a0 <Error_Handler>
  }
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	2400019c 	.word	0x2400019c

08000a70 <MX_GPIO_Init>:
     PE8   ------> FMC_D5_DA5
     PE11   ------> FMC_D8_DA8
     PH7   ------> FMC_SDCKE1
*/
void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b090      	sub	sp, #64	; 0x40
 8000a74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a86:	4bbf      	ldr	r3, [pc, #764]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000a88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a8c:	4abd      	ldr	r2, [pc, #756]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a92:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a96:	4bbb      	ldr	r3, [pc, #748]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000a98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa4:	4bb7      	ldr	r3, [pc, #732]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000aa6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aaa:	4ab6      	ldr	r2, [pc, #728]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ab4:	4bb3      	ldr	r3, [pc, #716]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000ab6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac2:	4bb0      	ldr	r3, [pc, #704]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000ac4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac8:	4aae      	ldr	r2, [pc, #696]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ace:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ad2:	4bac      	ldr	r3, [pc, #688]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000ad4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000adc:	623b      	str	r3, [r7, #32]
 8000ade:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ae0:	4ba8      	ldr	r3, [pc, #672]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000ae2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae6:	4aa7      	ldr	r2, [pc, #668]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000ae8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000af0:	4ba4      	ldr	r3, [pc, #656]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000af2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000afa:	61fb      	str	r3, [r7, #28]
 8000afc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afe:	4ba1      	ldr	r3, [pc, #644]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b04:	4a9f      	ldr	r2, [pc, #636]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b06:	f043 0308 	orr.w	r3, r3, #8
 8000b0a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b0e:	4b9d      	ldr	r3, [pc, #628]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b14:	f003 0308 	and.w	r3, r3, #8
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1c:	4b99      	ldr	r3, [pc, #612]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b22:	4a98      	ldr	r2, [pc, #608]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b2c:	4b95      	ldr	r3, [pc, #596]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b3a:	4b92      	ldr	r3, [pc, #584]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b40:	4a90      	ldr	r2, [pc, #576]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b4a:	4b8e      	ldr	r3, [pc, #568]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b50:	f003 0310 	and.w	r3, r3, #16
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b58:	4b8a      	ldr	r3, [pc, #552]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b5e:	4a89      	ldr	r2, [pc, #548]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b64:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b68:	4b86      	ldr	r3, [pc, #536]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4b83      	ldr	r3, [pc, #524]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b78:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b7c:	4a81      	ldr	r2, [pc, #516]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b86:	4b7f      	ldr	r3, [pc, #508]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b94:	4b7b      	ldr	r3, [pc, #492]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b9a:	4a7a      	ldr	r2, [pc, #488]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000b9c:	f043 0320 	orr.w	r3, r3, #32
 8000ba0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ba4:	4b77      	ldr	r3, [pc, #476]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000ba6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000baa:	f003 0320 	and.w	r3, r3, #32
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb2:	4b74      	ldr	r3, [pc, #464]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000bb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb8:	4a72      	ldr	r2, [pc, #456]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bbe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bc2:	4b70      	ldr	r3, [pc, #448]	; (8000d84 <MX_GPIO_Init+0x314>)
 8000bc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	210e      	movs	r1, #14
 8000bd4:	486c      	ldr	r0, [pc, #432]	; (8000d88 <MX_GPIO_Init+0x318>)
 8000bd6:	f008 f925 	bl	8008e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f640 0104 	movw	r1, #2052	; 0x804
 8000be0:	486a      	ldr	r0, [pc, #424]	; (8000d8c <MX_GPIO_Init+0x31c>)
 8000be2:	f008 f91f 	bl	8008e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bec:	4868      	ldr	r0, [pc, #416]	; (8000d90 <MX_GPIO_Init+0x320>)
 8000bee:	f008 f919 	bl	8008e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2108      	movs	r1, #8
 8000bf6:	4865      	ldr	r0, [pc, #404]	; (8000d8c <MX_GPIO_Init+0x31c>)
 8000bf8:	f008 f914 	bl	8008e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2106      	movs	r1, #6
 8000c00:	4863      	ldr	r0, [pc, #396]	; (8000d90 <MX_GPIO_Init+0x320>)
 8000c02:	f008 f90f 	bl	8008e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8000c06:	2330      	movs	r3, #48	; 0x30
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c18:	4619      	mov	r1, r3
 8000c1a:	485b      	ldr	r0, [pc, #364]	; (8000d88 <MX_GPIO_Init+0x318>)
 8000c1c:	f007 fe48 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000c20:	f248 1333 	movw	r3, #33075	; 0x8133
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c32:	230c      	movs	r3, #12
 8000c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4853      	ldr	r0, [pc, #332]	; (8000d8c <MX_GPIO_Init+0x31c>)
 8000c3e:	f007 fe37 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8000c42:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000c54:	2305      	movs	r3, #5
 8000c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	484b      	ldr	r0, [pc, #300]	; (8000d8c <MX_GPIO_Init+0x31c>)
 8000c60:	f007 fe26 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8000c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000c76:	2309      	movs	r3, #9
 8000c78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4842      	ldr	r0, [pc, #264]	; (8000d8c <MX_GPIO_Init+0x31c>)
 8000c82:	f007 fe15 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8000c86:	2380      	movs	r3, #128	; 0x80
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000c96:	230a      	movs	r3, #10
 8000c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	483c      	ldr	r0, [pc, #240]	; (8000d94 <MX_GPIO_Init+0x324>)
 8000ca2:	f007 fe05 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000ca6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4834      	ldr	r0, [pc, #208]	; (8000d94 <MX_GPIO_Init+0x324>)
 8000cc4:	f007 fdf4 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 8000cc8:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000cda:	230c      	movs	r3, #12
 8000cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	482c      	ldr	r0, [pc, #176]	; (8000d98 <MX_GPIO_Init+0x328>)
 8000ce6:	f007 fde3 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8000cea:	230e      	movs	r3, #14
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4821      	ldr	r0, [pc, #132]	; (8000d88 <MX_GPIO_Init+0x318>)
 8000d02:	f007 fdd5 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000d06:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d18:	230c      	movs	r3, #12
 8000d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d20:	4619      	mov	r1, r3
 8000d22:	481e      	ldr	r0, [pc, #120]	; (8000d9c <MX_GPIO_Init+0x32c>)
 8000d24:	f007 fdc4 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8000d28:	f640 030c 	movw	r3, #2060	; 0x80c
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4812      	ldr	r0, [pc, #72]	; (8000d8c <MX_GPIO_Init+0x31c>)
 8000d42:	f007 fdb5 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000d46:	2304      	movs	r3, #4
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d56:	230c      	movs	r3, #12
 8000d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <MX_GPIO_Init+0x324>)
 8000d62:	f007 fda5 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000d66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d6c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <MX_GPIO_Init+0x318>)
 8000d7e:	f007 fd97 	bl	80088b0 <HAL_GPIO_Init>
 8000d82:	e00d      	b.n	8000da0 <MX_GPIO_Init+0x330>
 8000d84:	58024400 	.word	0x58024400
 8000d88:	58022000 	.word	0x58022000
 8000d8c:	58021800 	.word	0x58021800
 8000d90:	58020000 	.word	0x58020000
 8000d94:	58020c00 	.word	0x58020c00
 8000d98:	58020800 	.word	0x58020800
 8000d9c:	58021000 	.word	0x58021000

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8000da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000db2:	2305      	movs	r3, #5
 8000db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4869      	ldr	r0, [pc, #420]	; (8000f64 <MX_GPIO_Init+0x4f4>)
 8000dbe:	f007 fd77 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8000dc2:	f640 0306 	movw	r3, #2054	; 0x806
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4862      	ldr	r0, [pc, #392]	; (8000f64 <MX_GPIO_Init+0x4f4>)
 8000ddc:	f007 fd68 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8000de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df4:	4619      	mov	r1, r3
 8000df6:	485c      	ldr	r0, [pc, #368]	; (8000f68 <MX_GPIO_Init+0x4f8>)
 8000df8:	f007 fd5a 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000dfc:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e0e:	230c      	movs	r3, #12
 8000e10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e16:	4619      	mov	r1, r3
 8000e18:	4854      	ldr	r0, [pc, #336]	; (8000f6c <MX_GPIO_Init+0x4fc>)
 8000e1a:	f007 fd49 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8000e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e30:	2300      	movs	r3, #0
 8000e32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	484a      	ldr	r0, [pc, #296]	; (8000f64 <MX_GPIO_Init+0x4f4>)
 8000e3c:	f007 fd38 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8000e40:	2340      	movs	r3, #64	; 0x40
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000e50:	230a      	movs	r3, #10
 8000e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4845      	ldr	r0, [pc, #276]	; (8000f70 <MX_GPIO_Init+0x500>)
 8000e5c:	f007 fd28 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000e60:	230c      	movs	r3, #12
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e70:	2305      	movs	r3, #5
 8000e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e78:	4619      	mov	r1, r3
 8000e7a:	483b      	ldr	r0, [pc, #236]	; (8000f68 <MX_GPIO_Init+0x4f8>)
 8000e7c:	f007 fd18 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8000e80:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e86:	2312      	movs	r3, #18
 8000e88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e92:	2304      	movs	r3, #4
 8000e94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4835      	ldr	r0, [pc, #212]	; (8000f74 <MX_GPIO_Init+0x504>)
 8000e9e:	f007 fd07 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 8000ea2:	2322      	movs	r3, #34	; 0x22
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000eb2:	230a      	movs	r3, #10
 8000eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eba:	4619      	mov	r1, r3
 8000ebc:	482a      	ldr	r0, [pc, #168]	; (8000f68 <MX_GPIO_Init+0x4f8>)
 8000ebe:	f007 fcf7 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4828      	ldr	r0, [pc, #160]	; (8000f78 <MX_GPIO_Init+0x508>)
 8000ed8:	f007 fcea 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000edc:	23e0      	movs	r3, #224	; 0xe0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eec:	230c      	movs	r3, #12
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4820      	ldr	r0, [pc, #128]	; (8000f78 <MX_GPIO_Init+0x508>)
 8000ef8:	f007 fcda 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 8000efc:	2308      	movs	r3, #8
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000f0c:	2309      	movs	r3, #9
 8000f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f14:	4619      	mov	r1, r3
 8000f16:	4818      	ldr	r0, [pc, #96]	; (8000f78 <MX_GPIO_Init+0x508>)
 8000f18:	f007 fcca 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 8000f1c:	2309      	movs	r3, #9
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000f2c:	2305      	movs	r3, #5
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f34:	4619      	mov	r1, r3
 8000f36:	480b      	ldr	r0, [pc, #44]	; (8000f64 <MX_GPIO_Init+0x4f4>)
 8000f38:	f007 fcba 	bl	80088b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000f4c:	2309      	movs	r3, #9
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f54:	4619      	mov	r1, r3
 8000f56:	4809      	ldr	r0, [pc, #36]	; (8000f7c <MX_GPIO_Init+0x50c>)
 8000f58:	f007 fcaa 	bl	80088b0 <HAL_GPIO_Init>

}
 8000f5c:	bf00      	nop
 8000f5e:	3740      	adds	r7, #64	; 0x40
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	58020000 	.word	0x58020000
 8000f68:	58020800 	.word	0x58020800
 8000f6c:	58021400 	.word	0x58021400
 8000f70:	58021800 	.word	0x58021800
 8000f74:	58020c00 	.word	0x58020c00
 8000f78:	58021c00 	.word	0x58021c00
 8000f7c:	58020400 	.word	0x58020400

08000f80 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08e      	sub	sp, #56	; 0x38
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2234      	movs	r2, #52	; 0x34
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f00e f875 	bl	800f07c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f92:	4b39      	ldr	r3, [pc, #228]	; (8001078 <MX_LTDC_Init+0xf8>)
 8000f94:	4a39      	ldr	r2, [pc, #228]	; (800107c <MX_LTDC_Init+0xfc>)
 8000f96:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f98:	4b37      	ldr	r3, [pc, #220]	; (8001078 <MX_LTDC_Init+0xf8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f9e:	4b36      	ldr	r3, [pc, #216]	; (8001078 <MX_LTDC_Init+0xf8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 8000fa4:	4b34      	ldr	r3, [pc, #208]	; (8001078 <MX_LTDC_Init+0xf8>)
 8000fa6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000faa:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000fac:	4b32      	ldr	r3, [pc, #200]	; (8001078 <MX_LTDC_Init+0xf8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000fb2:	4b31      	ldr	r3, [pc, #196]	; (8001078 <MX_LTDC_Init+0xf8>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000fb8:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <MX_LTDC_Init+0xf8>)
 8000fba:	2203      	movs	r2, #3
 8000fbc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000fbe:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <MX_LTDC_Init+0xf8>)
 8000fc0:	220e      	movs	r2, #14
 8000fc2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <MX_LTDC_Init+0xf8>)
 8000fc6:	2205      	movs	r2, #5
 8000fc8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000fca:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <MX_LTDC_Init+0xf8>)
 8000fcc:	f240 228e 	movw	r2, #654	; 0x28e
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000fd2:	4b29      	ldr	r3, [pc, #164]	; (8001078 <MX_LTDC_Init+0xf8>)
 8000fd4:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000fda:	4b27      	ldr	r3, [pc, #156]	; (8001078 <MX_LTDC_Init+0xf8>)
 8000fdc:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000fe0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000fe2:	4b25      	ldr	r3, [pc, #148]	; (8001078 <MX_LTDC_Init+0xf8>)
 8000fe4:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000fe8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <MX_LTDC_Init+0xf8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <MX_LTDC_Init+0xf8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_LTDC_Init+0xf8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001002:	481d      	ldr	r0, [pc, #116]	; (8001078 <MX_LTDC_Init+0xf8>)
 8001004:	f008 fdae 	bl	8009b64 <HAL_LTDC_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 800100e:	f000 fa47 	bl	80014a0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 320;
 8001016:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800101a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 240;
 8001020:	23f0      	movs	r3, #240	; 0xf0
 8001022:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001024:	2302      	movs	r3, #2
 8001026:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001034:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001036:	2305      	movs	r3, #5
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2200      	movs	r2, #0
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <MX_LTDC_Init+0xf8>)
 8001060:	f008 ff12 	bl	8009e88 <HAL_LTDC_ConfigLayer>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 800106a:	f000 fa19 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	3738      	adds	r7, #56	; 0x38
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	24000204 	.word	0x24000204
 800107c:	50001000 	.word	0x50001000

08001080 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0bc      	sub	sp, #240	; 0xf0
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	22c0      	movs	r2, #192	; 0xc0
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f00d ffeb 	bl	800f07c <memset>
  if(ltdcHandle->Instance==LTDC)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a5b      	ldr	r2, [pc, #364]	; (8001218 <HAL_LTDC_MspInit+0x198>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	f040 80ae 	bne.w	800120e <HAL_LTDC_MspInit+0x18e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80010b2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80010b6:	f04f 0300 	mov.w	r3, #0
 80010ba:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 80010be:	2302      	movs	r3, #2
 80010c0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 11;
 80010c2:	230b      	movs	r3, #11
 80010c4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 80010c6:	2311      	movs	r3, #17
 80010c8:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 11;
 80010ce:	230b      	movs	r3, #11
 80010d0:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80010d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010d6:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80010d8:	2300      	movs	r3, #0
 80010da:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e0:	f107 0318 	add.w	r3, r7, #24
 80010e4:	4618      	mov	r0, r3
 80010e6:	f00a f939 	bl	800b35c <HAL_RCCEx_PeriphCLKConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 80010f0:	f000 f9d6 	bl	80014a0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010f4:	4b49      	ldr	r3, [pc, #292]	; (800121c <HAL_LTDC_MspInit+0x19c>)
 80010f6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80010fa:	4a48      	ldr	r2, [pc, #288]	; (800121c <HAL_LTDC_MspInit+0x19c>)
 80010fc:	f043 0308 	orr.w	r3, r3, #8
 8001100:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8001104:	4b45      	ldr	r3, [pc, #276]	; (800121c <HAL_LTDC_MspInit+0x19c>)
 8001106:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001112:	4b42      	ldr	r3, [pc, #264]	; (800121c <HAL_LTDC_MspInit+0x19c>)
 8001114:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001118:	4a40      	ldr	r2, [pc, #256]	; (800121c <HAL_LTDC_MspInit+0x19c>)
 800111a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001122:	4b3e      	ldr	r3, [pc, #248]	; (800121c <HAL_LTDC_MspInit+0x19c>)
 8001124:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001130:	4b3a      	ldr	r3, [pc, #232]	; (800121c <HAL_LTDC_MspInit+0x19c>)
 8001132:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001136:	4a39      	ldr	r2, [pc, #228]	; (800121c <HAL_LTDC_MspInit+0x19c>)
 8001138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001140:	4b36      	ldr	r3, [pc, #216]	; (800121c <HAL_LTDC_MspInit+0x19c>)
 8001142:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001146:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800114e:	4b33      	ldr	r3, [pc, #204]	; (800121c <HAL_LTDC_MspInit+0x19c>)
 8001150:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001154:	4a31      	ldr	r2, [pc, #196]	; (800121c <HAL_LTDC_MspInit+0x19c>)
 8001156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800115e:	4b2f      	ldr	r3, [pc, #188]	; (800121c <HAL_LTDC_MspInit+0x19c>)
 8001160:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 800116c:	23ff      	movs	r3, #255	; 0xff
 800116e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001184:	230e      	movs	r3, #14
 8001186:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800118a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800118e:	4619      	mov	r1, r3
 8001190:	4823      	ldr	r0, [pc, #140]	; (8001220 <HAL_LTDC_MspInit+0x1a0>)
 8001192:	f007 fb8d 	bl	80088b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 8001196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800119a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011b0:	230e      	movs	r3, #14
 80011b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80011b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011ba:	4619      	mov	r1, r3
 80011bc:	4819      	ldr	r0, [pc, #100]	; (8001224 <HAL_LTDC_MspInit+0x1a4>)
 80011be:	f007 fb77 	bl	80088b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 80011c2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80011c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011dc:	230e      	movs	r3, #14
 80011de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011e6:	4619      	mov	r1, r3
 80011e8:	480f      	ldr	r0, [pc, #60]	; (8001228 <HAL_LTDC_MspInit+0x1a8>)
 80011ea:	f007 fb61 	bl	80088b0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	2058      	movs	r0, #88	; 0x58
 80011f4:	f003 f8ed 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011f8:	2058      	movs	r0, #88	; 0x58
 80011fa:	f003 f904 	bl	8004406 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	2059      	movs	r0, #89	; 0x59
 8001204:	f003 f8e5 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001208:	2059      	movs	r0, #89	; 0x59
 800120a:	f003 f8fc 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800120e:	bf00      	nop
 8001210:	37f0      	adds	r7, #240	; 0xf0
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	50001000 	.word	0x50001000
 800121c:	58024400 	.word	0x58024400
 8001220:	58022800 	.word	0x58022800
 8001224:	58022400 	.word	0x58022400
 8001228:	58022000 	.word	0x58022000

0800122c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08e      	sub	sp, #56	; 0x38
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001232:	f002 ff3d 	bl	80040b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001236:	f000 f897 	bl	8001368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123a:	f7ff fc19 	bl	8000a70 <MX_GPIO_Init>
  MX_DMA_Init();
 800123e:	f7ff fb6b 	bl	8000918 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001242:	f002 fe4d 	bl	8003ee0 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 8001246:	f7ff fb87 	bl	8000958 <MX_DMA2D_Init>
  MX_LTDC_Init();
 800124a:	f7ff fe99 	bl	8000f80 <MX_LTDC_Init>
  MX_DCMI_Init();
 800124e:	f7ff fa21 	bl	8000694 <MX_DCMI_Init>
  MX_RTC_Init();
 8001252:	f001 fe83 	bl	8002f5c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 8001256:	483c      	ldr	r0, [pc, #240]	; (8001348 <main+0x11c>)
 8001258:	f001 fdca 	bl	8002df0 <RetargetInit>

  printf("BUFFER RANDOM VALUE BEFORE CAPTURE: %d\n", buffer[5640]);
 800125c:	4b3b      	ldr	r3, [pc, #236]	; (800134c <main+0x120>)
 800125e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001262:	f893 3608 	ldrb.w	r3, [r3, #1544]	; 0x608
 8001266:	4619      	mov	r1, r3
 8001268:	4839      	ldr	r0, [pc, #228]	; (8001350 <main+0x124>)
 800126a:	f00d ff0f 	bl	800f08c <iprintf>
  //camera init
  BSP_CAMERA_PwrDown(0);
 800126e:	2000      	movs	r0, #0
 8001270:	f002 fbd7 	bl	8003a22 <BSP_CAMERA_PwrDown>

  if(BSP_CAMERA_Init(0, CAMERA_R480x272, CAMERA_PF_RGB565) != BSP_ERROR_NONE){
 8001274:	2200      	movs	r2, #0
 8001276:	2102      	movs	r1, #2
 8001278:	2000      	movs	r0, #0
 800127a:	f002 fb21 	bl	80038c0 <BSP_CAMERA_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <main+0x5c>
	  Error_Handler();
 8001284:	f000 f90c 	bl	80014a0 <Error_Handler>
  }

  HAL_Delay(1000);
 8001288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800128c:	f002 ffa2 	bl	80041d4 <HAL_Delay>
//  buffer[5460] = 255;
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2234      	movs	r2, #52	; 0x34
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f00d fef0 	bl	800f07c <memset>

  pLayerCfg.WindowX0 = 28;
 800129c:	231c      	movs	r3, #28
 800129e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 508;
 80012a0:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 80012a4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 6;
 80012a6:	2306      	movs	r3, #6
 80012a8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 278;
 80012aa:	f44f 738b 	mov.w	r3, #278	; 0x116
 80012ae:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80012b0:	2302      	movs	r3, #2
 80012b2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80012b4:	23ff      	movs	r3, #255	; 0xff
 80012b6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80012bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80012c2:	2305      	movs	r3, #5
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = (uint32_t) buffer2d;
 80012c6:	4b23      	ldr	r3, [pc, #140]	; (8001354 <main+0x128>)
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80012ca:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80012d0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80012d4:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 255;
 80012e2:	23ff      	movs	r3, #255	; 0xff
 80012e4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	4619      	mov	r1, r3
 80012ee:	481a      	ldr	r0, [pc, #104]	; (8001358 <main+0x12c>)
 80012f0:	f008 fdca 	bl	8009e88 <HAL_LTDC_ConfigLayer>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <main+0xd2>
  {
    Error_Handler();
 80012fa:	f000 f8d1 	bl	80014a0 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Printing photo 1");
 80012fe:	4817      	ldr	r0, [pc, #92]	; (800135c <main+0x130>)
 8001300:	f00d fec4 	bl	800f08c <iprintf>
  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, GPIO_PIN_SET);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800130a:	4815      	ldr	r0, [pc, #84]	; (8001360 <main+0x134>)
 800130c:	f007 fd8a 	bl	8008e24 <HAL_GPIO_WritePin>
  BSP_CAMERA_Start(0, (uint8_t*)buffer, CAMERA_MODE_SNAPSHOT);
 8001310:	2202      	movs	r2, #2
 8001312:	490e      	ldr	r1, [pc, #56]	; (800134c <main+0x120>)
 8001314:	2000      	movs	r0, #0
 8001316:	f002 fb19 	bl	800394c <BSP_CAMERA_Start>
  BSP_CAMERA_Stop(0);
 800131a:	2000      	movs	r0, #0
 800131c:	f002 fb50 	bl	80039c0 <BSP_CAMERA_Stop>
  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001326:	480e      	ldr	r0, [pc, #56]	; (8001360 <main+0x134>)
 8001328:	f007 fd7c 	bl	8008e24 <HAL_GPIO_WritePin>

  while (1)
  {
	HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 800132c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001330:	480b      	ldr	r0, [pc, #44]	; (8001360 <main+0x134>)
 8001332:	f007 fd90 	bl	8008e56 <HAL_GPIO_TogglePin>
	printf("siema");
 8001336:	480b      	ldr	r0, [pc, #44]	; (8001364 <main+0x138>)
 8001338:	f00d fea8 	bl	800f08c <iprintf>
	HAL_Delay(1000);
 800133c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001340:	f002 ff48 	bl	80041d4 <HAL_Delay>
	HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 8001344:	e7f2      	b.n	800132c <main+0x100>
 8001346:	bf00      	nop
 8001348:	240dffa0 	.word	0x240dffa0
 800134c:	240002b0 	.word	0x240002b0
 8001350:	0801015c 	.word	0x0801015c
 8001354:	2405fcb0 	.word	0x2405fcb0
 8001358:	24000204 	.word	0x24000204
 800135c:	08010184 	.word	0x08010184
 8001360:	58021800 	.word	0x58021800
 8001364:	08010198 	.word	0x08010198

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b09c      	sub	sp, #112	; 0x70
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	224c      	movs	r2, #76	; 0x4c
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f00d fe80 	bl	800f07c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2220      	movs	r2, #32
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f00d fe7a 	bl	800f07c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001388:	4b38      	ldr	r3, [pc, #224]	; (800146c <SystemClock_Config+0x104>)
 800138a:	f04f 32ff 	mov.w	r2, #4294967295
 800138e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001392:	2004      	movs	r0, #4
 8001394:	f008 ff60 	bl	800a258 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001398:	2300      	movs	r3, #0
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	4b34      	ldr	r3, [pc, #208]	; (8001470 <SystemClock_Config+0x108>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a33      	ldr	r2, [pc, #204]	; (8001470 <SystemClock_Config+0x108>)
 80013a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b31      	ldr	r3, [pc, #196]	; (8001470 <SystemClock_Config+0x108>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013b4:	bf00      	nop
 80013b6:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <SystemClock_Config+0x108>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013c2:	d1f8      	bne.n	80013b6 <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013c4:	f008 ff38 	bl	800a238 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013c8:	4b28      	ldr	r3, [pc, #160]	; (800146c <SystemClock_Config+0x104>)
 80013ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013cc:	4a27      	ldr	r2, [pc, #156]	; (800146c <SystemClock_Config+0x104>)
 80013ce:	f023 0318 	bic.w	r3, r3, #24
 80013d2:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80013d4:	2305      	movs	r3, #5
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013de:	2301      	movs	r3, #1
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e2:	2302      	movs	r3, #2
 80013e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e6:	2302      	movs	r3, #2
 80013e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80013ea:	2302      	movs	r3, #2
 80013ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013ee:	2328      	movs	r3, #40	; 0x28
 80013f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013f2:	2302      	movs	r3, #2
 80013f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80013f6:	2303      	movs	r3, #3
 80013f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80013fa:	2304      	movs	r3, #4
 80013fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013fe:	230c      	movs	r3, #12
 8001400:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001402:	2300      	movs	r3, #0
 8001404:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 5462;
 8001406:	f241 5356 	movw	r3, #5462	; 0x1556
 800140a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001410:	4618      	mov	r0, r3
 8001412:	f008 ff7b 	bl	800a30c <HAL_RCC_OscConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800141c:	f000 f840 	bl	80014a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001420:	233f      	movs	r3, #63	; 0x3f
 8001422:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001424:	2303      	movs	r3, #3
 8001426:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001430:	2340      	movs	r3, #64	; 0x40
 8001432:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001434:	2340      	movs	r3, #64	; 0x40
 8001436:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800143c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800143e:	2340      	movs	r3, #64	; 0x40
 8001440:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2105      	movs	r1, #5
 8001446:	4618      	mov	r0, r3
 8001448:	f009 fb92 	bl	800ab70 <HAL_RCC_ClockConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001452:	f000 f825 	bl	80014a0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001456:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800145a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800145e:	2000      	movs	r0, #0
 8001460:	f009 fd3c 	bl	800aedc <HAL_RCC_MCOConfig>
}
 8001464:	bf00      	nop
 8001466:	3770      	adds	r7, #112	; 0x70
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	58024400 	.word	0x58024400
 8001470:	58024800 	.word	0x58024800

08001474 <BSP_CAMERA_FrameEventCallback>:

/* USER CODE BEGIN 4 */

void BSP_CAMERA_FrameEventCallback(uint32_t Instance){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	camera_frame_ready = 1;
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <BSP_CAMERA_FrameEventCallback+0x20>)
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]
	DMA2D_Convert(buffer, buffer2d);
 8001482:	4905      	ldr	r1, [pc, #20]	; (8001498 <BSP_CAMERA_FrameEventCallback+0x24>)
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <BSP_CAMERA_FrameEventCallback+0x28>)
 8001486:	f7ff facb 	bl	8000a20 <DMA2D_Convert>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	240002ac 	.word	0x240002ac
 8001498:	2405fcb0 	.word	0x2405fcb0
 800149c:	240002b0 	.word	0x240002b0

080014a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a4:	b672      	cpsid	i
}
 80014a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <Error_Handler+0x8>
	...

080014ac <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d103      	bne.n	80014c4 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	e02c      	b.n	800151e <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	891a      	ldrh	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	691a      	ldr	r2, [r3, #16]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	695a      	ldr	r2, [r3, #20]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a0c      	ldr	r2, [pc, #48]	; (8001528 <OV5640_RegisterBusIO+0x7c>)
 80014f8:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a0b      	ldr	r2, [pc, #44]	; (800152c <OV5640_RegisterBusIO+0x80>)
 80014fe:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d004      	beq.n	8001518 <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4798      	blx	r3
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	e002      	b.n	800151e <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
 800151c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	08002d2f 	.word	0x08002d2f
 800152c:	08002d61 	.word	0x08002d61

08001530 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001546:	2b00      	cmp	r3, #0
 8001548:	d165      	bne.n	8001616 <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	2b04      	cmp	r3, #4
 800154e:	d80e      	bhi.n	800156e <OV5640_Init+0x3e>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00f      	beq.n	8001576 <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d00c      	beq.n	8001576 <OV5640_Init+0x46>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d009      	beq.n	8001576 <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b07      	cmp	r3, #7
 8001566:	d006      	beq.n	8001576 <OV5640_Init+0x46>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b08      	cmp	r3, #8
 800156c:	d003      	beq.n	8001576 <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
 8001572:	61bb      	str	r3, [r7, #24]
 8001574:	e04f      	b.n	8001616 <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
 800157a:	e01f      	b.n	80015bc <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001582:	d018      	beq.n	80015b6 <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8001584:	4a26      	ldr	r2, [pc, #152]	; (8001620 <OV5640_Init+0xf0>)
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	885b      	ldrh	r3, [r3, #2]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f103 0018 	add.w	r0, r3, #24
 8001598:	4a21      	ldr	r2, [pc, #132]	; (8001620 <OV5640_Init+0xf0>)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80015a0:	f107 0217 	add.w	r2, r7, #23
 80015a4:	2301      	movs	r3, #1
 80015a6:	f001 fc0b 	bl	8002dc0 <ov5640_write_reg>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295
 80015b4:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3301      	adds	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	2bfd      	cmp	r3, #253	; 0xfd
 80015c0:	d9dc      	bls.n	800157c <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d126      	bne.n	8001616 <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f9e0 	bl	8001990 <OV5640_SetResolution>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	61bb      	str	r3, [r7, #24]
 80015dc:	e01b      	b.n	8001616 <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 f833 	bl	800164c <OV5640_SetPixelFormat>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	e010      	b.n	8001616 <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 80015f4:	2300      	movs	r3, #0
 80015f6:	2201      	movs	r2, #1
 80015f8:	2101      	movs	r1, #1
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 fb64 	bl	8001cc8 <OV5640_SetPolarities>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	61bb      	str	r3, [r7, #24]
 800160c:	e003      	b.n	8001616 <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8001616:	69bb      	ldr	r3, [r7, #24]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3720      	adds	r7, #32
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	080101e8 	.word	0x080101e8

08001624 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001632:	2b01      	cmp	r3, #1
 8001634:	d103      	bne.n	800163e <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00f      	beq.n	8001680 <OV5640_SetPixelFormat+0x34>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d00c      	beq.n	8001680 <OV5640_SetPixelFormat+0x34>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d009      	beq.n	8001680 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	2b07      	cmp	r3, #7
 8001670:	d006      	beq.n	8001680 <OV5640_SetPixelFormat+0x34>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2b08      	cmp	r3, #8
 8001676:	d003      	beq.n	8001680 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8001678:	f04f 33ff 	mov.w	r3, #4294967295
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	e16a      	b.n	8001956 <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	3b01      	subs	r3, #1
 8001684:	2b07      	cmp	r3, #7
 8001686:	f200 80c3 	bhi.w	8001810 <OV5640_SetPixelFormat+0x1c4>
 800168a:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <OV5640_SetPixelFormat+0x44>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	08001709 	.word	0x08001709
 8001694:	080016b1 	.word	0x080016b1
 8001698:	08001811 	.word	0x08001811
 800169c:	08001811 	.word	0x08001811
 80016a0:	08001811 	.word	0x08001811
 80016a4:	08001811 	.word	0x08001811
 80016a8:	08001761 	.word	0x08001761
 80016ac:	080017b9 	.word	0x080017b9
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	e024      	b.n	8001700 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016bc:	d01d      	beq.n	80016fa <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 80016be:	4aa8      	ldr	r2, [pc, #672]	; (8001960 <OV5640_SetPixelFormat+0x314>)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	885b      	ldrh	r3, [r3, #2]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f103 0018 	add.w	r0, r3, #24
 80016d2:	4aa3      	ldr	r2, [pc, #652]	; (8001960 <OV5640_SetPixelFormat+0x314>)
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80016da:	f107 020f 	add.w	r2, r7, #15
 80016de:	2301      	movs	r3, #1
 80016e0:	f001 fb6e 	bl	8002dc0 <ov5640_write_reg>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	e003      	b.n	80016fa <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80016f2:	2101      	movs	r1, #1
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f001 fb00 	bl	8002cfa <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	3301      	adds	r3, #1
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d9d7      	bls.n	80016b6 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8001706:	e0af      	b.n	8001868 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	e024      	b.n	8001758 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d01d      	beq.n	8001752 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8001716:	4a93      	ldr	r2, [pc, #588]	; (8001964 <OV5640_SetPixelFormat+0x318>)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	885b      	ldrh	r3, [r3, #2]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f103 0018 	add.w	r0, r3, #24
 800172a:	4a8e      	ldr	r2, [pc, #568]	; (8001964 <OV5640_SetPixelFormat+0x318>)
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001732:	f107 020f 	add.w	r2, r7, #15
 8001736:	2301      	movs	r3, #1
 8001738:	f001 fb42 	bl	8002dc0 <ov5640_write_reg>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	e003      	b.n	8001752 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800174a:	2101      	movs	r1, #1
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f001 fad4 	bl	8002cfa <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	3301      	adds	r3, #1
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d9d7      	bls.n	800170e <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 800175e:	e083      	b.n	8001868 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	e024      	b.n	80017b0 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d01d      	beq.n	80017aa <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800176e:	4a7e      	ldr	r2, [pc, #504]	; (8001968 <OV5640_SetPixelFormat+0x31c>)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	885b      	ldrh	r3, [r3, #2]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f103 0018 	add.w	r0, r3, #24
 8001782:	4a79      	ldr	r2, [pc, #484]	; (8001968 <OV5640_SetPixelFormat+0x31c>)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800178a:	f107 020f 	add.w	r2, r7, #15
 800178e:	2301      	movs	r3, #1
 8001790:	f001 fb16 	bl	8002dc0 <ov5640_write_reg>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	e003      	b.n	80017aa <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80017a2:	2101      	movs	r1, #1
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f001 faa8 	bl	8002cfa <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	3301      	adds	r3, #1
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d9d7      	bls.n	8001766 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 80017b6:	e057      	b.n	8001868 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	e024      	b.n	8001808 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c4:	d01d      	beq.n	8001802 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80017c6:	4a69      	ldr	r2, [pc, #420]	; (800196c <OV5640_SetPixelFormat+0x320>)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	885b      	ldrh	r3, [r3, #2]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f103 0018 	add.w	r0, r3, #24
 80017da:	4a64      	ldr	r2, [pc, #400]	; (800196c <OV5640_SetPixelFormat+0x320>)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80017e2:	f107 020f 	add.w	r2, r7, #15
 80017e6:	2301      	movs	r3, #1
 80017e8:	f001 faea 	bl	8002dc0 <ov5640_write_reg>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	e003      	b.n	8001802 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80017fa:	2101      	movs	r1, #1
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f001 fa7c 	bl	8002cfa <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	3301      	adds	r3, #1
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d9d7      	bls.n	80017be <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 800180e:	e02b      	b.n	8001868 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001810:	2300      	movs	r3, #0
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	e024      	b.n	8001860 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800181c:	d01d      	beq.n	800185a <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 800181e:	4a54      	ldr	r2, [pc, #336]	; (8001970 <OV5640_SetPixelFormat+0x324>)
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	885b      	ldrh	r3, [r3, #2]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f103 0018 	add.w	r0, r3, #24
 8001832:	4a4f      	ldr	r2, [pc, #316]	; (8001970 <OV5640_SetPixelFormat+0x324>)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800183a:	f107 020f 	add.w	r2, r7, #15
 800183e:	2301      	movs	r3, #1
 8001840:	f001 fabe 	bl	8002dc0 <ov5640_write_reg>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	e003      	b.n	800185a <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001852:	2101      	movs	r1, #1
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f001 fa50 	bl	8002cfa <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	3301      	adds	r3, #1
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d9d7      	bls.n	8001816 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8001866:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2b08      	cmp	r3, #8
 800186c:	d173      	bne.n	8001956 <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f103 0018 	add.w	r0, r3, #24
 8001874:	f107 020f 	add.w	r2, r7, #15
 8001878:	2301      	movs	r3, #1
 800187a:	f643 0121 	movw	r1, #14369	; 0x3821
 800187e:	f001 fa88 	bl	8002d92 <ov5640_read_reg>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e062      	b.n	8001956 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	f043 0320 	orr.w	r3, r3, #32
 8001896:	b2db      	uxtb	r3, r3
 8001898:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f103 0018 	add.w	r0, r3, #24
 80018a0:	f107 020f 	add.w	r2, r7, #15
 80018a4:	2301      	movs	r3, #1
 80018a6:	f643 0121 	movw	r1, #14369	; 0x3821
 80018aa:	f001 fa89 	bl	8002dc0 <ov5640_write_reg>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e04c      	b.n	8001956 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f103 0018 	add.w	r0, r3, #24
 80018c2:	f107 020f 	add.w	r2, r7, #15
 80018c6:	2301      	movs	r3, #1
 80018c8:	f243 0102 	movw	r1, #12290	; 0x3002
 80018cc:	f001 fa61 	bl	8002d92 <ov5640_read_reg>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	e03b      	b.n	8001956 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	f023 031c 	bic.w	r3, r3, #28
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f103 0018 	add.w	r0, r3, #24
 80018ee:	f107 020f 	add.w	r2, r7, #15
 80018f2:	2301      	movs	r3, #1
 80018f4:	f243 0102 	movw	r1, #12290	; 0x3002
 80018f8:	f001 fa62 	bl	8002dc0 <ov5640_write_reg>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e025      	b.n	8001956 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f103 0018 	add.w	r0, r3, #24
 8001910:	f107 020f 	add.w	r2, r7, #15
 8001914:	2301      	movs	r3, #1
 8001916:	f243 0106 	movw	r1, #12294	; 0x3006
 800191a:	f001 fa3a 	bl	8002d92 <ov5640_read_reg>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e014      	b.n	8001956 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001932:	b2db      	uxtb	r3, r3
 8001934:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f103 0018 	add.w	r0, r3, #24
 800193c:	f107 020f 	add.w	r2, r7, #15
 8001940:	2301      	movs	r3, #1
 8001942:	f243 0106 	movw	r1, #12294	; 0x3006
 8001946:	f001 fa3b 	bl	8002dc0 <ov5640_write_reg>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8001956:	697b      	ldr	r3, [r7, #20]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	080105e0 	.word	0x080105e0
 8001964:	080105e8 	.word	0x080105e8
 8001968:	080105f0 	.word	0x080105f0
 800196c:	080105f8 	.word	0x080105f8
 8001970:	08010600 	.word	0x08010600

08001974 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d903      	bls.n	80019ac <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	e0d8      	b.n	8001b5e <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	f200 80d1 	bhi.w	8001b56 <OV5640_SetResolution+0x1c6>
 80019b4:	a201      	add	r2, pc, #4	; (adr r2, 80019bc <OV5640_SetResolution+0x2c>)
 80019b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ba:	bf00      	nop
 80019bc:	080019d1 	.word	0x080019d1
 80019c0:	08001a1f 	.word	0x08001a1f
 80019c4:	08001a6d 	.word	0x08001a6d
 80019c8:	08001abb 	.word	0x08001abb
 80019cc:	08001b09 	.word	0x08001b09
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	e01f      	b.n	8001a16 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d018      	beq.n	8001a10 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 80019de:	4a62      	ldr	r2, [pc, #392]	; (8001b68 <OV5640_SetResolution+0x1d8>)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	885b      	ldrh	r3, [r3, #2]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f103 0018 	add.w	r0, r3, #24
 80019f2:	4a5d      	ldr	r2, [pc, #372]	; (8001b68 <OV5640_SetResolution+0x1d8>)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80019fa:	f107 020f 	add.w	r2, r7, #15
 80019fe:	2301      	movs	r3, #1
 8001a00:	f001 f9de 	bl	8002dc0 <ov5640_write_reg>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	3301      	adds	r3, #1
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d9dc      	bls.n	80019d6 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001a1c:	e09f      	b.n	8001b5e <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	e01f      	b.n	8001a64 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2a:	d018      	beq.n	8001a5e <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8001a2c:	4a4f      	ldr	r2, [pc, #316]	; (8001b6c <OV5640_SetResolution+0x1dc>)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	885b      	ldrh	r3, [r3, #2]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f103 0018 	add.w	r0, r3, #24
 8001a40:	4a4a      	ldr	r2, [pc, #296]	; (8001b6c <OV5640_SetResolution+0x1dc>)
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001a48:	f107 020f 	add.w	r2, r7, #15
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f001 f9b7 	bl	8002dc0 <ov5640_write_reg>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	3301      	adds	r3, #1
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d9dc      	bls.n	8001a24 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8001a6a:	e078      	b.n	8001b5e <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	e01f      	b.n	8001ab2 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d018      	beq.n	8001aac <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8001a7a:	4a3d      	ldr	r2, [pc, #244]	; (8001b70 <OV5640_SetResolution+0x1e0>)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	885b      	ldrh	r3, [r3, #2]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f103 0018 	add.w	r0, r3, #24
 8001a8e:	4a38      	ldr	r2, [pc, #224]	; (8001b70 <OV5640_SetResolution+0x1e0>)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001a96:	f107 020f 	add.w	r2, r7, #15
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	f001 f990 	bl	8002dc0 <ov5640_write_reg>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d9dc      	bls.n	8001a72 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8001ab8:	e051      	b.n	8001b5e <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	e01f      	b.n	8001b00 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac6:	d018      	beq.n	8001afa <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8001ac8:	4a2a      	ldr	r2, [pc, #168]	; (8001b74 <OV5640_SetResolution+0x1e4>)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	885b      	ldrh	r3, [r3, #2]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f103 0018 	add.w	r0, r3, #24
 8001adc:	4a25      	ldr	r2, [pc, #148]	; (8001b74 <OV5640_SetResolution+0x1e4>)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001ae4:	f107 020f 	add.w	r2, r7, #15
 8001ae8:	2301      	movs	r3, #1
 8001aea:	f001 f969 	bl	8002dc0 <ov5640_write_reg>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
 8001af8:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	3301      	adds	r3, #1
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d9dc      	bls.n	8001ac0 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8001b06:	e02a      	b.n	8001b5e <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	e01f      	b.n	8001b4e <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d018      	beq.n	8001b48 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8001b16:	4a18      	ldr	r2, [pc, #96]	; (8001b78 <OV5640_SetResolution+0x1e8>)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	885b      	ldrh	r3, [r3, #2]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f103 0018 	add.w	r0, r3, #24
 8001b2a:	4a13      	ldr	r2, [pc, #76]	; (8001b78 <OV5640_SetResolution+0x1e8>)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001b32:	f107 020f 	add.w	r2, r7, #15
 8001b36:	2301      	movs	r3, #1
 8001b38:	f001 f942 	bl	8002dc0 <ov5640_write_reg>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d9dc      	bls.n	8001b0e <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8001b54:	e003      	b.n	8001b5e <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	617b      	str	r3, [r7, #20]
        break;
 8001b5c:	bf00      	nop
    }
  }

  return ret;
 8001b5e:	697b      	ldr	r3, [r7, #20]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	08010608 	.word	0x08010608
 8001b6c:	08010618 	.word	0x08010618
 8001b70:	08010628 	.word	0x08010628
 8001b74:	08010638 	.word	0x08010638
 8001b78:	08010648 	.word	0x08010648

08001b7c <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f103 0018 	add.w	r0, r3, #24
 8001b8c:	f107 020f 	add.w	r2, r7, #15
 8001b90:	2301      	movs	r3, #1
 8001b92:	f643 0108 	movw	r1, #14344	; 0x3808
 8001b96:	f001 f8fc 	bl	8002d92 <ov5640_read_reg>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e08a      	b.n	8001cbe <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f103 0018 	add.w	r0, r3, #24
 8001bb6:	f107 020f 	add.w	r2, r7, #15
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f643 0109 	movw	r1, #14345	; 0x3809
 8001bc0:	f001 f8e7 	bl	8002d92 <ov5640_read_reg>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	e075      	b.n	8001cbe <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	8a7b      	ldrh	r3, [r7, #18]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f103 0018 	add.w	r0, r3, #24
 8001be2:	f107 020f 	add.w	r2, r7, #15
 8001be6:	2301      	movs	r3, #1
 8001be8:	f643 010a 	movw	r1, #14346	; 0x380a
 8001bec:	f001 f8d1 	bl	8002d92 <ov5640_read_reg>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	e05f      	b.n	8001cbe <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	021b      	lsls	r3, r3, #8
 8001c04:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f103 0018 	add.w	r0, r3, #24
 8001c0c:	f107 020f 	add.w	r2, r7, #15
 8001c10:	2301      	movs	r3, #1
 8001c12:	f643 010b 	movw	r1, #14347	; 0x380b
 8001c16:	f001 f8bc 	bl	8002d92 <ov5640_read_reg>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	e04a      	b.n	8001cbe <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	8a3b      	ldrh	r3, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 8001c32:	8a7b      	ldrh	r3, [r7, #18]
 8001c34:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001c38:	d109      	bne.n	8001c4e <OV5640_GetResolution+0xd2>
 8001c3a:	8a3b      	ldrh	r3, [r7, #16]
 8001c3c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c40:	d105      	bne.n	8001c4e <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2204      	movs	r2, #4
 8001c46:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	e037      	b.n	8001cbe <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 8001c4e:	8a7b      	ldrh	r3, [r7, #18]
 8001c50:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001c54:	d109      	bne.n	8001c6a <OV5640_GetResolution+0xee>
 8001c56:	8a3b      	ldrh	r3, [r7, #16]
 8001c58:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c5c:	d105      	bne.n	8001c6a <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2203      	movs	r2, #3
 8001c62:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	e029      	b.n	8001cbe <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 8001c6a:	8a7b      	ldrh	r3, [r7, #18]
 8001c6c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c70:	d109      	bne.n	8001c86 <OV5640_GetResolution+0x10a>
 8001c72:	8a3b      	ldrh	r3, [r7, #16]
 8001c74:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001c78:	d105      	bne.n	8001c86 <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	e01b      	b.n	8001cbe <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 8001c86:	8a7b      	ldrh	r3, [r7, #18]
 8001c88:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c8c:	d108      	bne.n	8001ca0 <OV5640_GetResolution+0x124>
 8001c8e:	8a3b      	ldrh	r3, [r7, #16]
 8001c90:	2bf0      	cmp	r3, #240	; 0xf0
 8001c92:	d105      	bne.n	8001ca0 <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	e00e      	b.n	8001cbe <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 8001ca0:	8a7b      	ldrh	r3, [r7, #18]
 8001ca2:	2ba0      	cmp	r3, #160	; 0xa0
 8001ca4:	d108      	bne.n	8001cb8 <OV5640_GetResolution+0x13c>
 8001ca6:	8a3b      	ldrh	r3, [r7, #16]
 8001ca8:	2b78      	cmp	r3, #120	; 0x78
 8001caa:	d105      	bne.n	8001cb8 <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e002      	b.n	8001cbe <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 8001cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8001cbe:	697b      	ldr	r3, [r7, #20]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d011      	beq.n	8001d04 <OV5640_SetPolarities+0x3c>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <OV5640_SetPolarities+0x24>
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d10b      	bne.n	8001d04 <OV5640_SetPolarities+0x3c>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d105      	bne.n	8001d04 <OV5640_SetPolarities+0x3c>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d006      	beq.n	8001d0c <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	e01e      	b.n	8001d4a <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	015b      	lsls	r3, r3, #5
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	4313      	orrs	r3, r2
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f103 0018 	add.w	r0, r3, #24
 8001d30:	f107 0213 	add.w	r2, r7, #19
 8001d34:	2301      	movs	r3, #1
 8001d36:	f244 7140 	movw	r1, #18240	; 0x4740
 8001d3a:	f001 f841 	bl	8002dc0 <ov5640_write_reg>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295
 8001d48:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001d4a:	697b      	ldr	r3, [r7, #20]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f103 0018 	add.w	r0, r3, #24
 8001d6e:	f107 020b 	add.w	r2, r7, #11
 8001d72:	2301      	movs	r3, #1
 8001d74:	f243 0108 	movw	r1, #12296	; 0x3008
 8001d78:	f001 f822 	bl	8002dc0 <ov5640_write_reg>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	e032      	b.n	8001df0 <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 8001d8a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 ffb3 	bl	8002cfa <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f103 0018 	add.w	r0, r3, #24
 8001d9a:	f107 020b 	add.w	r2, r7, #11
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f243 010a 	movw	r1, #12298	; 0x300a
 8001da4:	f000 fff5 	bl	8002d92 <ov5640_read_reg>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	e01c      	b.n	8001df0 <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8001db6:	7afb      	ldrb	r3, [r7, #11]
 8001db8:	021a      	lsls	r2, r3, #8
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f103 0018 	add.w	r0, r3, #24
 8001dc4:	f107 020b 	add.w	r2, r7, #11
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f243 010b 	movw	r1, #12299	; 0x300b
 8001dce:	f000 ffe0 	bl	8002d92 <ov5640_read_reg>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8001dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	e007      	b.n	8001df0 <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	7afa      	ldrb	r2, [r7, #11]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8001df0:	68fb      	ldr	r3, [r7, #12]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b085      	sub	sp, #20
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d103      	bne.n	8001e12 <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	e01f      	b.n	8001e52 <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2201      	movs	r2, #1
 8001e16:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2201      	movs	r2, #1
 8001e22:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	2201      	movs	r2, #1
 8001e28:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2201      	movs	r2, #1
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2201      	movs	r2, #1
 8001e46:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001e52:	68fb      	ldr	r3, [r7, #12]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f103 0018 	add.w	r0, r3, #24
 8001e74:	f107 020f 	add.w	r2, r7, #15
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f243 4106 	movw	r1, #13318	; 0x3406
 8001e7e:	f000 ff9f 	bl	8002dc0 <ov5640_write_reg>
 8001e82:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10c      	bne.n	8001ea4 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 8001e8a:	2346      	movs	r3, #70	; 0x46
 8001e8c:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f103 0018 	add.w	r0, r3, #24
 8001e94:	f107 020f 	add.w	r2, r7, #15
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f245 1190 	movw	r1, #20880	; 0x5190
 8001e9e:	f000 ff8f 	bl	8002dc0 <ov5640_write_reg>
 8001ea2:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 8001eaa:	23f8      	movs	r3, #248	; 0xf8
 8001eac:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f103 0018 	add.w	r0, r3, #24
 8001eb4:	f107 020f 	add.w	r2, r7, #15
 8001eb8:	2301      	movs	r3, #1
 8001eba:	f245 1191 	movw	r1, #20881	; 0x5191
 8001ebe:	f000 ff7f 	bl	8002dc0 <ov5640_write_reg>
 8001ec2:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10c      	bne.n	8001ee4 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 8001eca:	2304      	movs	r3, #4
 8001ecc:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f103 0018 	add.w	r0, r3, #24
 8001ed4:	f107 020f 	add.w	r2, r7, #15
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f245 1192 	movw	r1, #20882	; 0x5192
 8001ede:	f000 ff6f 	bl	8002dc0 <ov5640_write_reg>
 8001ee2:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 80db 	bne.w	80020a2 <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	2b07      	cmp	r3, #7
 8001ef2:	f200 80af 	bhi.w	8002054 <OV5640_SetLightMode+0x1f4>
 8001ef6:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <OV5640_SetLightMode+0x9c>)
 8001ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efc:	08001f1d 	.word	0x08001f1d
 8001f00:	08001f6b 	.word	0x08001f6b
 8001f04:	08002055 	.word	0x08002055
 8001f08:	08002007 	.word	0x08002007
 8001f0c:	08002055 	.word	0x08002055
 8001f10:	08002055 	.word	0x08002055
 8001f14:	08002055 	.word	0x08002055
 8001f18:	08001fb9 	.word	0x08001fb9
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	e01f      	b.n	8001f62 <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f28:	d018      	beq.n	8001f5c <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8001f2a:	4a61      	ldr	r2, [pc, #388]	; (80020b0 <OV5640_SetLightMode+0x250>)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	885b      	ldrh	r3, [r3, #2]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f103 0018 	add.w	r0, r3, #24
 8001f3e:	4a5c      	ldr	r2, [pc, #368]	; (80020b0 <OV5640_SetLightMode+0x250>)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001f46:	f107 020f 	add.w	r2, r7, #15
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f000 ff38 	bl	8002dc0 <ov5640_write_reg>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d002      	beq.n	8001f5c <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	2b06      	cmp	r3, #6
 8001f66:	d9dc      	bls.n	8001f22 <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 8001f68:	e09c      	b.n	80020a4 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	e01f      	b.n	8001fb0 <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f76:	d018      	beq.n	8001faa <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8001f78:	4a4e      	ldr	r2, [pc, #312]	; (80020b4 <OV5640_SetLightMode+0x254>)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	885b      	ldrh	r3, [r3, #2]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f103 0018 	add.w	r0, r3, #24
 8001f8c:	4a49      	ldr	r2, [pc, #292]	; (80020b4 <OV5640_SetLightMode+0x254>)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001f94:	f107 020f 	add.w	r2, r7, #15
 8001f98:	2301      	movs	r3, #1
 8001f9a:	f000 ff11 	bl	8002dc0 <ov5640_write_reg>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d002      	beq.n	8001faa <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 8001fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa8:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	3301      	adds	r3, #1
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d9dc      	bls.n	8001f70 <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 8001fb6:	e075      	b.n	80020a4 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	e01f      	b.n	8001ffe <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d018      	beq.n	8001ff8 <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8001fc6:	4a3c      	ldr	r2, [pc, #240]	; (80020b8 <OV5640_SetLightMode+0x258>)
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	885b      	ldrh	r3, [r3, #2]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f103 0018 	add.w	r0, r3, #24
 8001fda:	4a37      	ldr	r2, [pc, #220]	; (80020b8 <OV5640_SetLightMode+0x258>)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001fe2:	f107 020f 	add.w	r2, r7, #15
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	f000 feea 	bl	8002dc0 <ov5640_write_reg>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	2b06      	cmp	r3, #6
 8002002:	d9dc      	bls.n	8001fbe <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 8002004:	e04e      	b.n	80020a4 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	e01f      	b.n	800204c <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002012:	d018      	beq.n	8002046 <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8002014:	4a29      	ldr	r2, [pc, #164]	; (80020bc <OV5640_SetLightMode+0x25c>)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	885b      	ldrh	r3, [r3, #2]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f103 0018 	add.w	r0, r3, #24
 8002028:	4a24      	ldr	r2, [pc, #144]	; (80020bc <OV5640_SetLightMode+0x25c>)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002030:	f107 020f 	add.w	r2, r7, #15
 8002034:	2301      	movs	r3, #1
 8002036:	f000 fec3 	bl	8002dc0 <ov5640_write_reg>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 8002040:	f04f 33ff 	mov.w	r3, #4294967295
 8002044:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	3301      	adds	r3, #1
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	2b06      	cmp	r3, #6
 8002050:	d9dc      	bls.n	800200c <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 8002052:	e027      	b.n	80020a4 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	e01f      	b.n	800209a <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d018      	beq.n	8002094 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8002062:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <OV5640_SetLightMode+0x260>)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	885b      	ldrh	r3, [r3, #2]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f103 0018 	add.w	r0, r3, #24
 8002076:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <OV5640_SetLightMode+0x260>)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800207e:	f107 020f 	add.w	r2, r7, #15
 8002082:	2301      	movs	r3, #1
 8002084:	f000 fe9c 	bl	8002dc0 <ov5640_write_reg>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	3301      	adds	r3, #1
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2b06      	cmp	r3, #6
 800209e:	d9dc      	bls.n	800205a <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 80020a0:	e000      	b.n	80020a4 <OV5640_SetLightMode+0x244>
    }
  }
 80020a2:	bf00      	nop
  return ret;
 80020a4:	697b      	ldr	r3, [r7, #20]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	08010658 	.word	0x08010658
 80020b4:	08010674 	.word	0x08010674
 80020b8:	08010690 	.word	0x08010690
 80020bc:	080106ac 	.word	0x080106ac
 80020c0:	080106c8 	.word	0x080106c8

080020c4 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	2b1f      	cmp	r3, #31
 80020d4:	f200 81c0 	bhi.w	8002458 <OV5640_SetColorEffect+0x394>
 80020d8:	a201      	add	r2, pc, #4	; (adr r2, 80020e0 <OV5640_SetColorEffect+0x1c>)
 80020da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020de:	bf00      	nop
 80020e0:	08002161 	.word	0x08002161
 80020e4:	080021eb 	.word	0x080021eb
 80020e8:	08002459 	.word	0x08002459
 80020ec:	08002275 	.word	0x08002275
 80020f0:	08002459 	.word	0x08002459
 80020f4:	08002459 	.word	0x08002459
 80020f8:	08002459 	.word	0x08002459
 80020fc:	080022ff 	.word	0x080022ff
 8002100:	08002459 	.word	0x08002459
 8002104:	08002459 	.word	0x08002459
 8002108:	08002459 	.word	0x08002459
 800210c:	08002459 	.word	0x08002459
 8002110:	08002459 	.word	0x08002459
 8002114:	08002459 	.word	0x08002459
 8002118:	08002459 	.word	0x08002459
 800211c:	08002389 	.word	0x08002389
 8002120:	08002459 	.word	0x08002459
 8002124:	08002459 	.word	0x08002459
 8002128:	08002459 	.word	0x08002459
 800212c:	08002459 	.word	0x08002459
 8002130:	08002459 	.word	0x08002459
 8002134:	08002459 	.word	0x08002459
 8002138:	08002459 	.word	0x08002459
 800213c:	08002459 	.word	0x08002459
 8002140:	08002459 	.word	0x08002459
 8002144:	08002459 	.word	0x08002459
 8002148:	08002459 	.word	0x08002459
 800214c:	08002459 	.word	0x08002459
 8002150:	08002459 	.word	0x08002459
 8002154:	08002459 	.word	0x08002459
 8002158:	08002459 	.word	0x08002459
 800215c:	08002411 	.word	0x08002411
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 8002160:	23ff      	movs	r3, #255	; 0xff
 8002162:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f103 0018 	add.w	r0, r3, #24
 800216a:	f107 020b 	add.w	r2, r7, #11
 800216e:	2301      	movs	r3, #1
 8002170:	f245 0101 	movw	r1, #20481	; 0x5001
 8002174:	f000 fe24 	bl	8002dc0 <ov5640_write_reg>
 8002178:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10c      	bne.n	800219a <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 8002180:	2318      	movs	r3, #24
 8002182:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f103 0018 	add.w	r0, r3, #24
 800218a:	f107 020b 	add.w	r2, r7, #11
 800218e:	2301      	movs	r3, #1
 8002190:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002194:	f000 fe14 	bl	8002dc0 <ov5640_write_reg>
 8002198:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10c      	bne.n	80021ba <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 80021a0:	23a0      	movs	r3, #160	; 0xa0
 80021a2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f103 0018 	add.w	r0, r3, #24
 80021aa:	f107 020b 	add.w	r2, r7, #11
 80021ae:	2301      	movs	r3, #1
 80021b0:	f245 5183 	movw	r1, #21891	; 0x5583
 80021b4:	f000 fe04 	bl	8002dc0 <ov5640_write_reg>
 80021b8:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10c      	bne.n	80021da <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 80021c0:	2340      	movs	r3, #64	; 0x40
 80021c2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f103 0018 	add.w	r0, r3, #24
 80021ca:	f107 020b 	add.w	r2, r7, #11
 80021ce:	2301      	movs	r3, #1
 80021d0:	f245 5184 	movw	r1, #21892	; 0x5584
 80021d4:	f000 fdf4 	bl	8002dc0 <ov5640_write_reg>
 80021d8:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 815f 	beq.w	80024a0 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
 80021e6:	60fb      	str	r3, [r7, #12]
      }
      break;
 80021e8:	e15a      	b.n	80024a0 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 80021ea:	23ff      	movs	r3, #255	; 0xff
 80021ec:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f103 0018 	add.w	r0, r3, #24
 80021f4:	f107 020b 	add.w	r2, r7, #11
 80021f8:	2301      	movs	r3, #1
 80021fa:	f245 0101 	movw	r1, #20481	; 0x5001
 80021fe:	f000 fddf 	bl	8002dc0 <ov5640_write_reg>
 8002202:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10c      	bne.n	8002224 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 800220a:	2318      	movs	r3, #24
 800220c:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f103 0018 	add.w	r0, r3, #24
 8002214:	f107 020b 	add.w	r2, r7, #11
 8002218:	2301      	movs	r3, #1
 800221a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800221e:	f000 fdcf 	bl	8002dc0 <ov5640_write_reg>
 8002222:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10c      	bne.n	8002244 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f103 0018 	add.w	r0, r3, #24
 8002234:	f107 020b 	add.w	r2, r7, #11
 8002238:	2301      	movs	r3, #1
 800223a:	f245 5183 	movw	r1, #21891	; 0x5583
 800223e:	f000 fdbf 	bl	8002dc0 <ov5640_write_reg>
 8002242:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10c      	bne.n	8002264 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 800224a:	23c0      	movs	r3, #192	; 0xc0
 800224c:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f103 0018 	add.w	r0, r3, #24
 8002254:	f107 020b 	add.w	r2, r7, #11
 8002258:	2301      	movs	r3, #1
 800225a:	f245 5184 	movw	r1, #21892	; 0x5584
 800225e:	f000 fdaf 	bl	8002dc0 <ov5640_write_reg>
 8002262:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 811c 	beq.w	80024a4 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 800226c:	f04f 33ff 	mov.w	r3, #4294967295
 8002270:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002272:	e117      	b.n	80024a4 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 8002274:	23ff      	movs	r3, #255	; 0xff
 8002276:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f103 0018 	add.w	r0, r3, #24
 800227e:	f107 020b 	add.w	r2, r7, #11
 8002282:	2301      	movs	r3, #1
 8002284:	f245 0101 	movw	r1, #20481	; 0x5001
 8002288:	f000 fd9a 	bl	8002dc0 <ov5640_write_reg>
 800228c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10c      	bne.n	80022ae <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 8002294:	2318      	movs	r3, #24
 8002296:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f103 0018 	add.w	r0, r3, #24
 800229e:	f107 020b 	add.w	r2, r7, #11
 80022a2:	2301      	movs	r3, #1
 80022a4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80022a8:	f000 fd8a 	bl	8002dc0 <ov5640_write_reg>
 80022ac:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10c      	bne.n	80022ce <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 80022b4:	2360      	movs	r3, #96	; 0x60
 80022b6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f103 0018 	add.w	r0, r3, #24
 80022be:	f107 020b 	add.w	r2, r7, #11
 80022c2:	2301      	movs	r3, #1
 80022c4:	f245 5183 	movw	r1, #21891	; 0x5583
 80022c8:	f000 fd7a 	bl	8002dc0 <ov5640_write_reg>
 80022cc:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10c      	bne.n	80022ee <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 80022d4:	2360      	movs	r3, #96	; 0x60
 80022d6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f103 0018 	add.w	r0, r3, #24
 80022de:	f107 020b 	add.w	r2, r7, #11
 80022e2:	2301      	movs	r3, #1
 80022e4:	f245 5184 	movw	r1, #21892	; 0x5584
 80022e8:	f000 fd6a 	bl	8002dc0 <ov5640_write_reg>
 80022ec:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80d9 	beq.w	80024a8 <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	60fb      	str	r3, [r7, #12]
      }
      break;
 80022fc:	e0d4      	b.n	80024a8 <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 80022fe:	23ff      	movs	r3, #255	; 0xff
 8002300:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f103 0018 	add.w	r0, r3, #24
 8002308:	f107 020b 	add.w	r2, r7, #11
 800230c:	2301      	movs	r3, #1
 800230e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002312:	f000 fd55 	bl	8002dc0 <ov5640_write_reg>
 8002316:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10c      	bne.n	8002338 <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 800231e:	2318      	movs	r3, #24
 8002320:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f103 0018 	add.w	r0, r3, #24
 8002328:	f107 020b 	add.w	r2, r7, #11
 800232c:	2301      	movs	r3, #1
 800232e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002332:	f000 fd45 	bl	8002dc0 <ov5640_write_reg>
 8002336:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10c      	bne.n	8002358 <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f103 0018 	add.w	r0, r3, #24
 8002348:	f107 020b 	add.w	r2, r7, #11
 800234c:	2301      	movs	r3, #1
 800234e:	f245 5183 	movw	r1, #21891	; 0x5583
 8002352:	f000 fd35 	bl	8002dc0 <ov5640_write_reg>
 8002356:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10c      	bne.n	8002378 <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f103 0018 	add.w	r0, r3, #24
 8002368:	f107 020b 	add.w	r2, r7, #11
 800236c:	2301      	movs	r3, #1
 800236e:	f245 5184 	movw	r1, #21892	; 0x5584
 8002372:	f000 fd25 	bl	8002dc0 <ov5640_write_reg>
 8002376:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8096 	beq.w	80024ac <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8002380:	f04f 33ff 	mov.w	r3, #4294967295
 8002384:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002386:	e091      	b.n	80024ac <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 8002388:	23ff      	movs	r3, #255	; 0xff
 800238a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f103 0018 	add.w	r0, r3, #24
 8002392:	f107 020b 	add.w	r2, r7, #11
 8002396:	2301      	movs	r3, #1
 8002398:	f245 0101 	movw	r1, #20481	; 0x5001
 800239c:	f000 fd10 	bl	8002dc0 <ov5640_write_reg>
 80023a0:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10c      	bne.n	80023c2 <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 80023a8:	2318      	movs	r3, #24
 80023aa:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f103 0018 	add.w	r0, r3, #24
 80023b2:	f107 020b 	add.w	r2, r7, #11
 80023b6:	2301      	movs	r3, #1
 80023b8:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80023bc:	f000 fd00 	bl	8002dc0 <ov5640_write_reg>
 80023c0:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10c      	bne.n	80023e2 <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 80023c8:	2340      	movs	r3, #64	; 0x40
 80023ca:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f103 0018 	add.w	r0, r3, #24
 80023d2:	f107 020b 	add.w	r2, r7, #11
 80023d6:	2301      	movs	r3, #1
 80023d8:	f245 5183 	movw	r1, #21891	; 0x5583
 80023dc:	f000 fcf0 	bl	8002dc0 <ov5640_write_reg>
 80023e0:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10c      	bne.n	8002402 <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 80023e8:	23a0      	movs	r3, #160	; 0xa0
 80023ea:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f103 0018 	add.w	r0, r3, #24
 80023f2:	f107 020b 	add.w	r2, r7, #11
 80023f6:	2301      	movs	r3, #1
 80023f8:	f245 5184 	movw	r1, #21892	; 0x5584
 80023fc:	f000 fce0 	bl	8002dc0 <ov5640_write_reg>
 8002400:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d053      	beq.n	80024b0 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 8002408:	f04f 33ff 	mov.w	r3, #4294967295
 800240c:	60fb      	str	r3, [r7, #12]
      }
      break;
 800240e:	e04f      	b.n	80024b0 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 8002410:	23ff      	movs	r3, #255	; 0xff
 8002412:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f103 0018 	add.w	r0, r3, #24
 800241a:	f107 020b 	add.w	r2, r7, #11
 800241e:	2301      	movs	r3, #1
 8002420:	f245 0101 	movw	r1, #20481	; 0x5001
 8002424:	f000 fccc 	bl	8002dc0 <ov5640_write_reg>
 8002428:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10c      	bne.n	800244a <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 8002430:	2340      	movs	r3, #64	; 0x40
 8002432:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f103 0018 	add.w	r0, r3, #24
 800243a:	f107 020b 	add.w	r2, r7, #11
 800243e:	2301      	movs	r3, #1
 8002440:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002444:	f000 fcbc 	bl	8002dc0 <ov5640_write_reg>
 8002448:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d031      	beq.n	80024b4 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 8002450:	f04f 33ff 	mov.w	r3, #4294967295
 8002454:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002456:	e02d      	b.n	80024b4 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 8002458:	237f      	movs	r3, #127	; 0x7f
 800245a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f103 0018 	add.w	r0, r3, #24
 8002462:	f107 020b 	add.w	r2, r7, #11
 8002466:	2301      	movs	r3, #1
 8002468:	f245 0101 	movw	r1, #20481	; 0x5001
 800246c:	f000 fca8 	bl	8002dc0 <ov5640_write_reg>
 8002470:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10c      	bne.n	8002492 <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 8002478:	2300      	movs	r3, #0
 800247a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f103 0018 	add.w	r0, r3, #24
 8002482:	f107 020b 	add.w	r2, r7, #11
 8002486:	2301      	movs	r3, #1
 8002488:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800248c:	f000 fc98 	bl	8002dc0 <ov5640_write_reg>
 8002490:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00f      	beq.n	80024b8 <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 8002498:	f04f 33ff 	mov.w	r3, #4294967295
 800249c:	60fb      	str	r3, [r7, #12]
      }

      break;
 800249e:	e00b      	b.n	80024b8 <OV5640_SetColorEffect+0x3f4>
      break;
 80024a0:	bf00      	nop
 80024a2:	e00a      	b.n	80024ba <OV5640_SetColorEffect+0x3f6>
      break;
 80024a4:	bf00      	nop
 80024a6:	e008      	b.n	80024ba <OV5640_SetColorEffect+0x3f6>
      break;
 80024a8:	bf00      	nop
 80024aa:	e006      	b.n	80024ba <OV5640_SetColorEffect+0x3f6>
      break;
 80024ac:	bf00      	nop
 80024ae:	e004      	b.n	80024ba <OV5640_SetColorEffect+0x3f6>
      break;
 80024b0:	bf00      	nop
 80024b2:	e002      	b.n	80024ba <OV5640_SetColorEffect+0x3f6>
      break;
 80024b4:	bf00      	nop
 80024b6:	e000      	b.n	80024ba <OV5640_SetColorEffect+0x3f6>
      break;
 80024b8:	bf00      	nop
  }

  return ret;
 80024ba:	68fb      	ldr	r3, [r7, #12]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 80024ce:	4a34      	ldr	r2, [pc, #208]	; (80025a0 <OV5640_SetBrightness+0xdc>)
 80024d0:	f107 0310 	add.w	r3, r7, #16
 80024d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80024d6:	c303      	stmia	r3!, {r0, r1}
 80024d8:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80024da:	23ff      	movs	r3, #255	; 0xff
 80024dc:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f103 0018 	add.w	r0, r3, #24
 80024e4:	f107 020f 	add.w	r2, r7, #15
 80024e8:	2301      	movs	r3, #1
 80024ea:	f245 0101 	movw	r1, #20481	; 0x5001
 80024ee:	f000 fc67 	bl	8002dc0 <ov5640_write_reg>
 80024f2:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d111      	bne.n	800251e <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	3304      	adds	r3, #4
 80024fe:	3320      	adds	r3, #32
 8002500:	443b      	add	r3, r7
 8002502:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002506:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f103 0018 	add.w	r0, r3, #24
 800250e:	f107 020f 	add.w	r2, r7, #15
 8002512:	2301      	movs	r3, #1
 8002514:	f245 5187 	movw	r1, #21895	; 0x5587
 8002518:	f000 fc52 	bl	8002dc0 <ov5640_write_reg>
 800251c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10c      	bne.n	800253e <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 8002524:	2304      	movs	r3, #4
 8002526:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f103 0018 	add.w	r0, r3, #24
 800252e:	f107 020f 	add.w	r2, r7, #15
 8002532:	2301      	movs	r3, #1
 8002534:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002538:	f000 fc42 	bl	8002dc0 <ov5640_write_reg>
 800253c:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d127      	bne.n	8002594 <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	da12      	bge.n	8002570 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f103 0018 	add.w	r0, r3, #24
 8002554:	f107 020f 	add.w	r2, r7, #15
 8002558:	2301      	movs	r3, #1
 800255a:	f245 5188 	movw	r1, #21896	; 0x5588
 800255e:	f000 fc2f 	bl	8002dc0 <ov5640_write_reg>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d015      	beq.n	8002594 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8002568:	f04f 33ff 	mov.w	r3, #4294967295
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e011      	b.n	8002594 <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 8002570:	2309      	movs	r3, #9
 8002572:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f103 0018 	add.w	r0, r3, #24
 800257a:	f107 020f 	add.w	r2, r7, #15
 800257e:	2301      	movs	r3, #1
 8002580:	f245 5188 	movw	r1, #21896	; 0x5588
 8002584:	f000 fc1c 	bl	8002dc0 <ov5640_write_reg>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 800258e:	f04f 33ff 	mov.w	r3, #4294967295
 8002592:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 8002594:	69fb      	ldr	r3, [r7, #28]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3720      	adds	r7, #32
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	080101a0 	.word	0x080101a0

080025a4 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80025ae:	4a30      	ldr	r2, [pc, #192]	; (8002670 <OV5640_SetSaturation+0xcc>)
 80025b0:	f107 0310 	add.w	r3, r7, #16
 80025b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80025b6:	c303      	stmia	r3!, {r0, r1}
 80025b8:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80025ba:	23ff      	movs	r3, #255	; 0xff
 80025bc:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f103 0018 	add.w	r0, r3, #24
 80025c4:	f107 020f 	add.w	r2, r7, #15
 80025c8:	2301      	movs	r3, #1
 80025ca:	f245 0101 	movw	r1, #20481	; 0x5001
 80025ce:	f000 fbf7 	bl	8002dc0 <ov5640_write_reg>
 80025d2:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d111      	bne.n	80025fe <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	3304      	adds	r3, #4
 80025de:	3320      	adds	r3, #32
 80025e0:	443b      	add	r3, r7
 80025e2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80025e6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f103 0018 	add.w	r0, r3, #24
 80025ee:	f107 020f 	add.w	r2, r7, #15
 80025f2:	2301      	movs	r3, #1
 80025f4:	f245 5183 	movw	r1, #21891	; 0x5583
 80025f8:	f000 fbe2 	bl	8002dc0 <ov5640_write_reg>
 80025fc:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f103 0018 	add.w	r0, r3, #24
 800260a:	f107 020f 	add.w	r2, r7, #15
 800260e:	2301      	movs	r3, #1
 8002610:	f245 5184 	movw	r1, #21892	; 0x5584
 8002614:	f000 fbd4 	bl	8002dc0 <ov5640_write_reg>
 8002618:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10c      	bne.n	800263a <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 8002620:	2302      	movs	r3, #2
 8002622:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f103 0018 	add.w	r0, r3, #24
 800262a:	f107 020f 	add.w	r2, r7, #15
 800262e:	2301      	movs	r3, #1
 8002630:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002634:	f000 fbc4 	bl	8002dc0 <ov5640_write_reg>
 8002638:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10c      	bne.n	800265a <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 8002640:	2341      	movs	r3, #65	; 0x41
 8002642:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f103 0018 	add.w	r0, r3, #24
 800264a:	f107 020f 	add.w	r2, r7, #15
 800264e:	2301      	movs	r3, #1
 8002650:	f245 5188 	movw	r1, #21896	; 0x5588
 8002654:	f000 fbb4 	bl	8002dc0 <ov5640_write_reg>
 8002658:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
 8002664:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8002666:	69fb      	ldr	r3, [r7, #28]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3720      	adds	r7, #32
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	080101ac 	.word	0x080101ac

08002674 <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 800267e:	4a30      	ldr	r2, [pc, #192]	; (8002740 <OV5640_SetContrast+0xcc>)
 8002680:	f107 0310 	add.w	r3, r7, #16
 8002684:	ca07      	ldmia	r2, {r0, r1, r2}
 8002686:	c303      	stmia	r3!, {r0, r1}
 8002688:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 800268a:	23ff      	movs	r3, #255	; 0xff
 800268c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f103 0018 	add.w	r0, r3, #24
 8002694:	f107 020f 	add.w	r2, r7, #15
 8002698:	2301      	movs	r3, #1
 800269a:	f245 0101 	movw	r1, #20481	; 0x5001
 800269e:	f000 fb8f 	bl	8002dc0 <ov5640_write_reg>
 80026a2:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10c      	bne.n	80026c4 <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 80026aa:	2304      	movs	r3, #4
 80026ac:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f103 0018 	add.w	r0, r3, #24
 80026b4:	f107 020f 	add.w	r2, r7, #15
 80026b8:	2301      	movs	r3, #1
 80026ba:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80026be:	f000 fb7f 	bl	8002dc0 <ov5640_write_reg>
 80026c2:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d111      	bne.n	80026ee <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	3304      	adds	r3, #4
 80026ce:	3320      	adds	r3, #32
 80026d0:	443b      	add	r3, r7
 80026d2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80026d6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f103 0018 	add.w	r0, r3, #24
 80026de:	f107 020f 	add.w	r2, r7, #15
 80026e2:	2301      	movs	r3, #1
 80026e4:	f245 5186 	movw	r1, #21894	; 0x5586
 80026e8:	f000 fb6a 	bl	8002dc0 <ov5640_write_reg>
 80026ec:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10a      	bne.n	800270a <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f103 0018 	add.w	r0, r3, #24
 80026fa:	f107 020f 	add.w	r2, r7, #15
 80026fe:	2301      	movs	r3, #1
 8002700:	f245 5185 	movw	r1, #21893	; 0x5585
 8002704:	f000 fb5c 	bl	8002dc0 <ov5640_write_reg>
 8002708:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10c      	bne.n	800272a <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 8002710:	2341      	movs	r3, #65	; 0x41
 8002712:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f103 0018 	add.w	r0, r3, #24
 800271a:	f107 020f 	add.w	r2, r7, #15
 800271e:	2301      	movs	r3, #1
 8002720:	f245 5188 	movw	r1, #21896	; 0x5588
 8002724:	f000 fb4c 	bl	8002dc0 <ov5640_write_reg>
 8002728:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 8002730:	f04f 33ff 	mov.w	r3, #4294967295
 8002734:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8002736:	69fb      	ldr	r3, [r7, #28]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	080101b8 	.word	0x080101b8

08002744 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08e      	sub	sp, #56	; 0x38
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 800274e:	4a3c      	ldr	r2, [pc, #240]	; (8002840 <OV5640_SetHueDegree+0xfc>)
 8002750:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002754:	ca07      	ldmia	r2, {r0, r1, r2}
 8002756:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 800275a:	4a3a      	ldr	r2, [pc, #232]	; (8002844 <OV5640_SetHueDegree+0x100>)
 800275c:	f107 031c 	add.w	r3, r7, #28
 8002760:	ca07      	ldmia	r2, {r0, r1, r2}
 8002762:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8002766:	4a38      	ldr	r2, [pc, #224]	; (8002848 <OV5640_SetHueDegree+0x104>)
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	ca07      	ldmia	r2, {r0, r1, r2}
 800276e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 8002772:	23ff      	movs	r3, #255	; 0xff
 8002774:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f103 0018 	add.w	r0, r3, #24
 800277c:	f107 020f 	add.w	r2, r7, #15
 8002780:	2301      	movs	r3, #1
 8002782:	f245 0101 	movw	r1, #20481	; 0x5001
 8002786:	f000 fb1b 	bl	8002dc0 <ov5640_write_reg>
 800278a:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 800278c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10c      	bne.n	80027ac <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 8002792:	2301      	movs	r3, #1
 8002794:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f103 0018 	add.w	r0, r3, #24
 800279c:	f107 020f 	add.w	r2, r7, #15
 80027a0:	2301      	movs	r3, #1
 80027a2:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80027a6:	f000 fb0b 	bl	8002dc0 <ov5640_write_reg>
 80027aa:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 80027ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d111      	bne.n	80027d6 <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	3306      	adds	r3, #6
 80027b6:	3338      	adds	r3, #56	; 0x38
 80027b8:	443b      	add	r3, r7
 80027ba:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80027be:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f103 0018 	add.w	r0, r3, #24
 80027c6:	f107 020f 	add.w	r2, r7, #15
 80027ca:	2301      	movs	r3, #1
 80027cc:	f245 5181 	movw	r1, #21889	; 0x5581
 80027d0:	f000 faf6 	bl	8002dc0 <ov5640_write_reg>
 80027d4:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 80027d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d111      	bne.n	8002800 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	3306      	adds	r3, #6
 80027e0:	3338      	adds	r3, #56	; 0x38
 80027e2:	443b      	add	r3, r7
 80027e4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80027e8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f103 0018 	add.w	r0, r3, #24
 80027f0:	f107 020f 	add.w	r2, r7, #15
 80027f4:	2301      	movs	r3, #1
 80027f6:	f245 5182 	movw	r1, #21890	; 0x5582
 80027fa:	f000 fae1 	bl	8002dc0 <ov5640_write_reg>
 80027fe:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002802:	2b00      	cmp	r3, #0
 8002804:	d111      	bne.n	800282a <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	3306      	adds	r3, #6
 800280a:	3338      	adds	r3, #56	; 0x38
 800280c:	443b      	add	r3, r7
 800280e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002812:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f103 0018 	add.w	r0, r3, #24
 800281a:	f107 020f 	add.w	r2, r7, #15
 800281e:	2301      	movs	r3, #1
 8002820:	f245 5188 	movw	r1, #21896	; 0x5588
 8002824:	f000 facc 	bl	8002dc0 <ov5640_write_reg>
 8002828:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 800282a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 8002830:	f04f 33ff 	mov.w	r3, #4294967295
 8002834:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 8002836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002838:	4618      	mov	r0, r3
 800283a:	3738      	adds	r7, #56	; 0x38
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	080101c4 	.word	0x080101c4
 8002844:	080101d0 	.word	0x080101d0
 8002848:	080101dc 	.word	0x080101dc

0800284c <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f103 0018 	add.w	r0, r3, #24
 8002860:	f107 020b 	add.w	r2, r7, #11
 8002864:	2301      	movs	r3, #1
 8002866:	f643 0120 	movw	r1, #14368	; 0x3820
 800286a:	f000 fa92 	bl	8002d92 <ov5640_read_reg>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8002874:	f04f 33ff 	mov.w	r3, #4294967295
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	e0cb      	b.n	8002a14 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 800287c:	7afb      	ldrb	r3, [r7, #11]
 800287e:	f023 0306 	bic.w	r3, r3, #6
 8002882:	b2db      	uxtb	r3, r3
 8002884:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f103 0018 	add.w	r0, r3, #24
 800288c:	f107 020a 	add.w	r2, r7, #10
 8002890:	2301      	movs	r3, #1
 8002892:	f643 0121 	movw	r1, #14369	; 0x3821
 8002896:	f000 fa7c 	bl	8002d92 <ov5640_read_reg>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	e0b5      	b.n	8002a14 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 80028ac:	7abb      	ldrb	r3, [r7, #10]
 80028ae:	f023 0306 	bic.w	r3, r3, #6
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d056      	beq.n	800296a <OV5640_MirrorFlipConfig+0x11e>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d87f      	bhi.n	80029c2 <OV5640_MirrorFlipConfig+0x176>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d029      	beq.n	800291c <OV5640_MirrorFlipConfig+0xd0>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d179      	bne.n	80029c2 <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f103 0018 	add.w	r0, r3, #24
 80028d4:	f107 020b 	add.w	r2, r7, #11
 80028d8:	2301      	movs	r3, #1
 80028da:	f643 0120 	movw	r1, #14368	; 0x3820
 80028de:	f000 fa6f 	bl	8002dc0 <ov5640_write_reg>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 80028e8:	f04f 33ff 	mov.w	r3, #4294967295
 80028ec:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80028ee:	e08a      	b.n	8002a06 <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 80028f0:	7abb      	ldrb	r3, [r7, #10]
 80028f2:	f043 0306 	orr.w	r3, r3, #6
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f103 0018 	add.w	r0, r3, #24
 8002900:	f107 020a 	add.w	r2, r7, #10
 8002904:	2301      	movs	r3, #1
 8002906:	f643 0121 	movw	r1, #14369	; 0x3821
 800290a:	f000 fa59 	bl	8002dc0 <ov5640_write_reg>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d078      	beq.n	8002a06 <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8002914:	f04f 33ff 	mov.w	r3, #4294967295
 8002918:	60fb      	str	r3, [r7, #12]
          break;
 800291a:	e074      	b.n	8002a06 <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 800291c:	7afb      	ldrb	r3, [r7, #11]
 800291e:	f043 0306 	orr.w	r3, r3, #6
 8002922:	b2db      	uxtb	r3, r3
 8002924:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f103 0018 	add.w	r0, r3, #24
 800292c:	f107 020b 	add.w	r2, r7, #11
 8002930:	2301      	movs	r3, #1
 8002932:	f643 0120 	movw	r1, #14368	; 0x3820
 8002936:	f000 fa43 	bl	8002dc0 <ov5640_write_reg>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8002940:	f04f 33ff 	mov.w	r3, #4294967295
 8002944:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002946:	e060      	b.n	8002a0a <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f103 0018 	add.w	r0, r3, #24
 800294e:	f107 020a 	add.w	r2, r7, #10
 8002952:	2301      	movs	r3, #1
 8002954:	f643 0121 	movw	r1, #14369	; 0x3821
 8002958:	f000 fa32 	bl	8002dc0 <ov5640_write_reg>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d053      	beq.n	8002a0a <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8002962:	f04f 33ff 	mov.w	r3, #4294967295
 8002966:	60fb      	str	r3, [r7, #12]
          break;
 8002968:	e04f      	b.n	8002a0a <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 800296a:	7afb      	ldrb	r3, [r7, #11]
 800296c:	f043 0306 	orr.w	r3, r3, #6
 8002970:	b2db      	uxtb	r3, r3
 8002972:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f103 0018 	add.w	r0, r3, #24
 800297a:	f107 020b 	add.w	r2, r7, #11
 800297e:	2301      	movs	r3, #1
 8002980:	f643 0120 	movw	r1, #14368	; 0x3820
 8002984:	f000 fa1c 	bl	8002dc0 <ov5640_write_reg>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 800298e:	f04f 33ff 	mov.w	r3, #4294967295
 8002992:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002994:	e03b      	b.n	8002a0e <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 8002996:	7abb      	ldrb	r3, [r7, #10]
 8002998:	f043 0306 	orr.w	r3, r3, #6
 800299c:	b2db      	uxtb	r3, r3
 800299e:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f103 0018 	add.w	r0, r3, #24
 80029a6:	f107 020a 	add.w	r2, r7, #10
 80029aa:	2301      	movs	r3, #1
 80029ac:	f643 0121 	movw	r1, #14369	; 0x3821
 80029b0:	f000 fa06 	bl	8002dc0 <ov5640_write_reg>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d029      	beq.n	8002a0e <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295
 80029be:	60fb      	str	r3, [r7, #12]
          break;
 80029c0:	e025      	b.n	8002a0e <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f103 0018 	add.w	r0, r3, #24
 80029c8:	f107 020b 	add.w	r2, r7, #11
 80029cc:	2301      	movs	r3, #1
 80029ce:	f643 0120 	movw	r1, #14368	; 0x3820
 80029d2:	f000 f9f5 	bl	8002dc0 <ov5640_write_reg>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295
 80029e0:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80029e2:	e016      	b.n	8002a12 <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f103 0018 	add.w	r0, r3, #24
 80029ea:	f107 020a 	add.w	r2, r7, #10
 80029ee:	2301      	movs	r3, #1
 80029f0:	f643 0121 	movw	r1, #14369	; 0x3821
 80029f4:	f000 f9e4 	bl	8002dc0 <ov5640_write_reg>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 80029fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002a02:	60fb      	str	r3, [r7, #12]
          break;
 8002a04:	e005      	b.n	8002a12 <OV5640_MirrorFlipConfig+0x1c6>
          break;
 8002a06:	bf00      	nop
 8002a08:	e004      	b.n	8002a14 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002a0a:	bf00      	nop
 8002a0c:	e002      	b.n	8002a14 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002a0e:	bf00      	nop
 8002a10:	e000      	b.n	8002a14 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002a12:	bf00      	nop
      }
    }
  }

  return ret;
 8002a14:	68fb      	ldr	r3, [r7, #12]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8002a2c:	f107 030c 	add.w	r3, r7, #12
 8002a30:	4619      	mov	r1, r3
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff f8a2 	bl	8001b7c <OV5640_GetResolution>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	e04e      	b.n	8002ae4 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b44      	cmp	r3, #68	; 0x44
 8002a4e:	d112      	bne.n	8002a76 <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 8002a50:	2310      	movs	r3, #16
 8002a52:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f103 0018 	add.w	r0, r3, #24
 8002a5a:	f107 020b 	add.w	r2, r7, #11
 8002a5e:	2301      	movs	r3, #1
 8002a60:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002a64:	f000 f9ac 	bl	8002dc0 <ov5640_write_reg>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d03a      	beq.n	8002ae4 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	e036      	b.n	8002ae4 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d802      	bhi.n	8002a82 <OV5640_ZoomConfig+0x64>
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d103      	bne.n	8002a88 <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8002a80:	e00a      	b.n	8002a98 <OV5640_ZoomConfig+0x7a>
      switch (res)
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d004      	beq.n	8002a90 <OV5640_ZoomConfig+0x72>
          break;
 8002a86:	e007      	b.n	8002a98 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	085b      	lsrs	r3, r3, #1
 8002a8c:	613b      	str	r3, [r7, #16]
          break;
 8002a8e:	e003      	b.n	8002a98 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	089b      	lsrs	r3, r3, #2
 8002a94:	613b      	str	r3, [r7, #16]
          break;
 8002a96:	bf00      	nop
      }

      tmp = 0x00;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f103 0018 	add.w	r0, r3, #24
 8002aa2:	f107 020b 	add.w	r2, r7, #11
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002aac:	f000 f988 	bl	8002dc0 <ov5640_write_reg>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 8002ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	e012      	b.n	8002ae4 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f103 0018 	add.w	r0, r3, #24
 8002aca:	f107 020b 	add.w	r2, r7, #11
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f245 6101 	movw	r1, #22017	; 0x5601
 8002ad4:	f000 f974 	bl	8002dc0 <ov5640_write_reg>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002ae4:	697b      	ldr	r3, [r7, #20]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	f040 80ce 	bne.w	8002ca0 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f103 0018 	add.w	r0, r3, #24
 8002b0a:	f107 020b 	add.w	r2, r7, #11
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f243 0138 	movw	r1, #12344	; 0x3038
 8002b14:	f000 f954 	bl	8002dc0 <ov5640_write_reg>
 8002b18:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10a      	bne.n	8002b36 <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f103 0018 	add.w	r0, r3, #24
 8002b26:	f107 020b 	add.w	r2, r7, #11
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f243 0139 	movw	r1, #12345	; 0x3039
 8002b30:	f000 f946 	bl	8002dc0 <ov5640_write_reg>
 8002b34:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10c      	bne.n	8002b56 <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 8002b3c:	237c      	movs	r3, #124	; 0x7c
 8002b3e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f103 0018 	add.w	r0, r3, #24
 8002b46:	f107 020b 	add.w	r2, r7, #11
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002b50:	f000 f936 	bl	8002dc0 <ov5640_write_reg>
 8002b54:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10c      	bne.n	8002b76 <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f103 0018 	add.w	r0, r3, #24
 8002b66:	f107 020b 	add.w	r2, r7, #11
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f643 2108 	movw	r1, #14856	; 0x3a08
 8002b70:	f000 f926 	bl	8002dc0 <ov5640_write_reg>
 8002b74:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10c      	bne.n	8002b96 <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 8002b7c:	2327      	movs	r3, #39	; 0x27
 8002b7e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f103 0018 	add.w	r0, r3, #24
 8002b86:	f107 020b 	add.w	r2, r7, #11
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f643 2109 	movw	r1, #14857	; 0x3a09
 8002b90:	f000 f916 	bl	8002dc0 <ov5640_write_reg>
 8002b94:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10c      	bne.n	8002bb6 <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f103 0018 	add.w	r0, r3, #24
 8002ba6:	f107 020b 	add.w	r2, r7, #11
 8002baa:	2301      	movs	r3, #1
 8002bac:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8002bb0:	f000 f906 	bl	8002dc0 <ov5640_write_reg>
 8002bb4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10c      	bne.n	8002bd6 <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 8002bbc:	23f6      	movs	r3, #246	; 0xf6
 8002bbe:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f103 0018 	add.w	r0, r3, #24
 8002bc6:	f107 020b 	add.w	r2, r7, #11
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8002bd0:	f000 f8f6 	bl	8002dc0 <ov5640_write_reg>
 8002bd4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10c      	bne.n	8002bf6 <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 8002bdc:	2304      	movs	r3, #4
 8002bde:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f103 0018 	add.w	r0, r3, #24
 8002be6:	f107 020b 	add.w	r2, r7, #11
 8002bea:	2301      	movs	r3, #1
 8002bec:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8002bf0:	f000 f8e6 	bl	8002dc0 <ov5640_write_reg>
 8002bf4:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f103 0018 	add.w	r0, r3, #24
 8002c02:	f107 020b 	add.w	r2, r7, #11
 8002c06:	2301      	movs	r3, #1
 8002c08:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8002c0c:	f000 f8d8 	bl	8002dc0 <ov5640_write_reg>
 8002c10:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10c      	bne.n	8002c32 <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 8002c18:	230b      	movs	r3, #11
 8002c1a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f103 0018 	add.w	r0, r3, #24
 8002c22:	f107 020b 	add.w	r2, r7, #11
 8002c26:	2301      	movs	r3, #1
 8002c28:	f643 2102 	movw	r1, #14850	; 0x3a02
 8002c2c:	f000 f8c8 	bl	8002dc0 <ov5640_write_reg>
 8002c30:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10c      	bne.n	8002c52 <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 8002c38:	2388      	movs	r3, #136	; 0x88
 8002c3a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f103 0018 	add.w	r0, r3, #24
 8002c42:	f107 020b 	add.w	r2, r7, #11
 8002c46:	2301      	movs	r3, #1
 8002c48:	f643 2103 	movw	r1, #14851	; 0x3a03
 8002c4c:	f000 f8b8 	bl	8002dc0 <ov5640_write_reg>
 8002c50:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10c      	bne.n	8002c72 <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 8002c58:	230b      	movs	r3, #11
 8002c5a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f103 0018 	add.w	r0, r3, #24
 8002c62:	f107 020b 	add.w	r2, r7, #11
 8002c66:	2301      	movs	r3, #1
 8002c68:	f643 2114 	movw	r1, #14868	; 0x3a14
 8002c6c:	f000 f8a8 	bl	8002dc0 <ov5640_write_reg>
 8002c70:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10c      	bne.n	8002c92 <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 8002c78:	2388      	movs	r3, #136	; 0x88
 8002c7a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f103 0018 	add.w	r0, r3, #24
 8002c82:	f107 020b 	add.w	r2, r7, #11
 8002c86:	2301      	movs	r3, #1
 8002c88:	f643 2115 	movw	r1, #14869	; 0x3a15
 8002c8c:	f000 f898 	bl	8002dc0 <ov5640_write_reg>
 8002c90:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d02b      	beq.n	8002cf0 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	e027      	b.n	8002cf0 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f103 0018 	add.w	r0, r3, #24
 8002ca6:	f107 020b 	add.w	r2, r7, #11
 8002caa:	2301      	movs	r3, #1
 8002cac:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002cb0:	f000 f86f 	bl	8002d92 <ov5640_read_reg>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 8002cba:	f04f 33ff 	mov.w	r3, #4294967295
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	e016      	b.n	8002cf0 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 8002cc6:	7afb      	ldrb	r3, [r7, #11]
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f103 0018 	add.w	r0, r3, #24
 8002cd6:	f107 020b 	add.w	r2, r7, #11
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002ce0:	f000 f86e 	bl	8002dc0 <ov5640_write_reg>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
 8002cee:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	4798      	blx	r3
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8002d0e:	bf00      	nop
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	4798      	blx	r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	461a      	mov	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d8f5      	bhi.n	8002d10 <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d2e:	b590      	push	{r4, r7, lr}
 8002d30:	b087      	sub	sp, #28
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	817b      	strh	r3, [r7, #10]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	691c      	ldr	r4, [r3, #16]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	8918      	ldrh	r0, [r3, #8]
 8002d4e:	893b      	ldrh	r3, [r7, #8]
 8002d50:	8979      	ldrh	r1, [r7, #10]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	47a0      	blx	r4
 8002d56:	4603      	mov	r3, r0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	371c      	adds	r7, #28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd90      	pop	{r4, r7, pc}

08002d60 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	817b      	strh	r3, [r7, #10]
 8002d70:	4613      	mov	r3, r2
 8002d72:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	68dc      	ldr	r4, [r3, #12]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	8918      	ldrh	r0, [r3, #8]
 8002d80:	893b      	ldrh	r3, [r7, #8]
 8002d82:	8979      	ldrh	r1, [r7, #10]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	47a0      	blx	r4
 8002d88:	4603      	mov	r3, r0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd90      	pop	{r4, r7, pc}

08002d92 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8002d92:	b590      	push	{r4, r7, lr}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	460b      	mov	r3, r1
 8002da0:	817b      	strh	r3, [r7, #10]
 8002da2:	4613      	mov	r3, r2
 8002da4:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	685c      	ldr	r4, [r3, #4]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6898      	ldr	r0, [r3, #8]
 8002dae:	893b      	ldrh	r3, [r7, #8]
 8002db0:	8979      	ldrh	r1, [r7, #10]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	47a0      	blx	r4
 8002db6:	4603      	mov	r3, r0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd90      	pop	{r4, r7, pc}

08002dc0 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	460b      	mov	r3, r1
 8002dce:	817b      	strh	r3, [r7, #10]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681c      	ldr	r4, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6898      	ldr	r0, [r3, #8]
 8002ddc:	893b      	ldrh	r3, [r7, #8]
 8002dde:	8979      	ldrh	r1, [r7, #10]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	47a0      	blx	r4
 8002de4:	4603      	mov	r3, r0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd90      	pop	{r4, r7, pc}
	...

08002df0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002df8:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <RetargetInit+0x28>)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002dfe:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <RetargetInit+0x2c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6898      	ldr	r0, [r3, #8]
 8002e04:	2300      	movs	r3, #0
 8002e06:	2202      	movs	r2, #2
 8002e08:	2100      	movs	r1, #0
 8002e0a:	f00c f957 	bl	800f0bc <setvbuf>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	240df4b0 	.word	0x240df4b0
 8002e1c:	24000054 	.word	0x24000054

08002e20 <_isatty>:

int _isatty(int fd) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	db04      	blt.n	8002e38 <_isatty+0x18>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	dc01      	bgt.n	8002e38 <_isatty+0x18>
    return 1;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e005      	b.n	8002e44 <_isatty+0x24>

  errno = EBADF;
 8002e38:	f00c f8f6 	bl	800f028 <__errno>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2209      	movs	r2, #9
 8002e40:	601a      	str	r2, [r3, #0]
  return 0;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_write>:

int _write(int fd, char* ptr, int len) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d002      	beq.n	8002e64 <_write+0x18>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d111      	bne.n	8002e88 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002e64:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <_write+0x54>)
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e70:	68b9      	ldr	r1, [r7, #8]
 8002e72:	f00a f9c1 	bl	800d1f8 <HAL_UART_Transmit>
 8002e76:	4603      	mov	r3, r0
 8002e78:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <_write+0x38>
      return len;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	e008      	b.n	8002e96 <_write+0x4a>
    else
      return EIO;
 8002e84:	2305      	movs	r3, #5
 8002e86:	e006      	b.n	8002e96 <_write+0x4a>
  }
  errno = EBADF;
 8002e88:	f00c f8ce 	bl	800f028 <__errno>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2209      	movs	r2, #9
 8002e90:	601a      	str	r2, [r3, #0]
  return -1;
 8002e92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	240df4b0 	.word	0x240df4b0

08002ea4 <_close>:

int _close(int fd) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	db04      	blt.n	8002ebc <_close+0x18>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	dc01      	bgt.n	8002ebc <_close+0x18>
    return 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e006      	b.n	8002eca <_close+0x26>

  errno = EBADF;
 8002ebc:	f00c f8b4 	bl	800f028 <__errno>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2209      	movs	r2, #9
 8002ec4:	601a      	str	r2, [r3, #0]
  return -1;
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <_read>:

int _read(int fd, char* ptr, int len) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d110      	bne.n	8002f08 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <_read+0x4c>)
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	f04f 33ff 	mov.w	r3, #4294967295
 8002eee:	2201      	movs	r2, #1
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	f00a fa0f 	bl	800d314 <HAL_UART_Receive>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <_read+0x30>
      return 1;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e008      	b.n	8002f16 <_read+0x42>
    else
      return EIO;
 8002f04:	2305      	movs	r3, #5
 8002f06:	e006      	b.n	8002f16 <_read+0x42>
  }
  errno = EBADF;
 8002f08:	f00c f88e 	bl	800f028 <__errno>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2209      	movs	r2, #9
 8002f10:	601a      	str	r2, [r3, #0]
  return -1;
 8002f12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	240df4b0 	.word	0x240df4b0

08002f24 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	db08      	blt.n	8002f46 <_fstat+0x22>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	dc05      	bgt.n	8002f46 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f40:	605a      	str	r2, [r3, #4]
    return 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	e005      	b.n	8002f52 <_fstat+0x2e>
  }

  errno = EBADF;
 8002f46:	f00c f86f 	bl	800f028 <__errno>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2209      	movs	r2, #9
 8002f4e:	601a      	str	r2, [r3, #0]
  return 0;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <MX_RTC_Init+0x4c>)
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <MX_RTC_Init+0x50>)
 8002f64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <MX_RTC_Init+0x4c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <MX_RTC_Init+0x4c>)
 8002f6e:	227f      	movs	r2, #127	; 0x7f
 8002f70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <MX_RTC_Init+0x4c>)
 8002f74:	22ff      	movs	r2, #255	; 0xff
 8002f76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <MX_RTC_Init+0x4c>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002f7e:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <MX_RTC_Init+0x4c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <MX_RTC_Init+0x4c>)
 8002f86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f8a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <MX_RTC_Init+0x4c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f92:	4805      	ldr	r0, [pc, #20]	; (8002fa8 <MX_RTC_Init+0x4c>)
 8002f94:	f009 ffc2 	bl	800cf1c <HAL_RTC_Init>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002f9e:	f7fe fa7f 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	240df4b4 	.word	0x240df4b4
 8002fac:	58004000 	.word	0x58004000

08002fb0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b0b2      	sub	sp, #200	; 0xc8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fb8:	f107 0308 	add.w	r3, r7, #8
 8002fbc:	22c0      	movs	r2, #192	; 0xc0
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f00c f85b 	bl	800f07c <memset>
  if(rtcHandle->Instance==RTC)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a10      	ldr	r2, [pc, #64]	; (800300c <HAL_RTC_MspInit+0x5c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d119      	bne.n	8003004 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002fd0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002fdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fe0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fe4:	f107 0308 	add.w	r3, r7, #8
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f008 f9b7 	bl	800b35c <HAL_RCCEx_PeriphCLKConfig>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002ff4:	f7fe fa54 	bl	80014a0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RTC_MspInit+0x60>)
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <HAL_RTC_MspInit+0x60>)
 8002ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003002:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003004:	bf00      	nop
 8003006:	37c8      	adds	r7, #200	; 0xc8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	58004000 	.word	0x58004000
 8003010:	58024400 	.word	0x58024400

08003014 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800301a:	2300      	movs	r3, #0
 800301c:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800301e:	4b16      	ldr	r3, [pc, #88]	; (8003078 <BSP_I2C4_Init+0x64>)
 8003020:	4a16      	ldr	r2, [pc, #88]	; (800307c <BSP_I2C4_Init+0x68>)
 8003022:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8003024:	4b16      	ldr	r3, [pc, #88]	; (8003080 <BSP_I2C4_Init+0x6c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d11f      	bne.n	800306c <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800302c:	4b14      	ldr	r3, [pc, #80]	; (8003080 <BSP_I2C4_Init+0x6c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	4a13      	ldr	r2, [pc, #76]	; (8003080 <BSP_I2C4_Init+0x6c>)
 8003034:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8003036:	4810      	ldr	r0, [pc, #64]	; (8003078 <BSP_I2C4_Init+0x64>)
 8003038:	f006 fa2a 	bl	8009490 <HAL_I2C_GetState>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d114      	bne.n	800306c <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8003042:	480d      	ldr	r0, [pc, #52]	; (8003078 <BSP_I2C4_Init+0x64>)
 8003044:	f000 fb60 	bl	8003708 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8003048:	f008 f972 	bl	800b330 <HAL_RCC_GetPCLK2Freq>
 800304c:	4603      	mov	r3, r0
 800304e:	490d      	ldr	r1, [pc, #52]	; (8003084 <BSP_I2C4_Init+0x70>)
 8003050:	4618      	mov	r0, r3
 8003052:	f000 f8e3 	bl	800321c <I2C_GetTiming>
 8003056:	4603      	mov	r3, r0
 8003058:	4619      	mov	r1, r3
 800305a:	4807      	ldr	r0, [pc, #28]	; (8003078 <BSP_I2C4_Init+0x64>)
 800305c:	f000 f838 	bl	80030d0 <MX_I2C4_Init>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003066:	f06f 0307 	mvn.w	r3, #7
 800306a:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800306c:	687b      	ldr	r3, [r7, #4]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	240dfee4 	.word	0x240dfee4
 800307c:	58001c00 	.word	0x58001c00
 8003080:	240df4dc 	.word	0x240df4dc
 8003084:	000186a0 	.word	0x000186a0

08003088 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800308e:	2300      	movs	r3, #0
 8003090:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8003092:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <BSP_I2C4_DeInit+0x40>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3b01      	subs	r3, #1
 8003098:	4a0b      	ldr	r2, [pc, #44]	; (80030c8 <BSP_I2C4_DeInit+0x40>)
 800309a:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800309c:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <BSP_I2C4_DeInit+0x40>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10b      	bne.n	80030bc <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 80030a4:	4809      	ldr	r0, [pc, #36]	; (80030cc <BSP_I2C4_DeInit+0x44>)
 80030a6:	f000 fb9b 	bl	80037e0 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80030aa:	4808      	ldr	r0, [pc, #32]	; (80030cc <BSP_I2C4_DeInit+0x44>)
 80030ac:	f005 ff7e 	bl	8008fac <HAL_I2C_DeInit>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80030b6:	f06f 0307 	mvn.w	r3, #7
 80030ba:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80030bc:	687b      	ldr	r3, [r7, #4]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	240df4dc 	.word	0x240df4dc
 80030cc:	240dfee4 	.word	0x240dfee4

080030d0 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f005 febc 	bl	8008e8c <HAL_I2C_Init>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
 800311e:	e014      	b.n	800314a <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8003120:	2300      	movs	r3, #0
 8003122:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f006 fc84 	bl	8009a34 <HAL_I2CEx_ConfigAnalogFilter>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
 8003136:	e008      	b.n	800314a <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003138:	2100      	movs	r1, #0
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f006 fcc5 	bl	8009aca <HAL_I2CEx_ConfigDigitalFilter>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800314a:	7bfb      	ldrb	r3, [r7, #15]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af02      	add	r7, sp, #8
 800315a:	60ba      	str	r2, [r7, #8]
 800315c:	461a      	mov	r2, r3
 800315e:	4603      	mov	r3, r0
 8003160:	81fb      	strh	r3, [r7, #14]
 8003162:	460b      	mov	r3, r1
 8003164:	81bb      	strh	r3, [r7, #12]
 8003166:	4613      	mov	r3, r2
 8003168:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 800316a:	89b9      	ldrh	r1, [r7, #12]
 800316c:	89f8      	ldrh	r0, [r7, #14]
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2202      	movs	r2, #2
 8003176:	f000 fb57 	bl	8003828 <I2C4_WriteReg>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d102      	bne.n	8003186 <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	e00c      	b.n	80031a0 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003186:	4809      	ldr	r0, [pc, #36]	; (80031ac <BSP_I2C4_WriteReg16+0x58>)
 8003188:	f006 f990 	bl	80094ac <HAL_I2C_GetError>
 800318c:	4603      	mov	r3, r0
 800318e:	2b04      	cmp	r3, #4
 8003190:	d103      	bne.n	800319a <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003192:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	e002      	b.n	80031a0 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800319a:	f06f 0303 	mvn.w	r3, #3
 800319e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80031a0:	697b      	ldr	r3, [r7, #20]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	240dfee4 	.word	0x240dfee4

080031b0 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	60ba      	str	r2, [r7, #8]
 80031b8:	461a      	mov	r2, r3
 80031ba:	4603      	mov	r3, r0
 80031bc:	81fb      	strh	r3, [r7, #14]
 80031be:	460b      	mov	r3, r1
 80031c0:	81bb      	strh	r3, [r7, #12]
 80031c2:	4613      	mov	r3, r2
 80031c4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80031c6:	89b9      	ldrh	r1, [r7, #12]
 80031c8:	89f8      	ldrh	r0, [r7, #14]
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2202      	movs	r2, #2
 80031d2:	f000 fb4f 	bl	8003874 <I2C4_ReadReg>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	e00c      	b.n	80031fc <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80031e2:	4809      	ldr	r0, [pc, #36]	; (8003208 <BSP_I2C4_ReadReg16+0x58>)
 80031e4:	f006 f962 	bl	80094ac <HAL_I2C_GetError>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d103      	bne.n	80031f6 <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80031ee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	e002      	b.n	80031fc <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80031f6:	f06f 0303 	mvn.w	r3, #3
 80031fa:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80031fc:	697b      	ldr	r3, [r7, #20]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	240dfee4 	.word	0x240dfee4

0800320c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8003210:	f000 ffd4 	bl	80041bc <HAL_GetTick>
 8003214:	4603      	mov	r3, r0
}
 8003216:	4618      	mov	r0, r3
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d06b      	beq.n	8003308 <I2C_GetTiming+0xec>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d068      	beq.n	8003308 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003236:	2300      	movs	r3, #0
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	e060      	b.n	80032fe <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800323c:	4a35      	ldr	r2, [pc, #212]	; (8003314 <I2C_GetTiming+0xf8>)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	212c      	movs	r1, #44	; 0x2c
 8003242:	fb01 f303 	mul.w	r3, r1, r3
 8003246:	4413      	add	r3, r2
 8003248:	3304      	adds	r3, #4
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d352      	bcc.n	80032f8 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8003252:	4a30      	ldr	r2, [pc, #192]	; (8003314 <I2C_GetTiming+0xf8>)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	212c      	movs	r1, #44	; 0x2c
 8003258:	fb01 f303 	mul.w	r3, r1, r3
 800325c:	4413      	add	r3, r2
 800325e:	3308      	adds	r3, #8
 8003260:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d847      	bhi.n	80032f8 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8003268:	6939      	ldr	r1, [r7, #16]
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f856 	bl	800331c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8003270:	6939      	ldr	r1, [r7, #16]
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f940 	bl	80034f8 <I2C_Compute_SCLL_SCLH>
 8003278:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b7f      	cmp	r3, #127	; 0x7f
 800327e:	d842      	bhi.n	8003306 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003280:	4925      	ldr	r1, [pc, #148]	; (8003318 <I2C_GetTiming+0xfc>)
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003292:	4821      	ldr	r0, [pc, #132]	; (8003318 <I2C_GetTiming+0xfc>)
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4403      	add	r3, r0
 80032a0:	3304      	adds	r3, #4
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	051b      	lsls	r3, r3, #20
 80032a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80032aa:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80032ac:	481a      	ldr	r0, [pc, #104]	; (8003318 <I2C_GetTiming+0xfc>)
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4403      	add	r3, r0
 80032ba:	3308      	adds	r3, #8
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	041b      	lsls	r3, r3, #16
 80032c0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80032c4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80032c6:	4814      	ldr	r0, [pc, #80]	; (8003318 <I2C_GetTiming+0xfc>)
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4403      	add	r3, r0
 80032d4:	330c      	adds	r3, #12
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80032dc:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80032de:	480e      	ldr	r0, [pc, #56]	; (8003318 <I2C_GetTiming+0xfc>)
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4403      	add	r3, r0
 80032ec:	3310      	adds	r3, #16
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80032f2:	430b      	orrs	r3, r1
 80032f4:	617b      	str	r3, [r7, #20]
        }
        break;
 80032f6:	e006      	b.n	8003306 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	3301      	adds	r3, #1
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b02      	cmp	r3, #2
 8003302:	d99b      	bls.n	800323c <I2C_GetTiming+0x20>
 8003304:	e000      	b.n	8003308 <I2C_GetTiming+0xec>
        break;
 8003306:	bf00      	nop
      }
    }
  }

  return ret;
 8003308:	697b      	ldr	r3, [r7, #20]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	080106e4 	.word	0x080106e4
 8003318:	240df4e0 	.word	0x240df4e0

0800331c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800331c:	b480      	push	{r7}
 800331e:	b08f      	sub	sp, #60	; 0x3c
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8003326:	2310      	movs	r3, #16
 8003328:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	085a      	lsrs	r2, r3, #1
 800332e:	4b6e      	ldr	r3, [pc, #440]	; (80034e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8003330:	4413      	add	r3, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	fbb3 f3f2 	udiv	r3, r3, r2
 8003338:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800333a:	2332      	movs	r3, #50	; 0x32
 800333c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800333e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003342:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003344:	4a69      	ldr	r2, [pc, #420]	; (80034ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	212c      	movs	r1, #44	; 0x2c
 800334a:	fb01 f303 	mul.w	r3, r1, r3
 800334e:	4413      	add	r3, r2
 8003350:	3324      	adds	r3, #36	; 0x24
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	4a65      	ldr	r2, [pc, #404]	; (80034ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	212c      	movs	r1, #44	; 0x2c
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	4413      	add	r3, r2
 8003362:	330c      	adds	r3, #12
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003368:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800336a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800336c:	495f      	ldr	r1, [pc, #380]	; (80034ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	202c      	movs	r0, #44	; 0x2c
 8003372:	fb00 f303 	mul.w	r3, r0, r3
 8003376:	440b      	add	r3, r1
 8003378:	3328      	adds	r3, #40	; 0x28
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3303      	adds	r3, #3
 800337e:	69f9      	ldr	r1, [r7, #28]
 8003380:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003388:	4a58      	ldr	r2, [pc, #352]	; (80034ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	212c      	movs	r1, #44	; 0x2c
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	4413      	add	r3, r2
 8003394:	3310      	adds	r3, #16
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	4a54      	ldr	r2, [pc, #336]	; (80034ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	212c      	movs	r1, #44	; 0x2c
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	4413      	add	r3, r2
 80033a6:	3320      	adds	r3, #32
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80033ac:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80033ae:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80033b0:	494e      	ldr	r1, [pc, #312]	; (80034ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	202c      	movs	r0, #44	; 0x2c
 80033b6:	fb00 f303 	mul.w	r3, r0, r3
 80033ba:	440b      	add	r3, r1
 80033bc:	3328      	adds	r3, #40	; 0x28
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3304      	adds	r3, #4
 80033c2:	69f9      	ldr	r1, [r7, #28]
 80033c4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80033cc:	4a47      	ldr	r2, [pc, #284]	; (80034ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	212c      	movs	r1, #44	; 0x2c
 80033d2:	fb01 f303 	mul.w	r3, r1, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	3320      	adds	r3, #32
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	4a43      	ldr	r2, [pc, #268]	; (80034ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3314      	adds	r3, #20
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4403      	add	r3, r0
 80033f0:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	dc01      	bgt.n	80033fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	dc01      	bgt.n	8003406 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8003402:	2300      	movs	r3, #0
 8003404:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003406:	2300      	movs	r3, #0
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28
 800340a:	e062      	b.n	80034d2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800340c:	2300      	movs	r3, #0
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
 8003410:	e059      	b.n	80034c6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	3301      	adds	r3, #1
 8003416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003418:	3201      	adds	r2, #1
 800341a:	fb03 f202 	mul.w	r2, r3, r2
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	fb02 f303 	mul.w	r3, r2, r3
 8003424:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	429a      	cmp	r2, r3
 800342c:	d348      	bcc.n	80034c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800342e:	2300      	movs	r3, #0
 8003430:	623b      	str	r3, [r7, #32]
 8003432:	e042      	b.n	80034ba <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8003434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003436:	3301      	adds	r3, #1
 8003438:	6a3a      	ldr	r2, [r7, #32]
 800343a:	fb03 f202 	mul.w	r2, r3, r2
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	fb02 f303 	mul.w	r3, r2, r3
 8003444:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	429a      	cmp	r2, r3
 800344c:	d332      	bcc.n	80034b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	429a      	cmp	r2, r3
 8003454:	d82e      	bhi.n	80034b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8003456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345a:	429a      	cmp	r2, r3
 800345c:	d02a      	beq.n	80034b4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800345e:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4924      	ldr	r1, [pc, #144]	; (80034f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003470:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8003472:	4b1f      	ldr	r3, [pc, #124]	; (80034f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	491f      	ldr	r1, [pc, #124]	; (80034f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3304      	adds	r3, #4
 8003484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003486:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4919      	ldr	r1, [pc, #100]	; (80034f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3308      	adds	r3, #8
 800349a:	6a3a      	ldr	r2, [r7, #32]
 800349c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800349e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80034a2:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3301      	adds	r3, #1
 80034a8:	4a11      	ldr	r2, [pc, #68]	; (80034f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80034aa:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80034ac:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b7f      	cmp	r3, #127	; 0x7f
 80034b2:	d812      	bhi.n	80034da <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	3301      	adds	r3, #1
 80034b8:	623b      	str	r3, [r7, #32]
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	2b0f      	cmp	r3, #15
 80034be:	d9b9      	bls.n	8003434 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	3301      	adds	r3, #1
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	2b0f      	cmp	r3, #15
 80034ca:	d9a2      	bls.n	8003412 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80034cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ce:	3301      	adds	r3, #1
 80034d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d4:	2b0f      	cmp	r3, #15
 80034d6:	d999      	bls.n	800340c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80034d8:	e000      	b.n	80034dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80034da:	bf00      	nop
          }
        }
      }
    }
  }
}
 80034dc:	373c      	adds	r7, #60	; 0x3c
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	3b9aca00 	.word	0x3b9aca00
 80034ec:	080106e4 	.word	0x080106e4
 80034f0:	240dfee0 	.word	0x240dfee0
 80034f4:	240df4e0 	.word	0x240df4e0

080034f8 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b093      	sub	sp, #76	; 0x4c
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8003502:	f04f 33ff 	mov.w	r3, #4294967295
 8003506:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	085a      	lsrs	r2, r3, #1
 800350c:	4b7a      	ldr	r3, [pc, #488]	; (80036f8 <I2C_Compute_SCLL_SCLH+0x200>)
 800350e:	4413      	add	r3, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	fbb3 f3f2 	udiv	r3, r3, r2
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003518:	4a78      	ldr	r2, [pc, #480]	; (80036fc <I2C_Compute_SCLL_SCLH+0x204>)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	212c      	movs	r1, #44	; 0x2c
 800351e:	fb01 f303 	mul.w	r3, r1, r3
 8003522:	4413      	add	r3, r2
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	085a      	lsrs	r2, r3, #1
 8003528:	4b73      	ldr	r3, [pc, #460]	; (80036f8 <I2C_Compute_SCLL_SCLH+0x200>)
 800352a:	4413      	add	r3, r2
 800352c:	4973      	ldr	r1, [pc, #460]	; (80036fc <I2C_Compute_SCLL_SCLH+0x204>)
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	202c      	movs	r0, #44	; 0x2c
 8003532:	fb00 f202 	mul.w	r2, r0, r2
 8003536:	440a      	add	r2, r1
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	fbb3 f3f2 	udiv	r3, r3, r2
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003540:	2332      	movs	r3, #50	; 0x32
 8003542:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8003544:	4a6d      	ldr	r2, [pc, #436]	; (80036fc <I2C_Compute_SCLL_SCLH+0x204>)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	212c      	movs	r1, #44	; 0x2c
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	4413      	add	r3, r2
 8003550:	3328      	adds	r3, #40	; 0x28
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800355c:	4a67      	ldr	r2, [pc, #412]	; (80036fc <I2C_Compute_SCLL_SCLH+0x204>)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	212c      	movs	r1, #44	; 0x2c
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	4413      	add	r3, r2
 8003568:	3304      	adds	r3, #4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a62      	ldr	r2, [pc, #392]	; (80036f8 <I2C_Compute_SCLL_SCLH+0x200>)
 800356e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003572:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003574:	4a61      	ldr	r2, [pc, #388]	; (80036fc <I2C_Compute_SCLL_SCLH+0x204>)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	212c      	movs	r1, #44	; 0x2c
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	4413      	add	r3, r2
 8003580:	3308      	adds	r3, #8
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a5c      	ldr	r2, [pc, #368]	; (80036f8 <I2C_Compute_SCLL_SCLH+0x200>)
 8003586:	fbb2 f3f3 	udiv	r3, r2, r3
 800358a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358e:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003590:	2300      	movs	r3, #0
 8003592:	637b      	str	r3, [r7, #52]	; 0x34
 8003594:	e0a3      	b.n	80036de <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003596:	495a      	ldr	r1, [pc, #360]	; (8003700 <I2C_Compute_SCLL_SCLH+0x208>)
 8003598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80035b0:	2300      	movs	r3, #0
 80035b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b4:	e08c      	b.n	80036d0 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80035b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	441a      	add	r2, r3
 80035bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035be:	3301      	adds	r3, #1
 80035c0:	6979      	ldr	r1, [r7, #20]
 80035c2:	fb03 f101 	mul.w	r1, r3, r1
 80035c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	440b      	add	r3, r1
 80035cc:	4413      	add	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80035d0:	4a4a      	ldr	r2, [pc, #296]	; (80036fc <I2C_Compute_SCLL_SCLH+0x204>)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	212c      	movs	r1, #44	; 0x2c
 80035d6:	fb01 f303 	mul.w	r3, r1, r3
 80035da:	4413      	add	r3, r2
 80035dc:	3318      	adds	r3, #24
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d971      	bls.n	80036ca <I2C_Compute_SCLL_SCLH+0x1d2>
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	1ad2      	subs	r2, r2, r3
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	089b      	lsrs	r3, r3, #2
 80035f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d268      	bcs.n	80036ca <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80035f8:	2300      	movs	r3, #0
 80035fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80035fc:	e062      	b.n	80036c4 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80035fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	441a      	add	r2, r3
 8003604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003606:	3301      	adds	r3, #1
 8003608:	6979      	ldr	r1, [r7, #20]
 800360a:	fb03 f101 	mul.w	r1, r3, r1
 800360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	440b      	add	r3, r1
 8003614:	4413      	add	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	441a      	add	r2, r3
 800361e:	4937      	ldr	r1, [pc, #220]	; (80036fc <I2C_Compute_SCLL_SCLH+0x204>)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	202c      	movs	r0, #44	; 0x2c
 8003624:	fb00 f303 	mul.w	r3, r0, r3
 8003628:	440b      	add	r3, r1
 800362a:	3320      	adds	r3, #32
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	441a      	add	r2, r3
 8003630:	4932      	ldr	r1, [pc, #200]	; (80036fc <I2C_Compute_SCLL_SCLH+0x204>)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	202c      	movs	r0, #44	; 0x2c
 8003636:	fb00 f303 	mul.w	r3, r0, r3
 800363a:	440b      	add	r3, r1
 800363c:	3324      	adds	r3, #36	; 0x24
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4413      	add	r3, r2
 8003642:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	429a      	cmp	r2, r3
 800364a:	d338      	bcc.n	80036be <I2C_Compute_SCLL_SCLH+0x1c6>
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	429a      	cmp	r2, r3
 8003652:	d834      	bhi.n	80036be <I2C_Compute_SCLL_SCLH+0x1c6>
 8003654:	4a29      	ldr	r2, [pc, #164]	; (80036fc <I2C_Compute_SCLL_SCLH+0x204>)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	212c      	movs	r1, #44	; 0x2c
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	4413      	add	r3, r2
 8003660:	331c      	adds	r3, #28
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	429a      	cmp	r2, r3
 8003668:	d329      	bcc.n	80036be <I2C_Compute_SCLL_SCLH+0x1c6>
 800366a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	429a      	cmp	r2, r3
 8003670:	d225      	bcs.n	80036be <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	2b00      	cmp	r3, #0
 800367e:	da02      	bge.n	8003686 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003682:	425b      	negs	r3, r3
 8003684:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800368a:	429a      	cmp	r2, r3
 800368c:	d917      	bls.n	80036be <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8003692:	491b      	ldr	r1, [pc, #108]	; (8003700 <I2C_Compute_SCLL_SCLH+0x208>)
 8003694:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	3310      	adds	r3, #16
 80036a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036a4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80036a6:	4916      	ldr	r1, [pc, #88]	; (8003700 <I2C_Compute_SCLL_SCLH+0x208>)
 80036a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	330c      	adds	r3, #12
 80036b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036b8:	601a      	str	r2, [r3, #0]
              ret = count;
 80036ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036bc:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80036be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c0:	3301      	adds	r3, #1
 80036c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80036c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c6:	2bff      	cmp	r3, #255	; 0xff
 80036c8:	d999      	bls.n	80035fe <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80036ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036cc:	3301      	adds	r3, #1
 80036ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d2:	2bff      	cmp	r3, #255	; 0xff
 80036d4:	f67f af6f 	bls.w	80035b6 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80036d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036da:	3301      	adds	r3, #1
 80036dc:	637b      	str	r3, [r7, #52]	; 0x34
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <I2C_Compute_SCLL_SCLH+0x20c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036e4:	429a      	cmp	r2, r3
 80036e6:	f4ff af56 	bcc.w	8003596 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80036ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	374c      	adds	r7, #76	; 0x4c
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	3b9aca00 	.word	0x3b9aca00
 80036fc:	080106e4 	.word	0x080106e4
 8003700:	240df4e0 	.word	0x240df4e0
 8003704:	240dfee0 	.word	0x240dfee0

08003708 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003710:	4b31      	ldr	r3, [pc, #196]	; (80037d8 <I2C4_MspInit+0xd0>)
 8003712:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003716:	4a30      	ldr	r2, [pc, #192]	; (80037d8 <I2C4_MspInit+0xd0>)
 8003718:	f043 0308 	orr.w	r3, r3, #8
 800371c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003720:	4b2d      	ldr	r3, [pc, #180]	; (80037d8 <I2C4_MspInit+0xd0>)
 8003722:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800372e:	4b2a      	ldr	r3, [pc, #168]	; (80037d8 <I2C4_MspInit+0xd0>)
 8003730:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003734:	4a28      	ldr	r2, [pc, #160]	; (80037d8 <I2C4_MspInit+0xd0>)
 8003736:	f043 0308 	orr.w	r3, r3, #8
 800373a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800373e:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <I2C4_MspInit+0xd0>)
 8003740:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800374c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003750:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003752:	2312      	movs	r3, #18
 8003754:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800375a:	2302      	movs	r3, #2
 800375c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800375e:	2304      	movs	r3, #4
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8003762:	f107 0314 	add.w	r3, r7, #20
 8003766:	4619      	mov	r1, r3
 8003768:	481c      	ldr	r0, [pc, #112]	; (80037dc <I2C4_MspInit+0xd4>)
 800376a:	f005 f8a1 	bl	80088b0 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800376e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003772:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003774:	2312      	movs	r3, #18
 8003776:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003778:	2300      	movs	r3, #0
 800377a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 800377c:	2302      	movs	r3, #2
 800377e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003780:	2304      	movs	r3, #4
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	4619      	mov	r1, r3
 800378a:	4814      	ldr	r0, [pc, #80]	; (80037dc <I2C4_MspInit+0xd4>)
 800378c:	f005 f890 	bl	80088b0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8003790:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <I2C4_MspInit+0xd0>)
 8003792:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003796:	4a10      	ldr	r2, [pc, #64]	; (80037d8 <I2C4_MspInit+0xd0>)
 8003798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800379c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80037a0:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <I2C4_MspInit+0xd0>)
 80037a2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 80037ae:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <I2C4_MspInit+0xd0>)
 80037b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037b4:	4a08      	ldr	r2, [pc, #32]	; (80037d8 <I2C4_MspInit+0xd0>)
 80037b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 80037be:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <I2C4_MspInit+0xd0>)
 80037c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037c4:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <I2C4_MspInit+0xd0>)
 80037c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 80037ce:	bf00      	nop
 80037d0:	3728      	adds	r7, #40	; 0x28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	58024400 	.word	0x58024400
 80037dc:	58020c00 	.word	0x58020c00

080037e0 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 80037e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037ec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4619      	mov	r1, r3
 80037f2:	480b      	ldr	r0, [pc, #44]	; (8003820 <I2C4_MspDeInit+0x40>)
 80037f4:	f005 fa0c 	bl	8008c10 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 80037f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037fc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4619      	mov	r1, r3
 8003802:	4807      	ldr	r0, [pc, #28]	; (8003820 <I2C4_MspDeInit+0x40>)
 8003804:	f005 fa04 	bl	8008c10 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <I2C4_MspDeInit+0x44>)
 800380a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800380e:	4a05      	ldr	r2, [pc, #20]	; (8003824 <I2C4_MspDeInit+0x44>)
 8003810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003814:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8003818:	bf00      	nop
 800381a:	3720      	adds	r7, #32
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	58020c00 	.word	0x58020c00
 8003824:	58024400 	.word	0x58024400

08003828 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af04      	add	r7, sp, #16
 800382e:	607b      	str	r3, [r7, #4]
 8003830:	4603      	mov	r3, r0
 8003832:	81fb      	strh	r3, [r7, #14]
 8003834:	460b      	mov	r3, r1
 8003836:	81bb      	strh	r3, [r7, #12]
 8003838:	4613      	mov	r3, r2
 800383a:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800383c:	8978      	ldrh	r0, [r7, #10]
 800383e:	89ba      	ldrh	r2, [r7, #12]
 8003840:	89f9      	ldrh	r1, [r7, #14]
 8003842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003846:	9302      	str	r3, [sp, #8]
 8003848:	8b3b      	ldrh	r3, [r7, #24]
 800384a:	9301      	str	r3, [sp, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	4603      	mov	r3, r0
 8003852:	4807      	ldr	r0, [pc, #28]	; (8003870 <I2C4_WriteReg+0x48>)
 8003854:	f005 fbee 	bl	8009034 <HAL_I2C_Mem_Write>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800385e:	2300      	movs	r3, #0
 8003860:	e001      	b.n	8003866 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003862:	f06f 0307 	mvn.w	r3, #7
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	240dfee4 	.word	0x240dfee4

08003874 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af04      	add	r7, sp, #16
 800387a:	607b      	str	r3, [r7, #4]
 800387c:	4603      	mov	r3, r0
 800387e:	81fb      	strh	r3, [r7, #14]
 8003880:	460b      	mov	r3, r1
 8003882:	81bb      	strh	r3, [r7, #12]
 8003884:	4613      	mov	r3, r2
 8003886:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003888:	8978      	ldrh	r0, [r7, #10]
 800388a:	89ba      	ldrh	r2, [r7, #12]
 800388c:	89f9      	ldrh	r1, [r7, #14]
 800388e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003892:	9302      	str	r3, [sp, #8]
 8003894:	8b3b      	ldrh	r3, [r7, #24]
 8003896:	9301      	str	r3, [sp, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	4603      	mov	r3, r0
 800389e:	4807      	ldr	r0, [pc, #28]	; (80038bc <I2C4_ReadReg+0x48>)
 80038a0:	f005 fcdc 	bl	800925c <HAL_I2C_Mem_Read>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e001      	b.n	80038b2 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80038ae:	f06f 0307 	mvn.w	r3, #7
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	240dfee4 	.word	0x240dfee4

080038c0 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80038d6:	f06f 0301 	mvn.w	r3, #1
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e02d      	b.n	800393a <BSP_CAMERA_Init+0x7a>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    HAL_DCMI_MspInit(&hdcmi);
 80038de:	4819      	ldr	r0, [pc, #100]	; (8003944 <BSP_CAMERA_Init+0x84>)
 80038e0:	f7fc ff0c 	bl	80006fc <HAL_DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    MX_DCMI_Init();
 80038e4:	f7fc fed6 	bl	8000694 <MX_DCMI_Init>

    if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 80038e8:	2000      	movs	r0, #0
 80038ea:	f000 f887 	bl	80039fc <BSP_CAMERA_HwReset>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <BSP_CAMERA_Init+0x3c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80038f4:	f06f 0307 	mvn.w	r3, #7
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	e01e      	b.n	800393a <BSP_CAMERA_Init+0x7a>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	68b8      	ldr	r0, [r7, #8]
 8003900:	f000 f93e 	bl	8003b80 <OV5640_Probe>
 8003904:	6178      	str	r0, [r7, #20]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <BSP_CAMERA_Init+0x54>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800390c:	f06f 0306 	mvn.w	r3, #6
 8003910:	617b      	str	r3, [r7, #20]
 8003912:	e012      	b.n	800393a <BSP_CAMERA_Init+0x7a>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 8003914:	490c      	ldr	r1, [pc, #48]	; (8003948 <BSP_CAMERA_Init+0x88>)
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4613      	mov	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4413      	add	r3, r2
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	440b      	add	r3, r1
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 8003926:	4908      	ldr	r1, [pc, #32]	; (8003948 <BSP_CAMERA_Init+0x88>)
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4613      	mov	r3, r2
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	4413      	add	r3, r2
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	440b      	add	r3, r1
 8003934:	3304      	adds	r3, #4
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 800393a:	697b      	ldr	r3, [r7, #20]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	240000d4 	.word	0x240000d4
 8003948:	240dff3c 	.word	0x240dff3c

0800394c <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800395e:	f06f 0301 	mvn.w	r3, #1
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	e022      	b.n	80039ac <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hdcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 8003966:	68bc      	ldr	r4, [r7, #8]
 8003968:	4913      	ldr	r1, [pc, #76]	; (80039b8 <BSP_CAMERA_Start+0x6c>)
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4613      	mov	r3, r2
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	4413      	add	r3, r2
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	440b      	add	r3, r1
 8003976:	6818      	ldr	r0, [r3, #0]
 8003978:	490f      	ldr	r1, [pc, #60]	; (80039b8 <BSP_CAMERA_Start+0x6c>)
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4613      	mov	r3, r2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	4413      	add	r3, r2
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	440b      	add	r3, r1
 8003986:	3304      	adds	r3, #4
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4619      	mov	r1, r3
 800398c:	f000 f8a6 	bl	8003adc <GetSize>
 8003990:	4603      	mov	r3, r0
 8003992:	4622      	mov	r2, r4
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4809      	ldr	r0, [pc, #36]	; (80039bc <BSP_CAMERA_Start+0x70>)
 8003998:	f000 fdca 	bl	8004530 <HAL_DCMI_Start_DMA>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80039a2:	f06f 0303 	mvn.w	r3, #3
 80039a6:	e002      	b.n	80039ae <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 80039ac:	697b      	ldr	r3, [r7, #20]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd90      	pop	{r4, r7, pc}
 80039b6:	bf00      	nop
 80039b8:	240dff3c 	.word	0x240dff3c
 80039bc:	240000d4 	.word	0x240000d4

080039c0 <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80039ce:	f06f 0301 	mvn.w	r3, #1
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	e00b      	b.n	80039ee <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hdcmi) != HAL_OK)
 80039d6:	4808      	ldr	r0, [pc, #32]	; (80039f8 <BSP_CAMERA_Stop+0x38>)
 80039d8:	f000 fe6c 	bl	80046b4 <HAL_DCMI_Stop>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80039e2:	f06f 0303 	mvn.w	r3, #3
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	e001      	b.n	80039ee <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 80039ee:	68fb      	ldr	r3, [r7, #12]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	240000d4 	.word	0x240000d4

080039fc <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <BSP_CAMERA_HwReset+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003a0e:	f06f 0301 	mvn.w	r3, #1
 8003a12:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003a14:	68fb      	ldr	r3, [r7, #12]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b085      	sub	sp, #20
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <BSP_CAMERA_PwrDown+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003a34:	f06f 0301 	mvn.w	r3, #1
 8003a38:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	f7ff ffdb 	bl	8003a48 <BSP_CAMERA_LineEventCallback>
}
 8003a92:	bf00      	nop
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 {
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	f7fd fce6 	bl	8001474 <BSP_CAMERA_FrameEventCallback>
}
 8003aa8:	bf00      	nop
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f7ff ffcf 	bl	8003a5c <BSP_CAMERA_VsyncEventCallback>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 8003ace:	2000      	movs	r0, #0
 8003ad0:	f7ff ffce 	bl	8003a70 <BSP_CAMERA_ErrorCallback>
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d102      	bne.n	8003af6 <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 8003af0:	2303      	movs	r3, #3
 8003af2:	60bb      	str	r3, [r7, #8]
 8003af4:	e001      	b.n	8003afa <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 8003af6:	2302      	movs	r3, #2
 8003af8:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d834      	bhi.n	8003b6a <GetSize+0x8e>
 8003b00:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <GetSize+0x2c>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003b1d 	.word	0x08003b1d
 8003b0c:	08003b2d 	.word	0x08003b2d
 8003b10:	08003b3d 	.word	0x08003b3d
 8003b14:	08003b4d 	.word	0x08003b4d
 8003b18:	08003b5d 	.word	0x08003b5d
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	089b      	lsrs	r3, r3, #2
 8003b28:	60fb      	str	r3, [r7, #12]
    break;
 8003b2a:	e01f      	b.n	8003b6c <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8003b32:	fb02 f303 	mul.w	r3, r2, r3
 8003b36:	089b      	lsrs	r3, r3, #2
 8003b38:	60fb      	str	r3, [r7, #12]
    break;
 8003b3a:	e017      	b.n	8003b6c <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	025b      	lsls	r3, r3, #9
 8003b46:	089b      	lsrs	r3, r3, #2
 8003b48:	60fb      	str	r3, [r7, #12]
    break;
 8003b4a:	e00f      	b.n	8003b6c <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 8003b52:	fb02 f303 	mul.w	r3, r2, r3
 8003b56:	089b      	lsrs	r3, r3, #2
 8003b58:	60fb      	str	r3, [r7, #12]
    break;
 8003b5a:	e007      	b.n	8003b6c <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4a07      	ldr	r2, [pc, #28]	; (8003b7c <GetSize+0xa0>)
 8003b60:	fb02 f303 	mul.w	r3, r2, r3
 8003b64:	089b      	lsrs	r3, r3, #2
 8003b66:	60fb      	str	r3, [r7, #12]
    break;
 8003b68:	e000      	b.n	8003b6c <GetSize+0x90>
  default:
    break;
 8003b6a:	bf00      	nop
  }

  return (int32_t)size;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	0005dc00 	.word	0x0005dc00

08003b80 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08a      	sub	sp, #40	; 0x28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8003b8a:	2378      	movs	r3, #120	; 0x78
 8003b8c:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003b8e:	4b2c      	ldr	r3, [pc, #176]	; (8003c40 <OV5640_Probe+0xc0>)
 8003b90:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003b92:	4b2c      	ldr	r3, [pc, #176]	; (8003c44 <OV5640_Probe+0xc4>)
 8003b94:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8003b96:	4b2c      	ldr	r3, [pc, #176]	; (8003c48 <OV5640_Probe+0xc8>)
 8003b98:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8003b9a:	4b2c      	ldr	r3, [pc, #176]	; (8003c4c <OV5640_Probe+0xcc>)
 8003b9c:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003b9e:	4b2c      	ldr	r3, [pc, #176]	; (8003c50 <OV5640_Probe+0xd0>)
 8003ba0:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8003ba2:	f107 030c 	add.w	r3, r7, #12
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	482a      	ldr	r0, [pc, #168]	; (8003c54 <OV5640_Probe+0xd4>)
 8003baa:	f7fd fc7f 	bl	80014ac <OV5640_RegisterBusIO>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003bb4:	f06f 0304 	mvn.w	r3, #4
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bba:	e03c      	b.n	8003c36 <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8003bbc:	f107 0308 	add.w	r3, r7, #8
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4824      	ldr	r0, [pc, #144]	; (8003c54 <OV5640_Probe+0xd4>)
 8003bc4:	f7fe f8c6 	bl	8001d54 <OV5640_ReadID>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003bce:	f06f 0304 	mvn.w	r3, #4
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd4:	e02f      	b.n	8003c36 <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f245 6240 	movw	r2, #22080	; 0x5640
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d003      	beq.n	8003be8 <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003be0:	f06f 0306 	mvn.w	r3, #6
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
 8003be6:	e026      	b.n	8003c36 <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8003be8:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <OV5640_Probe+0xd8>)
 8003bea:	4a1c      	ldr	r2, [pc, #112]	; (8003c5c <OV5640_Probe+0xdc>)
 8003bec:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 8003bee:	4b1c      	ldr	r3, [pc, #112]	; (8003c60 <OV5640_Probe+0xe0>)
 8003bf0:	4a18      	ldr	r2, [pc, #96]	; (8003c54 <OV5640_Probe+0xd4>)
 8003bf2:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8003bf4:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <OV5640_Probe+0xd8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a19      	ldr	r2, [pc, #100]	; (8003c60 <OV5640_Probe+0xe0>)
 8003bfc:	6810      	ldr	r0, [r2, #0]
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4798      	blx	r3
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003c0a:	f06f 0304 	mvn.w	r3, #4
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c10:	e011      	b.n	8003c36 <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 8003c12:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <OV5640_Probe+0xd8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	4a11      	ldr	r2, [pc, #68]	; (8003c60 <OV5640_Probe+0xe0>)
 8003c1a:	6812      	ldr	r2, [r2, #0]
 8003c1c:	4911      	ldr	r1, [pc, #68]	; (8003c64 <OV5640_Probe+0xe4>)
 8003c1e:	6809      	ldr	r1, [r1, #0]
 8003c20:	4610      	mov	r0, r2
 8003c22:	4798      	blx	r3
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003c2a:	f06f 0304 	mvn.w	r3, #4
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c30:	e001      	b.n	8003c36 <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3728      	adds	r7, #40	; 0x28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	08003015 	.word	0x08003015
 8003c44:	08003089 	.word	0x08003089
 8003c48:	080031b1 	.word	0x080031b1
 8003c4c:	08003155 	.word	0x08003155
 8003c50:	0800320d 	.word	0x0800320d
 8003c54:	240dff74 	.word	0x240dff74
 8003c58:	240dff6c 	.word	0x240dff6c
 8003c5c:	24000000 	.word	0x24000000
 8003c60:	240dff38 	.word	0x240dff38
 8003c64:	240dff70 	.word	0x240dff70

08003c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	; (8003c98 <HAL_MspInit+0x30>)
 8003c70:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003c74:	4a08      	ldr	r2, [pc, #32]	; (8003c98 <HAL_MspInit+0x30>)
 8003c76:	f043 0302 	orr.w	r3, r3, #2
 8003c7a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <HAL_MspInit+0x30>)
 8003c80:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	607b      	str	r3, [r7, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	58024400 	.word	0x58024400

08003c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ca0:	e7fe      	b.n	8003ca0 <NMI_Handler+0x4>

08003ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ca6:	e7fe      	b.n	8003ca6 <HardFault_Handler+0x4>

08003ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cac:	e7fe      	b.n	8003cac <MemManage_Handler+0x4>

08003cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cb2:	e7fe      	b.n	8003cb2 <BusFault_Handler+0x4>

08003cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cb8:	e7fe      	b.n	8003cb8 <UsageFault_Handler+0x4>

08003cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cbe:	bf00      	nop
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cda:	bf00      	nop
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ce8:	f000 fa54 	bl	8004194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cec:	bf00      	nop
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003cf4:	4802      	ldr	r0, [pc, #8]	; (8003d00 <USART1_IRQHandler+0x10>)
 8003cf6:	f009 fbd5 	bl	800d4a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003cfa:	bf00      	nop
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	240dffa0 	.word	0x240dffa0

08003d04 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003d08:	4802      	ldr	r0, [pc, #8]	; (8003d14 <DMA2_Stream1_IRQHandler+0x10>)
 8003d0a:	f002 f9c3 	bl	8006094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	24000124 	.word	0x24000124

08003d18 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003d1c:	4802      	ldr	r0, [pc, #8]	; (8003d28 <DCMI_PSSI_IRQHandler+0x10>)
 8003d1e:	f000 fd29 	bl	8004774 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	240000d4 	.word	0x240000d4

08003d2c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003d30:	4802      	ldr	r0, [pc, #8]	; (8003d3c <LTDC_IRQHandler+0x10>)
 8003d32:	f005 ffe7 	bl	8009d04 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003d36:	bf00      	nop
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	24000204 	.word	0x24000204

08003d40 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC Error global Interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003d44:	4802      	ldr	r0, [pc, #8]	; (8003d50 <LTDC_ER_IRQHandler+0x10>)
 8003d46:	f005 ffdd 	bl	8009d04 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	24000204 	.word	0x24000204

08003d54 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003d58:	4802      	ldr	r0, [pc, #8]	; (8003d64 <DMA2D_IRQHandler+0x10>)
 8003d5a:	f003 fe95 	bl	8007a88 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	2400019c 	.word	0x2400019c

08003d68 <_lseek>:
//  (void)file;
//  return 1;
//}

int _lseek(int file, int ptr, int dir)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d8c:	4a14      	ldr	r2, [pc, #80]	; (8003de0 <_sbrk+0x5c>)
 8003d8e:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <_sbrk+0x60>)
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d98:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <_sbrk+0x64>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d102      	bne.n	8003da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <_sbrk+0x64>)
 8003da2:	4a12      	ldr	r2, [pc, #72]	; (8003dec <_sbrk+0x68>)
 8003da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <_sbrk+0x64>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4413      	add	r3, r2
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d207      	bcs.n	8003dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003db4:	f00b f938 	bl	800f028 <__errno>
 8003db8:	4603      	mov	r3, r0
 8003dba:	220c      	movs	r2, #12
 8003dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc2:	e009      	b.n	8003dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dc4:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <_sbrk+0x64>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dca:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <_sbrk+0x64>)
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	4a05      	ldr	r2, [pc, #20]	; (8003de8 <_sbrk+0x64>)
 8003dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	24100000 	.word	0x24100000
 8003de4:	00000400 	.word	0x00000400
 8003de8:	240dff9c 	.word	0x240dff9c
 8003dec:	240e0048 	.word	0x240e0048

08003df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003df4:	4b32      	ldr	r3, [pc, #200]	; (8003ec0 <SystemInit+0xd0>)
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfa:	4a31      	ldr	r2, [pc, #196]	; (8003ec0 <SystemInit+0xd0>)
 8003dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e04:	4b2f      	ldr	r3, [pc, #188]	; (8003ec4 <SystemInit+0xd4>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 030f 	and.w	r3, r3, #15
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d807      	bhi.n	8003e20 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e10:	4b2c      	ldr	r3, [pc, #176]	; (8003ec4 <SystemInit+0xd4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 030f 	bic.w	r3, r3, #15
 8003e18:	4a2a      	ldr	r2, [pc, #168]	; (8003ec4 <SystemInit+0xd4>)
 8003e1a:	f043 0303 	orr.w	r3, r3, #3
 8003e1e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003e20:	4b29      	ldr	r3, [pc, #164]	; (8003ec8 <SystemInit+0xd8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a28      	ldr	r2, [pc, #160]	; (8003ec8 <SystemInit+0xd8>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e2c:	4b26      	ldr	r3, [pc, #152]	; (8003ec8 <SystemInit+0xd8>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003e32:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <SystemInit+0xd8>)
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	4924      	ldr	r1, [pc, #144]	; (8003ec8 <SystemInit+0xd8>)
 8003e38:	4b24      	ldr	r3, [pc, #144]	; (8003ecc <SystemInit+0xdc>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e3e:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <SystemInit+0xd4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 030c 	and.w	r3, r3, #12
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d007      	beq.n	8003e5a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ec4 <SystemInit+0xd4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f023 030f 	bic.w	r3, r3, #15
 8003e52:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <SystemInit+0xd4>)
 8003e54:	f043 0303 	orr.w	r3, r3, #3
 8003e58:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8003e5a:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <SystemInit+0xd8>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8003e60:	4b19      	ldr	r3, [pc, #100]	; (8003ec8 <SystemInit+0xd8>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8003e66:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <SystemInit+0xd8>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003e6c:	4b16      	ldr	r3, [pc, #88]	; (8003ec8 <SystemInit+0xd8>)
 8003e6e:	4a18      	ldr	r2, [pc, #96]	; (8003ed0 <SystemInit+0xe0>)
 8003e70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003e72:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <SystemInit+0xd8>)
 8003e74:	4a17      	ldr	r2, [pc, #92]	; (8003ed4 <SystemInit+0xe4>)
 8003e76:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003e78:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <SystemInit+0xd8>)
 8003e7a:	4a17      	ldr	r2, [pc, #92]	; (8003ed8 <SystemInit+0xe8>)
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003e7e:	4b12      	ldr	r3, [pc, #72]	; (8003ec8 <SystemInit+0xd8>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003e84:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <SystemInit+0xd8>)
 8003e86:	4a14      	ldr	r2, [pc, #80]	; (8003ed8 <SystemInit+0xe8>)
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003e8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ec8 <SystemInit+0xd8>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003e90:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <SystemInit+0xd8>)
 8003e92:	4a11      	ldr	r2, [pc, #68]	; (8003ed8 <SystemInit+0xe8>)
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003e96:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <SystemInit+0xd8>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <SystemInit+0xd8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a09      	ldr	r2, [pc, #36]	; (8003ec8 <SystemInit+0xd8>)
 8003ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ea6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003ea8:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <SystemInit+0xd8>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003eae:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <SystemInit+0xec>)
 8003eb0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003eb4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003eb6:	bf00      	nop
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	e000ed00 	.word	0xe000ed00
 8003ec4:	52002000 	.word	0x52002000
 8003ec8:	58024400 	.word	0x58024400
 8003ecc:	eaf6ed7f 	.word	0xeaf6ed7f
 8003ed0:	02020200 	.word	0x02020200
 8003ed4:	01ff0000 	.word	0x01ff0000
 8003ed8:	01010280 	.word	0x01010280
 8003edc:	52004000 	.word	0x52004000

08003ee0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ee4:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <MX_USART1_UART_Init+0x90>)
 8003ee6:	4a23      	ldr	r2, [pc, #140]	; (8003f74 <MX_USART1_UART_Init+0x94>)
 8003ee8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003eea:	4b21      	ldr	r3, [pc, #132]	; (8003f70 <MX_USART1_UART_Init+0x90>)
 8003eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ef0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ef2:	4b1f      	ldr	r3, [pc, #124]	; (8003f70 <MX_USART1_UART_Init+0x90>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <MX_USART1_UART_Init+0x90>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003efe:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <MX_USART1_UART_Init+0x90>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f04:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <MX_USART1_UART_Init+0x90>)
 8003f06:	220c      	movs	r2, #12
 8003f08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f0a:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <MX_USART1_UART_Init+0x90>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f10:	4b17      	ldr	r3, [pc, #92]	; (8003f70 <MX_USART1_UART_Init+0x90>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f16:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <MX_USART1_UART_Init+0x90>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <MX_USART1_UART_Init+0x90>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f22:	4b13      	ldr	r3, [pc, #76]	; (8003f70 <MX_USART1_UART_Init+0x90>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f28:	4811      	ldr	r0, [pc, #68]	; (8003f70 <MX_USART1_UART_Init+0x90>)
 8003f2a:	f009 f915 	bl	800d158 <HAL_UART_Init>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003f34:	f7fd fab4 	bl	80014a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f38:	2100      	movs	r1, #0
 8003f3a:	480d      	ldr	r0, [pc, #52]	; (8003f70 <MX_USART1_UART_Init+0x90>)
 8003f3c:	f00a ffaa 	bl	800ee94 <HAL_UARTEx_SetTxFifoThreshold>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003f46:	f7fd faab 	bl	80014a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	4808      	ldr	r0, [pc, #32]	; (8003f70 <MX_USART1_UART_Init+0x90>)
 8003f4e:	f00a ffdf 	bl	800ef10 <HAL_UARTEx_SetRxFifoThreshold>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003f58:	f7fd faa2 	bl	80014a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003f5c:	4804      	ldr	r0, [pc, #16]	; (8003f70 <MX_USART1_UART_Init+0x90>)
 8003f5e:	f00a ff60 	bl	800ee22 <HAL_UARTEx_DisableFifoMode>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003f68:	f7fd fa9a 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f6c:	bf00      	nop
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	240dffa0 	.word	0x240dffa0
 8003f74:	40011000 	.word	0x40011000

08003f78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b0ba      	sub	sp, #232	; 0xe8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	60da      	str	r2, [r3, #12]
 8003f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f90:	f107 0310 	add.w	r3, r7, #16
 8003f94:	22c0      	movs	r2, #192	; 0xc0
 8003f96:	2100      	movs	r1, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f00b f86f 	bl	800f07c <memset>
  if(uartHandle->Instance==USART1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a2b      	ldr	r2, [pc, #172]	; (8004050 <HAL_UART_MspInit+0xd8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d14e      	bne.n	8004046 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003fa8:	f04f 0201 	mov.w	r2, #1
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fba:	f107 0310 	add.w	r3, r7, #16
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f007 f9cc 	bl	800b35c <HAL_RCCEx_PeriphCLKConfig>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003fca:	f7fd fa69 	bl	80014a0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fce:	4b21      	ldr	r3, [pc, #132]	; (8004054 <HAL_UART_MspInit+0xdc>)
 8003fd0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003fd4:	4a1f      	ldr	r2, [pc, #124]	; (8004054 <HAL_UART_MspInit+0xdc>)
 8003fd6:	f043 0310 	orr.w	r3, r3, #16
 8003fda:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8003fde:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <HAL_UART_MspInit+0xdc>)
 8003fe0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fec:	4b19      	ldr	r3, [pc, #100]	; (8004054 <HAL_UART_MspInit+0xdc>)
 8003fee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003ff2:	4a18      	ldr	r2, [pc, #96]	; (8004054 <HAL_UART_MspInit+0xdc>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8003ffc:	4b15      	ldr	r3, [pc, #84]	; (8004054 <HAL_UART_MspInit+0xdc>)
 8003ffe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 800400a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800400e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004012:	2302      	movs	r3, #2
 8004014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004018:	2300      	movs	r3, #0
 800401a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800401e:	2300      	movs	r3, #0
 8004020:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004024:	2307      	movs	r3, #7
 8004026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800402a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800402e:	4619      	mov	r1, r3
 8004030:	4809      	ldr	r0, [pc, #36]	; (8004058 <HAL_UART_MspInit+0xe0>)
 8004032:	f004 fc3d 	bl	80088b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004036:	2200      	movs	r2, #0
 8004038:	2100      	movs	r1, #0
 800403a:	2025      	movs	r0, #37	; 0x25
 800403c:	f000 f9c9 	bl	80043d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004040:	2025      	movs	r0, #37	; 0x25
 8004042:	f000 f9e0 	bl	8004406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004046:	bf00      	nop
 8004048:	37e8      	adds	r7, #232	; 0xe8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40011000 	.word	0x40011000
 8004054:	58024400 	.word	0x58024400
 8004058:	58020000 	.word	0x58020000

0800405c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800405c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004094 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004060:	f7ff fec6 	bl	8003df0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004064:	480c      	ldr	r0, [pc, #48]	; (8004098 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004066:	490d      	ldr	r1, [pc, #52]	; (800409c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004068:	4a0d      	ldr	r2, [pc, #52]	; (80040a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800406a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800406c:	e002      	b.n	8004074 <LoopCopyDataInit>

0800406e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800406e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004072:	3304      	adds	r3, #4

08004074 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8004074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004078:	d3f9      	bcc.n	800406e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800407a:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800407c:	4c0a      	ldr	r4, [pc, #40]	; (80040a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800407e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004080:	e001      	b.n	8004086 <LoopFillZerobss>

08004082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004084:	3204      	adds	r2, #4

08004086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004088:	d3fb      	bcc.n	8004082 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800408a:	f00a ffd3 	bl	800f034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800408e:	f7fd f8cd 	bl	800122c <main>
  bx  lr
 8004092:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004094:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8004098:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800409c:	240000b8 	.word	0x240000b8
  ldr r2, =_sidata
 80040a0:	08010850 	.word	0x08010850
  ldr r2, =_sbss
 80040a4:	240000b8 	.word	0x240000b8
  ldr r4, =_ebss
 80040a8:	240e0048 	.word	0x240e0048

080040ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040ac:	e7fe      	b.n	80040ac <ADC_IRQHandler>
	...

080040b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040b6:	2003      	movs	r0, #3
 80040b8:	f000 f980 	bl	80043bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80040bc:	f006 ff78 	bl	800afb0 <HAL_RCC_GetSysClockFreq>
 80040c0:	4602      	mov	r2, r0
 80040c2:	4b15      	ldr	r3, [pc, #84]	; (8004118 <HAL_Init+0x68>)
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	0a1b      	lsrs	r3, r3, #8
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	4913      	ldr	r1, [pc, #76]	; (800411c <HAL_Init+0x6c>)
 80040ce:	5ccb      	ldrb	r3, [r1, r3]
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
 80040d8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80040da:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <HAL_Init+0x68>)
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	4a0e      	ldr	r2, [pc, #56]	; (800411c <HAL_Init+0x6c>)
 80040e4:	5cd3      	ldrb	r3, [r2, r3]
 80040e6:	f003 031f 	and.w	r3, r3, #31
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	fa22 f303 	lsr.w	r3, r2, r3
 80040f0:	4a0b      	ldr	r2, [pc, #44]	; (8004120 <HAL_Init+0x70>)
 80040f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040f4:	4a0b      	ldr	r2, [pc, #44]	; (8004124 <HAL_Init+0x74>)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040fa:	2000      	movs	r0, #0
 80040fc:	f000 f814 	bl	8004128 <HAL_InitTick>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e002      	b.n	8004110 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800410a:	f7ff fdad 	bl	8003c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	58024400 	.word	0x58024400
 800411c:	08010768 	.word	0x08010768
 8004120:	24000048 	.word	0x24000048
 8004124:	24000044 	.word	0x24000044

08004128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004130:	4b15      	ldr	r3, [pc, #84]	; (8004188 <HAL_InitTick+0x60>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e021      	b.n	8004180 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800413c:	4b13      	ldr	r3, [pc, #76]	; (800418c <HAL_InitTick+0x64>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <HAL_InitTick+0x60>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	4619      	mov	r1, r3
 8004146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800414a:	fbb3 f3f1 	udiv	r3, r3, r1
 800414e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004152:	4618      	mov	r0, r3
 8004154:	f000 f965 	bl	8004422 <HAL_SYSTICK_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e00e      	b.n	8004180 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b0f      	cmp	r3, #15
 8004166:	d80a      	bhi.n	800417e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004168:	2200      	movs	r2, #0
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	f04f 30ff 	mov.w	r0, #4294967295
 8004170:	f000 f92f 	bl	80043d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004174:	4a06      	ldr	r2, [pc, #24]	; (8004190 <HAL_InitTick+0x68>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e000      	b.n	8004180 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
}
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	24000050 	.word	0x24000050
 800418c:	24000044 	.word	0x24000044
 8004190:	2400004c 	.word	0x2400004c

08004194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004198:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <HAL_IncTick+0x20>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <HAL_IncTick+0x24>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4413      	add	r3, r2
 80041a4:	4a04      	ldr	r2, [pc, #16]	; (80041b8 <HAL_IncTick+0x24>)
 80041a6:	6013      	str	r3, [r2, #0]
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	24000050 	.word	0x24000050
 80041b8:	240e0034 	.word	0x240e0034

080041bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return uwTick;
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <HAL_GetTick+0x14>)
 80041c2:	681b      	ldr	r3, [r3, #0]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	240e0034 	.word	0x240e0034

080041d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041dc:	f7ff ffee 	bl	80041bc <HAL_GetTick>
 80041e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d005      	beq.n	80041fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041ee:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <HAL_Delay+0x44>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4413      	add	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041fa:	bf00      	nop
 80041fc:	f7ff ffde 	bl	80041bc <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	429a      	cmp	r2, r3
 800420a:	d8f7      	bhi.n	80041fc <HAL_Delay+0x28>
  {
  }
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	24000050 	.word	0x24000050

0800421c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <__NVIC_SetPriorityGrouping+0x40>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004238:	4013      	ands	r3, r2
 800423a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004244:	4b06      	ldr	r3, [pc, #24]	; (8004260 <__NVIC_SetPriorityGrouping+0x44>)
 8004246:	4313      	orrs	r3, r2
 8004248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800424a:	4a04      	ldr	r2, [pc, #16]	; (800425c <__NVIC_SetPriorityGrouping+0x40>)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	60d3      	str	r3, [r2, #12]
}
 8004250:	bf00      	nop
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	e000ed00 	.word	0xe000ed00
 8004260:	05fa0000 	.word	0x05fa0000

08004264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004268:	4b04      	ldr	r3, [pc, #16]	; (800427c <__NVIC_GetPriorityGrouping+0x18>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	0a1b      	lsrs	r3, r3, #8
 800426e:	f003 0307 	and.w	r3, r3, #7
}
 8004272:	4618      	mov	r0, r3
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	e000ed00 	.word	0xe000ed00

08004280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800428a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800428e:	2b00      	cmp	r3, #0
 8004290:	db0b      	blt.n	80042aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	f003 021f 	and.w	r2, r3, #31
 8004298:	4907      	ldr	r1, [pc, #28]	; (80042b8 <__NVIC_EnableIRQ+0x38>)
 800429a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	2001      	movs	r0, #1
 80042a2:	fa00 f202 	lsl.w	r2, r0, r2
 80042a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	e000e100 	.word	0xe000e100

080042bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	6039      	str	r1, [r7, #0]
 80042c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	db0a      	blt.n	80042e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	490c      	ldr	r1, [pc, #48]	; (8004308 <__NVIC_SetPriority+0x4c>)
 80042d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042da:	0112      	lsls	r2, r2, #4
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	440b      	add	r3, r1
 80042e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042e4:	e00a      	b.n	80042fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	4908      	ldr	r1, [pc, #32]	; (800430c <__NVIC_SetPriority+0x50>)
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	3b04      	subs	r3, #4
 80042f4:	0112      	lsls	r2, r2, #4
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	440b      	add	r3, r1
 80042fa:	761a      	strb	r2, [r3, #24]
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	e000e100 	.word	0xe000e100
 800430c:	e000ed00 	.word	0xe000ed00

08004310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004310:	b480      	push	{r7}
 8004312:	b089      	sub	sp, #36	; 0x24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f1c3 0307 	rsb	r3, r3, #7
 800432a:	2b04      	cmp	r3, #4
 800432c:	bf28      	it	cs
 800432e:	2304      	movcs	r3, #4
 8004330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	3304      	adds	r3, #4
 8004336:	2b06      	cmp	r3, #6
 8004338:	d902      	bls.n	8004340 <NVIC_EncodePriority+0x30>
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	3b03      	subs	r3, #3
 800433e:	e000      	b.n	8004342 <NVIC_EncodePriority+0x32>
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004344:	f04f 32ff 	mov.w	r2, #4294967295
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43da      	mvns	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	401a      	ands	r2, r3
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004358:	f04f 31ff 	mov.w	r1, #4294967295
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	fa01 f303 	lsl.w	r3, r1, r3
 8004362:	43d9      	mvns	r1, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004368:	4313      	orrs	r3, r2
         );
}
 800436a:	4618      	mov	r0, r3
 800436c:	3724      	adds	r7, #36	; 0x24
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3b01      	subs	r3, #1
 8004384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004388:	d301      	bcc.n	800438e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800438a:	2301      	movs	r3, #1
 800438c:	e00f      	b.n	80043ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800438e:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <SysTick_Config+0x40>)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3b01      	subs	r3, #1
 8004394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004396:	210f      	movs	r1, #15
 8004398:	f04f 30ff 	mov.w	r0, #4294967295
 800439c:	f7ff ff8e 	bl	80042bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <SysTick_Config+0x40>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043a6:	4b04      	ldr	r3, [pc, #16]	; (80043b8 <SysTick_Config+0x40>)
 80043a8:	2207      	movs	r2, #7
 80043aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	e000e010 	.word	0xe000e010

080043bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff ff29 	bl	800421c <__NVIC_SetPriorityGrouping>
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b086      	sub	sp, #24
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	4603      	mov	r3, r0
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
 80043de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043e0:	f7ff ff40 	bl	8004264 <__NVIC_GetPriorityGrouping>
 80043e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	6978      	ldr	r0, [r7, #20]
 80043ec:	f7ff ff90 	bl	8004310 <NVIC_EncodePriority>
 80043f0:	4602      	mov	r2, r0
 80043f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043f6:	4611      	mov	r1, r2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff ff5f 	bl	80042bc <__NVIC_SetPriority>
}
 80043fe:	bf00      	nop
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	4603      	mov	r3, r0
 800440e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff ff33 	bl	8004280 <__NVIC_EnableIRQ>
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff ffa4 	bl	8004378 <SysTick_Config>
 8004430:	4603      	mov	r3, r0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e069      	b.n	8004522 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fc f94e 	bl	80006fc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6819      	ldr	r1, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4b2a      	ldr	r3, [pc, #168]	; (800452c <HAL_DCMI_Init+0xf0>)
 8004482:	400b      	ands	r3, r1
 8004484:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6819      	ldr	r1, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800449a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80044a6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80044b2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80044be:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80044ca:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b10      	cmp	r3, #16
 80044da:	d112      	bne.n	8004502 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	7f1b      	ldrb	r3, [r3, #28]
 80044e0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	7f5b      	ldrb	r3, [r3, #29]
 80044e6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80044e8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	7f9b      	ldrb	r3, [r3, #30]
 80044ee:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80044f0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	7fdb      	ldrb	r3, [r3, #31]
 80044f8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80044fe:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004500:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 021e 	orr.w	r2, r2, #30
 8004510:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	ffe0f007 	.word	0xffe0f007

08004530 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af02      	add	r7, sp, #8
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004544:	2b01      	cmp	r3, #1
 8004546:	d101      	bne.n	800454c <HAL_DCMI_Start_DMA+0x1c>
 8004548:	2302      	movs	r3, #2
 800454a:	e0ab      	b.n	80046a4 <HAL_DCMI_Start_DMA+0x174>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800456a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0202 	bic.w	r2, r2, #2
 800457a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6819      	ldr	r1, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	430a      	orrs	r2, r1
 800458a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004590:	4a46      	ldr	r2, [pc, #280]	; (80046ac <HAL_DCMI_Start_DMA+0x17c>)
 8004592:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004598:	4a45      	ldr	r2, [pc, #276]	; (80046b0 <HAL_DCMI_Start_DMA+0x180>)
 800459a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a0:	2200      	movs	r2, #0
 80045a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c2:	d219      	bcs.n	80045f8 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3328      	adds	r3, #40	; 0x28
 80045ce:	4619      	mov	r1, r3
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	f000 fd90 	bl	80050f8 <HAL_DMA_Start_IT>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d055      	beq.n	800468a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2240      	movs	r2, #64	; 0x40
 80045e2:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e055      	b.n	80046a4 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045fc:	4a2b      	ldr	r2, [pc, #172]	; (80046ac <HAL_DCMI_Start_DMA+0x17c>)
 80045fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8004612:	e009      	b.n	8004628 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004618:	085a      	lsrs	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	005a      	lsls	r2, r3, #1
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004630:	d2f0      	bcs.n	8004614 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	1e9a      	subs	r2, r3, #2
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	4413      	add	r3, r2
 800464e:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3328      	adds	r3, #40	; 0x28
 800465a:	4619      	mov	r1, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	f003 fc73 	bl	8007f50 <HAL_DMAEx_MultiBufferStart_IT>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00c      	beq.n	800468a <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2240      	movs	r2, #64	; 0x40
 8004674:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e00c      	b.n	80046a4 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	08004879 	.word	0x08004879
 80046b0:	0800499f 	.word	0x0800499f

080046b4 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80046bc:	4b2b      	ldr	r3, [pc, #172]	; (800476c <HAL_DCMI_Stop+0xb8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a2b      	ldr	r2, [pc, #172]	; (8004770 <HAL_DCMI_Stop+0xbc>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	0a5b      	lsrs	r3, r3, #9
 80046c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046cc:	fb02 f303 	mul.w	r3, r2, r3
 80046d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_DCMI_Stop+0x30>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e03f      	b.n	8004764 <HAL_DCMI_Stop+0xb0>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3b01      	subs	r3, #1
 8004708:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d108      	bne.n	8004722 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004714:	f043 0220 	orr.w	r2, r3, #32
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	72fb      	strb	r3, [r7, #11]
      break;
 8004720:	e006      	b.n	8004730 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e9      	bne.n	8004704 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800473e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004744:	4618      	mov	r0, r3
 8004746:	f000 ff41 	bl	80055cc <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8004762:	7afb      	ldrb	r3, [r7, #11]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	24000044 	.word	0x24000044
 8004770:	10624dd3 	.word	0x10624dd3

08004774 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f003 0304 	and.w	r3, r3, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	d016      	beq.n	80047bc <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2204      	movs	r2, #4
 8004794:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479a:	f043 0202 	orr.w	r2, r3, #2
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2204      	movs	r2, #4
 80047a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ae:	4a31      	ldr	r2, [pc, #196]	; (8004874 <HAL_DCMI_IRQHandler+0x100>)
 80047b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047b6:	4618      	mov	r0, r3
 80047b8:	f001 fa26 	bl	8005c08 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d016      	beq.n	80047f4 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2202      	movs	r2, #2
 80047cc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d2:	f043 0201 	orr.w	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2204      	movs	r2, #4
 80047de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e6:	4a23      	ldr	r2, [pc, #140]	; (8004874 <HAL_DCMI_IRQHandler+0x100>)
 80047e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ee:	4618      	mov	r0, r3
 80047f0:	f001 fa0a 	bl	8005c08 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 0310 	and.w	r3, r3, #16
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d006      	beq.n	800480c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2210      	movs	r2, #16
 8004804:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7ff f93c 	bl	8003a84 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d006      	beq.n	8004824 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2208      	movs	r2, #8
 800481c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff f946 	bl	8003ab0 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d01d      	beq.n	800486a <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b02      	cmp	r3, #2
 800483a:	d107      	bne.n	800484c <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 021e 	bic.w	r2, r2, #30
 800484a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2201      	movs	r2, #1
 8004862:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff f918 	bl	8003a9a <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	0800499f 	.word	0x0800499f

08004878 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004884:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488a:	2b00      	cmp	r3, #0
 800488c:	d043      	beq.n	8004916 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800489a:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d118      	bne.n	80048da <DCMI_DMAXferCplt+0x62>
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d015      	beq.n	80048da <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c0:	00da      	lsls	r2, r3, #3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4413      	add	r3, r2
 80048c6:	2200      	movs	r2, #0
 80048c8:	4619      	mov	r1, r3
 80048ca:	f003 fe9f 	bl	800860c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	1e5a      	subs	r2, r3, #1
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	639a      	str	r2, [r3, #56]	; 0x38
 80048d8:	e044      	b.n	8004964 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d13c      	bne.n	8004964 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fc:	00da      	lsls	r2, r3, #3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	4413      	add	r3, r2
 8004902:	2201      	movs	r2, #1
 8004904:	4619      	mov	r1, r3
 8004906:	f003 fe81 	bl	800860c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	1e5a      	subs	r2, r3, #1
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	639a      	str	r2, [r3, #56]	; 0x38
 8004914:	e026      	b.n	8004964 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d006      	beq.n	8004934 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004930:	60da      	str	r2, [r3, #12]
 8004932:	e017      	b.n	8004964 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10f      	bne.n	8004964 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004948:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494e:	0099      	lsls	r1, r3, #2
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	440a      	add	r2, r1
 800495a:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	429a      	cmp	r2, r3
 800496e:	d112      	bne.n	8004996 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b02      	cmp	r3, #2
 800498c:	d103      	bne.n	8004996 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8004996:	bf00      	nop
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d009      	beq.n	80049ca <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f7ff f87b 	bl	8003ac6 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80049e0:	f7ff fbec 	bl	80041bc <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e37f      	b.n	80050f0 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a66      	ldr	r2, [pc, #408]	; (8004b90 <HAL_DMA_Init+0x1b8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d04a      	beq.n	8004a90 <HAL_DMA_Init+0xb8>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a65      	ldr	r2, [pc, #404]	; (8004b94 <HAL_DMA_Init+0x1bc>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d045      	beq.n	8004a90 <HAL_DMA_Init+0xb8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a63      	ldr	r2, [pc, #396]	; (8004b98 <HAL_DMA_Init+0x1c0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d040      	beq.n	8004a90 <HAL_DMA_Init+0xb8>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a62      	ldr	r2, [pc, #392]	; (8004b9c <HAL_DMA_Init+0x1c4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d03b      	beq.n	8004a90 <HAL_DMA_Init+0xb8>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a60      	ldr	r2, [pc, #384]	; (8004ba0 <HAL_DMA_Init+0x1c8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d036      	beq.n	8004a90 <HAL_DMA_Init+0xb8>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a5f      	ldr	r2, [pc, #380]	; (8004ba4 <HAL_DMA_Init+0x1cc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d031      	beq.n	8004a90 <HAL_DMA_Init+0xb8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a5d      	ldr	r2, [pc, #372]	; (8004ba8 <HAL_DMA_Init+0x1d0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d02c      	beq.n	8004a90 <HAL_DMA_Init+0xb8>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a5c      	ldr	r2, [pc, #368]	; (8004bac <HAL_DMA_Init+0x1d4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d027      	beq.n	8004a90 <HAL_DMA_Init+0xb8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a5a      	ldr	r2, [pc, #360]	; (8004bb0 <HAL_DMA_Init+0x1d8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d022      	beq.n	8004a90 <HAL_DMA_Init+0xb8>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a59      	ldr	r2, [pc, #356]	; (8004bb4 <HAL_DMA_Init+0x1dc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d01d      	beq.n	8004a90 <HAL_DMA_Init+0xb8>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a57      	ldr	r2, [pc, #348]	; (8004bb8 <HAL_DMA_Init+0x1e0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d018      	beq.n	8004a90 <HAL_DMA_Init+0xb8>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a56      	ldr	r2, [pc, #344]	; (8004bbc <HAL_DMA_Init+0x1e4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d013      	beq.n	8004a90 <HAL_DMA_Init+0xb8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a54      	ldr	r2, [pc, #336]	; (8004bc0 <HAL_DMA_Init+0x1e8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00e      	beq.n	8004a90 <HAL_DMA_Init+0xb8>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a53      	ldr	r2, [pc, #332]	; (8004bc4 <HAL_DMA_Init+0x1ec>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d009      	beq.n	8004a90 <HAL_DMA_Init+0xb8>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a51      	ldr	r2, [pc, #324]	; (8004bc8 <HAL_DMA_Init+0x1f0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d004      	beq.n	8004a90 <HAL_DMA_Init+0xb8>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a50      	ldr	r2, [pc, #320]	; (8004bcc <HAL_DMA_Init+0x1f4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d101      	bne.n	8004a94 <HAL_DMA_Init+0xbc>
 8004a90:	2301      	movs	r3, #1
 8004a92:	e000      	b.n	8004a96 <HAL_DMA_Init+0xbe>
 8004a94:	2300      	movs	r3, #0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 813c 	beq.w	8004d14 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a37      	ldr	r2, [pc, #220]	; (8004b90 <HAL_DMA_Init+0x1b8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d04a      	beq.n	8004b4c <HAL_DMA_Init+0x174>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a36      	ldr	r2, [pc, #216]	; (8004b94 <HAL_DMA_Init+0x1bc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d045      	beq.n	8004b4c <HAL_DMA_Init+0x174>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a34      	ldr	r2, [pc, #208]	; (8004b98 <HAL_DMA_Init+0x1c0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d040      	beq.n	8004b4c <HAL_DMA_Init+0x174>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a33      	ldr	r2, [pc, #204]	; (8004b9c <HAL_DMA_Init+0x1c4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d03b      	beq.n	8004b4c <HAL_DMA_Init+0x174>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a31      	ldr	r2, [pc, #196]	; (8004ba0 <HAL_DMA_Init+0x1c8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d036      	beq.n	8004b4c <HAL_DMA_Init+0x174>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a30      	ldr	r2, [pc, #192]	; (8004ba4 <HAL_DMA_Init+0x1cc>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d031      	beq.n	8004b4c <HAL_DMA_Init+0x174>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a2e      	ldr	r2, [pc, #184]	; (8004ba8 <HAL_DMA_Init+0x1d0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d02c      	beq.n	8004b4c <HAL_DMA_Init+0x174>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a2d      	ldr	r2, [pc, #180]	; (8004bac <HAL_DMA_Init+0x1d4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d027      	beq.n	8004b4c <HAL_DMA_Init+0x174>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a2b      	ldr	r2, [pc, #172]	; (8004bb0 <HAL_DMA_Init+0x1d8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d022      	beq.n	8004b4c <HAL_DMA_Init+0x174>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a2a      	ldr	r2, [pc, #168]	; (8004bb4 <HAL_DMA_Init+0x1dc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d01d      	beq.n	8004b4c <HAL_DMA_Init+0x174>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a28      	ldr	r2, [pc, #160]	; (8004bb8 <HAL_DMA_Init+0x1e0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d018      	beq.n	8004b4c <HAL_DMA_Init+0x174>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a27      	ldr	r2, [pc, #156]	; (8004bbc <HAL_DMA_Init+0x1e4>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d013      	beq.n	8004b4c <HAL_DMA_Init+0x174>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a25      	ldr	r2, [pc, #148]	; (8004bc0 <HAL_DMA_Init+0x1e8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00e      	beq.n	8004b4c <HAL_DMA_Init+0x174>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a24      	ldr	r2, [pc, #144]	; (8004bc4 <HAL_DMA_Init+0x1ec>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d009      	beq.n	8004b4c <HAL_DMA_Init+0x174>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a22      	ldr	r2, [pc, #136]	; (8004bc8 <HAL_DMA_Init+0x1f0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d004      	beq.n	8004b4c <HAL_DMA_Init+0x174>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a21      	ldr	r2, [pc, #132]	; (8004bcc <HAL_DMA_Init+0x1f4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d108      	bne.n	8004b5e <HAL_DMA_Init+0x186>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0201 	bic.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	e007      	b.n	8004b6e <HAL_DMA_Init+0x196>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0201 	bic.w	r2, r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b6e:	e02f      	b.n	8004bd0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b70:	f7ff fb24 	bl	80041bc <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b05      	cmp	r3, #5
 8004b7c:	d928      	bls.n	8004bd0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2203      	movs	r2, #3
 8004b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e2af      	b.n	80050f0 <HAL_DMA_Init+0x718>
 8004b90:	40020010 	.word	0x40020010
 8004b94:	40020028 	.word	0x40020028
 8004b98:	40020040 	.word	0x40020040
 8004b9c:	40020058 	.word	0x40020058
 8004ba0:	40020070 	.word	0x40020070
 8004ba4:	40020088 	.word	0x40020088
 8004ba8:	400200a0 	.word	0x400200a0
 8004bac:	400200b8 	.word	0x400200b8
 8004bb0:	40020410 	.word	0x40020410
 8004bb4:	40020428 	.word	0x40020428
 8004bb8:	40020440 	.word	0x40020440
 8004bbc:	40020458 	.word	0x40020458
 8004bc0:	40020470 	.word	0x40020470
 8004bc4:	40020488 	.word	0x40020488
 8004bc8:	400204a0 	.word	0x400204a0
 8004bcc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1c8      	bne.n	8004b70 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4b73      	ldr	r3, [pc, #460]	; (8004db8 <HAL_DMA_Init+0x3e0>)
 8004bea:	4013      	ands	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004bf6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c02:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c0e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d107      	bne.n	8004c34 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b28      	cmp	r3, #40	; 0x28
 8004c3a:	d903      	bls.n	8004c44 <HAL_DMA_Init+0x26c>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b2e      	cmp	r3, #46	; 0x2e
 8004c42:	d91f      	bls.n	8004c84 <HAL_DMA_Init+0x2ac>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b3e      	cmp	r3, #62	; 0x3e
 8004c4a:	d903      	bls.n	8004c54 <HAL_DMA_Init+0x27c>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b42      	cmp	r3, #66	; 0x42
 8004c52:	d917      	bls.n	8004c84 <HAL_DMA_Init+0x2ac>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b46      	cmp	r3, #70	; 0x46
 8004c5a:	d903      	bls.n	8004c64 <HAL_DMA_Init+0x28c>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b48      	cmp	r3, #72	; 0x48
 8004c62:	d90f      	bls.n	8004c84 <HAL_DMA_Init+0x2ac>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2b4e      	cmp	r3, #78	; 0x4e
 8004c6a:	d903      	bls.n	8004c74 <HAL_DMA_Init+0x29c>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b52      	cmp	r3, #82	; 0x52
 8004c72:	d907      	bls.n	8004c84 <HAL_DMA_Init+0x2ac>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b73      	cmp	r3, #115	; 0x73
 8004c7a:	d905      	bls.n	8004c88 <HAL_DMA_Init+0x2b0>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b77      	cmp	r3, #119	; 0x77
 8004c82:	d801      	bhi.n	8004c88 <HAL_DMA_Init+0x2b0>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <HAL_DMA_Init+0x2b2>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c94:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f023 0307 	bic.w	r3, r3, #7
 8004cac:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d117      	bne.n	8004cf0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00e      	beq.n	8004cf0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f002 fbd6 	bl	8007484 <DMA_CheckFifoParam>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d008      	beq.n	8004cf0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2240      	movs	r2, #64	; 0x40
 8004ce2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e1ff      	b.n	80050f0 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f002 fb11 	bl	8007320 <DMA_CalcBaseAndBitshift>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d06:	f003 031f 	and.w	r3, r3, #31
 8004d0a:	223f      	movs	r2, #63	; 0x3f
 8004d0c:	409a      	lsls	r2, r3
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	609a      	str	r2, [r3, #8]
 8004d12:	e0fe      	b.n	8004f12 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a28      	ldr	r2, [pc, #160]	; (8004dbc <HAL_DMA_Init+0x3e4>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d04a      	beq.n	8004db4 <HAL_DMA_Init+0x3dc>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a27      	ldr	r2, [pc, #156]	; (8004dc0 <HAL_DMA_Init+0x3e8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d045      	beq.n	8004db4 <HAL_DMA_Init+0x3dc>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a25      	ldr	r2, [pc, #148]	; (8004dc4 <HAL_DMA_Init+0x3ec>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d040      	beq.n	8004db4 <HAL_DMA_Init+0x3dc>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a24      	ldr	r2, [pc, #144]	; (8004dc8 <HAL_DMA_Init+0x3f0>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d03b      	beq.n	8004db4 <HAL_DMA_Init+0x3dc>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a22      	ldr	r2, [pc, #136]	; (8004dcc <HAL_DMA_Init+0x3f4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d036      	beq.n	8004db4 <HAL_DMA_Init+0x3dc>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a21      	ldr	r2, [pc, #132]	; (8004dd0 <HAL_DMA_Init+0x3f8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d031      	beq.n	8004db4 <HAL_DMA_Init+0x3dc>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1f      	ldr	r2, [pc, #124]	; (8004dd4 <HAL_DMA_Init+0x3fc>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d02c      	beq.n	8004db4 <HAL_DMA_Init+0x3dc>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1e      	ldr	r2, [pc, #120]	; (8004dd8 <HAL_DMA_Init+0x400>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d027      	beq.n	8004db4 <HAL_DMA_Init+0x3dc>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1c      	ldr	r2, [pc, #112]	; (8004ddc <HAL_DMA_Init+0x404>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d022      	beq.n	8004db4 <HAL_DMA_Init+0x3dc>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1b      	ldr	r2, [pc, #108]	; (8004de0 <HAL_DMA_Init+0x408>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d01d      	beq.n	8004db4 <HAL_DMA_Init+0x3dc>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <HAL_DMA_Init+0x40c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d018      	beq.n	8004db4 <HAL_DMA_Init+0x3dc>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a18      	ldr	r2, [pc, #96]	; (8004de8 <HAL_DMA_Init+0x410>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d013      	beq.n	8004db4 <HAL_DMA_Init+0x3dc>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a16      	ldr	r2, [pc, #88]	; (8004dec <HAL_DMA_Init+0x414>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00e      	beq.n	8004db4 <HAL_DMA_Init+0x3dc>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a15      	ldr	r2, [pc, #84]	; (8004df0 <HAL_DMA_Init+0x418>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d009      	beq.n	8004db4 <HAL_DMA_Init+0x3dc>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a13      	ldr	r2, [pc, #76]	; (8004df4 <HAL_DMA_Init+0x41c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <HAL_DMA_Init+0x3dc>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a12      	ldr	r2, [pc, #72]	; (8004df8 <HAL_DMA_Init+0x420>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d123      	bne.n	8004dfc <HAL_DMA_Init+0x424>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e022      	b.n	8004dfe <HAL_DMA_Init+0x426>
 8004db8:	fe10803f 	.word	0xfe10803f
 8004dbc:	48022c08 	.word	0x48022c08
 8004dc0:	48022c1c 	.word	0x48022c1c
 8004dc4:	48022c30 	.word	0x48022c30
 8004dc8:	48022c44 	.word	0x48022c44
 8004dcc:	48022c58 	.word	0x48022c58
 8004dd0:	48022c6c 	.word	0x48022c6c
 8004dd4:	48022c80 	.word	0x48022c80
 8004dd8:	48022c94 	.word	0x48022c94
 8004ddc:	58025408 	.word	0x58025408
 8004de0:	5802541c 	.word	0x5802541c
 8004de4:	58025430 	.word	0x58025430
 8004de8:	58025444 	.word	0x58025444
 8004dec:	58025458 	.word	0x58025458
 8004df0:	5802546c 	.word	0x5802546c
 8004df4:	58025480 	.word	0x58025480
 8004df8:	58025494 	.word	0x58025494
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d07e      	beq.n	8004f00 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a80      	ldr	r2, [pc, #512]	; (8005008 <HAL_DMA_Init+0x630>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d021      	beq.n	8004e50 <HAL_DMA_Init+0x478>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a7e      	ldr	r2, [pc, #504]	; (800500c <HAL_DMA_Init+0x634>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d01c      	beq.n	8004e50 <HAL_DMA_Init+0x478>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a7d      	ldr	r2, [pc, #500]	; (8005010 <HAL_DMA_Init+0x638>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d017      	beq.n	8004e50 <HAL_DMA_Init+0x478>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a7b      	ldr	r2, [pc, #492]	; (8005014 <HAL_DMA_Init+0x63c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d012      	beq.n	8004e50 <HAL_DMA_Init+0x478>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a7a      	ldr	r2, [pc, #488]	; (8005018 <HAL_DMA_Init+0x640>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00d      	beq.n	8004e50 <HAL_DMA_Init+0x478>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a78      	ldr	r2, [pc, #480]	; (800501c <HAL_DMA_Init+0x644>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d008      	beq.n	8004e50 <HAL_DMA_Init+0x478>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a77      	ldr	r2, [pc, #476]	; (8005020 <HAL_DMA_Init+0x648>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d003      	beq.n	8004e50 <HAL_DMA_Init+0x478>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a75      	ldr	r2, [pc, #468]	; (8005024 <HAL_DMA_Init+0x64c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2202      	movs	r2, #2
 8004e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4b6e      	ldr	r3, [pc, #440]	; (8005028 <HAL_DMA_Init+0x650>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b40      	cmp	r3, #64	; 0x40
 8004e78:	d008      	beq.n	8004e8c <HAL_DMA_Init+0x4b4>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b80      	cmp	r3, #128	; 0x80
 8004e80:	d102      	bne.n	8004e88 <HAL_DMA_Init+0x4b0>
 8004e82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e86:	e002      	b.n	8004e8e <HAL_DMA_Init+0x4b6>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e000      	b.n	8004e8e <HAL_DMA_Init+0x4b6>
 8004e8c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68d2      	ldr	r2, [r2, #12]
 8004e92:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ea4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004eac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004eb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ebc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4b56      	ldr	r3, [pc, #344]	; (800502c <HAL_DMA_Init+0x654>)
 8004ed4:	4413      	add	r3, r2
 8004ed6:	4a56      	ldr	r2, [pc, #344]	; (8005030 <HAL_DMA_Init+0x658>)
 8004ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8004edc:	091b      	lsrs	r3, r3, #4
 8004ede:	009a      	lsls	r2, r3, #2
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f002 fa1b 	bl	8007320 <DMA_CalcBaseAndBitshift>
 8004eea:	4603      	mov	r3, r0
 8004eec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef2:	f003 031f 	and.w	r3, r3, #31
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	409a      	lsls	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	605a      	str	r2, [r3, #4]
 8004efe:	e008      	b.n	8004f12 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2240      	movs	r2, #64	; 0x40
 8004f04:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2203      	movs	r2, #3
 8004f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e0ee      	b.n	80050f0 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a47      	ldr	r2, [pc, #284]	; (8005034 <HAL_DMA_Init+0x65c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d072      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a45      	ldr	r2, [pc, #276]	; (8005038 <HAL_DMA_Init+0x660>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d06d      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a44      	ldr	r2, [pc, #272]	; (800503c <HAL_DMA_Init+0x664>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d068      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a42      	ldr	r2, [pc, #264]	; (8005040 <HAL_DMA_Init+0x668>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d063      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a41      	ldr	r2, [pc, #260]	; (8005044 <HAL_DMA_Init+0x66c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d05e      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a3f      	ldr	r2, [pc, #252]	; (8005048 <HAL_DMA_Init+0x670>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d059      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a3e      	ldr	r2, [pc, #248]	; (800504c <HAL_DMA_Init+0x674>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d054      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a3c      	ldr	r2, [pc, #240]	; (8005050 <HAL_DMA_Init+0x678>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d04f      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a3b      	ldr	r2, [pc, #236]	; (8005054 <HAL_DMA_Init+0x67c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d04a      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a39      	ldr	r2, [pc, #228]	; (8005058 <HAL_DMA_Init+0x680>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d045      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a38      	ldr	r2, [pc, #224]	; (800505c <HAL_DMA_Init+0x684>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d040      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a36      	ldr	r2, [pc, #216]	; (8005060 <HAL_DMA_Init+0x688>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d03b      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a35      	ldr	r2, [pc, #212]	; (8005064 <HAL_DMA_Init+0x68c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d036      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a33      	ldr	r2, [pc, #204]	; (8005068 <HAL_DMA_Init+0x690>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d031      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a32      	ldr	r2, [pc, #200]	; (800506c <HAL_DMA_Init+0x694>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d02c      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a30      	ldr	r2, [pc, #192]	; (8005070 <HAL_DMA_Init+0x698>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d027      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a14      	ldr	r2, [pc, #80]	; (8005008 <HAL_DMA_Init+0x630>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d022      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a12      	ldr	r2, [pc, #72]	; (800500c <HAL_DMA_Init+0x634>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d01d      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a11      	ldr	r2, [pc, #68]	; (8005010 <HAL_DMA_Init+0x638>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d018      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a0f      	ldr	r2, [pc, #60]	; (8005014 <HAL_DMA_Init+0x63c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d013      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a0e      	ldr	r2, [pc, #56]	; (8005018 <HAL_DMA_Init+0x640>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00e      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a0c      	ldr	r2, [pc, #48]	; (800501c <HAL_DMA_Init+0x644>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d009      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a0b      	ldr	r2, [pc, #44]	; (8005020 <HAL_DMA_Init+0x648>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d004      	beq.n	8005002 <HAL_DMA_Init+0x62a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a09      	ldr	r2, [pc, #36]	; (8005024 <HAL_DMA_Init+0x64c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d138      	bne.n	8005074 <HAL_DMA_Init+0x69c>
 8005002:	2301      	movs	r3, #1
 8005004:	e037      	b.n	8005076 <HAL_DMA_Init+0x69e>
 8005006:	bf00      	nop
 8005008:	58025408 	.word	0x58025408
 800500c:	5802541c 	.word	0x5802541c
 8005010:	58025430 	.word	0x58025430
 8005014:	58025444 	.word	0x58025444
 8005018:	58025458 	.word	0x58025458
 800501c:	5802546c 	.word	0x5802546c
 8005020:	58025480 	.word	0x58025480
 8005024:	58025494 	.word	0x58025494
 8005028:	fffe000f 	.word	0xfffe000f
 800502c:	a7fdabf8 	.word	0xa7fdabf8
 8005030:	cccccccd 	.word	0xcccccccd
 8005034:	40020010 	.word	0x40020010
 8005038:	40020028 	.word	0x40020028
 800503c:	40020040 	.word	0x40020040
 8005040:	40020058 	.word	0x40020058
 8005044:	40020070 	.word	0x40020070
 8005048:	40020088 	.word	0x40020088
 800504c:	400200a0 	.word	0x400200a0
 8005050:	400200b8 	.word	0x400200b8
 8005054:	40020410 	.word	0x40020410
 8005058:	40020428 	.word	0x40020428
 800505c:	40020440 	.word	0x40020440
 8005060:	40020458 	.word	0x40020458
 8005064:	40020470 	.word	0x40020470
 8005068:	40020488 	.word	0x40020488
 800506c:	400204a0 	.word	0x400204a0
 8005070:	400204b8 	.word	0x400204b8
 8005074:	2300      	movs	r3, #0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d032      	beq.n	80050e0 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f002 fa7e 	bl	800757c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b80      	cmp	r3, #128	; 0x80
 8005086:	d102      	bne.n	800508e <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80050a2:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d010      	beq.n	80050ce <HAL_DMA_Init+0x6f6>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d80c      	bhi.n	80050ce <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f002 fafb 	bl	80076b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050ca:	605a      	str	r2, [r3, #4]
 80050cc:	e008      	b.n	80050e0 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e226      	b.n	8005562 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_DMA_Start_IT+0x2a>
 800511e:	2302      	movs	r3, #2
 8005120:	e21f      	b.n	8005562 <HAL_DMA_Start_IT+0x46a>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b01      	cmp	r3, #1
 8005134:	f040 820a 	bne.w	800554c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a68      	ldr	r2, [pc, #416]	; (80052ec <HAL_DMA_Start_IT+0x1f4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d04a      	beq.n	80051e6 <HAL_DMA_Start_IT+0xee>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a66      	ldr	r2, [pc, #408]	; (80052f0 <HAL_DMA_Start_IT+0x1f8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d045      	beq.n	80051e6 <HAL_DMA_Start_IT+0xee>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a65      	ldr	r2, [pc, #404]	; (80052f4 <HAL_DMA_Start_IT+0x1fc>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d040      	beq.n	80051e6 <HAL_DMA_Start_IT+0xee>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a63      	ldr	r2, [pc, #396]	; (80052f8 <HAL_DMA_Start_IT+0x200>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d03b      	beq.n	80051e6 <HAL_DMA_Start_IT+0xee>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a62      	ldr	r2, [pc, #392]	; (80052fc <HAL_DMA_Start_IT+0x204>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d036      	beq.n	80051e6 <HAL_DMA_Start_IT+0xee>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a60      	ldr	r2, [pc, #384]	; (8005300 <HAL_DMA_Start_IT+0x208>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d031      	beq.n	80051e6 <HAL_DMA_Start_IT+0xee>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a5f      	ldr	r2, [pc, #380]	; (8005304 <HAL_DMA_Start_IT+0x20c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d02c      	beq.n	80051e6 <HAL_DMA_Start_IT+0xee>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a5d      	ldr	r2, [pc, #372]	; (8005308 <HAL_DMA_Start_IT+0x210>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d027      	beq.n	80051e6 <HAL_DMA_Start_IT+0xee>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a5c      	ldr	r2, [pc, #368]	; (800530c <HAL_DMA_Start_IT+0x214>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d022      	beq.n	80051e6 <HAL_DMA_Start_IT+0xee>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a5a      	ldr	r2, [pc, #360]	; (8005310 <HAL_DMA_Start_IT+0x218>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d01d      	beq.n	80051e6 <HAL_DMA_Start_IT+0xee>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a59      	ldr	r2, [pc, #356]	; (8005314 <HAL_DMA_Start_IT+0x21c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d018      	beq.n	80051e6 <HAL_DMA_Start_IT+0xee>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a57      	ldr	r2, [pc, #348]	; (8005318 <HAL_DMA_Start_IT+0x220>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d013      	beq.n	80051e6 <HAL_DMA_Start_IT+0xee>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a56      	ldr	r2, [pc, #344]	; (800531c <HAL_DMA_Start_IT+0x224>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00e      	beq.n	80051e6 <HAL_DMA_Start_IT+0xee>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a54      	ldr	r2, [pc, #336]	; (8005320 <HAL_DMA_Start_IT+0x228>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d009      	beq.n	80051e6 <HAL_DMA_Start_IT+0xee>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a53      	ldr	r2, [pc, #332]	; (8005324 <HAL_DMA_Start_IT+0x22c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d004      	beq.n	80051e6 <HAL_DMA_Start_IT+0xee>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a51      	ldr	r2, [pc, #324]	; (8005328 <HAL_DMA_Start_IT+0x230>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d108      	bne.n	80051f8 <HAL_DMA_Start_IT+0x100>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0201 	bic.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e007      	b.n	8005208 <HAL_DMA_Start_IT+0x110>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0201 	bic.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	68b9      	ldr	r1, [r7, #8]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f001 fea2 	bl	8006f58 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a34      	ldr	r2, [pc, #208]	; (80052ec <HAL_DMA_Start_IT+0x1f4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d04a      	beq.n	80052b4 <HAL_DMA_Start_IT+0x1bc>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a33      	ldr	r2, [pc, #204]	; (80052f0 <HAL_DMA_Start_IT+0x1f8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d045      	beq.n	80052b4 <HAL_DMA_Start_IT+0x1bc>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a31      	ldr	r2, [pc, #196]	; (80052f4 <HAL_DMA_Start_IT+0x1fc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d040      	beq.n	80052b4 <HAL_DMA_Start_IT+0x1bc>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a30      	ldr	r2, [pc, #192]	; (80052f8 <HAL_DMA_Start_IT+0x200>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d03b      	beq.n	80052b4 <HAL_DMA_Start_IT+0x1bc>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2e      	ldr	r2, [pc, #184]	; (80052fc <HAL_DMA_Start_IT+0x204>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d036      	beq.n	80052b4 <HAL_DMA_Start_IT+0x1bc>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a2d      	ldr	r2, [pc, #180]	; (8005300 <HAL_DMA_Start_IT+0x208>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d031      	beq.n	80052b4 <HAL_DMA_Start_IT+0x1bc>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a2b      	ldr	r2, [pc, #172]	; (8005304 <HAL_DMA_Start_IT+0x20c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d02c      	beq.n	80052b4 <HAL_DMA_Start_IT+0x1bc>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a2a      	ldr	r2, [pc, #168]	; (8005308 <HAL_DMA_Start_IT+0x210>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d027      	beq.n	80052b4 <HAL_DMA_Start_IT+0x1bc>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a28      	ldr	r2, [pc, #160]	; (800530c <HAL_DMA_Start_IT+0x214>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d022      	beq.n	80052b4 <HAL_DMA_Start_IT+0x1bc>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a27      	ldr	r2, [pc, #156]	; (8005310 <HAL_DMA_Start_IT+0x218>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d01d      	beq.n	80052b4 <HAL_DMA_Start_IT+0x1bc>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a25      	ldr	r2, [pc, #148]	; (8005314 <HAL_DMA_Start_IT+0x21c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d018      	beq.n	80052b4 <HAL_DMA_Start_IT+0x1bc>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a24      	ldr	r2, [pc, #144]	; (8005318 <HAL_DMA_Start_IT+0x220>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d013      	beq.n	80052b4 <HAL_DMA_Start_IT+0x1bc>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a22      	ldr	r2, [pc, #136]	; (800531c <HAL_DMA_Start_IT+0x224>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00e      	beq.n	80052b4 <HAL_DMA_Start_IT+0x1bc>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a21      	ldr	r2, [pc, #132]	; (8005320 <HAL_DMA_Start_IT+0x228>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d009      	beq.n	80052b4 <HAL_DMA_Start_IT+0x1bc>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a1f      	ldr	r2, [pc, #124]	; (8005324 <HAL_DMA_Start_IT+0x22c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d004      	beq.n	80052b4 <HAL_DMA_Start_IT+0x1bc>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1e      	ldr	r2, [pc, #120]	; (8005328 <HAL_DMA_Start_IT+0x230>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d101      	bne.n	80052b8 <HAL_DMA_Start_IT+0x1c0>
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <HAL_DMA_Start_IT+0x1c2>
 80052b8:	2300      	movs	r3, #0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d036      	beq.n	800532c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f023 021e 	bic.w	r2, r3, #30
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0216 	orr.w	r2, r2, #22
 80052d0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d03e      	beq.n	8005358 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0208 	orr.w	r2, r2, #8
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	e035      	b.n	8005358 <HAL_DMA_Start_IT+0x260>
 80052ec:	40020010 	.word	0x40020010
 80052f0:	40020028 	.word	0x40020028
 80052f4:	40020040 	.word	0x40020040
 80052f8:	40020058 	.word	0x40020058
 80052fc:	40020070 	.word	0x40020070
 8005300:	40020088 	.word	0x40020088
 8005304:	400200a0 	.word	0x400200a0
 8005308:	400200b8 	.word	0x400200b8
 800530c:	40020410 	.word	0x40020410
 8005310:	40020428 	.word	0x40020428
 8005314:	40020440 	.word	0x40020440
 8005318:	40020458 	.word	0x40020458
 800531c:	40020470 	.word	0x40020470
 8005320:	40020488 	.word	0x40020488
 8005324:	400204a0 	.word	0x400204a0
 8005328:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f023 020e 	bic.w	r2, r3, #14
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 020a 	orr.w	r2, r2, #10
 800533e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0204 	orr.w	r2, r2, #4
 8005356:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a83      	ldr	r2, [pc, #524]	; (800556c <HAL_DMA_Start_IT+0x474>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d072      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a82      	ldr	r2, [pc, #520]	; (8005570 <HAL_DMA_Start_IT+0x478>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d06d      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a80      	ldr	r2, [pc, #512]	; (8005574 <HAL_DMA_Start_IT+0x47c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d068      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a7f      	ldr	r2, [pc, #508]	; (8005578 <HAL_DMA_Start_IT+0x480>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d063      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a7d      	ldr	r2, [pc, #500]	; (800557c <HAL_DMA_Start_IT+0x484>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d05e      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a7c      	ldr	r2, [pc, #496]	; (8005580 <HAL_DMA_Start_IT+0x488>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d059      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a7a      	ldr	r2, [pc, #488]	; (8005584 <HAL_DMA_Start_IT+0x48c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d054      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a79      	ldr	r2, [pc, #484]	; (8005588 <HAL_DMA_Start_IT+0x490>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d04f      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a77      	ldr	r2, [pc, #476]	; (800558c <HAL_DMA_Start_IT+0x494>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d04a      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a76      	ldr	r2, [pc, #472]	; (8005590 <HAL_DMA_Start_IT+0x498>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d045      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a74      	ldr	r2, [pc, #464]	; (8005594 <HAL_DMA_Start_IT+0x49c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d040      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a73      	ldr	r2, [pc, #460]	; (8005598 <HAL_DMA_Start_IT+0x4a0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d03b      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a71      	ldr	r2, [pc, #452]	; (800559c <HAL_DMA_Start_IT+0x4a4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d036      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a70      	ldr	r2, [pc, #448]	; (80055a0 <HAL_DMA_Start_IT+0x4a8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d031      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a6e      	ldr	r2, [pc, #440]	; (80055a4 <HAL_DMA_Start_IT+0x4ac>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d02c      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a6d      	ldr	r2, [pc, #436]	; (80055a8 <HAL_DMA_Start_IT+0x4b0>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d027      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a6b      	ldr	r2, [pc, #428]	; (80055ac <HAL_DMA_Start_IT+0x4b4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d022      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a6a      	ldr	r2, [pc, #424]	; (80055b0 <HAL_DMA_Start_IT+0x4b8>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d01d      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a68      	ldr	r2, [pc, #416]	; (80055b4 <HAL_DMA_Start_IT+0x4bc>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d018      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a67      	ldr	r2, [pc, #412]	; (80055b8 <HAL_DMA_Start_IT+0x4c0>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d013      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a65      	ldr	r2, [pc, #404]	; (80055bc <HAL_DMA_Start_IT+0x4c4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00e      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a64      	ldr	r2, [pc, #400]	; (80055c0 <HAL_DMA_Start_IT+0x4c8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d009      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a62      	ldr	r2, [pc, #392]	; (80055c4 <HAL_DMA_Start_IT+0x4cc>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <HAL_DMA_Start_IT+0x350>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a61      	ldr	r2, [pc, #388]	; (80055c8 <HAL_DMA_Start_IT+0x4d0>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d101      	bne.n	800544c <HAL_DMA_Start_IT+0x354>
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <HAL_DMA_Start_IT+0x356>
 800544c:	2300      	movs	r3, #0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01a      	beq.n	8005488 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d007      	beq.n	8005470 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800546a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800546e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005482:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005486:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a37      	ldr	r2, [pc, #220]	; (800556c <HAL_DMA_Start_IT+0x474>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d04a      	beq.n	8005528 <HAL_DMA_Start_IT+0x430>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a36      	ldr	r2, [pc, #216]	; (8005570 <HAL_DMA_Start_IT+0x478>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d045      	beq.n	8005528 <HAL_DMA_Start_IT+0x430>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a34      	ldr	r2, [pc, #208]	; (8005574 <HAL_DMA_Start_IT+0x47c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d040      	beq.n	8005528 <HAL_DMA_Start_IT+0x430>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a33      	ldr	r2, [pc, #204]	; (8005578 <HAL_DMA_Start_IT+0x480>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d03b      	beq.n	8005528 <HAL_DMA_Start_IT+0x430>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a31      	ldr	r2, [pc, #196]	; (800557c <HAL_DMA_Start_IT+0x484>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d036      	beq.n	8005528 <HAL_DMA_Start_IT+0x430>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a30      	ldr	r2, [pc, #192]	; (8005580 <HAL_DMA_Start_IT+0x488>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d031      	beq.n	8005528 <HAL_DMA_Start_IT+0x430>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a2e      	ldr	r2, [pc, #184]	; (8005584 <HAL_DMA_Start_IT+0x48c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d02c      	beq.n	8005528 <HAL_DMA_Start_IT+0x430>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a2d      	ldr	r2, [pc, #180]	; (8005588 <HAL_DMA_Start_IT+0x490>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d027      	beq.n	8005528 <HAL_DMA_Start_IT+0x430>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a2b      	ldr	r2, [pc, #172]	; (800558c <HAL_DMA_Start_IT+0x494>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d022      	beq.n	8005528 <HAL_DMA_Start_IT+0x430>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a2a      	ldr	r2, [pc, #168]	; (8005590 <HAL_DMA_Start_IT+0x498>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d01d      	beq.n	8005528 <HAL_DMA_Start_IT+0x430>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a28      	ldr	r2, [pc, #160]	; (8005594 <HAL_DMA_Start_IT+0x49c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d018      	beq.n	8005528 <HAL_DMA_Start_IT+0x430>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a27      	ldr	r2, [pc, #156]	; (8005598 <HAL_DMA_Start_IT+0x4a0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d013      	beq.n	8005528 <HAL_DMA_Start_IT+0x430>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a25      	ldr	r2, [pc, #148]	; (800559c <HAL_DMA_Start_IT+0x4a4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00e      	beq.n	8005528 <HAL_DMA_Start_IT+0x430>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a24      	ldr	r2, [pc, #144]	; (80055a0 <HAL_DMA_Start_IT+0x4a8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d009      	beq.n	8005528 <HAL_DMA_Start_IT+0x430>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a22      	ldr	r2, [pc, #136]	; (80055a4 <HAL_DMA_Start_IT+0x4ac>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d004      	beq.n	8005528 <HAL_DMA_Start_IT+0x430>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a21      	ldr	r2, [pc, #132]	; (80055a8 <HAL_DMA_Start_IT+0x4b0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d108      	bne.n	800553a <HAL_DMA_Start_IT+0x442>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	e012      	b.n	8005560 <HAL_DMA_Start_IT+0x468>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f042 0201 	orr.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	e009      	b.n	8005560 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005552:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005560:	7dfb      	ldrb	r3, [r7, #23]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	40020010 	.word	0x40020010
 8005570:	40020028 	.word	0x40020028
 8005574:	40020040 	.word	0x40020040
 8005578:	40020058 	.word	0x40020058
 800557c:	40020070 	.word	0x40020070
 8005580:	40020088 	.word	0x40020088
 8005584:	400200a0 	.word	0x400200a0
 8005588:	400200b8 	.word	0x400200b8
 800558c:	40020410 	.word	0x40020410
 8005590:	40020428 	.word	0x40020428
 8005594:	40020440 	.word	0x40020440
 8005598:	40020458 	.word	0x40020458
 800559c:	40020470 	.word	0x40020470
 80055a0:	40020488 	.word	0x40020488
 80055a4:	400204a0 	.word	0x400204a0
 80055a8:	400204b8 	.word	0x400204b8
 80055ac:	58025408 	.word	0x58025408
 80055b0:	5802541c 	.word	0x5802541c
 80055b4:	58025430 	.word	0x58025430
 80055b8:	58025444 	.word	0x58025444
 80055bc:	58025458 	.word	0x58025458
 80055c0:	5802546c 	.word	0x5802546c
 80055c4:	58025480 	.word	0x58025480
 80055c8:	58025494 	.word	0x58025494

080055cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80055d4:	f7fe fdf2 	bl	80041bc <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e2dc      	b.n	8005b9e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d008      	beq.n	8005602 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2280      	movs	r2, #128	; 0x80
 80055f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e2cd      	b.n	8005b9e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a76      	ldr	r2, [pc, #472]	; (80057e0 <HAL_DMA_Abort+0x214>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d04a      	beq.n	80056a2 <HAL_DMA_Abort+0xd6>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a74      	ldr	r2, [pc, #464]	; (80057e4 <HAL_DMA_Abort+0x218>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d045      	beq.n	80056a2 <HAL_DMA_Abort+0xd6>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a73      	ldr	r2, [pc, #460]	; (80057e8 <HAL_DMA_Abort+0x21c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d040      	beq.n	80056a2 <HAL_DMA_Abort+0xd6>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a71      	ldr	r2, [pc, #452]	; (80057ec <HAL_DMA_Abort+0x220>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d03b      	beq.n	80056a2 <HAL_DMA_Abort+0xd6>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a70      	ldr	r2, [pc, #448]	; (80057f0 <HAL_DMA_Abort+0x224>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d036      	beq.n	80056a2 <HAL_DMA_Abort+0xd6>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a6e      	ldr	r2, [pc, #440]	; (80057f4 <HAL_DMA_Abort+0x228>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d031      	beq.n	80056a2 <HAL_DMA_Abort+0xd6>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a6d      	ldr	r2, [pc, #436]	; (80057f8 <HAL_DMA_Abort+0x22c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d02c      	beq.n	80056a2 <HAL_DMA_Abort+0xd6>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a6b      	ldr	r2, [pc, #428]	; (80057fc <HAL_DMA_Abort+0x230>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d027      	beq.n	80056a2 <HAL_DMA_Abort+0xd6>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a6a      	ldr	r2, [pc, #424]	; (8005800 <HAL_DMA_Abort+0x234>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d022      	beq.n	80056a2 <HAL_DMA_Abort+0xd6>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a68      	ldr	r2, [pc, #416]	; (8005804 <HAL_DMA_Abort+0x238>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d01d      	beq.n	80056a2 <HAL_DMA_Abort+0xd6>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a67      	ldr	r2, [pc, #412]	; (8005808 <HAL_DMA_Abort+0x23c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d018      	beq.n	80056a2 <HAL_DMA_Abort+0xd6>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a65      	ldr	r2, [pc, #404]	; (800580c <HAL_DMA_Abort+0x240>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d013      	beq.n	80056a2 <HAL_DMA_Abort+0xd6>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a64      	ldr	r2, [pc, #400]	; (8005810 <HAL_DMA_Abort+0x244>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00e      	beq.n	80056a2 <HAL_DMA_Abort+0xd6>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a62      	ldr	r2, [pc, #392]	; (8005814 <HAL_DMA_Abort+0x248>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d009      	beq.n	80056a2 <HAL_DMA_Abort+0xd6>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a61      	ldr	r2, [pc, #388]	; (8005818 <HAL_DMA_Abort+0x24c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d004      	beq.n	80056a2 <HAL_DMA_Abort+0xd6>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a5f      	ldr	r2, [pc, #380]	; (800581c <HAL_DMA_Abort+0x250>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d101      	bne.n	80056a6 <HAL_DMA_Abort+0xda>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <HAL_DMA_Abort+0xdc>
 80056a6:	2300      	movs	r3, #0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d013      	beq.n	80056d4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 021e 	bic.w	r2, r2, #30
 80056ba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695a      	ldr	r2, [r3, #20]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056ca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	e00a      	b.n	80056ea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 020e 	bic.w	r2, r2, #14
 80056e2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a3c      	ldr	r2, [pc, #240]	; (80057e0 <HAL_DMA_Abort+0x214>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d072      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a3a      	ldr	r2, [pc, #232]	; (80057e4 <HAL_DMA_Abort+0x218>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d06d      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a39      	ldr	r2, [pc, #228]	; (80057e8 <HAL_DMA_Abort+0x21c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d068      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a37      	ldr	r2, [pc, #220]	; (80057ec <HAL_DMA_Abort+0x220>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d063      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a36      	ldr	r2, [pc, #216]	; (80057f0 <HAL_DMA_Abort+0x224>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d05e      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a34      	ldr	r2, [pc, #208]	; (80057f4 <HAL_DMA_Abort+0x228>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d059      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a33      	ldr	r2, [pc, #204]	; (80057f8 <HAL_DMA_Abort+0x22c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d054      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a31      	ldr	r2, [pc, #196]	; (80057fc <HAL_DMA_Abort+0x230>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d04f      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a30      	ldr	r2, [pc, #192]	; (8005800 <HAL_DMA_Abort+0x234>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d04a      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a2e      	ldr	r2, [pc, #184]	; (8005804 <HAL_DMA_Abort+0x238>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d045      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a2d      	ldr	r2, [pc, #180]	; (8005808 <HAL_DMA_Abort+0x23c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d040      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a2b      	ldr	r2, [pc, #172]	; (800580c <HAL_DMA_Abort+0x240>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d03b      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a2a      	ldr	r2, [pc, #168]	; (8005810 <HAL_DMA_Abort+0x244>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d036      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a28      	ldr	r2, [pc, #160]	; (8005814 <HAL_DMA_Abort+0x248>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d031      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a27      	ldr	r2, [pc, #156]	; (8005818 <HAL_DMA_Abort+0x24c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d02c      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a25      	ldr	r2, [pc, #148]	; (800581c <HAL_DMA_Abort+0x250>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d027      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a24      	ldr	r2, [pc, #144]	; (8005820 <HAL_DMA_Abort+0x254>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d022      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a22      	ldr	r2, [pc, #136]	; (8005824 <HAL_DMA_Abort+0x258>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d01d      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a21      	ldr	r2, [pc, #132]	; (8005828 <HAL_DMA_Abort+0x25c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d018      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1f      	ldr	r2, [pc, #124]	; (800582c <HAL_DMA_Abort+0x260>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1e      	ldr	r2, [pc, #120]	; (8005830 <HAL_DMA_Abort+0x264>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00e      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1c      	ldr	r2, [pc, #112]	; (8005834 <HAL_DMA_Abort+0x268>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1b      	ldr	r2, [pc, #108]	; (8005838 <HAL_DMA_Abort+0x26c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d004      	beq.n	80057da <HAL_DMA_Abort+0x20e>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a19      	ldr	r2, [pc, #100]	; (800583c <HAL_DMA_Abort+0x270>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d132      	bne.n	8005840 <HAL_DMA_Abort+0x274>
 80057da:	2301      	movs	r3, #1
 80057dc:	e031      	b.n	8005842 <HAL_DMA_Abort+0x276>
 80057de:	bf00      	nop
 80057e0:	40020010 	.word	0x40020010
 80057e4:	40020028 	.word	0x40020028
 80057e8:	40020040 	.word	0x40020040
 80057ec:	40020058 	.word	0x40020058
 80057f0:	40020070 	.word	0x40020070
 80057f4:	40020088 	.word	0x40020088
 80057f8:	400200a0 	.word	0x400200a0
 80057fc:	400200b8 	.word	0x400200b8
 8005800:	40020410 	.word	0x40020410
 8005804:	40020428 	.word	0x40020428
 8005808:	40020440 	.word	0x40020440
 800580c:	40020458 	.word	0x40020458
 8005810:	40020470 	.word	0x40020470
 8005814:	40020488 	.word	0x40020488
 8005818:	400204a0 	.word	0x400204a0
 800581c:	400204b8 	.word	0x400204b8
 8005820:	58025408 	.word	0x58025408
 8005824:	5802541c 	.word	0x5802541c
 8005828:	58025430 	.word	0x58025430
 800582c:	58025444 	.word	0x58025444
 8005830:	58025458 	.word	0x58025458
 8005834:	5802546c 	.word	0x5802546c
 8005838:	58025480 	.word	0x58025480
 800583c:	58025494 	.word	0x58025494
 8005840:	2300      	movs	r3, #0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d007      	beq.n	8005856 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005854:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a6d      	ldr	r2, [pc, #436]	; (8005a10 <HAL_DMA_Abort+0x444>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d04a      	beq.n	80058f6 <HAL_DMA_Abort+0x32a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a6b      	ldr	r2, [pc, #428]	; (8005a14 <HAL_DMA_Abort+0x448>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d045      	beq.n	80058f6 <HAL_DMA_Abort+0x32a>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a6a      	ldr	r2, [pc, #424]	; (8005a18 <HAL_DMA_Abort+0x44c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d040      	beq.n	80058f6 <HAL_DMA_Abort+0x32a>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a68      	ldr	r2, [pc, #416]	; (8005a1c <HAL_DMA_Abort+0x450>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d03b      	beq.n	80058f6 <HAL_DMA_Abort+0x32a>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a67      	ldr	r2, [pc, #412]	; (8005a20 <HAL_DMA_Abort+0x454>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d036      	beq.n	80058f6 <HAL_DMA_Abort+0x32a>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a65      	ldr	r2, [pc, #404]	; (8005a24 <HAL_DMA_Abort+0x458>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d031      	beq.n	80058f6 <HAL_DMA_Abort+0x32a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a64      	ldr	r2, [pc, #400]	; (8005a28 <HAL_DMA_Abort+0x45c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d02c      	beq.n	80058f6 <HAL_DMA_Abort+0x32a>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a62      	ldr	r2, [pc, #392]	; (8005a2c <HAL_DMA_Abort+0x460>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d027      	beq.n	80058f6 <HAL_DMA_Abort+0x32a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a61      	ldr	r2, [pc, #388]	; (8005a30 <HAL_DMA_Abort+0x464>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d022      	beq.n	80058f6 <HAL_DMA_Abort+0x32a>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a5f      	ldr	r2, [pc, #380]	; (8005a34 <HAL_DMA_Abort+0x468>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01d      	beq.n	80058f6 <HAL_DMA_Abort+0x32a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a5e      	ldr	r2, [pc, #376]	; (8005a38 <HAL_DMA_Abort+0x46c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d018      	beq.n	80058f6 <HAL_DMA_Abort+0x32a>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a5c      	ldr	r2, [pc, #368]	; (8005a3c <HAL_DMA_Abort+0x470>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <HAL_DMA_Abort+0x32a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a5b      	ldr	r2, [pc, #364]	; (8005a40 <HAL_DMA_Abort+0x474>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00e      	beq.n	80058f6 <HAL_DMA_Abort+0x32a>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a59      	ldr	r2, [pc, #356]	; (8005a44 <HAL_DMA_Abort+0x478>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d009      	beq.n	80058f6 <HAL_DMA_Abort+0x32a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a58      	ldr	r2, [pc, #352]	; (8005a48 <HAL_DMA_Abort+0x47c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d004      	beq.n	80058f6 <HAL_DMA_Abort+0x32a>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a56      	ldr	r2, [pc, #344]	; (8005a4c <HAL_DMA_Abort+0x480>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d108      	bne.n	8005908 <HAL_DMA_Abort+0x33c>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0201 	bic.w	r2, r2, #1
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	e007      	b.n	8005918 <HAL_DMA_Abort+0x34c>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005918:	e013      	b.n	8005942 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800591a:	f7fe fc4f 	bl	80041bc <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b05      	cmp	r3, #5
 8005926:	d90c      	bls.n	8005942 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2220      	movs	r2, #32
 800592c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2203      	movs	r2, #3
 8005932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e12d      	b.n	8005b9e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e5      	bne.n	800591a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a2f      	ldr	r2, [pc, #188]	; (8005a10 <HAL_DMA_Abort+0x444>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d04a      	beq.n	80059ee <HAL_DMA_Abort+0x422>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a2d      	ldr	r2, [pc, #180]	; (8005a14 <HAL_DMA_Abort+0x448>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d045      	beq.n	80059ee <HAL_DMA_Abort+0x422>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a2c      	ldr	r2, [pc, #176]	; (8005a18 <HAL_DMA_Abort+0x44c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d040      	beq.n	80059ee <HAL_DMA_Abort+0x422>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a2a      	ldr	r2, [pc, #168]	; (8005a1c <HAL_DMA_Abort+0x450>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d03b      	beq.n	80059ee <HAL_DMA_Abort+0x422>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a29      	ldr	r2, [pc, #164]	; (8005a20 <HAL_DMA_Abort+0x454>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d036      	beq.n	80059ee <HAL_DMA_Abort+0x422>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a27      	ldr	r2, [pc, #156]	; (8005a24 <HAL_DMA_Abort+0x458>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d031      	beq.n	80059ee <HAL_DMA_Abort+0x422>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a26      	ldr	r2, [pc, #152]	; (8005a28 <HAL_DMA_Abort+0x45c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d02c      	beq.n	80059ee <HAL_DMA_Abort+0x422>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a24      	ldr	r2, [pc, #144]	; (8005a2c <HAL_DMA_Abort+0x460>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d027      	beq.n	80059ee <HAL_DMA_Abort+0x422>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a23      	ldr	r2, [pc, #140]	; (8005a30 <HAL_DMA_Abort+0x464>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d022      	beq.n	80059ee <HAL_DMA_Abort+0x422>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a21      	ldr	r2, [pc, #132]	; (8005a34 <HAL_DMA_Abort+0x468>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d01d      	beq.n	80059ee <HAL_DMA_Abort+0x422>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a20      	ldr	r2, [pc, #128]	; (8005a38 <HAL_DMA_Abort+0x46c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d018      	beq.n	80059ee <HAL_DMA_Abort+0x422>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a1e      	ldr	r2, [pc, #120]	; (8005a3c <HAL_DMA_Abort+0x470>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d013      	beq.n	80059ee <HAL_DMA_Abort+0x422>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a1d      	ldr	r2, [pc, #116]	; (8005a40 <HAL_DMA_Abort+0x474>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00e      	beq.n	80059ee <HAL_DMA_Abort+0x422>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a1b      	ldr	r2, [pc, #108]	; (8005a44 <HAL_DMA_Abort+0x478>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d009      	beq.n	80059ee <HAL_DMA_Abort+0x422>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1a      	ldr	r2, [pc, #104]	; (8005a48 <HAL_DMA_Abort+0x47c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d004      	beq.n	80059ee <HAL_DMA_Abort+0x422>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a18      	ldr	r2, [pc, #96]	; (8005a4c <HAL_DMA_Abort+0x480>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d101      	bne.n	80059f2 <HAL_DMA_Abort+0x426>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <HAL_DMA_Abort+0x428>
 80059f2:	2300      	movs	r3, #0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d02b      	beq.n	8005a50 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	223f      	movs	r2, #63	; 0x3f
 8005a08:	409a      	lsls	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	609a      	str	r2, [r3, #8]
 8005a0e:	e02a      	b.n	8005a66 <HAL_DMA_Abort+0x49a>
 8005a10:	40020010 	.word	0x40020010
 8005a14:	40020028 	.word	0x40020028
 8005a18:	40020040 	.word	0x40020040
 8005a1c:	40020058 	.word	0x40020058
 8005a20:	40020070 	.word	0x40020070
 8005a24:	40020088 	.word	0x40020088
 8005a28:	400200a0 	.word	0x400200a0
 8005a2c:	400200b8 	.word	0x400200b8
 8005a30:	40020410 	.word	0x40020410
 8005a34:	40020428 	.word	0x40020428
 8005a38:	40020440 	.word	0x40020440
 8005a3c:	40020458 	.word	0x40020458
 8005a40:	40020470 	.word	0x40020470
 8005a44:	40020488 	.word	0x40020488
 8005a48:	400204a0 	.word	0x400204a0
 8005a4c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a54:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a5a:	f003 031f 	and.w	r3, r3, #31
 8005a5e:	2201      	movs	r2, #1
 8005a60:	409a      	lsls	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a4f      	ldr	r2, [pc, #316]	; (8005ba8 <HAL_DMA_Abort+0x5dc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d072      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a4d      	ldr	r2, [pc, #308]	; (8005bac <HAL_DMA_Abort+0x5e0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d06d      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a4c      	ldr	r2, [pc, #304]	; (8005bb0 <HAL_DMA_Abort+0x5e4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d068      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a4a      	ldr	r2, [pc, #296]	; (8005bb4 <HAL_DMA_Abort+0x5e8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d063      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a49      	ldr	r2, [pc, #292]	; (8005bb8 <HAL_DMA_Abort+0x5ec>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d05e      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a47      	ldr	r2, [pc, #284]	; (8005bbc <HAL_DMA_Abort+0x5f0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d059      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a46      	ldr	r2, [pc, #280]	; (8005bc0 <HAL_DMA_Abort+0x5f4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d054      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a44      	ldr	r2, [pc, #272]	; (8005bc4 <HAL_DMA_Abort+0x5f8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d04f      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a43      	ldr	r2, [pc, #268]	; (8005bc8 <HAL_DMA_Abort+0x5fc>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d04a      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a41      	ldr	r2, [pc, #260]	; (8005bcc <HAL_DMA_Abort+0x600>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d045      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a40      	ldr	r2, [pc, #256]	; (8005bd0 <HAL_DMA_Abort+0x604>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d040      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a3e      	ldr	r2, [pc, #248]	; (8005bd4 <HAL_DMA_Abort+0x608>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d03b      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a3d      	ldr	r2, [pc, #244]	; (8005bd8 <HAL_DMA_Abort+0x60c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d036      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a3b      	ldr	r2, [pc, #236]	; (8005bdc <HAL_DMA_Abort+0x610>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d031      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a3a      	ldr	r2, [pc, #232]	; (8005be0 <HAL_DMA_Abort+0x614>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d02c      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a38      	ldr	r2, [pc, #224]	; (8005be4 <HAL_DMA_Abort+0x618>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d027      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a37      	ldr	r2, [pc, #220]	; (8005be8 <HAL_DMA_Abort+0x61c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d022      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a35      	ldr	r2, [pc, #212]	; (8005bec <HAL_DMA_Abort+0x620>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d01d      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a34      	ldr	r2, [pc, #208]	; (8005bf0 <HAL_DMA_Abort+0x624>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d018      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a32      	ldr	r2, [pc, #200]	; (8005bf4 <HAL_DMA_Abort+0x628>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d013      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a31      	ldr	r2, [pc, #196]	; (8005bf8 <HAL_DMA_Abort+0x62c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00e      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a2f      	ldr	r2, [pc, #188]	; (8005bfc <HAL_DMA_Abort+0x630>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d009      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a2e      	ldr	r2, [pc, #184]	; (8005c00 <HAL_DMA_Abort+0x634>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d004      	beq.n	8005b56 <HAL_DMA_Abort+0x58a>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a2c      	ldr	r2, [pc, #176]	; (8005c04 <HAL_DMA_Abort+0x638>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d101      	bne.n	8005b5a <HAL_DMA_Abort+0x58e>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e000      	b.n	8005b5c <HAL_DMA_Abort+0x590>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d015      	beq.n	8005b8c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b68:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00c      	beq.n	8005b8c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b80:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b8a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	40020010 	.word	0x40020010
 8005bac:	40020028 	.word	0x40020028
 8005bb0:	40020040 	.word	0x40020040
 8005bb4:	40020058 	.word	0x40020058
 8005bb8:	40020070 	.word	0x40020070
 8005bbc:	40020088 	.word	0x40020088
 8005bc0:	400200a0 	.word	0x400200a0
 8005bc4:	400200b8 	.word	0x400200b8
 8005bc8:	40020410 	.word	0x40020410
 8005bcc:	40020428 	.word	0x40020428
 8005bd0:	40020440 	.word	0x40020440
 8005bd4:	40020458 	.word	0x40020458
 8005bd8:	40020470 	.word	0x40020470
 8005bdc:	40020488 	.word	0x40020488
 8005be0:	400204a0 	.word	0x400204a0
 8005be4:	400204b8 	.word	0x400204b8
 8005be8:	58025408 	.word	0x58025408
 8005bec:	5802541c 	.word	0x5802541c
 8005bf0:	58025430 	.word	0x58025430
 8005bf4:	58025444 	.word	0x58025444
 8005bf8:	58025458 	.word	0x58025458
 8005bfc:	5802546c 	.word	0x5802546c
 8005c00:	58025480 	.word	0x58025480
 8005c04:	58025494 	.word	0x58025494

08005c08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e237      	b.n	800608a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d004      	beq.n	8005c30 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2280      	movs	r2, #128	; 0x80
 8005c2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e22c      	b.n	800608a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a5c      	ldr	r2, [pc, #368]	; (8005da8 <HAL_DMA_Abort_IT+0x1a0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d04a      	beq.n	8005cd0 <HAL_DMA_Abort_IT+0xc8>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a5b      	ldr	r2, [pc, #364]	; (8005dac <HAL_DMA_Abort_IT+0x1a4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d045      	beq.n	8005cd0 <HAL_DMA_Abort_IT+0xc8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a59      	ldr	r2, [pc, #356]	; (8005db0 <HAL_DMA_Abort_IT+0x1a8>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d040      	beq.n	8005cd0 <HAL_DMA_Abort_IT+0xc8>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a58      	ldr	r2, [pc, #352]	; (8005db4 <HAL_DMA_Abort_IT+0x1ac>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d03b      	beq.n	8005cd0 <HAL_DMA_Abort_IT+0xc8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a56      	ldr	r2, [pc, #344]	; (8005db8 <HAL_DMA_Abort_IT+0x1b0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d036      	beq.n	8005cd0 <HAL_DMA_Abort_IT+0xc8>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a55      	ldr	r2, [pc, #340]	; (8005dbc <HAL_DMA_Abort_IT+0x1b4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d031      	beq.n	8005cd0 <HAL_DMA_Abort_IT+0xc8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a53      	ldr	r2, [pc, #332]	; (8005dc0 <HAL_DMA_Abort_IT+0x1b8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d02c      	beq.n	8005cd0 <HAL_DMA_Abort_IT+0xc8>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a52      	ldr	r2, [pc, #328]	; (8005dc4 <HAL_DMA_Abort_IT+0x1bc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d027      	beq.n	8005cd0 <HAL_DMA_Abort_IT+0xc8>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a50      	ldr	r2, [pc, #320]	; (8005dc8 <HAL_DMA_Abort_IT+0x1c0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d022      	beq.n	8005cd0 <HAL_DMA_Abort_IT+0xc8>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a4f      	ldr	r2, [pc, #316]	; (8005dcc <HAL_DMA_Abort_IT+0x1c4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d01d      	beq.n	8005cd0 <HAL_DMA_Abort_IT+0xc8>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a4d      	ldr	r2, [pc, #308]	; (8005dd0 <HAL_DMA_Abort_IT+0x1c8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d018      	beq.n	8005cd0 <HAL_DMA_Abort_IT+0xc8>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a4c      	ldr	r2, [pc, #304]	; (8005dd4 <HAL_DMA_Abort_IT+0x1cc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d013      	beq.n	8005cd0 <HAL_DMA_Abort_IT+0xc8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a4a      	ldr	r2, [pc, #296]	; (8005dd8 <HAL_DMA_Abort_IT+0x1d0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00e      	beq.n	8005cd0 <HAL_DMA_Abort_IT+0xc8>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a49      	ldr	r2, [pc, #292]	; (8005ddc <HAL_DMA_Abort_IT+0x1d4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d009      	beq.n	8005cd0 <HAL_DMA_Abort_IT+0xc8>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a47      	ldr	r2, [pc, #284]	; (8005de0 <HAL_DMA_Abort_IT+0x1d8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d004      	beq.n	8005cd0 <HAL_DMA_Abort_IT+0xc8>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a46      	ldr	r2, [pc, #280]	; (8005de4 <HAL_DMA_Abort_IT+0x1dc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d101      	bne.n	8005cd4 <HAL_DMA_Abort_IT+0xcc>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <HAL_DMA_Abort_IT+0xce>
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 8086 	beq.w	8005de8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2204      	movs	r2, #4
 8005ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a2f      	ldr	r2, [pc, #188]	; (8005da8 <HAL_DMA_Abort_IT+0x1a0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d04a      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x17c>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a2e      	ldr	r2, [pc, #184]	; (8005dac <HAL_DMA_Abort_IT+0x1a4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d045      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x17c>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a2c      	ldr	r2, [pc, #176]	; (8005db0 <HAL_DMA_Abort_IT+0x1a8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d040      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x17c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a2b      	ldr	r2, [pc, #172]	; (8005db4 <HAL_DMA_Abort_IT+0x1ac>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d03b      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x17c>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a29      	ldr	r2, [pc, #164]	; (8005db8 <HAL_DMA_Abort_IT+0x1b0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d036      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x17c>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a28      	ldr	r2, [pc, #160]	; (8005dbc <HAL_DMA_Abort_IT+0x1b4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d031      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x17c>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a26      	ldr	r2, [pc, #152]	; (8005dc0 <HAL_DMA_Abort_IT+0x1b8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d02c      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x17c>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a25      	ldr	r2, [pc, #148]	; (8005dc4 <HAL_DMA_Abort_IT+0x1bc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d027      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x17c>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a23      	ldr	r2, [pc, #140]	; (8005dc8 <HAL_DMA_Abort_IT+0x1c0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d022      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x17c>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a22      	ldr	r2, [pc, #136]	; (8005dcc <HAL_DMA_Abort_IT+0x1c4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d01d      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x17c>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a20      	ldr	r2, [pc, #128]	; (8005dd0 <HAL_DMA_Abort_IT+0x1c8>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d018      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x17c>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a1f      	ldr	r2, [pc, #124]	; (8005dd4 <HAL_DMA_Abort_IT+0x1cc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d013      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x17c>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a1d      	ldr	r2, [pc, #116]	; (8005dd8 <HAL_DMA_Abort_IT+0x1d0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00e      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x17c>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a1c      	ldr	r2, [pc, #112]	; (8005ddc <HAL_DMA_Abort_IT+0x1d4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d009      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x17c>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1a      	ldr	r2, [pc, #104]	; (8005de0 <HAL_DMA_Abort_IT+0x1d8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d004      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x17c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a19      	ldr	r2, [pc, #100]	; (8005de4 <HAL_DMA_Abort_IT+0x1dc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d108      	bne.n	8005d96 <HAL_DMA_Abort_IT+0x18e>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0201 	bic.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	e178      	b.n	8006088 <HAL_DMA_Abort_IT+0x480>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0201 	bic.w	r2, r2, #1
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	e16f      	b.n	8006088 <HAL_DMA_Abort_IT+0x480>
 8005da8:	40020010 	.word	0x40020010
 8005dac:	40020028 	.word	0x40020028
 8005db0:	40020040 	.word	0x40020040
 8005db4:	40020058 	.word	0x40020058
 8005db8:	40020070 	.word	0x40020070
 8005dbc:	40020088 	.word	0x40020088
 8005dc0:	400200a0 	.word	0x400200a0
 8005dc4:	400200b8 	.word	0x400200b8
 8005dc8:	40020410 	.word	0x40020410
 8005dcc:	40020428 	.word	0x40020428
 8005dd0:	40020440 	.word	0x40020440
 8005dd4:	40020458 	.word	0x40020458
 8005dd8:	40020470 	.word	0x40020470
 8005ddc:	40020488 	.word	0x40020488
 8005de0:	400204a0 	.word	0x400204a0
 8005de4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 020e 	bic.w	r2, r2, #14
 8005df6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a6c      	ldr	r2, [pc, #432]	; (8005fb0 <HAL_DMA_Abort_IT+0x3a8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d04a      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x290>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a6b      	ldr	r2, [pc, #428]	; (8005fb4 <HAL_DMA_Abort_IT+0x3ac>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d045      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x290>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a69      	ldr	r2, [pc, #420]	; (8005fb8 <HAL_DMA_Abort_IT+0x3b0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d040      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x290>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a68      	ldr	r2, [pc, #416]	; (8005fbc <HAL_DMA_Abort_IT+0x3b4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d03b      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x290>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a66      	ldr	r2, [pc, #408]	; (8005fc0 <HAL_DMA_Abort_IT+0x3b8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d036      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x290>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a65      	ldr	r2, [pc, #404]	; (8005fc4 <HAL_DMA_Abort_IT+0x3bc>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d031      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x290>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a63      	ldr	r2, [pc, #396]	; (8005fc8 <HAL_DMA_Abort_IT+0x3c0>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d02c      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x290>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a62      	ldr	r2, [pc, #392]	; (8005fcc <HAL_DMA_Abort_IT+0x3c4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d027      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x290>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a60      	ldr	r2, [pc, #384]	; (8005fd0 <HAL_DMA_Abort_IT+0x3c8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d022      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x290>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a5f      	ldr	r2, [pc, #380]	; (8005fd4 <HAL_DMA_Abort_IT+0x3cc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d01d      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x290>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a5d      	ldr	r2, [pc, #372]	; (8005fd8 <HAL_DMA_Abort_IT+0x3d0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d018      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x290>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a5c      	ldr	r2, [pc, #368]	; (8005fdc <HAL_DMA_Abort_IT+0x3d4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d013      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x290>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a5a      	ldr	r2, [pc, #360]	; (8005fe0 <HAL_DMA_Abort_IT+0x3d8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00e      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x290>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a59      	ldr	r2, [pc, #356]	; (8005fe4 <HAL_DMA_Abort_IT+0x3dc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d009      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x290>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a57      	ldr	r2, [pc, #348]	; (8005fe8 <HAL_DMA_Abort_IT+0x3e0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d004      	beq.n	8005e98 <HAL_DMA_Abort_IT+0x290>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a56      	ldr	r2, [pc, #344]	; (8005fec <HAL_DMA_Abort_IT+0x3e4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d108      	bne.n	8005eaa <HAL_DMA_Abort_IT+0x2a2>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0201 	bic.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	e007      	b.n	8005eba <HAL_DMA_Abort_IT+0x2b2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0201 	bic.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a3c      	ldr	r2, [pc, #240]	; (8005fb0 <HAL_DMA_Abort_IT+0x3a8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d072      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a3a      	ldr	r2, [pc, #232]	; (8005fb4 <HAL_DMA_Abort_IT+0x3ac>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d06d      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a39      	ldr	r2, [pc, #228]	; (8005fb8 <HAL_DMA_Abort_IT+0x3b0>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d068      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a37      	ldr	r2, [pc, #220]	; (8005fbc <HAL_DMA_Abort_IT+0x3b4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d063      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a36      	ldr	r2, [pc, #216]	; (8005fc0 <HAL_DMA_Abort_IT+0x3b8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d05e      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a34      	ldr	r2, [pc, #208]	; (8005fc4 <HAL_DMA_Abort_IT+0x3bc>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d059      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a33      	ldr	r2, [pc, #204]	; (8005fc8 <HAL_DMA_Abort_IT+0x3c0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d054      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a31      	ldr	r2, [pc, #196]	; (8005fcc <HAL_DMA_Abort_IT+0x3c4>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d04f      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a30      	ldr	r2, [pc, #192]	; (8005fd0 <HAL_DMA_Abort_IT+0x3c8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d04a      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a2e      	ldr	r2, [pc, #184]	; (8005fd4 <HAL_DMA_Abort_IT+0x3cc>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d045      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a2d      	ldr	r2, [pc, #180]	; (8005fd8 <HAL_DMA_Abort_IT+0x3d0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d040      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a2b      	ldr	r2, [pc, #172]	; (8005fdc <HAL_DMA_Abort_IT+0x3d4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d03b      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a2a      	ldr	r2, [pc, #168]	; (8005fe0 <HAL_DMA_Abort_IT+0x3d8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d036      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a28      	ldr	r2, [pc, #160]	; (8005fe4 <HAL_DMA_Abort_IT+0x3dc>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d031      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a27      	ldr	r2, [pc, #156]	; (8005fe8 <HAL_DMA_Abort_IT+0x3e0>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d02c      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a25      	ldr	r2, [pc, #148]	; (8005fec <HAL_DMA_Abort_IT+0x3e4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d027      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a24      	ldr	r2, [pc, #144]	; (8005ff0 <HAL_DMA_Abort_IT+0x3e8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d022      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a22      	ldr	r2, [pc, #136]	; (8005ff4 <HAL_DMA_Abort_IT+0x3ec>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d01d      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a21      	ldr	r2, [pc, #132]	; (8005ff8 <HAL_DMA_Abort_IT+0x3f0>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d018      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a1f      	ldr	r2, [pc, #124]	; (8005ffc <HAL_DMA_Abort_IT+0x3f4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d013      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1e      	ldr	r2, [pc, #120]	; (8006000 <HAL_DMA_Abort_IT+0x3f8>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d00e      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a1c      	ldr	r2, [pc, #112]	; (8006004 <HAL_DMA_Abort_IT+0x3fc>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d009      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a1b      	ldr	r2, [pc, #108]	; (8006008 <HAL_DMA_Abort_IT+0x400>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d004      	beq.n	8005faa <HAL_DMA_Abort_IT+0x3a2>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a19      	ldr	r2, [pc, #100]	; (800600c <HAL_DMA_Abort_IT+0x404>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d132      	bne.n	8006010 <HAL_DMA_Abort_IT+0x408>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e031      	b.n	8006012 <HAL_DMA_Abort_IT+0x40a>
 8005fae:	bf00      	nop
 8005fb0:	40020010 	.word	0x40020010
 8005fb4:	40020028 	.word	0x40020028
 8005fb8:	40020040 	.word	0x40020040
 8005fbc:	40020058 	.word	0x40020058
 8005fc0:	40020070 	.word	0x40020070
 8005fc4:	40020088 	.word	0x40020088
 8005fc8:	400200a0 	.word	0x400200a0
 8005fcc:	400200b8 	.word	0x400200b8
 8005fd0:	40020410 	.word	0x40020410
 8005fd4:	40020428 	.word	0x40020428
 8005fd8:	40020440 	.word	0x40020440
 8005fdc:	40020458 	.word	0x40020458
 8005fe0:	40020470 	.word	0x40020470
 8005fe4:	40020488 	.word	0x40020488
 8005fe8:	400204a0 	.word	0x400204a0
 8005fec:	400204b8 	.word	0x400204b8
 8005ff0:	58025408 	.word	0x58025408
 8005ff4:	5802541c 	.word	0x5802541c
 8005ff8:	58025430 	.word	0x58025430
 8005ffc:	58025444 	.word	0x58025444
 8006000:	58025458 	.word	0x58025458
 8006004:	5802546c 	.word	0x5802546c
 8006008:	58025480 	.word	0x58025480
 800600c:	58025494 	.word	0x58025494
 8006010:	2300      	movs	r3, #0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d028      	beq.n	8006068 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006024:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006030:	f003 031f 	and.w	r3, r3, #31
 8006034:	2201      	movs	r2, #1
 8006036:	409a      	lsls	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006044:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00c      	beq.n	8006068 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800605c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006066:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop

08006094 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08a      	sub	sp, #40	; 0x28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060a0:	4b67      	ldr	r3, [pc, #412]	; (8006240 <HAL_DMA_IRQHandler+0x1ac>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a67      	ldr	r2, [pc, #412]	; (8006244 <HAL_DMA_IRQHandler+0x1b0>)
 80060a6:	fba2 2303 	umull	r2, r3, r2, r3
 80060aa:	0a9b      	lsrs	r3, r3, #10
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a5f      	ldr	r2, [pc, #380]	; (8006248 <HAL_DMA_IRQHandler+0x1b4>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d04a      	beq.n	8006166 <HAL_DMA_IRQHandler+0xd2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a5d      	ldr	r2, [pc, #372]	; (800624c <HAL_DMA_IRQHandler+0x1b8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d045      	beq.n	8006166 <HAL_DMA_IRQHandler+0xd2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a5c      	ldr	r2, [pc, #368]	; (8006250 <HAL_DMA_IRQHandler+0x1bc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d040      	beq.n	8006166 <HAL_DMA_IRQHandler+0xd2>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a5a      	ldr	r2, [pc, #360]	; (8006254 <HAL_DMA_IRQHandler+0x1c0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d03b      	beq.n	8006166 <HAL_DMA_IRQHandler+0xd2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a59      	ldr	r2, [pc, #356]	; (8006258 <HAL_DMA_IRQHandler+0x1c4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d036      	beq.n	8006166 <HAL_DMA_IRQHandler+0xd2>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a57      	ldr	r2, [pc, #348]	; (800625c <HAL_DMA_IRQHandler+0x1c8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d031      	beq.n	8006166 <HAL_DMA_IRQHandler+0xd2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a56      	ldr	r2, [pc, #344]	; (8006260 <HAL_DMA_IRQHandler+0x1cc>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d02c      	beq.n	8006166 <HAL_DMA_IRQHandler+0xd2>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a54      	ldr	r2, [pc, #336]	; (8006264 <HAL_DMA_IRQHandler+0x1d0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d027      	beq.n	8006166 <HAL_DMA_IRQHandler+0xd2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a53      	ldr	r2, [pc, #332]	; (8006268 <HAL_DMA_IRQHandler+0x1d4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d022      	beq.n	8006166 <HAL_DMA_IRQHandler+0xd2>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a51      	ldr	r2, [pc, #324]	; (800626c <HAL_DMA_IRQHandler+0x1d8>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d01d      	beq.n	8006166 <HAL_DMA_IRQHandler+0xd2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a50      	ldr	r2, [pc, #320]	; (8006270 <HAL_DMA_IRQHandler+0x1dc>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d018      	beq.n	8006166 <HAL_DMA_IRQHandler+0xd2>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a4e      	ldr	r2, [pc, #312]	; (8006274 <HAL_DMA_IRQHandler+0x1e0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d013      	beq.n	8006166 <HAL_DMA_IRQHandler+0xd2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a4d      	ldr	r2, [pc, #308]	; (8006278 <HAL_DMA_IRQHandler+0x1e4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d00e      	beq.n	8006166 <HAL_DMA_IRQHandler+0xd2>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a4b      	ldr	r2, [pc, #300]	; (800627c <HAL_DMA_IRQHandler+0x1e8>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d009      	beq.n	8006166 <HAL_DMA_IRQHandler+0xd2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a4a      	ldr	r2, [pc, #296]	; (8006280 <HAL_DMA_IRQHandler+0x1ec>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d004      	beq.n	8006166 <HAL_DMA_IRQHandler+0xd2>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a48      	ldr	r2, [pc, #288]	; (8006284 <HAL_DMA_IRQHandler+0x1f0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d101      	bne.n	800616a <HAL_DMA_IRQHandler+0xd6>
 8006166:	2301      	movs	r3, #1
 8006168:	e000      	b.n	800616c <HAL_DMA_IRQHandler+0xd8>
 800616a:	2300      	movs	r3, #0
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 842b 	beq.w	80069c8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006176:	f003 031f 	and.w	r3, r3, #31
 800617a:	2208      	movs	r2, #8
 800617c:	409a      	lsls	r2, r3
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	4013      	ands	r3, r2
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 80a2 	beq.w	80062cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a2e      	ldr	r2, [pc, #184]	; (8006248 <HAL_DMA_IRQHandler+0x1b4>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d04a      	beq.n	8006228 <HAL_DMA_IRQHandler+0x194>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a2d      	ldr	r2, [pc, #180]	; (800624c <HAL_DMA_IRQHandler+0x1b8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d045      	beq.n	8006228 <HAL_DMA_IRQHandler+0x194>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a2b      	ldr	r2, [pc, #172]	; (8006250 <HAL_DMA_IRQHandler+0x1bc>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d040      	beq.n	8006228 <HAL_DMA_IRQHandler+0x194>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a2a      	ldr	r2, [pc, #168]	; (8006254 <HAL_DMA_IRQHandler+0x1c0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d03b      	beq.n	8006228 <HAL_DMA_IRQHandler+0x194>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a28      	ldr	r2, [pc, #160]	; (8006258 <HAL_DMA_IRQHandler+0x1c4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d036      	beq.n	8006228 <HAL_DMA_IRQHandler+0x194>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a27      	ldr	r2, [pc, #156]	; (800625c <HAL_DMA_IRQHandler+0x1c8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d031      	beq.n	8006228 <HAL_DMA_IRQHandler+0x194>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a25      	ldr	r2, [pc, #148]	; (8006260 <HAL_DMA_IRQHandler+0x1cc>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d02c      	beq.n	8006228 <HAL_DMA_IRQHandler+0x194>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a24      	ldr	r2, [pc, #144]	; (8006264 <HAL_DMA_IRQHandler+0x1d0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d027      	beq.n	8006228 <HAL_DMA_IRQHandler+0x194>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a22      	ldr	r2, [pc, #136]	; (8006268 <HAL_DMA_IRQHandler+0x1d4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d022      	beq.n	8006228 <HAL_DMA_IRQHandler+0x194>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a21      	ldr	r2, [pc, #132]	; (800626c <HAL_DMA_IRQHandler+0x1d8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d01d      	beq.n	8006228 <HAL_DMA_IRQHandler+0x194>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1f      	ldr	r2, [pc, #124]	; (8006270 <HAL_DMA_IRQHandler+0x1dc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d018      	beq.n	8006228 <HAL_DMA_IRQHandler+0x194>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1e      	ldr	r2, [pc, #120]	; (8006274 <HAL_DMA_IRQHandler+0x1e0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <HAL_DMA_IRQHandler+0x194>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1c      	ldr	r2, [pc, #112]	; (8006278 <HAL_DMA_IRQHandler+0x1e4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00e      	beq.n	8006228 <HAL_DMA_IRQHandler+0x194>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1b      	ldr	r2, [pc, #108]	; (800627c <HAL_DMA_IRQHandler+0x1e8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d009      	beq.n	8006228 <HAL_DMA_IRQHandler+0x194>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a19      	ldr	r2, [pc, #100]	; (8006280 <HAL_DMA_IRQHandler+0x1ec>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_DMA_IRQHandler+0x194>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a18      	ldr	r2, [pc, #96]	; (8006284 <HAL_DMA_IRQHandler+0x1f0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d12f      	bne.n	8006288 <HAL_DMA_IRQHandler+0x1f4>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0304 	and.w	r3, r3, #4
 8006232:	2b00      	cmp	r3, #0
 8006234:	bf14      	ite	ne
 8006236:	2301      	movne	r3, #1
 8006238:	2300      	moveq	r3, #0
 800623a:	b2db      	uxtb	r3, r3
 800623c:	e02e      	b.n	800629c <HAL_DMA_IRQHandler+0x208>
 800623e:	bf00      	nop
 8006240:	24000044 	.word	0x24000044
 8006244:	1b4e81b5 	.word	0x1b4e81b5
 8006248:	40020010 	.word	0x40020010
 800624c:	40020028 	.word	0x40020028
 8006250:	40020040 	.word	0x40020040
 8006254:	40020058 	.word	0x40020058
 8006258:	40020070 	.word	0x40020070
 800625c:	40020088 	.word	0x40020088
 8006260:	400200a0 	.word	0x400200a0
 8006264:	400200b8 	.word	0x400200b8
 8006268:	40020410 	.word	0x40020410
 800626c:	40020428 	.word	0x40020428
 8006270:	40020440 	.word	0x40020440
 8006274:	40020458 	.word	0x40020458
 8006278:	40020470 	.word	0x40020470
 800627c:	40020488 	.word	0x40020488
 8006280:	400204a0 	.word	0x400204a0
 8006284:	400204b8 	.word	0x400204b8
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0308 	and.w	r3, r3, #8
 8006292:	2b00      	cmp	r3, #0
 8006294:	bf14      	ite	ne
 8006296:	2301      	movne	r3, #1
 8006298:	2300      	moveq	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d015      	beq.n	80062cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0204 	bic.w	r2, r2, #4
 80062ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b4:	f003 031f 	and.w	r3, r3, #31
 80062b8:	2208      	movs	r2, #8
 80062ba:	409a      	lsls	r2, r3
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c4:	f043 0201 	orr.w	r2, r3, #1
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d0:	f003 031f 	and.w	r3, r3, #31
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	fa22 f303 	lsr.w	r3, r2, r3
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d06e      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a69      	ldr	r2, [pc, #420]	; (800648c <HAL_DMA_IRQHandler+0x3f8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d04a      	beq.n	8006382 <HAL_DMA_IRQHandler+0x2ee>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a67      	ldr	r2, [pc, #412]	; (8006490 <HAL_DMA_IRQHandler+0x3fc>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d045      	beq.n	8006382 <HAL_DMA_IRQHandler+0x2ee>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a66      	ldr	r2, [pc, #408]	; (8006494 <HAL_DMA_IRQHandler+0x400>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d040      	beq.n	8006382 <HAL_DMA_IRQHandler+0x2ee>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a64      	ldr	r2, [pc, #400]	; (8006498 <HAL_DMA_IRQHandler+0x404>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d03b      	beq.n	8006382 <HAL_DMA_IRQHandler+0x2ee>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a63      	ldr	r2, [pc, #396]	; (800649c <HAL_DMA_IRQHandler+0x408>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d036      	beq.n	8006382 <HAL_DMA_IRQHandler+0x2ee>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a61      	ldr	r2, [pc, #388]	; (80064a0 <HAL_DMA_IRQHandler+0x40c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d031      	beq.n	8006382 <HAL_DMA_IRQHandler+0x2ee>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a60      	ldr	r2, [pc, #384]	; (80064a4 <HAL_DMA_IRQHandler+0x410>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d02c      	beq.n	8006382 <HAL_DMA_IRQHandler+0x2ee>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a5e      	ldr	r2, [pc, #376]	; (80064a8 <HAL_DMA_IRQHandler+0x414>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d027      	beq.n	8006382 <HAL_DMA_IRQHandler+0x2ee>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a5d      	ldr	r2, [pc, #372]	; (80064ac <HAL_DMA_IRQHandler+0x418>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d022      	beq.n	8006382 <HAL_DMA_IRQHandler+0x2ee>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a5b      	ldr	r2, [pc, #364]	; (80064b0 <HAL_DMA_IRQHandler+0x41c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d01d      	beq.n	8006382 <HAL_DMA_IRQHandler+0x2ee>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a5a      	ldr	r2, [pc, #360]	; (80064b4 <HAL_DMA_IRQHandler+0x420>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d018      	beq.n	8006382 <HAL_DMA_IRQHandler+0x2ee>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a58      	ldr	r2, [pc, #352]	; (80064b8 <HAL_DMA_IRQHandler+0x424>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d013      	beq.n	8006382 <HAL_DMA_IRQHandler+0x2ee>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a57      	ldr	r2, [pc, #348]	; (80064bc <HAL_DMA_IRQHandler+0x428>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d00e      	beq.n	8006382 <HAL_DMA_IRQHandler+0x2ee>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a55      	ldr	r2, [pc, #340]	; (80064c0 <HAL_DMA_IRQHandler+0x42c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d009      	beq.n	8006382 <HAL_DMA_IRQHandler+0x2ee>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a54      	ldr	r2, [pc, #336]	; (80064c4 <HAL_DMA_IRQHandler+0x430>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d004      	beq.n	8006382 <HAL_DMA_IRQHandler+0x2ee>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a52      	ldr	r2, [pc, #328]	; (80064c8 <HAL_DMA_IRQHandler+0x434>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d10a      	bne.n	8006398 <HAL_DMA_IRQHandler+0x304>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638c:	2b00      	cmp	r3, #0
 800638e:	bf14      	ite	ne
 8006390:	2301      	movne	r3, #1
 8006392:	2300      	moveq	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	e003      	b.n	80063a0 <HAL_DMA_IRQHandler+0x30c>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2300      	movs	r3, #0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00d      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a8:	f003 031f 	and.w	r3, r3, #31
 80063ac:	2201      	movs	r2, #1
 80063ae:	409a      	lsls	r2, r3
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b8:	f043 0202 	orr.w	r2, r3, #2
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c4:	f003 031f 	and.w	r3, r3, #31
 80063c8:	2204      	movs	r2, #4
 80063ca:	409a      	lsls	r2, r3
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	4013      	ands	r3, r2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 808f 	beq.w	80064f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a2c      	ldr	r2, [pc, #176]	; (800648c <HAL_DMA_IRQHandler+0x3f8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d04a      	beq.n	8006476 <HAL_DMA_IRQHandler+0x3e2>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a2a      	ldr	r2, [pc, #168]	; (8006490 <HAL_DMA_IRQHandler+0x3fc>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d045      	beq.n	8006476 <HAL_DMA_IRQHandler+0x3e2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a29      	ldr	r2, [pc, #164]	; (8006494 <HAL_DMA_IRQHandler+0x400>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d040      	beq.n	8006476 <HAL_DMA_IRQHandler+0x3e2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a27      	ldr	r2, [pc, #156]	; (8006498 <HAL_DMA_IRQHandler+0x404>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d03b      	beq.n	8006476 <HAL_DMA_IRQHandler+0x3e2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a26      	ldr	r2, [pc, #152]	; (800649c <HAL_DMA_IRQHandler+0x408>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d036      	beq.n	8006476 <HAL_DMA_IRQHandler+0x3e2>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a24      	ldr	r2, [pc, #144]	; (80064a0 <HAL_DMA_IRQHandler+0x40c>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d031      	beq.n	8006476 <HAL_DMA_IRQHandler+0x3e2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a23      	ldr	r2, [pc, #140]	; (80064a4 <HAL_DMA_IRQHandler+0x410>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d02c      	beq.n	8006476 <HAL_DMA_IRQHandler+0x3e2>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a21      	ldr	r2, [pc, #132]	; (80064a8 <HAL_DMA_IRQHandler+0x414>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d027      	beq.n	8006476 <HAL_DMA_IRQHandler+0x3e2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a20      	ldr	r2, [pc, #128]	; (80064ac <HAL_DMA_IRQHandler+0x418>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d022      	beq.n	8006476 <HAL_DMA_IRQHandler+0x3e2>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1e      	ldr	r2, [pc, #120]	; (80064b0 <HAL_DMA_IRQHandler+0x41c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d01d      	beq.n	8006476 <HAL_DMA_IRQHandler+0x3e2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a1d      	ldr	r2, [pc, #116]	; (80064b4 <HAL_DMA_IRQHandler+0x420>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d018      	beq.n	8006476 <HAL_DMA_IRQHandler+0x3e2>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a1b      	ldr	r2, [pc, #108]	; (80064b8 <HAL_DMA_IRQHandler+0x424>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d013      	beq.n	8006476 <HAL_DMA_IRQHandler+0x3e2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a1a      	ldr	r2, [pc, #104]	; (80064bc <HAL_DMA_IRQHandler+0x428>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d00e      	beq.n	8006476 <HAL_DMA_IRQHandler+0x3e2>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a18      	ldr	r2, [pc, #96]	; (80064c0 <HAL_DMA_IRQHandler+0x42c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d009      	beq.n	8006476 <HAL_DMA_IRQHandler+0x3e2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a17      	ldr	r2, [pc, #92]	; (80064c4 <HAL_DMA_IRQHandler+0x430>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d004      	beq.n	8006476 <HAL_DMA_IRQHandler+0x3e2>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a15      	ldr	r2, [pc, #84]	; (80064c8 <HAL_DMA_IRQHandler+0x434>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d12a      	bne.n	80064cc <HAL_DMA_IRQHandler+0x438>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	bf14      	ite	ne
 8006484:	2301      	movne	r3, #1
 8006486:	2300      	moveq	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	e023      	b.n	80064d4 <HAL_DMA_IRQHandler+0x440>
 800648c:	40020010 	.word	0x40020010
 8006490:	40020028 	.word	0x40020028
 8006494:	40020040 	.word	0x40020040
 8006498:	40020058 	.word	0x40020058
 800649c:	40020070 	.word	0x40020070
 80064a0:	40020088 	.word	0x40020088
 80064a4:	400200a0 	.word	0x400200a0
 80064a8:	400200b8 	.word	0x400200b8
 80064ac:	40020410 	.word	0x40020410
 80064b0:	40020428 	.word	0x40020428
 80064b4:	40020440 	.word	0x40020440
 80064b8:	40020458 	.word	0x40020458
 80064bc:	40020470 	.word	0x40020470
 80064c0:	40020488 	.word	0x40020488
 80064c4:	400204a0 	.word	0x400204a0
 80064c8:	400204b8 	.word	0x400204b8
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2300      	movs	r3, #0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00d      	beq.n	80064f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	2204      	movs	r2, #4
 80064e2:	409a      	lsls	r2, r3
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ec:	f043 0204 	orr.w	r2, r3, #4
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f8:	f003 031f 	and.w	r3, r3, #31
 80064fc:	2210      	movs	r2, #16
 80064fe:	409a      	lsls	r2, r3
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	4013      	ands	r3, r2
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 80a6 	beq.w	8006656 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a85      	ldr	r2, [pc, #532]	; (8006724 <HAL_DMA_IRQHandler+0x690>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d04a      	beq.n	80065aa <HAL_DMA_IRQHandler+0x516>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a83      	ldr	r2, [pc, #524]	; (8006728 <HAL_DMA_IRQHandler+0x694>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d045      	beq.n	80065aa <HAL_DMA_IRQHandler+0x516>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a82      	ldr	r2, [pc, #520]	; (800672c <HAL_DMA_IRQHandler+0x698>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d040      	beq.n	80065aa <HAL_DMA_IRQHandler+0x516>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a80      	ldr	r2, [pc, #512]	; (8006730 <HAL_DMA_IRQHandler+0x69c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d03b      	beq.n	80065aa <HAL_DMA_IRQHandler+0x516>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a7f      	ldr	r2, [pc, #508]	; (8006734 <HAL_DMA_IRQHandler+0x6a0>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d036      	beq.n	80065aa <HAL_DMA_IRQHandler+0x516>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a7d      	ldr	r2, [pc, #500]	; (8006738 <HAL_DMA_IRQHandler+0x6a4>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d031      	beq.n	80065aa <HAL_DMA_IRQHandler+0x516>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a7c      	ldr	r2, [pc, #496]	; (800673c <HAL_DMA_IRQHandler+0x6a8>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d02c      	beq.n	80065aa <HAL_DMA_IRQHandler+0x516>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a7a      	ldr	r2, [pc, #488]	; (8006740 <HAL_DMA_IRQHandler+0x6ac>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d027      	beq.n	80065aa <HAL_DMA_IRQHandler+0x516>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a79      	ldr	r2, [pc, #484]	; (8006744 <HAL_DMA_IRQHandler+0x6b0>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d022      	beq.n	80065aa <HAL_DMA_IRQHandler+0x516>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a77      	ldr	r2, [pc, #476]	; (8006748 <HAL_DMA_IRQHandler+0x6b4>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d01d      	beq.n	80065aa <HAL_DMA_IRQHandler+0x516>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a76      	ldr	r2, [pc, #472]	; (800674c <HAL_DMA_IRQHandler+0x6b8>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d018      	beq.n	80065aa <HAL_DMA_IRQHandler+0x516>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a74      	ldr	r2, [pc, #464]	; (8006750 <HAL_DMA_IRQHandler+0x6bc>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d013      	beq.n	80065aa <HAL_DMA_IRQHandler+0x516>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a73      	ldr	r2, [pc, #460]	; (8006754 <HAL_DMA_IRQHandler+0x6c0>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d00e      	beq.n	80065aa <HAL_DMA_IRQHandler+0x516>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a71      	ldr	r2, [pc, #452]	; (8006758 <HAL_DMA_IRQHandler+0x6c4>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d009      	beq.n	80065aa <HAL_DMA_IRQHandler+0x516>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a70      	ldr	r2, [pc, #448]	; (800675c <HAL_DMA_IRQHandler+0x6c8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d004      	beq.n	80065aa <HAL_DMA_IRQHandler+0x516>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a6e      	ldr	r2, [pc, #440]	; (8006760 <HAL_DMA_IRQHandler+0x6cc>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d10a      	bne.n	80065c0 <HAL_DMA_IRQHandler+0x52c>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0308 	and.w	r3, r3, #8
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	bf14      	ite	ne
 80065b8:	2301      	movne	r3, #1
 80065ba:	2300      	moveq	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	e009      	b.n	80065d4 <HAL_DMA_IRQHandler+0x540>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0304 	and.w	r3, r3, #4
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	bf14      	ite	ne
 80065ce:	2301      	movne	r3, #1
 80065d0:	2300      	moveq	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d03e      	beq.n	8006656 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065dc:	f003 031f 	and.w	r3, r3, #31
 80065e0:	2210      	movs	r2, #16
 80065e2:	409a      	lsls	r2, r3
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d018      	beq.n	8006628 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d108      	bne.n	8006616 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	2b00      	cmp	r3, #0
 800660a:	d024      	beq.n	8006656 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	4798      	blx	r3
 8006614:	e01f      	b.n	8006656 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800661a:	2b00      	cmp	r3, #0
 800661c:	d01b      	beq.n	8006656 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	4798      	blx	r3
 8006626:	e016      	b.n	8006656 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006632:	2b00      	cmp	r3, #0
 8006634:	d107      	bne.n	8006646 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 0208 	bic.w	r2, r2, #8
 8006644:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800665a:	f003 031f 	and.w	r3, r3, #31
 800665e:	2220      	movs	r2, #32
 8006660:	409a      	lsls	r2, r3
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	4013      	ands	r3, r2
 8006666:	2b00      	cmp	r3, #0
 8006668:	f000 8110 	beq.w	800688c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a2c      	ldr	r2, [pc, #176]	; (8006724 <HAL_DMA_IRQHandler+0x690>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d04a      	beq.n	800670c <HAL_DMA_IRQHandler+0x678>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a2b      	ldr	r2, [pc, #172]	; (8006728 <HAL_DMA_IRQHandler+0x694>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d045      	beq.n	800670c <HAL_DMA_IRQHandler+0x678>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a29      	ldr	r2, [pc, #164]	; (800672c <HAL_DMA_IRQHandler+0x698>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d040      	beq.n	800670c <HAL_DMA_IRQHandler+0x678>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a28      	ldr	r2, [pc, #160]	; (8006730 <HAL_DMA_IRQHandler+0x69c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d03b      	beq.n	800670c <HAL_DMA_IRQHandler+0x678>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a26      	ldr	r2, [pc, #152]	; (8006734 <HAL_DMA_IRQHandler+0x6a0>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d036      	beq.n	800670c <HAL_DMA_IRQHandler+0x678>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a25      	ldr	r2, [pc, #148]	; (8006738 <HAL_DMA_IRQHandler+0x6a4>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d031      	beq.n	800670c <HAL_DMA_IRQHandler+0x678>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a23      	ldr	r2, [pc, #140]	; (800673c <HAL_DMA_IRQHandler+0x6a8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d02c      	beq.n	800670c <HAL_DMA_IRQHandler+0x678>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a22      	ldr	r2, [pc, #136]	; (8006740 <HAL_DMA_IRQHandler+0x6ac>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d027      	beq.n	800670c <HAL_DMA_IRQHandler+0x678>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a20      	ldr	r2, [pc, #128]	; (8006744 <HAL_DMA_IRQHandler+0x6b0>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d022      	beq.n	800670c <HAL_DMA_IRQHandler+0x678>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a1f      	ldr	r2, [pc, #124]	; (8006748 <HAL_DMA_IRQHandler+0x6b4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d01d      	beq.n	800670c <HAL_DMA_IRQHandler+0x678>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a1d      	ldr	r2, [pc, #116]	; (800674c <HAL_DMA_IRQHandler+0x6b8>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d018      	beq.n	800670c <HAL_DMA_IRQHandler+0x678>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1c      	ldr	r2, [pc, #112]	; (8006750 <HAL_DMA_IRQHandler+0x6bc>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d013      	beq.n	800670c <HAL_DMA_IRQHandler+0x678>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a1a      	ldr	r2, [pc, #104]	; (8006754 <HAL_DMA_IRQHandler+0x6c0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d00e      	beq.n	800670c <HAL_DMA_IRQHandler+0x678>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a19      	ldr	r2, [pc, #100]	; (8006758 <HAL_DMA_IRQHandler+0x6c4>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d009      	beq.n	800670c <HAL_DMA_IRQHandler+0x678>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a17      	ldr	r2, [pc, #92]	; (800675c <HAL_DMA_IRQHandler+0x6c8>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d004      	beq.n	800670c <HAL_DMA_IRQHandler+0x678>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a16      	ldr	r2, [pc, #88]	; (8006760 <HAL_DMA_IRQHandler+0x6cc>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d12b      	bne.n	8006764 <HAL_DMA_IRQHandler+0x6d0>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0310 	and.w	r3, r3, #16
 8006716:	2b00      	cmp	r3, #0
 8006718:	bf14      	ite	ne
 800671a:	2301      	movne	r3, #1
 800671c:	2300      	moveq	r3, #0
 800671e:	b2db      	uxtb	r3, r3
 8006720:	e02a      	b.n	8006778 <HAL_DMA_IRQHandler+0x6e4>
 8006722:	bf00      	nop
 8006724:	40020010 	.word	0x40020010
 8006728:	40020028 	.word	0x40020028
 800672c:	40020040 	.word	0x40020040
 8006730:	40020058 	.word	0x40020058
 8006734:	40020070 	.word	0x40020070
 8006738:	40020088 	.word	0x40020088
 800673c:	400200a0 	.word	0x400200a0
 8006740:	400200b8 	.word	0x400200b8
 8006744:	40020410 	.word	0x40020410
 8006748:	40020428 	.word	0x40020428
 800674c:	40020440 	.word	0x40020440
 8006750:	40020458 	.word	0x40020458
 8006754:	40020470 	.word	0x40020470
 8006758:	40020488 	.word	0x40020488
 800675c:	400204a0 	.word	0x400204a0
 8006760:	400204b8 	.word	0x400204b8
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	bf14      	ite	ne
 8006772:	2301      	movne	r3, #1
 8006774:	2300      	moveq	r3, #0
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 8087 	beq.w	800688c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006782:	f003 031f 	and.w	r3, r3, #31
 8006786:	2220      	movs	r2, #32
 8006788:	409a      	lsls	r2, r3
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b04      	cmp	r3, #4
 8006798:	d139      	bne.n	800680e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0216 	bic.w	r2, r2, #22
 80067a8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695a      	ldr	r2, [r3, #20]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067b8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d103      	bne.n	80067ca <HAL_DMA_IRQHandler+0x736>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d007      	beq.n	80067da <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0208 	bic.w	r2, r2, #8
 80067d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067de:	f003 031f 	and.w	r3, r3, #31
 80067e2:	223f      	movs	r2, #63	; 0x3f
 80067e4:	409a      	lsls	r2, r3
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f000 8382 	beq.w	8006f08 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	4798      	blx	r3
          }
          return;
 800680c:	e37c      	b.n	8006f08 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d018      	beq.n	800684e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d108      	bne.n	800683c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682e:	2b00      	cmp	r3, #0
 8006830:	d02c      	beq.n	800688c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	4798      	blx	r3
 800683a:	e027      	b.n	800688c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006840:	2b00      	cmp	r3, #0
 8006842:	d023      	beq.n	800688c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	4798      	blx	r3
 800684c:	e01e      	b.n	800688c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10f      	bne.n	800687c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0210 	bic.w	r2, r2, #16
 800686a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 833e 	beq.w	8006f12 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 8088 	beq.w	80069b4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2204      	movs	r2, #4
 80068a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a89      	ldr	r2, [pc, #548]	; (8006ad8 <HAL_DMA_IRQHandler+0xa44>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d04a      	beq.n	800694c <HAL_DMA_IRQHandler+0x8b8>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a88      	ldr	r2, [pc, #544]	; (8006adc <HAL_DMA_IRQHandler+0xa48>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d045      	beq.n	800694c <HAL_DMA_IRQHandler+0x8b8>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a86      	ldr	r2, [pc, #536]	; (8006ae0 <HAL_DMA_IRQHandler+0xa4c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d040      	beq.n	800694c <HAL_DMA_IRQHandler+0x8b8>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a85      	ldr	r2, [pc, #532]	; (8006ae4 <HAL_DMA_IRQHandler+0xa50>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d03b      	beq.n	800694c <HAL_DMA_IRQHandler+0x8b8>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a83      	ldr	r2, [pc, #524]	; (8006ae8 <HAL_DMA_IRQHandler+0xa54>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d036      	beq.n	800694c <HAL_DMA_IRQHandler+0x8b8>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a82      	ldr	r2, [pc, #520]	; (8006aec <HAL_DMA_IRQHandler+0xa58>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d031      	beq.n	800694c <HAL_DMA_IRQHandler+0x8b8>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a80      	ldr	r2, [pc, #512]	; (8006af0 <HAL_DMA_IRQHandler+0xa5c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d02c      	beq.n	800694c <HAL_DMA_IRQHandler+0x8b8>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a7f      	ldr	r2, [pc, #508]	; (8006af4 <HAL_DMA_IRQHandler+0xa60>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d027      	beq.n	800694c <HAL_DMA_IRQHandler+0x8b8>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a7d      	ldr	r2, [pc, #500]	; (8006af8 <HAL_DMA_IRQHandler+0xa64>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d022      	beq.n	800694c <HAL_DMA_IRQHandler+0x8b8>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a7c      	ldr	r2, [pc, #496]	; (8006afc <HAL_DMA_IRQHandler+0xa68>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d01d      	beq.n	800694c <HAL_DMA_IRQHandler+0x8b8>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a7a      	ldr	r2, [pc, #488]	; (8006b00 <HAL_DMA_IRQHandler+0xa6c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d018      	beq.n	800694c <HAL_DMA_IRQHandler+0x8b8>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a79      	ldr	r2, [pc, #484]	; (8006b04 <HAL_DMA_IRQHandler+0xa70>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d013      	beq.n	800694c <HAL_DMA_IRQHandler+0x8b8>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a77      	ldr	r2, [pc, #476]	; (8006b08 <HAL_DMA_IRQHandler+0xa74>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00e      	beq.n	800694c <HAL_DMA_IRQHandler+0x8b8>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a76      	ldr	r2, [pc, #472]	; (8006b0c <HAL_DMA_IRQHandler+0xa78>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d009      	beq.n	800694c <HAL_DMA_IRQHandler+0x8b8>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a74      	ldr	r2, [pc, #464]	; (8006b10 <HAL_DMA_IRQHandler+0xa7c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d004      	beq.n	800694c <HAL_DMA_IRQHandler+0x8b8>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a73      	ldr	r2, [pc, #460]	; (8006b14 <HAL_DMA_IRQHandler+0xa80>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d108      	bne.n	800695e <HAL_DMA_IRQHandler+0x8ca>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0201 	bic.w	r2, r2, #1
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	e007      	b.n	800696e <HAL_DMA_IRQHandler+0x8da>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f022 0201 	bic.w	r2, r2, #1
 800696c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3301      	adds	r3, #1
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006976:	429a      	cmp	r2, r3
 8006978:	d307      	bcc.n	800698a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1f2      	bne.n	800696e <HAL_DMA_IRQHandler+0x8da>
 8006988:	e000      	b.n	800698c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800698a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d004      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2203      	movs	r2, #3
 800699e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80069a2:	e003      	b.n	80069ac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 82aa 	beq.w	8006f12 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	4798      	blx	r3
 80069c6:	e2a4      	b.n	8006f12 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a52      	ldr	r2, [pc, #328]	; (8006b18 <HAL_DMA_IRQHandler+0xa84>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d04a      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x9d4>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a51      	ldr	r2, [pc, #324]	; (8006b1c <HAL_DMA_IRQHandler+0xa88>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d045      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x9d4>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a4f      	ldr	r2, [pc, #316]	; (8006b20 <HAL_DMA_IRQHandler+0xa8c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d040      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x9d4>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a4e      	ldr	r2, [pc, #312]	; (8006b24 <HAL_DMA_IRQHandler+0xa90>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d03b      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x9d4>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a4c      	ldr	r2, [pc, #304]	; (8006b28 <HAL_DMA_IRQHandler+0xa94>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d036      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x9d4>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a4b      	ldr	r2, [pc, #300]	; (8006b2c <HAL_DMA_IRQHandler+0xa98>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d031      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x9d4>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a49      	ldr	r2, [pc, #292]	; (8006b30 <HAL_DMA_IRQHandler+0xa9c>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d02c      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x9d4>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a48      	ldr	r2, [pc, #288]	; (8006b34 <HAL_DMA_IRQHandler+0xaa0>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d027      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x9d4>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a46      	ldr	r2, [pc, #280]	; (8006b38 <HAL_DMA_IRQHandler+0xaa4>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d022      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x9d4>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a45      	ldr	r2, [pc, #276]	; (8006b3c <HAL_DMA_IRQHandler+0xaa8>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d01d      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x9d4>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a43      	ldr	r2, [pc, #268]	; (8006b40 <HAL_DMA_IRQHandler+0xaac>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d018      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x9d4>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a42      	ldr	r2, [pc, #264]	; (8006b44 <HAL_DMA_IRQHandler+0xab0>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d013      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x9d4>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a40      	ldr	r2, [pc, #256]	; (8006b48 <HAL_DMA_IRQHandler+0xab4>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d00e      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x9d4>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a3f      	ldr	r2, [pc, #252]	; (8006b4c <HAL_DMA_IRQHandler+0xab8>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d009      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x9d4>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a3d      	ldr	r2, [pc, #244]	; (8006b50 <HAL_DMA_IRQHandler+0xabc>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d004      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x9d4>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a3c      	ldr	r2, [pc, #240]	; (8006b54 <HAL_DMA_IRQHandler+0xac0>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d101      	bne.n	8006a6c <HAL_DMA_IRQHandler+0x9d8>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e000      	b.n	8006a6e <HAL_DMA_IRQHandler+0x9da>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f000 824f 	beq.w	8006f12 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a80:	f003 031f 	and.w	r3, r3, #31
 8006a84:	2204      	movs	r2, #4
 8006a86:	409a      	lsls	r2, r3
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 80dd 	beq.w	8006c4c <HAL_DMA_IRQHandler+0xbb8>
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 80d7 	beq.w	8006c4c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa2:	f003 031f 	and.w	r3, r3, #31
 8006aa6:	2204      	movs	r2, #4
 8006aa8:	409a      	lsls	r2, r3
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d059      	beq.n	8006b6c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d14a      	bne.n	8006b58 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 8220 	beq.w	8006f0c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ad4:	e21a      	b.n	8006f0c <HAL_DMA_IRQHandler+0xe78>
 8006ad6:	bf00      	nop
 8006ad8:	40020010 	.word	0x40020010
 8006adc:	40020028 	.word	0x40020028
 8006ae0:	40020040 	.word	0x40020040
 8006ae4:	40020058 	.word	0x40020058
 8006ae8:	40020070 	.word	0x40020070
 8006aec:	40020088 	.word	0x40020088
 8006af0:	400200a0 	.word	0x400200a0
 8006af4:	400200b8 	.word	0x400200b8
 8006af8:	40020410 	.word	0x40020410
 8006afc:	40020428 	.word	0x40020428
 8006b00:	40020440 	.word	0x40020440
 8006b04:	40020458 	.word	0x40020458
 8006b08:	40020470 	.word	0x40020470
 8006b0c:	40020488 	.word	0x40020488
 8006b10:	400204a0 	.word	0x400204a0
 8006b14:	400204b8 	.word	0x400204b8
 8006b18:	48022c08 	.word	0x48022c08
 8006b1c:	48022c1c 	.word	0x48022c1c
 8006b20:	48022c30 	.word	0x48022c30
 8006b24:	48022c44 	.word	0x48022c44
 8006b28:	48022c58 	.word	0x48022c58
 8006b2c:	48022c6c 	.word	0x48022c6c
 8006b30:	48022c80 	.word	0x48022c80
 8006b34:	48022c94 	.word	0x48022c94
 8006b38:	58025408 	.word	0x58025408
 8006b3c:	5802541c 	.word	0x5802541c
 8006b40:	58025430 	.word	0x58025430
 8006b44:	58025444 	.word	0x58025444
 8006b48:	58025458 	.word	0x58025458
 8006b4c:	5802546c 	.word	0x5802546c
 8006b50:	58025480 	.word	0x58025480
 8006b54:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 81d5 	beq.w	8006f0c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b6a:	e1cf      	b.n	8006f0c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f003 0320 	and.w	r3, r3, #32
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d160      	bne.n	8006c38 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a7f      	ldr	r2, [pc, #508]	; (8006d78 <HAL_DMA_IRQHandler+0xce4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d04a      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xb82>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a7d      	ldr	r2, [pc, #500]	; (8006d7c <HAL_DMA_IRQHandler+0xce8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d045      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xb82>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a7c      	ldr	r2, [pc, #496]	; (8006d80 <HAL_DMA_IRQHandler+0xcec>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d040      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xb82>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a7a      	ldr	r2, [pc, #488]	; (8006d84 <HAL_DMA_IRQHandler+0xcf0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d03b      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xb82>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a79      	ldr	r2, [pc, #484]	; (8006d88 <HAL_DMA_IRQHandler+0xcf4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d036      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xb82>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a77      	ldr	r2, [pc, #476]	; (8006d8c <HAL_DMA_IRQHandler+0xcf8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d031      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xb82>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a76      	ldr	r2, [pc, #472]	; (8006d90 <HAL_DMA_IRQHandler+0xcfc>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d02c      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xb82>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a74      	ldr	r2, [pc, #464]	; (8006d94 <HAL_DMA_IRQHandler+0xd00>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d027      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xb82>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a73      	ldr	r2, [pc, #460]	; (8006d98 <HAL_DMA_IRQHandler+0xd04>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d022      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xb82>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a71      	ldr	r2, [pc, #452]	; (8006d9c <HAL_DMA_IRQHandler+0xd08>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d01d      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xb82>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a70      	ldr	r2, [pc, #448]	; (8006da0 <HAL_DMA_IRQHandler+0xd0c>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d018      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xb82>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a6e      	ldr	r2, [pc, #440]	; (8006da4 <HAL_DMA_IRQHandler+0xd10>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d013      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xb82>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a6d      	ldr	r2, [pc, #436]	; (8006da8 <HAL_DMA_IRQHandler+0xd14>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00e      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xb82>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a6b      	ldr	r2, [pc, #428]	; (8006dac <HAL_DMA_IRQHandler+0xd18>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d009      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xb82>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a6a      	ldr	r2, [pc, #424]	; (8006db0 <HAL_DMA_IRQHandler+0xd1c>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d004      	beq.n	8006c16 <HAL_DMA_IRQHandler+0xb82>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a68      	ldr	r2, [pc, #416]	; (8006db4 <HAL_DMA_IRQHandler+0xd20>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d108      	bne.n	8006c28 <HAL_DMA_IRQHandler+0xb94>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0208 	bic.w	r2, r2, #8
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	e007      	b.n	8006c38 <HAL_DMA_IRQHandler+0xba4>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f022 0204 	bic.w	r2, r2, #4
 8006c36:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8165 	beq.w	8006f0c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c4a:	e15f      	b.n	8006f0c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c50:	f003 031f 	and.w	r3, r3, #31
 8006c54:	2202      	movs	r2, #2
 8006c56:	409a      	lsls	r2, r3
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 80c5 	beq.w	8006dec <HAL_DMA_IRQHandler+0xd58>
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 80bf 	beq.w	8006dec <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c72:	f003 031f 	and.w	r3, r3, #31
 8006c76:	2202      	movs	r2, #2
 8006c78:	409a      	lsls	r2, r3
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d018      	beq.n	8006cba <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d109      	bne.n	8006ca6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 813a 	beq.w	8006f10 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ca4:	e134      	b.n	8006f10 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 8130 	beq.w	8006f10 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cb8:	e12a      	b.n	8006f10 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f003 0320 	and.w	r3, r3, #32
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f040 8089 	bne.w	8006dd8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a2b      	ldr	r2, [pc, #172]	; (8006d78 <HAL_DMA_IRQHandler+0xce4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d04a      	beq.n	8006d66 <HAL_DMA_IRQHandler+0xcd2>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a29      	ldr	r2, [pc, #164]	; (8006d7c <HAL_DMA_IRQHandler+0xce8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d045      	beq.n	8006d66 <HAL_DMA_IRQHandler+0xcd2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a28      	ldr	r2, [pc, #160]	; (8006d80 <HAL_DMA_IRQHandler+0xcec>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d040      	beq.n	8006d66 <HAL_DMA_IRQHandler+0xcd2>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a26      	ldr	r2, [pc, #152]	; (8006d84 <HAL_DMA_IRQHandler+0xcf0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d03b      	beq.n	8006d66 <HAL_DMA_IRQHandler+0xcd2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a25      	ldr	r2, [pc, #148]	; (8006d88 <HAL_DMA_IRQHandler+0xcf4>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d036      	beq.n	8006d66 <HAL_DMA_IRQHandler+0xcd2>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a23      	ldr	r2, [pc, #140]	; (8006d8c <HAL_DMA_IRQHandler+0xcf8>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d031      	beq.n	8006d66 <HAL_DMA_IRQHandler+0xcd2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a22      	ldr	r2, [pc, #136]	; (8006d90 <HAL_DMA_IRQHandler+0xcfc>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d02c      	beq.n	8006d66 <HAL_DMA_IRQHandler+0xcd2>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a20      	ldr	r2, [pc, #128]	; (8006d94 <HAL_DMA_IRQHandler+0xd00>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d027      	beq.n	8006d66 <HAL_DMA_IRQHandler+0xcd2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a1f      	ldr	r2, [pc, #124]	; (8006d98 <HAL_DMA_IRQHandler+0xd04>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d022      	beq.n	8006d66 <HAL_DMA_IRQHandler+0xcd2>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a1d      	ldr	r2, [pc, #116]	; (8006d9c <HAL_DMA_IRQHandler+0xd08>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d01d      	beq.n	8006d66 <HAL_DMA_IRQHandler+0xcd2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a1c      	ldr	r2, [pc, #112]	; (8006da0 <HAL_DMA_IRQHandler+0xd0c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d018      	beq.n	8006d66 <HAL_DMA_IRQHandler+0xcd2>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a1a      	ldr	r2, [pc, #104]	; (8006da4 <HAL_DMA_IRQHandler+0xd10>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d013      	beq.n	8006d66 <HAL_DMA_IRQHandler+0xcd2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a19      	ldr	r2, [pc, #100]	; (8006da8 <HAL_DMA_IRQHandler+0xd14>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00e      	beq.n	8006d66 <HAL_DMA_IRQHandler+0xcd2>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a17      	ldr	r2, [pc, #92]	; (8006dac <HAL_DMA_IRQHandler+0xd18>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d009      	beq.n	8006d66 <HAL_DMA_IRQHandler+0xcd2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a16      	ldr	r2, [pc, #88]	; (8006db0 <HAL_DMA_IRQHandler+0xd1c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d004      	beq.n	8006d66 <HAL_DMA_IRQHandler+0xcd2>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a14      	ldr	r2, [pc, #80]	; (8006db4 <HAL_DMA_IRQHandler+0xd20>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d128      	bne.n	8006db8 <HAL_DMA_IRQHandler+0xd24>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0214 	bic.w	r2, r2, #20
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	e027      	b.n	8006dc8 <HAL_DMA_IRQHandler+0xd34>
 8006d78:	40020010 	.word	0x40020010
 8006d7c:	40020028 	.word	0x40020028
 8006d80:	40020040 	.word	0x40020040
 8006d84:	40020058 	.word	0x40020058
 8006d88:	40020070 	.word	0x40020070
 8006d8c:	40020088 	.word	0x40020088
 8006d90:	400200a0 	.word	0x400200a0
 8006d94:	400200b8 	.word	0x400200b8
 8006d98:	40020410 	.word	0x40020410
 8006d9c:	40020428 	.word	0x40020428
 8006da0:	40020440 	.word	0x40020440
 8006da4:	40020458 	.word	0x40020458
 8006da8:	40020470 	.word	0x40020470
 8006dac:	40020488 	.word	0x40020488
 8006db0:	400204a0 	.word	0x400204a0
 8006db4:	400204b8 	.word	0x400204b8
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 020a 	bic.w	r2, r2, #10
 8006dc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 8097 	beq.w	8006f10 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dea:	e091      	b.n	8006f10 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df0:	f003 031f 	and.w	r3, r3, #31
 8006df4:	2208      	movs	r2, #8
 8006df6:	409a      	lsls	r2, r3
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 8088 	beq.w	8006f12 <HAL_DMA_IRQHandler+0xe7e>
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f003 0308 	and.w	r3, r3, #8
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 8082 	beq.w	8006f12 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a41      	ldr	r2, [pc, #260]	; (8006f18 <HAL_DMA_IRQHandler+0xe84>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d04a      	beq.n	8006eae <HAL_DMA_IRQHandler+0xe1a>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a3f      	ldr	r2, [pc, #252]	; (8006f1c <HAL_DMA_IRQHandler+0xe88>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d045      	beq.n	8006eae <HAL_DMA_IRQHandler+0xe1a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a3e      	ldr	r2, [pc, #248]	; (8006f20 <HAL_DMA_IRQHandler+0xe8c>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d040      	beq.n	8006eae <HAL_DMA_IRQHandler+0xe1a>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a3c      	ldr	r2, [pc, #240]	; (8006f24 <HAL_DMA_IRQHandler+0xe90>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d03b      	beq.n	8006eae <HAL_DMA_IRQHandler+0xe1a>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a3b      	ldr	r2, [pc, #236]	; (8006f28 <HAL_DMA_IRQHandler+0xe94>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d036      	beq.n	8006eae <HAL_DMA_IRQHandler+0xe1a>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a39      	ldr	r2, [pc, #228]	; (8006f2c <HAL_DMA_IRQHandler+0xe98>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d031      	beq.n	8006eae <HAL_DMA_IRQHandler+0xe1a>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a38      	ldr	r2, [pc, #224]	; (8006f30 <HAL_DMA_IRQHandler+0xe9c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d02c      	beq.n	8006eae <HAL_DMA_IRQHandler+0xe1a>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a36      	ldr	r2, [pc, #216]	; (8006f34 <HAL_DMA_IRQHandler+0xea0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d027      	beq.n	8006eae <HAL_DMA_IRQHandler+0xe1a>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a35      	ldr	r2, [pc, #212]	; (8006f38 <HAL_DMA_IRQHandler+0xea4>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d022      	beq.n	8006eae <HAL_DMA_IRQHandler+0xe1a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a33      	ldr	r2, [pc, #204]	; (8006f3c <HAL_DMA_IRQHandler+0xea8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d01d      	beq.n	8006eae <HAL_DMA_IRQHandler+0xe1a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a32      	ldr	r2, [pc, #200]	; (8006f40 <HAL_DMA_IRQHandler+0xeac>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d018      	beq.n	8006eae <HAL_DMA_IRQHandler+0xe1a>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a30      	ldr	r2, [pc, #192]	; (8006f44 <HAL_DMA_IRQHandler+0xeb0>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d013      	beq.n	8006eae <HAL_DMA_IRQHandler+0xe1a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a2f      	ldr	r2, [pc, #188]	; (8006f48 <HAL_DMA_IRQHandler+0xeb4>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d00e      	beq.n	8006eae <HAL_DMA_IRQHandler+0xe1a>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a2d      	ldr	r2, [pc, #180]	; (8006f4c <HAL_DMA_IRQHandler+0xeb8>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d009      	beq.n	8006eae <HAL_DMA_IRQHandler+0xe1a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a2c      	ldr	r2, [pc, #176]	; (8006f50 <HAL_DMA_IRQHandler+0xebc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d004      	beq.n	8006eae <HAL_DMA_IRQHandler+0xe1a>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a2a      	ldr	r2, [pc, #168]	; (8006f54 <HAL_DMA_IRQHandler+0xec0>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d108      	bne.n	8006ec0 <HAL_DMA_IRQHandler+0xe2c>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 021c 	bic.w	r2, r2, #28
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	e007      	b.n	8006ed0 <HAL_DMA_IRQHandler+0xe3c>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 020e 	bic.w	r2, r2, #14
 8006ece:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed4:	f003 031f 	and.w	r3, r3, #31
 8006ed8:	2201      	movs	r2, #1
 8006eda:	409a      	lsls	r2, r3
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d009      	beq.n	8006f12 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	4798      	blx	r3
 8006f06:	e004      	b.n	8006f12 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006f08:	bf00      	nop
 8006f0a:	e002      	b.n	8006f12 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f0c:	bf00      	nop
 8006f0e:	e000      	b.n	8006f12 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f10:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f12:	3728      	adds	r7, #40	; 0x28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	40020010 	.word	0x40020010
 8006f1c:	40020028 	.word	0x40020028
 8006f20:	40020040 	.word	0x40020040
 8006f24:	40020058 	.word	0x40020058
 8006f28:	40020070 	.word	0x40020070
 8006f2c:	40020088 	.word	0x40020088
 8006f30:	400200a0 	.word	0x400200a0
 8006f34:	400200b8 	.word	0x400200b8
 8006f38:	40020410 	.word	0x40020410
 8006f3c:	40020428 	.word	0x40020428
 8006f40:	40020440 	.word	0x40020440
 8006f44:	40020458 	.word	0x40020458
 8006f48:	40020470 	.word	0x40020470
 8006f4c:	40020488 	.word	0x40020488
 8006f50:	400204a0 	.word	0x400204a0
 8006f54:	400204b8 	.word	0x400204b8

08006f58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f70:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a7f      	ldr	r2, [pc, #508]	; (8007174 <DMA_SetConfig+0x21c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d072      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a7d      	ldr	r2, [pc, #500]	; (8007178 <DMA_SetConfig+0x220>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d06d      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a7c      	ldr	r2, [pc, #496]	; (800717c <DMA_SetConfig+0x224>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d068      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a7a      	ldr	r2, [pc, #488]	; (8007180 <DMA_SetConfig+0x228>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d063      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a79      	ldr	r2, [pc, #484]	; (8007184 <DMA_SetConfig+0x22c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d05e      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a77      	ldr	r2, [pc, #476]	; (8007188 <DMA_SetConfig+0x230>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d059      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a76      	ldr	r2, [pc, #472]	; (800718c <DMA_SetConfig+0x234>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d054      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a74      	ldr	r2, [pc, #464]	; (8007190 <DMA_SetConfig+0x238>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d04f      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a73      	ldr	r2, [pc, #460]	; (8007194 <DMA_SetConfig+0x23c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d04a      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a71      	ldr	r2, [pc, #452]	; (8007198 <DMA_SetConfig+0x240>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d045      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a70      	ldr	r2, [pc, #448]	; (800719c <DMA_SetConfig+0x244>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d040      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a6e      	ldr	r2, [pc, #440]	; (80071a0 <DMA_SetConfig+0x248>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d03b      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a6d      	ldr	r2, [pc, #436]	; (80071a4 <DMA_SetConfig+0x24c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d036      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a6b      	ldr	r2, [pc, #428]	; (80071a8 <DMA_SetConfig+0x250>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d031      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a6a      	ldr	r2, [pc, #424]	; (80071ac <DMA_SetConfig+0x254>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d02c      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a68      	ldr	r2, [pc, #416]	; (80071b0 <DMA_SetConfig+0x258>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d027      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a67      	ldr	r2, [pc, #412]	; (80071b4 <DMA_SetConfig+0x25c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d022      	beq.n	8007062 <DMA_SetConfig+0x10a>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a65      	ldr	r2, [pc, #404]	; (80071b8 <DMA_SetConfig+0x260>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d01d      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a64      	ldr	r2, [pc, #400]	; (80071bc <DMA_SetConfig+0x264>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d018      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a62      	ldr	r2, [pc, #392]	; (80071c0 <DMA_SetConfig+0x268>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d013      	beq.n	8007062 <DMA_SetConfig+0x10a>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a61      	ldr	r2, [pc, #388]	; (80071c4 <DMA_SetConfig+0x26c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d00e      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a5f      	ldr	r2, [pc, #380]	; (80071c8 <DMA_SetConfig+0x270>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d009      	beq.n	8007062 <DMA_SetConfig+0x10a>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a5e      	ldr	r2, [pc, #376]	; (80071cc <DMA_SetConfig+0x274>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d004      	beq.n	8007062 <DMA_SetConfig+0x10a>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a5c      	ldr	r2, [pc, #368]	; (80071d0 <DMA_SetConfig+0x278>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d101      	bne.n	8007066 <DMA_SetConfig+0x10e>
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <DMA_SetConfig+0x110>
 8007066:	2300      	movs	r3, #0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00d      	beq.n	8007088 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007074:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800707a:	2b00      	cmp	r3, #0
 800707c:	d004      	beq.n	8007088 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007086:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a39      	ldr	r2, [pc, #228]	; (8007174 <DMA_SetConfig+0x21c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d04a      	beq.n	8007128 <DMA_SetConfig+0x1d0>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a38      	ldr	r2, [pc, #224]	; (8007178 <DMA_SetConfig+0x220>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d045      	beq.n	8007128 <DMA_SetConfig+0x1d0>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a36      	ldr	r2, [pc, #216]	; (800717c <DMA_SetConfig+0x224>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d040      	beq.n	8007128 <DMA_SetConfig+0x1d0>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a35      	ldr	r2, [pc, #212]	; (8007180 <DMA_SetConfig+0x228>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d03b      	beq.n	8007128 <DMA_SetConfig+0x1d0>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a33      	ldr	r2, [pc, #204]	; (8007184 <DMA_SetConfig+0x22c>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d036      	beq.n	8007128 <DMA_SetConfig+0x1d0>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a32      	ldr	r2, [pc, #200]	; (8007188 <DMA_SetConfig+0x230>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d031      	beq.n	8007128 <DMA_SetConfig+0x1d0>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a30      	ldr	r2, [pc, #192]	; (800718c <DMA_SetConfig+0x234>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d02c      	beq.n	8007128 <DMA_SetConfig+0x1d0>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a2f      	ldr	r2, [pc, #188]	; (8007190 <DMA_SetConfig+0x238>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d027      	beq.n	8007128 <DMA_SetConfig+0x1d0>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a2d      	ldr	r2, [pc, #180]	; (8007194 <DMA_SetConfig+0x23c>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d022      	beq.n	8007128 <DMA_SetConfig+0x1d0>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a2c      	ldr	r2, [pc, #176]	; (8007198 <DMA_SetConfig+0x240>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d01d      	beq.n	8007128 <DMA_SetConfig+0x1d0>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a2a      	ldr	r2, [pc, #168]	; (800719c <DMA_SetConfig+0x244>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d018      	beq.n	8007128 <DMA_SetConfig+0x1d0>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a29      	ldr	r2, [pc, #164]	; (80071a0 <DMA_SetConfig+0x248>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d013      	beq.n	8007128 <DMA_SetConfig+0x1d0>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a27      	ldr	r2, [pc, #156]	; (80071a4 <DMA_SetConfig+0x24c>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d00e      	beq.n	8007128 <DMA_SetConfig+0x1d0>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a26      	ldr	r2, [pc, #152]	; (80071a8 <DMA_SetConfig+0x250>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d009      	beq.n	8007128 <DMA_SetConfig+0x1d0>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a24      	ldr	r2, [pc, #144]	; (80071ac <DMA_SetConfig+0x254>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d004      	beq.n	8007128 <DMA_SetConfig+0x1d0>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a23      	ldr	r2, [pc, #140]	; (80071b0 <DMA_SetConfig+0x258>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d101      	bne.n	800712c <DMA_SetConfig+0x1d4>
 8007128:	2301      	movs	r3, #1
 800712a:	e000      	b.n	800712e <DMA_SetConfig+0x1d6>
 800712c:	2300      	movs	r3, #0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d059      	beq.n	80071e6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007136:	f003 031f 	and.w	r3, r3, #31
 800713a:	223f      	movs	r2, #63	; 0x3f
 800713c:	409a      	lsls	r2, r3
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007150:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	2b40      	cmp	r3, #64	; 0x40
 8007160:	d138      	bne.n	80071d4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007172:	e0ae      	b.n	80072d2 <DMA_SetConfig+0x37a>
 8007174:	40020010 	.word	0x40020010
 8007178:	40020028 	.word	0x40020028
 800717c:	40020040 	.word	0x40020040
 8007180:	40020058 	.word	0x40020058
 8007184:	40020070 	.word	0x40020070
 8007188:	40020088 	.word	0x40020088
 800718c:	400200a0 	.word	0x400200a0
 8007190:	400200b8 	.word	0x400200b8
 8007194:	40020410 	.word	0x40020410
 8007198:	40020428 	.word	0x40020428
 800719c:	40020440 	.word	0x40020440
 80071a0:	40020458 	.word	0x40020458
 80071a4:	40020470 	.word	0x40020470
 80071a8:	40020488 	.word	0x40020488
 80071ac:	400204a0 	.word	0x400204a0
 80071b0:	400204b8 	.word	0x400204b8
 80071b4:	58025408 	.word	0x58025408
 80071b8:	5802541c 	.word	0x5802541c
 80071bc:	58025430 	.word	0x58025430
 80071c0:	58025444 	.word	0x58025444
 80071c4:	58025458 	.word	0x58025458
 80071c8:	5802546c 	.word	0x5802546c
 80071cc:	58025480 	.word	0x58025480
 80071d0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	60da      	str	r2, [r3, #12]
}
 80071e4:	e075      	b.n	80072d2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a3d      	ldr	r2, [pc, #244]	; (80072e0 <DMA_SetConfig+0x388>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d04a      	beq.n	8007286 <DMA_SetConfig+0x32e>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a3b      	ldr	r2, [pc, #236]	; (80072e4 <DMA_SetConfig+0x38c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d045      	beq.n	8007286 <DMA_SetConfig+0x32e>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a3a      	ldr	r2, [pc, #232]	; (80072e8 <DMA_SetConfig+0x390>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d040      	beq.n	8007286 <DMA_SetConfig+0x32e>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a38      	ldr	r2, [pc, #224]	; (80072ec <DMA_SetConfig+0x394>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d03b      	beq.n	8007286 <DMA_SetConfig+0x32e>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a37      	ldr	r2, [pc, #220]	; (80072f0 <DMA_SetConfig+0x398>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d036      	beq.n	8007286 <DMA_SetConfig+0x32e>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a35      	ldr	r2, [pc, #212]	; (80072f4 <DMA_SetConfig+0x39c>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d031      	beq.n	8007286 <DMA_SetConfig+0x32e>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a34      	ldr	r2, [pc, #208]	; (80072f8 <DMA_SetConfig+0x3a0>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d02c      	beq.n	8007286 <DMA_SetConfig+0x32e>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a32      	ldr	r2, [pc, #200]	; (80072fc <DMA_SetConfig+0x3a4>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d027      	beq.n	8007286 <DMA_SetConfig+0x32e>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a31      	ldr	r2, [pc, #196]	; (8007300 <DMA_SetConfig+0x3a8>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d022      	beq.n	8007286 <DMA_SetConfig+0x32e>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a2f      	ldr	r2, [pc, #188]	; (8007304 <DMA_SetConfig+0x3ac>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d01d      	beq.n	8007286 <DMA_SetConfig+0x32e>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a2e      	ldr	r2, [pc, #184]	; (8007308 <DMA_SetConfig+0x3b0>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d018      	beq.n	8007286 <DMA_SetConfig+0x32e>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a2c      	ldr	r2, [pc, #176]	; (800730c <DMA_SetConfig+0x3b4>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d013      	beq.n	8007286 <DMA_SetConfig+0x32e>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a2b      	ldr	r2, [pc, #172]	; (8007310 <DMA_SetConfig+0x3b8>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d00e      	beq.n	8007286 <DMA_SetConfig+0x32e>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a29      	ldr	r2, [pc, #164]	; (8007314 <DMA_SetConfig+0x3bc>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d009      	beq.n	8007286 <DMA_SetConfig+0x32e>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a28      	ldr	r2, [pc, #160]	; (8007318 <DMA_SetConfig+0x3c0>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d004      	beq.n	8007286 <DMA_SetConfig+0x32e>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a26      	ldr	r2, [pc, #152]	; (800731c <DMA_SetConfig+0x3c4>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d101      	bne.n	800728a <DMA_SetConfig+0x332>
 8007286:	2301      	movs	r3, #1
 8007288:	e000      	b.n	800728c <DMA_SetConfig+0x334>
 800728a:	2300      	movs	r3, #0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d020      	beq.n	80072d2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007294:	f003 031f 	and.w	r3, r3, #31
 8007298:	2201      	movs	r2, #1
 800729a:	409a      	lsls	r2, r3
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	2b40      	cmp	r3, #64	; 0x40
 80072ae:	d108      	bne.n	80072c2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	60da      	str	r2, [r3, #12]
}
 80072c0:	e007      	b.n	80072d2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	60da      	str	r2, [r3, #12]
}
 80072d2:	bf00      	nop
 80072d4:	371c      	adds	r7, #28
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	48022c08 	.word	0x48022c08
 80072e4:	48022c1c 	.word	0x48022c1c
 80072e8:	48022c30 	.word	0x48022c30
 80072ec:	48022c44 	.word	0x48022c44
 80072f0:	48022c58 	.word	0x48022c58
 80072f4:	48022c6c 	.word	0x48022c6c
 80072f8:	48022c80 	.word	0x48022c80
 80072fc:	48022c94 	.word	0x48022c94
 8007300:	58025408 	.word	0x58025408
 8007304:	5802541c 	.word	0x5802541c
 8007308:	58025430 	.word	0x58025430
 800730c:	58025444 	.word	0x58025444
 8007310:	58025458 	.word	0x58025458
 8007314:	5802546c 	.word	0x5802546c
 8007318:	58025480 	.word	0x58025480
 800731c:	58025494 	.word	0x58025494

08007320 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a42      	ldr	r2, [pc, #264]	; (8007438 <DMA_CalcBaseAndBitshift+0x118>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d04a      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a41      	ldr	r2, [pc, #260]	; (800743c <DMA_CalcBaseAndBitshift+0x11c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d045      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a3f      	ldr	r2, [pc, #252]	; (8007440 <DMA_CalcBaseAndBitshift+0x120>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d040      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a3e      	ldr	r2, [pc, #248]	; (8007444 <DMA_CalcBaseAndBitshift+0x124>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d03b      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a3c      	ldr	r2, [pc, #240]	; (8007448 <DMA_CalcBaseAndBitshift+0x128>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d036      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a3b      	ldr	r2, [pc, #236]	; (800744c <DMA_CalcBaseAndBitshift+0x12c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d031      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a39      	ldr	r2, [pc, #228]	; (8007450 <DMA_CalcBaseAndBitshift+0x130>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d02c      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a38      	ldr	r2, [pc, #224]	; (8007454 <DMA_CalcBaseAndBitshift+0x134>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d027      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a36      	ldr	r2, [pc, #216]	; (8007458 <DMA_CalcBaseAndBitshift+0x138>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d022      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a35      	ldr	r2, [pc, #212]	; (800745c <DMA_CalcBaseAndBitshift+0x13c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d01d      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a33      	ldr	r2, [pc, #204]	; (8007460 <DMA_CalcBaseAndBitshift+0x140>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d018      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a32      	ldr	r2, [pc, #200]	; (8007464 <DMA_CalcBaseAndBitshift+0x144>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d013      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a30      	ldr	r2, [pc, #192]	; (8007468 <DMA_CalcBaseAndBitshift+0x148>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d00e      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a2f      	ldr	r2, [pc, #188]	; (800746c <DMA_CalcBaseAndBitshift+0x14c>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d009      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a2d      	ldr	r2, [pc, #180]	; (8007470 <DMA_CalcBaseAndBitshift+0x150>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d004      	beq.n	80073c8 <DMA_CalcBaseAndBitshift+0xa8>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a2c      	ldr	r2, [pc, #176]	; (8007474 <DMA_CalcBaseAndBitshift+0x154>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d101      	bne.n	80073cc <DMA_CalcBaseAndBitshift+0xac>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <DMA_CalcBaseAndBitshift+0xae>
 80073cc:	2300      	movs	r3, #0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d024      	beq.n	800741c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	3b10      	subs	r3, #16
 80073da:	4a27      	ldr	r2, [pc, #156]	; (8007478 <DMA_CalcBaseAndBitshift+0x158>)
 80073dc:	fba2 2303 	umull	r2, r3, r2, r3
 80073e0:	091b      	lsrs	r3, r3, #4
 80073e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	4a24      	ldr	r2, [pc, #144]	; (800747c <DMA_CalcBaseAndBitshift+0x15c>)
 80073ec:	5cd3      	ldrb	r3, [r2, r3]
 80073ee:	461a      	mov	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d908      	bls.n	800740c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	4b1f      	ldr	r3, [pc, #124]	; (8007480 <DMA_CalcBaseAndBitshift+0x160>)
 8007402:	4013      	ands	r3, r2
 8007404:	1d1a      	adds	r2, r3, #4
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	659a      	str	r2, [r3, #88]	; 0x58
 800740a:	e00d      	b.n	8007428 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	461a      	mov	r2, r3
 8007412:	4b1b      	ldr	r3, [pc, #108]	; (8007480 <DMA_CalcBaseAndBitshift+0x160>)
 8007414:	4013      	ands	r3, r2
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6593      	str	r3, [r2, #88]	; 0x58
 800741a:	e005      	b.n	8007428 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800742c:	4618      	mov	r0, r3
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	40020010 	.word	0x40020010
 800743c:	40020028 	.word	0x40020028
 8007440:	40020040 	.word	0x40020040
 8007444:	40020058 	.word	0x40020058
 8007448:	40020070 	.word	0x40020070
 800744c:	40020088 	.word	0x40020088
 8007450:	400200a0 	.word	0x400200a0
 8007454:	400200b8 	.word	0x400200b8
 8007458:	40020410 	.word	0x40020410
 800745c:	40020428 	.word	0x40020428
 8007460:	40020440 	.word	0x40020440
 8007464:	40020458 	.word	0x40020458
 8007468:	40020470 	.word	0x40020470
 800746c:	40020488 	.word	0x40020488
 8007470:	400204a0 	.word	0x400204a0
 8007474:	400204b8 	.word	0x400204b8
 8007478:	aaaaaaab 	.word	0xaaaaaaab
 800747c:	08010778 	.word	0x08010778
 8007480:	fffffc00 	.word	0xfffffc00

08007484 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d120      	bne.n	80074da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749c:	2b03      	cmp	r3, #3
 800749e:	d858      	bhi.n	8007552 <DMA_CheckFifoParam+0xce>
 80074a0:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <DMA_CheckFifoParam+0x24>)
 80074a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a6:	bf00      	nop
 80074a8:	080074b9 	.word	0x080074b9
 80074ac:	080074cb 	.word	0x080074cb
 80074b0:	080074b9 	.word	0x080074b9
 80074b4:	08007553 	.word	0x08007553
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d048      	beq.n	8007556 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074c8:	e045      	b.n	8007556 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074d2:	d142      	bne.n	800755a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074d8:	e03f      	b.n	800755a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e2:	d123      	bne.n	800752c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d838      	bhi.n	800755e <DMA_CheckFifoParam+0xda>
 80074ec:	a201      	add	r2, pc, #4	; (adr r2, 80074f4 <DMA_CheckFifoParam+0x70>)
 80074ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f2:	bf00      	nop
 80074f4:	08007505 	.word	0x08007505
 80074f8:	0800750b 	.word	0x0800750b
 80074fc:	08007505 	.word	0x08007505
 8007500:	0800751d 	.word	0x0800751d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	73fb      	strb	r3, [r7, #15]
        break;
 8007508:	e030      	b.n	800756c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d025      	beq.n	8007562 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800751a:	e022      	b.n	8007562 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007524:	d11f      	bne.n	8007566 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800752a:	e01c      	b.n	8007566 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007530:	2b02      	cmp	r3, #2
 8007532:	d902      	bls.n	800753a <DMA_CheckFifoParam+0xb6>
 8007534:	2b03      	cmp	r3, #3
 8007536:	d003      	beq.n	8007540 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007538:	e018      	b.n	800756c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	73fb      	strb	r3, [r7, #15]
        break;
 800753e:	e015      	b.n	800756c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00e      	beq.n	800756a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	73fb      	strb	r3, [r7, #15]
    break;
 8007550:	e00b      	b.n	800756a <DMA_CheckFifoParam+0xe6>
        break;
 8007552:	bf00      	nop
 8007554:	e00a      	b.n	800756c <DMA_CheckFifoParam+0xe8>
        break;
 8007556:	bf00      	nop
 8007558:	e008      	b.n	800756c <DMA_CheckFifoParam+0xe8>
        break;
 800755a:	bf00      	nop
 800755c:	e006      	b.n	800756c <DMA_CheckFifoParam+0xe8>
        break;
 800755e:	bf00      	nop
 8007560:	e004      	b.n	800756c <DMA_CheckFifoParam+0xe8>
        break;
 8007562:	bf00      	nop
 8007564:	e002      	b.n	800756c <DMA_CheckFifoParam+0xe8>
        break;
 8007566:	bf00      	nop
 8007568:	e000      	b.n	800756c <DMA_CheckFifoParam+0xe8>
    break;
 800756a:	bf00      	nop
    }
  }

  return status;
 800756c:	7bfb      	ldrb	r3, [r7, #15]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop

0800757c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a38      	ldr	r2, [pc, #224]	; (8007670 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d022      	beq.n	80075da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a36      	ldr	r2, [pc, #216]	; (8007674 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d01d      	beq.n	80075da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a35      	ldr	r2, [pc, #212]	; (8007678 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d018      	beq.n	80075da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a33      	ldr	r2, [pc, #204]	; (800767c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d013      	beq.n	80075da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a32      	ldr	r2, [pc, #200]	; (8007680 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d00e      	beq.n	80075da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a30      	ldr	r2, [pc, #192]	; (8007684 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d009      	beq.n	80075da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a2f      	ldr	r2, [pc, #188]	; (8007688 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d004      	beq.n	80075da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a2d      	ldr	r2, [pc, #180]	; (800768c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d101      	bne.n	80075de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80075da:	2301      	movs	r3, #1
 80075dc:	e000      	b.n	80075e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80075de:	2300      	movs	r3, #0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d01a      	beq.n	800761a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	3b08      	subs	r3, #8
 80075ec:	4a28      	ldr	r2, [pc, #160]	; (8007690 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80075ee:	fba2 2303 	umull	r2, r3, r2, r3
 80075f2:	091b      	lsrs	r3, r3, #4
 80075f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	4b26      	ldr	r3, [pc, #152]	; (8007694 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80075fa:	4413      	add	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	461a      	mov	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a24      	ldr	r2, [pc, #144]	; (8007698 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007608:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f003 031f 	and.w	r3, r3, #31
 8007610:	2201      	movs	r2, #1
 8007612:	409a      	lsls	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007618:	e024      	b.n	8007664 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	3b10      	subs	r3, #16
 8007622:	4a1e      	ldr	r2, [pc, #120]	; (800769c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007624:	fba2 2303 	umull	r2, r3, r2, r3
 8007628:	091b      	lsrs	r3, r3, #4
 800762a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	4a1c      	ldr	r2, [pc, #112]	; (80076a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d806      	bhi.n	8007642 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4a1b      	ldr	r2, [pc, #108]	; (80076a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d902      	bls.n	8007642 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3308      	adds	r3, #8
 8007640:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	4b18      	ldr	r3, [pc, #96]	; (80076a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007646:	4413      	add	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	461a      	mov	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a16      	ldr	r2, [pc, #88]	; (80076ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007654:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f003 031f 	and.w	r3, r3, #31
 800765c:	2201      	movs	r2, #1
 800765e:	409a      	lsls	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007664:	bf00      	nop
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	58025408 	.word	0x58025408
 8007674:	5802541c 	.word	0x5802541c
 8007678:	58025430 	.word	0x58025430
 800767c:	58025444 	.word	0x58025444
 8007680:	58025458 	.word	0x58025458
 8007684:	5802546c 	.word	0x5802546c
 8007688:	58025480 	.word	0x58025480
 800768c:	58025494 	.word	0x58025494
 8007690:	cccccccd 	.word	0xcccccccd
 8007694:	16009600 	.word	0x16009600
 8007698:	58025880 	.word	0x58025880
 800769c:	aaaaaaab 	.word	0xaaaaaaab
 80076a0:	400204b8 	.word	0x400204b8
 80076a4:	4002040f 	.word	0x4002040f
 80076a8:	10008200 	.word	0x10008200
 80076ac:	40020880 	.word	0x40020880

080076b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d04a      	beq.n	800775c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d847      	bhi.n	800775c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a25      	ldr	r2, [pc, #148]	; (8007768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d022      	beq.n	800771c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a24      	ldr	r2, [pc, #144]	; (800776c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d01d      	beq.n	800771c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a22      	ldr	r2, [pc, #136]	; (8007770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d018      	beq.n	800771c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a21      	ldr	r2, [pc, #132]	; (8007774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d013      	beq.n	800771c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a1f      	ldr	r2, [pc, #124]	; (8007778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d00e      	beq.n	800771c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a1e      	ldr	r2, [pc, #120]	; (800777c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d009      	beq.n	800771c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a1c      	ldr	r2, [pc, #112]	; (8007780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d004      	beq.n	800771c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a1b      	ldr	r2, [pc, #108]	; (8007784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d101      	bne.n	8007720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800771c:	2301      	movs	r3, #1
 800771e:	e000      	b.n	8007722 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007720:	2300      	movs	r3, #0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00a      	beq.n	800773c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	4b17      	ldr	r3, [pc, #92]	; (8007788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800772a:	4413      	add	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	461a      	mov	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a15      	ldr	r2, [pc, #84]	; (800778c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007738:	671a      	str	r2, [r3, #112]	; 0x70
 800773a:	e009      	b.n	8007750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	4b14      	ldr	r3, [pc, #80]	; (8007790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007740:	4413      	add	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	461a      	mov	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a11      	ldr	r2, [pc, #68]	; (8007794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800774e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3b01      	subs	r3, #1
 8007754:	2201      	movs	r2, #1
 8007756:	409a      	lsls	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800775c:	bf00      	nop
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	58025408 	.word	0x58025408
 800776c:	5802541c 	.word	0x5802541c
 8007770:	58025430 	.word	0x58025430
 8007774:	58025444 	.word	0x58025444
 8007778:	58025458 	.word	0x58025458
 800777c:	5802546c 	.word	0x5802546c
 8007780:	58025480 	.word	0x58025480
 8007784:	58025494 	.word	0x58025494
 8007788:	1600963f 	.word	0x1600963f
 800778c:	58025940 	.word	0x58025940
 8007790:	1000823f 	.word	0x1000823f
 8007794:	40020940 	.word	0x40020940

08007798 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e04f      	b.n	800784a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d106      	bne.n	80077c4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7f9 f906 	bl	80009d0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2202      	movs	r2, #2
 80077c8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	4b20      	ldr	r3, [pc, #128]	; (8007854 <HAL_DMA2D_Init+0xbc>)
 80077d4:	4013      	ands	r3, r2
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	6851      	ldr	r1, [r2, #4]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	69d2      	ldr	r2, [r2, #28]
 80077de:	4311      	orrs	r1, r2
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	6812      	ldr	r2, [r2, #0]
 80077e4:	430b      	orrs	r3, r1
 80077e6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077ee:	4b1a      	ldr	r3, [pc, #104]	; (8007858 <HAL_DMA2D_Init+0xc0>)
 80077f0:	4013      	ands	r3, r2
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	6891      	ldr	r1, [r2, #8]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	6992      	ldr	r2, [r2, #24]
 80077fa:	4311      	orrs	r1, r2
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	6812      	ldr	r2, [r2, #0]
 8007800:	430b      	orrs	r3, r1
 8007802:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800780a:	4b14      	ldr	r3, [pc, #80]	; (800785c <HAL_DMA2D_Init+0xc4>)
 800780c:	4013      	ands	r3, r2
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	68d1      	ldr	r1, [r2, #12]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	6812      	ldr	r2, [r2, #0]
 8007816:	430b      	orrs	r3, r1
 8007818:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007820:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	051a      	lsls	r2, r3, #20
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	055b      	lsls	r3, r3, #21
 8007830:	431a      	orrs	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	fff8ffbf 	.word	0xfff8ffbf
 8007858:	fffffef8 	.word	0xfffffef8
 800785c:	ffff0000 	.word	0xffff0000

08007860 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af02      	add	r7, sp, #8
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
 800786c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007874:	2b01      	cmp	r3, #1
 8007876:	d101      	bne.n	800787c <HAL_DMA2D_Start+0x1c>
 8007878:	2302      	movs	r3, #2
 800787a:	e018      	b.n	80078ae <HAL_DMA2D_Start+0x4e>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	68b9      	ldr	r1, [r7, #8]
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 fab4 	bl	8007e04 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f042 0201 	orr.w	r2, r2, #1
 80078aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b086      	sub	sp, #24
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80078c0:	2300      	movs	r3, #0
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d056      	beq.n	8007980 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80078d2:	f7fc fc73 	bl	80041bc <HAL_GetTick>
 80078d6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80078d8:	e04b      	b.n	8007972 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d023      	beq.n	8007934 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f003 0320 	and.w	r3, r3, #32
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d005      	beq.n	8007902 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078fa:	f043 0202 	orr.w	r2, r3, #2
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	2b00      	cmp	r3, #0
 800790a:	d005      	beq.n	8007918 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007910:	f043 0201 	orr.w	r2, r3, #1
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2221      	movs	r2, #33	; 0x21
 800791e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2204      	movs	r2, #4
 8007924:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e0a5      	b.n	8007a80 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793a:	d01a      	beq.n	8007972 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800793c:	f7fc fc3e 	bl	80041bc <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	429a      	cmp	r2, r3
 800794a:	d302      	bcc.n	8007952 <HAL_DMA2D_PollForTransfer+0x9c>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10f      	bne.n	8007972 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007956:	f043 0220 	orr.w	r2, r3, #32
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2203      	movs	r2, #3
 8007962:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e086      	b.n	8007a80 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d0ac      	beq.n	80078da <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	f003 0320 	and.w	r3, r3, #32
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	4313      	orrs	r3, r2
 800799a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d061      	beq.n	8007a66 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80079a2:	f7fc fc0b 	bl	80041bc <HAL_GetTick>
 80079a6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80079a8:	e056      	b.n	8007a58 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d02e      	beq.n	8007a1a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f003 0308 	and.w	r3, r3, #8
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d005      	beq.n	80079d2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079ca:	f043 0204 	orr.w	r2, r3, #4
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f003 0320 	and.w	r3, r3, #32
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d005      	beq.n	80079e8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079e0:	f043 0202 	orr.w	r2, r3, #2
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d005      	beq.n	80079fe <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079f6:	f043 0201 	orr.w	r2, r3, #1
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2229      	movs	r2, #41	; 0x29
 8007a04:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2204      	movs	r2, #4
 8007a0a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e032      	b.n	8007a80 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a20:	d01a      	beq.n	8007a58 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a22:	f7fc fbcb 	bl	80041bc <HAL_GetTick>
 8007a26:	4602      	mov	r2, r0
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d302      	bcc.n	8007a38 <HAL_DMA2D_PollForTransfer+0x182>
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10f      	bne.n	8007a58 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a3c:	f043 0220 	orr.w	r2, r3, #32
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2203      	movs	r2, #3
 8007a48:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e013      	b.n	8007a80 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f003 0310 	and.w	r3, r3, #16
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0a1      	beq.n	80079aa <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2212      	movs	r2, #18
 8007a6c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3718      	adds	r7, #24
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d026      	beq.n	8007af8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d021      	beq.n	8007af8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ac2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ac8:	f043 0201 	orr.w	r2, r3, #1
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2204      	movs	r2, #4
 8007adc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d003      	beq.n	8007af8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f003 0320 	and.w	r3, r3, #32
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d026      	beq.n	8007b50 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d021      	beq.n	8007b50 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b1a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2220      	movs	r2, #32
 8007b22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b28:	f043 0202 	orr.w	r2, r3, #2
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2204      	movs	r2, #4
 8007b34:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d003      	beq.n	8007b50 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f003 0308 	and.w	r3, r3, #8
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d026      	beq.n	8007ba8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d021      	beq.n	8007ba8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b72:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2208      	movs	r2, #8
 8007b7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b80:	f043 0204 	orr.w	r2, r3, #4
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2204      	movs	r2, #4
 8007b8c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f003 0304 	and.w	r3, r3, #4
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d013      	beq.n	8007bda <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00e      	beq.n	8007bda <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bca:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2204      	movs	r2, #4
 8007bd2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f853 	bl	8007c80 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f003 0302 	and.w	r3, r3, #2
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d024      	beq.n	8007c2e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d01f      	beq.n	8007c2e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007bfc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2202      	movs	r2, #2
 8007c04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d003      	beq.n	8007c2e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f003 0310 	and.w	r3, r3, #16
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d01f      	beq.n	8007c78 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d01a      	beq.n	8007c78 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c50:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2210      	movs	r2, #16
 8007c58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f80e 	bl	8007c94 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007c78:	bf00      	nop
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d101      	bne.n	8007ccc <HAL_DMA2D_ConfigLayer+0x24>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	e092      	b.n	8007df2 <HAL_DMA2D_ConfigLayer+0x14a>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	00db      	lsls	r3, r3, #3
 8007ce2:	1a9b      	subs	r3, r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	3328      	adds	r3, #40	; 0x28
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	4413      	add	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	041b      	lsls	r3, r3, #16
 8007cf8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007d00:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007d0c:	4b3c      	ldr	r3, [pc, #240]	; (8007e00 <HAL_DMA2D_ConfigLayer+0x158>)
 8007d0e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	2b0a      	cmp	r3, #10
 8007d16:	d003      	beq.n	8007d20 <HAL_DMA2D_ConfigLayer+0x78>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	2b09      	cmp	r3, #9
 8007d1e:	d107      	bne.n	8007d30 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	613b      	str	r3, [r7, #16]
 8007d2e:	e005      	b.n	8007d3c <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	061b      	lsls	r3, r3, #24
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d120      	bne.n	8007d84 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	43db      	mvns	r3, r3
 8007d4c:	ea02 0103 	and.w	r1, r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	6812      	ldr	r2, [r2, #0]
 8007d62:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	2b0a      	cmp	r3, #10
 8007d6a:	d003      	beq.n	8007d74 <HAL_DMA2D_ConfigLayer+0xcc>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	2b09      	cmp	r3, #9
 8007d72:	d135      	bne.n	8007de0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	68da      	ldr	r2, [r3, #12]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007d80:	629a      	str	r2, [r3, #40]	; 0x28
 8007d82:	e02d      	b.n	8007de0 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	2b0b      	cmp	r3, #11
 8007d8a:	d109      	bne.n	8007da0 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	049b      	lsls	r3, r3, #18
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8007d9e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	69da      	ldr	r2, [r3, #28]
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	43db      	mvns	r3, r3
 8007daa:	ea02 0103 	and.w	r1, r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	430a      	orrs	r2, r1
 8007db6:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	6812      	ldr	r2, [r2, #0]
 8007dc0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	2b0a      	cmp	r3, #10
 8007dc8:	d003      	beq.n	8007dd2 <HAL_DMA2D_ConfigLayer+0x12a>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	2b09      	cmp	r3, #9
 8007dd0:	d106      	bne.n	8007de0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007dde:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	371c      	adds	r7, #28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	ff33000f 	.word	0xff33000f

08007e04 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b08b      	sub	sp, #44	; 0x2c
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e18:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	041a      	lsls	r2, r3, #16
 8007e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e22:	431a      	orrs	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e3c:	d174      	bne.n	8007f28 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007e44:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e4c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e54:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d108      	bne.n	8007e76 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007e64:	69ba      	ldr	r2, [r7, #24]
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	431a      	orrs	r2, r3
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
 8007e74:	e053      	b.n	8007f1e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d106      	bne.n	8007e8c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007e7e:	69ba      	ldr	r2, [r7, #24]
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
 8007e8a:	e048      	b.n	8007f1e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d111      	bne.n	8007eb8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	0cdb      	lsrs	r3, r3, #19
 8007e98:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	0a9b      	lsrs	r3, r3, #10
 8007e9e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	08db      	lsrs	r3, r3, #3
 8007ea4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	015a      	lsls	r2, r3, #5
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	02db      	lsls	r3, r3, #11
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8007eb6:	e032      	b.n	8007f1e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d117      	bne.n	8007ef0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	0fdb      	lsrs	r3, r3, #31
 8007ec4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	0cdb      	lsrs	r3, r3, #19
 8007eca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	0adb      	lsrs	r3, r3, #11
 8007ed0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	08db      	lsrs	r3, r3, #3
 8007ed6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	029b      	lsls	r3, r3, #10
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	03db      	lsls	r3, r3, #15
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
 8007eee:	e016      	b.n	8007f1e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	0f1b      	lsrs	r3, r3, #28
 8007ef4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	0d1b      	lsrs	r3, r3, #20
 8007efa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	0b1b      	lsrs	r3, r3, #12
 8007f00:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	091b      	lsrs	r3, r3, #4
 8007f06:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	011a      	lsls	r2, r3, #4
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	021b      	lsls	r3, r3, #8
 8007f10:	431a      	orrs	r2, r3
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	031b      	lsls	r3, r3, #12
 8007f16:	4313      	orrs	r3, r2
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f24:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007f26:	e00d      	b.n	8007f44 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f30:	d104      	bne.n	8007f3c <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	615a      	str	r2, [r3, #20]
}
 8007f3a:	e003      	b.n	8007f44 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	60da      	str	r2, [r3, #12]
}
 8007f44:	bf00      	nop
 8007f46:	372c      	adds	r7, #44	; 0x2c
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	2b80      	cmp	r3, #128	; 0x80
 8007f68:	d105      	bne.n	8007f76 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e315      	b.n	80085a2 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d101      	bne.n	8007f84 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8007f80:	2302      	movs	r3, #2
 8007f82:	e30e      	b.n	80085a2 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	f040 82fd 	bne.w	8008594 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a82      	ldr	r2, [pc, #520]	; (80081b8 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d04a      	beq.n	8008048 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a81      	ldr	r2, [pc, #516]	; (80081bc <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d045      	beq.n	8008048 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a7f      	ldr	r2, [pc, #508]	; (80081c0 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d040      	beq.n	8008048 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a7e      	ldr	r2, [pc, #504]	; (80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d03b      	beq.n	8008048 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a7c      	ldr	r2, [pc, #496]	; (80081c8 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d036      	beq.n	8008048 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a7b      	ldr	r2, [pc, #492]	; (80081cc <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d031      	beq.n	8008048 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a79      	ldr	r2, [pc, #484]	; (80081d0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d02c      	beq.n	8008048 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a78      	ldr	r2, [pc, #480]	; (80081d4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d027      	beq.n	8008048 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a76      	ldr	r2, [pc, #472]	; (80081d8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d022      	beq.n	8008048 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a75      	ldr	r2, [pc, #468]	; (80081dc <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d01d      	beq.n	8008048 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a73      	ldr	r2, [pc, #460]	; (80081e0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d018      	beq.n	8008048 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a72      	ldr	r2, [pc, #456]	; (80081e4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d013      	beq.n	8008048 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a70      	ldr	r2, [pc, #448]	; (80081e8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d00e      	beq.n	8008048 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a6f      	ldr	r2, [pc, #444]	; (80081ec <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d009      	beq.n	8008048 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a6d      	ldr	r2, [pc, #436]	; (80081f0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d004      	beq.n	8008048 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a6c      	ldr	r2, [pc, #432]	; (80081f4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d101      	bne.n	800804c <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8008048:	2301      	movs	r3, #1
 800804a:	e000      	b.n	800804e <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 800804c:	2300      	movs	r3, #0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d018      	beq.n	8008084 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008060:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800806e:	3308      	adds	r3, #8
 8008070:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008076:	f003 031f 	and.w	r3, r3, #31
 800807a:	223f      	movs	r2, #63	; 0x3f
 800807c:	409a      	lsls	r2, r3
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	601a      	str	r2, [r3, #0]
 8008082:	e018      	b.n	80080b6 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6819      	ldr	r1, [r3, #0]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	f248 0320 	movw	r3, #32800	; 0x8020
 8008092:	430b      	orrs	r3, r1
 8008094:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a2:	3304      	adds	r3, #4
 80080a4:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080aa:	f003 031f 	and.w	r3, r3, #31
 80080ae:	2201      	movs	r2, #1
 80080b0:	409a      	lsls	r2, r3
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	68b9      	ldr	r1, [r7, #8]
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 fb41 	bl	8008744 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a3c      	ldr	r2, [pc, #240]	; (80081b8 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d072      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a3a      	ldr	r2, [pc, #232]	; (80081bc <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d06d      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a39      	ldr	r2, [pc, #228]	; (80081c0 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d068      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a37      	ldr	r2, [pc, #220]	; (80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d063      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a36      	ldr	r2, [pc, #216]	; (80081c8 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d05e      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a34      	ldr	r2, [pc, #208]	; (80081cc <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d059      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a33      	ldr	r2, [pc, #204]	; (80081d0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d054      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a31      	ldr	r2, [pc, #196]	; (80081d4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d04f      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a30      	ldr	r2, [pc, #192]	; (80081d8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d04a      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a2e      	ldr	r2, [pc, #184]	; (80081dc <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d045      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a2d      	ldr	r2, [pc, #180]	; (80081e0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d040      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a2b      	ldr	r2, [pc, #172]	; (80081e4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d03b      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a2a      	ldr	r2, [pc, #168]	; (80081e8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d036      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a28      	ldr	r2, [pc, #160]	; (80081ec <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d031      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a27      	ldr	r2, [pc, #156]	; (80081f0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d02c      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a25      	ldr	r2, [pc, #148]	; (80081f4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d027      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a24      	ldr	r2, [pc, #144]	; (80081f8 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d022      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a22      	ldr	r2, [pc, #136]	; (80081fc <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d01d      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a21      	ldr	r2, [pc, #132]	; (8008200 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d018      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a1f      	ldr	r2, [pc, #124]	; (8008204 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d013      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a1e      	ldr	r2, [pc, #120]	; (8008208 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d00e      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a1c      	ldr	r2, [pc, #112]	; (800820c <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d009      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a1b      	ldr	r2, [pc, #108]	; (8008210 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d004      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a19      	ldr	r2, [pc, #100]	; (8008214 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d132      	bne.n	8008218 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80081b2:	2301      	movs	r3, #1
 80081b4:	e031      	b.n	800821a <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80081b6:	bf00      	nop
 80081b8:	40020010 	.word	0x40020010
 80081bc:	40020028 	.word	0x40020028
 80081c0:	40020040 	.word	0x40020040
 80081c4:	40020058 	.word	0x40020058
 80081c8:	40020070 	.word	0x40020070
 80081cc:	40020088 	.word	0x40020088
 80081d0:	400200a0 	.word	0x400200a0
 80081d4:	400200b8 	.word	0x400200b8
 80081d8:	40020410 	.word	0x40020410
 80081dc:	40020428 	.word	0x40020428
 80081e0:	40020440 	.word	0x40020440
 80081e4:	40020458 	.word	0x40020458
 80081e8:	40020470 	.word	0x40020470
 80081ec:	40020488 	.word	0x40020488
 80081f0:	400204a0 	.word	0x400204a0
 80081f4:	400204b8 	.word	0x400204b8
 80081f8:	58025408 	.word	0x58025408
 80081fc:	5802541c 	.word	0x5802541c
 8008200:	58025430 	.word	0x58025430
 8008204:	58025444 	.word	0x58025444
 8008208:	58025458 	.word	0x58025458
 800820c:	5802546c 	.word	0x5802546c
 8008210:	58025480 	.word	0x58025480
 8008214:	58025494 	.word	0x58025494
 8008218:	2300      	movs	r3, #0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00d      	beq.n	800823a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008226:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800822c:	2b00      	cmp	r3, #0
 800822e:	d004      	beq.n	800823a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008238:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a3b      	ldr	r2, [pc, #236]	; (800832c <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d04a      	beq.n	80082da <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a39      	ldr	r2, [pc, #228]	; (8008330 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d045      	beq.n	80082da <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a38      	ldr	r2, [pc, #224]	; (8008334 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d040      	beq.n	80082da <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a36      	ldr	r2, [pc, #216]	; (8008338 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d03b      	beq.n	80082da <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a35      	ldr	r2, [pc, #212]	; (800833c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d036      	beq.n	80082da <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a33      	ldr	r2, [pc, #204]	; (8008340 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d031      	beq.n	80082da <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a32      	ldr	r2, [pc, #200]	; (8008344 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d02c      	beq.n	80082da <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a30      	ldr	r2, [pc, #192]	; (8008348 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d027      	beq.n	80082da <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a2f      	ldr	r2, [pc, #188]	; (800834c <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d022      	beq.n	80082da <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a2d      	ldr	r2, [pc, #180]	; (8008350 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d01d      	beq.n	80082da <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a2c      	ldr	r2, [pc, #176]	; (8008354 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d018      	beq.n	80082da <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a2a      	ldr	r2, [pc, #168]	; (8008358 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d013      	beq.n	80082da <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a29      	ldr	r2, [pc, #164]	; (800835c <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d00e      	beq.n	80082da <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a27      	ldr	r2, [pc, #156]	; (8008360 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d009      	beq.n	80082da <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a26      	ldr	r2, [pc, #152]	; (8008364 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d004      	beq.n	80082da <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a24      	ldr	r2, [pc, #144]	; (8008368 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d101      	bne.n	80082de <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80082da:	2301      	movs	r3, #1
 80082dc:	e000      	b.n	80082e0 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80082de:	2300      	movs	r3, #0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d043      	beq.n	800836c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f023 021e 	bic.w	r2, r3, #30
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f042 0216 	orr.w	r2, r2, #22
 80082f6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	695a      	ldr	r2, [r3, #20]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008306:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830c:	2b00      	cmp	r3, #0
 800830e:	d103      	bne.n	8008318 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008314:	2b00      	cmp	r3, #0
 8008316:	d043      	beq.n	80083a0 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f042 0208 	orr.w	r2, r2, #8
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	e03a      	b.n	80083a0 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 800832a:	bf00      	nop
 800832c:	40020010 	.word	0x40020010
 8008330:	40020028 	.word	0x40020028
 8008334:	40020040 	.word	0x40020040
 8008338:	40020058 	.word	0x40020058
 800833c:	40020070 	.word	0x40020070
 8008340:	40020088 	.word	0x40020088
 8008344:	400200a0 	.word	0x400200a0
 8008348:	400200b8 	.word	0x400200b8
 800834c:	40020410 	.word	0x40020410
 8008350:	40020428 	.word	0x40020428
 8008354:	40020440 	.word	0x40020440
 8008358:	40020458 	.word	0x40020458
 800835c:	40020470 	.word	0x40020470
 8008360:	40020488 	.word	0x40020488
 8008364:	400204a0 	.word	0x400204a0
 8008368:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f023 020e 	bic.w	r2, r3, #14
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f042 020a 	orr.w	r2, r2, #10
 800837e:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008384:	2b00      	cmp	r3, #0
 8008386:	d103      	bne.n	8008390 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800838c:	2b00      	cmp	r3, #0
 800838e:	d007      	beq.n	80083a0 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f042 0204 	orr.w	r2, r2, #4
 800839e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a81      	ldr	r2, [pc, #516]	; (80085ac <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d072      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a80      	ldr	r2, [pc, #512]	; (80085b0 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d06d      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a7e      	ldr	r2, [pc, #504]	; (80085b4 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d068      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a7d      	ldr	r2, [pc, #500]	; (80085b8 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d063      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a7b      	ldr	r2, [pc, #492]	; (80085bc <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d05e      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a7a      	ldr	r2, [pc, #488]	; (80085c0 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d059      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a78      	ldr	r2, [pc, #480]	; (80085c4 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d054      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a77      	ldr	r2, [pc, #476]	; (80085c8 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d04f      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a75      	ldr	r2, [pc, #468]	; (80085cc <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d04a      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a74      	ldr	r2, [pc, #464]	; (80085d0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d045      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a72      	ldr	r2, [pc, #456]	; (80085d4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d040      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a71      	ldr	r2, [pc, #452]	; (80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d03b      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a6f      	ldr	r2, [pc, #444]	; (80085dc <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d036      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a6e      	ldr	r2, [pc, #440]	; (80085e0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d031      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a6c      	ldr	r2, [pc, #432]	; (80085e4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d02c      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a6b      	ldr	r2, [pc, #428]	; (80085e8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d027      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a69      	ldr	r2, [pc, #420]	; (80085ec <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d022      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a68      	ldr	r2, [pc, #416]	; (80085f0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d01d      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a66      	ldr	r2, [pc, #408]	; (80085f4 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d018      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a65      	ldr	r2, [pc, #404]	; (80085f8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d013      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a63      	ldr	r2, [pc, #396]	; (80085fc <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d00e      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a62      	ldr	r2, [pc, #392]	; (8008600 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d009      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a60      	ldr	r2, [pc, #384]	; (8008604 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d004      	beq.n	8008490 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a5f      	ldr	r2, [pc, #380]	; (8008608 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d101      	bne.n	8008494 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8008490:	2301      	movs	r3, #1
 8008492:	e000      	b.n	8008496 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8008494:	2300      	movs	r3, #0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d01a      	beq.n	80084d0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d007      	beq.n	80084b8 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084b6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d007      	beq.n	80084d0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084ce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a35      	ldr	r2, [pc, #212]	; (80085ac <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d04a      	beq.n	8008570 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a34      	ldr	r2, [pc, #208]	; (80085b0 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d045      	beq.n	8008570 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a32      	ldr	r2, [pc, #200]	; (80085b4 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d040      	beq.n	8008570 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a31      	ldr	r2, [pc, #196]	; (80085b8 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d03b      	beq.n	8008570 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a2f      	ldr	r2, [pc, #188]	; (80085bc <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d036      	beq.n	8008570 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a2e      	ldr	r2, [pc, #184]	; (80085c0 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d031      	beq.n	8008570 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a2c      	ldr	r2, [pc, #176]	; (80085c4 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d02c      	beq.n	8008570 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a2b      	ldr	r2, [pc, #172]	; (80085c8 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d027      	beq.n	8008570 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a29      	ldr	r2, [pc, #164]	; (80085cc <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d022      	beq.n	8008570 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a28      	ldr	r2, [pc, #160]	; (80085d0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d01d      	beq.n	8008570 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a26      	ldr	r2, [pc, #152]	; (80085d4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d018      	beq.n	8008570 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a25      	ldr	r2, [pc, #148]	; (80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d013      	beq.n	8008570 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a23      	ldr	r2, [pc, #140]	; (80085dc <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d00e      	beq.n	8008570 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a22      	ldr	r2, [pc, #136]	; (80085e0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d009      	beq.n	8008570 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a20      	ldr	r2, [pc, #128]	; (80085e4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d004      	beq.n	8008570 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a1f      	ldr	r2, [pc, #124]	; (80085e8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d108      	bne.n	8008582 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f042 0201 	orr.w	r2, r2, #1
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	e00e      	b.n	80085a0 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f042 0201 	orr.w	r2, r2, #1
 8008590:	601a      	str	r2, [r3, #0]
 8008592:	e005      	b.n	80085a0 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800859a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80085a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3718      	adds	r7, #24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	40020010 	.word	0x40020010
 80085b0:	40020028 	.word	0x40020028
 80085b4:	40020040 	.word	0x40020040
 80085b8:	40020058 	.word	0x40020058
 80085bc:	40020070 	.word	0x40020070
 80085c0:	40020088 	.word	0x40020088
 80085c4:	400200a0 	.word	0x400200a0
 80085c8:	400200b8 	.word	0x400200b8
 80085cc:	40020410 	.word	0x40020410
 80085d0:	40020428 	.word	0x40020428
 80085d4:	40020440 	.word	0x40020440
 80085d8:	40020458 	.word	0x40020458
 80085dc:	40020470 	.word	0x40020470
 80085e0:	40020488 	.word	0x40020488
 80085e4:	400204a0 	.word	0x400204a0
 80085e8:	400204b8 	.word	0x400204b8
 80085ec:	58025408 	.word	0x58025408
 80085f0:	5802541c 	.word	0x5802541c
 80085f4:	58025430 	.word	0x58025430
 80085f8:	58025444 	.word	0x58025444
 80085fc:	58025458 	.word	0x58025458
 8008600:	5802546c 	.word	0x5802546c
 8008604:	58025480 	.word	0x58025480
 8008608:	58025494 	.word	0x58025494

0800860c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	4613      	mov	r3, r2
 8008618:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a39      	ldr	r2, [pc, #228]	; (8008704 <HAL_DMAEx_ChangeMemory+0xf8>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d04a      	beq.n	80086ba <HAL_DMAEx_ChangeMemory+0xae>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a37      	ldr	r2, [pc, #220]	; (8008708 <HAL_DMAEx_ChangeMemory+0xfc>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d045      	beq.n	80086ba <HAL_DMAEx_ChangeMemory+0xae>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a36      	ldr	r2, [pc, #216]	; (800870c <HAL_DMAEx_ChangeMemory+0x100>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d040      	beq.n	80086ba <HAL_DMAEx_ChangeMemory+0xae>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a34      	ldr	r2, [pc, #208]	; (8008710 <HAL_DMAEx_ChangeMemory+0x104>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d03b      	beq.n	80086ba <HAL_DMAEx_ChangeMemory+0xae>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a33      	ldr	r2, [pc, #204]	; (8008714 <HAL_DMAEx_ChangeMemory+0x108>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d036      	beq.n	80086ba <HAL_DMAEx_ChangeMemory+0xae>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a31      	ldr	r2, [pc, #196]	; (8008718 <HAL_DMAEx_ChangeMemory+0x10c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d031      	beq.n	80086ba <HAL_DMAEx_ChangeMemory+0xae>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a30      	ldr	r2, [pc, #192]	; (800871c <HAL_DMAEx_ChangeMemory+0x110>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d02c      	beq.n	80086ba <HAL_DMAEx_ChangeMemory+0xae>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a2e      	ldr	r2, [pc, #184]	; (8008720 <HAL_DMAEx_ChangeMemory+0x114>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d027      	beq.n	80086ba <HAL_DMAEx_ChangeMemory+0xae>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a2d      	ldr	r2, [pc, #180]	; (8008724 <HAL_DMAEx_ChangeMemory+0x118>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d022      	beq.n	80086ba <HAL_DMAEx_ChangeMemory+0xae>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a2b      	ldr	r2, [pc, #172]	; (8008728 <HAL_DMAEx_ChangeMemory+0x11c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d01d      	beq.n	80086ba <HAL_DMAEx_ChangeMemory+0xae>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a2a      	ldr	r2, [pc, #168]	; (800872c <HAL_DMAEx_ChangeMemory+0x120>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d018      	beq.n	80086ba <HAL_DMAEx_ChangeMemory+0xae>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a28      	ldr	r2, [pc, #160]	; (8008730 <HAL_DMAEx_ChangeMemory+0x124>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d013      	beq.n	80086ba <HAL_DMAEx_ChangeMemory+0xae>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a27      	ldr	r2, [pc, #156]	; (8008734 <HAL_DMAEx_ChangeMemory+0x128>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d00e      	beq.n	80086ba <HAL_DMAEx_ChangeMemory+0xae>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a25      	ldr	r2, [pc, #148]	; (8008738 <HAL_DMAEx_ChangeMemory+0x12c>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d009      	beq.n	80086ba <HAL_DMAEx_ChangeMemory+0xae>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a24      	ldr	r2, [pc, #144]	; (800873c <HAL_DMAEx_ChangeMemory+0x130>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d004      	beq.n	80086ba <HAL_DMAEx_ChangeMemory+0xae>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a22      	ldr	r2, [pc, #136]	; (8008740 <HAL_DMAEx_ChangeMemory+0x134>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d101      	bne.n	80086be <HAL_DMAEx_ChangeMemory+0xb2>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e000      	b.n	80086c0 <HAL_DMAEx_ChangeMemory+0xb4>
 80086be:	2300      	movs	r3, #0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00c      	beq.n	80086de <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80086c4:	79fb      	ldrb	r3, [r7, #7]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d104      	bne.n	80086d4 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	60da      	str	r2, [r3, #12]
 80086d2:	e010      	b.n	80086f6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	611a      	str	r2, [r3, #16]
 80086dc:	e00b      	b.n	80086f6 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80086de:	79fb      	ldrb	r3, [r7, #7]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d104      	bne.n	80086ee <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	60da      	str	r2, [r3, #12]
 80086ec:	e003      	b.n	80086f6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3714      	adds	r7, #20
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr
 8008704:	40020010 	.word	0x40020010
 8008708:	40020028 	.word	0x40020028
 800870c:	40020040 	.word	0x40020040
 8008710:	40020058 	.word	0x40020058
 8008714:	40020070 	.word	0x40020070
 8008718:	40020088 	.word	0x40020088
 800871c:	400200a0 	.word	0x400200a0
 8008720:	400200b8 	.word	0x400200b8
 8008724:	40020410 	.word	0x40020410
 8008728:	40020428 	.word	0x40020428
 800872c:	40020440 	.word	0x40020440
 8008730:	40020458 	.word	0x40020458
 8008734:	40020470 	.word	0x40020470
 8008738:	40020488 	.word	0x40020488
 800873c:	400204a0 	.word	0x400204a0
 8008740:	400204b8 	.word	0x400204b8

08008744 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
 8008750:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a46      	ldr	r2, [pc, #280]	; (8008870 <DMA_MultiBufferSetConfig+0x12c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d04a      	beq.n	80087f2 <DMA_MultiBufferSetConfig+0xae>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a44      	ldr	r2, [pc, #272]	; (8008874 <DMA_MultiBufferSetConfig+0x130>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d045      	beq.n	80087f2 <DMA_MultiBufferSetConfig+0xae>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a43      	ldr	r2, [pc, #268]	; (8008878 <DMA_MultiBufferSetConfig+0x134>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d040      	beq.n	80087f2 <DMA_MultiBufferSetConfig+0xae>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a41      	ldr	r2, [pc, #260]	; (800887c <DMA_MultiBufferSetConfig+0x138>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d03b      	beq.n	80087f2 <DMA_MultiBufferSetConfig+0xae>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a40      	ldr	r2, [pc, #256]	; (8008880 <DMA_MultiBufferSetConfig+0x13c>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d036      	beq.n	80087f2 <DMA_MultiBufferSetConfig+0xae>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a3e      	ldr	r2, [pc, #248]	; (8008884 <DMA_MultiBufferSetConfig+0x140>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d031      	beq.n	80087f2 <DMA_MultiBufferSetConfig+0xae>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a3d      	ldr	r2, [pc, #244]	; (8008888 <DMA_MultiBufferSetConfig+0x144>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d02c      	beq.n	80087f2 <DMA_MultiBufferSetConfig+0xae>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a3b      	ldr	r2, [pc, #236]	; (800888c <DMA_MultiBufferSetConfig+0x148>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d027      	beq.n	80087f2 <DMA_MultiBufferSetConfig+0xae>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a3a      	ldr	r2, [pc, #232]	; (8008890 <DMA_MultiBufferSetConfig+0x14c>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d022      	beq.n	80087f2 <DMA_MultiBufferSetConfig+0xae>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a38      	ldr	r2, [pc, #224]	; (8008894 <DMA_MultiBufferSetConfig+0x150>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d01d      	beq.n	80087f2 <DMA_MultiBufferSetConfig+0xae>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a37      	ldr	r2, [pc, #220]	; (8008898 <DMA_MultiBufferSetConfig+0x154>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d018      	beq.n	80087f2 <DMA_MultiBufferSetConfig+0xae>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a35      	ldr	r2, [pc, #212]	; (800889c <DMA_MultiBufferSetConfig+0x158>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d013      	beq.n	80087f2 <DMA_MultiBufferSetConfig+0xae>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a34      	ldr	r2, [pc, #208]	; (80088a0 <DMA_MultiBufferSetConfig+0x15c>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d00e      	beq.n	80087f2 <DMA_MultiBufferSetConfig+0xae>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a32      	ldr	r2, [pc, #200]	; (80088a4 <DMA_MultiBufferSetConfig+0x160>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d009      	beq.n	80087f2 <DMA_MultiBufferSetConfig+0xae>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a31      	ldr	r2, [pc, #196]	; (80088a8 <DMA_MultiBufferSetConfig+0x164>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d004      	beq.n	80087f2 <DMA_MultiBufferSetConfig+0xae>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a2f      	ldr	r2, [pc, #188]	; (80088ac <DMA_MultiBufferSetConfig+0x168>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d101      	bne.n	80087f6 <DMA_MultiBufferSetConfig+0xb2>
 80087f2:	2301      	movs	r3, #1
 80087f4:	e000      	b.n	80087f8 <DMA_MultiBufferSetConfig+0xb4>
 80087f6:	2300      	movs	r3, #0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d019      	beq.n	8008830 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	683a      	ldr	r2, [r7, #0]
 8008802:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	2b40      	cmp	r3, #64	; 0x40
 800880a:	d108      	bne.n	800881e <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 800881c:	e021      	b.n	8008862 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	60da      	str	r2, [r3, #12]
}
 800882e:	e018      	b.n	8008862 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	2b40      	cmp	r3, #64	; 0x40
 800883e:	d108      	bne.n	8008852 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	60da      	str	r2, [r3, #12]
}
 8008850:	e007      	b.n	8008862 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	60da      	str	r2, [r3, #12]
}
 8008862:	bf00      	nop
 8008864:	3714      	adds	r7, #20
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	40020010 	.word	0x40020010
 8008874:	40020028 	.word	0x40020028
 8008878:	40020040 	.word	0x40020040
 800887c:	40020058 	.word	0x40020058
 8008880:	40020070 	.word	0x40020070
 8008884:	40020088 	.word	0x40020088
 8008888:	400200a0 	.word	0x400200a0
 800888c:	400200b8 	.word	0x400200b8
 8008890:	40020410 	.word	0x40020410
 8008894:	40020428 	.word	0x40020428
 8008898:	40020440 	.word	0x40020440
 800889c:	40020458 	.word	0x40020458
 80088a0:	40020470 	.word	0x40020470
 80088a4:	40020488 	.word	0x40020488
 80088a8:	400204a0 	.word	0x400204a0
 80088ac:	400204b8 	.word	0x400204b8

080088b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b089      	sub	sp, #36	; 0x24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80088be:	4b89      	ldr	r3, [pc, #548]	; (8008ae4 <HAL_GPIO_Init+0x234>)
 80088c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80088c2:	e194      	b.n	8008bee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	2101      	movs	r1, #1
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	fa01 f303 	lsl.w	r3, r1, r3
 80088d0:	4013      	ands	r3, r2
 80088d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f000 8186 	beq.w	8008be8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	f003 0303 	and.w	r3, r3, #3
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d005      	beq.n	80088f4 <HAL_GPIO_Init+0x44>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	f003 0303 	and.w	r3, r3, #3
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d130      	bne.n	8008956 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	2203      	movs	r2, #3
 8008900:	fa02 f303 	lsl.w	r3, r2, r3
 8008904:	43db      	mvns	r3, r3
 8008906:	69ba      	ldr	r2, [r7, #24]
 8008908:	4013      	ands	r3, r2
 800890a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	68da      	ldr	r2, [r3, #12]
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	005b      	lsls	r3, r3, #1
 8008914:	fa02 f303 	lsl.w	r3, r2, r3
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	4313      	orrs	r3, r2
 800891c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800892a:	2201      	movs	r2, #1
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	fa02 f303 	lsl.w	r3, r2, r3
 8008932:	43db      	mvns	r3, r3
 8008934:	69ba      	ldr	r2, [r7, #24]
 8008936:	4013      	ands	r3, r2
 8008938:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	091b      	lsrs	r3, r3, #4
 8008940:	f003 0201 	and.w	r2, r3, #1
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	fa02 f303 	lsl.w	r3, r2, r3
 800894a:	69ba      	ldr	r2, [r7, #24]
 800894c:	4313      	orrs	r3, r2
 800894e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	69ba      	ldr	r2, [r7, #24]
 8008954:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	f003 0303 	and.w	r3, r3, #3
 800895e:	2b03      	cmp	r3, #3
 8008960:	d017      	beq.n	8008992 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	005b      	lsls	r3, r3, #1
 800896c:	2203      	movs	r2, #3
 800896e:	fa02 f303 	lsl.w	r3, r2, r3
 8008972:	43db      	mvns	r3, r3
 8008974:	69ba      	ldr	r2, [r7, #24]
 8008976:	4013      	ands	r3, r2
 8008978:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	689a      	ldr	r2, [r3, #8]
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	fa02 f303 	lsl.w	r3, r2, r3
 8008986:	69ba      	ldr	r2, [r7, #24]
 8008988:	4313      	orrs	r3, r2
 800898a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f003 0303 	and.w	r3, r3, #3
 800899a:	2b02      	cmp	r3, #2
 800899c:	d123      	bne.n	80089e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	08da      	lsrs	r2, r3, #3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	3208      	adds	r2, #8
 80089a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	f003 0307 	and.w	r3, r3, #7
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	220f      	movs	r2, #15
 80089b6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ba:	43db      	mvns	r3, r3
 80089bc:	69ba      	ldr	r2, [r7, #24]
 80089be:	4013      	ands	r3, r2
 80089c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	691a      	ldr	r2, [r3, #16]
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	f003 0307 	and.w	r3, r3, #7
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	fa02 f303 	lsl.w	r3, r2, r3
 80089d2:	69ba      	ldr	r2, [r7, #24]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	08da      	lsrs	r2, r3, #3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3208      	adds	r2, #8
 80089e0:	69b9      	ldr	r1, [r7, #24]
 80089e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	005b      	lsls	r3, r3, #1
 80089f0:	2203      	movs	r2, #3
 80089f2:	fa02 f303 	lsl.w	r3, r2, r3
 80089f6:	43db      	mvns	r3, r3
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	4013      	ands	r3, r2
 80089fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	f003 0203 	and.w	r2, r3, #3
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	005b      	lsls	r3, r3, #1
 8008a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0e:	69ba      	ldr	r2, [r7, #24]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	69ba      	ldr	r2, [r7, #24]
 8008a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 80e0 	beq.w	8008be8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a28:	4b2f      	ldr	r3, [pc, #188]	; (8008ae8 <HAL_GPIO_Init+0x238>)
 8008a2a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008a2e:	4a2e      	ldr	r2, [pc, #184]	; (8008ae8 <HAL_GPIO_Init+0x238>)
 8008a30:	f043 0302 	orr.w	r3, r3, #2
 8008a34:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8008a38:	4b2b      	ldr	r3, [pc, #172]	; (8008ae8 <HAL_GPIO_Init+0x238>)
 8008a3a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008a3e:	f003 0302 	and.w	r3, r3, #2
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a46:	4a29      	ldr	r2, [pc, #164]	; (8008aec <HAL_GPIO_Init+0x23c>)
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	089b      	lsrs	r3, r3, #2
 8008a4c:	3302      	adds	r3, #2
 8008a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	f003 0303 	and.w	r3, r3, #3
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	220f      	movs	r2, #15
 8008a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a62:	43db      	mvns	r3, r3
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	4013      	ands	r3, r2
 8008a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a20      	ldr	r2, [pc, #128]	; (8008af0 <HAL_GPIO_Init+0x240>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d052      	beq.n	8008b18 <HAL_GPIO_Init+0x268>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a1f      	ldr	r2, [pc, #124]	; (8008af4 <HAL_GPIO_Init+0x244>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d031      	beq.n	8008ade <HAL_GPIO_Init+0x22e>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a1e      	ldr	r2, [pc, #120]	; (8008af8 <HAL_GPIO_Init+0x248>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d02b      	beq.n	8008ada <HAL_GPIO_Init+0x22a>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a1d      	ldr	r2, [pc, #116]	; (8008afc <HAL_GPIO_Init+0x24c>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d025      	beq.n	8008ad6 <HAL_GPIO_Init+0x226>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a1c      	ldr	r2, [pc, #112]	; (8008b00 <HAL_GPIO_Init+0x250>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d01f      	beq.n	8008ad2 <HAL_GPIO_Init+0x222>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a1b      	ldr	r2, [pc, #108]	; (8008b04 <HAL_GPIO_Init+0x254>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d019      	beq.n	8008ace <HAL_GPIO_Init+0x21e>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a1a      	ldr	r2, [pc, #104]	; (8008b08 <HAL_GPIO_Init+0x258>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d013      	beq.n	8008aca <HAL_GPIO_Init+0x21a>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a19      	ldr	r2, [pc, #100]	; (8008b0c <HAL_GPIO_Init+0x25c>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d00d      	beq.n	8008ac6 <HAL_GPIO_Init+0x216>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a18      	ldr	r2, [pc, #96]	; (8008b10 <HAL_GPIO_Init+0x260>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d007      	beq.n	8008ac2 <HAL_GPIO_Init+0x212>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a17      	ldr	r2, [pc, #92]	; (8008b14 <HAL_GPIO_Init+0x264>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d101      	bne.n	8008abe <HAL_GPIO_Init+0x20e>
 8008aba:	2309      	movs	r3, #9
 8008abc:	e02d      	b.n	8008b1a <HAL_GPIO_Init+0x26a>
 8008abe:	230a      	movs	r3, #10
 8008ac0:	e02b      	b.n	8008b1a <HAL_GPIO_Init+0x26a>
 8008ac2:	2308      	movs	r3, #8
 8008ac4:	e029      	b.n	8008b1a <HAL_GPIO_Init+0x26a>
 8008ac6:	2307      	movs	r3, #7
 8008ac8:	e027      	b.n	8008b1a <HAL_GPIO_Init+0x26a>
 8008aca:	2306      	movs	r3, #6
 8008acc:	e025      	b.n	8008b1a <HAL_GPIO_Init+0x26a>
 8008ace:	2305      	movs	r3, #5
 8008ad0:	e023      	b.n	8008b1a <HAL_GPIO_Init+0x26a>
 8008ad2:	2304      	movs	r3, #4
 8008ad4:	e021      	b.n	8008b1a <HAL_GPIO_Init+0x26a>
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e01f      	b.n	8008b1a <HAL_GPIO_Init+0x26a>
 8008ada:	2302      	movs	r3, #2
 8008adc:	e01d      	b.n	8008b1a <HAL_GPIO_Init+0x26a>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e01b      	b.n	8008b1a <HAL_GPIO_Init+0x26a>
 8008ae2:	bf00      	nop
 8008ae4:	58000080 	.word	0x58000080
 8008ae8:	58024400 	.word	0x58024400
 8008aec:	58000400 	.word	0x58000400
 8008af0:	58020000 	.word	0x58020000
 8008af4:	58020400 	.word	0x58020400
 8008af8:	58020800 	.word	0x58020800
 8008afc:	58020c00 	.word	0x58020c00
 8008b00:	58021000 	.word	0x58021000
 8008b04:	58021400 	.word	0x58021400
 8008b08:	58021800 	.word	0x58021800
 8008b0c:	58021c00 	.word	0x58021c00
 8008b10:	58022000 	.word	0x58022000
 8008b14:	58022400 	.word	0x58022400
 8008b18:	2300      	movs	r3, #0
 8008b1a:	69fa      	ldr	r2, [r7, #28]
 8008b1c:	f002 0203 	and.w	r2, r2, #3
 8008b20:	0092      	lsls	r2, r2, #2
 8008b22:	4093      	lsls	r3, r2
 8008b24:	69ba      	ldr	r2, [r7, #24]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008b2a:	4938      	ldr	r1, [pc, #224]	; (8008c0c <HAL_GPIO_Init+0x35c>)
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	089b      	lsrs	r3, r3, #2
 8008b30:	3302      	adds	r3, #2
 8008b32:	69ba      	ldr	r2, [r7, #24]
 8008b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	43db      	mvns	r3, r3
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	4013      	ands	r3, r2
 8008b48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008b5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	43db      	mvns	r3, r3
 8008b72:	69ba      	ldr	r2, [r7, #24]
 8008b74:	4013      	ands	r3, r2
 8008b76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d003      	beq.n	8008b8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	43db      	mvns	r3, r3
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d003      	beq.n	8008bb8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008bb0:	69ba      	ldr	r2, [r7, #24]
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	69ba      	ldr	r2, [r7, #24]
 8008bbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	43db      	mvns	r3, r3
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	4013      	ands	r3, r2
 8008bcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d003      	beq.n	8008be2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	69ba      	ldr	r2, [r7, #24]
 8008be6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	3301      	adds	r3, #1
 8008bec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f47f ae63 	bne.w	80088c4 <HAL_GPIO_Init+0x14>
  }
}
 8008bfe:	bf00      	nop
 8008c00:	bf00      	nop
 8008c02:	3724      	adds	r7, #36	; 0x24
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	58000400 	.word	0x58000400

08008c10 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b087      	sub	sp, #28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008c1e:	4b75      	ldr	r3, [pc, #468]	; (8008df4 <HAL_GPIO_DeInit+0x1e4>)
 8008c20:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008c22:	e0d9      	b.n	8008dd8 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008c24:	2201      	movs	r2, #1
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2c:	683a      	ldr	r2, [r7, #0]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 80cc 	beq.w	8008dd2 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008c3a:	4a6f      	ldr	r2, [pc, #444]	; (8008df8 <HAL_GPIO_DeInit+0x1e8>)
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	089b      	lsrs	r3, r3, #2
 8008c40:	3302      	adds	r3, #2
 8008c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c46:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	f003 0303 	and.w	r3, r3, #3
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	220f      	movs	r2, #15
 8008c52:	fa02 f303 	lsl.w	r3, r2, r3
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	4013      	ands	r3, r2
 8008c5a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a67      	ldr	r2, [pc, #412]	; (8008dfc <HAL_GPIO_DeInit+0x1ec>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d037      	beq.n	8008cd4 <HAL_GPIO_DeInit+0xc4>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a66      	ldr	r2, [pc, #408]	; (8008e00 <HAL_GPIO_DeInit+0x1f0>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d031      	beq.n	8008cd0 <HAL_GPIO_DeInit+0xc0>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a65      	ldr	r2, [pc, #404]	; (8008e04 <HAL_GPIO_DeInit+0x1f4>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d02b      	beq.n	8008ccc <HAL_GPIO_DeInit+0xbc>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a64      	ldr	r2, [pc, #400]	; (8008e08 <HAL_GPIO_DeInit+0x1f8>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d025      	beq.n	8008cc8 <HAL_GPIO_DeInit+0xb8>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a63      	ldr	r2, [pc, #396]	; (8008e0c <HAL_GPIO_DeInit+0x1fc>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d01f      	beq.n	8008cc4 <HAL_GPIO_DeInit+0xb4>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a62      	ldr	r2, [pc, #392]	; (8008e10 <HAL_GPIO_DeInit+0x200>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d019      	beq.n	8008cc0 <HAL_GPIO_DeInit+0xb0>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a61      	ldr	r2, [pc, #388]	; (8008e14 <HAL_GPIO_DeInit+0x204>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d013      	beq.n	8008cbc <HAL_GPIO_DeInit+0xac>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a60      	ldr	r2, [pc, #384]	; (8008e18 <HAL_GPIO_DeInit+0x208>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d00d      	beq.n	8008cb8 <HAL_GPIO_DeInit+0xa8>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a5f      	ldr	r2, [pc, #380]	; (8008e1c <HAL_GPIO_DeInit+0x20c>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d007      	beq.n	8008cb4 <HAL_GPIO_DeInit+0xa4>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a5e      	ldr	r2, [pc, #376]	; (8008e20 <HAL_GPIO_DeInit+0x210>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d101      	bne.n	8008cb0 <HAL_GPIO_DeInit+0xa0>
 8008cac:	2309      	movs	r3, #9
 8008cae:	e012      	b.n	8008cd6 <HAL_GPIO_DeInit+0xc6>
 8008cb0:	230a      	movs	r3, #10
 8008cb2:	e010      	b.n	8008cd6 <HAL_GPIO_DeInit+0xc6>
 8008cb4:	2308      	movs	r3, #8
 8008cb6:	e00e      	b.n	8008cd6 <HAL_GPIO_DeInit+0xc6>
 8008cb8:	2307      	movs	r3, #7
 8008cba:	e00c      	b.n	8008cd6 <HAL_GPIO_DeInit+0xc6>
 8008cbc:	2306      	movs	r3, #6
 8008cbe:	e00a      	b.n	8008cd6 <HAL_GPIO_DeInit+0xc6>
 8008cc0:	2305      	movs	r3, #5
 8008cc2:	e008      	b.n	8008cd6 <HAL_GPIO_DeInit+0xc6>
 8008cc4:	2304      	movs	r3, #4
 8008cc6:	e006      	b.n	8008cd6 <HAL_GPIO_DeInit+0xc6>
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e004      	b.n	8008cd6 <HAL_GPIO_DeInit+0xc6>
 8008ccc:	2302      	movs	r3, #2
 8008cce:	e002      	b.n	8008cd6 <HAL_GPIO_DeInit+0xc6>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e000      	b.n	8008cd6 <HAL_GPIO_DeInit+0xc6>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	f002 0203 	and.w	r2, r2, #3
 8008cdc:	0092      	lsls	r2, r2, #2
 8008cde:	4093      	lsls	r3, r2
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d136      	bne.n	8008d54 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	43db      	mvns	r3, r3
 8008cee:	401a      	ands	r2, r3
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	43db      	mvns	r3, r3
 8008cfc:	401a      	ands	r2, r3
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	43db      	mvns	r3, r3
 8008d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d10:	4013      	ands	r3, r2
 8008d12:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	43db      	mvns	r3, r3
 8008d1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d22:	4013      	ands	r3, r2
 8008d24:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	f003 0303 	and.w	r3, r3, #3
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	220f      	movs	r2, #15
 8008d30:	fa02 f303 	lsl.w	r3, r2, r3
 8008d34:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008d36:	4a30      	ldr	r2, [pc, #192]	; (8008df8 <HAL_GPIO_DeInit+0x1e8>)
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	089b      	lsrs	r3, r3, #2
 8008d3c:	3302      	adds	r3, #2
 8008d3e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	43da      	mvns	r2, r3
 8008d46:	482c      	ldr	r0, [pc, #176]	; (8008df8 <HAL_GPIO_DeInit+0x1e8>)
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	089b      	lsrs	r3, r3, #2
 8008d4c:	400a      	ands	r2, r1
 8008d4e:	3302      	adds	r3, #2
 8008d50:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	005b      	lsls	r3, r3, #1
 8008d5c:	2103      	movs	r1, #3
 8008d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d62:	431a      	orrs	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	08da      	lsrs	r2, r3, #3
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	3208      	adds	r2, #8
 8008d70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	f003 0307 	and.w	r3, r3, #7
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	220f      	movs	r2, #15
 8008d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d82:	43db      	mvns	r3, r3
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	08d2      	lsrs	r2, r2, #3
 8008d88:	4019      	ands	r1, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	3208      	adds	r2, #8
 8008d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68da      	ldr	r2, [r3, #12]
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	005b      	lsls	r3, r3, #1
 8008d9a:	2103      	movs	r1, #3
 8008d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008da0:	43db      	mvns	r3, r3
 8008da2:	401a      	ands	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	2101      	movs	r1, #1
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	fa01 f303 	lsl.w	r3, r1, r3
 8008db4:	43db      	mvns	r3, r3
 8008db6:	401a      	ands	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	689a      	ldr	r2, [r3, #8]
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	005b      	lsls	r3, r3, #1
 8008dc4:	2103      	movs	r1, #3
 8008dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8008dca:	43db      	mvns	r3, r3
 8008dcc:	401a      	ands	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008dd8:	683a      	ldr	r2, [r7, #0]
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f47f af1f 	bne.w	8008c24 <HAL_GPIO_DeInit+0x14>
  }
}
 8008de6:	bf00      	nop
 8008de8:	bf00      	nop
 8008dea:	371c      	adds	r7, #28
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	58000080 	.word	0x58000080
 8008df8:	58000400 	.word	0x58000400
 8008dfc:	58020000 	.word	0x58020000
 8008e00:	58020400 	.word	0x58020400
 8008e04:	58020800 	.word	0x58020800
 8008e08:	58020c00 	.word	0x58020c00
 8008e0c:	58021000 	.word	0x58021000
 8008e10:	58021400 	.word	0x58021400
 8008e14:	58021800 	.word	0x58021800
 8008e18:	58021c00 	.word	0x58021c00
 8008e1c:	58022000 	.word	0x58022000
 8008e20:	58022400 	.word	0x58022400

08008e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	807b      	strh	r3, [r7, #2]
 8008e30:	4613      	mov	r3, r2
 8008e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e34:	787b      	ldrb	r3, [r7, #1]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d003      	beq.n	8008e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e3a:	887a      	ldrh	r2, [r7, #2]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008e40:	e003      	b.n	8008e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008e42:	887b      	ldrh	r3, [r7, #2]
 8008e44:	041a      	lsls	r2, r3, #16
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	619a      	str	r2, [r3, #24]
}
 8008e4a:	bf00      	nop
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008e56:	b480      	push	{r7}
 8008e58:	b085      	sub	sp, #20
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	460b      	mov	r3, r1
 8008e60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	695b      	ldr	r3, [r3, #20]
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008e68:	887a      	ldrh	r2, [r7, #2]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	041a      	lsls	r2, r3, #16
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	43d9      	mvns	r1, r3
 8008e74:	887b      	ldrh	r3, [r7, #2]
 8008e76:	400b      	ands	r3, r1
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	619a      	str	r2, [r3, #24]
}
 8008e7e:	bf00      	nop
 8008e80:	3714      	adds	r7, #20
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
	...

08008e8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e07f      	b.n	8008f9e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d106      	bne.n	8008eb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f8a9 	bl	800900a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2224      	movs	r2, #36	; 0x24
 8008ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 0201 	bic.w	r2, r2, #1
 8008ece:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685a      	ldr	r2, [r3, #4]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008edc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	689a      	ldr	r2, [r3, #8]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008eec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d107      	bne.n	8008f06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	689a      	ldr	r2, [r3, #8]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f02:	609a      	str	r2, [r3, #8]
 8008f04:	e006      	b.n	8008f14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	689a      	ldr	r2, [r3, #8]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008f12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d104      	bne.n	8008f26 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	6859      	ldr	r1, [r3, #4]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	4b1d      	ldr	r3, [pc, #116]	; (8008fa8 <HAL_I2C_Init+0x11c>)
 8008f32:	430b      	orrs	r3, r1
 8008f34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68da      	ldr	r2, [r3, #12]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	691a      	ldr	r2, [r3, #16]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	430a      	orrs	r2, r1
 8008f5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	69d9      	ldr	r1, [r3, #28]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a1a      	ldr	r2, [r3, #32]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	430a      	orrs	r2, r1
 8008f6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f042 0201 	orr.w	r2, r2, #1
 8008f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2220      	movs	r2, #32
 8008f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	02008000 	.word	0x02008000

08008fac <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e021      	b.n	8009002 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2224      	movs	r2, #36	; 0x24
 8008fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f022 0201 	bic.w	r2, r2, #1
 8008fd4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f821 	bl	800901e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800900a:	b480      	push	{r7}
 800900c:	b083      	sub	sp, #12
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009012:	bf00      	nop
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009026:	bf00      	nop
 8009028:	370c      	adds	r7, #12
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
	...

08009034 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b088      	sub	sp, #32
 8009038:	af02      	add	r7, sp, #8
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	4608      	mov	r0, r1
 800903e:	4611      	mov	r1, r2
 8009040:	461a      	mov	r2, r3
 8009042:	4603      	mov	r3, r0
 8009044:	817b      	strh	r3, [r7, #10]
 8009046:	460b      	mov	r3, r1
 8009048:	813b      	strh	r3, [r7, #8]
 800904a:	4613      	mov	r3, r2
 800904c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b20      	cmp	r3, #32
 8009058:	f040 80f9 	bne.w	800924e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d002      	beq.n	8009068 <HAL_I2C_Mem_Write+0x34>
 8009062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009064:	2b00      	cmp	r3, #0
 8009066:	d105      	bne.n	8009074 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800906e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e0ed      	b.n	8009250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800907a:	2b01      	cmp	r3, #1
 800907c:	d101      	bne.n	8009082 <HAL_I2C_Mem_Write+0x4e>
 800907e:	2302      	movs	r3, #2
 8009080:	e0e6      	b.n	8009250 <HAL_I2C_Mem_Write+0x21c>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800908a:	f7fb f897 	bl	80041bc <HAL_GetTick>
 800908e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	2319      	movs	r3, #25
 8009096:	2201      	movs	r2, #1
 8009098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 fadd 	bl	800965c <I2C_WaitOnFlagUntilTimeout>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e0d1      	b.n	8009250 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2221      	movs	r2, #33	; 0x21
 80090b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2240      	movs	r2, #64	; 0x40
 80090b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2200      	movs	r2, #0
 80090c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6a3a      	ldr	r2, [r7, #32]
 80090c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80090cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2200      	movs	r2, #0
 80090d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80090d4:	88f8      	ldrh	r0, [r7, #6]
 80090d6:	893a      	ldrh	r2, [r7, #8]
 80090d8:	8979      	ldrh	r1, [r7, #10]
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	9301      	str	r3, [sp, #4]
 80090de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e0:	9300      	str	r3, [sp, #0]
 80090e2:	4603      	mov	r3, r0
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 f9ed 	bl	80094c4 <I2C_RequestMemoryWrite>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d005      	beq.n	80090fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e0a9      	b.n	8009250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009100:	b29b      	uxth	r3, r3
 8009102:	2bff      	cmp	r3, #255	; 0xff
 8009104:	d90e      	bls.n	8009124 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	22ff      	movs	r2, #255	; 0xff
 800910a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009110:	b2da      	uxtb	r2, r3
 8009112:	8979      	ldrh	r1, [r7, #10]
 8009114:	2300      	movs	r3, #0
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 fc57 	bl	80099d0 <I2C_TransferConfig>
 8009122:	e00f      	b.n	8009144 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009128:	b29a      	uxth	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009132:	b2da      	uxtb	r2, r3
 8009134:	8979      	ldrh	r1, [r7, #10]
 8009136:	2300      	movs	r3, #0
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f000 fc46 	bl	80099d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009144:	697a      	ldr	r2, [r7, #20]
 8009146:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f000 fad6 	bl	80096fa <I2C_WaitOnTXISFlagUntilTimeout>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e07b      	b.n	8009250 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915c:	781a      	ldrb	r2, [r3, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009172:	b29b      	uxth	r3, r3
 8009174:	3b01      	subs	r3, #1
 8009176:	b29a      	uxth	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009180:	3b01      	subs	r3, #1
 8009182:	b29a      	uxth	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800918c:	b29b      	uxth	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d034      	beq.n	80091fc <HAL_I2C_Mem_Write+0x1c8>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009196:	2b00      	cmp	r3, #0
 8009198:	d130      	bne.n	80091fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a0:	2200      	movs	r2, #0
 80091a2:	2180      	movs	r1, #128	; 0x80
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f000 fa59 	bl	800965c <I2C_WaitOnFlagUntilTimeout>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e04d      	b.n	8009250 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	2bff      	cmp	r3, #255	; 0xff
 80091bc:	d90e      	bls.n	80091dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	22ff      	movs	r2, #255	; 0xff
 80091c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	8979      	ldrh	r1, [r7, #10]
 80091cc:	2300      	movs	r3, #0
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f000 fbfb 	bl	80099d0 <I2C_TransferConfig>
 80091da:	e00f      	b.n	80091fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	8979      	ldrh	r1, [r7, #10]
 80091ee:	2300      	movs	r3, #0
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091f6:	68f8      	ldr	r0, [r7, #12]
 80091f8:	f000 fbea 	bl	80099d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009200:	b29b      	uxth	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	d19e      	bne.n	8009144 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f000 fabc 	bl	8009788 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e01a      	b.n	8009250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2220      	movs	r2, #32
 8009220:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6859      	ldr	r1, [r3, #4]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	4b0a      	ldr	r3, [pc, #40]	; (8009258 <HAL_I2C_Mem_Write+0x224>)
 800922e:	400b      	ands	r3, r1
 8009230:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2220      	movs	r2, #32
 8009236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	e000      	b.n	8009250 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800924e:	2302      	movs	r3, #2
  }
}
 8009250:	4618      	mov	r0, r3
 8009252:	3718      	adds	r7, #24
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	fe00e800 	.word	0xfe00e800

0800925c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b088      	sub	sp, #32
 8009260:	af02      	add	r7, sp, #8
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	4608      	mov	r0, r1
 8009266:	4611      	mov	r1, r2
 8009268:	461a      	mov	r2, r3
 800926a:	4603      	mov	r3, r0
 800926c:	817b      	strh	r3, [r7, #10]
 800926e:	460b      	mov	r3, r1
 8009270:	813b      	strh	r3, [r7, #8]
 8009272:	4613      	mov	r3, r2
 8009274:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b20      	cmp	r3, #32
 8009280:	f040 80fd 	bne.w	800947e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009284:	6a3b      	ldr	r3, [r7, #32]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d002      	beq.n	8009290 <HAL_I2C_Mem_Read+0x34>
 800928a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800928c:	2b00      	cmp	r3, #0
 800928e:	d105      	bne.n	800929c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009296:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	e0f1      	b.n	8009480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d101      	bne.n	80092aa <HAL_I2C_Mem_Read+0x4e>
 80092a6:	2302      	movs	r3, #2
 80092a8:	e0ea      	b.n	8009480 <HAL_I2C_Mem_Read+0x224>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80092b2:	f7fa ff83 	bl	80041bc <HAL_GetTick>
 80092b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	2319      	movs	r3, #25
 80092be:	2201      	movs	r2, #1
 80092c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 f9c9 	bl	800965c <I2C_WaitOnFlagUntilTimeout>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e0d5      	b.n	8009480 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2222      	movs	r2, #34	; 0x22
 80092d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2240      	movs	r2, #64	; 0x40
 80092e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2200      	movs	r2, #0
 80092e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6a3a      	ldr	r2, [r7, #32]
 80092ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80092f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80092fc:	88f8      	ldrh	r0, [r7, #6]
 80092fe:	893a      	ldrh	r2, [r7, #8]
 8009300:	8979      	ldrh	r1, [r7, #10]
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	9301      	str	r3, [sp, #4]
 8009306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	4603      	mov	r3, r0
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f000 f92d 	bl	800956c <I2C_RequestMemoryRead>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d005      	beq.n	8009324 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e0ad      	b.n	8009480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009328:	b29b      	uxth	r3, r3
 800932a:	2bff      	cmp	r3, #255	; 0xff
 800932c:	d90e      	bls.n	800934c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	22ff      	movs	r2, #255	; 0xff
 8009332:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009338:	b2da      	uxtb	r2, r3
 800933a:	8979      	ldrh	r1, [r7, #10]
 800933c:	4b52      	ldr	r3, [pc, #328]	; (8009488 <HAL_I2C_Mem_Read+0x22c>)
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 fb43 	bl	80099d0 <I2C_TransferConfig>
 800934a:	e00f      	b.n	800936c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009350:	b29a      	uxth	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800935a:	b2da      	uxtb	r2, r3
 800935c:	8979      	ldrh	r1, [r7, #10]
 800935e:	4b4a      	ldr	r3, [pc, #296]	; (8009488 <HAL_I2C_Mem_Read+0x22c>)
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f000 fb32 	bl	80099d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009372:	2200      	movs	r2, #0
 8009374:	2104      	movs	r1, #4
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f000 f970 	bl	800965c <I2C_WaitOnFlagUntilTimeout>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e07c      	b.n	8009480 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009390:	b2d2      	uxtb	r2, r2
 8009392:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009398:	1c5a      	adds	r2, r3, #1
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093a2:	3b01      	subs	r3, #1
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	3b01      	subs	r3, #1
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093bc:	b29b      	uxth	r3, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d034      	beq.n	800942c <HAL_I2C_Mem_Read+0x1d0>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d130      	bne.n	800942c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	2200      	movs	r2, #0
 80093d2:	2180      	movs	r1, #128	; 0x80
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f000 f941 	bl	800965c <I2C_WaitOnFlagUntilTimeout>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e04d      	b.n	8009480 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	2bff      	cmp	r3, #255	; 0xff
 80093ec:	d90e      	bls.n	800940c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	22ff      	movs	r2, #255	; 0xff
 80093f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	8979      	ldrh	r1, [r7, #10]
 80093fc:	2300      	movs	r3, #0
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 fae3 	bl	80099d0 <I2C_TransferConfig>
 800940a:	e00f      	b.n	800942c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009410:	b29a      	uxth	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800941a:	b2da      	uxtb	r2, r3
 800941c:	8979      	ldrh	r1, [r7, #10]
 800941e:	2300      	movs	r3, #0
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f000 fad2 	bl	80099d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009430:	b29b      	uxth	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d19a      	bne.n	800936c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 f9a4 	bl	8009788 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e01a      	b.n	8009480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2220      	movs	r2, #32
 8009450:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	6859      	ldr	r1, [r3, #4]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	4b0b      	ldr	r3, [pc, #44]	; (800948c <HAL_I2C_Mem_Read+0x230>)
 800945e:	400b      	ands	r3, r1
 8009460:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2220      	movs	r2, #32
 8009466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	e000      	b.n	8009480 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800947e:	2302      	movs	r3, #2
  }
}
 8009480:	4618      	mov	r0, r3
 8009482:	3718      	adds	r7, #24
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	80002400 	.word	0x80002400
 800948c:	fe00e800 	.word	0xfe00e800

08009490 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800949e:	b2db      	uxtb	r3, r3
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af02      	add	r7, sp, #8
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	4608      	mov	r0, r1
 80094ce:	4611      	mov	r1, r2
 80094d0:	461a      	mov	r2, r3
 80094d2:	4603      	mov	r3, r0
 80094d4:	817b      	strh	r3, [r7, #10]
 80094d6:	460b      	mov	r3, r1
 80094d8:	813b      	strh	r3, [r7, #8]
 80094da:	4613      	mov	r3, r2
 80094dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80094de:	88fb      	ldrh	r3, [r7, #6]
 80094e0:	b2da      	uxtb	r2, r3
 80094e2:	8979      	ldrh	r1, [r7, #10]
 80094e4:	4b20      	ldr	r3, [pc, #128]	; (8009568 <I2C_RequestMemoryWrite+0xa4>)
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 fa6f 	bl	80099d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094f2:	69fa      	ldr	r2, [r7, #28]
 80094f4:	69b9      	ldr	r1, [r7, #24]
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f000 f8ff 	bl	80096fa <I2C_WaitOnTXISFlagUntilTimeout>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e02c      	b.n	8009560 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009506:	88fb      	ldrh	r3, [r7, #6]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d105      	bne.n	8009518 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800950c:	893b      	ldrh	r3, [r7, #8]
 800950e:	b2da      	uxtb	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	629a      	str	r2, [r3, #40]	; 0x28
 8009516:	e015      	b.n	8009544 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009518:	893b      	ldrh	r3, [r7, #8]
 800951a:	0a1b      	lsrs	r3, r3, #8
 800951c:	b29b      	uxth	r3, r3
 800951e:	b2da      	uxtb	r2, r3
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009526:	69fa      	ldr	r2, [r7, #28]
 8009528:	69b9      	ldr	r1, [r7, #24]
 800952a:	68f8      	ldr	r0, [r7, #12]
 800952c:	f000 f8e5 	bl	80096fa <I2C_WaitOnTXISFlagUntilTimeout>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e012      	b.n	8009560 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800953a:	893b      	ldrh	r3, [r7, #8]
 800953c:	b2da      	uxtb	r2, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	2200      	movs	r2, #0
 800954c:	2180      	movs	r1, #128	; 0x80
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f000 f884 	bl	800965c <I2C_WaitOnFlagUntilTimeout>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e000      	b.n	8009560 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	80002000 	.word	0x80002000

0800956c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af02      	add	r7, sp, #8
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	4608      	mov	r0, r1
 8009576:	4611      	mov	r1, r2
 8009578:	461a      	mov	r2, r3
 800957a:	4603      	mov	r3, r0
 800957c:	817b      	strh	r3, [r7, #10]
 800957e:	460b      	mov	r3, r1
 8009580:	813b      	strh	r3, [r7, #8]
 8009582:	4613      	mov	r3, r2
 8009584:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009586:	88fb      	ldrh	r3, [r7, #6]
 8009588:	b2da      	uxtb	r2, r3
 800958a:	8979      	ldrh	r1, [r7, #10]
 800958c:	4b20      	ldr	r3, [pc, #128]	; (8009610 <I2C_RequestMemoryRead+0xa4>)
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	2300      	movs	r3, #0
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f000 fa1c 	bl	80099d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009598:	69fa      	ldr	r2, [r7, #28]
 800959a:	69b9      	ldr	r1, [r7, #24]
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 f8ac 	bl	80096fa <I2C_WaitOnTXISFlagUntilTimeout>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d001      	beq.n	80095ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e02c      	b.n	8009606 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80095ac:	88fb      	ldrh	r3, [r7, #6]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d105      	bne.n	80095be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095b2:	893b      	ldrh	r3, [r7, #8]
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	629a      	str	r2, [r3, #40]	; 0x28
 80095bc:	e015      	b.n	80095ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80095be:	893b      	ldrh	r3, [r7, #8]
 80095c0:	0a1b      	lsrs	r3, r3, #8
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095cc:	69fa      	ldr	r2, [r7, #28]
 80095ce:	69b9      	ldr	r1, [r7, #24]
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f000 f892 	bl	80096fa <I2C_WaitOnTXISFlagUntilTimeout>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	e012      	b.n	8009606 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095e0:	893b      	ldrh	r3, [r7, #8]
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	2200      	movs	r2, #0
 80095f2:	2140      	movs	r1, #64	; 0x40
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 f831 	bl	800965c <I2C_WaitOnFlagUntilTimeout>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e000      	b.n	8009606 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	80002000 	.word	0x80002000

08009614 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	f003 0302 	and.w	r3, r3, #2
 8009626:	2b02      	cmp	r3, #2
 8009628:	d103      	bne.n	8009632 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2200      	movs	r2, #0
 8009630:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	f003 0301 	and.w	r3, r3, #1
 800963c:	2b01      	cmp	r3, #1
 800963e:	d007      	beq.n	8009650 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	699a      	ldr	r2, [r3, #24]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f042 0201 	orr.w	r2, r2, #1
 800964e:	619a      	str	r2, [r3, #24]
  }
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	603b      	str	r3, [r7, #0]
 8009668:	4613      	mov	r3, r2
 800966a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800966c:	e031      	b.n	80096d2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009674:	d02d      	beq.n	80096d2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009676:	f7fa fda1 	bl	80041bc <HAL_GetTick>
 800967a:	4602      	mov	r2, r0
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	429a      	cmp	r2, r3
 8009684:	d302      	bcc.n	800968c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d122      	bne.n	80096d2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	699a      	ldr	r2, [r3, #24]
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	4013      	ands	r3, r2
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	429a      	cmp	r2, r3
 800969a:	bf0c      	ite	eq
 800969c:	2301      	moveq	r3, #1
 800969e:	2300      	movne	r3, #0
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	461a      	mov	r2, r3
 80096a4:	79fb      	ldrb	r3, [r7, #7]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d113      	bne.n	80096d2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ae:	f043 0220 	orr.w	r2, r3, #32
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2220      	movs	r2, #32
 80096ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e00f      	b.n	80096f2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	699a      	ldr	r2, [r3, #24]
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	4013      	ands	r3, r2
 80096dc:	68ba      	ldr	r2, [r7, #8]
 80096de:	429a      	cmp	r2, r3
 80096e0:	bf0c      	ite	eq
 80096e2:	2301      	moveq	r3, #1
 80096e4:	2300      	movne	r3, #0
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	461a      	mov	r2, r3
 80096ea:	79fb      	ldrb	r3, [r7, #7]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d0be      	beq.n	800966e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b084      	sub	sp, #16
 80096fe:	af00      	add	r7, sp, #0
 8009700:	60f8      	str	r0, [r7, #12]
 8009702:	60b9      	str	r1, [r7, #8]
 8009704:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009706:	e033      	b.n	8009770 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	68b9      	ldr	r1, [r7, #8]
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f000 f87f 	bl	8009810 <I2C_IsErrorOccurred>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d001      	beq.n	800971c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e031      	b.n	8009780 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009722:	d025      	beq.n	8009770 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009724:	f7fa fd4a 	bl	80041bc <HAL_GetTick>
 8009728:	4602      	mov	r2, r0
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	429a      	cmp	r2, r3
 8009732:	d302      	bcc.n	800973a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d11a      	bne.n	8009770 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	f003 0302 	and.w	r3, r3, #2
 8009744:	2b02      	cmp	r3, #2
 8009746:	d013      	beq.n	8009770 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800974c:	f043 0220 	orr.w	r2, r3, #32
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2220      	movs	r2, #32
 8009758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e007      	b.n	8009780 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	2b02      	cmp	r3, #2
 800977c:	d1c4      	bne.n	8009708 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3710      	adds	r7, #16
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009794:	e02f      	b.n	80097f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	68b9      	ldr	r1, [r7, #8]
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 f838 	bl	8009810 <I2C_IsErrorOccurred>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e02d      	b.n	8009806 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097aa:	f7fa fd07 	bl	80041bc <HAL_GetTick>
 80097ae:	4602      	mov	r2, r0
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	68ba      	ldr	r2, [r7, #8]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d302      	bcc.n	80097c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d11a      	bne.n	80097f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	f003 0320 	and.w	r3, r3, #32
 80097ca:	2b20      	cmp	r3, #32
 80097cc:	d013      	beq.n	80097f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097d2:	f043 0220 	orr.w	r2, r3, #32
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2220      	movs	r2, #32
 80097de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e007      	b.n	8009806 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	f003 0320 	and.w	r3, r3, #32
 8009800:	2b20      	cmp	r3, #32
 8009802:	d1c8      	bne.n	8009796 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
	...

08009810 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b08a      	sub	sp, #40	; 0x28
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800982a:	2300      	movs	r3, #0
 800982c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	f003 0310 	and.w	r3, r3, #16
 8009838:	2b00      	cmp	r3, #0
 800983a:	d068      	beq.n	800990e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2210      	movs	r2, #16
 8009842:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009844:	e049      	b.n	80098da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800984c:	d045      	beq.n	80098da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800984e:	f7fa fcb5 	bl	80041bc <HAL_GetTick>
 8009852:	4602      	mov	r2, r0
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	429a      	cmp	r2, r3
 800985c:	d302      	bcc.n	8009864 <I2C_IsErrorOccurred+0x54>
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d13a      	bne.n	80098da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800986e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009876:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009886:	d121      	bne.n	80098cc <I2C_IsErrorOccurred+0xbc>
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800988e:	d01d      	beq.n	80098cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009890:	7cfb      	ldrb	r3, [r7, #19]
 8009892:	2b20      	cmp	r3, #32
 8009894:	d01a      	beq.n	80098cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80098a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80098a6:	f7fa fc89 	bl	80041bc <HAL_GetTick>
 80098aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098ac:	e00e      	b.n	80098cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80098ae:	f7fa fc85 	bl	80041bc <HAL_GetTick>
 80098b2:	4602      	mov	r2, r0
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	2b19      	cmp	r3, #25
 80098ba:	d907      	bls.n	80098cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80098bc:	6a3b      	ldr	r3, [r7, #32]
 80098be:	f043 0320 	orr.w	r3, r3, #32
 80098c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80098ca:	e006      	b.n	80098da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	f003 0320 	and.w	r3, r3, #32
 80098d6:	2b20      	cmp	r3, #32
 80098d8:	d1e9      	bne.n	80098ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	699b      	ldr	r3, [r3, #24]
 80098e0:	f003 0320 	and.w	r3, r3, #32
 80098e4:	2b20      	cmp	r3, #32
 80098e6:	d003      	beq.n	80098f0 <I2C_IsErrorOccurred+0xe0>
 80098e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d0aa      	beq.n	8009846 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80098f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d103      	bne.n	8009900 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2220      	movs	r2, #32
 80098fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	f043 0304 	orr.w	r3, r3, #4
 8009906:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00b      	beq.n	8009938 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	f043 0301 	orr.w	r3, r3, #1
 8009926:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009930:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00b      	beq.n	800995a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	f043 0308 	orr.w	r3, r3, #8
 8009948:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009952:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00b      	beq.n	800997c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	f043 0302 	orr.w	r3, r3, #2
 800996a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009974:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800997c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009980:	2b00      	cmp	r3, #0
 8009982:	d01c      	beq.n	80099be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f7ff fe45 	bl	8009614 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	6859      	ldr	r1, [r3, #4]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	4b0d      	ldr	r3, [pc, #52]	; (80099cc <I2C_IsErrorOccurred+0x1bc>)
 8009996:	400b      	ands	r3, r1
 8009998:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800999e:	6a3b      	ldr	r3, [r7, #32]
 80099a0:	431a      	orrs	r2, r3
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2220      	movs	r2, #32
 80099aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80099be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3728      	adds	r7, #40	; 0x28
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	fe00e800 	.word	0xfe00e800

080099d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b087      	sub	sp, #28
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	607b      	str	r3, [r7, #4]
 80099da:	460b      	mov	r3, r1
 80099dc:	817b      	strh	r3, [r7, #10]
 80099de:	4613      	mov	r3, r2
 80099e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099e2:	897b      	ldrh	r3, [r7, #10]
 80099e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80099e8:	7a7b      	ldrb	r3, [r7, #9]
 80099ea:	041b      	lsls	r3, r3, #16
 80099ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099f6:	6a3b      	ldr	r3, [r7, #32]
 80099f8:	4313      	orrs	r3, r2
 80099fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	685a      	ldr	r2, [r3, #4]
 8009a06:	6a3b      	ldr	r3, [r7, #32]
 8009a08:	0d5b      	lsrs	r3, r3, #21
 8009a0a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009a0e:	4b08      	ldr	r3, [pc, #32]	; (8009a30 <I2C_TransferConfig+0x60>)
 8009a10:	430b      	orrs	r3, r1
 8009a12:	43db      	mvns	r3, r3
 8009a14:	ea02 0103 	and.w	r1, r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009a22:	bf00      	nop
 8009a24:	371c      	adds	r7, #28
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	03ff63ff 	.word	0x03ff63ff

08009a34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	2b20      	cmp	r3, #32
 8009a48:	d138      	bne.n	8009abc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d101      	bne.n	8009a58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009a54:	2302      	movs	r3, #2
 8009a56:	e032      	b.n	8009abe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2224      	movs	r2, #36	; 0x24
 8009a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f022 0201 	bic.w	r2, r2, #1
 8009a76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6819      	ldr	r1, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	430a      	orrs	r2, r1
 8009a96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f042 0201 	orr.w	r2, r2, #1
 8009aa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2220      	movs	r2, #32
 8009aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	e000      	b.n	8009abe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009abc:	2302      	movs	r3, #2
  }
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	370c      	adds	r7, #12
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b085      	sub	sp, #20
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b20      	cmp	r3, #32
 8009ade:	d139      	bne.n	8009b54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d101      	bne.n	8009aee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009aea:	2302      	movs	r3, #2
 8009aec:	e033      	b.n	8009b56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2224      	movs	r2, #36	; 0x24
 8009afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f022 0201 	bic.w	r2, r2, #1
 8009b0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009b1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	021b      	lsls	r3, r3, #8
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f042 0201 	orr.w	r2, r2, #1
 8009b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2220      	movs	r2, #32
 8009b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	e000      	b.n	8009b56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009b54:	2302      	movs	r3, #2
  }
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
	...

08009b64 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d101      	bne.n	8009b76 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e0bf      	b.n	8009cf6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d106      	bne.n	8009b90 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7f7 fa78 	bl	8001080 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2202      	movs	r2, #2
 8009b94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	699a      	ldr	r2, [r3, #24]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009ba6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6999      	ldr	r1, [r3, #24]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	685a      	ldr	r2, [r3, #4]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009bbc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	430a      	orrs	r2, r1
 8009bca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6899      	ldr	r1, [r3, #8]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	4b4a      	ldr	r3, [pc, #296]	; (8009d00 <HAL_LTDC_Init+0x19c>)
 8009bd8:	400b      	ands	r3, r1
 8009bda:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	041b      	lsls	r3, r3, #16
 8009be2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	6899      	ldr	r1, [r3, #8]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	699a      	ldr	r2, [r3, #24]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	431a      	orrs	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68d9      	ldr	r1, [r3, #12]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	4b3e      	ldr	r3, [pc, #248]	; (8009d00 <HAL_LTDC_Init+0x19c>)
 8009c06:	400b      	ands	r3, r1
 8009c08:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	041b      	lsls	r3, r3, #16
 8009c10:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68d9      	ldr	r1, [r3, #12]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a1a      	ldr	r2, [r3, #32]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	431a      	orrs	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6919      	ldr	r1, [r3, #16]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	4b33      	ldr	r3, [pc, #204]	; (8009d00 <HAL_LTDC_Init+0x19c>)
 8009c34:	400b      	ands	r3, r1
 8009c36:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3c:	041b      	lsls	r3, r3, #16
 8009c3e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6919      	ldr	r1, [r3, #16]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	431a      	orrs	r2, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	430a      	orrs	r2, r1
 8009c54:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	6959      	ldr	r1, [r3, #20]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	4b27      	ldr	r3, [pc, #156]	; (8009d00 <HAL_LTDC_Init+0x19c>)
 8009c62:	400b      	ands	r3, r1
 8009c64:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6a:	041b      	lsls	r3, r3, #16
 8009c6c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	6959      	ldr	r1, [r3, #20]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	431a      	orrs	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	430a      	orrs	r2, r1
 8009c82:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009c8a:	021b      	lsls	r3, r3, #8
 8009c8c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009c94:	041b      	lsls	r3, r3, #16
 8009c96:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f042 0206 	orr.w	r2, r2, #6
 8009cd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	699a      	ldr	r2, [r3, #24]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 0201 	orr.w	r2, r2, #1
 8009ce2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	f000f800 	.word	0xf000f800

08009d04 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d12:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d1a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f003 0304 	and.w	r3, r3, #4
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d023      	beq.n	8009d6e <HAL_LTDC_IRQHandler+0x6a>
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	f003 0304 	and.w	r3, r3, #4
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d01e      	beq.n	8009d6e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f022 0204 	bic.w	r2, r2, #4
 8009d3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2204      	movs	r2, #4
 8009d46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009d4e:	f043 0201 	orr.w	r2, r3, #1
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2204      	movs	r2, #4
 8009d5c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f86f 	bl	8009e4c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f003 0302 	and.w	r3, r3, #2
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d023      	beq.n	8009dc0 <HAL_LTDC_IRQHandler+0xbc>
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f003 0302 	and.w	r3, r3, #2
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d01e      	beq.n	8009dc0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f022 0202 	bic.w	r2, r2, #2
 8009d90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2202      	movs	r2, #2
 8009d98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009da0:	f043 0202 	orr.w	r2, r3, #2
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2204      	movs	r2, #4
 8009dae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f846 	bl	8009e4c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d01b      	beq.n	8009e02 <HAL_LTDC_IRQHandler+0xfe>
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	f003 0301 	and.w	r3, r3, #1
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d016      	beq.n	8009e02 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f022 0201 	bic.w	r2, r2, #1
 8009de2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2201      	movs	r2, #1
 8009dea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f82f 	bl	8009e60 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f003 0308 	and.w	r3, r3, #8
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d01b      	beq.n	8009e44 <HAL_LTDC_IRQHandler+0x140>
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	f003 0308 	and.w	r3, r3, #8
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d016      	beq.n	8009e44 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f022 0208 	bic.w	r2, r2, #8
 8009e24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	2208      	movs	r2, #8
 8009e2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2201      	movs	r2, #1
 8009e32:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f818 	bl	8009e74 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009e44:	bf00      	nop
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009e88:	b5b0      	push	{r4, r5, r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d101      	bne.n	8009ea2 <HAL_LTDC_ConfigLayer+0x1a>
 8009e9e:	2302      	movs	r3, #2
 8009ea0:	e02c      	b.n	8009efc <HAL_LTDC_ConfigLayer+0x74>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2202      	movs	r2, #2
 8009eae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009eb2:	68fa      	ldr	r2, [r7, #12]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2134      	movs	r1, #52	; 0x34
 8009eb8:	fb01 f303 	mul.w	r3, r1, r3
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	4614      	mov	r4, r2
 8009ec6:	461d      	mov	r5, r3
 8009ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ed4:	682b      	ldr	r3, [r5, #0]
 8009ed6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	68b9      	ldr	r1, [r7, #8]
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f000 f811 	bl	8009f04 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009efa:	2300      	movs	r3, #0
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3710      	adds	r7, #16
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bdb0      	pop	{r4, r5, r7, pc}

08009f04 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b089      	sub	sp, #36	; 0x24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	685a      	ldr	r2, [r3, #4]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	0c1b      	lsrs	r3, r3, #16
 8009f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f20:	4413      	add	r3, r2
 8009f22:	041b      	lsls	r3, r3, #16
 8009f24:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	01db      	lsls	r3, r3, #7
 8009f30:	4413      	add	r3, r2
 8009f32:	3384      	adds	r3, #132	; 0x84
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	6812      	ldr	r2, [r2, #0]
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	01d2      	lsls	r2, r2, #7
 8009f40:	440a      	add	r2, r1
 8009f42:	3284      	adds	r2, #132	; 0x84
 8009f44:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009f48:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	0c1b      	lsrs	r3, r3, #16
 8009f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009f5a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009f5c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4619      	mov	r1, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	01db      	lsls	r3, r3, #7
 8009f68:	440b      	add	r3, r1
 8009f6a:	3384      	adds	r3, #132	; 0x84
 8009f6c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009f72:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	68da      	ldr	r2, [r3, #12]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f82:	4413      	add	r3, r2
 8009f84:	041b      	lsls	r3, r3, #16
 8009f86:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	01db      	lsls	r3, r3, #7
 8009f92:	4413      	add	r3, r2
 8009f94:	3384      	adds	r3, #132	; 0x84
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	6812      	ldr	r2, [r2, #0]
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	01d2      	lsls	r2, r2, #7
 8009fa2:	440a      	add	r2, r1
 8009fa4:	3284      	adds	r2, #132	; 0x84
 8009fa6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009faa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	689a      	ldr	r2, [r3, #8]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009fba:	4413      	add	r3, r2
 8009fbc:	1c5a      	adds	r2, r3, #1
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	01db      	lsls	r3, r3, #7
 8009fc8:	440b      	add	r3, r1
 8009fca:	3384      	adds	r3, #132	; 0x84
 8009fcc:	4619      	mov	r1, r3
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	461a      	mov	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	01db      	lsls	r3, r3, #7
 8009fde:	4413      	add	r3, r2
 8009fe0:	3384      	adds	r3, #132	; 0x84
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	6812      	ldr	r2, [r2, #0]
 8009fe8:	4611      	mov	r1, r2
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	01d2      	lsls	r2, r2, #7
 8009fee:	440a      	add	r2, r1
 8009ff0:	3284      	adds	r2, #132	; 0x84
 8009ff2:	f023 0307 	bic.w	r3, r3, #7
 8009ff6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	01db      	lsls	r3, r3, #7
 800a002:	4413      	add	r3, r2
 800a004:	3384      	adds	r3, #132	; 0x84
 800a006:	461a      	mov	r2, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a014:	021b      	lsls	r3, r3, #8
 800a016:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a01e:	041b      	lsls	r3, r3, #16
 800a020:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	699b      	ldr	r3, [r3, #24]
 800a026:	061b      	lsls	r3, r3, #24
 800a028:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	461a      	mov	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	01db      	lsls	r3, r3, #7
 800a034:	4413      	add	r3, r2
 800a036:	3384      	adds	r3, #132	; 0x84
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	01db      	lsls	r3, r3, #7
 800a044:	4413      	add	r3, r2
 800a046:	3384      	adds	r3, #132	; 0x84
 800a048:	461a      	mov	r2, r3
 800a04a:	2300      	movs	r3, #0
 800a04c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a054:	461a      	mov	r2, r3
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	431a      	orrs	r2, r3
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	431a      	orrs	r2, r3
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4619      	mov	r1, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	01db      	lsls	r3, r3, #7
 800a068:	440b      	add	r3, r1
 800a06a:	3384      	adds	r3, #132	; 0x84
 800a06c:	4619      	mov	r1, r3
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	4313      	orrs	r3, r2
 800a072:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	461a      	mov	r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	01db      	lsls	r3, r3, #7
 800a07e:	4413      	add	r3, r2
 800a080:	3384      	adds	r3, #132	; 0x84
 800a082:	695b      	ldr	r3, [r3, #20]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	6812      	ldr	r2, [r2, #0]
 800a088:	4611      	mov	r1, r2
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	01d2      	lsls	r2, r2, #7
 800a08e:	440a      	add	r2, r1
 800a090:	3284      	adds	r2, #132	; 0x84
 800a092:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a096:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	461a      	mov	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	01db      	lsls	r3, r3, #7
 800a0a2:	4413      	add	r3, r2
 800a0a4:	3384      	adds	r3, #132	; 0x84
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	695b      	ldr	r3, [r3, #20]
 800a0ac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	01db      	lsls	r3, r3, #7
 800a0b8:	4413      	add	r3, r2
 800a0ba:	3384      	adds	r3, #132	; 0x84
 800a0bc:	69da      	ldr	r2, [r3, #28]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	01db      	lsls	r3, r3, #7
 800a0c8:	440b      	add	r3, r1
 800a0ca:	3384      	adds	r3, #132	; 0x84
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4b58      	ldr	r3, [pc, #352]	; (800a230 <LTDC_SetConfig+0x32c>)
 800a0d0:	4013      	ands	r3, r2
 800a0d2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	69da      	ldr	r2, [r3, #28]
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	6a1b      	ldr	r3, [r3, #32]
 800a0dc:	68f9      	ldr	r1, [r7, #12]
 800a0de:	6809      	ldr	r1, [r1, #0]
 800a0e0:	4608      	mov	r0, r1
 800a0e2:	6879      	ldr	r1, [r7, #4]
 800a0e4:	01c9      	lsls	r1, r1, #7
 800a0e6:	4401      	add	r1, r0
 800a0e8:	3184      	adds	r1, #132	; 0x84
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	01db      	lsls	r3, r3, #7
 800a0f8:	4413      	add	r3, r2
 800a0fa:	3384      	adds	r3, #132	; 0x84
 800a0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	01db      	lsls	r3, r3, #7
 800a108:	4413      	add	r3, r2
 800a10a:	3384      	adds	r3, #132	; 0x84
 800a10c:	461a      	mov	r2, r3
 800a10e:	2300      	movs	r3, #0
 800a110:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	461a      	mov	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	01db      	lsls	r3, r3, #7
 800a11c:	4413      	add	r3, r2
 800a11e:	3384      	adds	r3, #132	; 0x84
 800a120:	461a      	mov	r2, r3
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a126:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	691b      	ldr	r3, [r3, #16]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d102      	bne.n	800a136 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a130:	2304      	movs	r3, #4
 800a132:	61fb      	str	r3, [r7, #28]
 800a134:	e01b      	b.n	800a16e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d102      	bne.n	800a144 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a13e:	2303      	movs	r3, #3
 800a140:	61fb      	str	r3, [r7, #28]
 800a142:	e014      	b.n	800a16e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	2b04      	cmp	r3, #4
 800a14a:	d00b      	beq.n	800a164 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a150:	2b02      	cmp	r3, #2
 800a152:	d007      	beq.n	800a164 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a158:	2b03      	cmp	r3, #3
 800a15a:	d003      	beq.n	800a164 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a160:	2b07      	cmp	r3, #7
 800a162:	d102      	bne.n	800a16a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a164:	2302      	movs	r3, #2
 800a166:	61fb      	str	r3, [r7, #28]
 800a168:	e001      	b.n	800a16e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a16a:	2301      	movs	r3, #1
 800a16c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	461a      	mov	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	01db      	lsls	r3, r3, #7
 800a178:	4413      	add	r3, r2
 800a17a:	3384      	adds	r3, #132	; 0x84
 800a17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	6812      	ldr	r2, [r2, #0]
 800a182:	4611      	mov	r1, r2
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	01d2      	lsls	r2, r2, #7
 800a188:	440a      	add	r2, r1
 800a18a:	3284      	adds	r2, #132	; 0x84
 800a18c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a190:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a196:	69fa      	ldr	r2, [r7, #28]
 800a198:	fb02 f303 	mul.w	r3, r2, r3
 800a19c:	041a      	lsls	r2, r3, #16
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	6859      	ldr	r1, [r3, #4]
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	1acb      	subs	r3, r1, r3
 800a1a8:	69f9      	ldr	r1, [r7, #28]
 800a1aa:	fb01 f303 	mul.w	r3, r1, r3
 800a1ae:	3307      	adds	r3, #7
 800a1b0:	68f9      	ldr	r1, [r7, #12]
 800a1b2:	6809      	ldr	r1, [r1, #0]
 800a1b4:	4608      	mov	r0, r1
 800a1b6:	6879      	ldr	r1, [r7, #4]
 800a1b8:	01c9      	lsls	r1, r1, #7
 800a1ba:	4401      	add	r1, r0
 800a1bc:	3184      	adds	r1, #132	; 0x84
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	01db      	lsls	r3, r3, #7
 800a1cc:	4413      	add	r3, r2
 800a1ce:	3384      	adds	r3, #132	; 0x84
 800a1d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	01db      	lsls	r3, r3, #7
 800a1dc:	440b      	add	r3, r1
 800a1de:	3384      	adds	r3, #132	; 0x84
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	4b14      	ldr	r3, [pc, #80]	; (800a234 <LTDC_SetConfig+0x330>)
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	01db      	lsls	r3, r3, #7
 800a1f2:	4413      	add	r3, r2
 800a1f4:	3384      	adds	r3, #132	; 0x84
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1fc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	461a      	mov	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	01db      	lsls	r3, r3, #7
 800a208:	4413      	add	r3, r2
 800a20a:	3384      	adds	r3, #132	; 0x84
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	6812      	ldr	r2, [r2, #0]
 800a212:	4611      	mov	r1, r2
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	01d2      	lsls	r2, r2, #7
 800a218:	440a      	add	r2, r1
 800a21a:	3284      	adds	r2, #132	; 0x84
 800a21c:	f043 0301 	orr.w	r3, r3, #1
 800a220:	6013      	str	r3, [r2, #0]
}
 800a222:	bf00      	nop
 800a224:	3724      	adds	r7, #36	; 0x24
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	fffff8f8 	.word	0xfffff8f8
 800a234:	fffff800 	.word	0xfffff800

0800a238 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800a238:	b480      	push	{r7}
 800a23a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800a23c:	4b05      	ldr	r3, [pc, #20]	; (800a254 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a04      	ldr	r2, [pc, #16]	; (800a254 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a246:	6013      	str	r3, [r2, #0]
}
 800a248:	bf00      	nop
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	58024800 	.word	0x58024800

0800a258 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a260:	4b29      	ldr	r3, [pc, #164]	; (800a308 <HAL_PWREx_ConfigSupply+0xb0>)
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	f003 0307 	and.w	r3, r3, #7
 800a268:	2b06      	cmp	r3, #6
 800a26a:	d00a      	beq.n	800a282 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a26c:	4b26      	ldr	r3, [pc, #152]	; (800a308 <HAL_PWREx_ConfigSupply+0xb0>)
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	429a      	cmp	r2, r3
 800a278:	d001      	beq.n	800a27e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e040      	b.n	800a300 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	e03e      	b.n	800a300 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a282:	4b21      	ldr	r3, [pc, #132]	; (800a308 <HAL_PWREx_ConfigSupply+0xb0>)
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800a28a:	491f      	ldr	r1, [pc, #124]	; (800a308 <HAL_PWREx_ConfigSupply+0xb0>)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4313      	orrs	r3, r2
 800a290:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a292:	f7f9 ff93 	bl	80041bc <HAL_GetTick>
 800a296:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a298:	e009      	b.n	800a2ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a29a:	f7f9 ff8f 	bl	80041bc <HAL_GetTick>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2a8:	d901      	bls.n	800a2ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e028      	b.n	800a300 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a2ae:	4b16      	ldr	r3, [pc, #88]	; (800a308 <HAL_PWREx_ConfigSupply+0xb0>)
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2ba:	d1ee      	bne.n	800a29a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b1e      	cmp	r3, #30
 800a2c0:	d008      	beq.n	800a2d4 <HAL_PWREx_ConfigSupply+0x7c>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2b2e      	cmp	r3, #46	; 0x2e
 800a2c6:	d005      	beq.n	800a2d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b1d      	cmp	r3, #29
 800a2cc:	d002      	beq.n	800a2d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2b2d      	cmp	r3, #45	; 0x2d
 800a2d2:	d114      	bne.n	800a2fe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a2d4:	f7f9 ff72 	bl	80041bc <HAL_GetTick>
 800a2d8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a2da:	e009      	b.n	800a2f0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a2dc:	f7f9 ff6e 	bl	80041bc <HAL_GetTick>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2ea:	d901      	bls.n	800a2f0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e007      	b.n	800a300 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a2f0:	4b05      	ldr	r3, [pc, #20]	; (800a308 <HAL_PWREx_ConfigSupply+0xb0>)
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2fc:	d1ee      	bne.n	800a2dc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	58024800 	.word	0x58024800

0800a30c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b08c      	sub	sp, #48	; 0x30
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d102      	bne.n	800a320 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	f000 bc1f 	b.w	800ab5e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 0301 	and.w	r3, r3, #1
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f000 80b3 	beq.w	800a494 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a32e:	4b95      	ldr	r3, [pc, #596]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a330:	691b      	ldr	r3, [r3, #16]
 800a332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a336:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a338:	4b92      	ldr	r3, [pc, #584]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a33c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a340:	2b10      	cmp	r3, #16
 800a342:	d007      	beq.n	800a354 <HAL_RCC_OscConfig+0x48>
 800a344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a346:	2b18      	cmp	r3, #24
 800a348:	d112      	bne.n	800a370 <HAL_RCC_OscConfig+0x64>
 800a34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34c:	f003 0303 	and.w	r3, r3, #3
 800a350:	2b02      	cmp	r3, #2
 800a352:	d10d      	bne.n	800a370 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a354:	4b8b      	ldr	r3, [pc, #556]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f000 8098 	beq.w	800a492 <HAL_RCC_OscConfig+0x186>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	f040 8093 	bne.w	800a492 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e3f6      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a378:	d106      	bne.n	800a388 <HAL_RCC_OscConfig+0x7c>
 800a37a:	4b82      	ldr	r3, [pc, #520]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a81      	ldr	r2, [pc, #516]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a384:	6013      	str	r3, [r2, #0]
 800a386:	e058      	b.n	800a43a <HAL_RCC_OscConfig+0x12e>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d112      	bne.n	800a3b6 <HAL_RCC_OscConfig+0xaa>
 800a390:	4b7c      	ldr	r3, [pc, #496]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a7b      	ldr	r2, [pc, #492]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a39a:	6013      	str	r3, [r2, #0]
 800a39c:	4b79      	ldr	r3, [pc, #484]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a78      	ldr	r2, [pc, #480]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a3a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a3a6:	6013      	str	r3, [r2, #0]
 800a3a8:	4b76      	ldr	r3, [pc, #472]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a75      	ldr	r2, [pc, #468]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a3ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3b2:	6013      	str	r3, [r2, #0]
 800a3b4:	e041      	b.n	800a43a <HAL_RCC_OscConfig+0x12e>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a3be:	d112      	bne.n	800a3e6 <HAL_RCC_OscConfig+0xda>
 800a3c0:	4b70      	ldr	r3, [pc, #448]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a6f      	ldr	r2, [pc, #444]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a3c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a3ca:	6013      	str	r3, [r2, #0]
 800a3cc:	4b6d      	ldr	r3, [pc, #436]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a6c      	ldr	r2, [pc, #432]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a3d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a3d6:	6013      	str	r3, [r2, #0]
 800a3d8:	4b6a      	ldr	r3, [pc, #424]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a69      	ldr	r2, [pc, #420]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a3de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3e2:	6013      	str	r3, [r2, #0]
 800a3e4:	e029      	b.n	800a43a <HAL_RCC_OscConfig+0x12e>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a3ee:	d112      	bne.n	800a416 <HAL_RCC_OscConfig+0x10a>
 800a3f0:	4b64      	ldr	r3, [pc, #400]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a63      	ldr	r2, [pc, #396]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a3f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a3fa:	6013      	str	r3, [r2, #0]
 800a3fc:	4b61      	ldr	r3, [pc, #388]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a60      	ldr	r2, [pc, #384]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a406:	6013      	str	r3, [r2, #0]
 800a408:	4b5e      	ldr	r3, [pc, #376]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a5d      	ldr	r2, [pc, #372]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a40e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a412:	6013      	str	r3, [r2, #0]
 800a414:	e011      	b.n	800a43a <HAL_RCC_OscConfig+0x12e>
 800a416:	4b5b      	ldr	r3, [pc, #364]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a5a      	ldr	r2, [pc, #360]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a41c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a420:	6013      	str	r3, [r2, #0]
 800a422:	4b58      	ldr	r3, [pc, #352]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a57      	ldr	r2, [pc, #348]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a42c:	6013      	str	r3, [r2, #0]
 800a42e:	4b55      	ldr	r3, [pc, #340]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a54      	ldr	r2, [pc, #336]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a434:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a438:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d013      	beq.n	800a46a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a442:	f7f9 febb 	bl	80041bc <HAL_GetTick>
 800a446:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a448:	e008      	b.n	800a45c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a44a:	f7f9 feb7 	bl	80041bc <HAL_GetTick>
 800a44e:	4602      	mov	r2, r0
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	2b64      	cmp	r3, #100	; 0x64
 800a456:	d901      	bls.n	800a45c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a458:	2303      	movs	r3, #3
 800a45a:	e380      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a45c:	4b49      	ldr	r3, [pc, #292]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d0f0      	beq.n	800a44a <HAL_RCC_OscConfig+0x13e>
 800a468:	e014      	b.n	800a494 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a46a:	f7f9 fea7 	bl	80041bc <HAL_GetTick>
 800a46e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a470:	e008      	b.n	800a484 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a472:	f7f9 fea3 	bl	80041bc <HAL_GetTick>
 800a476:	4602      	mov	r2, r0
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	1ad3      	subs	r3, r2, r3
 800a47c:	2b64      	cmp	r3, #100	; 0x64
 800a47e:	d901      	bls.n	800a484 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a480:	2303      	movs	r3, #3
 800a482:	e36c      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a484:	4b3f      	ldr	r3, [pc, #252]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d1f0      	bne.n	800a472 <HAL_RCC_OscConfig+0x166>
 800a490:	e000      	b.n	800a494 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a492:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 0302 	and.w	r3, r3, #2
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f000 808c 	beq.w	800a5ba <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4a2:	4b38      	ldr	r3, [pc, #224]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4aa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a4ac:	4b35      	ldr	r3, [pc, #212]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a4b2:	6a3b      	ldr	r3, [r7, #32]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d007      	beq.n	800a4c8 <HAL_RCC_OscConfig+0x1bc>
 800a4b8:	6a3b      	ldr	r3, [r7, #32]
 800a4ba:	2b18      	cmp	r3, #24
 800a4bc:	d137      	bne.n	800a52e <HAL_RCC_OscConfig+0x222>
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	f003 0303 	and.w	r3, r3, #3
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d132      	bne.n	800a52e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a4c8:	4b2e      	ldr	r3, [pc, #184]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 0304 	and.w	r3, r3, #4
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d005      	beq.n	800a4e0 <HAL_RCC_OscConfig+0x1d4>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d101      	bne.n	800a4e0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e33e      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a4e0:	4b28      	ldr	r3, [pc, #160]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f023 0219 	bic.w	r2, r3, #25
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	4925      	ldr	r1, [pc, #148]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4f2:	f7f9 fe63 	bl	80041bc <HAL_GetTick>
 800a4f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4f8:	e008      	b.n	800a50c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4fa:	f7f9 fe5f 	bl	80041bc <HAL_GetTick>
 800a4fe:	4602      	mov	r2, r0
 800a500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	2b02      	cmp	r3, #2
 800a506:	d901      	bls.n	800a50c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a508:	2303      	movs	r3, #3
 800a50a:	e328      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a50c:	4b1d      	ldr	r3, [pc, #116]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f003 0304 	and.w	r3, r3, #4
 800a514:	2b00      	cmp	r3, #0
 800a516:	d0f0      	beq.n	800a4fa <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a518:	4b1a      	ldr	r3, [pc, #104]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	691b      	ldr	r3, [r3, #16]
 800a524:	061b      	lsls	r3, r3, #24
 800a526:	4917      	ldr	r1, [pc, #92]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a528:	4313      	orrs	r3, r2
 800a52a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a52c:	e045      	b.n	800a5ba <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d028      	beq.n	800a588 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a536:	4b13      	ldr	r3, [pc, #76]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f023 0219 	bic.w	r2, r3, #25
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	4910      	ldr	r1, [pc, #64]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a544:	4313      	orrs	r3, r2
 800a546:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a548:	f7f9 fe38 	bl	80041bc <HAL_GetTick>
 800a54c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a54e:	e008      	b.n	800a562 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a550:	f7f9 fe34 	bl	80041bc <HAL_GetTick>
 800a554:	4602      	mov	r2, r0
 800a556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d901      	bls.n	800a562 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a55e:	2303      	movs	r3, #3
 800a560:	e2fd      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a562:	4b08      	ldr	r3, [pc, #32]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 0304 	and.w	r3, r3, #4
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d0f0      	beq.n	800a550 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a56e:	4b05      	ldr	r3, [pc, #20]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	061b      	lsls	r3, r3, #24
 800a57c:	4901      	ldr	r1, [pc, #4]	; (800a584 <HAL_RCC_OscConfig+0x278>)
 800a57e:	4313      	orrs	r3, r2
 800a580:	604b      	str	r3, [r1, #4]
 800a582:	e01a      	b.n	800a5ba <HAL_RCC_OscConfig+0x2ae>
 800a584:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a588:	4b97      	ldr	r3, [pc, #604]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a96      	ldr	r2, [pc, #600]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a58e:	f023 0301 	bic.w	r3, r3, #1
 800a592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a594:	f7f9 fe12 	bl	80041bc <HAL_GetTick>
 800a598:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a59a:	e008      	b.n	800a5ae <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a59c:	f7f9 fe0e 	bl	80041bc <HAL_GetTick>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a4:	1ad3      	subs	r3, r2, r3
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d901      	bls.n	800a5ae <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	e2d7      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a5ae:	4b8e      	ldr	r3, [pc, #568]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 0304 	and.w	r3, r3, #4
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1f0      	bne.n	800a59c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 0310 	and.w	r3, r3, #16
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d06a      	beq.n	800a69c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a5c6:	4b88      	ldr	r3, [pc, #544]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a5d0:	4b85      	ldr	r3, [pc, #532]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	2b08      	cmp	r3, #8
 800a5da:	d007      	beq.n	800a5ec <HAL_RCC_OscConfig+0x2e0>
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	2b18      	cmp	r3, #24
 800a5e0:	d11b      	bne.n	800a61a <HAL_RCC_OscConfig+0x30e>
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	f003 0303 	and.w	r3, r3, #3
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d116      	bne.n	800a61a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5ec:	4b7e      	ldr	r3, [pc, #504]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d005      	beq.n	800a604 <HAL_RCC_OscConfig+0x2f8>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	69db      	ldr	r3, [r3, #28]
 800a5fc:	2b80      	cmp	r3, #128	; 0x80
 800a5fe:	d001      	beq.n	800a604 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	e2ac      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a604:	4b78      	ldr	r3, [pc, #480]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a1b      	ldr	r3, [r3, #32]
 800a610:	061b      	lsls	r3, r3, #24
 800a612:	4975      	ldr	r1, [pc, #468]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a614:	4313      	orrs	r3, r2
 800a616:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a618:	e040      	b.n	800a69c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	69db      	ldr	r3, [r3, #28]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d023      	beq.n	800a66a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a622:	4b71      	ldr	r3, [pc, #452]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a70      	ldr	r2, [pc, #448]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a62c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a62e:	f7f9 fdc5 	bl	80041bc <HAL_GetTick>
 800a632:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a634:	e008      	b.n	800a648 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a636:	f7f9 fdc1 	bl	80041bc <HAL_GetTick>
 800a63a:	4602      	mov	r2, r0
 800a63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63e:	1ad3      	subs	r3, r2, r3
 800a640:	2b02      	cmp	r3, #2
 800a642:	d901      	bls.n	800a648 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a644:	2303      	movs	r3, #3
 800a646:	e28a      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a648:	4b67      	ldr	r3, [pc, #412]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a650:	2b00      	cmp	r3, #0
 800a652:	d0f0      	beq.n	800a636 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a654:	4b64      	ldr	r3, [pc, #400]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a1b      	ldr	r3, [r3, #32]
 800a660:	061b      	lsls	r3, r3, #24
 800a662:	4961      	ldr	r1, [pc, #388]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a664:	4313      	orrs	r3, r2
 800a666:	60cb      	str	r3, [r1, #12]
 800a668:	e018      	b.n	800a69c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a66a:	4b5f      	ldr	r3, [pc, #380]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a5e      	ldr	r2, [pc, #376]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a676:	f7f9 fda1 	bl	80041bc <HAL_GetTick>
 800a67a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a67c:	e008      	b.n	800a690 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a67e:	f7f9 fd9d 	bl	80041bc <HAL_GetTick>
 800a682:	4602      	mov	r2, r0
 800a684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a686:	1ad3      	subs	r3, r2, r3
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d901      	bls.n	800a690 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e266      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a690:	4b55      	ldr	r3, [pc, #340]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1f0      	bne.n	800a67e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 0308 	and.w	r3, r3, #8
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d036      	beq.n	800a716 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	695b      	ldr	r3, [r3, #20]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d019      	beq.n	800a6e4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a6b0:	4b4d      	ldr	r3, [pc, #308]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a6b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6b4:	4a4c      	ldr	r2, [pc, #304]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a6b6:	f043 0301 	orr.w	r3, r3, #1
 800a6ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6bc:	f7f9 fd7e 	bl	80041bc <HAL_GetTick>
 800a6c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a6c2:	e008      	b.n	800a6d6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a6c4:	f7f9 fd7a 	bl	80041bc <HAL_GetTick>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d901      	bls.n	800a6d6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	e243      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a6d6:	4b44      	ldr	r3, [pc, #272]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a6d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6da:	f003 0302 	and.w	r3, r3, #2
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d0f0      	beq.n	800a6c4 <HAL_RCC_OscConfig+0x3b8>
 800a6e2:	e018      	b.n	800a716 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a6e4:	4b40      	ldr	r3, [pc, #256]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a6e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6e8:	4a3f      	ldr	r2, [pc, #252]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a6ea:	f023 0301 	bic.w	r3, r3, #1
 800a6ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6f0:	f7f9 fd64 	bl	80041bc <HAL_GetTick>
 800a6f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a6f6:	e008      	b.n	800a70a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a6f8:	f7f9 fd60 	bl	80041bc <HAL_GetTick>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	2b02      	cmp	r3, #2
 800a704:	d901      	bls.n	800a70a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a706:	2303      	movs	r3, #3
 800a708:	e229      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a70a:	4b37      	ldr	r3, [pc, #220]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a70c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a70e:	f003 0302 	and.w	r3, r3, #2
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1f0      	bne.n	800a6f8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f003 0320 	and.w	r3, r3, #32
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d036      	beq.n	800a790 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d019      	beq.n	800a75e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a72a:	4b2f      	ldr	r3, [pc, #188]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a2e      	ldr	r2, [pc, #184]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a730:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a734:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a736:	f7f9 fd41 	bl	80041bc <HAL_GetTick>
 800a73a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a73c:	e008      	b.n	800a750 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a73e:	f7f9 fd3d 	bl	80041bc <HAL_GetTick>
 800a742:	4602      	mov	r2, r0
 800a744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a746:	1ad3      	subs	r3, r2, r3
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d901      	bls.n	800a750 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800a74c:	2303      	movs	r3, #3
 800a74e:	e206      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a750:	4b25      	ldr	r3, [pc, #148]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d0f0      	beq.n	800a73e <HAL_RCC_OscConfig+0x432>
 800a75c:	e018      	b.n	800a790 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a75e:	4b22      	ldr	r3, [pc, #136]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a21      	ldr	r2, [pc, #132]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a764:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a768:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a76a:	f7f9 fd27 	bl	80041bc <HAL_GetTick>
 800a76e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a770:	e008      	b.n	800a784 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a772:	f7f9 fd23 	bl	80041bc <HAL_GetTick>
 800a776:	4602      	mov	r2, r0
 800a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d901      	bls.n	800a784 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800a780:	2303      	movs	r3, #3
 800a782:	e1ec      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a784:	4b18      	ldr	r3, [pc, #96]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1f0      	bne.n	800a772 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 0304 	and.w	r3, r3, #4
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 80af 	beq.w	800a8fc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a79e:	4b13      	ldr	r3, [pc, #76]	; (800a7ec <HAL_RCC_OscConfig+0x4e0>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a12      	ldr	r2, [pc, #72]	; (800a7ec <HAL_RCC_OscConfig+0x4e0>)
 800a7a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a7aa:	f7f9 fd07 	bl	80041bc <HAL_GetTick>
 800a7ae:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7b0:	e008      	b.n	800a7c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7b2:	f7f9 fd03 	bl	80041bc <HAL_GetTick>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ba:	1ad3      	subs	r3, r2, r3
 800a7bc:	2b64      	cmp	r3, #100	; 0x64
 800a7be:	d901      	bls.n	800a7c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800a7c0:	2303      	movs	r3, #3
 800a7c2:	e1cc      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7c4:	4b09      	ldr	r3, [pc, #36]	; (800a7ec <HAL_RCC_OscConfig+0x4e0>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d0f0      	beq.n	800a7b2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d10b      	bne.n	800a7f0 <HAL_RCC_OscConfig+0x4e4>
 800a7d8:	4b03      	ldr	r3, [pc, #12]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a7da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7dc:	4a02      	ldr	r2, [pc, #8]	; (800a7e8 <HAL_RCC_OscConfig+0x4dc>)
 800a7de:	f043 0301 	orr.w	r3, r3, #1
 800a7e2:	6713      	str	r3, [r2, #112]	; 0x70
 800a7e4:	e05b      	b.n	800a89e <HAL_RCC_OscConfig+0x592>
 800a7e6:	bf00      	nop
 800a7e8:	58024400 	.word	0x58024400
 800a7ec:	58024800 	.word	0x58024800
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d112      	bne.n	800a81e <HAL_RCC_OscConfig+0x512>
 800a7f8:	4b9d      	ldr	r3, [pc, #628]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a7fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7fc:	4a9c      	ldr	r2, [pc, #624]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a7fe:	f023 0301 	bic.w	r3, r3, #1
 800a802:	6713      	str	r3, [r2, #112]	; 0x70
 800a804:	4b9a      	ldr	r3, [pc, #616]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a808:	4a99      	ldr	r2, [pc, #612]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a80a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a80e:	6713      	str	r3, [r2, #112]	; 0x70
 800a810:	4b97      	ldr	r3, [pc, #604]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a814:	4a96      	ldr	r2, [pc, #600]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a816:	f023 0304 	bic.w	r3, r3, #4
 800a81a:	6713      	str	r3, [r2, #112]	; 0x70
 800a81c:	e03f      	b.n	800a89e <HAL_RCC_OscConfig+0x592>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	2b05      	cmp	r3, #5
 800a824:	d112      	bne.n	800a84c <HAL_RCC_OscConfig+0x540>
 800a826:	4b92      	ldr	r3, [pc, #584]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a82a:	4a91      	ldr	r2, [pc, #580]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a82c:	f043 0304 	orr.w	r3, r3, #4
 800a830:	6713      	str	r3, [r2, #112]	; 0x70
 800a832:	4b8f      	ldr	r3, [pc, #572]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a836:	4a8e      	ldr	r2, [pc, #568]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a83c:	6713      	str	r3, [r2, #112]	; 0x70
 800a83e:	4b8c      	ldr	r3, [pc, #560]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a842:	4a8b      	ldr	r2, [pc, #556]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a844:	f043 0301 	orr.w	r3, r3, #1
 800a848:	6713      	str	r3, [r2, #112]	; 0x70
 800a84a:	e028      	b.n	800a89e <HAL_RCC_OscConfig+0x592>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	2b85      	cmp	r3, #133	; 0x85
 800a852:	d112      	bne.n	800a87a <HAL_RCC_OscConfig+0x56e>
 800a854:	4b86      	ldr	r3, [pc, #536]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a858:	4a85      	ldr	r2, [pc, #532]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a85a:	f043 0304 	orr.w	r3, r3, #4
 800a85e:	6713      	str	r3, [r2, #112]	; 0x70
 800a860:	4b83      	ldr	r3, [pc, #524]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a864:	4a82      	ldr	r2, [pc, #520]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a86a:	6713      	str	r3, [r2, #112]	; 0x70
 800a86c:	4b80      	ldr	r3, [pc, #512]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a86e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a870:	4a7f      	ldr	r2, [pc, #508]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a872:	f043 0301 	orr.w	r3, r3, #1
 800a876:	6713      	str	r3, [r2, #112]	; 0x70
 800a878:	e011      	b.n	800a89e <HAL_RCC_OscConfig+0x592>
 800a87a:	4b7d      	ldr	r3, [pc, #500]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a87c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a87e:	4a7c      	ldr	r2, [pc, #496]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a880:	f023 0301 	bic.w	r3, r3, #1
 800a884:	6713      	str	r3, [r2, #112]	; 0x70
 800a886:	4b7a      	ldr	r3, [pc, #488]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a88a:	4a79      	ldr	r2, [pc, #484]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a88c:	f023 0304 	bic.w	r3, r3, #4
 800a890:	6713      	str	r3, [r2, #112]	; 0x70
 800a892:	4b77      	ldr	r3, [pc, #476]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a896:	4a76      	ldr	r2, [pc, #472]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a89c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d015      	beq.n	800a8d2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8a6:	f7f9 fc89 	bl	80041bc <HAL_GetTick>
 800a8aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a8ac:	e00a      	b.n	800a8c4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8ae:	f7f9 fc85 	bl	80041bc <HAL_GetTick>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d901      	bls.n	800a8c4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800a8c0:	2303      	movs	r3, #3
 800a8c2:	e14c      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a8c4:	4b6a      	ldr	r3, [pc, #424]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a8c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c8:	f003 0302 	and.w	r3, r3, #2
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d0ee      	beq.n	800a8ae <HAL_RCC_OscConfig+0x5a2>
 800a8d0:	e014      	b.n	800a8fc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8d2:	f7f9 fc73 	bl	80041bc <HAL_GetTick>
 800a8d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a8d8:	e00a      	b.n	800a8f0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8da:	f7f9 fc6f 	bl	80041bc <HAL_GetTick>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d901      	bls.n	800a8f0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	e136      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a8f0:	4b5f      	ldr	r3, [pc, #380]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a8f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8f4:	f003 0302 	and.w	r3, r3, #2
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d1ee      	bne.n	800a8da <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a900:	2b00      	cmp	r3, #0
 800a902:	f000 812b 	beq.w	800ab5c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a906:	4b5a      	ldr	r3, [pc, #360]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a90e:	2b18      	cmp	r3, #24
 800a910:	f000 80bb 	beq.w	800aa8a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a918:	2b02      	cmp	r3, #2
 800a91a:	f040 8095 	bne.w	800aa48 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a91e:	4b54      	ldr	r3, [pc, #336]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a53      	ldr	r2, [pc, #332]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a924:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a928:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a92a:	f7f9 fc47 	bl	80041bc <HAL_GetTick>
 800a92e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a930:	e008      	b.n	800a944 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a932:	f7f9 fc43 	bl	80041bc <HAL_GetTick>
 800a936:	4602      	mov	r2, r0
 800a938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	d901      	bls.n	800a944 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800a940:	2303      	movs	r3, #3
 800a942:	e10c      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a944:	4b4a      	ldr	r3, [pc, #296]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d1f0      	bne.n	800a932 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a950:	4b47      	ldr	r3, [pc, #284]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a954:	4b47      	ldr	r3, [pc, #284]	; (800aa74 <HAL_RCC_OscConfig+0x768>)
 800a956:	4013      	ands	r3, r2
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a960:	0112      	lsls	r2, r2, #4
 800a962:	430a      	orrs	r2, r1
 800a964:	4942      	ldr	r1, [pc, #264]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a966:	4313      	orrs	r3, r2
 800a968:	628b      	str	r3, [r1, #40]	; 0x28
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a96e:	3b01      	subs	r3, #1
 800a970:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a978:	3b01      	subs	r3, #1
 800a97a:	025b      	lsls	r3, r3, #9
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	431a      	orrs	r2, r3
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a984:	3b01      	subs	r3, #1
 800a986:	041b      	lsls	r3, r3, #16
 800a988:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a98c:	431a      	orrs	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a992:	3b01      	subs	r3, #1
 800a994:	061b      	lsls	r3, r3, #24
 800a996:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a99a:	4935      	ldr	r1, [pc, #212]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a99c:	4313      	orrs	r3, r2
 800a99e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a9a0:	4b33      	ldr	r3, [pc, #204]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a4:	4a32      	ldr	r2, [pc, #200]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a9a6:	f023 0301 	bic.w	r3, r3, #1
 800a9aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a9ac:	4b30      	ldr	r3, [pc, #192]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a9ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9b0:	4b31      	ldr	r3, [pc, #196]	; (800aa78 <HAL_RCC_OscConfig+0x76c>)
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a9b8:	00d2      	lsls	r2, r2, #3
 800a9ba:	492d      	ldr	r1, [pc, #180]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a9c0:	4b2b      	ldr	r3, [pc, #172]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c4:	f023 020c 	bic.w	r2, r3, #12
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9cc:	4928      	ldr	r1, [pc, #160]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a9d2:	4b27      	ldr	r3, [pc, #156]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d6:	f023 0202 	bic.w	r2, r3, #2
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9de:	4924      	ldr	r1, [pc, #144]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a9e4:	4b22      	ldr	r3, [pc, #136]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e8:	4a21      	ldr	r2, [pc, #132]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a9ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9f0:	4b1f      	ldr	r3, [pc, #124]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f4:	4a1e      	ldr	r2, [pc, #120]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a9f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a9fc:	4b1c      	ldr	r3, [pc, #112]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800a9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa00:	4a1b      	ldr	r2, [pc, #108]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800aa02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800aa08:	4b19      	ldr	r3, [pc, #100]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800aa0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0c:	4a18      	ldr	r2, [pc, #96]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800aa0e:	f043 0301 	orr.w	r3, r3, #1
 800aa12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa14:	4b16      	ldr	r3, [pc, #88]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a15      	ldr	r2, [pc, #84]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800aa1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa20:	f7f9 fbcc 	bl	80041bc <HAL_GetTick>
 800aa24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa26:	e008      	b.n	800aa3a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa28:	f7f9 fbc8 	bl	80041bc <HAL_GetTick>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa30:	1ad3      	subs	r3, r2, r3
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	d901      	bls.n	800aa3a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800aa36:	2303      	movs	r3, #3
 800aa38:	e091      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa3a:	4b0d      	ldr	r3, [pc, #52]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d0f0      	beq.n	800aa28 <HAL_RCC_OscConfig+0x71c>
 800aa46:	e089      	b.n	800ab5c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa48:	4b09      	ldr	r3, [pc, #36]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a08      	ldr	r2, [pc, #32]	; (800aa70 <HAL_RCC_OscConfig+0x764>)
 800aa4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa54:	f7f9 fbb2 	bl	80041bc <HAL_GetTick>
 800aa58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa5a:	e00f      	b.n	800aa7c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa5c:	f7f9 fbae 	bl	80041bc <HAL_GetTick>
 800aa60:	4602      	mov	r2, r0
 800aa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	d908      	bls.n	800aa7c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800aa6a:	2303      	movs	r3, #3
 800aa6c:	e077      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
 800aa6e:	bf00      	nop
 800aa70:	58024400 	.word	0x58024400
 800aa74:	fffffc0c 	.word	0xfffffc0c
 800aa78:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa7c:	4b3a      	ldr	r3, [pc, #232]	; (800ab68 <HAL_RCC_OscConfig+0x85c>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d1e9      	bne.n	800aa5c <HAL_RCC_OscConfig+0x750>
 800aa88:	e068      	b.n	800ab5c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800aa8a:	4b37      	ldr	r3, [pc, #220]	; (800ab68 <HAL_RCC_OscConfig+0x85c>)
 800aa8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa8e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aa90:	4b35      	ldr	r3, [pc, #212]	; (800ab68 <HAL_RCC_OscConfig+0x85c>)
 800aa92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa94:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d031      	beq.n	800ab02 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	f003 0203 	and.w	r2, r3, #3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d12a      	bne.n	800ab02 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	091b      	lsrs	r3, r3, #4
 800aab0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d122      	bne.n	800ab02 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d11a      	bne.n	800ab02 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	0a5b      	lsrs	r3, r3, #9
 800aad0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aad8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aada:	429a      	cmp	r2, r3
 800aadc:	d111      	bne.n	800ab02 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	0c1b      	lsrs	r3, r3, #16
 800aae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d108      	bne.n	800ab02 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	0e1b      	lsrs	r3, r3, #24
 800aaf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aafc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d001      	beq.n	800ab06 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	e02b      	b.n	800ab5e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ab06:	4b18      	ldr	r3, [pc, #96]	; (800ab68 <HAL_RCC_OscConfig+0x85c>)
 800ab08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab0a:	08db      	lsrs	r3, r3, #3
 800ab0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab10:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab16:	693a      	ldr	r2, [r7, #16]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d01f      	beq.n	800ab5c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ab1c:	4b12      	ldr	r3, [pc, #72]	; (800ab68 <HAL_RCC_OscConfig+0x85c>)
 800ab1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab20:	4a11      	ldr	r2, [pc, #68]	; (800ab68 <HAL_RCC_OscConfig+0x85c>)
 800ab22:	f023 0301 	bic.w	r3, r3, #1
 800ab26:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ab28:	f7f9 fb48 	bl	80041bc <HAL_GetTick>
 800ab2c:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ab2e:	bf00      	nop
 800ab30:	f7f9 fb44 	bl	80041bc <HAL_GetTick>
 800ab34:	4602      	mov	r2, r0
 800ab36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d0f9      	beq.n	800ab30 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ab3c:	4b0a      	ldr	r3, [pc, #40]	; (800ab68 <HAL_RCC_OscConfig+0x85c>)
 800ab3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab40:	4b0a      	ldr	r3, [pc, #40]	; (800ab6c <HAL_RCC_OscConfig+0x860>)
 800ab42:	4013      	ands	r3, r2
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ab48:	00d2      	lsls	r2, r2, #3
 800ab4a:	4907      	ldr	r1, [pc, #28]	; (800ab68 <HAL_RCC_OscConfig+0x85c>)
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ab50:	4b05      	ldr	r3, [pc, #20]	; (800ab68 <HAL_RCC_OscConfig+0x85c>)
 800ab52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab54:	4a04      	ldr	r2, [pc, #16]	; (800ab68 <HAL_RCC_OscConfig+0x85c>)
 800ab56:	f043 0301 	orr.w	r3, r3, #1
 800ab5a:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3730      	adds	r7, #48	; 0x30
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	58024400 	.word	0x58024400
 800ab6c:	ffff0007 	.word	0xffff0007

0800ab70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b086      	sub	sp, #24
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d101      	bne.n	800ab84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	e19c      	b.n	800aebe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ab84:	4b8a      	ldr	r3, [pc, #552]	; (800adb0 <HAL_RCC_ClockConfig+0x240>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 030f 	and.w	r3, r3, #15
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d910      	bls.n	800abb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab92:	4b87      	ldr	r3, [pc, #540]	; (800adb0 <HAL_RCC_ClockConfig+0x240>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f023 020f 	bic.w	r2, r3, #15
 800ab9a:	4985      	ldr	r1, [pc, #532]	; (800adb0 <HAL_RCC_ClockConfig+0x240>)
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aba2:	4b83      	ldr	r3, [pc, #524]	; (800adb0 <HAL_RCC_ClockConfig+0x240>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f003 030f 	and.w	r3, r3, #15
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	429a      	cmp	r2, r3
 800abae:	d001      	beq.n	800abb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800abb0:	2301      	movs	r3, #1
 800abb2:	e184      	b.n	800aebe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 0304 	and.w	r3, r3, #4
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d010      	beq.n	800abe2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	691a      	ldr	r2, [r3, #16]
 800abc4:	4b7b      	ldr	r3, [pc, #492]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abcc:	429a      	cmp	r2, r3
 800abce:	d908      	bls.n	800abe2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800abd0:	4b78      	ldr	r3, [pc, #480]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800abd2:	699b      	ldr	r3, [r3, #24]
 800abd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	4975      	ldr	r1, [pc, #468]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800abde:	4313      	orrs	r3, r2
 800abe0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f003 0308 	and.w	r3, r3, #8
 800abea:	2b00      	cmp	r3, #0
 800abec:	d010      	beq.n	800ac10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	695a      	ldr	r2, [r3, #20]
 800abf2:	4b70      	ldr	r3, [pc, #448]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800abf4:	69db      	ldr	r3, [r3, #28]
 800abf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d908      	bls.n	800ac10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800abfe:	4b6d      	ldr	r3, [pc, #436]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800ac00:	69db      	ldr	r3, [r3, #28]
 800ac02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	695b      	ldr	r3, [r3, #20]
 800ac0a:	496a      	ldr	r1, [pc, #424]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 0310 	and.w	r3, r3, #16
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d010      	beq.n	800ac3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	699a      	ldr	r2, [r3, #24]
 800ac20:	4b64      	ldr	r3, [pc, #400]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800ac22:	69db      	ldr	r3, [r3, #28]
 800ac24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d908      	bls.n	800ac3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ac2c:	4b61      	ldr	r3, [pc, #388]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800ac2e:	69db      	ldr	r3, [r3, #28]
 800ac30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	699b      	ldr	r3, [r3, #24]
 800ac38:	495e      	ldr	r1, [pc, #376]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f003 0320 	and.w	r3, r3, #32
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d010      	beq.n	800ac6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	69da      	ldr	r2, [r3, #28]
 800ac4e:	4b59      	ldr	r3, [pc, #356]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d908      	bls.n	800ac6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ac5a:	4b56      	ldr	r3, [pc, #344]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	69db      	ldr	r3, [r3, #28]
 800ac66:	4953      	ldr	r1, [pc, #332]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 0302 	and.w	r3, r3, #2
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d010      	beq.n	800ac9a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	68da      	ldr	r2, [r3, #12]
 800ac7c:	4b4d      	ldr	r3, [pc, #308]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800ac7e:	699b      	ldr	r3, [r3, #24]
 800ac80:	f003 030f 	and.w	r3, r3, #15
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d908      	bls.n	800ac9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac88:	4b4a      	ldr	r3, [pc, #296]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800ac8a:	699b      	ldr	r3, [r3, #24]
 800ac8c:	f023 020f 	bic.w	r2, r3, #15
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	4947      	ldr	r1, [pc, #284]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800ac96:	4313      	orrs	r3, r2
 800ac98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d055      	beq.n	800ad52 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800aca6:	4b43      	ldr	r3, [pc, #268]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800aca8:	699b      	ldr	r3, [r3, #24]
 800acaa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	4940      	ldr	r1, [pc, #256]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800acb4:	4313      	orrs	r3, r2
 800acb6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	2b02      	cmp	r3, #2
 800acbe:	d107      	bne.n	800acd0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800acc0:	4b3c      	ldr	r3, [pc, #240]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d121      	bne.n	800ad10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800accc:	2301      	movs	r3, #1
 800acce:	e0f6      	b.n	800aebe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	2b03      	cmp	r3, #3
 800acd6:	d107      	bne.n	800ace8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800acd8:	4b36      	ldr	r3, [pc, #216]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d115      	bne.n	800ad10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	e0ea      	b.n	800aebe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	2b01      	cmp	r3, #1
 800acee:	d107      	bne.n	800ad00 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800acf0:	4b30      	ldr	r3, [pc, #192]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d109      	bne.n	800ad10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	e0de      	b.n	800aebe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad00:	4b2c      	ldr	r3, [pc, #176]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 0304 	and.w	r3, r3, #4
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d101      	bne.n	800ad10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e0d6      	b.n	800aebe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ad10:	4b28      	ldr	r3, [pc, #160]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	f023 0207 	bic.w	r2, r3, #7
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	4925      	ldr	r1, [pc, #148]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad22:	f7f9 fa4b 	bl	80041bc <HAL_GetTick>
 800ad26:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad28:	e00a      	b.n	800ad40 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad2a:	f7f9 fa47 	bl	80041bc <HAL_GetTick>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d901      	bls.n	800ad40 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e0be      	b.n	800aebe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad40:	4b1c      	ldr	r3, [pc, #112]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800ad42:	691b      	ldr	r3, [r3, #16]
 800ad44:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	00db      	lsls	r3, r3, #3
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d1eb      	bne.n	800ad2a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f003 0302 	and.w	r3, r3, #2
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d010      	beq.n	800ad80 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	68da      	ldr	r2, [r3, #12]
 800ad62:	4b14      	ldr	r3, [pc, #80]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	f003 030f 	and.w	r3, r3, #15
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d208      	bcs.n	800ad80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad6e:	4b11      	ldr	r3, [pc, #68]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800ad70:	699b      	ldr	r3, [r3, #24]
 800ad72:	f023 020f 	bic.w	r2, r3, #15
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	490e      	ldr	r1, [pc, #56]	; (800adb4 <HAL_RCC_ClockConfig+0x244>)
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ad80:	4b0b      	ldr	r3, [pc, #44]	; (800adb0 <HAL_RCC_ClockConfig+0x240>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 030f 	and.w	r3, r3, #15
 800ad88:	683a      	ldr	r2, [r7, #0]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d214      	bcs.n	800adb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad8e:	4b08      	ldr	r3, [pc, #32]	; (800adb0 <HAL_RCC_ClockConfig+0x240>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f023 020f 	bic.w	r2, r3, #15
 800ad96:	4906      	ldr	r1, [pc, #24]	; (800adb0 <HAL_RCC_ClockConfig+0x240>)
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad9e:	4b04      	ldr	r3, [pc, #16]	; (800adb0 <HAL_RCC_ClockConfig+0x240>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 030f 	and.w	r3, r3, #15
 800ada6:	683a      	ldr	r2, [r7, #0]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d005      	beq.n	800adb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	e086      	b.n	800aebe <HAL_RCC_ClockConfig+0x34e>
 800adb0:	52002000 	.word	0x52002000
 800adb4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f003 0304 	and.w	r3, r3, #4
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d010      	beq.n	800ade6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	691a      	ldr	r2, [r3, #16]
 800adc8:	4b3f      	ldr	r3, [pc, #252]	; (800aec8 <HAL_RCC_ClockConfig+0x358>)
 800adca:	699b      	ldr	r3, [r3, #24]
 800adcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800add0:	429a      	cmp	r2, r3
 800add2:	d208      	bcs.n	800ade6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800add4:	4b3c      	ldr	r3, [pc, #240]	; (800aec8 <HAL_RCC_ClockConfig+0x358>)
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	691b      	ldr	r3, [r3, #16]
 800ade0:	4939      	ldr	r1, [pc, #228]	; (800aec8 <HAL_RCC_ClockConfig+0x358>)
 800ade2:	4313      	orrs	r3, r2
 800ade4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 0308 	and.w	r3, r3, #8
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d010      	beq.n	800ae14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	695a      	ldr	r2, [r3, #20]
 800adf6:	4b34      	ldr	r3, [pc, #208]	; (800aec8 <HAL_RCC_ClockConfig+0x358>)
 800adf8:	69db      	ldr	r3, [r3, #28]
 800adfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d208      	bcs.n	800ae14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ae02:	4b31      	ldr	r3, [pc, #196]	; (800aec8 <HAL_RCC_ClockConfig+0x358>)
 800ae04:	69db      	ldr	r3, [r3, #28]
 800ae06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	695b      	ldr	r3, [r3, #20]
 800ae0e:	492e      	ldr	r1, [pc, #184]	; (800aec8 <HAL_RCC_ClockConfig+0x358>)
 800ae10:	4313      	orrs	r3, r2
 800ae12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f003 0310 	and.w	r3, r3, #16
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d010      	beq.n	800ae42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	699a      	ldr	r2, [r3, #24]
 800ae24:	4b28      	ldr	r3, [pc, #160]	; (800aec8 <HAL_RCC_ClockConfig+0x358>)
 800ae26:	69db      	ldr	r3, [r3, #28]
 800ae28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d208      	bcs.n	800ae42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ae30:	4b25      	ldr	r3, [pc, #148]	; (800aec8 <HAL_RCC_ClockConfig+0x358>)
 800ae32:	69db      	ldr	r3, [r3, #28]
 800ae34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	699b      	ldr	r3, [r3, #24]
 800ae3c:	4922      	ldr	r1, [pc, #136]	; (800aec8 <HAL_RCC_ClockConfig+0x358>)
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f003 0320 	and.w	r3, r3, #32
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d010      	beq.n	800ae70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	69da      	ldr	r2, [r3, #28]
 800ae52:	4b1d      	ldr	r3, [pc, #116]	; (800aec8 <HAL_RCC_ClockConfig+0x358>)
 800ae54:	6a1b      	ldr	r3, [r3, #32]
 800ae56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d208      	bcs.n	800ae70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ae5e:	4b1a      	ldr	r3, [pc, #104]	; (800aec8 <HAL_RCC_ClockConfig+0x358>)
 800ae60:	6a1b      	ldr	r3, [r3, #32]
 800ae62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	69db      	ldr	r3, [r3, #28]
 800ae6a:	4917      	ldr	r1, [pc, #92]	; (800aec8 <HAL_RCC_ClockConfig+0x358>)
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800ae70:	f000 f89e 	bl	800afb0 <HAL_RCC_GetSysClockFreq>
 800ae74:	4602      	mov	r2, r0
 800ae76:	4b14      	ldr	r3, [pc, #80]	; (800aec8 <HAL_RCC_ClockConfig+0x358>)
 800ae78:	699b      	ldr	r3, [r3, #24]
 800ae7a:	0a1b      	lsrs	r3, r3, #8
 800ae7c:	f003 030f 	and.w	r3, r3, #15
 800ae80:	4912      	ldr	r1, [pc, #72]	; (800aecc <HAL_RCC_ClockConfig+0x35c>)
 800ae82:	5ccb      	ldrb	r3, [r1, r3]
 800ae84:	f003 031f 	and.w	r3, r3, #31
 800ae88:	fa22 f303 	lsr.w	r3, r2, r3
 800ae8c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800ae8e:	4b0e      	ldr	r3, [pc, #56]	; (800aec8 <HAL_RCC_ClockConfig+0x358>)
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	f003 030f 	and.w	r3, r3, #15
 800ae96:	4a0d      	ldr	r2, [pc, #52]	; (800aecc <HAL_RCC_ClockConfig+0x35c>)
 800ae98:	5cd3      	ldrb	r3, [r2, r3]
 800ae9a:	f003 031f 	and.w	r3, r3, #31
 800ae9e:	693a      	ldr	r2, [r7, #16]
 800aea0:	fa22 f303 	lsr.w	r3, r2, r3
 800aea4:	4a0a      	ldr	r2, [pc, #40]	; (800aed0 <HAL_RCC_ClockConfig+0x360>)
 800aea6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aea8:	4a0a      	ldr	r2, [pc, #40]	; (800aed4 <HAL_RCC_ClockConfig+0x364>)
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800aeae:	4b0a      	ldr	r3, [pc, #40]	; (800aed8 <HAL_RCC_ClockConfig+0x368>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7f9 f938 	bl	8004128 <HAL_InitTick>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800aebc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3718      	adds	r7, #24
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	58024400 	.word	0x58024400
 800aecc:	08010768 	.word	0x08010768
 800aed0:	24000048 	.word	0x24000048
 800aed4:	24000044 	.word	0x24000044
 800aed8:	2400004c 	.word	0x2400004c

0800aedc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b08c      	sub	sp, #48	; 0x30
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d12a      	bne.n	800af44 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800aeee:	4b2d      	ldr	r3, [pc, #180]	; (800afa4 <HAL_RCC_MCOConfig+0xc8>)
 800aef0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800aef4:	4a2b      	ldr	r2, [pc, #172]	; (800afa4 <HAL_RCC_MCOConfig+0xc8>)
 800aef6:	f043 0301 	orr.w	r3, r3, #1
 800aefa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800aefe:	4b29      	ldr	r3, [pc, #164]	; (800afa4 <HAL_RCC_MCOConfig+0xc8>)
 800af00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800af04:	f003 0301 	and.w	r3, r3, #1
 800af08:	61bb      	str	r3, [r7, #24]
 800af0a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800af0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af12:	2302      	movs	r3, #2
 800af14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af16:	2303      	movs	r3, #3
 800af18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af1a:	2300      	movs	r3, #0
 800af1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800af1e:	2300      	movs	r3, #0
 800af20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800af22:	f107 031c 	add.w	r3, r7, #28
 800af26:	4619      	mov	r1, r3
 800af28:	481f      	ldr	r0, [pc, #124]	; (800afa8 <HAL_RCC_MCOConfig+0xcc>)
 800af2a:	f7fd fcc1 	bl	80088b0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800af2e:	4b1d      	ldr	r3, [pc, #116]	; (800afa4 <HAL_RCC_MCOConfig+0xc8>)
 800af30:	691b      	ldr	r3, [r3, #16]
 800af32:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800af36:	68b9      	ldr	r1, [r7, #8]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	430b      	orrs	r3, r1
 800af3c:	4919      	ldr	r1, [pc, #100]	; (800afa4 <HAL_RCC_MCOConfig+0xc8>)
 800af3e:	4313      	orrs	r3, r2
 800af40:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800af42:	e02a      	b.n	800af9a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800af44:	4b17      	ldr	r3, [pc, #92]	; (800afa4 <HAL_RCC_MCOConfig+0xc8>)
 800af46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800af4a:	4a16      	ldr	r2, [pc, #88]	; (800afa4 <HAL_RCC_MCOConfig+0xc8>)
 800af4c:	f043 0304 	orr.w	r3, r3, #4
 800af50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800af54:	4b13      	ldr	r3, [pc, #76]	; (800afa4 <HAL_RCC_MCOConfig+0xc8>)
 800af56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800af5a:	f003 0304 	and.w	r3, r3, #4
 800af5e:	617b      	str	r3, [r7, #20]
 800af60:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800af62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af68:	2302      	movs	r3, #2
 800af6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af6c:	2303      	movs	r3, #3
 800af6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af70:	2300      	movs	r3, #0
 800af72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800af74:	2300      	movs	r3, #0
 800af76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800af78:	f107 031c 	add.w	r3, r7, #28
 800af7c:	4619      	mov	r1, r3
 800af7e:	480b      	ldr	r0, [pc, #44]	; (800afac <HAL_RCC_MCOConfig+0xd0>)
 800af80:	f7fd fc96 	bl	80088b0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800af84:	4b07      	ldr	r3, [pc, #28]	; (800afa4 <HAL_RCC_MCOConfig+0xc8>)
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	01d9      	lsls	r1, r3, #7
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	430b      	orrs	r3, r1
 800af94:	4903      	ldr	r1, [pc, #12]	; (800afa4 <HAL_RCC_MCOConfig+0xc8>)
 800af96:	4313      	orrs	r3, r2
 800af98:	610b      	str	r3, [r1, #16]
}
 800af9a:	bf00      	nop
 800af9c:	3730      	adds	r7, #48	; 0x30
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	58024400 	.word	0x58024400
 800afa8:	58020000 	.word	0x58020000
 800afac:	58020800 	.word	0x58020800

0800afb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b089      	sub	sp, #36	; 0x24
 800afb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800afb6:	4bb3      	ldr	r3, [pc, #716]	; (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800afbe:	2b18      	cmp	r3, #24
 800afc0:	f200 8155 	bhi.w	800b26e <HAL_RCC_GetSysClockFreq+0x2be>
 800afc4:	a201      	add	r2, pc, #4	; (adr r2, 800afcc <HAL_RCC_GetSysClockFreq+0x1c>)
 800afc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afca:	bf00      	nop
 800afcc:	0800b031 	.word	0x0800b031
 800afd0:	0800b26f 	.word	0x0800b26f
 800afd4:	0800b26f 	.word	0x0800b26f
 800afd8:	0800b26f 	.word	0x0800b26f
 800afdc:	0800b26f 	.word	0x0800b26f
 800afe0:	0800b26f 	.word	0x0800b26f
 800afe4:	0800b26f 	.word	0x0800b26f
 800afe8:	0800b26f 	.word	0x0800b26f
 800afec:	0800b057 	.word	0x0800b057
 800aff0:	0800b26f 	.word	0x0800b26f
 800aff4:	0800b26f 	.word	0x0800b26f
 800aff8:	0800b26f 	.word	0x0800b26f
 800affc:	0800b26f 	.word	0x0800b26f
 800b000:	0800b26f 	.word	0x0800b26f
 800b004:	0800b26f 	.word	0x0800b26f
 800b008:	0800b26f 	.word	0x0800b26f
 800b00c:	0800b05d 	.word	0x0800b05d
 800b010:	0800b26f 	.word	0x0800b26f
 800b014:	0800b26f 	.word	0x0800b26f
 800b018:	0800b26f 	.word	0x0800b26f
 800b01c:	0800b26f 	.word	0x0800b26f
 800b020:	0800b26f 	.word	0x0800b26f
 800b024:	0800b26f 	.word	0x0800b26f
 800b028:	0800b26f 	.word	0x0800b26f
 800b02c:	0800b063 	.word	0x0800b063
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b030:	4b94      	ldr	r3, [pc, #592]	; (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 0320 	and.w	r3, r3, #32
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d009      	beq.n	800b050 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b03c:	4b91      	ldr	r3, [pc, #580]	; (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	08db      	lsrs	r3, r3, #3
 800b042:	f003 0303 	and.w	r3, r3, #3
 800b046:	4a90      	ldr	r2, [pc, #576]	; (800b288 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b048:	fa22 f303 	lsr.w	r3, r2, r3
 800b04c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b04e:	e111      	b.n	800b274 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b050:	4b8d      	ldr	r3, [pc, #564]	; (800b288 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b052:	61bb      	str	r3, [r7, #24]
      break;
 800b054:	e10e      	b.n	800b274 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b056:	4b8d      	ldr	r3, [pc, #564]	; (800b28c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b058:	61bb      	str	r3, [r7, #24]
      break;
 800b05a:	e10b      	b.n	800b274 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b05c:	4b8c      	ldr	r3, [pc, #560]	; (800b290 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b05e:	61bb      	str	r3, [r7, #24]
      break;
 800b060:	e108      	b.n	800b274 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b062:	4b88      	ldr	r3, [pc, #544]	; (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b066:	f003 0303 	and.w	r3, r3, #3
 800b06a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b06c:	4b85      	ldr	r3, [pc, #532]	; (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b070:	091b      	lsrs	r3, r3, #4
 800b072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b076:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b078:	4b82      	ldr	r3, [pc, #520]	; (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07c:	f003 0301 	and.w	r3, r3, #1
 800b080:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b082:	4b80      	ldr	r3, [pc, #512]	; (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b086:	08db      	lsrs	r3, r3, #3
 800b088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	fb02 f303 	mul.w	r3, r2, r3
 800b092:	ee07 3a90 	vmov	s15, r3
 800b096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b09a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f000 80e1 	beq.w	800b268 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	f000 8083 	beq.w	800b1b4 <HAL_RCC_GetSysClockFreq+0x204>
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	f200 80a1 	bhi.w	800b1f8 <HAL_RCC_GetSysClockFreq+0x248>
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d003      	beq.n	800b0c4 <HAL_RCC_GetSysClockFreq+0x114>
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d056      	beq.n	800b170 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b0c2:	e099      	b.n	800b1f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0c4:	4b6f      	ldr	r3, [pc, #444]	; (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f003 0320 	and.w	r3, r3, #32
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d02d      	beq.n	800b12c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0d0:	4b6c      	ldr	r3, [pc, #432]	; (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	08db      	lsrs	r3, r3, #3
 800b0d6:	f003 0303 	and.w	r3, r3, #3
 800b0da:	4a6b      	ldr	r2, [pc, #428]	; (800b288 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b0dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b0e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	ee07 3a90 	vmov	s15, r3
 800b0e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	ee07 3a90 	vmov	s15, r3
 800b0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0fa:	4b62      	ldr	r3, [pc, #392]	; (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b102:	ee07 3a90 	vmov	s15, r3
 800b106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b10a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b10e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b294 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b11a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b126:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b12a:	e087      	b.n	800b23c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	ee07 3a90 	vmov	s15, r3
 800b132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b136:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b298 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b13e:	4b51      	ldr	r3, [pc, #324]	; (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b146:	ee07 3a90 	vmov	s15, r3
 800b14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b14e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b152:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b294 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b15e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b16a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b16e:	e065      	b.n	800b23c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	ee07 3a90 	vmov	s15, r3
 800b176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b17a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b29c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b182:	4b40      	ldr	r3, [pc, #256]	; (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b18a:	ee07 3a90 	vmov	s15, r3
 800b18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b192:	ed97 6a02 	vldr	s12, [r7, #8]
 800b196:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b294 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b1b2:	e043      	b.n	800b23c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	ee07 3a90 	vmov	s15, r3
 800b1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1be:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b2a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b1c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1c6:	4b2f      	ldr	r3, [pc, #188]	; (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ce:	ee07 3a90 	vmov	s15, r3
 800b1d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1da:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b294 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b1de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b1f6:	e021      	b.n	800b23c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	ee07 3a90 	vmov	s15, r3
 800b1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b202:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b29c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b20a:	4b1e      	ldr	r3, [pc, #120]	; (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b20e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b212:	ee07 3a90 	vmov	s15, r3
 800b216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b21a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b21e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b294 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b22a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b22e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b232:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b236:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b23a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b23c:	4b11      	ldr	r3, [pc, #68]	; (800b284 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b240:	0a5b      	lsrs	r3, r3, #9
 800b242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b246:	3301      	adds	r3, #1
 800b248:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	ee07 3a90 	vmov	s15, r3
 800b250:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b254:	edd7 6a07 	vldr	s13, [r7, #28]
 800b258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b25c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b260:	ee17 3a90 	vmov	r3, s15
 800b264:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b266:	e005      	b.n	800b274 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b268:	2300      	movs	r3, #0
 800b26a:	61bb      	str	r3, [r7, #24]
      break;
 800b26c:	e002      	b.n	800b274 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b26e:	4b07      	ldr	r3, [pc, #28]	; (800b28c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b270:	61bb      	str	r3, [r7, #24]
      break;
 800b272:	bf00      	nop
  }

  return sysclockfreq;
 800b274:	69bb      	ldr	r3, [r7, #24]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3724      	adds	r7, #36	; 0x24
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	58024400 	.word	0x58024400
 800b288:	03d09000 	.word	0x03d09000
 800b28c:	003d0900 	.word	0x003d0900
 800b290:	016e3600 	.word	0x016e3600
 800b294:	46000000 	.word	0x46000000
 800b298:	4c742400 	.word	0x4c742400
 800b29c:	4a742400 	.word	0x4a742400
 800b2a0:	4bb71b00 	.word	0x4bb71b00

0800b2a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b2aa:	f7ff fe81 	bl	800afb0 <HAL_RCC_GetSysClockFreq>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	4b10      	ldr	r3, [pc, #64]	; (800b2f4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b2b2:	699b      	ldr	r3, [r3, #24]
 800b2b4:	0a1b      	lsrs	r3, r3, #8
 800b2b6:	f003 030f 	and.w	r3, r3, #15
 800b2ba:	490f      	ldr	r1, [pc, #60]	; (800b2f8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b2bc:	5ccb      	ldrb	r3, [r1, r3]
 800b2be:	f003 031f 	and.w	r3, r3, #31
 800b2c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b2c6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b2c8:	4b0a      	ldr	r3, [pc, #40]	; (800b2f4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b2ca:	699b      	ldr	r3, [r3, #24]
 800b2cc:	f003 030f 	and.w	r3, r3, #15
 800b2d0:	4a09      	ldr	r2, [pc, #36]	; (800b2f8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b2d2:	5cd3      	ldrb	r3, [r2, r3]
 800b2d4:	f003 031f 	and.w	r3, r3, #31
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	fa22 f303 	lsr.w	r3, r2, r3
 800b2de:	4a07      	ldr	r2, [pc, #28]	; (800b2fc <HAL_RCC_GetHCLKFreq+0x58>)
 800b2e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b2e2:	4a07      	ldr	r2, [pc, #28]	; (800b300 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b2e8:	4b04      	ldr	r3, [pc, #16]	; (800b2fc <HAL_RCC_GetHCLKFreq+0x58>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3708      	adds	r7, #8
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	58024400 	.word	0x58024400
 800b2f8:	08010768 	.word	0x08010768
 800b2fc:	24000048 	.word	0x24000048
 800b300:	24000044 	.word	0x24000044

0800b304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b308:	f7ff ffcc 	bl	800b2a4 <HAL_RCC_GetHCLKFreq>
 800b30c:	4602      	mov	r2, r0
 800b30e:	4b06      	ldr	r3, [pc, #24]	; (800b328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b310:	69db      	ldr	r3, [r3, #28]
 800b312:	091b      	lsrs	r3, r3, #4
 800b314:	f003 0307 	and.w	r3, r3, #7
 800b318:	4904      	ldr	r1, [pc, #16]	; (800b32c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b31a:	5ccb      	ldrb	r3, [r1, r3]
 800b31c:	f003 031f 	and.w	r3, r3, #31
 800b320:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b324:	4618      	mov	r0, r3
 800b326:	bd80      	pop	{r7, pc}
 800b328:	58024400 	.word	0x58024400
 800b32c:	08010768 	.word	0x08010768

0800b330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b334:	f7ff ffb6 	bl	800b2a4 <HAL_RCC_GetHCLKFreq>
 800b338:	4602      	mov	r2, r0
 800b33a:	4b06      	ldr	r3, [pc, #24]	; (800b354 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b33c:	69db      	ldr	r3, [r3, #28]
 800b33e:	0a1b      	lsrs	r3, r3, #8
 800b340:	f003 0307 	and.w	r3, r3, #7
 800b344:	4904      	ldr	r1, [pc, #16]	; (800b358 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b346:	5ccb      	ldrb	r3, [r1, r3]
 800b348:	f003 031f 	and.w	r3, r3, #31
 800b34c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b350:	4618      	mov	r0, r3
 800b352:	bd80      	pop	{r7, pc}
 800b354:	58024400 	.word	0x58024400
 800b358:	08010768 	.word	0x08010768

0800b35c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b35c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b360:	b0c8      	sub	sp, #288	; 0x120
 800b362:	af00      	add	r7, sp, #0
 800b364:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b368:	2300      	movs	r3, #0
 800b36a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b36e:	2300      	movs	r3, #0
 800b370:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b380:	2500      	movs	r5, #0
 800b382:	ea54 0305 	orrs.w	r3, r4, r5
 800b386:	d049      	beq.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b38c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b38e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b392:	d02f      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b394:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b398:	d828      	bhi.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b39a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b39e:	d01a      	beq.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b3a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3a4:	d822      	bhi.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d003      	beq.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b3aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3ae:	d007      	beq.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b3b0:	e01c      	b.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3b2:	4ba7      	ldr	r3, [pc, #668]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b6:	4aa6      	ldr	r2, [pc, #664]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b3be:	e01a      	b.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b3c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b3c4:	3308      	adds	r3, #8
 800b3c6:	2102      	movs	r1, #2
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f001 fc43 	bl	800cc54 <RCCEx_PLL2_Config>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b3d4:	e00f      	b.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b3da:	3328      	adds	r3, #40	; 0x28
 800b3dc:	2102      	movs	r1, #2
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f001 fcea 	bl	800cdb8 <RCCEx_PLL3_Config>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b3ea:	e004      	b.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b3f2:	e000      	b.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b3f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10a      	bne.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b3fe:	4b94      	ldr	r3, [pc, #592]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b402:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b406:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b40a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b40c:	4a90      	ldr	r2, [pc, #576]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b40e:	430b      	orrs	r3, r1
 800b410:	6513      	str	r3, [r2, #80]	; 0x50
 800b412:	e003      	b.n	800b41c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b414:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b418:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b41c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b428:	f04f 0900 	mov.w	r9, #0
 800b42c:	ea58 0309 	orrs.w	r3, r8, r9
 800b430:	d047      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b438:	2b04      	cmp	r3, #4
 800b43a:	d82a      	bhi.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b43c:	a201      	add	r2, pc, #4	; (adr r2, 800b444 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b442:	bf00      	nop
 800b444:	0800b459 	.word	0x0800b459
 800b448:	0800b467 	.word	0x0800b467
 800b44c:	0800b47d 	.word	0x0800b47d
 800b450:	0800b49b 	.word	0x0800b49b
 800b454:	0800b49b 	.word	0x0800b49b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b458:	4b7d      	ldr	r3, [pc, #500]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b45c:	4a7c      	ldr	r2, [pc, #496]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b45e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b462:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b464:	e01a      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b466:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b46a:	3308      	adds	r3, #8
 800b46c:	2100      	movs	r1, #0
 800b46e:	4618      	mov	r0, r3
 800b470:	f001 fbf0 	bl	800cc54 <RCCEx_PLL2_Config>
 800b474:	4603      	mov	r3, r0
 800b476:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b47a:	e00f      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b47c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b480:	3328      	adds	r3, #40	; 0x28
 800b482:	2100      	movs	r1, #0
 800b484:	4618      	mov	r0, r3
 800b486:	f001 fc97 	bl	800cdb8 <RCCEx_PLL3_Config>
 800b48a:	4603      	mov	r3, r0
 800b48c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b490:	e004      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b492:	2301      	movs	r3, #1
 800b494:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b498:	e000      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b49a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b49c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10a      	bne.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b4a4:	4b6a      	ldr	r3, [pc, #424]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4a8:	f023 0107 	bic.w	r1, r3, #7
 800b4ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4b2:	4a67      	ldr	r2, [pc, #412]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4b4:	430b      	orrs	r3, r1
 800b4b6:	6513      	str	r3, [r2, #80]	; 0x50
 800b4b8:	e003      	b.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b4be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b4c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ca:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b4ce:	f04f 0b00 	mov.w	fp, #0
 800b4d2:	ea5a 030b 	orrs.w	r3, sl, fp
 800b4d6:	d054      	beq.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b4d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b4dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4de:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b4e2:	d036      	beq.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b4e4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b4e8:	d82f      	bhi.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b4ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4ee:	d032      	beq.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b4f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4f4:	d829      	bhi.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b4f6:	2bc0      	cmp	r3, #192	; 0xc0
 800b4f8:	d02f      	beq.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b4fa:	2bc0      	cmp	r3, #192	; 0xc0
 800b4fc:	d825      	bhi.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b4fe:	2b80      	cmp	r3, #128	; 0x80
 800b500:	d018      	beq.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b502:	2b80      	cmp	r3, #128	; 0x80
 800b504:	d821      	bhi.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b506:	2b00      	cmp	r3, #0
 800b508:	d002      	beq.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b50a:	2b40      	cmp	r3, #64	; 0x40
 800b50c:	d007      	beq.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b50e:	e01c      	b.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b510:	4b4f      	ldr	r3, [pc, #316]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b514:	4a4e      	ldr	r2, [pc, #312]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b51a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b51c:	e01e      	b.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b51e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b522:	3308      	adds	r3, #8
 800b524:	2100      	movs	r1, #0
 800b526:	4618      	mov	r0, r3
 800b528:	f001 fb94 	bl	800cc54 <RCCEx_PLL2_Config>
 800b52c:	4603      	mov	r3, r0
 800b52e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b532:	e013      	b.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b534:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b538:	3328      	adds	r3, #40	; 0x28
 800b53a:	2100      	movs	r1, #0
 800b53c:	4618      	mov	r0, r3
 800b53e:	f001 fc3b 	bl	800cdb8 <RCCEx_PLL3_Config>
 800b542:	4603      	mov	r3, r0
 800b544:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b548:	e008      	b.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b54a:	2301      	movs	r3, #1
 800b54c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b550:	e004      	b.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b552:	bf00      	nop
 800b554:	e002      	b.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b556:	bf00      	nop
 800b558:	e000      	b.n	800b55c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b55a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b55c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10a      	bne.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b564:	4b3a      	ldr	r3, [pc, #232]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b568:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b56c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b572:	4a37      	ldr	r2, [pc, #220]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b574:	430b      	orrs	r3, r1
 800b576:	6513      	str	r3, [r2, #80]	; 0x50
 800b578:	e003      	b.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b57a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b57e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b58e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b592:	2300      	movs	r3, #0
 800b594:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b598:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b59c:	460b      	mov	r3, r1
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	d05c      	beq.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b5a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5a8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b5ac:	d03b      	beq.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b5ae:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b5b2:	d834      	bhi.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b5b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5b8:	d037      	beq.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b5ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5be:	d82e      	bhi.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b5c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b5c4:	d033      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b5c6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b5ca:	d828      	bhi.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b5cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5d0:	d01a      	beq.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b5d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5d6:	d822      	bhi.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d003      	beq.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b5dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5e0:	d007      	beq.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b5e2:	e01c      	b.n	800b61e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5e4:	4b1a      	ldr	r3, [pc, #104]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e8:	4a19      	ldr	r2, [pc, #100]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b5f0:	e01e      	b.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5f6:	3308      	adds	r3, #8
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f001 fb2a 	bl	800cc54 <RCCEx_PLL2_Config>
 800b600:	4603      	mov	r3, r0
 800b602:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b606:	e013      	b.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b608:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b60c:	3328      	adds	r3, #40	; 0x28
 800b60e:	2100      	movs	r1, #0
 800b610:	4618      	mov	r0, r3
 800b612:	f001 fbd1 	bl	800cdb8 <RCCEx_PLL3_Config>
 800b616:	4603      	mov	r3, r0
 800b618:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b61c:	e008      	b.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b624:	e004      	b.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b626:	bf00      	nop
 800b628:	e002      	b.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b62a:	bf00      	nop
 800b62c:	e000      	b.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b62e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b630:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b634:	2b00      	cmp	r3, #0
 800b636:	d10d      	bne.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b638:	4b05      	ldr	r3, [pc, #20]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b63a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b63c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800b640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b646:	4a02      	ldr	r2, [pc, #8]	; (800b650 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b648:	430b      	orrs	r3, r1
 800b64a:	6513      	str	r3, [r2, #80]	; 0x50
 800b64c:	e006      	b.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b64e:	bf00      	nop
 800b650:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b654:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b658:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b65c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b664:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b668:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b66c:	2300      	movs	r3, #0
 800b66e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b672:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b676:	460b      	mov	r3, r1
 800b678:	4313      	orrs	r3, r2
 800b67a:	d03a      	beq.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b67c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b682:	2b30      	cmp	r3, #48	; 0x30
 800b684:	d01f      	beq.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b686:	2b30      	cmp	r3, #48	; 0x30
 800b688:	d819      	bhi.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b68a:	2b20      	cmp	r3, #32
 800b68c:	d00c      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b68e:	2b20      	cmp	r3, #32
 800b690:	d815      	bhi.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b692:	2b00      	cmp	r3, #0
 800b694:	d019      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b696:	2b10      	cmp	r3, #16
 800b698:	d111      	bne.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b69a:	4bae      	ldr	r3, [pc, #696]	; (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b69e:	4aad      	ldr	r2, [pc, #692]	; (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b6a6:	e011      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6ac:	3308      	adds	r3, #8
 800b6ae:	2102      	movs	r1, #2
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f001 facf 	bl	800cc54 <RCCEx_PLL2_Config>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b6bc:	e006      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b6c4:	e002      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b6c6:	bf00      	nop
 800b6c8:	e000      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b6ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10a      	bne.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b6d4:	4b9f      	ldr	r3, [pc, #636]	; (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6d8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b6dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6e2:	4a9c      	ldr	r2, [pc, #624]	; (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6e4:	430b      	orrs	r3, r1
 800b6e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b6e8:	e003      	b.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b6ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b6f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b6fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b702:	2300      	movs	r3, #0
 800b704:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b708:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b70c:	460b      	mov	r3, r1
 800b70e:	4313      	orrs	r3, r2
 800b710:	d051      	beq.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b71c:	d035      	beq.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b71e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b722:	d82e      	bhi.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b724:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b728:	d031      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b72a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b72e:	d828      	bhi.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b734:	d01a      	beq.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b73a:	d822      	bhi.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d003      	beq.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800b740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b744:	d007      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800b746:	e01c      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b748:	4b82      	ldr	r3, [pc, #520]	; (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74c:	4a81      	ldr	r2, [pc, #516]	; (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b74e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b754:	e01c      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b75a:	3308      	adds	r3, #8
 800b75c:	2100      	movs	r1, #0
 800b75e:	4618      	mov	r0, r3
 800b760:	f001 fa78 	bl	800cc54 <RCCEx_PLL2_Config>
 800b764:	4603      	mov	r3, r0
 800b766:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b76a:	e011      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b76c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b770:	3328      	adds	r3, #40	; 0x28
 800b772:	2100      	movs	r1, #0
 800b774:	4618      	mov	r0, r3
 800b776:	f001 fb1f 	bl	800cdb8 <RCCEx_PLL3_Config>
 800b77a:	4603      	mov	r3, r0
 800b77c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b780:	e006      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b782:	2301      	movs	r3, #1
 800b784:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b788:	e002      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b78a:	bf00      	nop
 800b78c:	e000      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b78e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b790:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b794:	2b00      	cmp	r3, #0
 800b796:	d10a      	bne.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b798:	4b6e      	ldr	r3, [pc, #440]	; (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b79a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b79c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b7a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7a6:	4a6b      	ldr	r2, [pc, #428]	; (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7a8:	430b      	orrs	r3, r1
 800b7aa:	6513      	str	r3, [r2, #80]	; 0x50
 800b7ac:	e003      	b.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7ae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b7b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b7b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7be:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b7c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b7cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	d053      	beq.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b7d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7e0:	d033      	beq.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800b7e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7e6:	d82c      	bhi.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b7e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b7ec:	d02f      	beq.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800b7ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b7f2:	d826      	bhi.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b7f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b7f8:	d02b      	beq.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b7fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b7fe:	d820      	bhi.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b804:	d012      	beq.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800b806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b80a:	d81a      	bhi.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d022      	beq.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800b810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b814:	d115      	bne.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b81a:	3308      	adds	r3, #8
 800b81c:	2101      	movs	r1, #1
 800b81e:	4618      	mov	r0, r3
 800b820:	f001 fa18 	bl	800cc54 <RCCEx_PLL2_Config>
 800b824:	4603      	mov	r3, r0
 800b826:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b82a:	e015      	b.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b82c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b830:	3328      	adds	r3, #40	; 0x28
 800b832:	2101      	movs	r1, #1
 800b834:	4618      	mov	r0, r3
 800b836:	f001 fabf 	bl	800cdb8 <RCCEx_PLL3_Config>
 800b83a:	4603      	mov	r3, r0
 800b83c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b840:	e00a      	b.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b842:	2301      	movs	r3, #1
 800b844:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b848:	e006      	b.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b84a:	bf00      	nop
 800b84c:	e004      	b.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b84e:	bf00      	nop
 800b850:	e002      	b.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b852:	bf00      	nop
 800b854:	e000      	b.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800b856:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b858:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d10a      	bne.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b860:	4b3c      	ldr	r3, [pc, #240]	; (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b864:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b86c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b86e:	4a39      	ldr	r2, [pc, #228]	; (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b870:	430b      	orrs	r3, r1
 800b872:	6513      	str	r3, [r2, #80]	; 0x50
 800b874:	e003      	b.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b876:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b87a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b87e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b886:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b88a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b88e:	2300      	movs	r3, #0
 800b890:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b894:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b898:	460b      	mov	r3, r1
 800b89a:	4313      	orrs	r3, r2
 800b89c:	d060      	beq.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b89e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b8a6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b8aa:	d039      	beq.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800b8ac:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800b8b0:	d832      	bhi.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b8b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8b6:	d035      	beq.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b8b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8bc:	d82c      	bhi.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b8be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8c2:	d031      	beq.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b8c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8c8:	d826      	bhi.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b8ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8ce:	d02d      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b8d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8d4:	d820      	bhi.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b8d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8da:	d012      	beq.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b8dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8e0:	d81a      	bhi.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d024      	beq.n	800b930 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b8e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8ea:	d115      	bne.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b8ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8f0:	3308      	adds	r3, #8
 800b8f2:	2101      	movs	r1, #1
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f001 f9ad 	bl	800cc54 <RCCEx_PLL2_Config>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b900:	e017      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b906:	3328      	adds	r3, #40	; 0x28
 800b908:	2101      	movs	r1, #1
 800b90a:	4618      	mov	r0, r3
 800b90c:	f001 fa54 	bl	800cdb8 <RCCEx_PLL3_Config>
 800b910:	4603      	mov	r3, r0
 800b912:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b916:	e00c      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b91e:	e008      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b920:	bf00      	nop
 800b922:	e006      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b924:	bf00      	nop
 800b926:	e004      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b928:	bf00      	nop
 800b92a:	e002      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b92c:	bf00      	nop
 800b92e:	e000      	b.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b930:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b932:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10e      	bne.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b93a:	4b06      	ldr	r3, [pc, #24]	; (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b93c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b93e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b946:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b94a:	4a02      	ldr	r2, [pc, #8]	; (800b954 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b94c:	430b      	orrs	r3, r1
 800b94e:	6593      	str	r3, [r2, #88]	; 0x58
 800b950:	e006      	b.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b952:	bf00      	nop
 800b954:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b958:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b95c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b96c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b970:	2300      	movs	r3, #0
 800b972:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b976:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b97a:	460b      	mov	r3, r1
 800b97c:	4313      	orrs	r3, r2
 800b97e:	d037      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b98a:	d00e      	beq.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b98c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b990:	d816      	bhi.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b992:	2b00      	cmp	r3, #0
 800b994:	d018      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b99a:	d111      	bne.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b99c:	4bc4      	ldr	r3, [pc, #784]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a0:	4ac3      	ldr	r2, [pc, #780]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b9a8:	e00f      	b.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9ae:	3308      	adds	r3, #8
 800b9b0:	2101      	movs	r1, #1
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f001 f94e 	bl	800cc54 <RCCEx_PLL2_Config>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b9be:	e004      	b.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b9c6:	e000      	b.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b9c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10a      	bne.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b9d2:	4bb7      	ldr	r3, [pc, #732]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9d6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b9da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9e0:	4ab3      	ldr	r2, [pc, #716]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9e2:	430b      	orrs	r3, r1
 800b9e4:	6513      	str	r3, [r2, #80]	; 0x50
 800b9e6:	e003      	b.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b9ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b9f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b9fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ba00:	2300      	movs	r3, #0
 800ba02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ba06:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	d039      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ba10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba16:	2b03      	cmp	r3, #3
 800ba18:	d81c      	bhi.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ba1a:	a201      	add	r2, pc, #4	; (adr r2, 800ba20 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ba1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba20:	0800ba5d 	.word	0x0800ba5d
 800ba24:	0800ba31 	.word	0x0800ba31
 800ba28:	0800ba3f 	.word	0x0800ba3f
 800ba2c:	0800ba5d 	.word	0x0800ba5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba30:	4b9f      	ldr	r3, [pc, #636]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba34:	4a9e      	ldr	r2, [pc, #632]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ba3c:	e00f      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba42:	3308      	adds	r3, #8
 800ba44:	2102      	movs	r1, #2
 800ba46:	4618      	mov	r0, r3
 800ba48:	f001 f904 	bl	800cc54 <RCCEx_PLL2_Config>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ba52:	e004      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ba5a:	e000      	b.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ba5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba5e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10a      	bne.n	800ba7c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ba66:	4b92      	ldr	r3, [pc, #584]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba6a:	f023 0103 	bic.w	r1, r3, #3
 800ba6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba74:	4a8e      	ldr	r2, [pc, #568]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba76:	430b      	orrs	r3, r1
 800ba78:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba7a:	e003      	b.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ba84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ba90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba94:	2300      	movs	r3, #0
 800ba96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ba9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ba9e:	460b      	mov	r3, r1
 800baa0:	4313      	orrs	r3, r2
 800baa2:	f000 8099 	beq.w	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800baa6:	4b83      	ldr	r3, [pc, #524]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a82      	ldr	r2, [pc, #520]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800baac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bab0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bab2:	f7f8 fb83 	bl	80041bc <HAL_GetTick>
 800bab6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800baba:	e00b      	b.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800babc:	f7f8 fb7e 	bl	80041bc <HAL_GetTick>
 800bac0:	4602      	mov	r2, r0
 800bac2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	2b64      	cmp	r3, #100	; 0x64
 800baca:	d903      	bls.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bacc:	2303      	movs	r3, #3
 800bace:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bad2:	e005      	b.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bad4:	4b77      	ldr	r3, [pc, #476]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800badc:	2b00      	cmp	r3, #0
 800bade:	d0ed      	beq.n	800babc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bae0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d173      	bne.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bae8:	4b71      	ldr	r3, [pc, #452]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800baea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800baec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800baf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800baf4:	4053      	eors	r3, r2
 800baf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d015      	beq.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bafe:	4b6c      	ldr	r3, [pc, #432]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb06:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bb0a:	4b69      	ldr	r3, [pc, #420]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb0e:	4a68      	ldr	r2, [pc, #416]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb14:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bb16:	4b66      	ldr	r3, [pc, #408]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb1a:	4a65      	ldr	r2, [pc, #404]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb20:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bb22:	4a63      	ldr	r2, [pc, #396]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb28:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bb2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bb32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb36:	d118      	bne.n	800bb6a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb38:	f7f8 fb40 	bl	80041bc <HAL_GetTick>
 800bb3c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb40:	e00d      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb42:	f7f8 fb3b 	bl	80041bc <HAL_GetTick>
 800bb46:	4602      	mov	r2, r0
 800bb48:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bb4c:	1ad2      	subs	r2, r2, r3
 800bb4e:	f241 3388 	movw	r3, #5000	; 0x1388
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d903      	bls.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bb56:	2303      	movs	r3, #3
 800bb58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800bb5c:	e005      	b.n	800bb6a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bb5e:	4b54      	ldr	r3, [pc, #336]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb62:	f003 0302 	and.w	r3, r3, #2
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d0eb      	beq.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bb6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d129      	bne.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bb7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb82:	d10e      	bne.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bb84:	4b4a      	ldr	r3, [pc, #296]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb86:	691b      	ldr	r3, [r3, #16]
 800bb88:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bb8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bb94:	091a      	lsrs	r2, r3, #4
 800bb96:	4b48      	ldr	r3, [pc, #288]	; (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bb98:	4013      	ands	r3, r2
 800bb9a:	4a45      	ldr	r2, [pc, #276]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb9c:	430b      	orrs	r3, r1
 800bb9e:	6113      	str	r3, [r2, #16]
 800bba0:	e005      	b.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bba2:	4b43      	ldr	r3, [pc, #268]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bba4:	691b      	ldr	r3, [r3, #16]
 800bba6:	4a42      	ldr	r2, [pc, #264]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bba8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bbac:	6113      	str	r3, [r2, #16]
 800bbae:	4b40      	ldr	r3, [pc, #256]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbb0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bbb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bbba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bbbe:	4a3c      	ldr	r2, [pc, #240]	; (800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbc0:	430b      	orrs	r3, r1
 800bbc2:	6713      	str	r3, [r2, #112]	; 0x70
 800bbc4:	e008      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bbc6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800bbce:	e003      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbd4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bbd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe0:	f002 0301 	and.w	r3, r2, #1
 800bbe4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bbe8:	2300      	movs	r3, #0
 800bbea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bbee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	f000 8090 	beq.w	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bbfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc02:	2b28      	cmp	r3, #40	; 0x28
 800bc04:	d870      	bhi.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bc06:	a201      	add	r2, pc, #4	; (adr r2, 800bc0c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc0c:	0800bcf1 	.word	0x0800bcf1
 800bc10:	0800bce9 	.word	0x0800bce9
 800bc14:	0800bce9 	.word	0x0800bce9
 800bc18:	0800bce9 	.word	0x0800bce9
 800bc1c:	0800bce9 	.word	0x0800bce9
 800bc20:	0800bce9 	.word	0x0800bce9
 800bc24:	0800bce9 	.word	0x0800bce9
 800bc28:	0800bce9 	.word	0x0800bce9
 800bc2c:	0800bcbd 	.word	0x0800bcbd
 800bc30:	0800bce9 	.word	0x0800bce9
 800bc34:	0800bce9 	.word	0x0800bce9
 800bc38:	0800bce9 	.word	0x0800bce9
 800bc3c:	0800bce9 	.word	0x0800bce9
 800bc40:	0800bce9 	.word	0x0800bce9
 800bc44:	0800bce9 	.word	0x0800bce9
 800bc48:	0800bce9 	.word	0x0800bce9
 800bc4c:	0800bcd3 	.word	0x0800bcd3
 800bc50:	0800bce9 	.word	0x0800bce9
 800bc54:	0800bce9 	.word	0x0800bce9
 800bc58:	0800bce9 	.word	0x0800bce9
 800bc5c:	0800bce9 	.word	0x0800bce9
 800bc60:	0800bce9 	.word	0x0800bce9
 800bc64:	0800bce9 	.word	0x0800bce9
 800bc68:	0800bce9 	.word	0x0800bce9
 800bc6c:	0800bcf1 	.word	0x0800bcf1
 800bc70:	0800bce9 	.word	0x0800bce9
 800bc74:	0800bce9 	.word	0x0800bce9
 800bc78:	0800bce9 	.word	0x0800bce9
 800bc7c:	0800bce9 	.word	0x0800bce9
 800bc80:	0800bce9 	.word	0x0800bce9
 800bc84:	0800bce9 	.word	0x0800bce9
 800bc88:	0800bce9 	.word	0x0800bce9
 800bc8c:	0800bcf1 	.word	0x0800bcf1
 800bc90:	0800bce9 	.word	0x0800bce9
 800bc94:	0800bce9 	.word	0x0800bce9
 800bc98:	0800bce9 	.word	0x0800bce9
 800bc9c:	0800bce9 	.word	0x0800bce9
 800bca0:	0800bce9 	.word	0x0800bce9
 800bca4:	0800bce9 	.word	0x0800bce9
 800bca8:	0800bce9 	.word	0x0800bce9
 800bcac:	0800bcf1 	.word	0x0800bcf1
 800bcb0:	58024400 	.word	0x58024400
 800bcb4:	58024800 	.word	0x58024800
 800bcb8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcc0:	3308      	adds	r3, #8
 800bcc2:	2101      	movs	r1, #1
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f000 ffc5 	bl	800cc54 <RCCEx_PLL2_Config>
 800bcca:	4603      	mov	r3, r0
 800bccc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bcd0:	e00f      	b.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcd6:	3328      	adds	r3, #40	; 0x28
 800bcd8:	2101      	movs	r1, #1
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f001 f86c 	bl	800cdb8 <RCCEx_PLL3_Config>
 800bce0:	4603      	mov	r3, r0
 800bce2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bce6:	e004      	b.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bce8:	2301      	movs	r3, #1
 800bcea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bcee:	e000      	b.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bcf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcf2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d10b      	bne.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bcfa:	4bc0      	ldr	r3, [pc, #768]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bcfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcfe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bd02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd0a:	4abc      	ldr	r2, [pc, #752]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bd0c:	430b      	orrs	r3, r1
 800bd0e:	6553      	str	r3, [r2, #84]	; 0x54
 800bd10:	e003      	b.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd16:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bd1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd22:	f002 0302 	and.w	r3, r2, #2
 800bd26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bd30:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bd34:	460b      	mov	r3, r1
 800bd36:	4313      	orrs	r3, r2
 800bd38:	d043      	beq.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bd3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd42:	2b05      	cmp	r3, #5
 800bd44:	d824      	bhi.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800bd46:	a201      	add	r2, pc, #4	; (adr r2, 800bd4c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800bd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd4c:	0800bd99 	.word	0x0800bd99
 800bd50:	0800bd65 	.word	0x0800bd65
 800bd54:	0800bd7b 	.word	0x0800bd7b
 800bd58:	0800bd99 	.word	0x0800bd99
 800bd5c:	0800bd99 	.word	0x0800bd99
 800bd60:	0800bd99 	.word	0x0800bd99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd68:	3308      	adds	r3, #8
 800bd6a:	2101      	movs	r1, #1
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f000 ff71 	bl	800cc54 <RCCEx_PLL2_Config>
 800bd72:	4603      	mov	r3, r0
 800bd74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bd78:	e00f      	b.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd7e:	3328      	adds	r3, #40	; 0x28
 800bd80:	2101      	movs	r1, #1
 800bd82:	4618      	mov	r0, r3
 800bd84:	f001 f818 	bl	800cdb8 <RCCEx_PLL3_Config>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bd8e:	e004      	b.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd90:	2301      	movs	r3, #1
 800bd92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bd96:	e000      	b.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800bd98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd9a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d10b      	bne.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bda2:	4b96      	ldr	r3, [pc, #600]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bda4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bda6:	f023 0107 	bic.w	r1, r3, #7
 800bdaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdb2:	4a92      	ldr	r2, [pc, #584]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bdb4:	430b      	orrs	r3, r1
 800bdb6:	6553      	str	r3, [r2, #84]	; 0x54
 800bdb8:	e003      	b.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bdbe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bdc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	f002 0304 	and.w	r3, r2, #4
 800bdce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bdd8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bddc:	460b      	mov	r3, r1
 800bdde:	4313      	orrs	r3, r2
 800bde0:	d043      	beq.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bde2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bde6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bdea:	2b05      	cmp	r3, #5
 800bdec:	d824      	bhi.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800bdee:	a201      	add	r2, pc, #4	; (adr r2, 800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800bdf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf4:	0800be41 	.word	0x0800be41
 800bdf8:	0800be0d 	.word	0x0800be0d
 800bdfc:	0800be23 	.word	0x0800be23
 800be00:	0800be41 	.word	0x0800be41
 800be04:	0800be41 	.word	0x0800be41
 800be08:	0800be41 	.word	0x0800be41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be10:	3308      	adds	r3, #8
 800be12:	2101      	movs	r1, #1
 800be14:	4618      	mov	r0, r3
 800be16:	f000 ff1d 	bl	800cc54 <RCCEx_PLL2_Config>
 800be1a:	4603      	mov	r3, r0
 800be1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800be20:	e00f      	b.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be26:	3328      	adds	r3, #40	; 0x28
 800be28:	2101      	movs	r1, #1
 800be2a:	4618      	mov	r0, r3
 800be2c:	f000 ffc4 	bl	800cdb8 <RCCEx_PLL3_Config>
 800be30:	4603      	mov	r3, r0
 800be32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800be36:	e004      	b.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be38:	2301      	movs	r3, #1
 800be3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800be3e:	e000      	b.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800be40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be46:	2b00      	cmp	r3, #0
 800be48:	d10b      	bne.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800be4a:	4b6c      	ldr	r3, [pc, #432]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800be4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be4e:	f023 0107 	bic.w	r1, r3, #7
 800be52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be5a:	4a68      	ldr	r2, [pc, #416]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800be5c:	430b      	orrs	r3, r1
 800be5e:	6593      	str	r3, [r2, #88]	; 0x58
 800be60:	e003      	b.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be62:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800be66:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be72:	f002 0320 	and.w	r3, r2, #32
 800be76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800be7a:	2300      	movs	r3, #0
 800be7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800be84:	460b      	mov	r3, r1
 800be86:	4313      	orrs	r3, r2
 800be88:	d055      	beq.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800be8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800be92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be96:	d033      	beq.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800be98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be9c:	d82c      	bhi.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800be9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bea2:	d02f      	beq.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800bea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bea8:	d826      	bhi.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800beaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800beae:	d02b      	beq.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800beb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800beb4:	d820      	bhi.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800beb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beba:	d012      	beq.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800bebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bec0:	d81a      	bhi.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d022      	beq.n	800bf0c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800bec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800beca:	d115      	bne.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800becc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bed0:	3308      	adds	r3, #8
 800bed2:	2100      	movs	r1, #0
 800bed4:	4618      	mov	r0, r3
 800bed6:	f000 febd 	bl	800cc54 <RCCEx_PLL2_Config>
 800beda:	4603      	mov	r3, r0
 800bedc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bee0:	e015      	b.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bee6:	3328      	adds	r3, #40	; 0x28
 800bee8:	2102      	movs	r1, #2
 800beea:	4618      	mov	r0, r3
 800beec:	f000 ff64 	bl	800cdb8 <RCCEx_PLL3_Config>
 800bef0:	4603      	mov	r3, r0
 800bef2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bef6:	e00a      	b.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bef8:	2301      	movs	r3, #1
 800befa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800befe:	e006      	b.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bf00:	bf00      	nop
 800bf02:	e004      	b.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bf04:	bf00      	nop
 800bf06:	e002      	b.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bf08:	bf00      	nop
 800bf0a:	e000      	b.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800bf0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d10b      	bne.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bf16:	4b39      	ldr	r3, [pc, #228]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf1a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bf1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf26:	4a35      	ldr	r2, [pc, #212]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf28:	430b      	orrs	r3, r1
 800bf2a:	6553      	str	r3, [r2, #84]	; 0x54
 800bf2c:	e003      	b.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf2e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf32:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bf36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bf42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bf46:	2300      	movs	r3, #0
 800bf48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bf4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bf50:	460b      	mov	r3, r1
 800bf52:	4313      	orrs	r3, r2
 800bf54:	d058      	beq.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bf56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bf62:	d033      	beq.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800bf64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bf68:	d82c      	bhi.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bf6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf6e:	d02f      	beq.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800bf70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf74:	d826      	bhi.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bf76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf7a:	d02b      	beq.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800bf7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf80:	d820      	bhi.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bf82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf86:	d012      	beq.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800bf88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf8c:	d81a      	bhi.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d022      	beq.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800bf92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf96:	d115      	bne.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf9c:	3308      	adds	r3, #8
 800bf9e:	2100      	movs	r1, #0
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f000 fe57 	bl	800cc54 <RCCEx_PLL2_Config>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bfac:	e015      	b.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfb2:	3328      	adds	r3, #40	; 0x28
 800bfb4:	2102      	movs	r1, #2
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f000 fefe 	bl	800cdb8 <RCCEx_PLL3_Config>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bfc2:	e00a      	b.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bfca:	e006      	b.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bfcc:	bf00      	nop
 800bfce:	e004      	b.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bfd0:	bf00      	nop
 800bfd2:	e002      	b.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bfd4:	bf00      	nop
 800bfd6:	e000      	b.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800bfd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d10e      	bne.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bfe2:	4b06      	ldr	r3, [pc, #24]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bfe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfe6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bfea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bff2:	4a02      	ldr	r2, [pc, #8]	; (800bffc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bff4:	430b      	orrs	r3, r1
 800bff6:	6593      	str	r3, [r2, #88]	; 0x58
 800bff8:	e006      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800bffa:	bf00      	nop
 800bffc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c000:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c004:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c010:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c014:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c018:	2300      	movs	r3, #0
 800c01a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c01e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c022:	460b      	mov	r3, r1
 800c024:	4313      	orrs	r3, r2
 800c026:	d055      	beq.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c02c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c030:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c034:	d033      	beq.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c036:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c03a:	d82c      	bhi.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c03c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c040:	d02f      	beq.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c046:	d826      	bhi.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c048:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c04c:	d02b      	beq.n	800c0a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c04e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c052:	d820      	bhi.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c058:	d012      	beq.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c05a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c05e:	d81a      	bhi.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c060:	2b00      	cmp	r3, #0
 800c062:	d022      	beq.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c068:	d115      	bne.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c06a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c06e:	3308      	adds	r3, #8
 800c070:	2100      	movs	r1, #0
 800c072:	4618      	mov	r0, r3
 800c074:	f000 fdee 	bl	800cc54 <RCCEx_PLL2_Config>
 800c078:	4603      	mov	r3, r0
 800c07a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c07e:	e015      	b.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c084:	3328      	adds	r3, #40	; 0x28
 800c086:	2102      	movs	r1, #2
 800c088:	4618      	mov	r0, r3
 800c08a:	f000 fe95 	bl	800cdb8 <RCCEx_PLL3_Config>
 800c08e:	4603      	mov	r3, r0
 800c090:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c094:	e00a      	b.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c096:	2301      	movs	r3, #1
 800c098:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c09c:	e006      	b.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c09e:	bf00      	nop
 800c0a0:	e004      	b.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c0a2:	bf00      	nop
 800c0a4:	e002      	b.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c0a6:	bf00      	nop
 800c0a8:	e000      	b.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c0aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d10b      	bne.n	800c0cc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c0b4:	4ba1      	ldr	r3, [pc, #644]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c0b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0b8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c0bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c0c4:	4a9d      	ldr	r2, [pc, #628]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c0c6:	430b      	orrs	r3, r1
 800c0c8:	6593      	str	r3, [r2, #88]	; 0x58
 800c0ca:	e003      	b.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c0d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c0d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0dc:	f002 0308 	and.w	r3, r2, #8
 800c0e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c0ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	d01e      	beq.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c0f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c100:	d10c      	bne.n	800c11c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c106:	3328      	adds	r3, #40	; 0x28
 800c108:	2102      	movs	r1, #2
 800c10a:	4618      	mov	r0, r3
 800c10c:	f000 fe54 	bl	800cdb8 <RCCEx_PLL3_Config>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d002      	beq.n	800c11c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c11c:	4b87      	ldr	r3, [pc, #540]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c11e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c120:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c12c:	4a83      	ldr	r2, [pc, #524]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c12e:	430b      	orrs	r3, r1
 800c130:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c132:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13a:	f002 0310 	and.w	r3, r2, #16
 800c13e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c142:	2300      	movs	r3, #0
 800c144:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c148:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c14c:	460b      	mov	r3, r1
 800c14e:	4313      	orrs	r3, r2
 800c150:	d01e      	beq.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c156:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c15a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c15e:	d10c      	bne.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c160:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c164:	3328      	adds	r3, #40	; 0x28
 800c166:	2102      	movs	r1, #2
 800c168:	4618      	mov	r0, r3
 800c16a:	f000 fe25 	bl	800cdb8 <RCCEx_PLL3_Config>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d002      	beq.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c17a:	4b70      	ldr	r3, [pc, #448]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c17c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c17e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c186:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c18a:	4a6c      	ldr	r2, [pc, #432]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c18c:	430b      	orrs	r3, r1
 800c18e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c198:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c19c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c1a6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	d03e      	beq.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c1b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c1b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1bc:	d022      	beq.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c1be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1c2:	d81b      	bhi.n	800c1fc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d003      	beq.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c1c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1cc:	d00b      	beq.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c1ce:	e015      	b.n	800c1fc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1d4:	3308      	adds	r3, #8
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 fd3b 	bl	800cc54 <RCCEx_PLL2_Config>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c1e4:	e00f      	b.n	800c206 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1ea:	3328      	adds	r3, #40	; 0x28
 800c1ec:	2102      	movs	r1, #2
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 fde2 	bl	800cdb8 <RCCEx_PLL3_Config>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c1fa:	e004      	b.n	800c206 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c202:	e000      	b.n	800c206 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c204:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c206:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d10b      	bne.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c20e:	4b4b      	ldr	r3, [pc, #300]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c212:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c21a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c21e:	4a47      	ldr	r2, [pc, #284]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c220:	430b      	orrs	r3, r1
 800c222:	6593      	str	r3, [r2, #88]	; 0x58
 800c224:	e003      	b.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c226:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c22a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c22e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c236:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c23a:	67bb      	str	r3, [r7, #120]	; 0x78
 800c23c:	2300      	movs	r3, #0
 800c23e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c240:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c244:	460b      	mov	r3, r1
 800c246:	4313      	orrs	r3, r2
 800c248:	d03b      	beq.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c24a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c24e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c252:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c256:	d01f      	beq.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c258:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c25c:	d818      	bhi.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c25e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c262:	d003      	beq.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c264:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c268:	d007      	beq.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c26a:	e011      	b.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c26c:	4b33      	ldr	r3, [pc, #204]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c270:	4a32      	ldr	r2, [pc, #200]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c276:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c278:	e00f      	b.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c27a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c27e:	3328      	adds	r3, #40	; 0x28
 800c280:	2101      	movs	r1, #1
 800c282:	4618      	mov	r0, r3
 800c284:	f000 fd98 	bl	800cdb8 <RCCEx_PLL3_Config>
 800c288:	4603      	mov	r3, r0
 800c28a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c28e:	e004      	b.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c290:	2301      	movs	r3, #1
 800c292:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c296:	e000      	b.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c29a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d10b      	bne.n	800c2ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c2a2:	4b26      	ldr	r3, [pc, #152]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c2aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2b2:	4a22      	ldr	r2, [pc, #136]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c2b4:	430b      	orrs	r3, r1
 800c2b6:	6553      	str	r3, [r2, #84]	; 0x54
 800c2b8:	e003      	b.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c2be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c2c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c2ce:	673b      	str	r3, [r7, #112]	; 0x70
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	677b      	str	r3, [r7, #116]	; 0x74
 800c2d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c2d8:	460b      	mov	r3, r1
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	d034      	beq.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c2de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d003      	beq.n	800c2f0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c2e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2ec:	d007      	beq.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c2ee:	e011      	b.n	800c314 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2f0:	4b12      	ldr	r3, [pc, #72]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f4:	4a11      	ldr	r2, [pc, #68]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c2f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c2fc:	e00e      	b.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c2fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c302:	3308      	adds	r3, #8
 800c304:	2102      	movs	r1, #2
 800c306:	4618      	mov	r0, r3
 800c308:	f000 fca4 	bl	800cc54 <RCCEx_PLL2_Config>
 800c30c:	4603      	mov	r3, r0
 800c30e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c312:	e003      	b.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c314:	2301      	movs	r3, #1
 800c316:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c31a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c31c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c320:	2b00      	cmp	r3, #0
 800c322:	d10d      	bne.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c324:	4b05      	ldr	r3, [pc, #20]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c328:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c32c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c332:	4a02      	ldr	r2, [pc, #8]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c334:	430b      	orrs	r3, r1
 800c336:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c338:	e006      	b.n	800c348 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c33a:	bf00      	nop
 800c33c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c340:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c344:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c350:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c354:	66bb      	str	r3, [r7, #104]	; 0x68
 800c356:	2300      	movs	r3, #0
 800c358:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c35a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c35e:	460b      	mov	r3, r1
 800c360:	4313      	orrs	r3, r2
 800c362:	d00c      	beq.n	800c37e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c368:	3328      	adds	r3, #40	; 0x28
 800c36a:	2102      	movs	r1, #2
 800c36c:	4618      	mov	r0, r3
 800c36e:	f000 fd23 	bl	800cdb8 <RCCEx_PLL3_Config>
 800c372:	4603      	mov	r3, r0
 800c374:	2b00      	cmp	r3, #0
 800c376:	d002      	beq.n	800c37e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c378:	2301      	movs	r3, #1
 800c37a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c37e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c386:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c38a:	663b      	str	r3, [r7, #96]	; 0x60
 800c38c:	2300      	movs	r3, #0
 800c38e:	667b      	str	r3, [r7, #100]	; 0x64
 800c390:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c394:	460b      	mov	r3, r1
 800c396:	4313      	orrs	r3, r2
 800c398:	d038      	beq.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c39a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c39e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3a6:	d018      	beq.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c3a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3ac:	d811      	bhi.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c3ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3b2:	d014      	beq.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c3b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3b8:	d80b      	bhi.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d011      	beq.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c3be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3c2:	d106      	bne.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3c4:	4bc3      	ldr	r3, [pc, #780]	; (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c8:	4ac2      	ldr	r2, [pc, #776]	; (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c3ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c3d0:	e008      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c3d8:	e004      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c3da:	bf00      	nop
 800c3dc:	e002      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c3de:	bf00      	nop
 800c3e0:	e000      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c3e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10b      	bne.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c3ec:	4bb9      	ldr	r3, [pc, #740]	; (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c3ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c3f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3fc:	4ab5      	ldr	r2, [pc, #724]	; (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c3fe:	430b      	orrs	r3, r1
 800c400:	6553      	str	r3, [r2, #84]	; 0x54
 800c402:	e003      	b.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c404:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c408:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c40c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c414:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c418:	65bb      	str	r3, [r7, #88]	; 0x58
 800c41a:	2300      	movs	r3, #0
 800c41c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c41e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c422:	460b      	mov	r3, r1
 800c424:	4313      	orrs	r3, r2
 800c426:	d009      	beq.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c428:	4baa      	ldr	r3, [pc, #680]	; (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c42c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c436:	4aa7      	ldr	r2, [pc, #668]	; (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c438:	430b      	orrs	r3, r1
 800c43a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c43c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c444:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c448:	653b      	str	r3, [r7, #80]	; 0x50
 800c44a:	2300      	movs	r3, #0
 800c44c:	657b      	str	r3, [r7, #84]	; 0x54
 800c44e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c452:	460b      	mov	r3, r1
 800c454:	4313      	orrs	r3, r2
 800c456:	d009      	beq.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c458:	4b9e      	ldr	r3, [pc, #632]	; (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c45a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c45c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c466:	4a9b      	ldr	r2, [pc, #620]	; (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c468:	430b      	orrs	r3, r1
 800c46a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c46c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c474:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c478:	64bb      	str	r3, [r7, #72]	; 0x48
 800c47a:	2300      	movs	r3, #0
 800c47c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c47e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c482:	460b      	mov	r3, r1
 800c484:	4313      	orrs	r3, r2
 800c486:	d009      	beq.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c488:	4b92      	ldr	r3, [pc, #584]	; (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c48a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c48c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800c490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c496:	4a8f      	ldr	r2, [pc, #572]	; (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c498:	430b      	orrs	r3, r1
 800c49a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c49c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c4a8:	643b      	str	r3, [r7, #64]	; 0x40
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	647b      	str	r3, [r7, #68]	; 0x44
 800c4ae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	d00e      	beq.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c4b8:	4b86      	ldr	r3, [pc, #536]	; (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c4ba:	691b      	ldr	r3, [r3, #16]
 800c4bc:	4a85      	ldr	r2, [pc, #532]	; (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c4be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c4c2:	6113      	str	r3, [r2, #16]
 800c4c4:	4b83      	ldr	r3, [pc, #524]	; (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c4c6:	6919      	ldr	r1, [r3, #16]
 800c4c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c4d0:	4a80      	ldr	r2, [pc, #512]	; (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c4d2:	430b      	orrs	r3, r1
 800c4d4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c4d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4de:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c4e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4e8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	d009      	beq.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c4f2:	4b78      	ldr	r3, [pc, #480]	; (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c4f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4f6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c4fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c500:	4a74      	ldr	r2, [pc, #464]	; (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c502:	430b      	orrs	r3, r1
 800c504:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c512:	633b      	str	r3, [r7, #48]	; 0x30
 800c514:	2300      	movs	r3, #0
 800c516:	637b      	str	r3, [r7, #52]	; 0x34
 800c518:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c51c:	460b      	mov	r3, r1
 800c51e:	4313      	orrs	r3, r2
 800c520:	d00a      	beq.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c522:	4b6c      	ldr	r3, [pc, #432]	; (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c526:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c52a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c52e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c532:	4a68      	ldr	r2, [pc, #416]	; (800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c534:	430b      	orrs	r3, r1
 800c536:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c540:	2100      	movs	r1, #0
 800c542:	62b9      	str	r1, [r7, #40]	; 0x28
 800c544:	f003 0301 	and.w	r3, r3, #1
 800c548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c54a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c54e:	460b      	mov	r3, r1
 800c550:	4313      	orrs	r3, r2
 800c552:	d011      	beq.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c558:	3308      	adds	r3, #8
 800c55a:	2100      	movs	r1, #0
 800c55c:	4618      	mov	r0, r3
 800c55e:	f000 fb79 	bl	800cc54 <RCCEx_PLL2_Config>
 800c562:	4603      	mov	r3, r0
 800c564:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c568:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d003      	beq.n	800c578 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c570:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c574:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c578:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c580:	2100      	movs	r1, #0
 800c582:	6239      	str	r1, [r7, #32]
 800c584:	f003 0302 	and.w	r3, r3, #2
 800c588:	627b      	str	r3, [r7, #36]	; 0x24
 800c58a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c58e:	460b      	mov	r3, r1
 800c590:	4313      	orrs	r3, r2
 800c592:	d011      	beq.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c598:	3308      	adds	r3, #8
 800c59a:	2101      	movs	r1, #1
 800c59c:	4618      	mov	r0, r3
 800c59e:	f000 fb59 	bl	800cc54 <RCCEx_PLL2_Config>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c5a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d003      	beq.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c5b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c0:	2100      	movs	r1, #0
 800c5c2:	61b9      	str	r1, [r7, #24]
 800c5c4:	f003 0304 	and.w	r3, r3, #4
 800c5c8:	61fb      	str	r3, [r7, #28]
 800c5ca:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	d011      	beq.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c5d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5d8:	3308      	adds	r3, #8
 800c5da:	2102      	movs	r1, #2
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f000 fb39 	bl	800cc54 <RCCEx_PLL2_Config>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c5e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d003      	beq.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c5f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c600:	2100      	movs	r1, #0
 800c602:	6139      	str	r1, [r7, #16]
 800c604:	f003 0308 	and.w	r3, r3, #8
 800c608:	617b      	str	r3, [r7, #20]
 800c60a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c60e:	460b      	mov	r3, r1
 800c610:	4313      	orrs	r3, r2
 800c612:	d011      	beq.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c618:	3328      	adds	r3, #40	; 0x28
 800c61a:	2100      	movs	r1, #0
 800c61c:	4618      	mov	r0, r3
 800c61e:	f000 fbcb 	bl	800cdb8 <RCCEx_PLL3_Config>
 800c622:	4603      	mov	r3, r0
 800c624:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800c628:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d003      	beq.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c630:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c634:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c640:	2100      	movs	r1, #0
 800c642:	60b9      	str	r1, [r7, #8]
 800c644:	f003 0310 	and.w	r3, r3, #16
 800c648:	60fb      	str	r3, [r7, #12]
 800c64a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c64e:	460b      	mov	r3, r1
 800c650:	4313      	orrs	r3, r2
 800c652:	d011      	beq.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c654:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c658:	3328      	adds	r3, #40	; 0x28
 800c65a:	2101      	movs	r1, #1
 800c65c:	4618      	mov	r0, r3
 800c65e:	f000 fbab 	bl	800cdb8 <RCCEx_PLL3_Config>
 800c662:	4603      	mov	r3, r0
 800c664:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c668:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d003      	beq.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c670:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c674:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c680:	2100      	movs	r1, #0
 800c682:	6039      	str	r1, [r7, #0]
 800c684:	f003 0320 	and.w	r3, r3, #32
 800c688:	607b      	str	r3, [r7, #4]
 800c68a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c68e:	460b      	mov	r3, r1
 800c690:	4313      	orrs	r3, r2
 800c692:	d011      	beq.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c698:	3328      	adds	r3, #40	; 0x28
 800c69a:	2102      	movs	r1, #2
 800c69c:	4618      	mov	r0, r3
 800c69e:	f000 fb8b 	bl	800cdb8 <RCCEx_PLL3_Config>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c6a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d003      	beq.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c6b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800c6b8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d101      	bne.n	800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	e000      	b.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800c6c4:	2301      	movs	r3, #1
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c6d2:	bf00      	nop
 800c6d4:	58024400 	.word	0x58024400

0800c6d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800c6dc:	f7fe fde2 	bl	800b2a4 <HAL_RCC_GetHCLKFreq>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	4b06      	ldr	r3, [pc, #24]	; (800c6fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c6e4:	6a1b      	ldr	r3, [r3, #32]
 800c6e6:	091b      	lsrs	r3, r3, #4
 800c6e8:	f003 0307 	and.w	r3, r3, #7
 800c6ec:	4904      	ldr	r1, [pc, #16]	; (800c700 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c6ee:	5ccb      	ldrb	r3, [r1, r3]
 800c6f0:	f003 031f 	and.w	r3, r3, #31
 800c6f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	58024400 	.word	0x58024400
 800c700:	08010768 	.word	0x08010768

0800c704 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c704:	b480      	push	{r7}
 800c706:	b089      	sub	sp, #36	; 0x24
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c70c:	4ba1      	ldr	r3, [pc, #644]	; (800c994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c710:	f003 0303 	and.w	r3, r3, #3
 800c714:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c716:	4b9f      	ldr	r3, [pc, #636]	; (800c994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c71a:	0b1b      	lsrs	r3, r3, #12
 800c71c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c720:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c722:	4b9c      	ldr	r3, [pc, #624]	; (800c994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c726:	091b      	lsrs	r3, r3, #4
 800c728:	f003 0301 	and.w	r3, r3, #1
 800c72c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c72e:	4b99      	ldr	r3, [pc, #612]	; (800c994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c732:	08db      	lsrs	r3, r3, #3
 800c734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c738:	693a      	ldr	r2, [r7, #16]
 800c73a:	fb02 f303 	mul.w	r3, r2, r3
 800c73e:	ee07 3a90 	vmov	s15, r3
 800c742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c746:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	f000 8111 	beq.w	800c974 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c752:	69bb      	ldr	r3, [r7, #24]
 800c754:	2b02      	cmp	r3, #2
 800c756:	f000 8083 	beq.w	800c860 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	2b02      	cmp	r3, #2
 800c75e:	f200 80a1 	bhi.w	800c8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c762:	69bb      	ldr	r3, [r7, #24]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d003      	beq.n	800c770 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c768:	69bb      	ldr	r3, [r7, #24]
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d056      	beq.n	800c81c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c76e:	e099      	b.n	800c8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c770:	4b88      	ldr	r3, [pc, #544]	; (800c994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f003 0320 	and.w	r3, r3, #32
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d02d      	beq.n	800c7d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c77c:	4b85      	ldr	r3, [pc, #532]	; (800c994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	08db      	lsrs	r3, r3, #3
 800c782:	f003 0303 	and.w	r3, r3, #3
 800c786:	4a84      	ldr	r2, [pc, #528]	; (800c998 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c788:	fa22 f303 	lsr.w	r3, r2, r3
 800c78c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	ee07 3a90 	vmov	s15, r3
 800c794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	ee07 3a90 	vmov	s15, r3
 800c79e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7a6:	4b7b      	ldr	r3, [pc, #492]	; (800c994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ae:	ee07 3a90 	vmov	s15, r3
 800c7b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c7d6:	e087      	b.n	800c8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	ee07 3a90 	vmov	s15, r3
 800c7de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c7e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7ea:	4b6a      	ldr	r3, [pc, #424]	; (800c994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7f2:	ee07 3a90 	vmov	s15, r3
 800c7f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c80a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c80e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c812:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c81a:	e065      	b.n	800c8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	ee07 3a90 	vmov	s15, r3
 800c822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c826:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c82a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c82e:	4b59      	ldr	r3, [pc, #356]	; (800c994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c836:	ee07 3a90 	vmov	s15, r3
 800c83a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c83e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c842:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c84a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c84e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c85a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c85e:	e043      	b.n	800c8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	ee07 3a90 	vmov	s15, r3
 800c866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c86a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c86e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c872:	4b48      	ldr	r3, [pc, #288]	; (800c994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c87a:	ee07 3a90 	vmov	s15, r3
 800c87e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c882:	ed97 6a03 	vldr	s12, [r7, #12]
 800c886:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c88a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c88e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c89a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c89e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8a2:	e021      	b.n	800c8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	ee07 3a90 	vmov	s15, r3
 800c8aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c8b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8b6:	4b37      	ldr	r3, [pc, #220]	; (800c994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8be:	ee07 3a90 	vmov	s15, r3
 800c8c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c8e8:	4b2a      	ldr	r3, [pc, #168]	; (800c994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ec:	0a5b      	lsrs	r3, r3, #9
 800c8ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8f2:	ee07 3a90 	vmov	s15, r3
 800c8f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c902:	edd7 6a07 	vldr	s13, [r7, #28]
 800c906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c90a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c90e:	ee17 2a90 	vmov	r2, s15
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c916:	4b1f      	ldr	r3, [pc, #124]	; (800c994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c91a:	0c1b      	lsrs	r3, r3, #16
 800c91c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c920:	ee07 3a90 	vmov	s15, r3
 800c924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c928:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c92c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c930:	edd7 6a07 	vldr	s13, [r7, #28]
 800c934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c93c:	ee17 2a90 	vmov	r2, s15
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c944:	4b13      	ldr	r3, [pc, #76]	; (800c994 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c948:	0e1b      	lsrs	r3, r3, #24
 800c94a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c94e:	ee07 3a90 	vmov	s15, r3
 800c952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c95a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c95e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c96a:	ee17 2a90 	vmov	r2, s15
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c972:	e008      	b.n	800c986 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2200      	movs	r2, #0
 800c978:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2200      	movs	r2, #0
 800c97e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	609a      	str	r2, [r3, #8]
}
 800c986:	bf00      	nop
 800c988:	3724      	adds	r7, #36	; 0x24
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr
 800c992:	bf00      	nop
 800c994:	58024400 	.word	0x58024400
 800c998:	03d09000 	.word	0x03d09000
 800c99c:	46000000 	.word	0x46000000
 800c9a0:	4c742400 	.word	0x4c742400
 800c9a4:	4a742400 	.word	0x4a742400
 800c9a8:	4bb71b00 	.word	0x4bb71b00

0800c9ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b089      	sub	sp, #36	; 0x24
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9b4:	4ba1      	ldr	r3, [pc, #644]	; (800cc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9b8:	f003 0303 	and.w	r3, r3, #3
 800c9bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c9be:	4b9f      	ldr	r3, [pc, #636]	; (800cc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c2:	0d1b      	lsrs	r3, r3, #20
 800c9c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c9ca:	4b9c      	ldr	r3, [pc, #624]	; (800cc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ce:	0a1b      	lsrs	r3, r3, #8
 800c9d0:	f003 0301 	and.w	r3, r3, #1
 800c9d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c9d6:	4b99      	ldr	r3, [pc, #612]	; (800cc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9da:	08db      	lsrs	r3, r3, #3
 800c9dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9e0:	693a      	ldr	r2, [r7, #16]
 800c9e2:	fb02 f303 	mul.w	r3, r2, r3
 800c9e6:	ee07 3a90 	vmov	s15, r3
 800c9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	f000 8111 	beq.w	800cc1c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c9fa:	69bb      	ldr	r3, [r7, #24]
 800c9fc:	2b02      	cmp	r3, #2
 800c9fe:	f000 8083 	beq.w	800cb08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	f200 80a1 	bhi.w	800cb4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d003      	beq.n	800ca18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d056      	beq.n	800cac4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ca16:	e099      	b.n	800cb4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca18:	4b88      	ldr	r3, [pc, #544]	; (800cc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f003 0320 	and.w	r3, r3, #32
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d02d      	beq.n	800ca80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca24:	4b85      	ldr	r3, [pc, #532]	; (800cc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	08db      	lsrs	r3, r3, #3
 800ca2a:	f003 0303 	and.w	r3, r3, #3
 800ca2e:	4a84      	ldr	r2, [pc, #528]	; (800cc40 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ca30:	fa22 f303 	lsr.w	r3, r2, r3
 800ca34:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	ee07 3a90 	vmov	s15, r3
 800ca3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	ee07 3a90 	vmov	s15, r3
 800ca46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca4e:	4b7b      	ldr	r3, [pc, #492]	; (800cc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca56:	ee07 3a90 	vmov	s15, r3
 800ca5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca62:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca7e:	e087      	b.n	800cb90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	ee07 3a90 	vmov	s15, r3
 800ca86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cc48 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ca8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca92:	4b6a      	ldr	r3, [pc, #424]	; (800cc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca9a:	ee07 3a90 	vmov	s15, r3
 800ca9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caa2:	ed97 6a03 	vldr	s12, [r7, #12]
 800caa6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800caaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cabe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cac2:	e065      	b.n	800cb90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	ee07 3a90 	vmov	s15, r3
 800caca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cace:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cc4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cad6:	4b59      	ldr	r3, [pc, #356]	; (800cc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cade:	ee07 3a90 	vmov	s15, r3
 800cae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cae6:	ed97 6a03 	vldr	s12, [r7, #12]
 800caea:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800caee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cafa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cafe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb06:	e043      	b.n	800cb90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	ee07 3a90 	vmov	s15, r3
 800cb0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cb16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb1a:	4b48      	ldr	r3, [pc, #288]	; (800cc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb22:	ee07 3a90 	vmov	s15, r3
 800cb26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb4a:	e021      	b.n	800cb90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	ee07 3a90 	vmov	s15, r3
 800cb52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cc4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cb5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb5e:	4b37      	ldr	r3, [pc, #220]	; (800cc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb66:	ee07 3a90 	vmov	s15, r3
 800cb6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb72:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cb90:	4b2a      	ldr	r3, [pc, #168]	; (800cc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb94:	0a5b      	lsrs	r3, r3, #9
 800cb96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb9a:	ee07 3a90 	vmov	s15, r3
 800cb9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbb6:	ee17 2a90 	vmov	r2, s15
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cbbe:	4b1f      	ldr	r3, [pc, #124]	; (800cc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbc2:	0c1b      	lsrs	r3, r3, #16
 800cbc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbc8:	ee07 3a90 	vmov	s15, r3
 800cbcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbd8:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbe4:	ee17 2a90 	vmov	r2, s15
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cbec:	4b13      	ldr	r3, [pc, #76]	; (800cc3c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf0:	0e1b      	lsrs	r3, r3, #24
 800cbf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbf6:	ee07 3a90 	vmov	s15, r3
 800cbfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc06:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc12:	ee17 2a90 	vmov	r2, s15
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cc1a:	e008      	b.n	800cc2e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	609a      	str	r2, [r3, #8]
}
 800cc2e:	bf00      	nop
 800cc30:	3724      	adds	r7, #36	; 0x24
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr
 800cc3a:	bf00      	nop
 800cc3c:	58024400 	.word	0x58024400
 800cc40:	03d09000 	.word	0x03d09000
 800cc44:	46000000 	.word	0x46000000
 800cc48:	4c742400 	.word	0x4c742400
 800cc4c:	4a742400 	.word	0x4a742400
 800cc50:	4bb71b00 	.word	0x4bb71b00

0800cc54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cc62:	4b53      	ldr	r3, [pc, #332]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cc64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc66:	f003 0303 	and.w	r3, r3, #3
 800cc6a:	2b03      	cmp	r3, #3
 800cc6c:	d101      	bne.n	800cc72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cc6e:	2301      	movs	r3, #1
 800cc70:	e099      	b.n	800cda6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cc72:	4b4f      	ldr	r3, [pc, #316]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4a4e      	ldr	r2, [pc, #312]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cc78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc7e:	f7f7 fa9d 	bl	80041bc <HAL_GetTick>
 800cc82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cc84:	e008      	b.n	800cc98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cc86:	f7f7 fa99 	bl	80041bc <HAL_GetTick>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	1ad3      	subs	r3, r2, r3
 800cc90:	2b02      	cmp	r3, #2
 800cc92:	d901      	bls.n	800cc98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cc94:	2303      	movs	r3, #3
 800cc96:	e086      	b.n	800cda6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cc98:	4b45      	ldr	r3, [pc, #276]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d1f0      	bne.n	800cc86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cca4:	4b42      	ldr	r3, [pc, #264]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	031b      	lsls	r3, r3, #12
 800ccb2:	493f      	ldr	r1, [pc, #252]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	628b      	str	r3, [r1, #40]	; 0x28
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	3b01      	subs	r3, #1
 800ccbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	025b      	lsls	r3, r3, #9
 800ccca:	b29b      	uxth	r3, r3
 800cccc:	431a      	orrs	r2, r3
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	3b01      	subs	r3, #1
 800ccd4:	041b      	lsls	r3, r3, #16
 800ccd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ccda:	431a      	orrs	r2, r3
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	3b01      	subs	r3, #1
 800cce2:	061b      	lsls	r3, r3, #24
 800cce4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cce8:	4931      	ldr	r1, [pc, #196]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800ccea:	4313      	orrs	r3, r2
 800ccec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ccee:	4b30      	ldr	r3, [pc, #192]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800ccf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	695b      	ldr	r3, [r3, #20]
 800ccfa:	492d      	ldr	r1, [pc, #180]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cd00:	4b2b      	ldr	r3, [pc, #172]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd04:	f023 0220 	bic.w	r2, r3, #32
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	699b      	ldr	r3, [r3, #24]
 800cd0c:	4928      	ldr	r1, [pc, #160]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cd12:	4b27      	ldr	r3, [pc, #156]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cd14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd16:	4a26      	ldr	r2, [pc, #152]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cd18:	f023 0310 	bic.w	r3, r3, #16
 800cd1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cd1e:	4b24      	ldr	r3, [pc, #144]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cd20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd22:	4b24      	ldr	r3, [pc, #144]	; (800cdb4 <RCCEx_PLL2_Config+0x160>)
 800cd24:	4013      	ands	r3, r2
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	69d2      	ldr	r2, [r2, #28]
 800cd2a:	00d2      	lsls	r2, r2, #3
 800cd2c:	4920      	ldr	r1, [pc, #128]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cd32:	4b1f      	ldr	r3, [pc, #124]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cd34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd36:	4a1e      	ldr	r2, [pc, #120]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cd38:	f043 0310 	orr.w	r3, r3, #16
 800cd3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d106      	bne.n	800cd52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cd44:	4b1a      	ldr	r3, [pc, #104]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd48:	4a19      	ldr	r2, [pc, #100]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cd4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd50:	e00f      	b.n	800cd72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d106      	bne.n	800cd66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cd58:	4b15      	ldr	r3, [pc, #84]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cd5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5c:	4a14      	ldr	r2, [pc, #80]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cd5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd62:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd64:	e005      	b.n	800cd72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cd66:	4b12      	ldr	r3, [pc, #72]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6a:	4a11      	ldr	r2, [pc, #68]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cd6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cd70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cd72:	4b0f      	ldr	r3, [pc, #60]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a0e      	ldr	r2, [pc, #56]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cd78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd7e:	f7f7 fa1d 	bl	80041bc <HAL_GetTick>
 800cd82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cd84:	e008      	b.n	800cd98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd86:	f7f7 fa19 	bl	80041bc <HAL_GetTick>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	1ad3      	subs	r3, r2, r3
 800cd90:	2b02      	cmp	r3, #2
 800cd92:	d901      	bls.n	800cd98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cd94:	2303      	movs	r3, #3
 800cd96:	e006      	b.n	800cda6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cd98:	4b05      	ldr	r3, [pc, #20]	; (800cdb0 <RCCEx_PLL2_Config+0x15c>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d0f0      	beq.n	800cd86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cda4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	58024400 	.word	0x58024400
 800cdb4:	ffff0007 	.word	0xffff0007

0800cdb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cdc6:	4b53      	ldr	r3, [pc, #332]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800cdc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdca:	f003 0303 	and.w	r3, r3, #3
 800cdce:	2b03      	cmp	r3, #3
 800cdd0:	d101      	bne.n	800cdd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	e099      	b.n	800cf0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cdd6:	4b4f      	ldr	r3, [pc, #316]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4a4e      	ldr	r2, [pc, #312]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800cddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cde0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cde2:	f7f7 f9eb 	bl	80041bc <HAL_GetTick>
 800cde6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cde8:	e008      	b.n	800cdfc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cdea:	f7f7 f9e7 	bl	80041bc <HAL_GetTick>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	1ad3      	subs	r3, r2, r3
 800cdf4:	2b02      	cmp	r3, #2
 800cdf6:	d901      	bls.n	800cdfc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cdf8:	2303      	movs	r3, #3
 800cdfa:	e086      	b.n	800cf0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cdfc:	4b45      	ldr	r3, [pc, #276]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d1f0      	bne.n	800cdea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ce08:	4b42      	ldr	r3, [pc, #264]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800ce0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	051b      	lsls	r3, r3, #20
 800ce16:	493f      	ldr	r1, [pc, #252]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	628b      	str	r3, [r1, #40]	; 0x28
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	3b01      	subs	r3, #1
 800ce22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	689b      	ldr	r3, [r3, #8]
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	025b      	lsls	r3, r3, #9
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	431a      	orrs	r2, r3
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	3b01      	subs	r3, #1
 800ce38:	041b      	lsls	r3, r3, #16
 800ce3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ce3e:	431a      	orrs	r2, r3
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	691b      	ldr	r3, [r3, #16]
 800ce44:	3b01      	subs	r3, #1
 800ce46:	061b      	lsls	r3, r3, #24
 800ce48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ce4c:	4931      	ldr	r1, [pc, #196]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ce52:	4b30      	ldr	r3, [pc, #192]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800ce54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	695b      	ldr	r3, [r3, #20]
 800ce5e:	492d      	ldr	r1, [pc, #180]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800ce60:	4313      	orrs	r3, r2
 800ce62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ce64:	4b2b      	ldr	r3, [pc, #172]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800ce66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	699b      	ldr	r3, [r3, #24]
 800ce70:	4928      	ldr	r1, [pc, #160]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800ce72:	4313      	orrs	r3, r2
 800ce74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ce76:	4b27      	ldr	r3, [pc, #156]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800ce78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7a:	4a26      	ldr	r2, [pc, #152]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800ce7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ce82:	4b24      	ldr	r3, [pc, #144]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800ce84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce86:	4b24      	ldr	r3, [pc, #144]	; (800cf18 <RCCEx_PLL3_Config+0x160>)
 800ce88:	4013      	ands	r3, r2
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	69d2      	ldr	r2, [r2, #28]
 800ce8e:	00d2      	lsls	r2, r2, #3
 800ce90:	4920      	ldr	r1, [pc, #128]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800ce92:	4313      	orrs	r3, r2
 800ce94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ce96:	4b1f      	ldr	r3, [pc, #124]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800ce98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9a:	4a1e      	ldr	r2, [pc, #120]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800ce9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cea0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d106      	bne.n	800ceb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cea8:	4b1a      	ldr	r3, [pc, #104]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800ceaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceac:	4a19      	ldr	r2, [pc, #100]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800ceae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ceb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ceb4:	e00f      	b.n	800ced6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d106      	bne.n	800ceca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cebc:	4b15      	ldr	r3, [pc, #84]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800cebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec0:	4a14      	ldr	r2, [pc, #80]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800cec2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cec6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cec8:	e005      	b.n	800ced6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ceca:	4b12      	ldr	r3, [pc, #72]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800cecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cece:	4a11      	ldr	r2, [pc, #68]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800ced0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ced4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ced6:	4b0f      	ldr	r3, [pc, #60]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4a0e      	ldr	r2, [pc, #56]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800cedc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cee2:	f7f7 f96b 	bl	80041bc <HAL_GetTick>
 800cee6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cee8:	e008      	b.n	800cefc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ceea:	f7f7 f967 	bl	80041bc <HAL_GetTick>
 800ceee:	4602      	mov	r2, r0
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	1ad3      	subs	r3, r2, r3
 800cef4:	2b02      	cmp	r3, #2
 800cef6:	d901      	bls.n	800cefc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cef8:	2303      	movs	r3, #3
 800cefa:	e006      	b.n	800cf0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cefc:	4b05      	ldr	r3, [pc, #20]	; (800cf14 <RCCEx_PLL3_Config+0x15c>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d0f0      	beq.n	800ceea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cf08:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3710      	adds	r7, #16
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	58024400 	.word	0x58024400
 800cf18:	ffff0007 	.word	0xffff0007

0800cf1c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cf24:	2301      	movs	r3, #1
 800cf26:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d074      	beq.n	800d018 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d106      	bne.n	800cf48 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f7f6 f834 	bl	8002fb0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2202      	movs	r2, #2
 800cf4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	f003 0310 	and.w	r3, r3, #16
 800cf5a:	2b10      	cmp	r3, #16
 800cf5c:	d053      	beq.n	800d006 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	22ca      	movs	r2, #202	; 0xca
 800cf64:	625a      	str	r2, [r3, #36]	; 0x24
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	2253      	movs	r2, #83	; 0x53
 800cf6c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 f87e 	bl	800d070 <RTC_EnterInitMode>
 800cf74:	4603      	mov	r3, r0
 800cf76:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800cf78:	7bfb      	ldrb	r3, [r7, #15]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d124      	bne.n	800cfc8 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	6999      	ldr	r1, [r3, #24]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681a      	ldr	r2, [r3, #0]
 800cf88:	4b26      	ldr	r3, [pc, #152]	; (800d024 <HAL_RTC_Init+0x108>)
 800cf8a:	400b      	ands	r3, r1
 800cf8c:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	6999      	ldr	r1, [r3, #24]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	685a      	ldr	r2, [r3, #4]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	691b      	ldr	r3, [r3, #16]
 800cf9c:	431a      	orrs	r2, r3
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	699b      	ldr	r3, [r3, #24]
 800cfa2:	431a      	orrs	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	430a      	orrs	r2, r1
 800cfaa:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	689b      	ldr	r3, [r3, #8]
 800cfb0:	0419      	lsls	r1, r3, #16
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	68da      	ldr	r2, [r3, #12]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	430a      	orrs	r2, r1
 800cfbc:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 f88c 	bl	800d0dc <RTC_ExitInitMode>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800cfc8:	7bfb      	ldrb	r3, [r7, #15]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d116      	bne.n	800cffc <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	699a      	ldr	r2, [r3, #24]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800cfdc:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	6999      	ldr	r1, [r3, #24]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6a1a      	ldr	r2, [r3, #32]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	69db      	ldr	r3, [r3, #28]
 800cfec:	431a      	orrs	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	695b      	ldr	r3, [r3, #20]
 800cff2:	431a      	orrs	r2, r3
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	430a      	orrs	r2, r1
 800cffa:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	22ff      	movs	r2, #255	; 0xff
 800d002:	625a      	str	r2, [r3, #36]	; 0x24
 800d004:	e001      	b.n	800d00a <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d006:	2300      	movs	r3, #0
 800d008:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d00a:	7bfb      	ldrb	r3, [r7, #15]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d103      	bne.n	800d018 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2201      	movs	r2, #1
 800d014:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800d018:	7bfb      	ldrb	r3, [r7, #15]
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	fb8fffbf 	.word	0xfb8fffbf

0800d028 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4a0d      	ldr	r2, [pc, #52]	; (800d06c <HAL_RTC_WaitForSynchro+0x44>)
 800d036:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d038:	f7f7 f8c0 	bl	80041bc <HAL_GetTick>
 800d03c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d03e:	e009      	b.n	800d054 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d040:	f7f7 f8bc 	bl	80041bc <HAL_GetTick>
 800d044:	4602      	mov	r2, r0
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	1ad3      	subs	r3, r2, r3
 800d04a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d04e:	d901      	bls.n	800d054 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d050:	2303      	movs	r3, #3
 800d052:	e007      	b.n	800d064 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	68db      	ldr	r3, [r3, #12]
 800d05a:	f003 0320 	and.w	r3, r3, #32
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d0ee      	beq.n	800d040 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d062:	2300      	movs	r3, #0
}
 800d064:	4618      	mov	r0, r3
 800d066:	3710      	adds	r7, #16
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	0001005f 	.word	0x0001005f

0800d070 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d078:	2300      	movs	r3, #0
 800d07a:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	68db      	ldr	r3, [r3, #12]
 800d082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d086:	2b00      	cmp	r3, #0
 800d088:	d123      	bne.n	800d0d2 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	68da      	ldr	r2, [r3, #12]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d098:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d09a:	f7f7 f88f 	bl	80041bc <HAL_GetTick>
 800d09e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d0a0:	e00d      	b.n	800d0be <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d0a2:	f7f7 f88b 	bl	80041bc <HAL_GetTick>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	1ad3      	subs	r3, r2, r3
 800d0ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d0b0:	d905      	bls.n	800d0be <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800d0b2:	2303      	movs	r3, #3
 800d0b4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2203      	movs	r2, #3
 800d0ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d102      	bne.n	800d0d2 <RTC_EnterInitMode+0x62>
 800d0cc:	7bfb      	ldrb	r3, [r7, #15]
 800d0ce:	2b03      	cmp	r3, #3
 800d0d0:	d1e7      	bne.n	800d0a2 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800d0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3710      	adds	r7, #16
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d0e8:	4b1a      	ldr	r3, [pc, #104]	; (800d154 <RTC_ExitInitMode+0x78>)
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	4a19      	ldr	r2, [pc, #100]	; (800d154 <RTC_ExitInitMode+0x78>)
 800d0ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0f2:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d0f4:	4b17      	ldr	r3, [pc, #92]	; (800d154 <RTC_ExitInitMode+0x78>)
 800d0f6:	699b      	ldr	r3, [r3, #24]
 800d0f8:	f003 0320 	and.w	r3, r3, #32
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d10c      	bne.n	800d11a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f7ff ff91 	bl	800d028 <HAL_RTC_WaitForSynchro>
 800d106:	4603      	mov	r3, r0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d01e      	beq.n	800d14a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2203      	movs	r2, #3
 800d110:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d114:	2303      	movs	r3, #3
 800d116:	73fb      	strb	r3, [r7, #15]
 800d118:	e017      	b.n	800d14a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d11a:	4b0e      	ldr	r3, [pc, #56]	; (800d154 <RTC_ExitInitMode+0x78>)
 800d11c:	699b      	ldr	r3, [r3, #24]
 800d11e:	4a0d      	ldr	r2, [pc, #52]	; (800d154 <RTC_ExitInitMode+0x78>)
 800d120:	f023 0320 	bic.w	r3, r3, #32
 800d124:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f7ff ff7e 	bl	800d028 <HAL_RTC_WaitForSynchro>
 800d12c:	4603      	mov	r3, r0
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d005      	beq.n	800d13e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2203      	movs	r2, #3
 800d136:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d13a:	2303      	movs	r3, #3
 800d13c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d13e:	4b05      	ldr	r3, [pc, #20]	; (800d154 <RTC_ExitInitMode+0x78>)
 800d140:	699b      	ldr	r3, [r3, #24]
 800d142:	4a04      	ldr	r2, [pc, #16]	; (800d154 <RTC_ExitInitMode+0x78>)
 800d144:	f043 0320 	orr.w	r3, r3, #32
 800d148:	6193      	str	r3, [r2, #24]
  }

  return status;
 800d14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	58004000 	.word	0x58004000

0800d158 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d101      	bne.n	800d16a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d166:	2301      	movs	r3, #1
 800d168:	e042      	b.n	800d1f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d170:	2b00      	cmp	r3, #0
 800d172:	d106      	bne.n	800d182 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7f6 fefb 	bl	8003f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2224      	movs	r2, #36	; 0x24
 800d186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f022 0201 	bic.w	r2, r2, #1
 800d198:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 fd5c 	bl	800dc58 <UART_SetConfig>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d101      	bne.n	800d1aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e022      	b.n	800d1f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d002      	beq.n	800d1b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f001 fbbc 	bl	800e930 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	685a      	ldr	r2, [r3, #4]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d1c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	689a      	ldr	r2, [r3, #8]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d1d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f042 0201 	orr.w	r2, r2, #1
 800d1e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f001 fc43 	bl	800ea74 <UART_CheckIdleState>
 800d1ee:	4603      	mov	r3, r0
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3708      	adds	r7, #8
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b08a      	sub	sp, #40	; 0x28
 800d1fc:	af02      	add	r7, sp, #8
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	603b      	str	r3, [r7, #0]
 800d204:	4613      	mov	r3, r2
 800d206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d20e:	2b20      	cmp	r3, #32
 800d210:	d17b      	bne.n	800d30a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d002      	beq.n	800d21e <HAL_UART_Transmit+0x26>
 800d218:	88fb      	ldrh	r3, [r7, #6]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d101      	bne.n	800d222 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d21e:	2301      	movs	r3, #1
 800d220:	e074      	b.n	800d30c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2200      	movs	r2, #0
 800d226:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2221      	movs	r2, #33	; 0x21
 800d22e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d232:	f7f6 ffc3 	bl	80041bc <HAL_GetTick>
 800d236:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	88fa      	ldrh	r2, [r7, #6]
 800d23c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	88fa      	ldrh	r2, [r7, #6]
 800d244:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	689b      	ldr	r3, [r3, #8]
 800d24c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d250:	d108      	bne.n	800d264 <HAL_UART_Transmit+0x6c>
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	691b      	ldr	r3, [r3, #16]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d104      	bne.n	800d264 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d25a:	2300      	movs	r3, #0
 800d25c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	61bb      	str	r3, [r7, #24]
 800d262:	e003      	b.n	800d26c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d268:	2300      	movs	r3, #0
 800d26a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d26c:	e030      	b.n	800d2d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	9300      	str	r3, [sp, #0]
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	2200      	movs	r2, #0
 800d276:	2180      	movs	r1, #128	; 0x80
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	f001 fca5 	bl	800ebc8 <UART_WaitOnFlagUntilTimeout>
 800d27e:	4603      	mov	r3, r0
 800d280:	2b00      	cmp	r3, #0
 800d282:	d005      	beq.n	800d290 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2220      	movs	r2, #32
 800d288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d28c:	2303      	movs	r3, #3
 800d28e:	e03d      	b.n	800d30c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d10b      	bne.n	800d2ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	881b      	ldrh	r3, [r3, #0]
 800d29a:	461a      	mov	r2, r3
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d2a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	3302      	adds	r3, #2
 800d2aa:	61bb      	str	r3, [r7, #24]
 800d2ac:	e007      	b.n	800d2be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	781a      	ldrb	r2, [r3, #0]
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	3b01      	subs	r3, #1
 800d2c8:	b29a      	uxth	r2, r3
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d1c8      	bne.n	800d26e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	9300      	str	r3, [sp, #0]
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	2140      	movs	r1, #64	; 0x40
 800d2e6:	68f8      	ldr	r0, [r7, #12]
 800d2e8:	f001 fc6e 	bl	800ebc8 <UART_WaitOnFlagUntilTimeout>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d005      	beq.n	800d2fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2220      	movs	r2, #32
 800d2f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d2fa:	2303      	movs	r3, #3
 800d2fc:	e006      	b.n	800d30c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2220      	movs	r2, #32
 800d302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d306:	2300      	movs	r3, #0
 800d308:	e000      	b.n	800d30c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d30a:	2302      	movs	r3, #2
  }
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3720      	adds	r7, #32
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b08a      	sub	sp, #40	; 0x28
 800d318:	af02      	add	r7, sp, #8
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	603b      	str	r3, [r7, #0]
 800d320:	4613      	mov	r3, r2
 800d322:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d32a:	2b20      	cmp	r3, #32
 800d32c:	f040 80b5 	bne.w	800d49a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d002      	beq.n	800d33c <HAL_UART_Receive+0x28>
 800d336:	88fb      	ldrh	r3, [r7, #6]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d101      	bne.n	800d340 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d33c:	2301      	movs	r3, #1
 800d33e:	e0ad      	b.n	800d49c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2200      	movs	r2, #0
 800d344:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2222      	movs	r2, #34	; 0x22
 800d34c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2200      	movs	r2, #0
 800d354:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d356:	f7f6 ff31 	bl	80041bc <HAL_GetTick>
 800d35a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	88fa      	ldrh	r2, [r7, #6]
 800d360:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	88fa      	ldrh	r2, [r7, #6]
 800d368:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d374:	d10e      	bne.n	800d394 <HAL_UART_Receive+0x80>
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	691b      	ldr	r3, [r3, #16]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d105      	bne.n	800d38a <HAL_UART_Receive+0x76>
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d384:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d388:	e02d      	b.n	800d3e6 <HAL_UART_Receive+0xd2>
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	22ff      	movs	r2, #255	; 0xff
 800d38e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d392:	e028      	b.n	800d3e6 <HAL_UART_Receive+0xd2>
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d10d      	bne.n	800d3b8 <HAL_UART_Receive+0xa4>
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	691b      	ldr	r3, [r3, #16]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d104      	bne.n	800d3ae <HAL_UART_Receive+0x9a>
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	22ff      	movs	r2, #255	; 0xff
 800d3a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3ac:	e01b      	b.n	800d3e6 <HAL_UART_Receive+0xd2>
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	227f      	movs	r2, #127	; 0x7f
 800d3b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3b6:	e016      	b.n	800d3e6 <HAL_UART_Receive+0xd2>
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	689b      	ldr	r3, [r3, #8]
 800d3bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d3c0:	d10d      	bne.n	800d3de <HAL_UART_Receive+0xca>
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	691b      	ldr	r3, [r3, #16]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d104      	bne.n	800d3d4 <HAL_UART_Receive+0xc0>
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	227f      	movs	r2, #127	; 0x7f
 800d3ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3d2:	e008      	b.n	800d3e6 <HAL_UART_Receive+0xd2>
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	223f      	movs	r2, #63	; 0x3f
 800d3d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d3dc:	e003      	b.n	800d3e6 <HAL_UART_Receive+0xd2>
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d3ec:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3f6:	d108      	bne.n	800d40a <HAL_UART_Receive+0xf6>
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	691b      	ldr	r3, [r3, #16]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d104      	bne.n	800d40a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800d400:	2300      	movs	r3, #0
 800d402:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	61bb      	str	r3, [r7, #24]
 800d408:	e003      	b.n	800d412 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d40e:	2300      	movs	r3, #0
 800d410:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d412:	e036      	b.n	800d482 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	9300      	str	r3, [sp, #0]
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	2200      	movs	r2, #0
 800d41c:	2120      	movs	r1, #32
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f001 fbd2 	bl	800ebc8 <UART_WaitOnFlagUntilTimeout>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	d005      	beq.n	800d436 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2220      	movs	r2, #32
 800d42e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800d432:	2303      	movs	r3, #3
 800d434:	e032      	b.n	800d49c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d10c      	bne.n	800d456 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d442:	b29a      	uxth	r2, r3
 800d444:	8a7b      	ldrh	r3, [r7, #18]
 800d446:	4013      	ands	r3, r2
 800d448:	b29a      	uxth	r2, r3
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d44e:	69bb      	ldr	r3, [r7, #24]
 800d450:	3302      	adds	r3, #2
 800d452:	61bb      	str	r3, [r7, #24]
 800d454:	e00c      	b.n	800d470 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d45c:	b2da      	uxtb	r2, r3
 800d45e:	8a7b      	ldrh	r3, [r7, #18]
 800d460:	b2db      	uxtb	r3, r3
 800d462:	4013      	ands	r3, r2
 800d464:	b2da      	uxtb	r2, r3
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d46a:	69fb      	ldr	r3, [r7, #28]
 800d46c:	3301      	adds	r3, #1
 800d46e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d476:	b29b      	uxth	r3, r3
 800d478:	3b01      	subs	r3, #1
 800d47a:	b29a      	uxth	r2, r3
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d488:	b29b      	uxth	r3, r3
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d1c2      	bne.n	800d414 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2220      	movs	r2, #32
 800d492:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800d496:	2300      	movs	r3, #0
 800d498:	e000      	b.n	800d49c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800d49a:	2302      	movs	r3, #2
  }
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3720      	adds	r7, #32
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b0ba      	sub	sp, #232	; 0xe8
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	69db      	ldr	r3, [r3, #28]
 800d4b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	689b      	ldr	r3, [r3, #8]
 800d4c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d4ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d4ce:	f640 030f 	movw	r3, #2063	; 0x80f
 800d4d2:	4013      	ands	r3, r2
 800d4d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d4d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d11b      	bne.n	800d518 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d4e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4e4:	f003 0320 	and.w	r3, r3, #32
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d015      	beq.n	800d518 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d4ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4f0:	f003 0320 	and.w	r3, r3, #32
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d105      	bne.n	800d504 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d4f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d500:	2b00      	cmp	r3, #0
 800d502:	d009      	beq.n	800d518 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f000 8377 	beq.w	800dbfc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	4798      	blx	r3
      }
      return;
 800d516:	e371      	b.n	800dbfc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d518:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	f000 8123 	beq.w	800d768 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d522:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d526:	4b8d      	ldr	r3, [pc, #564]	; (800d75c <HAL_UART_IRQHandler+0x2b8>)
 800d528:	4013      	ands	r3, r2
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d106      	bne.n	800d53c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d52e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d532:	4b8b      	ldr	r3, [pc, #556]	; (800d760 <HAL_UART_IRQHandler+0x2bc>)
 800d534:	4013      	ands	r3, r2
 800d536:	2b00      	cmp	r3, #0
 800d538:	f000 8116 	beq.w	800d768 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d53c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d540:	f003 0301 	and.w	r3, r3, #1
 800d544:	2b00      	cmp	r3, #0
 800d546:	d011      	beq.n	800d56c <HAL_UART_IRQHandler+0xc8>
 800d548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d54c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d550:	2b00      	cmp	r3, #0
 800d552:	d00b      	beq.n	800d56c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2201      	movs	r2, #1
 800d55a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d562:	f043 0201 	orr.w	r2, r3, #1
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d56c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d570:	f003 0302 	and.w	r3, r3, #2
 800d574:	2b00      	cmp	r3, #0
 800d576:	d011      	beq.n	800d59c <HAL_UART_IRQHandler+0xf8>
 800d578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d57c:	f003 0301 	and.w	r3, r3, #1
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00b      	beq.n	800d59c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2202      	movs	r2, #2
 800d58a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d592:	f043 0204 	orr.w	r2, r3, #4
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d59c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5a0:	f003 0304 	and.w	r3, r3, #4
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d011      	beq.n	800d5cc <HAL_UART_IRQHandler+0x128>
 800d5a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d5ac:	f003 0301 	and.w	r3, r3, #1
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00b      	beq.n	800d5cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2204      	movs	r2, #4
 800d5ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5c2:	f043 0202 	orr.w	r2, r3, #2
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d5cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5d0:	f003 0308 	and.w	r3, r3, #8
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d017      	beq.n	800d608 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d5d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5dc:	f003 0320 	and.w	r3, r3, #32
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d105      	bne.n	800d5f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d5e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d5e8:	4b5c      	ldr	r3, [pc, #368]	; (800d75c <HAL_UART_IRQHandler+0x2b8>)
 800d5ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d00b      	beq.n	800d608 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	2208      	movs	r2, #8
 800d5f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d5fe:	f043 0208 	orr.w	r2, r3, #8
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d60c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d610:	2b00      	cmp	r3, #0
 800d612:	d012      	beq.n	800d63a <HAL_UART_IRQHandler+0x196>
 800d614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d618:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d00c      	beq.n	800d63a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d628:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d630:	f043 0220 	orr.w	r2, r3, #32
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d640:	2b00      	cmp	r3, #0
 800d642:	f000 82dd 	beq.w	800dc00 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d64a:	f003 0320 	and.w	r3, r3, #32
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d013      	beq.n	800d67a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d656:	f003 0320 	and.w	r3, r3, #32
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d105      	bne.n	800d66a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d65e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d666:	2b00      	cmp	r3, #0
 800d668:	d007      	beq.n	800d67a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d003      	beq.n	800d67a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d680:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	689b      	ldr	r3, [r3, #8]
 800d68a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d68e:	2b40      	cmp	r3, #64	; 0x40
 800d690:	d005      	beq.n	800d69e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d696:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d054      	beq.n	800d748 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f001 fafa 	bl	800ec98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6ae:	2b40      	cmp	r3, #64	; 0x40
 800d6b0:	d146      	bne.n	800d740 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	3308      	adds	r3, #8
 800d6b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d6c0:	e853 3f00 	ldrex	r3, [r3]
 800d6c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d6c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d6cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	3308      	adds	r3, #8
 800d6da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d6de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d6e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d6ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d6ee:	e841 2300 	strex	r3, r2, [r1]
 800d6f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d6f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d1d9      	bne.n	800d6b2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d704:	2b00      	cmp	r3, #0
 800d706:	d017      	beq.n	800d738 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d70e:	4a15      	ldr	r2, [pc, #84]	; (800d764 <HAL_UART_IRQHandler+0x2c0>)
 800d710:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d718:	4618      	mov	r0, r3
 800d71a:	f7f8 fa75 	bl	8005c08 <HAL_DMA_Abort_IT>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d019      	beq.n	800d758 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d732:	4610      	mov	r0, r2
 800d734:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d736:	e00f      	b.n	800d758 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 fa77 	bl	800dc2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d73e:	e00b      	b.n	800d758 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 fa73 	bl	800dc2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d746:	e007      	b.n	800d758 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f000 fa6f 	bl	800dc2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2200      	movs	r2, #0
 800d752:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d756:	e253      	b.n	800dc00 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d758:	bf00      	nop
    return;
 800d75a:	e251      	b.n	800dc00 <HAL_UART_IRQHandler+0x75c>
 800d75c:	10000001 	.word	0x10000001
 800d760:	04000120 	.word	0x04000120
 800d764:	0800ed65 	.word	0x0800ed65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	f040 81e7 	bne.w	800db40 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d776:	f003 0310 	and.w	r3, r3, #16
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f000 81e0 	beq.w	800db40 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d784:	f003 0310 	and.w	r3, r3, #16
 800d788:	2b00      	cmp	r3, #0
 800d78a:	f000 81d9 	beq.w	800db40 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2210      	movs	r2, #16
 800d794:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	689b      	ldr	r3, [r3, #8]
 800d79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7a0:	2b40      	cmp	r3, #64	; 0x40
 800d7a2:	f040 8151 	bne.w	800da48 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4a96      	ldr	r2, [pc, #600]	; (800da08 <HAL_UART_IRQHandler+0x564>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d068      	beq.n	800d886 <HAL_UART_IRQHandler+0x3e2>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a93      	ldr	r2, [pc, #588]	; (800da0c <HAL_UART_IRQHandler+0x568>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d061      	beq.n	800d886 <HAL_UART_IRQHandler+0x3e2>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4a91      	ldr	r2, [pc, #580]	; (800da10 <HAL_UART_IRQHandler+0x56c>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d05a      	beq.n	800d886 <HAL_UART_IRQHandler+0x3e2>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4a8e      	ldr	r2, [pc, #568]	; (800da14 <HAL_UART_IRQHandler+0x570>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d053      	beq.n	800d886 <HAL_UART_IRQHandler+0x3e2>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	4a8c      	ldr	r2, [pc, #560]	; (800da18 <HAL_UART_IRQHandler+0x574>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d04c      	beq.n	800d886 <HAL_UART_IRQHandler+0x3e2>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	4a89      	ldr	r2, [pc, #548]	; (800da1c <HAL_UART_IRQHandler+0x578>)
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d045      	beq.n	800d886 <HAL_UART_IRQHandler+0x3e2>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4a87      	ldr	r2, [pc, #540]	; (800da20 <HAL_UART_IRQHandler+0x57c>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d03e      	beq.n	800d886 <HAL_UART_IRQHandler+0x3e2>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a84      	ldr	r2, [pc, #528]	; (800da24 <HAL_UART_IRQHandler+0x580>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d037      	beq.n	800d886 <HAL_UART_IRQHandler+0x3e2>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	4a82      	ldr	r2, [pc, #520]	; (800da28 <HAL_UART_IRQHandler+0x584>)
 800d820:	4293      	cmp	r3, r2
 800d822:	d030      	beq.n	800d886 <HAL_UART_IRQHandler+0x3e2>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4a7f      	ldr	r2, [pc, #508]	; (800da2c <HAL_UART_IRQHandler+0x588>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d029      	beq.n	800d886 <HAL_UART_IRQHandler+0x3e2>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4a7d      	ldr	r2, [pc, #500]	; (800da30 <HAL_UART_IRQHandler+0x58c>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d022      	beq.n	800d886 <HAL_UART_IRQHandler+0x3e2>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	4a7a      	ldr	r2, [pc, #488]	; (800da34 <HAL_UART_IRQHandler+0x590>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d01b      	beq.n	800d886 <HAL_UART_IRQHandler+0x3e2>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4a78      	ldr	r2, [pc, #480]	; (800da38 <HAL_UART_IRQHandler+0x594>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d014      	beq.n	800d886 <HAL_UART_IRQHandler+0x3e2>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a75      	ldr	r2, [pc, #468]	; (800da3c <HAL_UART_IRQHandler+0x598>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d00d      	beq.n	800d886 <HAL_UART_IRQHandler+0x3e2>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4a73      	ldr	r2, [pc, #460]	; (800da40 <HAL_UART_IRQHandler+0x59c>)
 800d874:	4293      	cmp	r3, r2
 800d876:	d006      	beq.n	800d886 <HAL_UART_IRQHandler+0x3e2>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a70      	ldr	r2, [pc, #448]	; (800da44 <HAL_UART_IRQHandler+0x5a0>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d106      	bne.n	800d894 <HAL_UART_IRQHandler+0x3f0>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	685b      	ldr	r3, [r3, #4]
 800d890:	b29b      	uxth	r3, r3
 800d892:	e005      	b.n	800d8a0 <HAL_UART_IRQHandler+0x3fc>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d8a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	f000 81ab 	beq.w	800dc04 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d8b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	f080 81a3 	bcs.w	800dc04 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d8c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8ce:	69db      	ldr	r3, [r3, #28]
 800d8d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8d4:	f000 8087 	beq.w	800d9e6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d8e4:	e853 3f00 	ldrex	r3, [r3]
 800d8e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d8ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d8f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d902:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d906:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d90a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d90e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d912:	e841 2300 	strex	r3, r2, [r1]
 800d916:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d91a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d1da      	bne.n	800d8d8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	3308      	adds	r3, #8
 800d928:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d92a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d92c:	e853 3f00 	ldrex	r3, [r3]
 800d930:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d934:	f023 0301 	bic.w	r3, r3, #1
 800d938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	3308      	adds	r3, #8
 800d942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d946:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d94a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d94c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d94e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d952:	e841 2300 	strex	r3, r2, [r1]
 800d956:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d1e1      	bne.n	800d922 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	3308      	adds	r3, #8
 800d964:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d968:	e853 3f00 	ldrex	r3, [r3]
 800d96c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d96e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	3308      	adds	r3, #8
 800d97e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d982:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d984:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d986:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d988:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d98a:	e841 2300 	strex	r3, r2, [r1]
 800d98e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d992:	2b00      	cmp	r3, #0
 800d994:	d1e3      	bne.n	800d95e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2220      	movs	r2, #32
 800d99a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9ac:	e853 3f00 	ldrex	r3, [r3]
 800d9b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d9b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9b4:	f023 0310 	bic.w	r3, r3, #16
 800d9b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d9c6:	65bb      	str	r3, [r7, #88]	; 0x58
 800d9c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d9cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d9ce:	e841 2300 	strex	r3, r2, [r1]
 800d9d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d9d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d1e4      	bne.n	800d9a4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7f7 fdf3 	bl	80055cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2202      	movs	r2, #2
 800d9ea:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	1ad3      	subs	r3, r2, r3
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	4619      	mov	r1, r3
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 f91d 	bl	800dc40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800da06:	e0fd      	b.n	800dc04 <HAL_UART_IRQHandler+0x760>
 800da08:	40020010 	.word	0x40020010
 800da0c:	40020028 	.word	0x40020028
 800da10:	40020040 	.word	0x40020040
 800da14:	40020058 	.word	0x40020058
 800da18:	40020070 	.word	0x40020070
 800da1c:	40020088 	.word	0x40020088
 800da20:	400200a0 	.word	0x400200a0
 800da24:	400200b8 	.word	0x400200b8
 800da28:	40020410 	.word	0x40020410
 800da2c:	40020428 	.word	0x40020428
 800da30:	40020440 	.word	0x40020440
 800da34:	40020458 	.word	0x40020458
 800da38:	40020470 	.word	0x40020470
 800da3c:	40020488 	.word	0x40020488
 800da40:	400204a0 	.word	0x400204a0
 800da44:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da54:	b29b      	uxth	r3, r3
 800da56:	1ad3      	subs	r3, r2, r3
 800da58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da62:	b29b      	uxth	r3, r3
 800da64:	2b00      	cmp	r3, #0
 800da66:	f000 80cf 	beq.w	800dc08 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800da6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800da6e:	2b00      	cmp	r3, #0
 800da70:	f000 80ca 	beq.w	800dc08 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7c:	e853 3f00 	ldrex	r3, [r3]
 800da80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800da82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800da88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	461a      	mov	r2, r3
 800da92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800da96:	647b      	str	r3, [r7, #68]	; 0x44
 800da98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800da9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da9e:	e841 2300 	strex	r3, r2, [r1]
 800daa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800daa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d1e4      	bne.n	800da74 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	3308      	adds	r3, #8
 800dab0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab4:	e853 3f00 	ldrex	r3, [r3]
 800dab8:	623b      	str	r3, [r7, #32]
   return(result);
 800daba:	6a3a      	ldr	r2, [r7, #32]
 800dabc:	4b55      	ldr	r3, [pc, #340]	; (800dc14 <HAL_UART_IRQHandler+0x770>)
 800dabe:	4013      	ands	r3, r2
 800dac0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	3308      	adds	r3, #8
 800daca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800dace:	633a      	str	r2, [r7, #48]	; 0x30
 800dad0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dad2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dad6:	e841 2300 	strex	r3, r2, [r1]
 800dada:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d1e3      	bne.n	800daaa <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2220      	movs	r2, #32
 800dae6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2200      	movs	r2, #0
 800daee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	e853 3f00 	ldrex	r3, [r3]
 800db02:	60fb      	str	r3, [r7, #12]
   return(result);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	f023 0310 	bic.w	r3, r3, #16
 800db0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	461a      	mov	r2, r3
 800db14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800db18:	61fb      	str	r3, [r7, #28]
 800db1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db1c:	69b9      	ldr	r1, [r7, #24]
 800db1e:	69fa      	ldr	r2, [r7, #28]
 800db20:	e841 2300 	strex	r3, r2, [r1]
 800db24:	617b      	str	r3, [r7, #20]
   return(result);
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d1e4      	bne.n	800daf6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2202      	movs	r2, #2
 800db30:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800db32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800db36:	4619      	mov	r1, r3
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 f881 	bl	800dc40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800db3e:	e063      	b.n	800dc08 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800db40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d00e      	beq.n	800db6a <HAL_UART_IRQHandler+0x6c6>
 800db4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db54:	2b00      	cmp	r3, #0
 800db56:	d008      	beq.n	800db6a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800db60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f001 f93f 	bl	800ede6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800db68:	e051      	b.n	800dc0e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800db6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db72:	2b00      	cmp	r3, #0
 800db74:	d014      	beq.n	800dba0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800db76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d105      	bne.n	800db8e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800db82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d008      	beq.n	800dba0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db92:	2b00      	cmp	r3, #0
 800db94:	d03a      	beq.n	800dc0c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	4798      	blx	r3
    }
    return;
 800db9e:	e035      	b.n	800dc0c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d009      	beq.n	800dbc0 <HAL_UART_IRQHandler+0x71c>
 800dbac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d003      	beq.n	800dbc0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f001 f8e9 	bl	800ed90 <UART_EndTransmit_IT>
    return;
 800dbbe:	e026      	b.n	800dc0e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dbc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d009      	beq.n	800dbe0 <HAL_UART_IRQHandler+0x73c>
 800dbcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d003      	beq.n	800dbe0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f001 f918 	bl	800ee0e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dbde:	e016      	b.n	800dc0e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dbe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d010      	beq.n	800dc0e <HAL_UART_IRQHandler+0x76a>
 800dbec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	da0c      	bge.n	800dc0e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f001 f900 	bl	800edfa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dbfa:	e008      	b.n	800dc0e <HAL_UART_IRQHandler+0x76a>
      return;
 800dbfc:	bf00      	nop
 800dbfe:	e006      	b.n	800dc0e <HAL_UART_IRQHandler+0x76a>
    return;
 800dc00:	bf00      	nop
 800dc02:	e004      	b.n	800dc0e <HAL_UART_IRQHandler+0x76a>
      return;
 800dc04:	bf00      	nop
 800dc06:	e002      	b.n	800dc0e <HAL_UART_IRQHandler+0x76a>
      return;
 800dc08:	bf00      	nop
 800dc0a:	e000      	b.n	800dc0e <HAL_UART_IRQHandler+0x76a>
    return;
 800dc0c:	bf00      	nop
  }
}
 800dc0e:	37e8      	adds	r7, #232	; 0xe8
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	effffffe 	.word	0xeffffffe

0800dc18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dc20:	bf00      	nop
 800dc22:	370c      	adds	r7, #12
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dc34:	bf00      	nop
 800dc36:	370c      	adds	r7, #12
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr

0800dc40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b083      	sub	sp, #12
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	460b      	mov	r3, r1
 800dc4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dc4c:	bf00      	nop
 800dc4e:	370c      	adds	r7, #12
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr

0800dc58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dc58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc5c:	b092      	sub	sp, #72	; 0x48
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dc62:	2300      	movs	r3, #0
 800dc64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	689a      	ldr	r2, [r3, #8]
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	691b      	ldr	r3, [r3, #16]
 800dc70:	431a      	orrs	r2, r3
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	695b      	ldr	r3, [r3, #20]
 800dc76:	431a      	orrs	r2, r3
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	69db      	ldr	r3, [r3, #28]
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	4bbe      	ldr	r3, [pc, #760]	; (800df80 <UART_SetConfig+0x328>)
 800dc88:	4013      	ands	r3, r2
 800dc8a:	697a      	ldr	r2, [r7, #20]
 800dc8c:	6812      	ldr	r2, [r2, #0]
 800dc8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc90:	430b      	orrs	r3, r1
 800dc92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	68da      	ldr	r2, [r3, #12]
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	430a      	orrs	r2, r1
 800dca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	699b      	ldr	r3, [r3, #24]
 800dcae:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4ab3      	ldr	r2, [pc, #716]	; (800df84 <UART_SetConfig+0x32c>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d004      	beq.n	800dcc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	6a1b      	ldr	r3, [r3, #32]
 800dcbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	689a      	ldr	r2, [r3, #8]
 800dcca:	4baf      	ldr	r3, [pc, #700]	; (800df88 <UART_SetConfig+0x330>)
 800dccc:	4013      	ands	r3, r2
 800dcce:	697a      	ldr	r2, [r7, #20]
 800dcd0:	6812      	ldr	r2, [r2, #0]
 800dcd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dcd4:	430b      	orrs	r3, r1
 800dcd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcde:	f023 010f 	bic.w	r1, r3, #15
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	430a      	orrs	r2, r1
 800dcec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4aa6      	ldr	r2, [pc, #664]	; (800df8c <UART_SetConfig+0x334>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d177      	bne.n	800dde8 <UART_SetConfig+0x190>
 800dcf8:	4ba5      	ldr	r3, [pc, #660]	; (800df90 <UART_SetConfig+0x338>)
 800dcfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd00:	2b28      	cmp	r3, #40	; 0x28
 800dd02:	d86d      	bhi.n	800dde0 <UART_SetConfig+0x188>
 800dd04:	a201      	add	r2, pc, #4	; (adr r2, 800dd0c <UART_SetConfig+0xb4>)
 800dd06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd0a:	bf00      	nop
 800dd0c:	0800ddb1 	.word	0x0800ddb1
 800dd10:	0800dde1 	.word	0x0800dde1
 800dd14:	0800dde1 	.word	0x0800dde1
 800dd18:	0800dde1 	.word	0x0800dde1
 800dd1c:	0800dde1 	.word	0x0800dde1
 800dd20:	0800dde1 	.word	0x0800dde1
 800dd24:	0800dde1 	.word	0x0800dde1
 800dd28:	0800dde1 	.word	0x0800dde1
 800dd2c:	0800ddb9 	.word	0x0800ddb9
 800dd30:	0800dde1 	.word	0x0800dde1
 800dd34:	0800dde1 	.word	0x0800dde1
 800dd38:	0800dde1 	.word	0x0800dde1
 800dd3c:	0800dde1 	.word	0x0800dde1
 800dd40:	0800dde1 	.word	0x0800dde1
 800dd44:	0800dde1 	.word	0x0800dde1
 800dd48:	0800dde1 	.word	0x0800dde1
 800dd4c:	0800ddc1 	.word	0x0800ddc1
 800dd50:	0800dde1 	.word	0x0800dde1
 800dd54:	0800dde1 	.word	0x0800dde1
 800dd58:	0800dde1 	.word	0x0800dde1
 800dd5c:	0800dde1 	.word	0x0800dde1
 800dd60:	0800dde1 	.word	0x0800dde1
 800dd64:	0800dde1 	.word	0x0800dde1
 800dd68:	0800dde1 	.word	0x0800dde1
 800dd6c:	0800ddc9 	.word	0x0800ddc9
 800dd70:	0800dde1 	.word	0x0800dde1
 800dd74:	0800dde1 	.word	0x0800dde1
 800dd78:	0800dde1 	.word	0x0800dde1
 800dd7c:	0800dde1 	.word	0x0800dde1
 800dd80:	0800dde1 	.word	0x0800dde1
 800dd84:	0800dde1 	.word	0x0800dde1
 800dd88:	0800dde1 	.word	0x0800dde1
 800dd8c:	0800ddd1 	.word	0x0800ddd1
 800dd90:	0800dde1 	.word	0x0800dde1
 800dd94:	0800dde1 	.word	0x0800dde1
 800dd98:	0800dde1 	.word	0x0800dde1
 800dd9c:	0800dde1 	.word	0x0800dde1
 800dda0:	0800dde1 	.word	0x0800dde1
 800dda4:	0800dde1 	.word	0x0800dde1
 800dda8:	0800dde1 	.word	0x0800dde1
 800ddac:	0800ddd9 	.word	0x0800ddd9
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddb6:	e326      	b.n	800e406 <UART_SetConfig+0x7ae>
 800ddb8:	2304      	movs	r3, #4
 800ddba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddbe:	e322      	b.n	800e406 <UART_SetConfig+0x7ae>
 800ddc0:	2308      	movs	r3, #8
 800ddc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddc6:	e31e      	b.n	800e406 <UART_SetConfig+0x7ae>
 800ddc8:	2310      	movs	r3, #16
 800ddca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddce:	e31a      	b.n	800e406 <UART_SetConfig+0x7ae>
 800ddd0:	2320      	movs	r3, #32
 800ddd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddd6:	e316      	b.n	800e406 <UART_SetConfig+0x7ae>
 800ddd8:	2340      	movs	r3, #64	; 0x40
 800ddda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddde:	e312      	b.n	800e406 <UART_SetConfig+0x7ae>
 800dde0:	2380      	movs	r3, #128	; 0x80
 800dde2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dde6:	e30e      	b.n	800e406 <UART_SetConfig+0x7ae>
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a69      	ldr	r2, [pc, #420]	; (800df94 <UART_SetConfig+0x33c>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d130      	bne.n	800de54 <UART_SetConfig+0x1fc>
 800ddf2:	4b67      	ldr	r3, [pc, #412]	; (800df90 <UART_SetConfig+0x338>)
 800ddf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddf6:	f003 0307 	and.w	r3, r3, #7
 800ddfa:	2b05      	cmp	r3, #5
 800ddfc:	d826      	bhi.n	800de4c <UART_SetConfig+0x1f4>
 800ddfe:	a201      	add	r2, pc, #4	; (adr r2, 800de04 <UART_SetConfig+0x1ac>)
 800de00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de04:	0800de1d 	.word	0x0800de1d
 800de08:	0800de25 	.word	0x0800de25
 800de0c:	0800de2d 	.word	0x0800de2d
 800de10:	0800de35 	.word	0x0800de35
 800de14:	0800de3d 	.word	0x0800de3d
 800de18:	0800de45 	.word	0x0800de45
 800de1c:	2300      	movs	r3, #0
 800de1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de22:	e2f0      	b.n	800e406 <UART_SetConfig+0x7ae>
 800de24:	2304      	movs	r3, #4
 800de26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de2a:	e2ec      	b.n	800e406 <UART_SetConfig+0x7ae>
 800de2c:	2308      	movs	r3, #8
 800de2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de32:	e2e8      	b.n	800e406 <UART_SetConfig+0x7ae>
 800de34:	2310      	movs	r3, #16
 800de36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de3a:	e2e4      	b.n	800e406 <UART_SetConfig+0x7ae>
 800de3c:	2320      	movs	r3, #32
 800de3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de42:	e2e0      	b.n	800e406 <UART_SetConfig+0x7ae>
 800de44:	2340      	movs	r3, #64	; 0x40
 800de46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4a:	e2dc      	b.n	800e406 <UART_SetConfig+0x7ae>
 800de4c:	2380      	movs	r3, #128	; 0x80
 800de4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de52:	e2d8      	b.n	800e406 <UART_SetConfig+0x7ae>
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4a4f      	ldr	r2, [pc, #316]	; (800df98 <UART_SetConfig+0x340>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d130      	bne.n	800dec0 <UART_SetConfig+0x268>
 800de5e:	4b4c      	ldr	r3, [pc, #304]	; (800df90 <UART_SetConfig+0x338>)
 800de60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de62:	f003 0307 	and.w	r3, r3, #7
 800de66:	2b05      	cmp	r3, #5
 800de68:	d826      	bhi.n	800deb8 <UART_SetConfig+0x260>
 800de6a:	a201      	add	r2, pc, #4	; (adr r2, 800de70 <UART_SetConfig+0x218>)
 800de6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de70:	0800de89 	.word	0x0800de89
 800de74:	0800de91 	.word	0x0800de91
 800de78:	0800de99 	.word	0x0800de99
 800de7c:	0800dea1 	.word	0x0800dea1
 800de80:	0800dea9 	.word	0x0800dea9
 800de84:	0800deb1 	.word	0x0800deb1
 800de88:	2300      	movs	r3, #0
 800de8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de8e:	e2ba      	b.n	800e406 <UART_SetConfig+0x7ae>
 800de90:	2304      	movs	r3, #4
 800de92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de96:	e2b6      	b.n	800e406 <UART_SetConfig+0x7ae>
 800de98:	2308      	movs	r3, #8
 800de9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de9e:	e2b2      	b.n	800e406 <UART_SetConfig+0x7ae>
 800dea0:	2310      	movs	r3, #16
 800dea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dea6:	e2ae      	b.n	800e406 <UART_SetConfig+0x7ae>
 800dea8:	2320      	movs	r3, #32
 800deaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deae:	e2aa      	b.n	800e406 <UART_SetConfig+0x7ae>
 800deb0:	2340      	movs	r3, #64	; 0x40
 800deb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb6:	e2a6      	b.n	800e406 <UART_SetConfig+0x7ae>
 800deb8:	2380      	movs	r3, #128	; 0x80
 800deba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800debe:	e2a2      	b.n	800e406 <UART_SetConfig+0x7ae>
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	4a35      	ldr	r2, [pc, #212]	; (800df9c <UART_SetConfig+0x344>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d130      	bne.n	800df2c <UART_SetConfig+0x2d4>
 800deca:	4b31      	ldr	r3, [pc, #196]	; (800df90 <UART_SetConfig+0x338>)
 800decc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dece:	f003 0307 	and.w	r3, r3, #7
 800ded2:	2b05      	cmp	r3, #5
 800ded4:	d826      	bhi.n	800df24 <UART_SetConfig+0x2cc>
 800ded6:	a201      	add	r2, pc, #4	; (adr r2, 800dedc <UART_SetConfig+0x284>)
 800ded8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dedc:	0800def5 	.word	0x0800def5
 800dee0:	0800defd 	.word	0x0800defd
 800dee4:	0800df05 	.word	0x0800df05
 800dee8:	0800df0d 	.word	0x0800df0d
 800deec:	0800df15 	.word	0x0800df15
 800def0:	0800df1d 	.word	0x0800df1d
 800def4:	2300      	movs	r3, #0
 800def6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800defa:	e284      	b.n	800e406 <UART_SetConfig+0x7ae>
 800defc:	2304      	movs	r3, #4
 800defe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df02:	e280      	b.n	800e406 <UART_SetConfig+0x7ae>
 800df04:	2308      	movs	r3, #8
 800df06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df0a:	e27c      	b.n	800e406 <UART_SetConfig+0x7ae>
 800df0c:	2310      	movs	r3, #16
 800df0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df12:	e278      	b.n	800e406 <UART_SetConfig+0x7ae>
 800df14:	2320      	movs	r3, #32
 800df16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df1a:	e274      	b.n	800e406 <UART_SetConfig+0x7ae>
 800df1c:	2340      	movs	r3, #64	; 0x40
 800df1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df22:	e270      	b.n	800e406 <UART_SetConfig+0x7ae>
 800df24:	2380      	movs	r3, #128	; 0x80
 800df26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df2a:	e26c      	b.n	800e406 <UART_SetConfig+0x7ae>
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4a1b      	ldr	r2, [pc, #108]	; (800dfa0 <UART_SetConfig+0x348>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d142      	bne.n	800dfbc <UART_SetConfig+0x364>
 800df36:	4b16      	ldr	r3, [pc, #88]	; (800df90 <UART_SetConfig+0x338>)
 800df38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df3a:	f003 0307 	and.w	r3, r3, #7
 800df3e:	2b05      	cmp	r3, #5
 800df40:	d838      	bhi.n	800dfb4 <UART_SetConfig+0x35c>
 800df42:	a201      	add	r2, pc, #4	; (adr r2, 800df48 <UART_SetConfig+0x2f0>)
 800df44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df48:	0800df61 	.word	0x0800df61
 800df4c:	0800df69 	.word	0x0800df69
 800df50:	0800df71 	.word	0x0800df71
 800df54:	0800df79 	.word	0x0800df79
 800df58:	0800dfa5 	.word	0x0800dfa5
 800df5c:	0800dfad 	.word	0x0800dfad
 800df60:	2300      	movs	r3, #0
 800df62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df66:	e24e      	b.n	800e406 <UART_SetConfig+0x7ae>
 800df68:	2304      	movs	r3, #4
 800df6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df6e:	e24a      	b.n	800e406 <UART_SetConfig+0x7ae>
 800df70:	2308      	movs	r3, #8
 800df72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df76:	e246      	b.n	800e406 <UART_SetConfig+0x7ae>
 800df78:	2310      	movs	r3, #16
 800df7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df7e:	e242      	b.n	800e406 <UART_SetConfig+0x7ae>
 800df80:	cfff69f3 	.word	0xcfff69f3
 800df84:	58000c00 	.word	0x58000c00
 800df88:	11fff4ff 	.word	0x11fff4ff
 800df8c:	40011000 	.word	0x40011000
 800df90:	58024400 	.word	0x58024400
 800df94:	40004400 	.word	0x40004400
 800df98:	40004800 	.word	0x40004800
 800df9c:	40004c00 	.word	0x40004c00
 800dfa0:	40005000 	.word	0x40005000
 800dfa4:	2320      	movs	r3, #32
 800dfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfaa:	e22c      	b.n	800e406 <UART_SetConfig+0x7ae>
 800dfac:	2340      	movs	r3, #64	; 0x40
 800dfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfb2:	e228      	b.n	800e406 <UART_SetConfig+0x7ae>
 800dfb4:	2380      	movs	r3, #128	; 0x80
 800dfb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfba:	e224      	b.n	800e406 <UART_SetConfig+0x7ae>
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4ab1      	ldr	r2, [pc, #708]	; (800e288 <UART_SetConfig+0x630>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d176      	bne.n	800e0b4 <UART_SetConfig+0x45c>
 800dfc6:	4bb1      	ldr	r3, [pc, #708]	; (800e28c <UART_SetConfig+0x634>)
 800dfc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dfce:	2b28      	cmp	r3, #40	; 0x28
 800dfd0:	d86c      	bhi.n	800e0ac <UART_SetConfig+0x454>
 800dfd2:	a201      	add	r2, pc, #4	; (adr r2, 800dfd8 <UART_SetConfig+0x380>)
 800dfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd8:	0800e07d 	.word	0x0800e07d
 800dfdc:	0800e0ad 	.word	0x0800e0ad
 800dfe0:	0800e0ad 	.word	0x0800e0ad
 800dfe4:	0800e0ad 	.word	0x0800e0ad
 800dfe8:	0800e0ad 	.word	0x0800e0ad
 800dfec:	0800e0ad 	.word	0x0800e0ad
 800dff0:	0800e0ad 	.word	0x0800e0ad
 800dff4:	0800e0ad 	.word	0x0800e0ad
 800dff8:	0800e085 	.word	0x0800e085
 800dffc:	0800e0ad 	.word	0x0800e0ad
 800e000:	0800e0ad 	.word	0x0800e0ad
 800e004:	0800e0ad 	.word	0x0800e0ad
 800e008:	0800e0ad 	.word	0x0800e0ad
 800e00c:	0800e0ad 	.word	0x0800e0ad
 800e010:	0800e0ad 	.word	0x0800e0ad
 800e014:	0800e0ad 	.word	0x0800e0ad
 800e018:	0800e08d 	.word	0x0800e08d
 800e01c:	0800e0ad 	.word	0x0800e0ad
 800e020:	0800e0ad 	.word	0x0800e0ad
 800e024:	0800e0ad 	.word	0x0800e0ad
 800e028:	0800e0ad 	.word	0x0800e0ad
 800e02c:	0800e0ad 	.word	0x0800e0ad
 800e030:	0800e0ad 	.word	0x0800e0ad
 800e034:	0800e0ad 	.word	0x0800e0ad
 800e038:	0800e095 	.word	0x0800e095
 800e03c:	0800e0ad 	.word	0x0800e0ad
 800e040:	0800e0ad 	.word	0x0800e0ad
 800e044:	0800e0ad 	.word	0x0800e0ad
 800e048:	0800e0ad 	.word	0x0800e0ad
 800e04c:	0800e0ad 	.word	0x0800e0ad
 800e050:	0800e0ad 	.word	0x0800e0ad
 800e054:	0800e0ad 	.word	0x0800e0ad
 800e058:	0800e09d 	.word	0x0800e09d
 800e05c:	0800e0ad 	.word	0x0800e0ad
 800e060:	0800e0ad 	.word	0x0800e0ad
 800e064:	0800e0ad 	.word	0x0800e0ad
 800e068:	0800e0ad 	.word	0x0800e0ad
 800e06c:	0800e0ad 	.word	0x0800e0ad
 800e070:	0800e0ad 	.word	0x0800e0ad
 800e074:	0800e0ad 	.word	0x0800e0ad
 800e078:	0800e0a5 	.word	0x0800e0a5
 800e07c:	2301      	movs	r3, #1
 800e07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e082:	e1c0      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e084:	2304      	movs	r3, #4
 800e086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e08a:	e1bc      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e08c:	2308      	movs	r3, #8
 800e08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e092:	e1b8      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e094:	2310      	movs	r3, #16
 800e096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e09a:	e1b4      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e09c:	2320      	movs	r3, #32
 800e09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0a2:	e1b0      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e0a4:	2340      	movs	r3, #64	; 0x40
 800e0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0aa:	e1ac      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e0ac:	2380      	movs	r3, #128	; 0x80
 800e0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0b2:	e1a8      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4a75      	ldr	r2, [pc, #468]	; (800e290 <UART_SetConfig+0x638>)
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d130      	bne.n	800e120 <UART_SetConfig+0x4c8>
 800e0be:	4b73      	ldr	r3, [pc, #460]	; (800e28c <UART_SetConfig+0x634>)
 800e0c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0c2:	f003 0307 	and.w	r3, r3, #7
 800e0c6:	2b05      	cmp	r3, #5
 800e0c8:	d826      	bhi.n	800e118 <UART_SetConfig+0x4c0>
 800e0ca:	a201      	add	r2, pc, #4	; (adr r2, 800e0d0 <UART_SetConfig+0x478>)
 800e0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d0:	0800e0e9 	.word	0x0800e0e9
 800e0d4:	0800e0f1 	.word	0x0800e0f1
 800e0d8:	0800e0f9 	.word	0x0800e0f9
 800e0dc:	0800e101 	.word	0x0800e101
 800e0e0:	0800e109 	.word	0x0800e109
 800e0e4:	0800e111 	.word	0x0800e111
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ee:	e18a      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e0f0:	2304      	movs	r3, #4
 800e0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0f6:	e186      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e0f8:	2308      	movs	r3, #8
 800e0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0fe:	e182      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e100:	2310      	movs	r3, #16
 800e102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e106:	e17e      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e108:	2320      	movs	r3, #32
 800e10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10e:	e17a      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e110:	2340      	movs	r3, #64	; 0x40
 800e112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e116:	e176      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e118:	2380      	movs	r3, #128	; 0x80
 800e11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e11e:	e172      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4a5b      	ldr	r2, [pc, #364]	; (800e294 <UART_SetConfig+0x63c>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d130      	bne.n	800e18c <UART_SetConfig+0x534>
 800e12a:	4b58      	ldr	r3, [pc, #352]	; (800e28c <UART_SetConfig+0x634>)
 800e12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e12e:	f003 0307 	and.w	r3, r3, #7
 800e132:	2b05      	cmp	r3, #5
 800e134:	d826      	bhi.n	800e184 <UART_SetConfig+0x52c>
 800e136:	a201      	add	r2, pc, #4	; (adr r2, 800e13c <UART_SetConfig+0x4e4>)
 800e138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e13c:	0800e155 	.word	0x0800e155
 800e140:	0800e15d 	.word	0x0800e15d
 800e144:	0800e165 	.word	0x0800e165
 800e148:	0800e16d 	.word	0x0800e16d
 800e14c:	0800e175 	.word	0x0800e175
 800e150:	0800e17d 	.word	0x0800e17d
 800e154:	2300      	movs	r3, #0
 800e156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e15a:	e154      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e15c:	2304      	movs	r3, #4
 800e15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e162:	e150      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e164:	2308      	movs	r3, #8
 800e166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e16a:	e14c      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e16c:	2310      	movs	r3, #16
 800e16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e172:	e148      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e174:	2320      	movs	r3, #32
 800e176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17a:	e144      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e17c:	2340      	movs	r3, #64	; 0x40
 800e17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e182:	e140      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e184:	2380      	movs	r3, #128	; 0x80
 800e186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18a:	e13c      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a41      	ldr	r2, [pc, #260]	; (800e298 <UART_SetConfig+0x640>)
 800e192:	4293      	cmp	r3, r2
 800e194:	f040 8082 	bne.w	800e29c <UART_SetConfig+0x644>
 800e198:	4b3c      	ldr	r3, [pc, #240]	; (800e28c <UART_SetConfig+0x634>)
 800e19a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e19c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e1a0:	2b28      	cmp	r3, #40	; 0x28
 800e1a2:	d86d      	bhi.n	800e280 <UART_SetConfig+0x628>
 800e1a4:	a201      	add	r2, pc, #4	; (adr r2, 800e1ac <UART_SetConfig+0x554>)
 800e1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1aa:	bf00      	nop
 800e1ac:	0800e251 	.word	0x0800e251
 800e1b0:	0800e281 	.word	0x0800e281
 800e1b4:	0800e281 	.word	0x0800e281
 800e1b8:	0800e281 	.word	0x0800e281
 800e1bc:	0800e281 	.word	0x0800e281
 800e1c0:	0800e281 	.word	0x0800e281
 800e1c4:	0800e281 	.word	0x0800e281
 800e1c8:	0800e281 	.word	0x0800e281
 800e1cc:	0800e259 	.word	0x0800e259
 800e1d0:	0800e281 	.word	0x0800e281
 800e1d4:	0800e281 	.word	0x0800e281
 800e1d8:	0800e281 	.word	0x0800e281
 800e1dc:	0800e281 	.word	0x0800e281
 800e1e0:	0800e281 	.word	0x0800e281
 800e1e4:	0800e281 	.word	0x0800e281
 800e1e8:	0800e281 	.word	0x0800e281
 800e1ec:	0800e261 	.word	0x0800e261
 800e1f0:	0800e281 	.word	0x0800e281
 800e1f4:	0800e281 	.word	0x0800e281
 800e1f8:	0800e281 	.word	0x0800e281
 800e1fc:	0800e281 	.word	0x0800e281
 800e200:	0800e281 	.word	0x0800e281
 800e204:	0800e281 	.word	0x0800e281
 800e208:	0800e281 	.word	0x0800e281
 800e20c:	0800e269 	.word	0x0800e269
 800e210:	0800e281 	.word	0x0800e281
 800e214:	0800e281 	.word	0x0800e281
 800e218:	0800e281 	.word	0x0800e281
 800e21c:	0800e281 	.word	0x0800e281
 800e220:	0800e281 	.word	0x0800e281
 800e224:	0800e281 	.word	0x0800e281
 800e228:	0800e281 	.word	0x0800e281
 800e22c:	0800e271 	.word	0x0800e271
 800e230:	0800e281 	.word	0x0800e281
 800e234:	0800e281 	.word	0x0800e281
 800e238:	0800e281 	.word	0x0800e281
 800e23c:	0800e281 	.word	0x0800e281
 800e240:	0800e281 	.word	0x0800e281
 800e244:	0800e281 	.word	0x0800e281
 800e248:	0800e281 	.word	0x0800e281
 800e24c:	0800e279 	.word	0x0800e279
 800e250:	2301      	movs	r3, #1
 800e252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e256:	e0d6      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e258:	2304      	movs	r3, #4
 800e25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25e:	e0d2      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e260:	2308      	movs	r3, #8
 800e262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e266:	e0ce      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e268:	2310      	movs	r3, #16
 800e26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26e:	e0ca      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e270:	2320      	movs	r3, #32
 800e272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e276:	e0c6      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e278:	2340      	movs	r3, #64	; 0x40
 800e27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e27e:	e0c2      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e280:	2380      	movs	r3, #128	; 0x80
 800e282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e286:	e0be      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e288:	40011400 	.word	0x40011400
 800e28c:	58024400 	.word	0x58024400
 800e290:	40007800 	.word	0x40007800
 800e294:	40007c00 	.word	0x40007c00
 800e298:	40011800 	.word	0x40011800
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4aad      	ldr	r2, [pc, #692]	; (800e558 <UART_SetConfig+0x900>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d176      	bne.n	800e394 <UART_SetConfig+0x73c>
 800e2a6:	4bad      	ldr	r3, [pc, #692]	; (800e55c <UART_SetConfig+0x904>)
 800e2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e2ae:	2b28      	cmp	r3, #40	; 0x28
 800e2b0:	d86c      	bhi.n	800e38c <UART_SetConfig+0x734>
 800e2b2:	a201      	add	r2, pc, #4	; (adr r2, 800e2b8 <UART_SetConfig+0x660>)
 800e2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2b8:	0800e35d 	.word	0x0800e35d
 800e2bc:	0800e38d 	.word	0x0800e38d
 800e2c0:	0800e38d 	.word	0x0800e38d
 800e2c4:	0800e38d 	.word	0x0800e38d
 800e2c8:	0800e38d 	.word	0x0800e38d
 800e2cc:	0800e38d 	.word	0x0800e38d
 800e2d0:	0800e38d 	.word	0x0800e38d
 800e2d4:	0800e38d 	.word	0x0800e38d
 800e2d8:	0800e365 	.word	0x0800e365
 800e2dc:	0800e38d 	.word	0x0800e38d
 800e2e0:	0800e38d 	.word	0x0800e38d
 800e2e4:	0800e38d 	.word	0x0800e38d
 800e2e8:	0800e38d 	.word	0x0800e38d
 800e2ec:	0800e38d 	.word	0x0800e38d
 800e2f0:	0800e38d 	.word	0x0800e38d
 800e2f4:	0800e38d 	.word	0x0800e38d
 800e2f8:	0800e36d 	.word	0x0800e36d
 800e2fc:	0800e38d 	.word	0x0800e38d
 800e300:	0800e38d 	.word	0x0800e38d
 800e304:	0800e38d 	.word	0x0800e38d
 800e308:	0800e38d 	.word	0x0800e38d
 800e30c:	0800e38d 	.word	0x0800e38d
 800e310:	0800e38d 	.word	0x0800e38d
 800e314:	0800e38d 	.word	0x0800e38d
 800e318:	0800e375 	.word	0x0800e375
 800e31c:	0800e38d 	.word	0x0800e38d
 800e320:	0800e38d 	.word	0x0800e38d
 800e324:	0800e38d 	.word	0x0800e38d
 800e328:	0800e38d 	.word	0x0800e38d
 800e32c:	0800e38d 	.word	0x0800e38d
 800e330:	0800e38d 	.word	0x0800e38d
 800e334:	0800e38d 	.word	0x0800e38d
 800e338:	0800e37d 	.word	0x0800e37d
 800e33c:	0800e38d 	.word	0x0800e38d
 800e340:	0800e38d 	.word	0x0800e38d
 800e344:	0800e38d 	.word	0x0800e38d
 800e348:	0800e38d 	.word	0x0800e38d
 800e34c:	0800e38d 	.word	0x0800e38d
 800e350:	0800e38d 	.word	0x0800e38d
 800e354:	0800e38d 	.word	0x0800e38d
 800e358:	0800e385 	.word	0x0800e385
 800e35c:	2301      	movs	r3, #1
 800e35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e362:	e050      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e364:	2304      	movs	r3, #4
 800e366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e36a:	e04c      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e36c:	2308      	movs	r3, #8
 800e36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e372:	e048      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e374:	2310      	movs	r3, #16
 800e376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e37a:	e044      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e37c:	2320      	movs	r3, #32
 800e37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e382:	e040      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e384:	2340      	movs	r3, #64	; 0x40
 800e386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e38a:	e03c      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e38c:	2380      	movs	r3, #128	; 0x80
 800e38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e392:	e038      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	4a71      	ldr	r2, [pc, #452]	; (800e560 <UART_SetConfig+0x908>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d130      	bne.n	800e400 <UART_SetConfig+0x7a8>
 800e39e:	4b6f      	ldr	r3, [pc, #444]	; (800e55c <UART_SetConfig+0x904>)
 800e3a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3a2:	f003 0307 	and.w	r3, r3, #7
 800e3a6:	2b05      	cmp	r3, #5
 800e3a8:	d826      	bhi.n	800e3f8 <UART_SetConfig+0x7a0>
 800e3aa:	a201      	add	r2, pc, #4	; (adr r2, 800e3b0 <UART_SetConfig+0x758>)
 800e3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3b0:	0800e3c9 	.word	0x0800e3c9
 800e3b4:	0800e3d1 	.word	0x0800e3d1
 800e3b8:	0800e3d9 	.word	0x0800e3d9
 800e3bc:	0800e3e1 	.word	0x0800e3e1
 800e3c0:	0800e3e9 	.word	0x0800e3e9
 800e3c4:	0800e3f1 	.word	0x0800e3f1
 800e3c8:	2302      	movs	r3, #2
 800e3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ce:	e01a      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e3d0:	2304      	movs	r3, #4
 800e3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3d6:	e016      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e3d8:	2308      	movs	r3, #8
 800e3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3de:	e012      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e3e0:	2310      	movs	r3, #16
 800e3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3e6:	e00e      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e3e8:	2320      	movs	r3, #32
 800e3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ee:	e00a      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e3f0:	2340      	movs	r3, #64	; 0x40
 800e3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f6:	e006      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e3f8:	2380      	movs	r3, #128	; 0x80
 800e3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fe:	e002      	b.n	800e406 <UART_SetConfig+0x7ae>
 800e400:	2380      	movs	r3, #128	; 0x80
 800e402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e406:	697b      	ldr	r3, [r7, #20]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4a55      	ldr	r2, [pc, #340]	; (800e560 <UART_SetConfig+0x908>)
 800e40c:	4293      	cmp	r3, r2
 800e40e:	f040 80f8 	bne.w	800e602 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e412:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e416:	2b20      	cmp	r3, #32
 800e418:	dc46      	bgt.n	800e4a8 <UART_SetConfig+0x850>
 800e41a:	2b02      	cmp	r3, #2
 800e41c:	db75      	blt.n	800e50a <UART_SetConfig+0x8b2>
 800e41e:	3b02      	subs	r3, #2
 800e420:	2b1e      	cmp	r3, #30
 800e422:	d872      	bhi.n	800e50a <UART_SetConfig+0x8b2>
 800e424:	a201      	add	r2, pc, #4	; (adr r2, 800e42c <UART_SetConfig+0x7d4>)
 800e426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e42a:	bf00      	nop
 800e42c:	0800e4af 	.word	0x0800e4af
 800e430:	0800e50b 	.word	0x0800e50b
 800e434:	0800e4b7 	.word	0x0800e4b7
 800e438:	0800e50b 	.word	0x0800e50b
 800e43c:	0800e50b 	.word	0x0800e50b
 800e440:	0800e50b 	.word	0x0800e50b
 800e444:	0800e4c7 	.word	0x0800e4c7
 800e448:	0800e50b 	.word	0x0800e50b
 800e44c:	0800e50b 	.word	0x0800e50b
 800e450:	0800e50b 	.word	0x0800e50b
 800e454:	0800e50b 	.word	0x0800e50b
 800e458:	0800e50b 	.word	0x0800e50b
 800e45c:	0800e50b 	.word	0x0800e50b
 800e460:	0800e50b 	.word	0x0800e50b
 800e464:	0800e4d7 	.word	0x0800e4d7
 800e468:	0800e50b 	.word	0x0800e50b
 800e46c:	0800e50b 	.word	0x0800e50b
 800e470:	0800e50b 	.word	0x0800e50b
 800e474:	0800e50b 	.word	0x0800e50b
 800e478:	0800e50b 	.word	0x0800e50b
 800e47c:	0800e50b 	.word	0x0800e50b
 800e480:	0800e50b 	.word	0x0800e50b
 800e484:	0800e50b 	.word	0x0800e50b
 800e488:	0800e50b 	.word	0x0800e50b
 800e48c:	0800e50b 	.word	0x0800e50b
 800e490:	0800e50b 	.word	0x0800e50b
 800e494:	0800e50b 	.word	0x0800e50b
 800e498:	0800e50b 	.word	0x0800e50b
 800e49c:	0800e50b 	.word	0x0800e50b
 800e4a0:	0800e50b 	.word	0x0800e50b
 800e4a4:	0800e4fd 	.word	0x0800e4fd
 800e4a8:	2b40      	cmp	r3, #64	; 0x40
 800e4aa:	d02a      	beq.n	800e502 <UART_SetConfig+0x8aa>
 800e4ac:	e02d      	b.n	800e50a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e4ae:	f7fe f913 	bl	800c6d8 <HAL_RCCEx_GetD3PCLK1Freq>
 800e4b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e4b4:	e02f      	b.n	800e516 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7fe f922 	bl	800c704 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4c4:	e027      	b.n	800e516 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4c6:	f107 0318 	add.w	r3, r7, #24
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fe fa6e 	bl	800c9ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e4d0:	69fb      	ldr	r3, [r7, #28]
 800e4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4d4:	e01f      	b.n	800e516 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e4d6:	4b21      	ldr	r3, [pc, #132]	; (800e55c <UART_SetConfig+0x904>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f003 0320 	and.w	r3, r3, #32
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d009      	beq.n	800e4f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e4e2:	4b1e      	ldr	r3, [pc, #120]	; (800e55c <UART_SetConfig+0x904>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	08db      	lsrs	r3, r3, #3
 800e4e8:	f003 0303 	and.w	r3, r3, #3
 800e4ec:	4a1d      	ldr	r2, [pc, #116]	; (800e564 <UART_SetConfig+0x90c>)
 800e4ee:	fa22 f303 	lsr.w	r3, r2, r3
 800e4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e4f4:	e00f      	b.n	800e516 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e4f6:	4b1b      	ldr	r3, [pc, #108]	; (800e564 <UART_SetConfig+0x90c>)
 800e4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4fa:	e00c      	b.n	800e516 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e4fc:	4b1a      	ldr	r3, [pc, #104]	; (800e568 <UART_SetConfig+0x910>)
 800e4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e500:	e009      	b.n	800e516 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e508:	e005      	b.n	800e516 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e50a:	2300      	movs	r3, #0
 800e50c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e50e:	2301      	movs	r3, #1
 800e510:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e514:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e518:	2b00      	cmp	r3, #0
 800e51a:	f000 81ee 	beq.w	800e8fa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e522:	4a12      	ldr	r2, [pc, #72]	; (800e56c <UART_SetConfig+0x914>)
 800e524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e528:	461a      	mov	r2, r3
 800e52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e52c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e530:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	685a      	ldr	r2, [r3, #4]
 800e536:	4613      	mov	r3, r2
 800e538:	005b      	lsls	r3, r3, #1
 800e53a:	4413      	add	r3, r2
 800e53c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e53e:	429a      	cmp	r2, r3
 800e540:	d305      	bcc.n	800e54e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d910      	bls.n	800e570 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e54e:	2301      	movs	r3, #1
 800e550:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e554:	e1d1      	b.n	800e8fa <UART_SetConfig+0xca2>
 800e556:	bf00      	nop
 800e558:	40011c00 	.word	0x40011c00
 800e55c:	58024400 	.word	0x58024400
 800e560:	58000c00 	.word	0x58000c00
 800e564:	03d09000 	.word	0x03d09000
 800e568:	003d0900 	.word	0x003d0900
 800e56c:	08010780 	.word	0x08010780
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e572:	2200      	movs	r2, #0
 800e574:	60bb      	str	r3, [r7, #8]
 800e576:	60fa      	str	r2, [r7, #12]
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e57c:	4ac0      	ldr	r2, [pc, #768]	; (800e880 <UART_SetConfig+0xc28>)
 800e57e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e582:	b29b      	uxth	r3, r3
 800e584:	2200      	movs	r2, #0
 800e586:	603b      	str	r3, [r7, #0]
 800e588:	607a      	str	r2, [r7, #4]
 800e58a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e58e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e592:	f7f1 fefd 	bl	8000390 <__aeabi_uldivmod>
 800e596:	4602      	mov	r2, r0
 800e598:	460b      	mov	r3, r1
 800e59a:	4610      	mov	r0, r2
 800e59c:	4619      	mov	r1, r3
 800e59e:	f04f 0200 	mov.w	r2, #0
 800e5a2:	f04f 0300 	mov.w	r3, #0
 800e5a6:	020b      	lsls	r3, r1, #8
 800e5a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e5ac:	0202      	lsls	r2, r0, #8
 800e5ae:	6979      	ldr	r1, [r7, #20]
 800e5b0:	6849      	ldr	r1, [r1, #4]
 800e5b2:	0849      	lsrs	r1, r1, #1
 800e5b4:	2000      	movs	r0, #0
 800e5b6:	460c      	mov	r4, r1
 800e5b8:	4605      	mov	r5, r0
 800e5ba:	eb12 0804 	adds.w	r8, r2, r4
 800e5be:	eb43 0905 	adc.w	r9, r3, r5
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	469a      	mov	sl, r3
 800e5ca:	4693      	mov	fp, r2
 800e5cc:	4652      	mov	r2, sl
 800e5ce:	465b      	mov	r3, fp
 800e5d0:	4640      	mov	r0, r8
 800e5d2:	4649      	mov	r1, r9
 800e5d4:	f7f1 fedc 	bl	8000390 <__aeabi_uldivmod>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	460b      	mov	r3, r1
 800e5dc:	4613      	mov	r3, r2
 800e5de:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e5e6:	d308      	bcc.n	800e5fa <UART_SetConfig+0x9a2>
 800e5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5ee:	d204      	bcs.n	800e5fa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5f6:	60da      	str	r2, [r3, #12]
 800e5f8:	e17f      	b.n	800e8fa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e600:	e17b      	b.n	800e8fa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	69db      	ldr	r3, [r3, #28]
 800e606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e60a:	f040 80bd 	bne.w	800e788 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e60e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e612:	2b20      	cmp	r3, #32
 800e614:	dc48      	bgt.n	800e6a8 <UART_SetConfig+0xa50>
 800e616:	2b00      	cmp	r3, #0
 800e618:	db7b      	blt.n	800e712 <UART_SetConfig+0xaba>
 800e61a:	2b20      	cmp	r3, #32
 800e61c:	d879      	bhi.n	800e712 <UART_SetConfig+0xaba>
 800e61e:	a201      	add	r2, pc, #4	; (adr r2, 800e624 <UART_SetConfig+0x9cc>)
 800e620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e624:	0800e6af 	.word	0x0800e6af
 800e628:	0800e6b7 	.word	0x0800e6b7
 800e62c:	0800e713 	.word	0x0800e713
 800e630:	0800e713 	.word	0x0800e713
 800e634:	0800e6bf 	.word	0x0800e6bf
 800e638:	0800e713 	.word	0x0800e713
 800e63c:	0800e713 	.word	0x0800e713
 800e640:	0800e713 	.word	0x0800e713
 800e644:	0800e6cf 	.word	0x0800e6cf
 800e648:	0800e713 	.word	0x0800e713
 800e64c:	0800e713 	.word	0x0800e713
 800e650:	0800e713 	.word	0x0800e713
 800e654:	0800e713 	.word	0x0800e713
 800e658:	0800e713 	.word	0x0800e713
 800e65c:	0800e713 	.word	0x0800e713
 800e660:	0800e713 	.word	0x0800e713
 800e664:	0800e6df 	.word	0x0800e6df
 800e668:	0800e713 	.word	0x0800e713
 800e66c:	0800e713 	.word	0x0800e713
 800e670:	0800e713 	.word	0x0800e713
 800e674:	0800e713 	.word	0x0800e713
 800e678:	0800e713 	.word	0x0800e713
 800e67c:	0800e713 	.word	0x0800e713
 800e680:	0800e713 	.word	0x0800e713
 800e684:	0800e713 	.word	0x0800e713
 800e688:	0800e713 	.word	0x0800e713
 800e68c:	0800e713 	.word	0x0800e713
 800e690:	0800e713 	.word	0x0800e713
 800e694:	0800e713 	.word	0x0800e713
 800e698:	0800e713 	.word	0x0800e713
 800e69c:	0800e713 	.word	0x0800e713
 800e6a0:	0800e713 	.word	0x0800e713
 800e6a4:	0800e705 	.word	0x0800e705
 800e6a8:	2b40      	cmp	r3, #64	; 0x40
 800e6aa:	d02e      	beq.n	800e70a <UART_SetConfig+0xab2>
 800e6ac:	e031      	b.n	800e712 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e6ae:	f7fc fe29 	bl	800b304 <HAL_RCC_GetPCLK1Freq>
 800e6b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6b4:	e033      	b.n	800e71e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e6b6:	f7fc fe3b 	bl	800b330 <HAL_RCC_GetPCLK2Freq>
 800e6ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e6bc:	e02f      	b.n	800e71e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7fe f81e 	bl	800c704 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6cc:	e027      	b.n	800e71e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6ce:	f107 0318 	add.w	r3, r7, #24
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fe f96a 	bl	800c9ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e6d8:	69fb      	ldr	r3, [r7, #28]
 800e6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6dc:	e01f      	b.n	800e71e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e6de:	4b69      	ldr	r3, [pc, #420]	; (800e884 <UART_SetConfig+0xc2c>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f003 0320 	and.w	r3, r3, #32
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d009      	beq.n	800e6fe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e6ea:	4b66      	ldr	r3, [pc, #408]	; (800e884 <UART_SetConfig+0xc2c>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	08db      	lsrs	r3, r3, #3
 800e6f0:	f003 0303 	and.w	r3, r3, #3
 800e6f4:	4a64      	ldr	r2, [pc, #400]	; (800e888 <UART_SetConfig+0xc30>)
 800e6f6:	fa22 f303 	lsr.w	r3, r2, r3
 800e6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e6fc:	e00f      	b.n	800e71e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e6fe:	4b62      	ldr	r3, [pc, #392]	; (800e888 <UART_SetConfig+0xc30>)
 800e700:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e702:	e00c      	b.n	800e71e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e704:	4b61      	ldr	r3, [pc, #388]	; (800e88c <UART_SetConfig+0xc34>)
 800e706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e708:	e009      	b.n	800e71e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e70a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e70e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e710:	e005      	b.n	800e71e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e712:	2300      	movs	r3, #0
 800e714:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e716:	2301      	movs	r3, #1
 800e718:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e71c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e720:	2b00      	cmp	r3, #0
 800e722:	f000 80ea 	beq.w	800e8fa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e726:	697b      	ldr	r3, [r7, #20]
 800e728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e72a:	4a55      	ldr	r2, [pc, #340]	; (800e880 <UART_SetConfig+0xc28>)
 800e72c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e730:	461a      	mov	r2, r3
 800e732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e734:	fbb3 f3f2 	udiv	r3, r3, r2
 800e738:	005a      	lsls	r2, r3, #1
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	685b      	ldr	r3, [r3, #4]
 800e73e:	085b      	lsrs	r3, r3, #1
 800e740:	441a      	add	r2, r3
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	685b      	ldr	r3, [r3, #4]
 800e746:	fbb2 f3f3 	udiv	r3, r2, r3
 800e74a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74e:	2b0f      	cmp	r3, #15
 800e750:	d916      	bls.n	800e780 <UART_SetConfig+0xb28>
 800e752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e758:	d212      	bcs.n	800e780 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75c:	b29b      	uxth	r3, r3
 800e75e:	f023 030f 	bic.w	r3, r3, #15
 800e762:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e766:	085b      	lsrs	r3, r3, #1
 800e768:	b29b      	uxth	r3, r3
 800e76a:	f003 0307 	and.w	r3, r3, #7
 800e76e:	b29a      	uxth	r2, r3
 800e770:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e772:	4313      	orrs	r3, r2
 800e774:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e77c:	60da      	str	r2, [r3, #12]
 800e77e:	e0bc      	b.n	800e8fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e780:	2301      	movs	r3, #1
 800e782:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e786:	e0b8      	b.n	800e8fa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e788:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e78c:	2b20      	cmp	r3, #32
 800e78e:	dc4b      	bgt.n	800e828 <UART_SetConfig+0xbd0>
 800e790:	2b00      	cmp	r3, #0
 800e792:	f2c0 8087 	blt.w	800e8a4 <UART_SetConfig+0xc4c>
 800e796:	2b20      	cmp	r3, #32
 800e798:	f200 8084 	bhi.w	800e8a4 <UART_SetConfig+0xc4c>
 800e79c:	a201      	add	r2, pc, #4	; (adr r2, 800e7a4 <UART_SetConfig+0xb4c>)
 800e79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a2:	bf00      	nop
 800e7a4:	0800e82f 	.word	0x0800e82f
 800e7a8:	0800e837 	.word	0x0800e837
 800e7ac:	0800e8a5 	.word	0x0800e8a5
 800e7b0:	0800e8a5 	.word	0x0800e8a5
 800e7b4:	0800e83f 	.word	0x0800e83f
 800e7b8:	0800e8a5 	.word	0x0800e8a5
 800e7bc:	0800e8a5 	.word	0x0800e8a5
 800e7c0:	0800e8a5 	.word	0x0800e8a5
 800e7c4:	0800e84f 	.word	0x0800e84f
 800e7c8:	0800e8a5 	.word	0x0800e8a5
 800e7cc:	0800e8a5 	.word	0x0800e8a5
 800e7d0:	0800e8a5 	.word	0x0800e8a5
 800e7d4:	0800e8a5 	.word	0x0800e8a5
 800e7d8:	0800e8a5 	.word	0x0800e8a5
 800e7dc:	0800e8a5 	.word	0x0800e8a5
 800e7e0:	0800e8a5 	.word	0x0800e8a5
 800e7e4:	0800e85f 	.word	0x0800e85f
 800e7e8:	0800e8a5 	.word	0x0800e8a5
 800e7ec:	0800e8a5 	.word	0x0800e8a5
 800e7f0:	0800e8a5 	.word	0x0800e8a5
 800e7f4:	0800e8a5 	.word	0x0800e8a5
 800e7f8:	0800e8a5 	.word	0x0800e8a5
 800e7fc:	0800e8a5 	.word	0x0800e8a5
 800e800:	0800e8a5 	.word	0x0800e8a5
 800e804:	0800e8a5 	.word	0x0800e8a5
 800e808:	0800e8a5 	.word	0x0800e8a5
 800e80c:	0800e8a5 	.word	0x0800e8a5
 800e810:	0800e8a5 	.word	0x0800e8a5
 800e814:	0800e8a5 	.word	0x0800e8a5
 800e818:	0800e8a5 	.word	0x0800e8a5
 800e81c:	0800e8a5 	.word	0x0800e8a5
 800e820:	0800e8a5 	.word	0x0800e8a5
 800e824:	0800e897 	.word	0x0800e897
 800e828:	2b40      	cmp	r3, #64	; 0x40
 800e82a:	d037      	beq.n	800e89c <UART_SetConfig+0xc44>
 800e82c:	e03a      	b.n	800e8a4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e82e:	f7fc fd69 	bl	800b304 <HAL_RCC_GetPCLK1Freq>
 800e832:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e834:	e03c      	b.n	800e8b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e836:	f7fc fd7b 	bl	800b330 <HAL_RCC_GetPCLK2Freq>
 800e83a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e83c:	e038      	b.n	800e8b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e83e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e842:	4618      	mov	r0, r3
 800e844:	f7fd ff5e 	bl	800c704 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e84c:	e030      	b.n	800e8b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e84e:	f107 0318 	add.w	r3, r7, #24
 800e852:	4618      	mov	r0, r3
 800e854:	f7fe f8aa 	bl	800c9ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e858:	69fb      	ldr	r3, [r7, #28]
 800e85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e85c:	e028      	b.n	800e8b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e85e:	4b09      	ldr	r3, [pc, #36]	; (800e884 <UART_SetConfig+0xc2c>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f003 0320 	and.w	r3, r3, #32
 800e866:	2b00      	cmp	r3, #0
 800e868:	d012      	beq.n	800e890 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e86a:	4b06      	ldr	r3, [pc, #24]	; (800e884 <UART_SetConfig+0xc2c>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	08db      	lsrs	r3, r3, #3
 800e870:	f003 0303 	and.w	r3, r3, #3
 800e874:	4a04      	ldr	r2, [pc, #16]	; (800e888 <UART_SetConfig+0xc30>)
 800e876:	fa22 f303 	lsr.w	r3, r2, r3
 800e87a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e87c:	e018      	b.n	800e8b0 <UART_SetConfig+0xc58>
 800e87e:	bf00      	nop
 800e880:	08010780 	.word	0x08010780
 800e884:	58024400 	.word	0x58024400
 800e888:	03d09000 	.word	0x03d09000
 800e88c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e890:	4b24      	ldr	r3, [pc, #144]	; (800e924 <UART_SetConfig+0xccc>)
 800e892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e894:	e00c      	b.n	800e8b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e896:	4b24      	ldr	r3, [pc, #144]	; (800e928 <UART_SetConfig+0xcd0>)
 800e898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e89a:	e009      	b.n	800e8b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e89c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8a2:	e005      	b.n	800e8b0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e8ae:	bf00      	nop
    }

    if (pclk != 0U)
 800e8b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d021      	beq.n	800e8fa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ba:	4a1c      	ldr	r2, [pc, #112]	; (800e92c <UART_SetConfig+0xcd4>)
 800e8bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8c4:	fbb3 f2f2 	udiv	r2, r3, r2
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	085b      	lsrs	r3, r3, #1
 800e8ce:	441a      	add	r2, r3
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8d8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8dc:	2b0f      	cmp	r3, #15
 800e8de:	d909      	bls.n	800e8f4 <UART_SetConfig+0xc9c>
 800e8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8e6:	d205      	bcs.n	800e8f4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ea:	b29a      	uxth	r2, r3
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	60da      	str	r2, [r3, #12]
 800e8f2:	e002      	b.n	800e8fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	2201      	movs	r2, #1
 800e906:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	2200      	movs	r2, #0
 800e90e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	2200      	movs	r2, #0
 800e914:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e916:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3748      	adds	r7, #72	; 0x48
 800e91e:	46bd      	mov	sp, r7
 800e920:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e924:	03d09000 	.word	0x03d09000
 800e928:	003d0900 	.word	0x003d0900
 800e92c:	08010780 	.word	0x08010780

0800e930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e93c:	f003 0301 	and.w	r3, r3, #1
 800e940:	2b00      	cmp	r3, #0
 800e942:	d00a      	beq.n	800e95a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	430a      	orrs	r2, r1
 800e958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e95e:	f003 0302 	and.w	r3, r3, #2
 800e962:	2b00      	cmp	r3, #0
 800e964:	d00a      	beq.n	800e97c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	430a      	orrs	r2, r1
 800e97a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e980:	f003 0304 	and.w	r3, r3, #4
 800e984:	2b00      	cmp	r3, #0
 800e986:	d00a      	beq.n	800e99e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	430a      	orrs	r2, r1
 800e99c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9a2:	f003 0308 	and.w	r3, r3, #8
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d00a      	beq.n	800e9c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	685b      	ldr	r3, [r3, #4]
 800e9b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	430a      	orrs	r2, r1
 800e9be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9c4:	f003 0310 	and.w	r3, r3, #16
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d00a      	beq.n	800e9e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	689b      	ldr	r3, [r3, #8]
 800e9d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	430a      	orrs	r2, r1
 800e9e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9e6:	f003 0320 	and.w	r3, r3, #32
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00a      	beq.n	800ea04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	689b      	ldr	r3, [r3, #8]
 800e9f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	430a      	orrs	r2, r1
 800ea02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d01a      	beq.n	800ea46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	430a      	orrs	r2, r1
 800ea24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea2e:	d10a      	bne.n	800ea46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	430a      	orrs	r2, r1
 800ea44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d00a      	beq.n	800ea68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	685b      	ldr	r3, [r3, #4]
 800ea58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	430a      	orrs	r2, r1
 800ea66:	605a      	str	r2, [r3, #4]
  }
}
 800ea68:	bf00      	nop
 800ea6a:	370c      	adds	r7, #12
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea72:	4770      	bx	lr

0800ea74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b098      	sub	sp, #96	; 0x60
 800ea78:	af02      	add	r7, sp, #8
 800ea7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ea84:	f7f5 fb9a 	bl	80041bc <HAL_GetTick>
 800ea88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f003 0308 	and.w	r3, r3, #8
 800ea94:	2b08      	cmp	r3, #8
 800ea96:	d12f      	bne.n	800eaf8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ea98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ea9c:	9300      	str	r3, [sp, #0]
 800ea9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f000 f88e 	bl	800ebc8 <UART_WaitOnFlagUntilTimeout>
 800eaac:	4603      	mov	r3, r0
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d022      	beq.n	800eaf8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaba:	e853 3f00 	ldrex	r3, [r3]
 800eabe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eac6:	653b      	str	r3, [r7, #80]	; 0x50
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	461a      	mov	r2, r3
 800eace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ead0:	647b      	str	r3, [r7, #68]	; 0x44
 800ead2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ead4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ead6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ead8:	e841 2300 	strex	r3, r2, [r1]
 800eadc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d1e6      	bne.n	800eab2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2220      	movs	r2, #32
 800eae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eaf4:	2303      	movs	r3, #3
 800eaf6:	e063      	b.n	800ebc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f003 0304 	and.w	r3, r3, #4
 800eb02:	2b04      	cmp	r3, #4
 800eb04:	d149      	bne.n	800eb9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb0a:	9300      	str	r3, [sp, #0]
 800eb0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f000 f857 	bl	800ebc8 <UART_WaitOnFlagUntilTimeout>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d03c      	beq.n	800eb9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb28:	e853 3f00 	ldrex	r3, [r3]
 800eb2c:	623b      	str	r3, [r7, #32]
   return(result);
 800eb2e:	6a3b      	ldr	r3, [r7, #32]
 800eb30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eb34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb3e:	633b      	str	r3, [r7, #48]	; 0x30
 800eb40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb46:	e841 2300 	strex	r3, r2, [r1]
 800eb4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d1e6      	bne.n	800eb20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	3308      	adds	r3, #8
 800eb58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	e853 3f00 	ldrex	r3, [r3]
 800eb60:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	f023 0301 	bic.w	r3, r3, #1
 800eb68:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	3308      	adds	r3, #8
 800eb70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb72:	61fa      	str	r2, [r7, #28]
 800eb74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb76:	69b9      	ldr	r1, [r7, #24]
 800eb78:	69fa      	ldr	r2, [r7, #28]
 800eb7a:	e841 2300 	strex	r3, r2, [r1]
 800eb7e:	617b      	str	r3, [r7, #20]
   return(result);
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d1e5      	bne.n	800eb52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2220      	movs	r2, #32
 800eb8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2200      	movs	r2, #0
 800eb92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb96:	2303      	movs	r3, #3
 800eb98:	e012      	b.n	800ebc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2220      	movs	r2, #32
 800eb9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2220      	movs	r2, #32
 800eba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2200      	movs	r2, #0
 800ebae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ebbe:	2300      	movs	r3, #0
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3758      	adds	r7, #88	; 0x58
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	603b      	str	r3, [r7, #0]
 800ebd4:	4613      	mov	r3, r2
 800ebd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ebd8:	e049      	b.n	800ec6e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ebda:	69bb      	ldr	r3, [r7, #24]
 800ebdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebe0:	d045      	beq.n	800ec6e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebe2:	f7f5 faeb 	bl	80041bc <HAL_GetTick>
 800ebe6:	4602      	mov	r2, r0
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	1ad3      	subs	r3, r2, r3
 800ebec:	69ba      	ldr	r2, [r7, #24]
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d302      	bcc.n	800ebf8 <UART_WaitOnFlagUntilTimeout+0x30>
 800ebf2:	69bb      	ldr	r3, [r7, #24]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d101      	bne.n	800ebfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ebf8:	2303      	movs	r3, #3
 800ebfa:	e048      	b.n	800ec8e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f003 0304 	and.w	r3, r3, #4
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d031      	beq.n	800ec6e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	69db      	ldr	r3, [r3, #28]
 800ec10:	f003 0308 	and.w	r3, r3, #8
 800ec14:	2b08      	cmp	r3, #8
 800ec16:	d110      	bne.n	800ec3a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	2208      	movs	r2, #8
 800ec1e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ec20:	68f8      	ldr	r0, [r7, #12]
 800ec22:	f000 f839 	bl	800ec98 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2208      	movs	r2, #8
 800ec2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2200      	movs	r2, #0
 800ec32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ec36:	2301      	movs	r3, #1
 800ec38:	e029      	b.n	800ec8e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	69db      	ldr	r3, [r3, #28]
 800ec40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec48:	d111      	bne.n	800ec6e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ec54:	68f8      	ldr	r0, [r7, #12]
 800ec56:	f000 f81f 	bl	800ec98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	2220      	movs	r2, #32
 800ec5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2200      	movs	r2, #0
 800ec66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ec6a:	2303      	movs	r3, #3
 800ec6c:	e00f      	b.n	800ec8e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	69da      	ldr	r2, [r3, #28]
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	4013      	ands	r3, r2
 800ec78:	68ba      	ldr	r2, [r7, #8]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	bf0c      	ite	eq
 800ec7e:	2301      	moveq	r3, #1
 800ec80:	2300      	movne	r3, #0
 800ec82:	b2db      	uxtb	r3, r3
 800ec84:	461a      	mov	r2, r3
 800ec86:	79fb      	ldrb	r3, [r7, #7]
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d0a6      	beq.n	800ebda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ec8c:	2300      	movs	r3, #0
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3710      	adds	r7, #16
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
	...

0800ec98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b095      	sub	sp, #84	; 0x54
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eca8:	e853 3f00 	ldrex	r3, [r3]
 800ecac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ecae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ecb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	461a      	mov	r2, r3
 800ecbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecbe:	643b      	str	r3, [r7, #64]	; 0x40
 800ecc0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ecc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ecc6:	e841 2300 	strex	r3, r2, [r1]
 800ecca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d1e6      	bne.n	800eca0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	3308      	adds	r3, #8
 800ecd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecda:	6a3b      	ldr	r3, [r7, #32]
 800ecdc:	e853 3f00 	ldrex	r3, [r3]
 800ece0:	61fb      	str	r3, [r7, #28]
   return(result);
 800ece2:	69fa      	ldr	r2, [r7, #28]
 800ece4:	4b1e      	ldr	r3, [pc, #120]	; (800ed60 <UART_EndRxTransfer+0xc8>)
 800ece6:	4013      	ands	r3, r2
 800ece8:	64bb      	str	r3, [r7, #72]	; 0x48
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	3308      	adds	r3, #8
 800ecf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ecf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ecf4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ecf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecfa:	e841 2300 	strex	r3, r2, [r1]
 800ecfe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ed00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d1e5      	bne.n	800ecd2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d118      	bne.n	800ed40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	e853 3f00 	ldrex	r3, [r3]
 800ed1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	f023 0310 	bic.w	r3, r3, #16
 800ed22:	647b      	str	r3, [r7, #68]	; 0x44
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	461a      	mov	r2, r3
 800ed2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed2c:	61bb      	str	r3, [r7, #24]
 800ed2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed30:	6979      	ldr	r1, [r7, #20]
 800ed32:	69ba      	ldr	r2, [r7, #24]
 800ed34:	e841 2300 	strex	r3, r2, [r1]
 800ed38:	613b      	str	r3, [r7, #16]
   return(result);
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d1e6      	bne.n	800ed0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2220      	movs	r2, #32
 800ed44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2200      	movs	r2, #0
 800ed52:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ed54:	bf00      	nop
 800ed56:	3754      	adds	r7, #84	; 0x54
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr
 800ed60:	effffffe 	.word	0xeffffffe

0800ed64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b084      	sub	sp, #16
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	2200      	movs	r2, #0
 800ed76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ed82:	68f8      	ldr	r0, [r7, #12]
 800ed84:	f7fe ff52 	bl	800dc2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed88:	bf00      	nop
 800ed8a:	3710      	adds	r7, #16
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}

0800ed90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b088      	sub	sp, #32
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	e853 3f00 	ldrex	r3, [r3]
 800eda4:	60bb      	str	r3, [r7, #8]
   return(result);
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800edac:	61fb      	str	r3, [r7, #28]
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	461a      	mov	r2, r3
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	61bb      	str	r3, [r7, #24]
 800edb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edba:	6979      	ldr	r1, [r7, #20]
 800edbc:	69ba      	ldr	r2, [r7, #24]
 800edbe:	e841 2300 	strex	r3, r2, [r1]
 800edc2:	613b      	str	r3, [r7, #16]
   return(result);
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d1e6      	bne.n	800ed98 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2220      	movs	r2, #32
 800edce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2200      	movs	r2, #0
 800edd6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f7fe ff1d 	bl	800dc18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800edde:	bf00      	nop
 800ede0:	3720      	adds	r7, #32
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ede6:	b480      	push	{r7}
 800ede8:	b083      	sub	sp, #12
 800edea:	af00      	add	r7, sp, #0
 800edec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800edee:	bf00      	nop
 800edf0:	370c      	adds	r7, #12
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr

0800edfa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800edfa:	b480      	push	{r7}
 800edfc:	b083      	sub	sp, #12
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ee02:	bf00      	nop
 800ee04:	370c      	adds	r7, #12
 800ee06:	46bd      	mov	sp, r7
 800ee08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0c:	4770      	bx	lr

0800ee0e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ee0e:	b480      	push	{r7}
 800ee10:	b083      	sub	sp, #12
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ee16:	bf00      	nop
 800ee18:	370c      	adds	r7, #12
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr

0800ee22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ee22:	b480      	push	{r7}
 800ee24:	b085      	sub	sp, #20
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d101      	bne.n	800ee38 <HAL_UARTEx_DisableFifoMode+0x16>
 800ee34:	2302      	movs	r3, #2
 800ee36:	e027      	b.n	800ee88 <HAL_UARTEx_DisableFifoMode+0x66>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2224      	movs	r2, #36	; 0x24
 800ee44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	681a      	ldr	r2, [r3, #0]
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	f022 0201 	bic.w	r2, r2, #1
 800ee5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ee66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	68fa      	ldr	r2, [r7, #12]
 800ee74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2220      	movs	r2, #32
 800ee7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2200      	movs	r2, #0
 800ee82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ee86:	2300      	movs	r3, #0
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3714      	adds	r7, #20
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr

0800ee94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b084      	sub	sp, #16
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d101      	bne.n	800eeac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eea8:	2302      	movs	r3, #2
 800eeaa:	e02d      	b.n	800ef08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2201      	movs	r2, #1
 800eeb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2224      	movs	r2, #36	; 0x24
 800eeb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	681a      	ldr	r2, [r3, #0]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f022 0201 	bic.w	r2, r2, #1
 800eed2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	689b      	ldr	r3, [r3, #8]
 800eeda:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	683a      	ldr	r2, [r7, #0]
 800eee4:	430a      	orrs	r2, r1
 800eee6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 f84f 	bl	800ef8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	68fa      	ldr	r2, [r7, #12]
 800eef4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2220      	movs	r2, #32
 800eefa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2200      	movs	r2, #0
 800ef02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef06:	2300      	movs	r3, #0
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3710      	adds	r7, #16
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}

0800ef10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ef20:	2b01      	cmp	r3, #1
 800ef22:	d101      	bne.n	800ef28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ef24:	2302      	movs	r3, #2
 800ef26:	e02d      	b.n	800ef84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	2224      	movs	r2, #36	; 0x24
 800ef34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	f022 0201 	bic.w	r2, r2, #1
 800ef4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	689b      	ldr	r3, [r3, #8]
 800ef56:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	683a      	ldr	r2, [r7, #0]
 800ef60:	430a      	orrs	r2, r1
 800ef62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 f811 	bl	800ef8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	68fa      	ldr	r2, [r7, #12]
 800ef70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2220      	movs	r2, #32
 800ef76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef82:	2300      	movs	r3, #0
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3710      	adds	r7, #16
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b085      	sub	sp, #20
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d108      	bne.n	800efae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2201      	movs	r2, #1
 800efa8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800efac:	e031      	b.n	800f012 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800efae:	2310      	movs	r3, #16
 800efb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800efb2:	2310      	movs	r3, #16
 800efb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	689b      	ldr	r3, [r3, #8]
 800efbc:	0e5b      	lsrs	r3, r3, #25
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	f003 0307 	and.w	r3, r3, #7
 800efc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	689b      	ldr	r3, [r3, #8]
 800efcc:	0f5b      	lsrs	r3, r3, #29
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	f003 0307 	and.w	r3, r3, #7
 800efd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800efd6:	7bbb      	ldrb	r3, [r7, #14]
 800efd8:	7b3a      	ldrb	r2, [r7, #12]
 800efda:	4911      	ldr	r1, [pc, #68]	; (800f020 <UARTEx_SetNbDataToProcess+0x94>)
 800efdc:	5c8a      	ldrb	r2, [r1, r2]
 800efde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800efe2:	7b3a      	ldrb	r2, [r7, #12]
 800efe4:	490f      	ldr	r1, [pc, #60]	; (800f024 <UARTEx_SetNbDataToProcess+0x98>)
 800efe6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800efe8:	fb93 f3f2 	sdiv	r3, r3, r2
 800efec:	b29a      	uxth	r2, r3
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eff4:	7bfb      	ldrb	r3, [r7, #15]
 800eff6:	7b7a      	ldrb	r2, [r7, #13]
 800eff8:	4909      	ldr	r1, [pc, #36]	; (800f020 <UARTEx_SetNbDataToProcess+0x94>)
 800effa:	5c8a      	ldrb	r2, [r1, r2]
 800effc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f000:	7b7a      	ldrb	r2, [r7, #13]
 800f002:	4908      	ldr	r1, [pc, #32]	; (800f024 <UARTEx_SetNbDataToProcess+0x98>)
 800f004:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f006:	fb93 f3f2 	sdiv	r3, r3, r2
 800f00a:	b29a      	uxth	r2, r3
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f012:	bf00      	nop
 800f014:	3714      	adds	r7, #20
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr
 800f01e:	bf00      	nop
 800f020:	08010798 	.word	0x08010798
 800f024:	080107a0 	.word	0x080107a0

0800f028 <__errno>:
 800f028:	4b01      	ldr	r3, [pc, #4]	; (800f030 <__errno+0x8>)
 800f02a:	6818      	ldr	r0, [r3, #0]
 800f02c:	4770      	bx	lr
 800f02e:	bf00      	nop
 800f030:	24000054 	.word	0x24000054

0800f034 <__libc_init_array>:
 800f034:	b570      	push	{r4, r5, r6, lr}
 800f036:	4d0d      	ldr	r5, [pc, #52]	; (800f06c <__libc_init_array+0x38>)
 800f038:	4c0d      	ldr	r4, [pc, #52]	; (800f070 <__libc_init_array+0x3c>)
 800f03a:	1b64      	subs	r4, r4, r5
 800f03c:	10a4      	asrs	r4, r4, #2
 800f03e:	2600      	movs	r6, #0
 800f040:	42a6      	cmp	r6, r4
 800f042:	d109      	bne.n	800f058 <__libc_init_array+0x24>
 800f044:	4d0b      	ldr	r5, [pc, #44]	; (800f074 <__libc_init_array+0x40>)
 800f046:	4c0c      	ldr	r4, [pc, #48]	; (800f078 <__libc_init_array+0x44>)
 800f048:	f001 f87c 	bl	8010144 <_init>
 800f04c:	1b64      	subs	r4, r4, r5
 800f04e:	10a4      	asrs	r4, r4, #2
 800f050:	2600      	movs	r6, #0
 800f052:	42a6      	cmp	r6, r4
 800f054:	d105      	bne.n	800f062 <__libc_init_array+0x2e>
 800f056:	bd70      	pop	{r4, r5, r6, pc}
 800f058:	f855 3b04 	ldr.w	r3, [r5], #4
 800f05c:	4798      	blx	r3
 800f05e:	3601      	adds	r6, #1
 800f060:	e7ee      	b.n	800f040 <__libc_init_array+0xc>
 800f062:	f855 3b04 	ldr.w	r3, [r5], #4
 800f066:	4798      	blx	r3
 800f068:	3601      	adds	r6, #1
 800f06a:	e7f2      	b.n	800f052 <__libc_init_array+0x1e>
 800f06c:	08010848 	.word	0x08010848
 800f070:	08010848 	.word	0x08010848
 800f074:	08010848 	.word	0x08010848
 800f078:	0801084c 	.word	0x0801084c

0800f07c <memset>:
 800f07c:	4402      	add	r2, r0
 800f07e:	4603      	mov	r3, r0
 800f080:	4293      	cmp	r3, r2
 800f082:	d100      	bne.n	800f086 <memset+0xa>
 800f084:	4770      	bx	lr
 800f086:	f803 1b01 	strb.w	r1, [r3], #1
 800f08a:	e7f9      	b.n	800f080 <memset+0x4>

0800f08c <iprintf>:
 800f08c:	b40f      	push	{r0, r1, r2, r3}
 800f08e:	4b0a      	ldr	r3, [pc, #40]	; (800f0b8 <iprintf+0x2c>)
 800f090:	b513      	push	{r0, r1, r4, lr}
 800f092:	681c      	ldr	r4, [r3, #0]
 800f094:	b124      	cbz	r4, 800f0a0 <iprintf+0x14>
 800f096:	69a3      	ldr	r3, [r4, #24]
 800f098:	b913      	cbnz	r3, 800f0a0 <iprintf+0x14>
 800f09a:	4620      	mov	r0, r4
 800f09c:	f000 f9ee 	bl	800f47c <__sinit>
 800f0a0:	ab05      	add	r3, sp, #20
 800f0a2:	9a04      	ldr	r2, [sp, #16]
 800f0a4:	68a1      	ldr	r1, [r4, #8]
 800f0a6:	9301      	str	r3, [sp, #4]
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	f000 fbff 	bl	800f8ac <_vfiprintf_r>
 800f0ae:	b002      	add	sp, #8
 800f0b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0b4:	b004      	add	sp, #16
 800f0b6:	4770      	bx	lr
 800f0b8:	24000054 	.word	0x24000054

0800f0bc <setvbuf>:
 800f0bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f0c0:	461d      	mov	r5, r3
 800f0c2:	4b5d      	ldr	r3, [pc, #372]	; (800f238 <setvbuf+0x17c>)
 800f0c4:	681f      	ldr	r7, [r3, #0]
 800f0c6:	4604      	mov	r4, r0
 800f0c8:	460e      	mov	r6, r1
 800f0ca:	4690      	mov	r8, r2
 800f0cc:	b127      	cbz	r7, 800f0d8 <setvbuf+0x1c>
 800f0ce:	69bb      	ldr	r3, [r7, #24]
 800f0d0:	b913      	cbnz	r3, 800f0d8 <setvbuf+0x1c>
 800f0d2:	4638      	mov	r0, r7
 800f0d4:	f000 f9d2 	bl	800f47c <__sinit>
 800f0d8:	4b58      	ldr	r3, [pc, #352]	; (800f23c <setvbuf+0x180>)
 800f0da:	429c      	cmp	r4, r3
 800f0dc:	d167      	bne.n	800f1ae <setvbuf+0xf2>
 800f0de:	687c      	ldr	r4, [r7, #4]
 800f0e0:	f1b8 0f02 	cmp.w	r8, #2
 800f0e4:	d006      	beq.n	800f0f4 <setvbuf+0x38>
 800f0e6:	f1b8 0f01 	cmp.w	r8, #1
 800f0ea:	f200 809f 	bhi.w	800f22c <setvbuf+0x170>
 800f0ee:	2d00      	cmp	r5, #0
 800f0f0:	f2c0 809c 	blt.w	800f22c <setvbuf+0x170>
 800f0f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f0f6:	07db      	lsls	r3, r3, #31
 800f0f8:	d405      	bmi.n	800f106 <setvbuf+0x4a>
 800f0fa:	89a3      	ldrh	r3, [r4, #12]
 800f0fc:	0598      	lsls	r0, r3, #22
 800f0fe:	d402      	bmi.n	800f106 <setvbuf+0x4a>
 800f100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f102:	f000 fa59 	bl	800f5b8 <__retarget_lock_acquire_recursive>
 800f106:	4621      	mov	r1, r4
 800f108:	4638      	mov	r0, r7
 800f10a:	f000 f923 	bl	800f354 <_fflush_r>
 800f10e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f110:	b141      	cbz	r1, 800f124 <setvbuf+0x68>
 800f112:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f116:	4299      	cmp	r1, r3
 800f118:	d002      	beq.n	800f120 <setvbuf+0x64>
 800f11a:	4638      	mov	r0, r7
 800f11c:	f000 fabc 	bl	800f698 <_free_r>
 800f120:	2300      	movs	r3, #0
 800f122:	6363      	str	r3, [r4, #52]	; 0x34
 800f124:	2300      	movs	r3, #0
 800f126:	61a3      	str	r3, [r4, #24]
 800f128:	6063      	str	r3, [r4, #4]
 800f12a:	89a3      	ldrh	r3, [r4, #12]
 800f12c:	0619      	lsls	r1, r3, #24
 800f12e:	d503      	bpl.n	800f138 <setvbuf+0x7c>
 800f130:	6921      	ldr	r1, [r4, #16]
 800f132:	4638      	mov	r0, r7
 800f134:	f000 fab0 	bl	800f698 <_free_r>
 800f138:	89a3      	ldrh	r3, [r4, #12]
 800f13a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800f13e:	f023 0303 	bic.w	r3, r3, #3
 800f142:	f1b8 0f02 	cmp.w	r8, #2
 800f146:	81a3      	strh	r3, [r4, #12]
 800f148:	d06c      	beq.n	800f224 <setvbuf+0x168>
 800f14a:	ab01      	add	r3, sp, #4
 800f14c:	466a      	mov	r2, sp
 800f14e:	4621      	mov	r1, r4
 800f150:	4638      	mov	r0, r7
 800f152:	f000 fa33 	bl	800f5bc <__swhatbuf_r>
 800f156:	89a3      	ldrh	r3, [r4, #12]
 800f158:	4318      	orrs	r0, r3
 800f15a:	81a0      	strh	r0, [r4, #12]
 800f15c:	2d00      	cmp	r5, #0
 800f15e:	d130      	bne.n	800f1c2 <setvbuf+0x106>
 800f160:	9d00      	ldr	r5, [sp, #0]
 800f162:	4628      	mov	r0, r5
 800f164:	f000 fa90 	bl	800f688 <malloc>
 800f168:	4606      	mov	r6, r0
 800f16a:	2800      	cmp	r0, #0
 800f16c:	d155      	bne.n	800f21a <setvbuf+0x15e>
 800f16e:	f8dd 9000 	ldr.w	r9, [sp]
 800f172:	45a9      	cmp	r9, r5
 800f174:	d14a      	bne.n	800f20c <setvbuf+0x150>
 800f176:	f04f 35ff 	mov.w	r5, #4294967295
 800f17a:	2200      	movs	r2, #0
 800f17c:	60a2      	str	r2, [r4, #8]
 800f17e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800f182:	6022      	str	r2, [r4, #0]
 800f184:	6122      	str	r2, [r4, #16]
 800f186:	2201      	movs	r2, #1
 800f188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f18c:	6162      	str	r2, [r4, #20]
 800f18e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f190:	f043 0302 	orr.w	r3, r3, #2
 800f194:	07d2      	lsls	r2, r2, #31
 800f196:	81a3      	strh	r3, [r4, #12]
 800f198:	d405      	bmi.n	800f1a6 <setvbuf+0xea>
 800f19a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800f19e:	d102      	bne.n	800f1a6 <setvbuf+0xea>
 800f1a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1a2:	f000 fa0a 	bl	800f5ba <__retarget_lock_release_recursive>
 800f1a6:	4628      	mov	r0, r5
 800f1a8:	b003      	add	sp, #12
 800f1aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1ae:	4b24      	ldr	r3, [pc, #144]	; (800f240 <setvbuf+0x184>)
 800f1b0:	429c      	cmp	r4, r3
 800f1b2:	d101      	bne.n	800f1b8 <setvbuf+0xfc>
 800f1b4:	68bc      	ldr	r4, [r7, #8]
 800f1b6:	e793      	b.n	800f0e0 <setvbuf+0x24>
 800f1b8:	4b22      	ldr	r3, [pc, #136]	; (800f244 <setvbuf+0x188>)
 800f1ba:	429c      	cmp	r4, r3
 800f1bc:	bf08      	it	eq
 800f1be:	68fc      	ldreq	r4, [r7, #12]
 800f1c0:	e78e      	b.n	800f0e0 <setvbuf+0x24>
 800f1c2:	2e00      	cmp	r6, #0
 800f1c4:	d0cd      	beq.n	800f162 <setvbuf+0xa6>
 800f1c6:	69bb      	ldr	r3, [r7, #24]
 800f1c8:	b913      	cbnz	r3, 800f1d0 <setvbuf+0x114>
 800f1ca:	4638      	mov	r0, r7
 800f1cc:	f000 f956 	bl	800f47c <__sinit>
 800f1d0:	f1b8 0f01 	cmp.w	r8, #1
 800f1d4:	bf08      	it	eq
 800f1d6:	89a3      	ldrheq	r3, [r4, #12]
 800f1d8:	6026      	str	r6, [r4, #0]
 800f1da:	bf04      	itt	eq
 800f1dc:	f043 0301 	orreq.w	r3, r3, #1
 800f1e0:	81a3      	strheq	r3, [r4, #12]
 800f1e2:	89a2      	ldrh	r2, [r4, #12]
 800f1e4:	f012 0308 	ands.w	r3, r2, #8
 800f1e8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f1ec:	d01c      	beq.n	800f228 <setvbuf+0x16c>
 800f1ee:	07d3      	lsls	r3, r2, #31
 800f1f0:	bf41      	itttt	mi
 800f1f2:	2300      	movmi	r3, #0
 800f1f4:	426d      	negmi	r5, r5
 800f1f6:	60a3      	strmi	r3, [r4, #8]
 800f1f8:	61a5      	strmi	r5, [r4, #24]
 800f1fa:	bf58      	it	pl
 800f1fc:	60a5      	strpl	r5, [r4, #8]
 800f1fe:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800f200:	f015 0501 	ands.w	r5, r5, #1
 800f204:	d115      	bne.n	800f232 <setvbuf+0x176>
 800f206:	f412 7f00 	tst.w	r2, #512	; 0x200
 800f20a:	e7c8      	b.n	800f19e <setvbuf+0xe2>
 800f20c:	4648      	mov	r0, r9
 800f20e:	f000 fa3b 	bl	800f688 <malloc>
 800f212:	4606      	mov	r6, r0
 800f214:	2800      	cmp	r0, #0
 800f216:	d0ae      	beq.n	800f176 <setvbuf+0xba>
 800f218:	464d      	mov	r5, r9
 800f21a:	89a3      	ldrh	r3, [r4, #12]
 800f21c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f220:	81a3      	strh	r3, [r4, #12]
 800f222:	e7d0      	b.n	800f1c6 <setvbuf+0x10a>
 800f224:	2500      	movs	r5, #0
 800f226:	e7a8      	b.n	800f17a <setvbuf+0xbe>
 800f228:	60a3      	str	r3, [r4, #8]
 800f22a:	e7e8      	b.n	800f1fe <setvbuf+0x142>
 800f22c:	f04f 35ff 	mov.w	r5, #4294967295
 800f230:	e7b9      	b.n	800f1a6 <setvbuf+0xea>
 800f232:	2500      	movs	r5, #0
 800f234:	e7b7      	b.n	800f1a6 <setvbuf+0xea>
 800f236:	bf00      	nop
 800f238:	24000054 	.word	0x24000054
 800f23c:	080107cc 	.word	0x080107cc
 800f240:	080107ec 	.word	0x080107ec
 800f244:	080107ac 	.word	0x080107ac

0800f248 <__sflush_r>:
 800f248:	898a      	ldrh	r2, [r1, #12]
 800f24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f24e:	4605      	mov	r5, r0
 800f250:	0710      	lsls	r0, r2, #28
 800f252:	460c      	mov	r4, r1
 800f254:	d458      	bmi.n	800f308 <__sflush_r+0xc0>
 800f256:	684b      	ldr	r3, [r1, #4]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	dc05      	bgt.n	800f268 <__sflush_r+0x20>
 800f25c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f25e:	2b00      	cmp	r3, #0
 800f260:	dc02      	bgt.n	800f268 <__sflush_r+0x20>
 800f262:	2000      	movs	r0, #0
 800f264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f26a:	2e00      	cmp	r6, #0
 800f26c:	d0f9      	beq.n	800f262 <__sflush_r+0x1a>
 800f26e:	2300      	movs	r3, #0
 800f270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f274:	682f      	ldr	r7, [r5, #0]
 800f276:	602b      	str	r3, [r5, #0]
 800f278:	d032      	beq.n	800f2e0 <__sflush_r+0x98>
 800f27a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f27c:	89a3      	ldrh	r3, [r4, #12]
 800f27e:	075a      	lsls	r2, r3, #29
 800f280:	d505      	bpl.n	800f28e <__sflush_r+0x46>
 800f282:	6863      	ldr	r3, [r4, #4]
 800f284:	1ac0      	subs	r0, r0, r3
 800f286:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f288:	b10b      	cbz	r3, 800f28e <__sflush_r+0x46>
 800f28a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f28c:	1ac0      	subs	r0, r0, r3
 800f28e:	2300      	movs	r3, #0
 800f290:	4602      	mov	r2, r0
 800f292:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f294:	6a21      	ldr	r1, [r4, #32]
 800f296:	4628      	mov	r0, r5
 800f298:	47b0      	blx	r6
 800f29a:	1c43      	adds	r3, r0, #1
 800f29c:	89a3      	ldrh	r3, [r4, #12]
 800f29e:	d106      	bne.n	800f2ae <__sflush_r+0x66>
 800f2a0:	6829      	ldr	r1, [r5, #0]
 800f2a2:	291d      	cmp	r1, #29
 800f2a4:	d82c      	bhi.n	800f300 <__sflush_r+0xb8>
 800f2a6:	4a2a      	ldr	r2, [pc, #168]	; (800f350 <__sflush_r+0x108>)
 800f2a8:	40ca      	lsrs	r2, r1
 800f2aa:	07d6      	lsls	r6, r2, #31
 800f2ac:	d528      	bpl.n	800f300 <__sflush_r+0xb8>
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	6062      	str	r2, [r4, #4]
 800f2b2:	04d9      	lsls	r1, r3, #19
 800f2b4:	6922      	ldr	r2, [r4, #16]
 800f2b6:	6022      	str	r2, [r4, #0]
 800f2b8:	d504      	bpl.n	800f2c4 <__sflush_r+0x7c>
 800f2ba:	1c42      	adds	r2, r0, #1
 800f2bc:	d101      	bne.n	800f2c2 <__sflush_r+0x7a>
 800f2be:	682b      	ldr	r3, [r5, #0]
 800f2c0:	b903      	cbnz	r3, 800f2c4 <__sflush_r+0x7c>
 800f2c2:	6560      	str	r0, [r4, #84]	; 0x54
 800f2c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2c6:	602f      	str	r7, [r5, #0]
 800f2c8:	2900      	cmp	r1, #0
 800f2ca:	d0ca      	beq.n	800f262 <__sflush_r+0x1a>
 800f2cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f2d0:	4299      	cmp	r1, r3
 800f2d2:	d002      	beq.n	800f2da <__sflush_r+0x92>
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	f000 f9df 	bl	800f698 <_free_r>
 800f2da:	2000      	movs	r0, #0
 800f2dc:	6360      	str	r0, [r4, #52]	; 0x34
 800f2de:	e7c1      	b.n	800f264 <__sflush_r+0x1c>
 800f2e0:	6a21      	ldr	r1, [r4, #32]
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	47b0      	blx	r6
 800f2e8:	1c41      	adds	r1, r0, #1
 800f2ea:	d1c7      	bne.n	800f27c <__sflush_r+0x34>
 800f2ec:	682b      	ldr	r3, [r5, #0]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d0c4      	beq.n	800f27c <__sflush_r+0x34>
 800f2f2:	2b1d      	cmp	r3, #29
 800f2f4:	d001      	beq.n	800f2fa <__sflush_r+0xb2>
 800f2f6:	2b16      	cmp	r3, #22
 800f2f8:	d101      	bne.n	800f2fe <__sflush_r+0xb6>
 800f2fa:	602f      	str	r7, [r5, #0]
 800f2fc:	e7b1      	b.n	800f262 <__sflush_r+0x1a>
 800f2fe:	89a3      	ldrh	r3, [r4, #12]
 800f300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f304:	81a3      	strh	r3, [r4, #12]
 800f306:	e7ad      	b.n	800f264 <__sflush_r+0x1c>
 800f308:	690f      	ldr	r7, [r1, #16]
 800f30a:	2f00      	cmp	r7, #0
 800f30c:	d0a9      	beq.n	800f262 <__sflush_r+0x1a>
 800f30e:	0793      	lsls	r3, r2, #30
 800f310:	680e      	ldr	r6, [r1, #0]
 800f312:	bf08      	it	eq
 800f314:	694b      	ldreq	r3, [r1, #20]
 800f316:	600f      	str	r7, [r1, #0]
 800f318:	bf18      	it	ne
 800f31a:	2300      	movne	r3, #0
 800f31c:	eba6 0807 	sub.w	r8, r6, r7
 800f320:	608b      	str	r3, [r1, #8]
 800f322:	f1b8 0f00 	cmp.w	r8, #0
 800f326:	dd9c      	ble.n	800f262 <__sflush_r+0x1a>
 800f328:	6a21      	ldr	r1, [r4, #32]
 800f32a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f32c:	4643      	mov	r3, r8
 800f32e:	463a      	mov	r2, r7
 800f330:	4628      	mov	r0, r5
 800f332:	47b0      	blx	r6
 800f334:	2800      	cmp	r0, #0
 800f336:	dc06      	bgt.n	800f346 <__sflush_r+0xfe>
 800f338:	89a3      	ldrh	r3, [r4, #12]
 800f33a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f33e:	81a3      	strh	r3, [r4, #12]
 800f340:	f04f 30ff 	mov.w	r0, #4294967295
 800f344:	e78e      	b.n	800f264 <__sflush_r+0x1c>
 800f346:	4407      	add	r7, r0
 800f348:	eba8 0800 	sub.w	r8, r8, r0
 800f34c:	e7e9      	b.n	800f322 <__sflush_r+0xda>
 800f34e:	bf00      	nop
 800f350:	20400001 	.word	0x20400001

0800f354 <_fflush_r>:
 800f354:	b538      	push	{r3, r4, r5, lr}
 800f356:	690b      	ldr	r3, [r1, #16]
 800f358:	4605      	mov	r5, r0
 800f35a:	460c      	mov	r4, r1
 800f35c:	b913      	cbnz	r3, 800f364 <_fflush_r+0x10>
 800f35e:	2500      	movs	r5, #0
 800f360:	4628      	mov	r0, r5
 800f362:	bd38      	pop	{r3, r4, r5, pc}
 800f364:	b118      	cbz	r0, 800f36e <_fflush_r+0x1a>
 800f366:	6983      	ldr	r3, [r0, #24]
 800f368:	b90b      	cbnz	r3, 800f36e <_fflush_r+0x1a>
 800f36a:	f000 f887 	bl	800f47c <__sinit>
 800f36e:	4b14      	ldr	r3, [pc, #80]	; (800f3c0 <_fflush_r+0x6c>)
 800f370:	429c      	cmp	r4, r3
 800f372:	d11b      	bne.n	800f3ac <_fflush_r+0x58>
 800f374:	686c      	ldr	r4, [r5, #4]
 800f376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d0ef      	beq.n	800f35e <_fflush_r+0xa>
 800f37e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f380:	07d0      	lsls	r0, r2, #31
 800f382:	d404      	bmi.n	800f38e <_fflush_r+0x3a>
 800f384:	0599      	lsls	r1, r3, #22
 800f386:	d402      	bmi.n	800f38e <_fflush_r+0x3a>
 800f388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f38a:	f000 f915 	bl	800f5b8 <__retarget_lock_acquire_recursive>
 800f38e:	4628      	mov	r0, r5
 800f390:	4621      	mov	r1, r4
 800f392:	f7ff ff59 	bl	800f248 <__sflush_r>
 800f396:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f398:	07da      	lsls	r2, r3, #31
 800f39a:	4605      	mov	r5, r0
 800f39c:	d4e0      	bmi.n	800f360 <_fflush_r+0xc>
 800f39e:	89a3      	ldrh	r3, [r4, #12]
 800f3a0:	059b      	lsls	r3, r3, #22
 800f3a2:	d4dd      	bmi.n	800f360 <_fflush_r+0xc>
 800f3a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3a6:	f000 f908 	bl	800f5ba <__retarget_lock_release_recursive>
 800f3aa:	e7d9      	b.n	800f360 <_fflush_r+0xc>
 800f3ac:	4b05      	ldr	r3, [pc, #20]	; (800f3c4 <_fflush_r+0x70>)
 800f3ae:	429c      	cmp	r4, r3
 800f3b0:	d101      	bne.n	800f3b6 <_fflush_r+0x62>
 800f3b2:	68ac      	ldr	r4, [r5, #8]
 800f3b4:	e7df      	b.n	800f376 <_fflush_r+0x22>
 800f3b6:	4b04      	ldr	r3, [pc, #16]	; (800f3c8 <_fflush_r+0x74>)
 800f3b8:	429c      	cmp	r4, r3
 800f3ba:	bf08      	it	eq
 800f3bc:	68ec      	ldreq	r4, [r5, #12]
 800f3be:	e7da      	b.n	800f376 <_fflush_r+0x22>
 800f3c0:	080107cc 	.word	0x080107cc
 800f3c4:	080107ec 	.word	0x080107ec
 800f3c8:	080107ac 	.word	0x080107ac

0800f3cc <std>:
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	b510      	push	{r4, lr}
 800f3d0:	4604      	mov	r4, r0
 800f3d2:	e9c0 3300 	strd	r3, r3, [r0]
 800f3d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f3da:	6083      	str	r3, [r0, #8]
 800f3dc:	8181      	strh	r1, [r0, #12]
 800f3de:	6643      	str	r3, [r0, #100]	; 0x64
 800f3e0:	81c2      	strh	r2, [r0, #14]
 800f3e2:	6183      	str	r3, [r0, #24]
 800f3e4:	4619      	mov	r1, r3
 800f3e6:	2208      	movs	r2, #8
 800f3e8:	305c      	adds	r0, #92	; 0x5c
 800f3ea:	f7ff fe47 	bl	800f07c <memset>
 800f3ee:	4b05      	ldr	r3, [pc, #20]	; (800f404 <std+0x38>)
 800f3f0:	6263      	str	r3, [r4, #36]	; 0x24
 800f3f2:	4b05      	ldr	r3, [pc, #20]	; (800f408 <std+0x3c>)
 800f3f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800f3f6:	4b05      	ldr	r3, [pc, #20]	; (800f40c <std+0x40>)
 800f3f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f3fa:	4b05      	ldr	r3, [pc, #20]	; (800f410 <std+0x44>)
 800f3fc:	6224      	str	r4, [r4, #32]
 800f3fe:	6323      	str	r3, [r4, #48]	; 0x30
 800f400:	bd10      	pop	{r4, pc}
 800f402:	bf00      	nop
 800f404:	0800fe55 	.word	0x0800fe55
 800f408:	0800fe77 	.word	0x0800fe77
 800f40c:	0800feaf 	.word	0x0800feaf
 800f410:	0800fed3 	.word	0x0800fed3

0800f414 <_cleanup_r>:
 800f414:	4901      	ldr	r1, [pc, #4]	; (800f41c <_cleanup_r+0x8>)
 800f416:	f000 b8af 	b.w	800f578 <_fwalk_reent>
 800f41a:	bf00      	nop
 800f41c:	0800f355 	.word	0x0800f355

0800f420 <__sfmoreglue>:
 800f420:	b570      	push	{r4, r5, r6, lr}
 800f422:	2268      	movs	r2, #104	; 0x68
 800f424:	1e4d      	subs	r5, r1, #1
 800f426:	4355      	muls	r5, r2
 800f428:	460e      	mov	r6, r1
 800f42a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f42e:	f000 f99f 	bl	800f770 <_malloc_r>
 800f432:	4604      	mov	r4, r0
 800f434:	b140      	cbz	r0, 800f448 <__sfmoreglue+0x28>
 800f436:	2100      	movs	r1, #0
 800f438:	e9c0 1600 	strd	r1, r6, [r0]
 800f43c:	300c      	adds	r0, #12
 800f43e:	60a0      	str	r0, [r4, #8]
 800f440:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f444:	f7ff fe1a 	bl	800f07c <memset>
 800f448:	4620      	mov	r0, r4
 800f44a:	bd70      	pop	{r4, r5, r6, pc}

0800f44c <__sfp_lock_acquire>:
 800f44c:	4801      	ldr	r0, [pc, #4]	; (800f454 <__sfp_lock_acquire+0x8>)
 800f44e:	f000 b8b3 	b.w	800f5b8 <__retarget_lock_acquire_recursive>
 800f452:	bf00      	nop
 800f454:	240e0039 	.word	0x240e0039

0800f458 <__sfp_lock_release>:
 800f458:	4801      	ldr	r0, [pc, #4]	; (800f460 <__sfp_lock_release+0x8>)
 800f45a:	f000 b8ae 	b.w	800f5ba <__retarget_lock_release_recursive>
 800f45e:	bf00      	nop
 800f460:	240e0039 	.word	0x240e0039

0800f464 <__sinit_lock_acquire>:
 800f464:	4801      	ldr	r0, [pc, #4]	; (800f46c <__sinit_lock_acquire+0x8>)
 800f466:	f000 b8a7 	b.w	800f5b8 <__retarget_lock_acquire_recursive>
 800f46a:	bf00      	nop
 800f46c:	240e003a 	.word	0x240e003a

0800f470 <__sinit_lock_release>:
 800f470:	4801      	ldr	r0, [pc, #4]	; (800f478 <__sinit_lock_release+0x8>)
 800f472:	f000 b8a2 	b.w	800f5ba <__retarget_lock_release_recursive>
 800f476:	bf00      	nop
 800f478:	240e003a 	.word	0x240e003a

0800f47c <__sinit>:
 800f47c:	b510      	push	{r4, lr}
 800f47e:	4604      	mov	r4, r0
 800f480:	f7ff fff0 	bl	800f464 <__sinit_lock_acquire>
 800f484:	69a3      	ldr	r3, [r4, #24]
 800f486:	b11b      	cbz	r3, 800f490 <__sinit+0x14>
 800f488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f48c:	f7ff bff0 	b.w	800f470 <__sinit_lock_release>
 800f490:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f494:	6523      	str	r3, [r4, #80]	; 0x50
 800f496:	4b13      	ldr	r3, [pc, #76]	; (800f4e4 <__sinit+0x68>)
 800f498:	4a13      	ldr	r2, [pc, #76]	; (800f4e8 <__sinit+0x6c>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f49e:	42a3      	cmp	r3, r4
 800f4a0:	bf04      	itt	eq
 800f4a2:	2301      	moveq	r3, #1
 800f4a4:	61a3      	streq	r3, [r4, #24]
 800f4a6:	4620      	mov	r0, r4
 800f4a8:	f000 f820 	bl	800f4ec <__sfp>
 800f4ac:	6060      	str	r0, [r4, #4]
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	f000 f81c 	bl	800f4ec <__sfp>
 800f4b4:	60a0      	str	r0, [r4, #8]
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	f000 f818 	bl	800f4ec <__sfp>
 800f4bc:	2200      	movs	r2, #0
 800f4be:	60e0      	str	r0, [r4, #12]
 800f4c0:	2104      	movs	r1, #4
 800f4c2:	6860      	ldr	r0, [r4, #4]
 800f4c4:	f7ff ff82 	bl	800f3cc <std>
 800f4c8:	68a0      	ldr	r0, [r4, #8]
 800f4ca:	2201      	movs	r2, #1
 800f4cc:	2109      	movs	r1, #9
 800f4ce:	f7ff ff7d 	bl	800f3cc <std>
 800f4d2:	68e0      	ldr	r0, [r4, #12]
 800f4d4:	2202      	movs	r2, #2
 800f4d6:	2112      	movs	r1, #18
 800f4d8:	f7ff ff78 	bl	800f3cc <std>
 800f4dc:	2301      	movs	r3, #1
 800f4de:	61a3      	str	r3, [r4, #24]
 800f4e0:	e7d2      	b.n	800f488 <__sinit+0xc>
 800f4e2:	bf00      	nop
 800f4e4:	080107a8 	.word	0x080107a8
 800f4e8:	0800f415 	.word	0x0800f415

0800f4ec <__sfp>:
 800f4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ee:	4607      	mov	r7, r0
 800f4f0:	f7ff ffac 	bl	800f44c <__sfp_lock_acquire>
 800f4f4:	4b1e      	ldr	r3, [pc, #120]	; (800f570 <__sfp+0x84>)
 800f4f6:	681e      	ldr	r6, [r3, #0]
 800f4f8:	69b3      	ldr	r3, [r6, #24]
 800f4fa:	b913      	cbnz	r3, 800f502 <__sfp+0x16>
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	f7ff ffbd 	bl	800f47c <__sinit>
 800f502:	3648      	adds	r6, #72	; 0x48
 800f504:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f508:	3b01      	subs	r3, #1
 800f50a:	d503      	bpl.n	800f514 <__sfp+0x28>
 800f50c:	6833      	ldr	r3, [r6, #0]
 800f50e:	b30b      	cbz	r3, 800f554 <__sfp+0x68>
 800f510:	6836      	ldr	r6, [r6, #0]
 800f512:	e7f7      	b.n	800f504 <__sfp+0x18>
 800f514:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f518:	b9d5      	cbnz	r5, 800f550 <__sfp+0x64>
 800f51a:	4b16      	ldr	r3, [pc, #88]	; (800f574 <__sfp+0x88>)
 800f51c:	60e3      	str	r3, [r4, #12]
 800f51e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f522:	6665      	str	r5, [r4, #100]	; 0x64
 800f524:	f000 f847 	bl	800f5b6 <__retarget_lock_init_recursive>
 800f528:	f7ff ff96 	bl	800f458 <__sfp_lock_release>
 800f52c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f530:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f534:	6025      	str	r5, [r4, #0]
 800f536:	61a5      	str	r5, [r4, #24]
 800f538:	2208      	movs	r2, #8
 800f53a:	4629      	mov	r1, r5
 800f53c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f540:	f7ff fd9c 	bl	800f07c <memset>
 800f544:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f548:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f54c:	4620      	mov	r0, r4
 800f54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f550:	3468      	adds	r4, #104	; 0x68
 800f552:	e7d9      	b.n	800f508 <__sfp+0x1c>
 800f554:	2104      	movs	r1, #4
 800f556:	4638      	mov	r0, r7
 800f558:	f7ff ff62 	bl	800f420 <__sfmoreglue>
 800f55c:	4604      	mov	r4, r0
 800f55e:	6030      	str	r0, [r6, #0]
 800f560:	2800      	cmp	r0, #0
 800f562:	d1d5      	bne.n	800f510 <__sfp+0x24>
 800f564:	f7ff ff78 	bl	800f458 <__sfp_lock_release>
 800f568:	230c      	movs	r3, #12
 800f56a:	603b      	str	r3, [r7, #0]
 800f56c:	e7ee      	b.n	800f54c <__sfp+0x60>
 800f56e:	bf00      	nop
 800f570:	080107a8 	.word	0x080107a8
 800f574:	ffff0001 	.word	0xffff0001

0800f578 <_fwalk_reent>:
 800f578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f57c:	4606      	mov	r6, r0
 800f57e:	4688      	mov	r8, r1
 800f580:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f584:	2700      	movs	r7, #0
 800f586:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f58a:	f1b9 0901 	subs.w	r9, r9, #1
 800f58e:	d505      	bpl.n	800f59c <_fwalk_reent+0x24>
 800f590:	6824      	ldr	r4, [r4, #0]
 800f592:	2c00      	cmp	r4, #0
 800f594:	d1f7      	bne.n	800f586 <_fwalk_reent+0xe>
 800f596:	4638      	mov	r0, r7
 800f598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f59c:	89ab      	ldrh	r3, [r5, #12]
 800f59e:	2b01      	cmp	r3, #1
 800f5a0:	d907      	bls.n	800f5b2 <_fwalk_reent+0x3a>
 800f5a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	d003      	beq.n	800f5b2 <_fwalk_reent+0x3a>
 800f5aa:	4629      	mov	r1, r5
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	47c0      	blx	r8
 800f5b0:	4307      	orrs	r7, r0
 800f5b2:	3568      	adds	r5, #104	; 0x68
 800f5b4:	e7e9      	b.n	800f58a <_fwalk_reent+0x12>

0800f5b6 <__retarget_lock_init_recursive>:
 800f5b6:	4770      	bx	lr

0800f5b8 <__retarget_lock_acquire_recursive>:
 800f5b8:	4770      	bx	lr

0800f5ba <__retarget_lock_release_recursive>:
 800f5ba:	4770      	bx	lr

0800f5bc <__swhatbuf_r>:
 800f5bc:	b570      	push	{r4, r5, r6, lr}
 800f5be:	460e      	mov	r6, r1
 800f5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5c4:	2900      	cmp	r1, #0
 800f5c6:	b096      	sub	sp, #88	; 0x58
 800f5c8:	4614      	mov	r4, r2
 800f5ca:	461d      	mov	r5, r3
 800f5cc:	da08      	bge.n	800f5e0 <__swhatbuf_r+0x24>
 800f5ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	602a      	str	r2, [r5, #0]
 800f5d6:	061a      	lsls	r2, r3, #24
 800f5d8:	d410      	bmi.n	800f5fc <__swhatbuf_r+0x40>
 800f5da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5de:	e00e      	b.n	800f5fe <__swhatbuf_r+0x42>
 800f5e0:	466a      	mov	r2, sp
 800f5e2:	f000 fd5d 	bl	80100a0 <_fstat_r>
 800f5e6:	2800      	cmp	r0, #0
 800f5e8:	dbf1      	blt.n	800f5ce <__swhatbuf_r+0x12>
 800f5ea:	9a01      	ldr	r2, [sp, #4]
 800f5ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f5f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f5f4:	425a      	negs	r2, r3
 800f5f6:	415a      	adcs	r2, r3
 800f5f8:	602a      	str	r2, [r5, #0]
 800f5fa:	e7ee      	b.n	800f5da <__swhatbuf_r+0x1e>
 800f5fc:	2340      	movs	r3, #64	; 0x40
 800f5fe:	2000      	movs	r0, #0
 800f600:	6023      	str	r3, [r4, #0]
 800f602:	b016      	add	sp, #88	; 0x58
 800f604:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f608 <__smakebuf_r>:
 800f608:	898b      	ldrh	r3, [r1, #12]
 800f60a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f60c:	079d      	lsls	r5, r3, #30
 800f60e:	4606      	mov	r6, r0
 800f610:	460c      	mov	r4, r1
 800f612:	d507      	bpl.n	800f624 <__smakebuf_r+0x1c>
 800f614:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f618:	6023      	str	r3, [r4, #0]
 800f61a:	6123      	str	r3, [r4, #16]
 800f61c:	2301      	movs	r3, #1
 800f61e:	6163      	str	r3, [r4, #20]
 800f620:	b002      	add	sp, #8
 800f622:	bd70      	pop	{r4, r5, r6, pc}
 800f624:	ab01      	add	r3, sp, #4
 800f626:	466a      	mov	r2, sp
 800f628:	f7ff ffc8 	bl	800f5bc <__swhatbuf_r>
 800f62c:	9900      	ldr	r1, [sp, #0]
 800f62e:	4605      	mov	r5, r0
 800f630:	4630      	mov	r0, r6
 800f632:	f000 f89d 	bl	800f770 <_malloc_r>
 800f636:	b948      	cbnz	r0, 800f64c <__smakebuf_r+0x44>
 800f638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f63c:	059a      	lsls	r2, r3, #22
 800f63e:	d4ef      	bmi.n	800f620 <__smakebuf_r+0x18>
 800f640:	f023 0303 	bic.w	r3, r3, #3
 800f644:	f043 0302 	orr.w	r3, r3, #2
 800f648:	81a3      	strh	r3, [r4, #12]
 800f64a:	e7e3      	b.n	800f614 <__smakebuf_r+0xc>
 800f64c:	4b0d      	ldr	r3, [pc, #52]	; (800f684 <__smakebuf_r+0x7c>)
 800f64e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f650:	89a3      	ldrh	r3, [r4, #12]
 800f652:	6020      	str	r0, [r4, #0]
 800f654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f658:	81a3      	strh	r3, [r4, #12]
 800f65a:	9b00      	ldr	r3, [sp, #0]
 800f65c:	6163      	str	r3, [r4, #20]
 800f65e:	9b01      	ldr	r3, [sp, #4]
 800f660:	6120      	str	r0, [r4, #16]
 800f662:	b15b      	cbz	r3, 800f67c <__smakebuf_r+0x74>
 800f664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f668:	4630      	mov	r0, r6
 800f66a:	f000 fd2b 	bl	80100c4 <_isatty_r>
 800f66e:	b128      	cbz	r0, 800f67c <__smakebuf_r+0x74>
 800f670:	89a3      	ldrh	r3, [r4, #12]
 800f672:	f023 0303 	bic.w	r3, r3, #3
 800f676:	f043 0301 	orr.w	r3, r3, #1
 800f67a:	81a3      	strh	r3, [r4, #12]
 800f67c:	89a0      	ldrh	r0, [r4, #12]
 800f67e:	4305      	orrs	r5, r0
 800f680:	81a5      	strh	r5, [r4, #12]
 800f682:	e7cd      	b.n	800f620 <__smakebuf_r+0x18>
 800f684:	0800f415 	.word	0x0800f415

0800f688 <malloc>:
 800f688:	4b02      	ldr	r3, [pc, #8]	; (800f694 <malloc+0xc>)
 800f68a:	4601      	mov	r1, r0
 800f68c:	6818      	ldr	r0, [r3, #0]
 800f68e:	f000 b86f 	b.w	800f770 <_malloc_r>
 800f692:	bf00      	nop
 800f694:	24000054 	.word	0x24000054

0800f698 <_free_r>:
 800f698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f69a:	2900      	cmp	r1, #0
 800f69c:	d044      	beq.n	800f728 <_free_r+0x90>
 800f69e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6a2:	9001      	str	r0, [sp, #4]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	f1a1 0404 	sub.w	r4, r1, #4
 800f6aa:	bfb8      	it	lt
 800f6ac:	18e4      	addlt	r4, r4, r3
 800f6ae:	f000 fd2b 	bl	8010108 <__malloc_lock>
 800f6b2:	4a1e      	ldr	r2, [pc, #120]	; (800f72c <_free_r+0x94>)
 800f6b4:	9801      	ldr	r0, [sp, #4]
 800f6b6:	6813      	ldr	r3, [r2, #0]
 800f6b8:	b933      	cbnz	r3, 800f6c8 <_free_r+0x30>
 800f6ba:	6063      	str	r3, [r4, #4]
 800f6bc:	6014      	str	r4, [r2, #0]
 800f6be:	b003      	add	sp, #12
 800f6c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6c4:	f000 bd26 	b.w	8010114 <__malloc_unlock>
 800f6c8:	42a3      	cmp	r3, r4
 800f6ca:	d908      	bls.n	800f6de <_free_r+0x46>
 800f6cc:	6825      	ldr	r5, [r4, #0]
 800f6ce:	1961      	adds	r1, r4, r5
 800f6d0:	428b      	cmp	r3, r1
 800f6d2:	bf01      	itttt	eq
 800f6d4:	6819      	ldreq	r1, [r3, #0]
 800f6d6:	685b      	ldreq	r3, [r3, #4]
 800f6d8:	1949      	addeq	r1, r1, r5
 800f6da:	6021      	streq	r1, [r4, #0]
 800f6dc:	e7ed      	b.n	800f6ba <_free_r+0x22>
 800f6de:	461a      	mov	r2, r3
 800f6e0:	685b      	ldr	r3, [r3, #4]
 800f6e2:	b10b      	cbz	r3, 800f6e8 <_free_r+0x50>
 800f6e4:	42a3      	cmp	r3, r4
 800f6e6:	d9fa      	bls.n	800f6de <_free_r+0x46>
 800f6e8:	6811      	ldr	r1, [r2, #0]
 800f6ea:	1855      	adds	r5, r2, r1
 800f6ec:	42a5      	cmp	r5, r4
 800f6ee:	d10b      	bne.n	800f708 <_free_r+0x70>
 800f6f0:	6824      	ldr	r4, [r4, #0]
 800f6f2:	4421      	add	r1, r4
 800f6f4:	1854      	adds	r4, r2, r1
 800f6f6:	42a3      	cmp	r3, r4
 800f6f8:	6011      	str	r1, [r2, #0]
 800f6fa:	d1e0      	bne.n	800f6be <_free_r+0x26>
 800f6fc:	681c      	ldr	r4, [r3, #0]
 800f6fe:	685b      	ldr	r3, [r3, #4]
 800f700:	6053      	str	r3, [r2, #4]
 800f702:	4421      	add	r1, r4
 800f704:	6011      	str	r1, [r2, #0]
 800f706:	e7da      	b.n	800f6be <_free_r+0x26>
 800f708:	d902      	bls.n	800f710 <_free_r+0x78>
 800f70a:	230c      	movs	r3, #12
 800f70c:	6003      	str	r3, [r0, #0]
 800f70e:	e7d6      	b.n	800f6be <_free_r+0x26>
 800f710:	6825      	ldr	r5, [r4, #0]
 800f712:	1961      	adds	r1, r4, r5
 800f714:	428b      	cmp	r3, r1
 800f716:	bf04      	itt	eq
 800f718:	6819      	ldreq	r1, [r3, #0]
 800f71a:	685b      	ldreq	r3, [r3, #4]
 800f71c:	6063      	str	r3, [r4, #4]
 800f71e:	bf04      	itt	eq
 800f720:	1949      	addeq	r1, r1, r5
 800f722:	6021      	streq	r1, [r4, #0]
 800f724:	6054      	str	r4, [r2, #4]
 800f726:	e7ca      	b.n	800f6be <_free_r+0x26>
 800f728:	b003      	add	sp, #12
 800f72a:	bd30      	pop	{r4, r5, pc}
 800f72c:	240e003c 	.word	0x240e003c

0800f730 <sbrk_aligned>:
 800f730:	b570      	push	{r4, r5, r6, lr}
 800f732:	4e0e      	ldr	r6, [pc, #56]	; (800f76c <sbrk_aligned+0x3c>)
 800f734:	460c      	mov	r4, r1
 800f736:	6831      	ldr	r1, [r6, #0]
 800f738:	4605      	mov	r5, r0
 800f73a:	b911      	cbnz	r1, 800f742 <sbrk_aligned+0x12>
 800f73c:	f000 fb7a 	bl	800fe34 <_sbrk_r>
 800f740:	6030      	str	r0, [r6, #0]
 800f742:	4621      	mov	r1, r4
 800f744:	4628      	mov	r0, r5
 800f746:	f000 fb75 	bl	800fe34 <_sbrk_r>
 800f74a:	1c43      	adds	r3, r0, #1
 800f74c:	d00a      	beq.n	800f764 <sbrk_aligned+0x34>
 800f74e:	1cc4      	adds	r4, r0, #3
 800f750:	f024 0403 	bic.w	r4, r4, #3
 800f754:	42a0      	cmp	r0, r4
 800f756:	d007      	beq.n	800f768 <sbrk_aligned+0x38>
 800f758:	1a21      	subs	r1, r4, r0
 800f75a:	4628      	mov	r0, r5
 800f75c:	f000 fb6a 	bl	800fe34 <_sbrk_r>
 800f760:	3001      	adds	r0, #1
 800f762:	d101      	bne.n	800f768 <sbrk_aligned+0x38>
 800f764:	f04f 34ff 	mov.w	r4, #4294967295
 800f768:	4620      	mov	r0, r4
 800f76a:	bd70      	pop	{r4, r5, r6, pc}
 800f76c:	240e0040 	.word	0x240e0040

0800f770 <_malloc_r>:
 800f770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f774:	1ccd      	adds	r5, r1, #3
 800f776:	f025 0503 	bic.w	r5, r5, #3
 800f77a:	3508      	adds	r5, #8
 800f77c:	2d0c      	cmp	r5, #12
 800f77e:	bf38      	it	cc
 800f780:	250c      	movcc	r5, #12
 800f782:	2d00      	cmp	r5, #0
 800f784:	4607      	mov	r7, r0
 800f786:	db01      	blt.n	800f78c <_malloc_r+0x1c>
 800f788:	42a9      	cmp	r1, r5
 800f78a:	d905      	bls.n	800f798 <_malloc_r+0x28>
 800f78c:	230c      	movs	r3, #12
 800f78e:	603b      	str	r3, [r7, #0]
 800f790:	2600      	movs	r6, #0
 800f792:	4630      	mov	r0, r6
 800f794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f798:	4e2e      	ldr	r6, [pc, #184]	; (800f854 <_malloc_r+0xe4>)
 800f79a:	f000 fcb5 	bl	8010108 <__malloc_lock>
 800f79e:	6833      	ldr	r3, [r6, #0]
 800f7a0:	461c      	mov	r4, r3
 800f7a2:	bb34      	cbnz	r4, 800f7f2 <_malloc_r+0x82>
 800f7a4:	4629      	mov	r1, r5
 800f7a6:	4638      	mov	r0, r7
 800f7a8:	f7ff ffc2 	bl	800f730 <sbrk_aligned>
 800f7ac:	1c43      	adds	r3, r0, #1
 800f7ae:	4604      	mov	r4, r0
 800f7b0:	d14d      	bne.n	800f84e <_malloc_r+0xde>
 800f7b2:	6834      	ldr	r4, [r6, #0]
 800f7b4:	4626      	mov	r6, r4
 800f7b6:	2e00      	cmp	r6, #0
 800f7b8:	d140      	bne.n	800f83c <_malloc_r+0xcc>
 800f7ba:	6823      	ldr	r3, [r4, #0]
 800f7bc:	4631      	mov	r1, r6
 800f7be:	4638      	mov	r0, r7
 800f7c0:	eb04 0803 	add.w	r8, r4, r3
 800f7c4:	f000 fb36 	bl	800fe34 <_sbrk_r>
 800f7c8:	4580      	cmp	r8, r0
 800f7ca:	d13a      	bne.n	800f842 <_malloc_r+0xd2>
 800f7cc:	6821      	ldr	r1, [r4, #0]
 800f7ce:	3503      	adds	r5, #3
 800f7d0:	1a6d      	subs	r5, r5, r1
 800f7d2:	f025 0503 	bic.w	r5, r5, #3
 800f7d6:	3508      	adds	r5, #8
 800f7d8:	2d0c      	cmp	r5, #12
 800f7da:	bf38      	it	cc
 800f7dc:	250c      	movcc	r5, #12
 800f7de:	4629      	mov	r1, r5
 800f7e0:	4638      	mov	r0, r7
 800f7e2:	f7ff ffa5 	bl	800f730 <sbrk_aligned>
 800f7e6:	3001      	adds	r0, #1
 800f7e8:	d02b      	beq.n	800f842 <_malloc_r+0xd2>
 800f7ea:	6823      	ldr	r3, [r4, #0]
 800f7ec:	442b      	add	r3, r5
 800f7ee:	6023      	str	r3, [r4, #0]
 800f7f0:	e00e      	b.n	800f810 <_malloc_r+0xa0>
 800f7f2:	6822      	ldr	r2, [r4, #0]
 800f7f4:	1b52      	subs	r2, r2, r5
 800f7f6:	d41e      	bmi.n	800f836 <_malloc_r+0xc6>
 800f7f8:	2a0b      	cmp	r2, #11
 800f7fa:	d916      	bls.n	800f82a <_malloc_r+0xba>
 800f7fc:	1961      	adds	r1, r4, r5
 800f7fe:	42a3      	cmp	r3, r4
 800f800:	6025      	str	r5, [r4, #0]
 800f802:	bf18      	it	ne
 800f804:	6059      	strne	r1, [r3, #4]
 800f806:	6863      	ldr	r3, [r4, #4]
 800f808:	bf08      	it	eq
 800f80a:	6031      	streq	r1, [r6, #0]
 800f80c:	5162      	str	r2, [r4, r5]
 800f80e:	604b      	str	r3, [r1, #4]
 800f810:	4638      	mov	r0, r7
 800f812:	f104 060b 	add.w	r6, r4, #11
 800f816:	f000 fc7d 	bl	8010114 <__malloc_unlock>
 800f81a:	f026 0607 	bic.w	r6, r6, #7
 800f81e:	1d23      	adds	r3, r4, #4
 800f820:	1af2      	subs	r2, r6, r3
 800f822:	d0b6      	beq.n	800f792 <_malloc_r+0x22>
 800f824:	1b9b      	subs	r3, r3, r6
 800f826:	50a3      	str	r3, [r4, r2]
 800f828:	e7b3      	b.n	800f792 <_malloc_r+0x22>
 800f82a:	6862      	ldr	r2, [r4, #4]
 800f82c:	42a3      	cmp	r3, r4
 800f82e:	bf0c      	ite	eq
 800f830:	6032      	streq	r2, [r6, #0]
 800f832:	605a      	strne	r2, [r3, #4]
 800f834:	e7ec      	b.n	800f810 <_malloc_r+0xa0>
 800f836:	4623      	mov	r3, r4
 800f838:	6864      	ldr	r4, [r4, #4]
 800f83a:	e7b2      	b.n	800f7a2 <_malloc_r+0x32>
 800f83c:	4634      	mov	r4, r6
 800f83e:	6876      	ldr	r6, [r6, #4]
 800f840:	e7b9      	b.n	800f7b6 <_malloc_r+0x46>
 800f842:	230c      	movs	r3, #12
 800f844:	603b      	str	r3, [r7, #0]
 800f846:	4638      	mov	r0, r7
 800f848:	f000 fc64 	bl	8010114 <__malloc_unlock>
 800f84c:	e7a1      	b.n	800f792 <_malloc_r+0x22>
 800f84e:	6025      	str	r5, [r4, #0]
 800f850:	e7de      	b.n	800f810 <_malloc_r+0xa0>
 800f852:	bf00      	nop
 800f854:	240e003c 	.word	0x240e003c

0800f858 <__sfputc_r>:
 800f858:	6893      	ldr	r3, [r2, #8]
 800f85a:	3b01      	subs	r3, #1
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	b410      	push	{r4}
 800f860:	6093      	str	r3, [r2, #8]
 800f862:	da08      	bge.n	800f876 <__sfputc_r+0x1e>
 800f864:	6994      	ldr	r4, [r2, #24]
 800f866:	42a3      	cmp	r3, r4
 800f868:	db01      	blt.n	800f86e <__sfputc_r+0x16>
 800f86a:	290a      	cmp	r1, #10
 800f86c:	d103      	bne.n	800f876 <__sfputc_r+0x1e>
 800f86e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f872:	f000 bb33 	b.w	800fedc <__swbuf_r>
 800f876:	6813      	ldr	r3, [r2, #0]
 800f878:	1c58      	adds	r0, r3, #1
 800f87a:	6010      	str	r0, [r2, #0]
 800f87c:	7019      	strb	r1, [r3, #0]
 800f87e:	4608      	mov	r0, r1
 800f880:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f884:	4770      	bx	lr

0800f886 <__sfputs_r>:
 800f886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f888:	4606      	mov	r6, r0
 800f88a:	460f      	mov	r7, r1
 800f88c:	4614      	mov	r4, r2
 800f88e:	18d5      	adds	r5, r2, r3
 800f890:	42ac      	cmp	r4, r5
 800f892:	d101      	bne.n	800f898 <__sfputs_r+0x12>
 800f894:	2000      	movs	r0, #0
 800f896:	e007      	b.n	800f8a8 <__sfputs_r+0x22>
 800f898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f89c:	463a      	mov	r2, r7
 800f89e:	4630      	mov	r0, r6
 800f8a0:	f7ff ffda 	bl	800f858 <__sfputc_r>
 800f8a4:	1c43      	adds	r3, r0, #1
 800f8a6:	d1f3      	bne.n	800f890 <__sfputs_r+0xa>
 800f8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f8ac <_vfiprintf_r>:
 800f8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b0:	460d      	mov	r5, r1
 800f8b2:	b09d      	sub	sp, #116	; 0x74
 800f8b4:	4614      	mov	r4, r2
 800f8b6:	4698      	mov	r8, r3
 800f8b8:	4606      	mov	r6, r0
 800f8ba:	b118      	cbz	r0, 800f8c4 <_vfiprintf_r+0x18>
 800f8bc:	6983      	ldr	r3, [r0, #24]
 800f8be:	b90b      	cbnz	r3, 800f8c4 <_vfiprintf_r+0x18>
 800f8c0:	f7ff fddc 	bl	800f47c <__sinit>
 800f8c4:	4b89      	ldr	r3, [pc, #548]	; (800faec <_vfiprintf_r+0x240>)
 800f8c6:	429d      	cmp	r5, r3
 800f8c8:	d11b      	bne.n	800f902 <_vfiprintf_r+0x56>
 800f8ca:	6875      	ldr	r5, [r6, #4]
 800f8cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8ce:	07d9      	lsls	r1, r3, #31
 800f8d0:	d405      	bmi.n	800f8de <_vfiprintf_r+0x32>
 800f8d2:	89ab      	ldrh	r3, [r5, #12]
 800f8d4:	059a      	lsls	r2, r3, #22
 800f8d6:	d402      	bmi.n	800f8de <_vfiprintf_r+0x32>
 800f8d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8da:	f7ff fe6d 	bl	800f5b8 <__retarget_lock_acquire_recursive>
 800f8de:	89ab      	ldrh	r3, [r5, #12]
 800f8e0:	071b      	lsls	r3, r3, #28
 800f8e2:	d501      	bpl.n	800f8e8 <_vfiprintf_r+0x3c>
 800f8e4:	692b      	ldr	r3, [r5, #16]
 800f8e6:	b9eb      	cbnz	r3, 800f924 <_vfiprintf_r+0x78>
 800f8e8:	4629      	mov	r1, r5
 800f8ea:	4630      	mov	r0, r6
 800f8ec:	f000 fb5a 	bl	800ffa4 <__swsetup_r>
 800f8f0:	b1c0      	cbz	r0, 800f924 <_vfiprintf_r+0x78>
 800f8f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8f4:	07dc      	lsls	r4, r3, #31
 800f8f6:	d50e      	bpl.n	800f916 <_vfiprintf_r+0x6a>
 800f8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8fc:	b01d      	add	sp, #116	; 0x74
 800f8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f902:	4b7b      	ldr	r3, [pc, #492]	; (800faf0 <_vfiprintf_r+0x244>)
 800f904:	429d      	cmp	r5, r3
 800f906:	d101      	bne.n	800f90c <_vfiprintf_r+0x60>
 800f908:	68b5      	ldr	r5, [r6, #8]
 800f90a:	e7df      	b.n	800f8cc <_vfiprintf_r+0x20>
 800f90c:	4b79      	ldr	r3, [pc, #484]	; (800faf4 <_vfiprintf_r+0x248>)
 800f90e:	429d      	cmp	r5, r3
 800f910:	bf08      	it	eq
 800f912:	68f5      	ldreq	r5, [r6, #12]
 800f914:	e7da      	b.n	800f8cc <_vfiprintf_r+0x20>
 800f916:	89ab      	ldrh	r3, [r5, #12]
 800f918:	0598      	lsls	r0, r3, #22
 800f91a:	d4ed      	bmi.n	800f8f8 <_vfiprintf_r+0x4c>
 800f91c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f91e:	f7ff fe4c 	bl	800f5ba <__retarget_lock_release_recursive>
 800f922:	e7e9      	b.n	800f8f8 <_vfiprintf_r+0x4c>
 800f924:	2300      	movs	r3, #0
 800f926:	9309      	str	r3, [sp, #36]	; 0x24
 800f928:	2320      	movs	r3, #32
 800f92a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f92e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f932:	2330      	movs	r3, #48	; 0x30
 800f934:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800faf8 <_vfiprintf_r+0x24c>
 800f938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f93c:	f04f 0901 	mov.w	r9, #1
 800f940:	4623      	mov	r3, r4
 800f942:	469a      	mov	sl, r3
 800f944:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f948:	b10a      	cbz	r2, 800f94e <_vfiprintf_r+0xa2>
 800f94a:	2a25      	cmp	r2, #37	; 0x25
 800f94c:	d1f9      	bne.n	800f942 <_vfiprintf_r+0x96>
 800f94e:	ebba 0b04 	subs.w	fp, sl, r4
 800f952:	d00b      	beq.n	800f96c <_vfiprintf_r+0xc0>
 800f954:	465b      	mov	r3, fp
 800f956:	4622      	mov	r2, r4
 800f958:	4629      	mov	r1, r5
 800f95a:	4630      	mov	r0, r6
 800f95c:	f7ff ff93 	bl	800f886 <__sfputs_r>
 800f960:	3001      	adds	r0, #1
 800f962:	f000 80aa 	beq.w	800faba <_vfiprintf_r+0x20e>
 800f966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f968:	445a      	add	r2, fp
 800f96a:	9209      	str	r2, [sp, #36]	; 0x24
 800f96c:	f89a 3000 	ldrb.w	r3, [sl]
 800f970:	2b00      	cmp	r3, #0
 800f972:	f000 80a2 	beq.w	800faba <_vfiprintf_r+0x20e>
 800f976:	2300      	movs	r3, #0
 800f978:	f04f 32ff 	mov.w	r2, #4294967295
 800f97c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f980:	f10a 0a01 	add.w	sl, sl, #1
 800f984:	9304      	str	r3, [sp, #16]
 800f986:	9307      	str	r3, [sp, #28]
 800f988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f98c:	931a      	str	r3, [sp, #104]	; 0x68
 800f98e:	4654      	mov	r4, sl
 800f990:	2205      	movs	r2, #5
 800f992:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f996:	4858      	ldr	r0, [pc, #352]	; (800faf8 <_vfiprintf_r+0x24c>)
 800f998:	f7f0 fcaa 	bl	80002f0 <memchr>
 800f99c:	9a04      	ldr	r2, [sp, #16]
 800f99e:	b9d8      	cbnz	r0, 800f9d8 <_vfiprintf_r+0x12c>
 800f9a0:	06d1      	lsls	r1, r2, #27
 800f9a2:	bf44      	itt	mi
 800f9a4:	2320      	movmi	r3, #32
 800f9a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9aa:	0713      	lsls	r3, r2, #28
 800f9ac:	bf44      	itt	mi
 800f9ae:	232b      	movmi	r3, #43	; 0x2b
 800f9b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800f9b8:	2b2a      	cmp	r3, #42	; 0x2a
 800f9ba:	d015      	beq.n	800f9e8 <_vfiprintf_r+0x13c>
 800f9bc:	9a07      	ldr	r2, [sp, #28]
 800f9be:	4654      	mov	r4, sl
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	f04f 0c0a 	mov.w	ip, #10
 800f9c6:	4621      	mov	r1, r4
 800f9c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9cc:	3b30      	subs	r3, #48	; 0x30
 800f9ce:	2b09      	cmp	r3, #9
 800f9d0:	d94e      	bls.n	800fa70 <_vfiprintf_r+0x1c4>
 800f9d2:	b1b0      	cbz	r0, 800fa02 <_vfiprintf_r+0x156>
 800f9d4:	9207      	str	r2, [sp, #28]
 800f9d6:	e014      	b.n	800fa02 <_vfiprintf_r+0x156>
 800f9d8:	eba0 0308 	sub.w	r3, r0, r8
 800f9dc:	fa09 f303 	lsl.w	r3, r9, r3
 800f9e0:	4313      	orrs	r3, r2
 800f9e2:	9304      	str	r3, [sp, #16]
 800f9e4:	46a2      	mov	sl, r4
 800f9e6:	e7d2      	b.n	800f98e <_vfiprintf_r+0xe2>
 800f9e8:	9b03      	ldr	r3, [sp, #12]
 800f9ea:	1d19      	adds	r1, r3, #4
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	9103      	str	r1, [sp, #12]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	bfbb      	ittet	lt
 800f9f4:	425b      	neglt	r3, r3
 800f9f6:	f042 0202 	orrlt.w	r2, r2, #2
 800f9fa:	9307      	strge	r3, [sp, #28]
 800f9fc:	9307      	strlt	r3, [sp, #28]
 800f9fe:	bfb8      	it	lt
 800fa00:	9204      	strlt	r2, [sp, #16]
 800fa02:	7823      	ldrb	r3, [r4, #0]
 800fa04:	2b2e      	cmp	r3, #46	; 0x2e
 800fa06:	d10c      	bne.n	800fa22 <_vfiprintf_r+0x176>
 800fa08:	7863      	ldrb	r3, [r4, #1]
 800fa0a:	2b2a      	cmp	r3, #42	; 0x2a
 800fa0c:	d135      	bne.n	800fa7a <_vfiprintf_r+0x1ce>
 800fa0e:	9b03      	ldr	r3, [sp, #12]
 800fa10:	1d1a      	adds	r2, r3, #4
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	9203      	str	r2, [sp, #12]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	bfb8      	it	lt
 800fa1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa1e:	3402      	adds	r4, #2
 800fa20:	9305      	str	r3, [sp, #20]
 800fa22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fb08 <_vfiprintf_r+0x25c>
 800fa26:	7821      	ldrb	r1, [r4, #0]
 800fa28:	2203      	movs	r2, #3
 800fa2a:	4650      	mov	r0, sl
 800fa2c:	f7f0 fc60 	bl	80002f0 <memchr>
 800fa30:	b140      	cbz	r0, 800fa44 <_vfiprintf_r+0x198>
 800fa32:	2340      	movs	r3, #64	; 0x40
 800fa34:	eba0 000a 	sub.w	r0, r0, sl
 800fa38:	fa03 f000 	lsl.w	r0, r3, r0
 800fa3c:	9b04      	ldr	r3, [sp, #16]
 800fa3e:	4303      	orrs	r3, r0
 800fa40:	3401      	adds	r4, #1
 800fa42:	9304      	str	r3, [sp, #16]
 800fa44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa48:	482c      	ldr	r0, [pc, #176]	; (800fafc <_vfiprintf_r+0x250>)
 800fa4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa4e:	2206      	movs	r2, #6
 800fa50:	f7f0 fc4e 	bl	80002f0 <memchr>
 800fa54:	2800      	cmp	r0, #0
 800fa56:	d03f      	beq.n	800fad8 <_vfiprintf_r+0x22c>
 800fa58:	4b29      	ldr	r3, [pc, #164]	; (800fb00 <_vfiprintf_r+0x254>)
 800fa5a:	bb1b      	cbnz	r3, 800faa4 <_vfiprintf_r+0x1f8>
 800fa5c:	9b03      	ldr	r3, [sp, #12]
 800fa5e:	3307      	adds	r3, #7
 800fa60:	f023 0307 	bic.w	r3, r3, #7
 800fa64:	3308      	adds	r3, #8
 800fa66:	9303      	str	r3, [sp, #12]
 800fa68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa6a:	443b      	add	r3, r7
 800fa6c:	9309      	str	r3, [sp, #36]	; 0x24
 800fa6e:	e767      	b.n	800f940 <_vfiprintf_r+0x94>
 800fa70:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa74:	460c      	mov	r4, r1
 800fa76:	2001      	movs	r0, #1
 800fa78:	e7a5      	b.n	800f9c6 <_vfiprintf_r+0x11a>
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	3401      	adds	r4, #1
 800fa7e:	9305      	str	r3, [sp, #20]
 800fa80:	4619      	mov	r1, r3
 800fa82:	f04f 0c0a 	mov.w	ip, #10
 800fa86:	4620      	mov	r0, r4
 800fa88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa8c:	3a30      	subs	r2, #48	; 0x30
 800fa8e:	2a09      	cmp	r2, #9
 800fa90:	d903      	bls.n	800fa9a <_vfiprintf_r+0x1ee>
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d0c5      	beq.n	800fa22 <_vfiprintf_r+0x176>
 800fa96:	9105      	str	r1, [sp, #20]
 800fa98:	e7c3      	b.n	800fa22 <_vfiprintf_r+0x176>
 800fa9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa9e:	4604      	mov	r4, r0
 800faa0:	2301      	movs	r3, #1
 800faa2:	e7f0      	b.n	800fa86 <_vfiprintf_r+0x1da>
 800faa4:	ab03      	add	r3, sp, #12
 800faa6:	9300      	str	r3, [sp, #0]
 800faa8:	462a      	mov	r2, r5
 800faaa:	4b16      	ldr	r3, [pc, #88]	; (800fb04 <_vfiprintf_r+0x258>)
 800faac:	a904      	add	r1, sp, #16
 800faae:	4630      	mov	r0, r6
 800fab0:	f3af 8000 	nop.w
 800fab4:	4607      	mov	r7, r0
 800fab6:	1c78      	adds	r0, r7, #1
 800fab8:	d1d6      	bne.n	800fa68 <_vfiprintf_r+0x1bc>
 800faba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fabc:	07d9      	lsls	r1, r3, #31
 800fabe:	d405      	bmi.n	800facc <_vfiprintf_r+0x220>
 800fac0:	89ab      	ldrh	r3, [r5, #12]
 800fac2:	059a      	lsls	r2, r3, #22
 800fac4:	d402      	bmi.n	800facc <_vfiprintf_r+0x220>
 800fac6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fac8:	f7ff fd77 	bl	800f5ba <__retarget_lock_release_recursive>
 800facc:	89ab      	ldrh	r3, [r5, #12]
 800face:	065b      	lsls	r3, r3, #25
 800fad0:	f53f af12 	bmi.w	800f8f8 <_vfiprintf_r+0x4c>
 800fad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fad6:	e711      	b.n	800f8fc <_vfiprintf_r+0x50>
 800fad8:	ab03      	add	r3, sp, #12
 800fada:	9300      	str	r3, [sp, #0]
 800fadc:	462a      	mov	r2, r5
 800fade:	4b09      	ldr	r3, [pc, #36]	; (800fb04 <_vfiprintf_r+0x258>)
 800fae0:	a904      	add	r1, sp, #16
 800fae2:	4630      	mov	r0, r6
 800fae4:	f000 f880 	bl	800fbe8 <_printf_i>
 800fae8:	e7e4      	b.n	800fab4 <_vfiprintf_r+0x208>
 800faea:	bf00      	nop
 800faec:	080107cc 	.word	0x080107cc
 800faf0:	080107ec 	.word	0x080107ec
 800faf4:	080107ac 	.word	0x080107ac
 800faf8:	0801080c 	.word	0x0801080c
 800fafc:	08010816 	.word	0x08010816
 800fb00:	00000000 	.word	0x00000000
 800fb04:	0800f887 	.word	0x0800f887
 800fb08:	08010812 	.word	0x08010812

0800fb0c <_printf_common>:
 800fb0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb10:	4616      	mov	r6, r2
 800fb12:	4699      	mov	r9, r3
 800fb14:	688a      	ldr	r2, [r1, #8]
 800fb16:	690b      	ldr	r3, [r1, #16]
 800fb18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	bfb8      	it	lt
 800fb20:	4613      	movlt	r3, r2
 800fb22:	6033      	str	r3, [r6, #0]
 800fb24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb28:	4607      	mov	r7, r0
 800fb2a:	460c      	mov	r4, r1
 800fb2c:	b10a      	cbz	r2, 800fb32 <_printf_common+0x26>
 800fb2e:	3301      	adds	r3, #1
 800fb30:	6033      	str	r3, [r6, #0]
 800fb32:	6823      	ldr	r3, [r4, #0]
 800fb34:	0699      	lsls	r1, r3, #26
 800fb36:	bf42      	ittt	mi
 800fb38:	6833      	ldrmi	r3, [r6, #0]
 800fb3a:	3302      	addmi	r3, #2
 800fb3c:	6033      	strmi	r3, [r6, #0]
 800fb3e:	6825      	ldr	r5, [r4, #0]
 800fb40:	f015 0506 	ands.w	r5, r5, #6
 800fb44:	d106      	bne.n	800fb54 <_printf_common+0x48>
 800fb46:	f104 0a19 	add.w	sl, r4, #25
 800fb4a:	68e3      	ldr	r3, [r4, #12]
 800fb4c:	6832      	ldr	r2, [r6, #0]
 800fb4e:	1a9b      	subs	r3, r3, r2
 800fb50:	42ab      	cmp	r3, r5
 800fb52:	dc26      	bgt.n	800fba2 <_printf_common+0x96>
 800fb54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb58:	1e13      	subs	r3, r2, #0
 800fb5a:	6822      	ldr	r2, [r4, #0]
 800fb5c:	bf18      	it	ne
 800fb5e:	2301      	movne	r3, #1
 800fb60:	0692      	lsls	r2, r2, #26
 800fb62:	d42b      	bmi.n	800fbbc <_printf_common+0xb0>
 800fb64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb68:	4649      	mov	r1, r9
 800fb6a:	4638      	mov	r0, r7
 800fb6c:	47c0      	blx	r8
 800fb6e:	3001      	adds	r0, #1
 800fb70:	d01e      	beq.n	800fbb0 <_printf_common+0xa4>
 800fb72:	6823      	ldr	r3, [r4, #0]
 800fb74:	68e5      	ldr	r5, [r4, #12]
 800fb76:	6832      	ldr	r2, [r6, #0]
 800fb78:	f003 0306 	and.w	r3, r3, #6
 800fb7c:	2b04      	cmp	r3, #4
 800fb7e:	bf08      	it	eq
 800fb80:	1aad      	subeq	r5, r5, r2
 800fb82:	68a3      	ldr	r3, [r4, #8]
 800fb84:	6922      	ldr	r2, [r4, #16]
 800fb86:	bf0c      	ite	eq
 800fb88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb8c:	2500      	movne	r5, #0
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	bfc4      	itt	gt
 800fb92:	1a9b      	subgt	r3, r3, r2
 800fb94:	18ed      	addgt	r5, r5, r3
 800fb96:	2600      	movs	r6, #0
 800fb98:	341a      	adds	r4, #26
 800fb9a:	42b5      	cmp	r5, r6
 800fb9c:	d11a      	bne.n	800fbd4 <_printf_common+0xc8>
 800fb9e:	2000      	movs	r0, #0
 800fba0:	e008      	b.n	800fbb4 <_printf_common+0xa8>
 800fba2:	2301      	movs	r3, #1
 800fba4:	4652      	mov	r2, sl
 800fba6:	4649      	mov	r1, r9
 800fba8:	4638      	mov	r0, r7
 800fbaa:	47c0      	blx	r8
 800fbac:	3001      	adds	r0, #1
 800fbae:	d103      	bne.n	800fbb8 <_printf_common+0xac>
 800fbb0:	f04f 30ff 	mov.w	r0, #4294967295
 800fbb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbb8:	3501      	adds	r5, #1
 800fbba:	e7c6      	b.n	800fb4a <_printf_common+0x3e>
 800fbbc:	18e1      	adds	r1, r4, r3
 800fbbe:	1c5a      	adds	r2, r3, #1
 800fbc0:	2030      	movs	r0, #48	; 0x30
 800fbc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fbc6:	4422      	add	r2, r4
 800fbc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fbcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fbd0:	3302      	adds	r3, #2
 800fbd2:	e7c7      	b.n	800fb64 <_printf_common+0x58>
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	4622      	mov	r2, r4
 800fbd8:	4649      	mov	r1, r9
 800fbda:	4638      	mov	r0, r7
 800fbdc:	47c0      	blx	r8
 800fbde:	3001      	adds	r0, #1
 800fbe0:	d0e6      	beq.n	800fbb0 <_printf_common+0xa4>
 800fbe2:	3601      	adds	r6, #1
 800fbe4:	e7d9      	b.n	800fb9a <_printf_common+0x8e>
	...

0800fbe8 <_printf_i>:
 800fbe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fbec:	7e0f      	ldrb	r7, [r1, #24]
 800fbee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fbf0:	2f78      	cmp	r7, #120	; 0x78
 800fbf2:	4691      	mov	r9, r2
 800fbf4:	4680      	mov	r8, r0
 800fbf6:	460c      	mov	r4, r1
 800fbf8:	469a      	mov	sl, r3
 800fbfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fbfe:	d807      	bhi.n	800fc10 <_printf_i+0x28>
 800fc00:	2f62      	cmp	r7, #98	; 0x62
 800fc02:	d80a      	bhi.n	800fc1a <_printf_i+0x32>
 800fc04:	2f00      	cmp	r7, #0
 800fc06:	f000 80d8 	beq.w	800fdba <_printf_i+0x1d2>
 800fc0a:	2f58      	cmp	r7, #88	; 0x58
 800fc0c:	f000 80a3 	beq.w	800fd56 <_printf_i+0x16e>
 800fc10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc18:	e03a      	b.n	800fc90 <_printf_i+0xa8>
 800fc1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc1e:	2b15      	cmp	r3, #21
 800fc20:	d8f6      	bhi.n	800fc10 <_printf_i+0x28>
 800fc22:	a101      	add	r1, pc, #4	; (adr r1, 800fc28 <_printf_i+0x40>)
 800fc24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc28:	0800fc81 	.word	0x0800fc81
 800fc2c:	0800fc95 	.word	0x0800fc95
 800fc30:	0800fc11 	.word	0x0800fc11
 800fc34:	0800fc11 	.word	0x0800fc11
 800fc38:	0800fc11 	.word	0x0800fc11
 800fc3c:	0800fc11 	.word	0x0800fc11
 800fc40:	0800fc95 	.word	0x0800fc95
 800fc44:	0800fc11 	.word	0x0800fc11
 800fc48:	0800fc11 	.word	0x0800fc11
 800fc4c:	0800fc11 	.word	0x0800fc11
 800fc50:	0800fc11 	.word	0x0800fc11
 800fc54:	0800fda1 	.word	0x0800fda1
 800fc58:	0800fcc5 	.word	0x0800fcc5
 800fc5c:	0800fd83 	.word	0x0800fd83
 800fc60:	0800fc11 	.word	0x0800fc11
 800fc64:	0800fc11 	.word	0x0800fc11
 800fc68:	0800fdc3 	.word	0x0800fdc3
 800fc6c:	0800fc11 	.word	0x0800fc11
 800fc70:	0800fcc5 	.word	0x0800fcc5
 800fc74:	0800fc11 	.word	0x0800fc11
 800fc78:	0800fc11 	.word	0x0800fc11
 800fc7c:	0800fd8b 	.word	0x0800fd8b
 800fc80:	682b      	ldr	r3, [r5, #0]
 800fc82:	1d1a      	adds	r2, r3, #4
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	602a      	str	r2, [r5, #0]
 800fc88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fc90:	2301      	movs	r3, #1
 800fc92:	e0a3      	b.n	800fddc <_printf_i+0x1f4>
 800fc94:	6820      	ldr	r0, [r4, #0]
 800fc96:	6829      	ldr	r1, [r5, #0]
 800fc98:	0606      	lsls	r6, r0, #24
 800fc9a:	f101 0304 	add.w	r3, r1, #4
 800fc9e:	d50a      	bpl.n	800fcb6 <_printf_i+0xce>
 800fca0:	680e      	ldr	r6, [r1, #0]
 800fca2:	602b      	str	r3, [r5, #0]
 800fca4:	2e00      	cmp	r6, #0
 800fca6:	da03      	bge.n	800fcb0 <_printf_i+0xc8>
 800fca8:	232d      	movs	r3, #45	; 0x2d
 800fcaa:	4276      	negs	r6, r6
 800fcac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcb0:	485e      	ldr	r0, [pc, #376]	; (800fe2c <_printf_i+0x244>)
 800fcb2:	230a      	movs	r3, #10
 800fcb4:	e019      	b.n	800fcea <_printf_i+0x102>
 800fcb6:	680e      	ldr	r6, [r1, #0]
 800fcb8:	602b      	str	r3, [r5, #0]
 800fcba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fcbe:	bf18      	it	ne
 800fcc0:	b236      	sxthne	r6, r6
 800fcc2:	e7ef      	b.n	800fca4 <_printf_i+0xbc>
 800fcc4:	682b      	ldr	r3, [r5, #0]
 800fcc6:	6820      	ldr	r0, [r4, #0]
 800fcc8:	1d19      	adds	r1, r3, #4
 800fcca:	6029      	str	r1, [r5, #0]
 800fccc:	0601      	lsls	r1, r0, #24
 800fcce:	d501      	bpl.n	800fcd4 <_printf_i+0xec>
 800fcd0:	681e      	ldr	r6, [r3, #0]
 800fcd2:	e002      	b.n	800fcda <_printf_i+0xf2>
 800fcd4:	0646      	lsls	r6, r0, #25
 800fcd6:	d5fb      	bpl.n	800fcd0 <_printf_i+0xe8>
 800fcd8:	881e      	ldrh	r6, [r3, #0]
 800fcda:	4854      	ldr	r0, [pc, #336]	; (800fe2c <_printf_i+0x244>)
 800fcdc:	2f6f      	cmp	r7, #111	; 0x6f
 800fcde:	bf0c      	ite	eq
 800fce0:	2308      	moveq	r3, #8
 800fce2:	230a      	movne	r3, #10
 800fce4:	2100      	movs	r1, #0
 800fce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fcea:	6865      	ldr	r5, [r4, #4]
 800fcec:	60a5      	str	r5, [r4, #8]
 800fcee:	2d00      	cmp	r5, #0
 800fcf0:	bfa2      	ittt	ge
 800fcf2:	6821      	ldrge	r1, [r4, #0]
 800fcf4:	f021 0104 	bicge.w	r1, r1, #4
 800fcf8:	6021      	strge	r1, [r4, #0]
 800fcfa:	b90e      	cbnz	r6, 800fd00 <_printf_i+0x118>
 800fcfc:	2d00      	cmp	r5, #0
 800fcfe:	d04d      	beq.n	800fd9c <_printf_i+0x1b4>
 800fd00:	4615      	mov	r5, r2
 800fd02:	fbb6 f1f3 	udiv	r1, r6, r3
 800fd06:	fb03 6711 	mls	r7, r3, r1, r6
 800fd0a:	5dc7      	ldrb	r7, [r0, r7]
 800fd0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fd10:	4637      	mov	r7, r6
 800fd12:	42bb      	cmp	r3, r7
 800fd14:	460e      	mov	r6, r1
 800fd16:	d9f4      	bls.n	800fd02 <_printf_i+0x11a>
 800fd18:	2b08      	cmp	r3, #8
 800fd1a:	d10b      	bne.n	800fd34 <_printf_i+0x14c>
 800fd1c:	6823      	ldr	r3, [r4, #0]
 800fd1e:	07de      	lsls	r6, r3, #31
 800fd20:	d508      	bpl.n	800fd34 <_printf_i+0x14c>
 800fd22:	6923      	ldr	r3, [r4, #16]
 800fd24:	6861      	ldr	r1, [r4, #4]
 800fd26:	4299      	cmp	r1, r3
 800fd28:	bfde      	ittt	le
 800fd2a:	2330      	movle	r3, #48	; 0x30
 800fd2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd30:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fd34:	1b52      	subs	r2, r2, r5
 800fd36:	6122      	str	r2, [r4, #16]
 800fd38:	f8cd a000 	str.w	sl, [sp]
 800fd3c:	464b      	mov	r3, r9
 800fd3e:	aa03      	add	r2, sp, #12
 800fd40:	4621      	mov	r1, r4
 800fd42:	4640      	mov	r0, r8
 800fd44:	f7ff fee2 	bl	800fb0c <_printf_common>
 800fd48:	3001      	adds	r0, #1
 800fd4a:	d14c      	bne.n	800fde6 <_printf_i+0x1fe>
 800fd4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd50:	b004      	add	sp, #16
 800fd52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd56:	4835      	ldr	r0, [pc, #212]	; (800fe2c <_printf_i+0x244>)
 800fd58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fd5c:	6829      	ldr	r1, [r5, #0]
 800fd5e:	6823      	ldr	r3, [r4, #0]
 800fd60:	f851 6b04 	ldr.w	r6, [r1], #4
 800fd64:	6029      	str	r1, [r5, #0]
 800fd66:	061d      	lsls	r5, r3, #24
 800fd68:	d514      	bpl.n	800fd94 <_printf_i+0x1ac>
 800fd6a:	07df      	lsls	r7, r3, #31
 800fd6c:	bf44      	itt	mi
 800fd6e:	f043 0320 	orrmi.w	r3, r3, #32
 800fd72:	6023      	strmi	r3, [r4, #0]
 800fd74:	b91e      	cbnz	r6, 800fd7e <_printf_i+0x196>
 800fd76:	6823      	ldr	r3, [r4, #0]
 800fd78:	f023 0320 	bic.w	r3, r3, #32
 800fd7c:	6023      	str	r3, [r4, #0]
 800fd7e:	2310      	movs	r3, #16
 800fd80:	e7b0      	b.n	800fce4 <_printf_i+0xfc>
 800fd82:	6823      	ldr	r3, [r4, #0]
 800fd84:	f043 0320 	orr.w	r3, r3, #32
 800fd88:	6023      	str	r3, [r4, #0]
 800fd8a:	2378      	movs	r3, #120	; 0x78
 800fd8c:	4828      	ldr	r0, [pc, #160]	; (800fe30 <_printf_i+0x248>)
 800fd8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fd92:	e7e3      	b.n	800fd5c <_printf_i+0x174>
 800fd94:	0659      	lsls	r1, r3, #25
 800fd96:	bf48      	it	mi
 800fd98:	b2b6      	uxthmi	r6, r6
 800fd9a:	e7e6      	b.n	800fd6a <_printf_i+0x182>
 800fd9c:	4615      	mov	r5, r2
 800fd9e:	e7bb      	b.n	800fd18 <_printf_i+0x130>
 800fda0:	682b      	ldr	r3, [r5, #0]
 800fda2:	6826      	ldr	r6, [r4, #0]
 800fda4:	6961      	ldr	r1, [r4, #20]
 800fda6:	1d18      	adds	r0, r3, #4
 800fda8:	6028      	str	r0, [r5, #0]
 800fdaa:	0635      	lsls	r5, r6, #24
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	d501      	bpl.n	800fdb4 <_printf_i+0x1cc>
 800fdb0:	6019      	str	r1, [r3, #0]
 800fdb2:	e002      	b.n	800fdba <_printf_i+0x1d2>
 800fdb4:	0670      	lsls	r0, r6, #25
 800fdb6:	d5fb      	bpl.n	800fdb0 <_printf_i+0x1c8>
 800fdb8:	8019      	strh	r1, [r3, #0]
 800fdba:	2300      	movs	r3, #0
 800fdbc:	6123      	str	r3, [r4, #16]
 800fdbe:	4615      	mov	r5, r2
 800fdc0:	e7ba      	b.n	800fd38 <_printf_i+0x150>
 800fdc2:	682b      	ldr	r3, [r5, #0]
 800fdc4:	1d1a      	adds	r2, r3, #4
 800fdc6:	602a      	str	r2, [r5, #0]
 800fdc8:	681d      	ldr	r5, [r3, #0]
 800fdca:	6862      	ldr	r2, [r4, #4]
 800fdcc:	2100      	movs	r1, #0
 800fdce:	4628      	mov	r0, r5
 800fdd0:	f7f0 fa8e 	bl	80002f0 <memchr>
 800fdd4:	b108      	cbz	r0, 800fdda <_printf_i+0x1f2>
 800fdd6:	1b40      	subs	r0, r0, r5
 800fdd8:	6060      	str	r0, [r4, #4]
 800fdda:	6863      	ldr	r3, [r4, #4]
 800fddc:	6123      	str	r3, [r4, #16]
 800fdde:	2300      	movs	r3, #0
 800fde0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fde4:	e7a8      	b.n	800fd38 <_printf_i+0x150>
 800fde6:	6923      	ldr	r3, [r4, #16]
 800fde8:	462a      	mov	r2, r5
 800fdea:	4649      	mov	r1, r9
 800fdec:	4640      	mov	r0, r8
 800fdee:	47d0      	blx	sl
 800fdf0:	3001      	adds	r0, #1
 800fdf2:	d0ab      	beq.n	800fd4c <_printf_i+0x164>
 800fdf4:	6823      	ldr	r3, [r4, #0]
 800fdf6:	079b      	lsls	r3, r3, #30
 800fdf8:	d413      	bmi.n	800fe22 <_printf_i+0x23a>
 800fdfa:	68e0      	ldr	r0, [r4, #12]
 800fdfc:	9b03      	ldr	r3, [sp, #12]
 800fdfe:	4298      	cmp	r0, r3
 800fe00:	bfb8      	it	lt
 800fe02:	4618      	movlt	r0, r3
 800fe04:	e7a4      	b.n	800fd50 <_printf_i+0x168>
 800fe06:	2301      	movs	r3, #1
 800fe08:	4632      	mov	r2, r6
 800fe0a:	4649      	mov	r1, r9
 800fe0c:	4640      	mov	r0, r8
 800fe0e:	47d0      	blx	sl
 800fe10:	3001      	adds	r0, #1
 800fe12:	d09b      	beq.n	800fd4c <_printf_i+0x164>
 800fe14:	3501      	adds	r5, #1
 800fe16:	68e3      	ldr	r3, [r4, #12]
 800fe18:	9903      	ldr	r1, [sp, #12]
 800fe1a:	1a5b      	subs	r3, r3, r1
 800fe1c:	42ab      	cmp	r3, r5
 800fe1e:	dcf2      	bgt.n	800fe06 <_printf_i+0x21e>
 800fe20:	e7eb      	b.n	800fdfa <_printf_i+0x212>
 800fe22:	2500      	movs	r5, #0
 800fe24:	f104 0619 	add.w	r6, r4, #25
 800fe28:	e7f5      	b.n	800fe16 <_printf_i+0x22e>
 800fe2a:	bf00      	nop
 800fe2c:	0801081d 	.word	0x0801081d
 800fe30:	0801082e 	.word	0x0801082e

0800fe34 <_sbrk_r>:
 800fe34:	b538      	push	{r3, r4, r5, lr}
 800fe36:	4d06      	ldr	r5, [pc, #24]	; (800fe50 <_sbrk_r+0x1c>)
 800fe38:	2300      	movs	r3, #0
 800fe3a:	4604      	mov	r4, r0
 800fe3c:	4608      	mov	r0, r1
 800fe3e:	602b      	str	r3, [r5, #0]
 800fe40:	f7f3 ffa0 	bl	8003d84 <_sbrk>
 800fe44:	1c43      	adds	r3, r0, #1
 800fe46:	d102      	bne.n	800fe4e <_sbrk_r+0x1a>
 800fe48:	682b      	ldr	r3, [r5, #0]
 800fe4a:	b103      	cbz	r3, 800fe4e <_sbrk_r+0x1a>
 800fe4c:	6023      	str	r3, [r4, #0]
 800fe4e:	bd38      	pop	{r3, r4, r5, pc}
 800fe50:	240e0044 	.word	0x240e0044

0800fe54 <__sread>:
 800fe54:	b510      	push	{r4, lr}
 800fe56:	460c      	mov	r4, r1
 800fe58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe5c:	f000 f960 	bl	8010120 <_read_r>
 800fe60:	2800      	cmp	r0, #0
 800fe62:	bfab      	itete	ge
 800fe64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fe66:	89a3      	ldrhlt	r3, [r4, #12]
 800fe68:	181b      	addge	r3, r3, r0
 800fe6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fe6e:	bfac      	ite	ge
 800fe70:	6563      	strge	r3, [r4, #84]	; 0x54
 800fe72:	81a3      	strhlt	r3, [r4, #12]
 800fe74:	bd10      	pop	{r4, pc}

0800fe76 <__swrite>:
 800fe76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe7a:	461f      	mov	r7, r3
 800fe7c:	898b      	ldrh	r3, [r1, #12]
 800fe7e:	05db      	lsls	r3, r3, #23
 800fe80:	4605      	mov	r5, r0
 800fe82:	460c      	mov	r4, r1
 800fe84:	4616      	mov	r6, r2
 800fe86:	d505      	bpl.n	800fe94 <__swrite+0x1e>
 800fe88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe8c:	2302      	movs	r3, #2
 800fe8e:	2200      	movs	r2, #0
 800fe90:	f000 f928 	bl	80100e4 <_lseek_r>
 800fe94:	89a3      	ldrh	r3, [r4, #12]
 800fe96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fe9e:	81a3      	strh	r3, [r4, #12]
 800fea0:	4632      	mov	r2, r6
 800fea2:	463b      	mov	r3, r7
 800fea4:	4628      	mov	r0, r5
 800fea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800feaa:	f000 b869 	b.w	800ff80 <_write_r>

0800feae <__sseek>:
 800feae:	b510      	push	{r4, lr}
 800feb0:	460c      	mov	r4, r1
 800feb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feb6:	f000 f915 	bl	80100e4 <_lseek_r>
 800feba:	1c43      	adds	r3, r0, #1
 800febc:	89a3      	ldrh	r3, [r4, #12]
 800febe:	bf15      	itete	ne
 800fec0:	6560      	strne	r0, [r4, #84]	; 0x54
 800fec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800feca:	81a3      	strheq	r3, [r4, #12]
 800fecc:	bf18      	it	ne
 800fece:	81a3      	strhne	r3, [r4, #12]
 800fed0:	bd10      	pop	{r4, pc}

0800fed2 <__sclose>:
 800fed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fed6:	f000 b8d3 	b.w	8010080 <_close_r>
	...

0800fedc <__swbuf_r>:
 800fedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fede:	460e      	mov	r6, r1
 800fee0:	4614      	mov	r4, r2
 800fee2:	4605      	mov	r5, r0
 800fee4:	b118      	cbz	r0, 800feee <__swbuf_r+0x12>
 800fee6:	6983      	ldr	r3, [r0, #24]
 800fee8:	b90b      	cbnz	r3, 800feee <__swbuf_r+0x12>
 800feea:	f7ff fac7 	bl	800f47c <__sinit>
 800feee:	4b21      	ldr	r3, [pc, #132]	; (800ff74 <__swbuf_r+0x98>)
 800fef0:	429c      	cmp	r4, r3
 800fef2:	d12b      	bne.n	800ff4c <__swbuf_r+0x70>
 800fef4:	686c      	ldr	r4, [r5, #4]
 800fef6:	69a3      	ldr	r3, [r4, #24]
 800fef8:	60a3      	str	r3, [r4, #8]
 800fefa:	89a3      	ldrh	r3, [r4, #12]
 800fefc:	071a      	lsls	r2, r3, #28
 800fefe:	d52f      	bpl.n	800ff60 <__swbuf_r+0x84>
 800ff00:	6923      	ldr	r3, [r4, #16]
 800ff02:	b36b      	cbz	r3, 800ff60 <__swbuf_r+0x84>
 800ff04:	6923      	ldr	r3, [r4, #16]
 800ff06:	6820      	ldr	r0, [r4, #0]
 800ff08:	1ac0      	subs	r0, r0, r3
 800ff0a:	6963      	ldr	r3, [r4, #20]
 800ff0c:	b2f6      	uxtb	r6, r6
 800ff0e:	4283      	cmp	r3, r0
 800ff10:	4637      	mov	r7, r6
 800ff12:	dc04      	bgt.n	800ff1e <__swbuf_r+0x42>
 800ff14:	4621      	mov	r1, r4
 800ff16:	4628      	mov	r0, r5
 800ff18:	f7ff fa1c 	bl	800f354 <_fflush_r>
 800ff1c:	bb30      	cbnz	r0, 800ff6c <__swbuf_r+0x90>
 800ff1e:	68a3      	ldr	r3, [r4, #8]
 800ff20:	3b01      	subs	r3, #1
 800ff22:	60a3      	str	r3, [r4, #8]
 800ff24:	6823      	ldr	r3, [r4, #0]
 800ff26:	1c5a      	adds	r2, r3, #1
 800ff28:	6022      	str	r2, [r4, #0]
 800ff2a:	701e      	strb	r6, [r3, #0]
 800ff2c:	6963      	ldr	r3, [r4, #20]
 800ff2e:	3001      	adds	r0, #1
 800ff30:	4283      	cmp	r3, r0
 800ff32:	d004      	beq.n	800ff3e <__swbuf_r+0x62>
 800ff34:	89a3      	ldrh	r3, [r4, #12]
 800ff36:	07db      	lsls	r3, r3, #31
 800ff38:	d506      	bpl.n	800ff48 <__swbuf_r+0x6c>
 800ff3a:	2e0a      	cmp	r6, #10
 800ff3c:	d104      	bne.n	800ff48 <__swbuf_r+0x6c>
 800ff3e:	4621      	mov	r1, r4
 800ff40:	4628      	mov	r0, r5
 800ff42:	f7ff fa07 	bl	800f354 <_fflush_r>
 800ff46:	b988      	cbnz	r0, 800ff6c <__swbuf_r+0x90>
 800ff48:	4638      	mov	r0, r7
 800ff4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff4c:	4b0a      	ldr	r3, [pc, #40]	; (800ff78 <__swbuf_r+0x9c>)
 800ff4e:	429c      	cmp	r4, r3
 800ff50:	d101      	bne.n	800ff56 <__swbuf_r+0x7a>
 800ff52:	68ac      	ldr	r4, [r5, #8]
 800ff54:	e7cf      	b.n	800fef6 <__swbuf_r+0x1a>
 800ff56:	4b09      	ldr	r3, [pc, #36]	; (800ff7c <__swbuf_r+0xa0>)
 800ff58:	429c      	cmp	r4, r3
 800ff5a:	bf08      	it	eq
 800ff5c:	68ec      	ldreq	r4, [r5, #12]
 800ff5e:	e7ca      	b.n	800fef6 <__swbuf_r+0x1a>
 800ff60:	4621      	mov	r1, r4
 800ff62:	4628      	mov	r0, r5
 800ff64:	f000 f81e 	bl	800ffa4 <__swsetup_r>
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	d0cb      	beq.n	800ff04 <__swbuf_r+0x28>
 800ff6c:	f04f 37ff 	mov.w	r7, #4294967295
 800ff70:	e7ea      	b.n	800ff48 <__swbuf_r+0x6c>
 800ff72:	bf00      	nop
 800ff74:	080107cc 	.word	0x080107cc
 800ff78:	080107ec 	.word	0x080107ec
 800ff7c:	080107ac 	.word	0x080107ac

0800ff80 <_write_r>:
 800ff80:	b538      	push	{r3, r4, r5, lr}
 800ff82:	4d07      	ldr	r5, [pc, #28]	; (800ffa0 <_write_r+0x20>)
 800ff84:	4604      	mov	r4, r0
 800ff86:	4608      	mov	r0, r1
 800ff88:	4611      	mov	r1, r2
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	602a      	str	r2, [r5, #0]
 800ff8e:	461a      	mov	r2, r3
 800ff90:	f7f2 ff5c 	bl	8002e4c <_write>
 800ff94:	1c43      	adds	r3, r0, #1
 800ff96:	d102      	bne.n	800ff9e <_write_r+0x1e>
 800ff98:	682b      	ldr	r3, [r5, #0]
 800ff9a:	b103      	cbz	r3, 800ff9e <_write_r+0x1e>
 800ff9c:	6023      	str	r3, [r4, #0]
 800ff9e:	bd38      	pop	{r3, r4, r5, pc}
 800ffa0:	240e0044 	.word	0x240e0044

0800ffa4 <__swsetup_r>:
 800ffa4:	4b32      	ldr	r3, [pc, #200]	; (8010070 <__swsetup_r+0xcc>)
 800ffa6:	b570      	push	{r4, r5, r6, lr}
 800ffa8:	681d      	ldr	r5, [r3, #0]
 800ffaa:	4606      	mov	r6, r0
 800ffac:	460c      	mov	r4, r1
 800ffae:	b125      	cbz	r5, 800ffba <__swsetup_r+0x16>
 800ffb0:	69ab      	ldr	r3, [r5, #24]
 800ffb2:	b913      	cbnz	r3, 800ffba <__swsetup_r+0x16>
 800ffb4:	4628      	mov	r0, r5
 800ffb6:	f7ff fa61 	bl	800f47c <__sinit>
 800ffba:	4b2e      	ldr	r3, [pc, #184]	; (8010074 <__swsetup_r+0xd0>)
 800ffbc:	429c      	cmp	r4, r3
 800ffbe:	d10f      	bne.n	800ffe0 <__swsetup_r+0x3c>
 800ffc0:	686c      	ldr	r4, [r5, #4]
 800ffc2:	89a3      	ldrh	r3, [r4, #12]
 800ffc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ffc8:	0719      	lsls	r1, r3, #28
 800ffca:	d42c      	bmi.n	8010026 <__swsetup_r+0x82>
 800ffcc:	06dd      	lsls	r5, r3, #27
 800ffce:	d411      	bmi.n	800fff4 <__swsetup_r+0x50>
 800ffd0:	2309      	movs	r3, #9
 800ffd2:	6033      	str	r3, [r6, #0]
 800ffd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ffd8:	81a3      	strh	r3, [r4, #12]
 800ffda:	f04f 30ff 	mov.w	r0, #4294967295
 800ffde:	e03e      	b.n	801005e <__swsetup_r+0xba>
 800ffe0:	4b25      	ldr	r3, [pc, #148]	; (8010078 <__swsetup_r+0xd4>)
 800ffe2:	429c      	cmp	r4, r3
 800ffe4:	d101      	bne.n	800ffea <__swsetup_r+0x46>
 800ffe6:	68ac      	ldr	r4, [r5, #8]
 800ffe8:	e7eb      	b.n	800ffc2 <__swsetup_r+0x1e>
 800ffea:	4b24      	ldr	r3, [pc, #144]	; (801007c <__swsetup_r+0xd8>)
 800ffec:	429c      	cmp	r4, r3
 800ffee:	bf08      	it	eq
 800fff0:	68ec      	ldreq	r4, [r5, #12]
 800fff2:	e7e6      	b.n	800ffc2 <__swsetup_r+0x1e>
 800fff4:	0758      	lsls	r0, r3, #29
 800fff6:	d512      	bpl.n	801001e <__swsetup_r+0x7a>
 800fff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fffa:	b141      	cbz	r1, 801000e <__swsetup_r+0x6a>
 800fffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010000:	4299      	cmp	r1, r3
 8010002:	d002      	beq.n	801000a <__swsetup_r+0x66>
 8010004:	4630      	mov	r0, r6
 8010006:	f7ff fb47 	bl	800f698 <_free_r>
 801000a:	2300      	movs	r3, #0
 801000c:	6363      	str	r3, [r4, #52]	; 0x34
 801000e:	89a3      	ldrh	r3, [r4, #12]
 8010010:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010014:	81a3      	strh	r3, [r4, #12]
 8010016:	2300      	movs	r3, #0
 8010018:	6063      	str	r3, [r4, #4]
 801001a:	6923      	ldr	r3, [r4, #16]
 801001c:	6023      	str	r3, [r4, #0]
 801001e:	89a3      	ldrh	r3, [r4, #12]
 8010020:	f043 0308 	orr.w	r3, r3, #8
 8010024:	81a3      	strh	r3, [r4, #12]
 8010026:	6923      	ldr	r3, [r4, #16]
 8010028:	b94b      	cbnz	r3, 801003e <__swsetup_r+0x9a>
 801002a:	89a3      	ldrh	r3, [r4, #12]
 801002c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010034:	d003      	beq.n	801003e <__swsetup_r+0x9a>
 8010036:	4621      	mov	r1, r4
 8010038:	4630      	mov	r0, r6
 801003a:	f7ff fae5 	bl	800f608 <__smakebuf_r>
 801003e:	89a0      	ldrh	r0, [r4, #12]
 8010040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010044:	f010 0301 	ands.w	r3, r0, #1
 8010048:	d00a      	beq.n	8010060 <__swsetup_r+0xbc>
 801004a:	2300      	movs	r3, #0
 801004c:	60a3      	str	r3, [r4, #8]
 801004e:	6963      	ldr	r3, [r4, #20]
 8010050:	425b      	negs	r3, r3
 8010052:	61a3      	str	r3, [r4, #24]
 8010054:	6923      	ldr	r3, [r4, #16]
 8010056:	b943      	cbnz	r3, 801006a <__swsetup_r+0xc6>
 8010058:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801005c:	d1ba      	bne.n	800ffd4 <__swsetup_r+0x30>
 801005e:	bd70      	pop	{r4, r5, r6, pc}
 8010060:	0781      	lsls	r1, r0, #30
 8010062:	bf58      	it	pl
 8010064:	6963      	ldrpl	r3, [r4, #20]
 8010066:	60a3      	str	r3, [r4, #8]
 8010068:	e7f4      	b.n	8010054 <__swsetup_r+0xb0>
 801006a:	2000      	movs	r0, #0
 801006c:	e7f7      	b.n	801005e <__swsetup_r+0xba>
 801006e:	bf00      	nop
 8010070:	24000054 	.word	0x24000054
 8010074:	080107cc 	.word	0x080107cc
 8010078:	080107ec 	.word	0x080107ec
 801007c:	080107ac 	.word	0x080107ac

08010080 <_close_r>:
 8010080:	b538      	push	{r3, r4, r5, lr}
 8010082:	4d06      	ldr	r5, [pc, #24]	; (801009c <_close_r+0x1c>)
 8010084:	2300      	movs	r3, #0
 8010086:	4604      	mov	r4, r0
 8010088:	4608      	mov	r0, r1
 801008a:	602b      	str	r3, [r5, #0]
 801008c:	f7f2 ff0a 	bl	8002ea4 <_close>
 8010090:	1c43      	adds	r3, r0, #1
 8010092:	d102      	bne.n	801009a <_close_r+0x1a>
 8010094:	682b      	ldr	r3, [r5, #0]
 8010096:	b103      	cbz	r3, 801009a <_close_r+0x1a>
 8010098:	6023      	str	r3, [r4, #0]
 801009a:	bd38      	pop	{r3, r4, r5, pc}
 801009c:	240e0044 	.word	0x240e0044

080100a0 <_fstat_r>:
 80100a0:	b538      	push	{r3, r4, r5, lr}
 80100a2:	4d07      	ldr	r5, [pc, #28]	; (80100c0 <_fstat_r+0x20>)
 80100a4:	2300      	movs	r3, #0
 80100a6:	4604      	mov	r4, r0
 80100a8:	4608      	mov	r0, r1
 80100aa:	4611      	mov	r1, r2
 80100ac:	602b      	str	r3, [r5, #0]
 80100ae:	f7f2 ff39 	bl	8002f24 <_fstat>
 80100b2:	1c43      	adds	r3, r0, #1
 80100b4:	d102      	bne.n	80100bc <_fstat_r+0x1c>
 80100b6:	682b      	ldr	r3, [r5, #0]
 80100b8:	b103      	cbz	r3, 80100bc <_fstat_r+0x1c>
 80100ba:	6023      	str	r3, [r4, #0]
 80100bc:	bd38      	pop	{r3, r4, r5, pc}
 80100be:	bf00      	nop
 80100c0:	240e0044 	.word	0x240e0044

080100c4 <_isatty_r>:
 80100c4:	b538      	push	{r3, r4, r5, lr}
 80100c6:	4d06      	ldr	r5, [pc, #24]	; (80100e0 <_isatty_r+0x1c>)
 80100c8:	2300      	movs	r3, #0
 80100ca:	4604      	mov	r4, r0
 80100cc:	4608      	mov	r0, r1
 80100ce:	602b      	str	r3, [r5, #0]
 80100d0:	f7f2 fea6 	bl	8002e20 <_isatty>
 80100d4:	1c43      	adds	r3, r0, #1
 80100d6:	d102      	bne.n	80100de <_isatty_r+0x1a>
 80100d8:	682b      	ldr	r3, [r5, #0]
 80100da:	b103      	cbz	r3, 80100de <_isatty_r+0x1a>
 80100dc:	6023      	str	r3, [r4, #0]
 80100de:	bd38      	pop	{r3, r4, r5, pc}
 80100e0:	240e0044 	.word	0x240e0044

080100e4 <_lseek_r>:
 80100e4:	b538      	push	{r3, r4, r5, lr}
 80100e6:	4d07      	ldr	r5, [pc, #28]	; (8010104 <_lseek_r+0x20>)
 80100e8:	4604      	mov	r4, r0
 80100ea:	4608      	mov	r0, r1
 80100ec:	4611      	mov	r1, r2
 80100ee:	2200      	movs	r2, #0
 80100f0:	602a      	str	r2, [r5, #0]
 80100f2:	461a      	mov	r2, r3
 80100f4:	f7f3 fe38 	bl	8003d68 <_lseek>
 80100f8:	1c43      	adds	r3, r0, #1
 80100fa:	d102      	bne.n	8010102 <_lseek_r+0x1e>
 80100fc:	682b      	ldr	r3, [r5, #0]
 80100fe:	b103      	cbz	r3, 8010102 <_lseek_r+0x1e>
 8010100:	6023      	str	r3, [r4, #0]
 8010102:	bd38      	pop	{r3, r4, r5, pc}
 8010104:	240e0044 	.word	0x240e0044

08010108 <__malloc_lock>:
 8010108:	4801      	ldr	r0, [pc, #4]	; (8010110 <__malloc_lock+0x8>)
 801010a:	f7ff ba55 	b.w	800f5b8 <__retarget_lock_acquire_recursive>
 801010e:	bf00      	nop
 8010110:	240e0038 	.word	0x240e0038

08010114 <__malloc_unlock>:
 8010114:	4801      	ldr	r0, [pc, #4]	; (801011c <__malloc_unlock+0x8>)
 8010116:	f7ff ba50 	b.w	800f5ba <__retarget_lock_release_recursive>
 801011a:	bf00      	nop
 801011c:	240e0038 	.word	0x240e0038

08010120 <_read_r>:
 8010120:	b538      	push	{r3, r4, r5, lr}
 8010122:	4d07      	ldr	r5, [pc, #28]	; (8010140 <_read_r+0x20>)
 8010124:	4604      	mov	r4, r0
 8010126:	4608      	mov	r0, r1
 8010128:	4611      	mov	r1, r2
 801012a:	2200      	movs	r2, #0
 801012c:	602a      	str	r2, [r5, #0]
 801012e:	461a      	mov	r2, r3
 8010130:	f7f2 fed0 	bl	8002ed4 <_read>
 8010134:	1c43      	adds	r3, r0, #1
 8010136:	d102      	bne.n	801013e <_read_r+0x1e>
 8010138:	682b      	ldr	r3, [r5, #0]
 801013a:	b103      	cbz	r3, 801013e <_read_r+0x1e>
 801013c:	6023      	str	r3, [r4, #0]
 801013e:	bd38      	pop	{r3, r4, r5, pc}
 8010140:	240e0044 	.word	0x240e0044

08010144 <_init>:
 8010144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010146:	bf00      	nop
 8010148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801014a:	bc08      	pop	{r3}
 801014c:	469e      	mov	lr, r3
 801014e:	4770      	bx	lr

08010150 <_fini>:
 8010150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010152:	bf00      	nop
 8010154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010156:	bc08      	pop	{r3}
 8010158:	469e      	mov	lr, r3
 801015a:	4770      	bx	lr
